/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'vpc.aliyuncs.com',
    cn-beijing = 'vpc.aliyuncs.com',
    cn-hangzhou = 'vpc.aliyuncs.com',
    cn-shanghai = 'vpc.aliyuncs.com',
    cn-shenzhen = 'vpc.aliyuncs.com',
    cn-hongkong = 'vpc.aliyuncs.com',
    ap-southeast-1 = 'vpc.aliyuncs.com',
    us-east-1 = 'vpc.aliyuncs.com',
    us-west-1 = 'vpc.aliyuncs.com',
    cn-shanghai-finance-1 = 'vpc.aliyuncs.com',
    cn-shenzhen-finance-1 = 'vpc.aliyuncs.com',
    cn-north-2-gov-1 = 'vpc.aliyuncs.com',
    ap-northeast-2-pop = 'vpc.aliyuncs.com',
    cn-beijing-finance-pop = 'vpc.aliyuncs.com',
    cn-beijing-gov-1 = 'vpc.aliyuncs.com',
    cn-beijing-nu16-b01 = 'vpc.aliyuncs.com',
    cn-edge-1 = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    cn-fujian = 'vpc.aliyuncs.com',
    cn-haidian-cm12-c01 = 'vpc.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'vpc.aliyuncs.com',
    cn-hangzhou-finance = 'vpc.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'vpc.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'vpc.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'vpc.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'vpc.aliyuncs.com',
    cn-hangzhou-test-306 = 'vpc.aliyuncs.com',
    cn-hongkong-finance-pop = 'vpc.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    cn-qingdao-nebula = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    cn-shanghai-et15-b01 = 'vpc.aliyuncs.com',
    cn-shanghai-et2-b01 = 'vpc.aliyuncs.com',
    cn-shanghai-inner = 'vpc.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'vpc.aliyuncs.com',
    cn-shenzhen-inner = 'vpc.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'vpc.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'vpc.aliyuncs.com',
    cn-wuhan = 'vpc.aliyuncs.com',
    cn-yushanfang = 'vpc.aliyuncs.com',
    cn-zhangbei = 'vpc.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'vpc.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'vpc.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    eu-west-1-oxs = 'vpc-nebula.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'vpc.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('vpc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urz****'),
}

model ActivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
}

model ActivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActivateRouterInterfaceResponseBody(name='body'),
}

async function activateRouterInterfaceWithOptions(request: ActivateRouterInterfaceRequest, runtime: Util.RuntimeOptions): ActivateRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateRouterInterface',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateRouterInterface(request: ActivateRouterInterfaceRequest): ActivateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateRouterInterfaceWithOptions(request, runtime);
}

model ActiveFlowLogRequest {
  flowLogId?: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ActiveFlowLogResponseBody = {
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
}

model ActiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActiveFlowLogResponseBody(name='body'),
}

async function activeFlowLogWithOptions(request: ActiveFlowLogRequest, runtime: Util.RuntimeOptions): ActiveFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActiveFlowLog',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activeFlowLog(request: ActiveFlowLogRequest): ActiveFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeFlowLogWithOptions(request, runtime);
}

model AddBgpNetworkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dstCidrBlock?: string(name='DstCidrBlock', example='10.10.XX.XX/32'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerId?: string(name='RouterId', example='vrt-2zeo3xzyf38r4u******'),
  vpcId?: string(name='VpcId', example='vpc-bp1qpo0kug3a2*****'),
}

model AddBgpNetworkResponseBody = {
  requestId?: string(name='RequestId', example='9C7FA9D6-72E0-48A9-A9C3-2DA8569CD5EB'),
}

model AddBgpNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddBgpNetworkResponseBody(name='body'),
}

async function addBgpNetworkWithOptions(request: AddBgpNetworkRequest, runtime: Util.RuntimeOptions): AddBgpNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dstCidrBlock)) {
    query['DstCidrBlock'] = request.dstCidrBlock;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddBgpNetwork',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addBgpNetwork(request: AddBgpNetworkRequest): AddBgpNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBgpNetworkWithOptions(request, runtime);
}

model AddCommonBandwidthPackageIpRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqasdf****'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  ipInstanceId?: string(name='IpInstanceId', example='eip-2zeerraiwb7uqwed****'),
  ipType?: string(name='IpType', example='EIP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddCommonBandwidthPackageIpResponseBody = {
  requestId?: string(name='RequestId', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddCommonBandwidthPackageIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCommonBandwidthPackageIpResponseBody(name='body'),
}

async function addCommonBandwidthPackageIpWithOptions(request: AddCommonBandwidthPackageIpRequest, runtime: Util.RuntimeOptions): AddCommonBandwidthPackageIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipInstanceId)) {
    query['IpInstanceId'] = request.ipInstanceId;
  }
  if (!Util.isUnset(request.ipType)) {
    query['IpType'] = request.ipType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCommonBandwidthPackageIp',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCommonBandwidthPackageIp(request: AddCommonBandwidthPackageIpRequest): AddCommonBandwidthPackageIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCommonBandwidthPackageIpWithOptions(request, runtime);
}

model AddCommonBandwidthPackageIpsRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqasdf****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ipInstanceIds?: [ string ](name='IpInstanceIds'),
  ipType?: string(name='IpType', example='EIP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddCommonBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddCommonBandwidthPackageIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCommonBandwidthPackageIpsResponseBody(name='body'),
}

async function addCommonBandwidthPackageIpsWithOptions(request: AddCommonBandwidthPackageIpsRequest, runtime: Util.RuntimeOptions): AddCommonBandwidthPackageIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipInstanceIds)) {
    query['IpInstanceIds'] = request.ipInstanceIds;
  }
  if (!Util.isUnset(request.ipType)) {
    query['IpType'] = request.ipType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCommonBandwidthPackageIps',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCommonBandwidthPackageIps(request: AddCommonBandwidthPackageIpsRequest): AddCommonBandwidthPackageIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCommonBandwidthPackageIpsWithOptions(request, runtime);
}

model AddGlobalAccelerationInstanceIpRequest {
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-Ldefrgbttnyyf****'),
  ipInstanceId?: string(name='IpInstanceId', example='eip-rw434rwfdeaf****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddGlobalAccelerationInstanceIpResponseBody = {
  requestId?: string(name='RequestId', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddGlobalAccelerationInstanceIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGlobalAccelerationInstanceIpResponseBody(name='body'),
}

async function addGlobalAccelerationInstanceIpWithOptions(request: AddGlobalAccelerationInstanceIpRequest, runtime: Util.RuntimeOptions): AddGlobalAccelerationInstanceIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalAccelerationInstanceId)) {
    query['GlobalAccelerationInstanceId'] = request.globalAccelerationInstanceId;
  }
  if (!Util.isUnset(request.ipInstanceId)) {
    query['IpInstanceId'] = request.ipInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGlobalAccelerationInstanceIp',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGlobalAccelerationInstanceIp(request: AddGlobalAccelerationInstanceIpRequest): AddGlobalAccelerationInstanceIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGlobalAccelerationInstanceIpWithOptions(request, runtime);
}

model AddIPv6TranslatorAclListEntryRequest {
  aclEntryComment?: string(name='AclEntryComment', example='clientIP1'),
  aclEntryIp?: string(name='AclEntryIp', example='12XX:0:0:dc30::0102'),
  aclId?: string(name='AclId', example='ipv6transacl-bp1dcdvfe2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddIPv6TranslatorAclListEntryResponseBody = {
  aclEntryId?: string(name='AclEntryId', example='ipv6transaclentry-bp105jrs****'),
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-defr345'),
}

model AddIPv6TranslatorAclListEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddIPv6TranslatorAclListEntryResponseBody(name='body'),
}

async function addIPv6TranslatorAclListEntryWithOptions(request: AddIPv6TranslatorAclListEntryRequest, runtime: Util.RuntimeOptions): AddIPv6TranslatorAclListEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclEntryComment)) {
    query['AclEntryComment'] = request.aclEntryComment;
  }
  if (!Util.isUnset(request.aclEntryIp)) {
    query['AclEntryIp'] = request.aclEntryIp;
  }
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddIPv6TranslatorAclListEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addIPv6TranslatorAclListEntry(request: AddIPv6TranslatorAclListEntryRequest): AddIPv6TranslatorAclListEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIPv6TranslatorAclListEntryWithOptions(request, runtime);
}

model AddPublicIpAddressPoolCidrBlockRequest {
  cidrBlock?: string(name='CidrBlock', example='47.0.XX.XX/24'),
  cidrMask?: int32(name='CidrMask'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddPublicIpAddressPoolCidrBlockResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model AddPublicIpAddressPoolCidrBlockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddPublicIpAddressPoolCidrBlockResponseBody(name='body'),
}

async function addPublicIpAddressPoolCidrBlockWithOptions(request: AddPublicIpAddressPoolCidrBlockRequest, runtime: Util.RuntimeOptions): AddPublicIpAddressPoolCidrBlockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.cidrMask)) {
    query['CidrMask'] = request.cidrMask;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publicIpAddressPoolId)) {
    query['PublicIpAddressPoolId'] = request.publicIpAddressPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPublicIpAddressPoolCidrBlock',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPublicIpAddressPoolCidrBlock(request: AddPublicIpAddressPoolCidrBlockRequest): AddPublicIpAddressPoolCidrBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPublicIpAddressPoolCidrBlockWithOptions(request, runtime);
}

model AddSourcesToTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****'),
  trafficMirrorSourceIds?: [ string ](name='TrafficMirrorSourceIds', example='eni-j6ccmrl8z3xkvxgw****'),
}

model AddSourcesToTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', example='87F70089-5B38-41A8-BAD8-0B55E2F8DC57'),
}

model AddSourcesToTrafficMirrorSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSourcesToTrafficMirrorSessionResponseBody(name='body'),
}

async function addSourcesToTrafficMirrorSessionWithOptions(request: AddSourcesToTrafficMirrorSessionRequest, runtime: Util.RuntimeOptions): AddSourcesToTrafficMirrorSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorSessionId)) {
    query['TrafficMirrorSessionId'] = request.trafficMirrorSessionId;
  }
  if (!Util.isUnset(request.trafficMirrorSourceIds)) {
    query['TrafficMirrorSourceIds'] = request.trafficMirrorSourceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSourcesToTrafficMirrorSession',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSourcesToTrafficMirrorSession(request: AddSourcesToTrafficMirrorSessionRequest): AddSourcesToTrafficMirrorSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSourcesToTrafficMirrorSessionWithOptions(request, runtime);
}

model AllocateEipAddressRequest {
  activityId?: long(name='ActivityId', example='123456'),
  autoPay?: boolean(name='AutoPay', example='false'),
  bandwidth?: string(name='Bandwidth', example='5'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', example='test'),
  ISP?: string(name='ISP', example='BGP'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
  name?: string(name='Name', example='EIP1'),
  netmode?: string(name='Netmode', example='public'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', example='1'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-2vc0kxcedhquybdsz****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazffggds****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', example='AntiDDoS_Enhanced'),
}

model AllocateEipAddressResponseBody = {
  allocationId?: string(name='AllocationId', example='eip-25877c70gddh****'),
  eipAddress?: string(name='EipAddress', example='192.0.XX.XX'),
  orderId?: long(name='OrderId', example='10'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazfdgdg****'),
}

model AllocateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateEipAddressResponseBody(name='body'),
}

async function allocateEipAddressWithOptions(request: AllocateEipAddressRequest, runtime: Util.RuntimeOptions): AllocateEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netmode)) {
    query['Netmode'] = request.netmode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.publicIpAddressPoolId)) {
    query['PublicIpAddressPoolId'] = request.publicIpAddressPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityProtectionTypes)) {
    query['SecurityProtectionTypes'] = request.securityProtectionTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateEipAddress',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateEipAddress(request: AllocateEipAddressRequest): AllocateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateEipAddressWithOptions(request, runtime);
}

model AllocateEipAddressProRequest {
  autoPay?: boolean(name='AutoPay', example='true'),
  bandwidth?: string(name='Bandwidth', example='5'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe6****'),
  ISP?: string(name='ISP', example='BGP'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  instanceId?: string(name='InstanceId', example='eip-25877c70gddh****'),
  internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
  ipAddress?: string(name='IpAddress', example='192.0.XX.XX'),
  netmode?: string(name='Netmode', example='public'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', example='1'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-2vc0kxcedhquybdsz****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-resourcegroup****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes'),
}

model AllocateEipAddressProResponseBody = {
  allocationId?: string(name='AllocationId', example='eip-25877c70gddh****'),
  eipAddress?: string(name='EipAddress', example='192.0.XX.XX'),
  orderId?: long(name='OrderId', example='20190000'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-resourcegroup****'),
}

model AllocateEipAddressProResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateEipAddressProResponseBody(name='body'),
}

async function allocateEipAddressProWithOptions(request: AllocateEipAddressProRequest, runtime: Util.RuntimeOptions): AllocateEipAddressProResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.netmode)) {
    query['Netmode'] = request.netmode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.publicIpAddressPoolId)) {
    query['PublicIpAddressPoolId'] = request.publicIpAddressPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityProtectionTypes)) {
    query['SecurityProtectionTypes'] = request.securityProtectionTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateEipAddressPro',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateEipAddressPro(request: AllocateEipAddressProRequest): AllocateEipAddressProResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateEipAddressProWithOptions(request, runtime);
}

model AllocateEipSegmentAddressRequest {
  bandwidth?: string(name='Bandwidth', example='5'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  eipMask?: string(name='EipMask', example='28'),
  internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
  isp?: string(name='Isp', example='BGP'),
  netmode?: string(name='Netmode', example='public'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateEipSegmentAddressResponseBody = {
  eipSegmentInstanceId?: string(name='EipSegmentInstanceId', example='eipsg-2zett8ba055tbsxme****'),
  orderId?: long(name='OrderId', example='2022****'),
  requestId?: string(name='RequestId', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model AllocateEipSegmentAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateEipSegmentAddressResponseBody(name='body'),
}

async function allocateEipSegmentAddressWithOptions(request: AllocateEipSegmentAddressRequest, runtime: Util.RuntimeOptions): AllocateEipSegmentAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eipMask)) {
    query['EipMask'] = request.eipMask;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.netmode)) {
    query['Netmode'] = request.netmode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateEipSegmentAddress',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateEipSegmentAddress(request: AllocateEipSegmentAddressRequest): AllocateEipSegmentAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateEipSegmentAddressWithOptions(request, runtime);
}

model AllocateIpv6InternetBandwidthRequest {
  bandwidth?: int32(name='Bandwidth', example='2'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateIpv6InternetBandwidthResponseBody = {
  internetBandwidthId?: string(name='InternetBandwidthId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  requestId?: string(name='RequestId', example='6972A26E-99B1-4367-9890-FBDEBB0F5E7D'),
}

model AllocateIpv6InternetBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateIpv6InternetBandwidthResponseBody(name='body'),
}

async function allocateIpv6InternetBandwidthWithOptions(request: AllocateIpv6InternetBandwidthRequest, runtime: Util.RuntimeOptions): AllocateIpv6InternetBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.ipv6AddressId)) {
    query['Ipv6AddressId'] = request.ipv6AddressId;
  }
  if (!Util.isUnset(request.ipv6GatewayId)) {
    query['Ipv6GatewayId'] = request.ipv6GatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateIpv6InternetBandwidth',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateIpv6InternetBandwidth(request: AllocateIpv6InternetBandwidthRequest): AllocateIpv6InternetBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateIpv6InternetBandwidthWithOptions(request, runtime);
}

model AllocateVpcIpv6CidrRequest {
  addressPoolType?: string(name='AddressPoolType', example='custom'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
  ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateVpcIpv6CidrResponseBody = {
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
  requestId?: string(name='RequestId', example='D20C13EA-2584-53BC-8393-69DE6D98EFF1'),
}

model AllocateVpcIpv6CidrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateVpcIpv6CidrResponseBody(name='body'),
}

async function allocateVpcIpv6CidrWithOptions(request: AllocateVpcIpv6CidrRequest, runtime: Util.RuntimeOptions): AllocateVpcIpv6CidrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressPoolType)) {
    query['AddressPoolType'] = request.addressPoolType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv6CidrBlock)) {
    query['Ipv6CidrBlock'] = request.ipv6CidrBlock;
  }
  if (!Util.isUnset(request.ipv6Isp)) {
    query['Ipv6Isp'] = request.ipv6Isp;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateVpcIpv6Cidr',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateVpcIpv6Cidr(request: AllocateVpcIpv6CidrRequest): AllocateVpcIpv6CidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateVpcIpv6CidrWithOptions(request, runtime);
}

model ApplyPhysicalConnectionLOARequest {
  bandwidth?: int32(name='Bandwidth', example='3'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  companyName?: string(name='CompanyName', example='company'),
  constructionTime?: string(name='ConstructionTime', example='2022-02-28T16:00:00Z'),
  instanceId?: string(name='InstanceId', example='pc-bp1qrb3044eqi****'),
  lineType?: string(name='LineType', example='FIBRE'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  PMInfo?: [ 
    {
      PMCertificateNo?: string(name='PMCertificateNo', example='5****************9'),
      PMCertificateType?: string(name='PMCertificateType', example='IDCard'),
      PMContactInfo?: string(name='PMContactInfo', example='1390000****'),
      PMGender?: string(name='PMGender', example='Male'),
      PMName?: string(name='PMName'),
    }
  ](name='PMInfo'),
  peerLocation?: string(name='PeerLocation'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  si?: string(name='Si'),
}

model ApplyPhysicalConnectionLOAResponseBody = {
  requestId?: string(name='RequestId', example='A47BD386-7FDE-42C4-8D22-C6223D18AA1C'),
}

model ApplyPhysicalConnectionLOAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyPhysicalConnectionLOAResponseBody(name='body'),
}

async function applyPhysicalConnectionLOAWithOptions(request: ApplyPhysicalConnectionLOARequest, runtime: Util.RuntimeOptions): ApplyPhysicalConnectionLOAResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.companyName)) {
    query['CompanyName'] = request.companyName;
  }
  if (!Util.isUnset(request.constructionTime)) {
    query['ConstructionTime'] = request.constructionTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lineType)) {
    query['LineType'] = request.lineType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.PMInfo)) {
    query['PMInfo'] = request.PMInfo;
  }
  if (!Util.isUnset(request.peerLocation)) {
    query['PeerLocation'] = request.peerLocation;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.si)) {
    query['Si'] = request.si;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyPhysicalConnectionLOA',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyPhysicalConnectionLOA(request: ApplyPhysicalConnectionLOARequest): ApplyPhysicalConnectionLOAResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyPhysicalConnectionLOAWithOptions(request, runtime);
}

model AssociateEipAddressRequest {
  allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7ujsxdc****'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  instanceId?: string(name='InstanceId', example='i-2zebb08phyczzawe****'),
  instanceRegionId?: string(name='InstanceRegionId', example='cn-hangzhou'),
  instanceType?: string(name='InstanceType', example='EcsInstance'),
  mode?: string(name='Mode', example='NAT'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
}

model AssociateEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model AssociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateEipAddressResponseBody(name='body'),
}

async function associateEipAddressWithOptions(request: AssociateEipAddressRequest, runtime: Util.RuntimeOptions): AssociateEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceRegionId)) {
    query['InstanceRegionId'] = request.instanceRegionId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateEipAddress',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateEipAddress(request: AssociateEipAddressRequest): AssociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateEipAddressWithOptions(request, runtime);
}

model AssociateEipAddressBatchRequest {
  bindedInstanceId?: string(name='BindedInstanceId', example='ngw-hp3akk9irtd69jad****'),
  bindedInstanceType?: string(name='BindedInstanceType', example='Nat'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  instanceIds?: [ string ](name='InstanceIds'),
  mode?: string(name='Mode', example='MULTI_BINDED'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssociateEipAddressBatchResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model AssociateEipAddressBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateEipAddressBatchResponseBody(name='body'),
}

async function associateEipAddressBatchWithOptions(request: AssociateEipAddressBatchRequest, runtime: Util.RuntimeOptions): AssociateEipAddressBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bindedInstanceId)) {
    query['BindedInstanceId'] = request.bindedInstanceId;
  }
  if (!Util.isUnset(request.bindedInstanceType)) {
    query['BindedInstanceType'] = request.bindedInstanceType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateEipAddressBatch',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateEipAddressBatch(request: AssociateEipAddressBatchRequest): AssociateEipAddressBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateEipAddressBatchWithOptions(request, runtime);
}

model AssociateGlobalAccelerationInstanceRequest {
  backendServerId?: string(name='BackendServerId', example='i-saf23****'),
  backendServerRegionId?: string(name='BackendServerRegionId', example='cn-shanghai'),
  backendServerType?: string(name='BackendServerType', example='EcsInstance'),
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-lsajj32****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssociateGlobalAccelerationInstanceResponseBody = {
  requestId?: string(name='RequestId', example='DDF2CC38-76C7-4000-909D-B2088158AEDA'),
}

model AssociateGlobalAccelerationInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateGlobalAccelerationInstanceResponseBody(name='body'),
}

async function associateGlobalAccelerationInstanceWithOptions(request: AssociateGlobalAccelerationInstanceRequest, runtime: Util.RuntimeOptions): AssociateGlobalAccelerationInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendServerId)) {
    query['BackendServerId'] = request.backendServerId;
  }
  if (!Util.isUnset(request.backendServerRegionId)) {
    query['BackendServerRegionId'] = request.backendServerRegionId;
  }
  if (!Util.isUnset(request.backendServerType)) {
    query['BackendServerType'] = request.backendServerType;
  }
  if (!Util.isUnset(request.globalAccelerationInstanceId)) {
    query['GlobalAccelerationInstanceId'] = request.globalAccelerationInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateGlobalAccelerationInstance',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateGlobalAccelerationInstance(request: AssociateGlobalAccelerationInstanceRequest): AssociateGlobalAccelerationInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateGlobalAccelerationInstanceWithOptions(request, runtime);
}

model AssociateHaVipRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  haVipId?: string(name='HaVipId', example='havip-2zeo05qre24nhrqpy****'),
  instanceId?: string(name='InstanceId', example='i-faf344422ffsfad****'),
  instanceType?: string(name='InstanceType', example='EcsInstance'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssociateHaVipResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model AssociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateHaVipResponseBody(name='body'),
}

async function associateHaVipWithOptions(request: AssociateHaVipRequest, runtime: Util.RuntimeOptions): AssociateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateHaVip',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateHaVip(request: AssociateHaVipRequest): AssociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateHaVipWithOptions(request, runtime);
}

model AssociateNetworkAclRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0sp****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdw****'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
    }
  ](name='Resource'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssociateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', example='4CF20CC7-D1FC-425B-A15B-DF7C8E2131A7'),
}

model AssociateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateNetworkAclResponseBody(name='body'),
}

async function associateNetworkAclWithOptions(request: AssociateNetworkAclRequest, runtime: Util.RuntimeOptions): AssociateNetworkAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateNetworkAcl',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateNetworkAcl(request: AssociateNetworkAclRequest): AssociateNetworkAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateNetworkAclWithOptions(request, runtime);
}

model AssociatePhysicalConnectionToVirtualBorderRouterRequest {
  circuitCode?: string(name='CircuitCode', example='longtel001'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  enableIpv6?: string(name='EnableIpv6', example='false'),
  localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerGatewayIp?: string(name='PeerGatewayIp', example='192.168.XX.XX'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:4:4:4:4:4:4'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.0'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1qrb3044eqixog****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrId?: string(name='VbrId', example='vbr-bp186tnz6rijyhj******'),
  vlanId?: string(name='VlanId', example='123'),
}

model AssociatePhysicalConnectionToVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model AssociatePhysicalConnectionToVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociatePhysicalConnectionToVirtualBorderRouterResponseBody(name='body'),
}

async function associatePhysicalConnectionToVirtualBorderRouterWithOptions(request: AssociatePhysicalConnectionToVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): AssociatePhysicalConnectionToVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enableIpv6)) {
    query['EnableIpv6'] = request.enableIpv6;
  }
  if (!Util.isUnset(request.localGatewayIp)) {
    query['LocalGatewayIp'] = request.localGatewayIp;
  }
  if (!Util.isUnset(request.localIpv6GatewayIp)) {
    query['LocalIpv6GatewayIp'] = request.localIpv6GatewayIp;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerGatewayIp)) {
    query['PeerGatewayIp'] = request.peerGatewayIp;
  }
  if (!Util.isUnset(request.peerIpv6GatewayIp)) {
    query['PeerIpv6GatewayIp'] = request.peerIpv6GatewayIp;
  }
  if (!Util.isUnset(request.peeringIpv6SubnetMask)) {
    query['PeeringIpv6SubnetMask'] = request.peeringIpv6SubnetMask;
  }
  if (!Util.isUnset(request.peeringSubnetMask)) {
    query['PeeringSubnetMask'] = request.peeringSubnetMask;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociatePhysicalConnectionToVirtualBorderRouter',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associatePhysicalConnectionToVirtualBorderRouter(request: AssociatePhysicalConnectionToVirtualBorderRouterRequest): AssociatePhysicalConnectionToVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return associatePhysicalConnectionToVirtualBorderRouterWithOptions(request, runtime);
}

model AssociateRouteTableRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25ncdvfaue4****'),
}

model AssociateRouteTableResponseBody = {
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
}

model AssociateRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateRouteTableResponseBody(name='body'),
}

async function associateRouteTableWithOptions(request: AssociateRouteTableRequest, runtime: Util.RuntimeOptions): AssociateRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateRouteTable',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateRouteTable(request: AssociateRouteTableRequest): AssociateRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateRouteTableWithOptions(request, runtime);
}

model AssociateRouteTableWithGatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  gatewayId?: string(name='GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='vtb-5ts0ohchwkp3dydt2****'),
}

model AssociateRouteTableWithGatewayResponseBody = {
  requestId?: string(name='RequestId', example='F89C2176-8F10-55EF-90CF-CF99D1E3F816'),
}

model AssociateRouteTableWithGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateRouteTableWithGatewayResponseBody(name='body'),
}

async function associateRouteTableWithGatewayWithOptions(request: AssociateRouteTableWithGatewayRequest, runtime: Util.RuntimeOptions): AssociateRouteTableWithGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateRouteTableWithGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateRouteTableWithGateway(request: AssociateRouteTableWithGatewayRequest): AssociateRouteTableWithGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateRouteTableWithGatewayWithOptions(request, runtime);
}

model AssociateRouteTablesWithVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  endpointId?: string(name='EndpointId', example='vpce-m5e371h5clm3uadih****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableIds?: [ string ](name='RouteTableIds', example='vtb-m5elgtm3aj586iitr****'),
}

model AssociateRouteTablesWithVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId', example='59BDDA2D-FB52-59F9-9DC5-5EA7D6808B8E'),
}

model AssociateRouteTablesWithVpcGatewayEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateRouteTablesWithVpcGatewayEndpointResponseBody(name='body'),
}

async function associateRouteTablesWithVpcGatewayEndpointWithOptions(request: AssociateRouteTablesWithVpcGatewayEndpointRequest, runtime: Util.RuntimeOptions): AssociateRouteTablesWithVpcGatewayEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableIds)) {
    query['RouteTableIds'] = request.routeTableIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateRouteTablesWithVpcGatewayEndpoint',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateRouteTablesWithVpcGatewayEndpoint(request: AssociateRouteTablesWithVpcGatewayEndpointRequest): AssociateRouteTablesWithVpcGatewayEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateRouteTablesWithVpcGatewayEndpointWithOptions(request, runtime);
}

model AssociateVpcCidrBlockRequest {
  IPv6CidrBlock?: string(name='IPv6CidrBlock', example='2408:XXXX:0:6a::/56'),
  ipVersion?: string(name='IpVersion', example='IPV4'),
  ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ch-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secondaryCidrBlock?: string(name='SecondaryCidrBlock', example='192.168.0.0/16'),
  vpcId?: string(name='VpcId', example='vpc-o6wrloqsdqc9io3mg****'),
}

model AssociateVpcCidrBlockResponseBody = {
  requestId?: string(name='RequestId', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model AssociateVpcCidrBlockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateVpcCidrBlockResponseBody(name='body'),
}

async function associateVpcCidrBlockWithOptions(request: AssociateVpcCidrBlockRequest, runtime: Util.RuntimeOptions): AssociateVpcCidrBlockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.IPv6CidrBlock)) {
    query['IPv6CidrBlock'] = request.IPv6CidrBlock;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.ipv6Isp)) {
    query['Ipv6Isp'] = request.ipv6Isp;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.secondaryCidrBlock)) {
    query['SecondaryCidrBlock'] = request.secondaryCidrBlock;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateVpcCidrBlock',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateVpcCidrBlock(request: AssociateVpcCidrBlockRequest): AssociateVpcCidrBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateVpcCidrBlockWithOptions(request, runtime);
}

model AssociateVpnGatewayWithCertificateRequest {
  certificateId?: string(name='CertificateId', example='6bfe4218-ea1d****'),
  certificateType?: string(name='CertificateType', example='Signature'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea****'),
  dryRun?: boolean(name='DryRun', example='false'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model AssociateVpnGatewayWithCertificateResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model AssociateVpnGatewayWithCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateVpnGatewayWithCertificateResponseBody(name='body'),
}

async function associateVpnGatewayWithCertificateWithOptions(request: AssociateVpnGatewayWithCertificateRequest, runtime: Util.RuntimeOptions): AssociateVpnGatewayWithCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateId)) {
    query['CertificateId'] = request.certificateId;
  }
  if (!Util.isUnset(request.certificateType)) {
    query['CertificateType'] = request.certificateType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateVpnGatewayWithCertificate',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateVpnGatewayWithCertificate(request: AssociateVpnGatewayWithCertificateRequest): AssociateVpnGatewayWithCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateVpnGatewayWithCertificateWithOptions(request, runtime);
}

model AttachDhcpOptionsSetToVpcRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-sfdkfdjkdf****'),
}

model AttachDhcpOptionsSetToVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model AttachDhcpOptionsSetToVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachDhcpOptionsSetToVpcResponseBody(name='body'),
}

async function attachDhcpOptionsSetToVpcWithOptions(request: AttachDhcpOptionsSetToVpcRequest, runtime: Util.RuntimeOptions): AttachDhcpOptionsSetToVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dhcpOptionsSetId)) {
    query['DhcpOptionsSetId'] = request.dhcpOptionsSetId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachDhcpOptionsSetToVpc',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachDhcpOptionsSetToVpc(request: AttachDhcpOptionsSetToVpcRequest): AttachDhcpOptionsSetToVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDhcpOptionsSetToVpcWithOptions(request, runtime);
}

model AttachVbrToVpconnRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  token?: string(name='Token', example='CBCE910E-D396-4944-8****'),
  vbrId?: string(name='VbrId', example='vbr-bp133sn3nwjvu7twc****'),
  vpconnId?: string(name='VpconnId', example='pc-bp1mrgfbtmc9brre7****'),
}

model AttachVbrToVpconnResponseBody = {
  requestId?: string(name='RequestId', example='5356F028-0F5C-56FC-8574-897D24379041'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', example='pc-bp1mrgfbtmc9brre7****'),
}

model AttachVbrToVpconnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachVbrToVpconnResponseBody(name='body'),
}

async function attachVbrToVpconnWithOptions(request: AttachVbrToVpconnRequest, runtime: Util.RuntimeOptions): AttachVbrToVpconnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  if (!Util.isUnset(request.vpconnId)) {
    query['VpconnId'] = request.vpconnId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachVbrToVpconn',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachVbrToVpconn(request: AttachVbrToVpconnRequest): AttachVbrToVpconnResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachVbrToVpconnWithOptions(request, runtime);
}

model CancelCommonBandwidthPackageIpBandwidthRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-bp13d0m4e2qv8xxxxxxxx'),
  eipId?: string(name='EipId', example='eip-2zewysoansu0sxxxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelCommonBandwidthPackageIpBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='63D187BF-A30A-4DD6-B68D-FF182C96D8A2'),
}

model CancelCommonBandwidthPackageIpBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCommonBandwidthPackageIpBandwidthResponseBody(name='body'),
}

async function cancelCommonBandwidthPackageIpBandwidthWithOptions(request: CancelCommonBandwidthPackageIpBandwidthRequest, runtime: Util.RuntimeOptions): CancelCommonBandwidthPackageIpBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.eipId)) {
    query['EipId'] = request.eipId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCommonBandwidthPackageIpBandwidth',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCommonBandwidthPackageIpBandwidth(request: CancelCommonBandwidthPackageIpBandwidthRequest): CancelCommonBandwidthPackageIpBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCommonBandwidthPackageIpBandwidthWithOptions(request, runtime);
}

model CancelPhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjzm7****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model CancelPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelPhysicalConnectionResponseBody(name='body'),
}

async function cancelPhysicalConnectionWithOptions(request: CancelPhysicalConnectionRequest, runtime: Util.RuntimeOptions): CancelPhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelPhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelPhysicalConnection(request: CancelPhysicalConnectionRequest): CancelPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPhysicalConnectionWithOptions(request, runtime);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-bp1drpcfz9srr393h****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='pc-bp16qjewdsunr41m1****'),
  resourceType?: string(name='ResourceType', example='PHYSICALCONNECTION'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CheckCanAllocateVpcPrivateIpAddressRequest {
  ipVersion?: string(name='IpVersion', example='ipv4'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  privateIpAddress?: string(name='PrivateIpAddress', example='10.0.0.7'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId', example='vsw-m5ew3t46z2drmifnt****'),
}

model CheckCanAllocateVpcPrivateIpAddressResponseBody = {
  canAllocate?: boolean(name='CanAllocate', example='true'),
  requestId?: string(name='RequestId', example='93360B0-2969-40BF-8542-EBB34FD358AB'),
}

model CheckCanAllocateVpcPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckCanAllocateVpcPrivateIpAddressResponseBody(name='body'),
}

async function checkCanAllocateVpcPrivateIpAddressWithOptions(request: CheckCanAllocateVpcPrivateIpAddressRequest, runtime: Util.RuntimeOptions): CheckCanAllocateVpcPrivateIpAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckCanAllocateVpcPrivateIpAddress',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkCanAllocateVpcPrivateIpAddress(request: CheckCanAllocateVpcPrivateIpAddressRequest): CheckCanAllocateVpcPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCanAllocateVpcPrivateIpAddressWithOptions(request, runtime);
}

model CheckVpnBgpEnabledRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CheckVpnBgpEnabledResponseBody = {
  bgpEnabled?: boolean(name='BgpEnabled', example='true'),
  requestId?: string(name='RequestId', example='DF448D2E-215D-334F-B10D-7C3B087EF996'),
}

model CheckVpnBgpEnabledResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckVpnBgpEnabledResponseBody(name='body'),
}

async function checkVpnBgpEnabledWithOptions(request: CheckVpnBgpEnabledRequest, runtime: Util.RuntimeOptions): CheckVpnBgpEnabledResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckVpnBgpEnabled',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkVpnBgpEnabled(request: CheckVpnBgpEnabledRequest): CheckVpnBgpEnabledResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkVpnBgpEnabledWithOptions(request, runtime);
}

model CompletePhysicalConnectionLOARequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-230e-11e9-8e44-0016e04115b'),
  instanceId?: string(name='InstanceId', example='pc-bp10tvlhnwkw****'),
  lineCode?: string(name='LineCode', example='aaa111****'),
  lineLabel?: string(name='LineLabel', example='bbb222****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CompletePhysicalConnectionLOAResponseBody = {
  requestId?: string(name='RequestId', example='F8983C74-E068-4509-B442-89BD82C8F43B'),
}

model CompletePhysicalConnectionLOAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompletePhysicalConnectionLOAResponseBody(name='body'),
}

async function completePhysicalConnectionLOAWithOptions(request: CompletePhysicalConnectionLOARequest, runtime: Util.RuntimeOptions): CompletePhysicalConnectionLOAResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lineCode)) {
    query['LineCode'] = request.lineCode;
  }
  if (!Util.isUnset(request.lineLabel)) {
    query['LineLabel'] = request.lineLabel;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompletePhysicalConnectionLOA',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function completePhysicalConnectionLOA(request: CompletePhysicalConnectionLOARequest): CompletePhysicalConnectionLOAResponse {
  var runtime = new Util.RuntimeOptions{};
  return completePhysicalConnectionLOAWithOptions(request, runtime);
}

model ConfirmPhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e0****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mf****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ConfirmPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='API-20365164-5b0d-460a-83c2-2189972b****'),
}

model ConfirmPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmPhysicalConnectionResponseBody(name='body'),
}

async function confirmPhysicalConnectionWithOptions(request: ConfirmPhysicalConnectionRequest, runtime: Util.RuntimeOptions): ConfirmPhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmPhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmPhysicalConnection(request: ConfirmPhysicalConnectionRequest): ConfirmPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmPhysicalConnectionWithOptions(request, runtime);
}

model ConnectRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urzd****'),
}

model ConnectRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
}

model ConnectRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConnectRouterInterfaceResponseBody(name='body'),
}

async function connectRouterInterfaceWithOptions(request: ConnectRouterInterfaceRequest, runtime: Util.RuntimeOptions): ConnectRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConnectRouterInterface',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function connectRouterInterface(request: ConnectRouterInterfaceRequest): ConnectRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return connectRouterInterfaceWithOptions(request, runtime);
}

model ConvertBandwidthPackageRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='bwp-bp1xea10o8qxw4f****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ConvertBandwidthPackageResponseBody = {
  convertInstanceId?: string(name='ConvertInstanceId', example='bwp-s6lmotmkkf567b****'),
  requestId?: string(name='RequestId', example='455AC20C-7061-446A-BDBD-B3BEE0856304'),
}

model ConvertBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConvertBandwidthPackageResponseBody(name='body'),
}

async function convertBandwidthPackageWithOptions(request: ConvertBandwidthPackageRequest, runtime: Util.RuntimeOptions): ConvertBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConvertBandwidthPackage',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function convertBandwidthPackage(request: ConvertBandwidthPackageRequest): ConvertBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertBandwidthPackageWithOptions(request, runtime);
}

model CopyNetworkAclEntriesRequest {
  clientToken?: string(name='ClientToken', example='123'),
  networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spxxxxxxxx'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceNetworkAclId?: string(name='SourceNetworkAclId', example='nacl-ghuo9ehg3e0spxxxxxxxx'),
}

model CopyNetworkAclEntriesResponseBody = {
  requestId?: string(name='RequestId', example='6608E72F-F276-440F-ABEF-419971CEC4D1'),
}

model CopyNetworkAclEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyNetworkAclEntriesResponseBody(name='body'),
}

async function copyNetworkAclEntriesWithOptions(request: CopyNetworkAclEntriesRequest, runtime: Util.RuntimeOptions): CopyNetworkAclEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceNetworkAclId)) {
    query['SourceNetworkAclId'] = request.sourceNetworkAclId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyNetworkAclEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyNetworkAclEntries(request: CopyNetworkAclEntriesRequest): CopyNetworkAclEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyNetworkAclEntriesWithOptions(request, runtime);
}

model CreateBgpGroupRequest {
  authKey?: string(name='AuthKey', example='!PWZ2****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', example='BGP'),
  ipVersion?: string(name='IpVersion', example='IPv4'),
  isFakeAsn?: boolean(name='IsFakeAsn', example='true'),
  localAsn?: long(name='LocalAsn'),
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerAsn?: long(name='PeerAsn', example='1****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeQuota?: int32(name='RouteQuota'),
  routerId?: string(name='RouterId', example='vbr-bp1ctxy813985gkuk****'),
}

model CreateBgpGroupResponseBody = {
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-bp1k25cyp26cllath****'),
  requestId?: string(name='RequestId', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model CreateBgpGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBgpGroupResponseBody(name='body'),
}

async function createBgpGroupWithOptions(request: CreateBgpGroupRequest, runtime: Util.RuntimeOptions): CreateBgpGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authKey)) {
    query['AuthKey'] = request.authKey;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.isFakeAsn)) {
    query['IsFakeAsn'] = request.isFakeAsn;
  }
  if (!Util.isUnset(request.localAsn)) {
    query['LocalAsn'] = request.localAsn;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerAsn)) {
    query['PeerAsn'] = request.peerAsn;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeQuota)) {
    query['RouteQuota'] = request.routeQuota;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBgpGroup',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBgpGroup(request: CreateBgpGroupRequest): CreateBgpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBgpGroupWithOptions(request, runtime);
}

model CreateBgpPeerRequest {
  bfdMultiHop?: int32(name='BfdMultiHop', example='3'),
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-wz9f62v4fbg****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  enableBfd?: boolean(name='EnableBfd', example='true'),
  ipVersion?: string(name='IpVersion', example='ipv4'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerIpAddress?: string(name='PeerIpAddress', example='116.62.XX.XX'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateBgpPeerResponseBody = {
  bgpPeerId?: string(name='BgpPeerId', example='bgp-m5eoyp2mwegk8ce9v****'),
  requestId?: string(name='RequestId', example='D4B7649A-61BB-4C64-A586-1DFF1EDA6A42'),
}

model CreateBgpPeerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBgpPeerResponseBody(name='body'),
}

async function createBgpPeerWithOptions(request: CreateBgpPeerRequest, runtime: Util.RuntimeOptions): CreateBgpPeerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bfdMultiHop)) {
    query['BfdMultiHop'] = request.bfdMultiHop;
  }
  if (!Util.isUnset(request.bgpGroupId)) {
    query['BgpGroupId'] = request.bgpGroupId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enableBfd)) {
    query['EnableBfd'] = request.enableBfd;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerIpAddress)) {
    query['PeerIpAddress'] = request.peerIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBgpPeer',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBgpPeer(request: CreateBgpPeerRequest): CreateBgpPeerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBgpPeerWithOptions(request, runtime);
}

model CreateCommonBandwidthPackageRequest {
  bandwidth?: int32(name='Bandwidth', example='1000'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  description?: string(name='Description', example='abc'),
  ISP?: string(name='ISP', example='BGP'),
  internetChargeType?: string(name='InternetChargeType'),
  name?: string(name='Name', example='test123'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  ratio?: int32(name='Ratio', example='20'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazdjdhd****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', example='AntiDDoS_Enhanced'),
  zone?: string(name='Zone', example='cn-hangzhou-a'),
}

model CreateCommonBandwidthPackageResponseBody = {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-bp1vevu8h3ieh****'),
  requestId?: string(name='RequestId', example='FF39F653-033E-4CD9-9EDF-3CCA5A71FBC3'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazdjdhd****'),
}

model CreateCommonBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCommonBandwidthPackageResponseBody(name='body'),
}

async function createCommonBandwidthPackageWithOptions(request: CreateCommonBandwidthPackageRequest, runtime: Util.RuntimeOptions): CreateCommonBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ratio)) {
    query['Ratio'] = request.ratio;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityProtectionTypes)) {
    query['SecurityProtectionTypes'] = request.securityProtectionTypes;
  }
  if (!Util.isUnset(request.zone)) {
    query['Zone'] = request.zone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCommonBandwidthPackage',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCommonBandwidthPackage(request: CreateCommonBandwidthPackageRequest): CreateCommonBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCommonBandwidthPackageWithOptions(request, runtime);
}

model CreateCustomerGatewayRequest {
  asn?: string(name='Asn', example='65530'),
  authKey?: string(name='AuthKey', example='AuthKey****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44****'),
  description?: string(name='Description', example='desctest'),
  ipAddress?: string(name='IpAddress', example='101.12.XX.XX'),
  name?: string(name='Name', example='nametest'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateCustomerGatewayResponseBody = {
  createTime?: long(name='CreateTime', example='1493363486000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1jrawp82av6bws9****'),
  description?: string(name='Description', example='desctest'),
  ipAddress?: string(name='IpAddress', example='101.12.XX.XX'),
  name?: string(name='Name', example='nametest'),
  requestId?: string(name='RequestId', example='D32B3C26-6C6C-4988-93E9-D2A6444CE6AE'),
}

model CreateCustomerGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomerGatewayResponseBody(name='body'),
}

async function createCustomerGatewayWithOptions(request: CreateCustomerGatewayRequest, runtime: Util.RuntimeOptions): CreateCustomerGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asn)) {
    query['Asn'] = request.asn;
  }
  if (!Util.isUnset(request.authKey)) {
    query['AuthKey'] = request.authKey;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomerGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomerGateway(request: CreateCustomerGatewayRequest): CreateCustomerGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomerGatewayWithOptions(request, runtime);
}

model CreateDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', example='test'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test'),
  domainName?: string(name='DomainName', example='example.com'),
  domainNameServers?: string(name='DomainNameServers', example='192.xx.xx.123'),
  dryRun?: boolean(name='DryRun', example='false'),
  ipv6LeaseTime?: string(name='Ipv6LeaseTime'),
  leaseTime?: string(name='LeaseTime'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateDhcpOptionsSetResponseBody = {
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model CreateDhcpOptionsSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDhcpOptionsSetResponseBody(name='body'),
}

async function createDhcpOptionsSetWithOptions(request: CreateDhcpOptionsSetRequest, runtime: Util.RuntimeOptions): CreateDhcpOptionsSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dhcpOptionsSetDescription)) {
    query['DhcpOptionsSetDescription'] = request.dhcpOptionsSetDescription;
  }
  if (!Util.isUnset(request.dhcpOptionsSetName)) {
    query['DhcpOptionsSetName'] = request.dhcpOptionsSetName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainNameServers)) {
    query['DomainNameServers'] = request.domainNameServers;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipv6LeaseTime)) {
    query['Ipv6LeaseTime'] = request.ipv6LeaseTime;
  }
  if (!Util.isUnset(request.leaseTime)) {
    query['LeaseTime'] = request.leaseTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDhcpOptionsSet',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDhcpOptionsSet(request: CreateDhcpOptionsSetRequest): CreateDhcpOptionsSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDhcpOptionsSetWithOptions(request, runtime);
}

model CreateExpressCloudConnectionRequest {
  bandwidth?: int32(name='Bandwidth', example='2'),
  contactMail?: string(name='ContactMail', example='XX@example.com'),
  contactTel?: string(name='ContactTel', example='132*********'),
  description?: string(name='Description'),
  IDCardNo?: string(name='IDCardNo', example='32*****************'),
  idcSP?: string(name='IdcSP', example='CU'),
  name?: string(name='Name', example='doctest'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerCity?: string(name='PeerCity'),
  peerLocation?: string(name='PeerLocation'),
  portType?: string(name='PortType', example='100Base-T'),
  redundantEccId?: string(name='RedundantEccId', example='ecc-d****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateExpressCloudConnectionResponseBody = {
  eccId?: string(name='EccId', example='ecc-jg************'),
  requestId?: string(name='RequestId', example='C004F022-1CC2-4958-9937-675513A2CD7E'),
}

model CreateExpressCloudConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExpressCloudConnectionResponseBody(name='body'),
}

async function createExpressCloudConnectionWithOptions(request: CreateExpressCloudConnectionRequest, runtime: Util.RuntimeOptions): CreateExpressCloudConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.contactMail)) {
    query['ContactMail'] = request.contactMail;
  }
  if (!Util.isUnset(request.contactTel)) {
    query['ContactTel'] = request.contactTel;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.IDCardNo)) {
    query['IDCardNo'] = request.IDCardNo;
  }
  if (!Util.isUnset(request.idcSP)) {
    query['IdcSP'] = request.idcSP;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerCity)) {
    query['PeerCity'] = request.peerCity;
  }
  if (!Util.isUnset(request.peerLocation)) {
    query['PeerLocation'] = request.peerLocation;
  }
  if (!Util.isUnset(request.portType)) {
    query['PortType'] = request.portType;
  }
  if (!Util.isUnset(request.redundantEccId)) {
    query['RedundantEccId'] = request.redundantEccId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateExpressCloudConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExpressCloudConnection(request: CreateExpressCloudConnectionRequest): CreateExpressCloudConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExpressCloudConnectionWithOptions(request, runtime);
}

model CreateFlowLogRequest {
  aggregationInterval?: int32(name='AggregationInterval', example='10'),
  description?: string(name='Description', example='This is my Flowlog.'),
  flowLogName?: string(name='FlowLogName', example='myFlowlog'),
  logStoreName?: string(name='LogStoreName', example='FlowLogStore'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName', example='FlowLogProject'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceId?: string(name='ResourceId', example='eni-askldfas****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='NetworkInterface'),
  trafficPath?: [ string ](name='TrafficPath'),
  trafficType?: string(name='TrafficType', example='All'),
}

model CreateFlowLogResponseBody = {
  flowLogId?: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  success?: string(name='Success', example='true'),
}

model CreateFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFlowLogResponseBody(name='body'),
}

async function createFlowLogWithOptions(request: CreateFlowLogRequest, runtime: Util.RuntimeOptions): CreateFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregationInterval)) {
    query['AggregationInterval'] = request.aggregationInterval;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.flowLogName)) {
    query['FlowLogName'] = request.flowLogName;
  }
  if (!Util.isUnset(request.logStoreName)) {
    query['LogStoreName'] = request.logStoreName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.trafficPath)) {
    query['TrafficPath'] = request.trafficPath;
  }
  if (!Util.isUnset(request.trafficType)) {
    query['TrafficType'] = request.trafficType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlowLog',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFlowLog(request: CreateFlowLogRequest): CreateFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowLogWithOptions(request, runtime);
}

model CreateForwardEntryRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe6****'),
  externalIp?: string(name='ExternalIp', example='116.28.XX.XX'),
  externalPort?: string(name='ExternalPort', example='8080'),
  forwardEntryName?: string(name='ForwardEntryName', example='ForwardEntry-1'),
  forwardTableId?: string(name='ForwardTableId', example='ftb-bp1mbjubq34hlcqpa****'),
  internalIp?: string(name='InternalIp', example='192.168.XX.XX'),
  internalPort?: string(name='InternalPort', example='80'),
  ipProtocol?: string(name='IpProtocol', example='TCP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portBreak?: boolean(name='PortBreak', example='false'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateForwardEntryResponseBody = {
  forwardEntryId?: string(name='ForwardEntryId', example='fwd-119smw5tkasdf****'),
  requestId?: string(name='RequestId', example='A4AEE536-A97A-40EB-9EBE-53A6948A6928'),
}

model CreateForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateForwardEntryResponseBody(name='body'),
}

async function createForwardEntryWithOptions(request: CreateForwardEntryRequest, runtime: Util.RuntimeOptions): CreateForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.externalPort)) {
    query['ExternalPort'] = request.externalPort;
  }
  if (!Util.isUnset(request.forwardEntryName)) {
    query['ForwardEntryName'] = request.forwardEntryName;
  }
  if (!Util.isUnset(request.forwardTableId)) {
    query['ForwardTableId'] = request.forwardTableId;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portBreak)) {
    query['PortBreak'] = request.portBreak;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateForwardEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createForwardEntryWithOptions(request, runtime);
}

model CreateFullNatEntryRequest {
  accessIp?: string(name='AccessIp', example='192.168.XX.XX'),
  accessPort?: string(name='AccessPort', example='80'),
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  fullNatEntryDescription?: string(name='FullNatEntryDescription', example='abc'),
  fullNatEntryName?: string(name='FullNatEntryName', example='test'),
  fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****'),
  ipProtocol?: string(name='IpProtocol', example='TCP'),
  natIp?: string(name='NatIp', example='192.168.XX.XX'),
  natIpPort?: string(name='NatIpPort', example='80'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-gw8g131ef2dnbu3k****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFullNatEntryResponseBody = {
  fullNatEntryId?: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****'),
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model CreateFullNatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFullNatEntryResponseBody(name='body'),
}

async function createFullNatEntryWithOptions(request: CreateFullNatEntryRequest, runtime: Util.RuntimeOptions): CreateFullNatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessIp)) {
    query['AccessIp'] = request.accessIp;
  }
  if (!Util.isUnset(request.accessPort)) {
    query['AccessPort'] = request.accessPort;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fullNatEntryDescription)) {
    query['FullNatEntryDescription'] = request.fullNatEntryDescription;
  }
  if (!Util.isUnset(request.fullNatEntryName)) {
    query['FullNatEntryName'] = request.fullNatEntryName;
  }
  if (!Util.isUnset(request.fullNatTableId)) {
    query['FullNatTableId'] = request.fullNatTableId;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.natIp)) {
    query['NatIp'] = request.natIp;
  }
  if (!Util.isUnset(request.natIpPort)) {
    query['NatIpPort'] = request.natIpPort;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFullNatEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFullNatEntry(request: CreateFullNatEntryRequest): CreateFullNatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFullNatEntryWithOptions(request, runtime);
}

model CreateGlobalAccelerationInstanceRequest {
  bandwidth?: string(name='Bandwidth', example='10'),
  bandwidthType?: string(name='BandwidthType', example='Exclusive'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  description?: string(name='Description', example='My GA'),
  name?: string(name='Name', example='GA-1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceLocation?: string(name='ServiceLocation', example='china-mainland'),
}

model CreateGlobalAccelerationInstanceResponseBody = {
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-bp1fi6sq7npnicmjj****'),
  ipAddress?: string(name='IpAddress', example='12.xx.xx.78'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model CreateGlobalAccelerationInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGlobalAccelerationInstanceResponseBody(name='body'),
}

async function createGlobalAccelerationInstanceWithOptions(request: CreateGlobalAccelerationInstanceRequest, runtime: Util.RuntimeOptions): CreateGlobalAccelerationInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.bandwidthType)) {
    query['BandwidthType'] = request.bandwidthType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serviceLocation)) {
    query['ServiceLocation'] = request.serviceLocation;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGlobalAccelerationInstance',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createGlobalAccelerationInstance(request: CreateGlobalAccelerationInstanceRequest): CreateGlobalAccelerationInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGlobalAccelerationInstanceWithOptions(request, runtime);
}

model CreateHaVipRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', example='This is my HaVip.'),
  ipAddress?: string(name='IpAddress', example='192.xx.xx.10'),
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId', example='vsw-asdfjlnaue4g****'),
}

model CreateHaVipResponseBody = {
  haVipId?: string(name='HaVipId', example='havip-2zeo05qre24nhrqpy****'),
  ipAddress?: string(name='IpAddress', example='192.xx.xx.xx'),
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model CreateHaVipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHaVipResponseBody(name='body'),
}

async function createHaVipWithOptions(request: CreateHaVipRequest, runtime: Util.RuntimeOptions): CreateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHaVip',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHaVip(request: CreateHaVipRequest): CreateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHaVipWithOptions(request, runtime);
}

model CreateIPv6TranslatorRequest {
  autoPay?: boolean(name='AutoPay', example='false'),
  bandwidth?: int32(name='Bandwidth', example='10'),
  clientToken?: string(name='ClientToken', example='sha111'),
  duration?: int32(name='Duration', example='1'),
  name?: string(name='Name', example='ipv6_1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', example='PREPAY'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  regionId?: string(name='RegionId', example='cm-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spec?: string(name='Spec', example='small'),
}

model CreateIPv6TranslatorResponseBody = {
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1i8ahxut1xxxx'),
  name?: string(name='Name', example='test_nat64gw'),
  orderId?: long(name='OrderId', example='202303300940739'),
  requestId?: string(name='RequestId', example='1AE05898-06E5-4782-xxxxx'),
  spec?: string(name='Spec', example='small'),
}

model CreateIPv6TranslatorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIPv6TranslatorResponseBody(name='body'),
}

async function createIPv6TranslatorWithOptions(request: CreateIPv6TranslatorRequest, runtime: Util.RuntimeOptions): CreateIPv6TranslatorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIPv6Translator',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIPv6Translator(request: CreateIPv6TranslatorRequest): CreateIPv6TranslatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIPv6TranslatorWithOptions(request, runtime);
}

model CreateIPv6TranslatorAclListRequest {
  aclName?: string(name='AclName', example='test'),
  clientToken?: string(name='ClientToken', example='sha123456'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateIPv6TranslatorAclListResponseBody = {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model CreateIPv6TranslatorAclListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIPv6TranslatorAclListResponseBody(name='body'),
}

async function createIPv6TranslatorAclListWithOptions(request: CreateIPv6TranslatorAclListRequest, runtime: Util.RuntimeOptions): CreateIPv6TranslatorAclListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclName)) {
    query['AclName'] = request.aclName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIPv6TranslatorAclList',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIPv6TranslatorAclList(request: CreateIPv6TranslatorAclListRequest): CreateIPv6TranslatorAclListResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIPv6TranslatorAclListWithOptions(request, runtime);
}

model CreateIPv6TranslatorEntryRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1g8bhrdexnrxxxx'),
  aclStatus?: string(name='AclStatus', example='on'),
  aclType?: string(name='AclType', example='white'),
  allocateIpv6Port?: int32(name='AllocateIpv6Port', example='80'),
  backendIpv4Addr?: string(name='BackendIpv4Addr', example='46.22.xx.xx'),
  backendIpv4Port?: int32(name='BackendIpv4Port', example='80'),
  entryBandwidth?: int32(name='EntryBandwidth', example='2'),
  entryDescription?: string(name='EntryDescription', example='description'),
  entryName?: string(name='EntryName', example='name1'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ys57xxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transProtocol?: string(name='TransProtocol', example='tcp'),
}

model CreateIPv6TranslatorEntryResponseBody = {
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6transentry-xxxxxxxx'),
  requestId?: string(name='RequestId', example='DCE5D25-FFC9-492A-8371-12A4E0EE2E05'),
}

model CreateIPv6TranslatorEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIPv6TranslatorEntryResponseBody(name='body'),
}

async function createIPv6TranslatorEntryWithOptions(request: CreateIPv6TranslatorEntryRequest, runtime: Util.RuntimeOptions): CreateIPv6TranslatorEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.aclStatus)) {
    query['AclStatus'] = request.aclStatus;
  }
  if (!Util.isUnset(request.aclType)) {
    query['AclType'] = request.aclType;
  }
  if (!Util.isUnset(request.allocateIpv6Port)) {
    query['AllocateIpv6Port'] = request.allocateIpv6Port;
  }
  if (!Util.isUnset(request.backendIpv4Addr)) {
    query['BackendIpv4Addr'] = request.backendIpv4Addr;
  }
  if (!Util.isUnset(request.backendIpv4Port)) {
    query['BackendIpv4Port'] = request.backendIpv4Port;
  }
  if (!Util.isUnset(request.entryBandwidth)) {
    query['EntryBandwidth'] = request.entryBandwidth;
  }
  if (!Util.isUnset(request.entryDescription)) {
    query['EntryDescription'] = request.entryDescription;
  }
  if (!Util.isUnset(request.entryName)) {
    query['EntryName'] = request.entryName;
  }
  if (!Util.isUnset(request.ipv6TranslatorId)) {
    query['Ipv6TranslatorId'] = request.ipv6TranslatorId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.transProtocol)) {
    query['TransProtocol'] = request.transProtocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIPv6TranslatorEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIPv6TranslatorEntry(request: CreateIPv6TranslatorEntryRequest): CreateIPv6TranslatorEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIPv6TranslatorEntryWithOptions(request, runtime);
}

model CreateIpsecServerRequest {
  clientIpPool?: string(name='ClientIpPool', example='10.0.0.0/24'),
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b38****'),
  dryRun?: string(name='DryRun', example='false'),
  effectImmediately?: boolean(name='EffectImmediately', example='true'),
  ikeConfig?: string(name='IkeConfig', example='{"IkeVersion":"ikev2","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400}'),
  ipSecServerName?: string(name='IpSecServerName', example='test'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}'),
  localSubnet?: string(name='LocalSubnet', example='192.168.0.0/24'),
  psk?: string(name='Psk', example='Cfd123****'),
  pskEnabled?: boolean(name='PskEnabled', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp17lofy9fd0dnvzv****'),
}

model CreateIpsecServerResponseBody = {
  creationTime?: string(name='CreationTime', example='2021-02-22T03:24:28Z'),
  ipsecServerId?: string(name='IpsecServerId', example='iss-bp1jougp8cfsbo8y9****'),
  ipsecServerName?: string(name='IpsecServerName', example='test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='690A967E-D4CD-4B69-8C78-94FE828BA10B'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp17lofy9fd0dnvzv****'),
}

model CreateIpsecServerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIpsecServerResponseBody(name='body'),
}

async function createIpsecServerWithOptions(request: CreateIpsecServerRequest, runtime: Util.RuntimeOptions): CreateIpsecServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIpPool)) {
    query['ClientIpPool'] = request.clientIpPool;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.effectImmediately)) {
    query['EffectImmediately'] = request.effectImmediately;
  }
  if (!Util.isUnset(request.ikeConfig)) {
    query['IkeConfig'] = request.ikeConfig;
  }
  if (!Util.isUnset(request.ipSecServerName)) {
    query['IpSecServerName'] = request.ipSecServerName;
  }
  if (!Util.isUnset(request.ipsecConfig)) {
    query['IpsecConfig'] = request.ipsecConfig;
  }
  if (!Util.isUnset(request.localSubnet)) {
    query['LocalSubnet'] = request.localSubnet;
  }
  if (!Util.isUnset(request.psk)) {
    query['Psk'] = request.psk;
  }
  if (!Util.isUnset(request.pskEnabled)) {
    query['PskEnabled'] = request.pskEnabled;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpsecServer',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIpsecServer(request: CreateIpsecServerRequest): CreateIpsecServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpsecServerWithOptions(request, runtime);
}

model CreateIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', example='test'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', example='ipv4'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-5tss06uvoyps5xoya****'),
}

model CreateIpv4GatewayResponseBody = {
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  requestId?: string(name='RequestId', example='F282742B-1BBB-5F63-A3AF-E92EC575A1A6'),
}

model CreateIpv4GatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIpv4GatewayResponseBody(name='body'),
}

async function createIpv4GatewayWithOptions(request: CreateIpv4GatewayRequest, runtime: Util.RuntimeOptions): CreateIpv4GatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipv4GatewayDescription)) {
    query['Ipv4GatewayDescription'] = request.ipv4GatewayDescription;
  }
  if (!Util.isUnset(request.ipv4GatewayName)) {
    query['Ipv4GatewayName'] = request.ipv4GatewayName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpv4Gateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIpv4Gateway(request: CreateIpv4GatewayRequest): CreateIpv4GatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpv4GatewayWithOptions(request, runtime);
}

model CreateIpv6EgressOnlyRuleRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', example='ruledescription'),
  instanceId?: string(name='InstanceId', example='ipv6-hp3nxjkfxn5pnhgl5****'),
  instanceType?: string(name='InstanceType', example='Ipv6Address'),
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp3c2paq0ywauasza****'),
  name?: string(name='Name', example='rulename'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateIpv6EgressOnlyRuleResponseBody = {
  ipv6EgressRuleId?: string(name='Ipv6EgressRuleId', example='ipv6py-hp3w98rmlbqp01245****'),
  requestId?: string(name='RequestId', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model CreateIpv6EgressOnlyRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIpv6EgressOnlyRuleResponseBody(name='body'),
}

async function createIpv6EgressOnlyRuleWithOptions(request: CreateIpv6EgressOnlyRuleRequest, runtime: Util.RuntimeOptions): CreateIpv6EgressOnlyRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ipv6GatewayId)) {
    query['Ipv6GatewayId'] = request.ipv6GatewayId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpv6EgressOnlyRule',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIpv6EgressOnlyRule(request: CreateIpv6EgressOnlyRuleRequest): CreateIpv6EgressOnlyRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpv6EgressOnlyRuleWithOptions(request, runtime);
}

model CreateIpv6GatewayRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', example='ipv6gatewayforVPC1'),
  name?: string(name='Name', example='ipv6GW'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-123sedrfswd23****'),
}

model CreateIpv6GatewayResponseBody = {
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp3y0l3ln89j8cdvf****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC'),
}

model CreateIpv6GatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIpv6GatewayResponseBody(name='body'),
}

async function createIpv6GatewayWithOptions(request: CreateIpv6GatewayRequest, runtime: Util.RuntimeOptions): CreateIpv6GatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpv6Gateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIpv6Gateway(request: CreateIpv6GatewayRequest): CreateIpv6GatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpv6GatewayWithOptions(request, runtime);
}

model CreateNatGatewayRequest {
  autoPay?: boolean(name='AutoPay'),
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  description?: string(name='Description', example='testnat'),
  duration?: string(name='Duration'),
  eipBindMode?: string(name='EipBindMode', example='MULTI_BINDED'),
  icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', example='false'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  internetChargeType?: string(name='InternetChargeType', example='PayByLcu'),
  name?: string(name='Name', example='fortest'),
  natType?: string(name='NatType', example='Enhanced'),
  networkType?: string(name='NetworkType', example='internet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pricingCycle?: string(name='PricingCycle'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', example='false'),
  spec?: string(name='Spec'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1e3se98n9fq8hle****'),
  vpcId?: string(name='VpcId', example='vpc-bp1di7uewzmtvfuq8****'),
}

model CreateNatGatewayResponseBody = {
  forwardTableIds?: {
    forwardTableId?: [ string ](name='ForwardTableId')
  }(name='ForwardTableIds'),
  fullNatTableIds?: {
    fullNatTableId?: [ string ](name='FullNatTableId')
  }(name='FullNatTableIds'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-112za33e4****'),
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
  snatTableIds?: {
    snatTableId?: [ string ](name='SnatTableId')
  }(name='SnatTableIds'),
}

model CreateNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNatGatewayResponseBody(name='body'),
}

async function createNatGatewayWithOptions(request: CreateNatGatewayRequest, runtime: Util.RuntimeOptions): CreateNatGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.eipBindMode)) {
    query['EipBindMode'] = request.eipBindMode;
  }
  if (!Util.isUnset(request.icmpReplyEnabled)) {
    query['IcmpReplyEnabled'] = request.icmpReplyEnabled;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.natType)) {
    query['NatType'] = request.natType;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityProtectionEnabled)) {
    query['SecurityProtectionEnabled'] = request.securityProtectionEnabled;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNatGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatGatewayWithOptions(request, runtime);
}

model CreateNatIpRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
  natIp?: string(name='NatIp', example='192.168.0.34'),
  natIpCidr?: string(name='NatIpCidr', example='192.168.0.0/24'),
  natIpCidrId?: string(name='NatIpCidrId', example='vpcnatip-gw8y7q3cpk3fggs87****'),
  natIpDescription?: string(name='NatIpDescription', example='test'),
  natIpName?: string(name='NatIpName', example='newnatip'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateNatIpResponseBody = {
  natIp?: string(name='NatIp', example='192.168.0.34'),
  natIpId?: string(name='NatIpId', example='vpcnatip-gw8y7q3cpk3fggs8****'),
  requestId?: string(name='RequestId', example='E9AD97A0-5338-43F8-8A80-5E274CCBA11B'),
}

model CreateNatIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNatIpResponseBody(name='body'),
}

async function createNatIpWithOptions(request: CreateNatIpRequest, runtime: Util.RuntimeOptions): CreateNatIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natIp)) {
    query['NatIp'] = request.natIp;
  }
  if (!Util.isUnset(request.natIpCidr)) {
    query['NatIpCidr'] = request.natIpCidr;
  }
  if (!Util.isUnset(request.natIpCidrId)) {
    query['NatIpCidrId'] = request.natIpCidrId;
  }
  if (!Util.isUnset(request.natIpDescription)) {
    query['NatIpDescription'] = request.natIpDescription;
  }
  if (!Util.isUnset(request.natIpName)) {
    query['NatIpName'] = request.natIpName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNatIp',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNatIp(request: CreateNatIpRequest): CreateNatIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatIpWithOptions(request, runtime);
}

model CreateNatIpCidrRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
  natIpCidr?: string(name='NatIpCidr', example='172.16.0.0/24'),
  natIpCidrDescription?: string(name='NatIpCidrDescription', example='mycidr'),
  natIpCidrName?: string(name='NatIpCidrName', example='newcidr'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateNatIpCidrResponseBody = {
  natIpCidrId?: string(name='NatIpCidrId', example='vpcnatcidr-gw8lhqtvdn4qnea****'),
  requestId?: string(name='RequestId', example='7021BEB1-210F-48A9-AB82-BE9A9110BB89'),
}

model CreateNatIpCidrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNatIpCidrResponseBody(name='body'),
}

async function createNatIpCidrWithOptions(request: CreateNatIpCidrRequest, runtime: Util.RuntimeOptions): CreateNatIpCidrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natIpCidr)) {
    query['NatIpCidr'] = request.natIpCidr;
  }
  if (!Util.isUnset(request.natIpCidrDescription)) {
    query['NatIpCidrDescription'] = request.natIpCidrDescription;
  }
  if (!Util.isUnset(request.natIpCidrName)) {
    query['NatIpCidrName'] = request.natIpCidrName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNatIpCidr',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNatIpCidr(request: CreateNatIpCidrRequest): CreateNatIpCidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatIpCidrWithOptions(request, runtime);
}

model CreateNetworkAclRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', example='This is my NetworkAcl.'),
  networkAclName?: string(name='NetworkAclName', example='acl-1'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-dsfd34356vdf****'),
}

model CreateNetworkAclResponseBody = {
  networkAclAttribute?: {
    creationTime?: string(name='CreationTime', example='2021-12-25 11:33:27'),
    description?: string(name='Description', example='This is my NetworkAcl.'),
    egressAclEntries?: {
      egressAclEntry?: [ 
      {
        description?: string(name='Description', example='This is EgressAclEntries.'),
        destinationCidrIp?: string(name='DestinationCidrIp', example='10.0.0.0/24'),
        networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2d447uw4tillxsdc****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
        policy?: string(name='Policy', example='accept'),
        port?: string(name='Port', example='-1/-1'),
        protocol?: string(name='Protocol', example='all'),
      }
    ](name='EgressAclEntry')
    }(name='EgressAclEntries'),
    ingressAclEntries?: {
      ingressAclEntry?: [ 
      {
        description?: string(name='Description', example='This is IngressAclEntries.'),
        networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2dk86arlydmexscd****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
        policy?: string(name='Policy', example='accept'),
        port?: string(name='Port', example='-1/-1'),
        protocol?: string(name='Protocol', example='all'),
        sourceCidrIp?: string(name='SourceCidrIp', example='10.0.0.0/24'),
      }
    ](name='IngressAclEntry')
    }(name='IngressAclEntries'),
    networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spdefr****'),
    networkAclName?: string(name='NetworkAclName', example='acl-1'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resources?: {
      resource?: [ 
      {
        resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdwgthy****'),
        resourceType?: string(name='ResourceType', example='VSwitch'),
        status?: string(name='Status', example='BINDED'),
      }
    ](name='Resource')
    }(name='Resources'),
    status?: string(name='Status', example='Modifying'),
    vpcId?: string(name='VpcId', example='vpc-a2d33rfpl72k5xsscd****'),
  }(name='NetworkAclAttribute'),
  networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spzasx****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model CreateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkAclResponseBody(name='body'),
}

async function createNetworkAclWithOptions(request: CreateNetworkAclRequest, runtime: Util.RuntimeOptions): CreateNetworkAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.networkAclName)) {
    query['NetworkAclName'] = request.networkAclName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkAcl',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNetworkAcl(request: CreateNetworkAclRequest): CreateNetworkAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkAclWithOptions(request, runtime);
}

model CreatePhysicalConnectionRequest {
  accessPointId?: string(name='AccessPointId', example='ap-cn-beijing-ft-A'),
  circuitCode?: string(name='CircuitCode', example='longtel001'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', example='description'),
  lineOperator?: string(name='LineOperator', example='CT'),
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerLocation?: string(name='PeerLocation'),
  portType?: string(name='PortType', example='1000Base-T'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-119mfjzm****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type', example='VPC'),
  bandwidth?: int32(name='bandwidth', example='10'),
}

model CreatePhysicalConnectionResponseBody = {
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
  requestId?: string(name='RequestId', example='8A6A5EC5-6F6C-4906-9689-56ACE58A13E0'),
}

model CreatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePhysicalConnectionResponseBody(name='body'),
}

async function createPhysicalConnectionWithOptions(request: CreatePhysicalConnectionRequest, runtime: Util.RuntimeOptions): CreatePhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessPointId)) {
    query['AccessPointId'] = request.accessPointId;
  }
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.lineOperator)) {
    query['LineOperator'] = request.lineOperator;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerLocation)) {
    query['PeerLocation'] = request.peerLocation;
  }
  if (!Util.isUnset(request.portType)) {
    query['PortType'] = request.portType;
  }
  if (!Util.isUnset(request.redundantPhysicalConnectionId)) {
    query['RedundantPhysicalConnectionId'] = request.redundantPhysicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['bandwidth'] = request.bandwidth;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPhysicalConnection(request: CreatePhysicalConnectionRequest): CreatePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhysicalConnectionWithOptions(request, runtime);
}

model CreatePhysicalConnectionOccupancyOrderRequest {
  autoPay?: boolean(name='AutoPay', example='false'),
  clientToken?: string(name='ClientToken', example='CBCE910E-D396-4944'),
  instanceChargeType?: string(name='InstanceChargeType', example='PrePaid'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', example='1'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1hp0wr072f6****'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePhysicalConnectionOccupancyOrderResponseBody = {
  data?: {
    orderId?: string(name='OrderId', example='501870558950179'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='9B9300FE-11E2-4E3B-949C-BED3B44DD26D'),
}

model CreatePhysicalConnectionOccupancyOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePhysicalConnectionOccupancyOrderResponseBody(name='body'),
}

async function createPhysicalConnectionOccupancyOrderWithOptions(request: CreatePhysicalConnectionOccupancyOrderRequest, runtime: Util.RuntimeOptions): CreatePhysicalConnectionOccupancyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePhysicalConnectionOccupancyOrder',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPhysicalConnectionOccupancyOrder(request: CreatePhysicalConnectionOccupancyOrderRequest): CreatePhysicalConnectionOccupancyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhysicalConnectionOccupancyOrderWithOptions(request, runtime);
}

model CreatePhysicalConnectionSetupOrderRequest {
  accessPointId?: string(name='AccessPointId', example='ap-cn-beijing-ft-A'),
  autoPay?: boolean(name='AutoPay', example='false'),
  clientToken?: string(name='ClientToken', example='318BB676-0A2B-43A0-9AD8-F1D34E93750F'),
  lineOperator?: string(name='LineOperator', example='CT'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portType?: string(name='PortType', example='100Base-T'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-bp10zsv5ntp****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePhysicalConnectionSetupOrderResponseBody = {
  orderId?: string(name='OrderId', example='202844382740728'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-2zegmc02v7ss4****'),
  requestId?: string(name='RequestId', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model CreatePhysicalConnectionSetupOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePhysicalConnectionSetupOrderResponseBody(name='body'),
}

async function createPhysicalConnectionSetupOrderWithOptions(request: CreatePhysicalConnectionSetupOrderRequest, runtime: Util.RuntimeOptions): CreatePhysicalConnectionSetupOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessPointId)) {
    query['AccessPointId'] = request.accessPointId;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.lineOperator)) {
    query['LineOperator'] = request.lineOperator;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portType)) {
    query['PortType'] = request.portType;
  }
  if (!Util.isUnset(request.redundantPhysicalConnectionId)) {
    query['RedundantPhysicalConnectionId'] = request.redundantPhysicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePhysicalConnectionSetupOrder',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPhysicalConnectionSetupOrder(request: CreatePhysicalConnectionSetupOrderRequest): CreatePhysicalConnectionSetupOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhysicalConnectionSetupOrderWithOptions(request, runtime);
}

model CreatePublicIpAddressPoolRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11****'),
  description?: string(name='Description', example='AddressPoolDescription'),
  dryRun?: boolean(name='DryRun', example='false'),
  isp?: string(name='Isp', example='BGP'),
  name?: string(name='Name', example='AddressPoolName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePublicIpAddressPoolResponseBody = {
  pulbicIpAddressPoolId?: string(name='PulbicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreatePublicIpAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePublicIpAddressPoolResponseBody(name='body'),
}

async function createPublicIpAddressPoolWithOptions(request: CreatePublicIpAddressPoolRequest, runtime: Util.RuntimeOptions): CreatePublicIpAddressPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePublicIpAddressPool',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPublicIpAddressPool(request: CreatePublicIpAddressPoolRequest): CreatePublicIpAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPublicIpAddressPoolWithOptions(request, runtime);
}

model CreateRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntries?: [ 
    {
      describption?: string(name='Describption', example='test'),
      dstCidrBlock?: string(name='DstCidrBlock', example='192.168.0.0/24'),
      ipVersion?: int32(name='IpVersion', example='IPv4'),
      name?: string(name='Name', example='test'),
      nextHop?: string(name='NextHop', example='i-j6c2fp57q8rr4jlu****'),
      nextHopType?: string(name='NextHopType', example='RouterInterface'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzd****'),
    }
  ](name='RouteEntries'),
}

model CreateRouteEntriesResponseBody = {
  failedCount?: int32(name='FailedCount', example='2'),
  failedRouteEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', example='192.168.0.0/24'),
      failedCode?: string(name='FailedCode', example='VPC_ROUTE_ENTRY_CIDR_BLOCK_DUPLICATE'),
      failedMessage?: string(name='FailedMessage', example='Specified CIDR block is already exists, entry.cidrBlock=xxxx'),
      nextHop?: string(name='NextHop', example='i-j6c2fp57q8rr4jlu****'),
    }
  ](name='FailedRouteEntries'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  routeEntryIds?: [ string ](name='RouteEntryIds'),
  successCount?: int32(name='SuccessCount', example='2'),
}

model CreateRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRouteEntriesResponseBody(name='body'),
}

async function createRouteEntriesWithOptions(request: CreateRouteEntriesRequest, runtime: Util.RuntimeOptions): CreateRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntries)) {
    query['RouteEntries'] = request.routeEntries;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRouteEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRouteEntries(request: CreateRouteEntriesRequest): CreateRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouteEntriesWithOptions(request, runtime);
}

model CreateRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  description?: string(name='Description', example='test'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.0/24'),
  nextHopId?: string(name='NextHopId', example='i-j6c2fp57q8rr4jlu****'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId', example='ri-2zeo3xzyf3cd8r4****'),
      nextHopType?: string(name='NextHopType', example='RouterInterface'),
      weight?: int32(name='Weight', example='10'),
    }
  ](name='NextHopList'),
  nextHopType?: string(name='NextHopType', example='RouterInterface'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntryName?: string(name='RouteEntryName', example='test'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzd****'),
}

model CreateRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  routeEntryId?: string(name='RouteEntryId', example='rte-sn6vjkioxte1gz83z****'),
}

model CreateRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRouteEntryResponseBody(name='body'),
}

async function createRouteEntryWithOptions(request: CreateRouteEntryRequest, runtime: Util.RuntimeOptions): CreateRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.nextHopId)) {
    query['NextHopId'] = request.nextHopId;
  }
  if (!Util.isUnset(request.nextHopList)) {
    query['NextHopList'] = request.nextHopList;
  }
  if (!Util.isUnset(request.nextHopType)) {
    query['NextHopType'] = request.nextHopType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntryName)) {
    query['RouteEntryName'] = request.routeEntryName;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRouteEntry(request: CreateRouteEntryRequest): CreateRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouteEntryWithOptions(request, runtime);
}

model CreateRouteTableRequest {
  associateType?: string(name='AssociateType', example='VSwitch'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04'),
  description?: string(name='Description', example='abc'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-zhangjiakou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableName?: string(name='RouteTableName', example='myRouteTable'),
  vpcId?: string(name='VpcId', example='vpc-bp1qpo0kug3a20qqe****'),
}

model CreateRouteTableResponseBody = {
  associateType?: string(name='AssociateType', example='VSwitch'),
  requestId?: string(name='RequestId', example='62172DD5-6BAC-45DF-8D44-E11ED28DCAC0'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
}

model CreateRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRouteTableResponseBody(name='body'),
}

async function createRouteTableWithOptions(request: CreateRouteTableRequest, runtime: Util.RuntimeOptions): CreateRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.associateType)) {
    query['AssociateType'] = request.associateType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableName)) {
    query['RouteTableName'] = request.routeTableName;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRouteTable',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRouteTable(request: CreateRouteTableRequest): CreateRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouteTableWithOptions(request, runtime);
}

model CreateRouterInterfaceRequest {
  accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-yh-ts-A'),
  autoPay?: boolean(name='AutoPay', example='false'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', example='abcabc'),
  fastLinkMode?: boolean(name='FastLinkMode'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', example='192.168.0.6'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', example='192.168.0.8'),
  instanceChargeType?: string(name='InstanceChargeType', example='PrePaid'),
  name?: string(name='Name', example='abc'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId', example='ap-cn-shanghai-nt-aligroup-C'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', example='ri-2zeo3xzyf38r4urzd****'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', example='253460731706911258'),
  oppositeRegionId?: string(name='OppositeRegionId', example='cn-shanghai'),
  oppositeRouterId?: string(name='OppositeRouterId', example='vrt-bp1lhl0taikrteen8****'),
  oppositeRouterType?: string(name='OppositeRouterType', example='VRouter'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', example='3'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  role?: string(name='Role', example='InitiatingSide'),
  routerId?: string(name='RouterId', example='vbr-m5ebm6g9ptc9mly1c****'),
  routerType?: string(name='RouterType', example='VRouter'),
  spec?: string(name='Spec', example='Mini.2'),
}

model CreateRouterInterfaceResponseBody = {
  orderId?: long(name='OrderId', example='202008594930117'),
  requestId?: string(name='RequestId', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2ze7fbuohm****'),
}

model CreateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRouterInterfaceResponseBody(name='body'),
}

async function createRouterInterfaceWithOptions(request: CreateRouterInterfaceRequest, runtime: Util.RuntimeOptions): CreateRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessPointId)) {
    query['AccessPointId'] = request.accessPointId;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fastLinkMode)) {
    query['FastLinkMode'] = request.fastLinkMode;
  }
  if (!Util.isUnset(request.healthCheckSourceIp)) {
    query['HealthCheckSourceIp'] = request.healthCheckSourceIp;
  }
  if (!Util.isUnset(request.healthCheckTargetIp)) {
    query['HealthCheckTargetIp'] = request.healthCheckTargetIp;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.oppositeAccessPointId)) {
    query['OppositeAccessPointId'] = request.oppositeAccessPointId;
  }
  if (!Util.isUnset(request.oppositeInterfaceId)) {
    query['OppositeInterfaceId'] = request.oppositeInterfaceId;
  }
  if (!Util.isUnset(request.oppositeInterfaceOwnerId)) {
    query['OppositeInterfaceOwnerId'] = request.oppositeInterfaceOwnerId;
  }
  if (!Util.isUnset(request.oppositeRegionId)) {
    query['OppositeRegionId'] = request.oppositeRegionId;
  }
  if (!Util.isUnset(request.oppositeRouterId)) {
    query['OppositeRouterId'] = request.oppositeRouterId;
  }
  if (!Util.isUnset(request.oppositeRouterType)) {
    query['OppositeRouterType'] = request.oppositeRouterType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  if (!Util.isUnset(request.routerType)) {
    query['RouterType'] = request.routerType;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRouterInterface',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRouterInterface(request: CreateRouterInterfaceRequest): CreateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouterInterfaceWithOptions(request, runtime);
}

model CreateSnatEntryRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44****'),
  eipAffinity?: int32(name='EipAffinity', example='1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snatEntryName?: string(name='SnatEntryName', example='SnatEntry-1'),
  snatIp?: string(name='SnatIp', example='47.98.XX.XX'),
  snatTableId?: string(name='SnatTableId', example='stb-bp190wu8io1vgev****'),
  sourceCIDR?: string(name='SourceCIDR', example='10.1.1.0/24'),
  sourceVSwitchId?: string(name='SourceVSwitchId', example='vsw-bp1nhx2s9ui5o****'),
}

model CreateSnatEntryResponseBody = {
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
  snatEntryId?: string(name='SnatEntryId', example='snat-kmd6nv8fy****'),
}

model CreateSnatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnatEntryResponseBody(name='body'),
}

async function createSnatEntryWithOptions(request: CreateSnatEntryRequest, runtime: Util.RuntimeOptions): CreateSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eipAffinity)) {
    query['EipAffinity'] = request.eipAffinity;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snatEntryName)) {
    query['SnatEntryName'] = request.snatEntryName;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  if (!Util.isUnset(request.snatTableId)) {
    query['SnatTableId'] = request.snatTableId;
  }
  if (!Util.isUnset(request.sourceCIDR)) {
    query['SourceCIDR'] = request.sourceCIDR;
  }
  if (!Util.isUnset(request.sourceVSwitchId)) {
    query['SourceVSwitchId'] = request.sourceVSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnatEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSnatEntry(request: CreateSnatEntryRequest): CreateSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnatEntryWithOptions(request, runtime);
}

model CreateSslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  name?: string(name='Name', example='SslVpnClientCert1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-m5et0q3iy1qex328w****'),
}

model CreateSslVpnClientCertResponseBody = {
  name?: string(name='Name', example='SslVpnClientCert'),
  requestId?: string(name='RequestId', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-m5euof6s5jy8vs5kd****'),
}

model CreateSslVpnClientCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSslVpnClientCertResponseBody(name='body'),
}

async function createSslVpnClientCertWithOptions(request: CreateSslVpnClientCertRequest, runtime: Util.RuntimeOptions): CreateSslVpnClientCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnServerId)) {
    query['SslVpnServerId'] = request.sslVpnServerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSslVpnClientCert',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSslVpnClientCert(request: CreateSslVpnClientCertRequest): CreateSslVpnClientCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSslVpnClientCertWithOptions(request, runtime);
}

model CreateSslVpnServerRequest {
  cipher?: string(name='Cipher', example='AES-128-CBC'),
  clientIpPool?: string(name='ClientIpPool', example='192.168.1.0/24'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  compress?: boolean(name='Compress', example='false'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', example='false'),
  IDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-p****'),
  IDaaSRegionId?: string(name='IDaaSRegionId', example='cn-hangzhou'),
  localSubnet?: string(name='LocalSubnet', example='10.0.0.0/8'),
  name?: string(name='Name', example='sslvpnname'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  port?: int32(name='Port', example='1194'),
  proto?: string(name='Proto', example='UDP'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1hgim8by0kc9nga****'),
}

model CreateSslVpnServerResponseBody = {
  name?: string(name='Name', example='test'),
  requestId?: string(name='RequestId', example='E98A9651-7098-40C7-8F85-C818D1EBBA85'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
}

model CreateSslVpnServerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSslVpnServerResponseBody(name='body'),
}

async function createSslVpnServerWithOptions(request: CreateSslVpnServerRequest, runtime: Util.RuntimeOptions): CreateSslVpnServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cipher)) {
    query['Cipher'] = request.cipher;
  }
  if (!Util.isUnset(request.clientIpPool)) {
    query['ClientIpPool'] = request.clientIpPool;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compress)) {
    query['Compress'] = request.compress;
  }
  if (!Util.isUnset(request.enableMultiFactorAuth)) {
    query['EnableMultiFactorAuth'] = request.enableMultiFactorAuth;
  }
  if (!Util.isUnset(request.IDaaSInstanceId)) {
    query['IDaaSInstanceId'] = request.IDaaSInstanceId;
  }
  if (!Util.isUnset(request.IDaaSRegionId)) {
    query['IDaaSRegionId'] = request.IDaaSRegionId;
  }
  if (!Util.isUnset(request.localSubnet)) {
    query['LocalSubnet'] = request.localSubnet;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSslVpnServer',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSslVpnServer(request: CreateSslVpnServerRequest): CreateSslVpnServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSslVpnServerWithOptions(request, runtime);
}

model CreateTrafficMirrorFilterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  egressRules?: [ 
    {
      action?: string(name='Action', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', example='22/40'),
      priority?: int32(name='Priority', example='1'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', example='22/40'),
    }
  ](name='EgressRules'),
  ingressRules?: [ 
    {
      action?: string(name='Action', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', example='80/120'),
      priority?: int32(name='Priority', example='1'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', example='80/120'),
    }
  ](name='IngressRules'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', example='this is a filter.'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', example='abc'),
}

model CreateTrafficMirrorFilterResponseBody = {
  requestId?: string(name='RequestId', example='28DB147D-217B-43E8-9E94-A3F6837DDC8A'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
}

model CreateTrafficMirrorFilterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrafficMirrorFilterResponseBody(name='body'),
}

async function createTrafficMirrorFilterWithOptions(request: CreateTrafficMirrorFilterRequest, runtime: Util.RuntimeOptions): CreateTrafficMirrorFilterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.egressRules)) {
    query['EgressRules'] = request.egressRules;
  }
  if (!Util.isUnset(request.ingressRules)) {
    query['IngressRules'] = request.ingressRules;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterDescription)) {
    query['TrafficMirrorFilterDescription'] = request.trafficMirrorFilterDescription;
  }
  if (!Util.isUnset(request.trafficMirrorFilterName)) {
    query['TrafficMirrorFilterName'] = request.trafficMirrorFilterName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrafficMirrorFilter',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTrafficMirrorFilter(request: CreateTrafficMirrorFilterRequest): CreateTrafficMirrorFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficMirrorFilterWithOptions(request, runtime);
}

model CreateTrafficMirrorFilterRulesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  egressRules?: [ 
    {
      action?: string(name='Action', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', example='22/40'),
      priority?: int32(name='Priority', example='1'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', example='22/40'),
    }
  ](name='EgressRules'),
  ingressRules?: [ 
    {
      action?: string(name='Action', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', example='80/120'),
      priority?: int32(name='Priority', example='1'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', example='80/120'),
    }
  ](name='IngressRules'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
}

model CreateTrafficMirrorFilterRulesResponseBody = {
  egressRules?: [ 
    {
      instanceId?: string(name='InstanceId', example='tmr-j6cok23ugp53eeib5****'),
    }
  ](name='EgressRules'),
  ingressRules?: [ 
    {
      instanceId?: string(name='InstanceId', example='tmr-j6c6rtallo51ouzv3****'),
    }
  ](name='IngressRules'),
  requestId?: string(name='RequestId', example='07F272E2-6AD5-433A-8207-A607C76F1676'),
}

model CreateTrafficMirrorFilterRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrafficMirrorFilterRulesResponseBody(name='body'),
}

async function createTrafficMirrorFilterRulesWithOptions(request: CreateTrafficMirrorFilterRulesRequest, runtime: Util.RuntimeOptions): CreateTrafficMirrorFilterRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.egressRules)) {
    query['EgressRules'] = request.egressRules;
  }
  if (!Util.isUnset(request.ingressRules)) {
    query['IngressRules'] = request.ingressRules;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterId)) {
    query['TrafficMirrorFilterId'] = request.trafficMirrorFilterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrafficMirrorFilterRules',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTrafficMirrorFilterRules(request: CreateTrafficMirrorFilterRulesRequest): CreateTrafficMirrorFilterRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficMirrorFilterRulesWithOptions(request, runtime);
}

model CreateTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  dryRun?: boolean(name='DryRun', example='false'),
  enabled?: boolean(name='Enabled', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  packetLength?: int32(name='PacketLength', example='1500'),
  priority?: int32(name='Priority', example='1'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
  trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', example='This is a trafficmirrorsession.'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', example='test'),
  trafficMirrorSourceIds?: [ string ](name='TrafficMirrorSourceIds', example='eni-j6c2fp57q8rr47rp****'),
  trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', example='eni-j6c8znm5l1yt4sox****'),
  trafficMirrorTargetType?: string(name='TrafficMirrorTargetType', example='NetworkInterface'),
  virtualNetworkId?: int32(name='VirtualNetworkId', example='1'),
}

model CreateTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', example='tms-j6ce5di4w7nvigfjz****'),
}

model CreateTrafficMirrorSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrafficMirrorSessionResponseBody(name='body'),
}

async function createTrafficMirrorSessionWithOptions(request: CreateTrafficMirrorSessionRequest, runtime: Util.RuntimeOptions): CreateTrafficMirrorSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.packetLength)) {
    query['PacketLength'] = request.packetLength;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterId)) {
    query['TrafficMirrorFilterId'] = request.trafficMirrorFilterId;
  }
  if (!Util.isUnset(request.trafficMirrorSessionDescription)) {
    query['TrafficMirrorSessionDescription'] = request.trafficMirrorSessionDescription;
  }
  if (!Util.isUnset(request.trafficMirrorSessionName)) {
    query['TrafficMirrorSessionName'] = request.trafficMirrorSessionName;
  }
  if (!Util.isUnset(request.trafficMirrorSourceIds)) {
    query['TrafficMirrorSourceIds'] = request.trafficMirrorSourceIds;
  }
  if (!Util.isUnset(request.trafficMirrorTargetId)) {
    query['TrafficMirrorTargetId'] = request.trafficMirrorTargetId;
  }
  if (!Util.isUnset(request.trafficMirrorTargetType)) {
    query['TrafficMirrorTargetType'] = request.trafficMirrorTargetType;
  }
  if (!Util.isUnset(request.virtualNetworkId)) {
    query['VirtualNetworkId'] = request.virtualNetworkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrafficMirrorSession',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTrafficMirrorSession(request: CreateTrafficMirrorSessionRequest): CreateTrafficMirrorSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficMirrorSessionWithOptions(request, runtime);
}

model CreateVSwitchRequest {
  cidrBlock?: string(name='CidrBlock', example='172.16.0.0/24'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  description?: string(name='Description', example='vSwitch'),
  ipv6CidrBlock?: int32(name='Ipv6CidrBlock', example='12'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchName?: string(name='VSwitchName', example='vSwitch-1'),
  vpcId?: string(name='VpcId', example='vpc-257gqcdfvx6n****'),
  vpcIpv6CidrBlock?: string(name='VpcIpv6CidrBlock', example='2408:XXXX:0:6a::/56'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25navfgbue4g****'),
}

model CreateVSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVSwitchResponseBody(name='body'),
}

async function createVSwitchWithOptions(request: CreateVSwitchRequest, runtime: Util.RuntimeOptions): CreateVSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipv6CidrBlock)) {
    query['Ipv6CidrBlock'] = request.ipv6CidrBlock;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchName)) {
    query['VSwitchName'] = request.vSwitchName;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcIpv6CidrBlock)) {
    query['VpcIpv6CidrBlock'] = request.vpcIpv6CidrBlock;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVSwitch',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVSwitchWithOptions(request, runtime);
}

model CreateVbrHaRequest {
  clientToken?: string(name='ClientToken', example='CBCE910E-D396-4944-8****'),
  description?: string(name='Description', example='VBRHa'),
  dryRun?: boolean(name='DryRun', example='false'),
  name?: string(name='Name', example='VBRHa'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerVbrId?: string(name='PeerVbrId', example='vbr-bp12mw1f8k3jgygk9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****'),
}

model CreateVbrHaResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  vbrHaId?: string(name='VbrHaId', example='vbrha-sa1sxheuxtd98****'),
}

model CreateVbrHaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVbrHaResponseBody(name='body'),
}

async function createVbrHaWithOptions(request: CreateVbrHaRequest, runtime: Util.RuntimeOptions): CreateVbrHaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerVbrId)) {
    query['PeerVbrId'] = request.peerVbrId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVbrHa',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVbrHa(request: CreateVbrHaRequest): CreateVbrHaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVbrHaWithOptions(request, runtime);
}

model CreateVcoRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  description?: string(name='Description', example='desctest'),
  nextHop?: string(name='NextHop', example='vco-p0w2jpkhi2eeop6q6****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='192.168.10.0/24'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
  weight?: int32(name='Weight', example='100'),
}

model CreateVcoRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', example='1658387202664'),
  description?: string(name='Description', example='desctest'),
  nextHop?: string(name='NextHop', example='vco-p0w2jpkhi2eeop6q6****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  requestId?: string(name='RequestId', example='CFC4D13B-E680-3985-95B1-87AA155481DF'),
  routeDest?: string(name='RouteDest', example='192.168.10.0/24'),
  state?: string(name='State', example='published'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
  weight?: int32(name='Weight', example='100'),
}

model CreateVcoRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVcoRouteEntryResponseBody(name='body'),
}

async function createVcoRouteEntryWithOptions(request: CreateVcoRouteEntryRequest, runtime: Util.RuntimeOptions): CreateVcoRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVcoRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVcoRouteEntry(request: CreateVcoRouteEntryRequest): CreateVcoRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVcoRouteEntryWithOptions(request, runtime);
}

model CreateVirtualBorderRouterRequest {
  bandwidth?: long(name='Bandwidth', example='100'),
  circuitCode?: string(name='CircuitCode', example='longtel001'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', example='desc'),
  enableIpv6?: boolean(name='EnableIpv6', example='true'),
  localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerGatewayIp?: string(name='PeerGatewayIp', example='116.62.XX.XX'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:4:4:4:4:4:4'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.252'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-2zextbehcx****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrOwnerId?: long(name='VbrOwnerId', example='168811111****'),
  vlanId?: int32(name='VlanId', example='0'),
}

model CreateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****'),
}

model CreateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVirtualBorderRouterResponseBody(name='body'),
}

async function createVirtualBorderRouterWithOptions(request: CreateVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): CreateVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableIpv6)) {
    query['EnableIpv6'] = request.enableIpv6;
  }
  if (!Util.isUnset(request.localGatewayIp)) {
    query['LocalGatewayIp'] = request.localGatewayIp;
  }
  if (!Util.isUnset(request.localIpv6GatewayIp)) {
    query['LocalIpv6GatewayIp'] = request.localIpv6GatewayIp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerGatewayIp)) {
    query['PeerGatewayIp'] = request.peerGatewayIp;
  }
  if (!Util.isUnset(request.peerIpv6GatewayIp)) {
    query['PeerIpv6GatewayIp'] = request.peerIpv6GatewayIp;
  }
  if (!Util.isUnset(request.peeringIpv6SubnetMask)) {
    query['PeeringIpv6SubnetMask'] = request.peeringIpv6SubnetMask;
  }
  if (!Util.isUnset(request.peeringSubnetMask)) {
    query['PeeringSubnetMask'] = request.peeringSubnetMask;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrOwnerId)) {
    query['VbrOwnerId'] = request.vbrOwnerId;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVirtualBorderRouter',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVirtualBorderRouter(request: CreateVirtualBorderRouterRequest): CreateVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualBorderRouterWithOptions(request, runtime);
}

model CreateVirtualPhysicalConnectionRequest {
  description?: string(name='Description', example='desctest'),
  dryRun?: boolean(name='DryRun', example='false'),
  name?: string(name='Name', example='nametest'),
  orderMode?: string(name='OrderMode', example='PayByVirtualPhysicalConnectionOwner'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  spec?: string(name='Spec', example='50M'),
  token?: string(name='Token', example='CBCE910E-D396-4944-8****'),
  vlanId?: long(name='VlanId', example='4'),
  vpconnAliUid?: long(name='VpconnAliUid', example='1210123456123456'),
}

model CreateVirtualPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='CD14EA74-E9C3-59A9-942A-DFEC7E12818D'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', example='pc-bp1mrgfbtmc9brre7****'),
}

model CreateVirtualPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVirtualPhysicalConnectionResponseBody(name='body'),
}

async function createVirtualPhysicalConnectionWithOptions(request: CreateVirtualPhysicalConnectionRequest, runtime: Util.RuntimeOptions): CreateVirtualPhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.orderMode)) {
    query['OrderMode'] = request.orderMode;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  if (!Util.isUnset(request.vpconnAliUid)) {
    query['VpconnAliUid'] = request.vpconnAliUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVirtualPhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVirtualPhysicalConnection(request: CreateVirtualPhysicalConnectionRequest): CreateVirtualPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualPhysicalConnectionWithOptions(request, runtime);
}

model CreateVpcRequest {
  cidrBlock?: string(name='CidrBlock', example='172.16.0.0/12'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', example='This is my first Vpc'),
  dryRun?: boolean(name='DryRun', example='false'),
  enableIpv6?: boolean(name='EnableIpv6', example='false'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:6a::/56'),
  ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr', example='192.168.0.0/12'),
  vpcName?: string(name='VpcName', example='abc'),
}

model CreateVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdv****'),
  VRouterId?: string(name='VRouterId', example='vrt-bp1lhl0taikrteen8****'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
}

model CreateVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcResponseBody(name='body'),
}

async function createVpcWithOptions(request: CreateVpcRequest, runtime: Util.RuntimeOptions): CreateVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.enableIpv6)) {
    query['EnableIpv6'] = request.enableIpv6;
  }
  if (!Util.isUnset(request.ipv6CidrBlock)) {
    query['Ipv6CidrBlock'] = request.ipv6CidrBlock;
  }
  if (!Util.isUnset(request.ipv6Isp)) {
    query['Ipv6Isp'] = request.ipv6Isp;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.vpcName)) {
    query['VpcName'] = request.vpcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpc',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcWithOptions(request, runtime);
}

model CreateVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  endpointDescription?: string(name='EndpointDescription', example='test'),
  endpointName?: string(name='EndpointName', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyDocument?: string(name='PolicyDocument', example='{   "Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceName?: string(name='ServiceName', example='com.aliyun.cn-hangzhou.oss'),
  vpcId?: string(name='VpcId', example='vpc-bp1gsk7h12ew7oegk****'),
}

model CreateVpcGatewayEndpointResponseBody = {
  creationTime?: string(name='CreationTime', example='2021-08-27T01:58:37Z'),
  endpointId?: string(name='EndpointId', example='vpce-bp1w1dmdqjpwul0v3****'),
  endpointName?: string(name='EndpointName', example='test'),
  requestId?: string(name='RequestId', example='62CFC815-E08A-5CF4-92D1-54273EC9E406'),
  serviceName?: string(name='ServiceName', example='com.aliyun.cn-hangzhou.oss'),
}

model CreateVpcGatewayEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcGatewayEndpointResponseBody(name='body'),
}

async function createVpcGatewayEndpointWithOptions(request: CreateVpcGatewayEndpointRequest, runtime: Util.RuntimeOptions): CreateVpcGatewayEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointDescription)) {
    query['EndpointDescription'] = request.endpointDescription;
  }
  if (!Util.isUnset(request.endpointName)) {
    query['EndpointName'] = request.endpointName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyDocument)) {
    query['PolicyDocument'] = request.policyDocument;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcGatewayEndpoint',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpcGatewayEndpoint(request: CreateVpcGatewayEndpointRequest): CreateVpcGatewayEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcGatewayEndpointWithOptions(request, runtime);
}

model CreateVpcPrefixListRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ipVersion?: string(name='IpVersion', example='ipv4'),
  maxEntries?: int32(name='MaxEntries', example='50'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListDescription?: string(name='PrefixListDescription', example='description'),
  prefixListEntries?: [ 
    {
      cidr?: string(name='Cidr'),
      description?: string(name='Description'),
    }
  ](name='PrefixListEntries'),
  prefixListName?: string(name='PrefixListName', example='name'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateVpcPrefixListResponseBody = {
  prefixListId?: string(name='PrefixListId', example='pl-0b700s2ee3***'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateVpcPrefixListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcPrefixListResponseBody(name='body'),
}

async function createVpcPrefixListWithOptions(request: CreateVpcPrefixListRequest, runtime: Util.RuntimeOptions): CreateVpcPrefixListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.maxEntries)) {
    query['MaxEntries'] = request.maxEntries;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListDescription)) {
    query['PrefixListDescription'] = request.prefixListDescription;
  }
  if (!Util.isUnset(request.prefixListEntries)) {
    query['PrefixListEntries'] = request.prefixListEntries;
  }
  if (!Util.isUnset(request.prefixListName)) {
    query['PrefixListName'] = request.prefixListName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcPrefixList',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpcPrefixList(request: CreateVpcPrefixListRequest): CreateVpcPrefixListResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcPrefixListWithOptions(request, runtime);
}

model CreateVpconnFromVbrRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  orderMode?: string(name='OrderMode', example='PayByVirtualPhysicalConnectionOwner'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  token?: string(name='Token', example='CBCE910E-D396-4944-8****'),
  vbrId?: string(name='VbrId', example='vbr-bp136flp1mf8mlq6r****'),
}

model CreateVpconnFromVbrResponseBody = {
  requestId?: string(name='RequestId', example='5356F028-0F5C-56FC-8574-897D24379041'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', example='pc-bp1mrgfbtmc9brre7****'),
}

model CreateVpconnFromVbrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpconnFromVbrResponseBody(name='body'),
}

async function createVpconnFromVbrWithOptions(request: CreateVpconnFromVbrRequest, runtime: Util.RuntimeOptions): CreateVpconnFromVbrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.orderMode)) {
    query['OrderMode'] = request.orderMode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpconnFromVbr',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpconnFromVbr(request: CreateVpconnFromVbrRequest): CreateVpconnFromVbrResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpconnFromVbrWithOptions(request, runtime);
}

model CreateVpnAttachmentRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', example='true'),
  bgpConfig?: string(name='BgpConfig', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-p0w2jemrcj5u61un8****'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  healthCheckConfig?: string(name='HealthCheckConfig', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3","Policy": "revoke_route"}'),
  ikeConfig?: string(name='IkeConfig', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalIdIPsec":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', example='nametest'),
  networkType?: string(name='NetworkType', example='public'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  remoteCaCert?: string(name='RemoteCaCert', example='c20ycDI1NnYxIENBIChURVNUIFN****'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.1.3.0/24,10.1.4.0/24'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateVpnAttachmentResponseBody = {
  code?: string(name='Code', example='200'),
  createTime?: long(name='CreateTime', example='1658201810000'),
  message?: string(name='Message', example='successful'),
  name?: string(name='Name', example='nametest'),
  requestId?: string(name='RequestId', example='88187252-0E26-3C4D-9D1D-32A04454EBBA'),
  success?: boolean(name='Success', example='true'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0wb09rama8qwwgfn****'),
}

model CreateVpnAttachmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpnAttachmentResponseBody(name='body'),
}

async function createVpnAttachmentWithOptions(request: CreateVpnAttachmentRequest, runtime: Util.RuntimeOptions): CreateVpnAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoConfigRoute)) {
    query['AutoConfigRoute'] = request.autoConfigRoute;
  }
  if (!Util.isUnset(request.bgpConfig)) {
    query['BgpConfig'] = request.bgpConfig;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.customerGatewayId)) {
    query['CustomerGatewayId'] = request.customerGatewayId;
  }
  if (!Util.isUnset(request.effectImmediately)) {
    query['EffectImmediately'] = request.effectImmediately;
  }
  if (!Util.isUnset(request.enableDpd)) {
    query['EnableDpd'] = request.enableDpd;
  }
  if (!Util.isUnset(request.enableNatTraversal)) {
    query['EnableNatTraversal'] = request.enableNatTraversal;
  }
  if (!Util.isUnset(request.healthCheckConfig)) {
    query['HealthCheckConfig'] = request.healthCheckConfig;
  }
  if (!Util.isUnset(request.ikeConfig)) {
    query['IkeConfig'] = request.ikeConfig;
  }
  if (!Util.isUnset(request.ipsecConfig)) {
    query['IpsecConfig'] = request.ipsecConfig;
  }
  if (!Util.isUnset(request.localSubnet)) {
    query['LocalSubnet'] = request.localSubnet;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteCaCert)) {
    query['RemoteCaCert'] = request.remoteCaCert;
  }
  if (!Util.isUnset(request.remoteSubnet)) {
    query['RemoteSubnet'] = request.remoteSubnet;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpnAttachment',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpnAttachment(request: CreateVpnAttachmentRequest): CreateVpnAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpnAttachmentWithOptions(request, runtime);
}

model CreateVpnConnectionRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', example='true'),
  bgpConfig?: string(name='BgpConfig', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-p0w2jemrcj5u61un8****'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  healthCheckConfig?: string(name='HealthCheckConfig', example='{"enable":"true","dip":"192.168.10.1","sip":"10.10.1.1","interval":"3","retry":"3"}'),
  ikeConfig?: string(name='IkeConfig', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalIdIPsec":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}'),
  localSubnet?: string(name='LocalSubnet', example='10.10.1.0/24,10.10.2.0/24'),
  name?: string(name='Name', example='IPsec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', example='c20ycDI1NnYxIENBIChURVNUIFN****'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.10.3.0/24,10.10.4.0/24'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm****'),
}

model CreateVpnConnectionResponseBody = {
  createTime?: long(name='CreateTime', example='1544666102000'),
  name?: string(name='Name', example='test'),
  requestId?: string(name='RequestId', example='082AD562-B8DB-4BB2-861F-DA1FCA01FD76'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp15oes1py4i6****'),
}

model CreateVpnConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpnConnectionResponseBody(name='body'),
}

async function createVpnConnectionWithOptions(request: CreateVpnConnectionRequest, runtime: Util.RuntimeOptions): CreateVpnConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoConfigRoute)) {
    query['AutoConfigRoute'] = request.autoConfigRoute;
  }
  if (!Util.isUnset(request.bgpConfig)) {
    query['BgpConfig'] = request.bgpConfig;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.customerGatewayId)) {
    query['CustomerGatewayId'] = request.customerGatewayId;
  }
  if (!Util.isUnset(request.effectImmediately)) {
    query['EffectImmediately'] = request.effectImmediately;
  }
  if (!Util.isUnset(request.enableDpd)) {
    query['EnableDpd'] = request.enableDpd;
  }
  if (!Util.isUnset(request.enableNatTraversal)) {
    query['EnableNatTraversal'] = request.enableNatTraversal;
  }
  if (!Util.isUnset(request.healthCheckConfig)) {
    query['HealthCheckConfig'] = request.healthCheckConfig;
  }
  if (!Util.isUnset(request.ikeConfig)) {
    query['IkeConfig'] = request.ikeConfig;
  }
  if (!Util.isUnset(request.ipsecConfig)) {
    query['IpsecConfig'] = request.ipsecConfig;
  }
  if (!Util.isUnset(request.localSubnet)) {
    query['LocalSubnet'] = request.localSubnet;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteCaCertificate)) {
    query['RemoteCaCertificate'] = request.remoteCaCertificate;
  }
  if (!Util.isUnset(request.remoteSubnet)) {
    query['RemoteSubnet'] = request.remoteSubnet;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpnConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpnConnection(request: CreateVpnConnectionRequest): CreateVpnConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpnConnectionWithOptions(request, runtime);
}

model CreateVpnGatewayRequest {
  autoPay?: boolean(name='AutoPay', example='false'),
  bandwidth?: int32(name='Bandwidth', example='5'),
  clientToken?: string(name='ClientToken', example='02fb3da4****'),
  enableIpsec?: boolean(name='EnableIpsec', example='true'),
  enableSsl?: boolean(name='EnableSsl', example='false'),
  instanceChargeType?: string(name='InstanceChargeType'),
  name?: string(name='Name', example='MYVPN'),
  networkType?: string(name='NetworkType', example='public'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslConnections?: int32(name='SslConnections', example='5'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1j5miw2bae9s2vt****'),
  vpcId?: string(name='VpcId', example='vpc-bp1ub1yt9cvakoelj****'),
  vpnType?: string(name='VpnType', example='Normal'),
}

model CreateVpnGatewayResponseBody = {
  name?: string(name='Name', example='MYVPN'),
  orderId?: long(name='OrderId', example='208240895400460'),
  requestId?: string(name='RequestId', example='EB2C156A-41F8-49CC-A756-D55AFC8BFD69'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-uf68lxhgr7ftbqr3p****'),
}

model CreateVpnGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpnGatewayResponseBody(name='body'),
}

async function createVpnGatewayWithOptions(request: CreateVpnGatewayRequest, runtime: Util.RuntimeOptions): CreateVpnGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enableIpsec)) {
    query['EnableIpsec'] = request.enableIpsec;
  }
  if (!Util.isUnset(request.enableSsl)) {
    query['EnableSsl'] = request.enableSsl;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslConnections)) {
    query['SslConnections'] = request.sslConnections;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpnType)) {
    query['VpnType'] = request.vpnType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpnGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpnGateway(request: CreateVpnGatewayRequest): CreateVpnGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpnGatewayWithOptions(request, runtime);
}

model CreateVpnPbrRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b'),
  description?: string(name='Description', example='111'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority'),
  publishVpc?: boolean(name='PublishVpc', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  routeSource?: string(name='RouteSource', example='192.168.1.0/24'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', example='0'),
}

model CreateVpnPbrRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', example='1492747187000'),
  description?: string(name='Description', example='111'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  priority?: int32(name='Priority'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  routeSource?: string(name='RouteSource', example='192.168.1.0/24'),
  state?: string(name='State', example='normal'),
  vpnInstanceId?: string(name='VpnInstanceId', example='vpn-bp1cmw7jh1nfe43m9****'),
  weight?: int32(name='Weight', example='0'),
}

model CreateVpnPbrRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpnPbrRouteEntryResponseBody(name='body'),
}

async function createVpnPbrRouteEntryWithOptions(request: CreateVpnPbrRouteEntryRequest, runtime: Util.RuntimeOptions): CreateVpnPbrRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.publishVpc)) {
    query['PublishVpc'] = request.publishVpc;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.routeSource)) {
    query['RouteSource'] = request.routeSource;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpnPbrRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpnPbrRouteEntry(request: CreateVpnPbrRouteEntryRequest): CreateVpnPbrRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpnPbrRouteEntryWithOptions(request, runtime);
}

model CreateVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae****'),
  description?: string(name='Description', example='mytest'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  publishVpc?: boolean(name='PublishVpc', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', example='0'),
}

model CreateVpnRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', example='1492747187000'),
  description?: string(name='Description', example='mytest'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  state?: string(name='State', example='published'),
  vpnInstanceId?: string(name='VpnInstanceId', example='vpn-bp1cmw7jh1nfe43m9****'),
  weight?: int32(name='Weight', example='0'),
}

model CreateVpnRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpnRouteEntryResponseBody(name='body'),
}

async function createVpnRouteEntryWithOptions(request: CreateVpnRouteEntryRequest, runtime: Util.RuntimeOptions): CreateVpnRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publishVpc)) {
    query['PublishVpc'] = request.publishVpc;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpnRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpnRouteEntry(request: CreateVpnRouteEntryRequest): CreateVpnRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpnRouteEntryWithOptions(request, runtime);
}

model DeactivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urz****'),
}

model DeactivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='BE7EB53A-99AB-4DA8-AEDE-75FA90D046A6'),
}

model DeactivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeactivateRouterInterfaceResponseBody(name='body'),
}

async function deactivateRouterInterfaceWithOptions(request: DeactivateRouterInterfaceRequest, runtime: Util.RuntimeOptions): DeactivateRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactivateRouterInterface',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deactivateRouterInterface(request: DeactivateRouterInterfaceRequest): DeactivateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactivateRouterInterfaceWithOptions(request, runtime);
}

model DeactiveFlowLogRequest {
  flowLogId?: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeactiveFlowLogResponseBody = {
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
}

model DeactiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeactiveFlowLogResponseBody(name='body'),
}

async function deactiveFlowLogWithOptions(request: DeactiveFlowLogRequest, runtime: Util.RuntimeOptions): DeactiveFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactiveFlowLog',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deactiveFlowLog(request: DeactiveFlowLogRequest): DeactiveFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactiveFlowLogWithOptions(request, runtime);
}

model DeleteBgpGroupRequest {
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-bp1k25cyp26cllath****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteBgpGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteBgpGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBgpGroupResponseBody(name='body'),
}

async function deleteBgpGroupWithOptions(request: DeleteBgpGroupRequest, runtime: Util.RuntimeOptions): DeleteBgpGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bgpGroupId)) {
    query['BgpGroupId'] = request.bgpGroupId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBgpGroup',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBgpGroup(request: DeleteBgpGroupRequest): DeleteBgpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBgpGroupWithOptions(request, runtime);
}

model DeleteBgpNetworkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dstCidrBlock?: string(name='DstCidrBlock', example='10.110.192.12/32'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****'),
}

model DeleteBgpNetworkResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteBgpNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBgpNetworkResponseBody(name='body'),
}

async function deleteBgpNetworkWithOptions(request: DeleteBgpNetworkRequest, runtime: Util.RuntimeOptions): DeleteBgpNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dstCidrBlock)) {
    query['DstCidrBlock'] = request.dstCidrBlock;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBgpNetwork',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBgpNetwork(request: DeleteBgpNetworkRequest): DeleteBgpNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBgpNetworkWithOptions(request, runtime);
}

model DeleteBgpPeerRequest {
  bgpPeerId?: string(name='BgpPeerId', example='bgp-wz977wcrmb69a********'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteBgpPeerResponseBody = {
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DeleteBgpPeerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBgpPeerResponseBody(name='body'),
}

async function deleteBgpPeerWithOptions(request: DeleteBgpPeerRequest, runtime: Util.RuntimeOptions): DeleteBgpPeerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bgpPeerId)) {
    query['BgpPeerId'] = request.bgpPeerId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBgpPeer',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBgpPeer(request: DeleteBgpPeerRequest): DeleteBgpPeerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBgpPeerWithOptions(request, runtime);
}

model DeleteCommonBandwidthPackageRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145pn4u'),
  force?: string(name='Force', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCommonBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId', example='B400EF57-60E3-4D61-B8FB-7FA8F72DF5A6'),
}

model DeleteCommonBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCommonBandwidthPackageResponseBody(name='body'),
}

async function deleteCommonBandwidthPackageWithOptions(request: DeleteCommonBandwidthPackageRequest, runtime: Util.RuntimeOptions): DeleteCommonBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCommonBandwidthPackage',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCommonBandwidthPackage(request: DeleteCommonBandwidthPackageRequest): DeleteCommonBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCommonBandwidthPackageWithOptions(request, runtime);
}

model DeleteCustomerGatewayRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04****'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCustomerGatewayResponseBody = {
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteCustomerGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomerGatewayResponseBody(name='body'),
}

async function deleteCustomerGatewayWithOptions(request: DeleteCustomerGatewayRequest, runtime: Util.RuntimeOptions): DeleteCustomerGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.customerGatewayId)) {
    query['CustomerGatewayId'] = request.customerGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomerGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCustomerGateway(request: DeleteCustomerGatewayRequest): DeleteCustomerGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomerGatewayWithOptions(request, runtime);
}

model DeleteDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDhcpOptionsSetResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteDhcpOptionsSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDhcpOptionsSetResponseBody(name='body'),
}

async function deleteDhcpOptionsSetWithOptions(request: DeleteDhcpOptionsSetRequest, runtime: Util.RuntimeOptions): DeleteDhcpOptionsSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dhcpOptionsSetId)) {
    query['DhcpOptionsSetId'] = request.dhcpOptionsSetId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDhcpOptionsSet',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDhcpOptionsSet(request: DeleteDhcpOptionsSetRequest): DeleteDhcpOptionsSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDhcpOptionsSetWithOptions(request, runtime);
}

model DeleteFlowLogRequest {
  flowLogId?: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteFlowLogResponseBody = {
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
}

model DeleteFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFlowLogResponseBody(name='body'),
}

async function deleteFlowLogWithOptions(request: DeleteFlowLogRequest, runtime: Util.RuntimeOptions): DeleteFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlowLog',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFlowLog(request: DeleteFlowLogRequest): DeleteFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFlowLogWithOptions(request, runtime);
}

model DeleteForwardEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  forwardEntryId?: string(name='ForwardEntryId', example='fwd-8vbn3bc8roygjp0gy****'),
  forwardTableId?: string(name='ForwardTableId', example='ftb-8vbx8xu2lqj9qb334****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteForwardEntryResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteForwardEntryResponseBody(name='body'),
}

async function deleteForwardEntryWithOptions(request: DeleteForwardEntryRequest, runtime: Util.RuntimeOptions): DeleteForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  if (!Util.isUnset(request.forwardTableId)) {
    query['ForwardTableId'] = request.forwardTableId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteForwardEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteForwardEntryWithOptions(request, runtime);
}

model DeleteFullNatEntryRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  fullNatEntryId?: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****'),
  fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteFullNatEntryResponseBody = {
  requestId?: string(name='RequestId', example='2BCC426F-A9F2-3F03-99D2-1E0D647236DB'),
}

model DeleteFullNatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFullNatEntryResponseBody(name='body'),
}

async function deleteFullNatEntryWithOptions(request: DeleteFullNatEntryRequest, runtime: Util.RuntimeOptions): DeleteFullNatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fullNatEntryId)) {
    query['FullNatEntryId'] = request.fullNatEntryId;
  }
  if (!Util.isUnset(request.fullNatTableId)) {
    query['FullNatTableId'] = request.fullNatTableId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFullNatEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFullNatEntry(request: DeleteFullNatEntryRequest): DeleteFullNatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFullNatEntryWithOptions(request, runtime);
}

model DeleteGlobalAccelerationInstanceRequest {
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-asdfsl22s****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteGlobalAccelerationInstanceResponseBody = {
  requestId?: string(name='RequestId', example='E6E63B2A-9820-44A8-A359-9BB2DAEE6424'),
}

model DeleteGlobalAccelerationInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGlobalAccelerationInstanceResponseBody(name='body'),
}

async function deleteGlobalAccelerationInstanceWithOptions(request: DeleteGlobalAccelerationInstanceRequest, runtime: Util.RuntimeOptions): DeleteGlobalAccelerationInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalAccelerationInstanceId)) {
    query['GlobalAccelerationInstanceId'] = request.globalAccelerationInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGlobalAccelerationInstance',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGlobalAccelerationInstance(request: DeleteGlobalAccelerationInstanceRequest): DeleteGlobalAccelerationInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGlobalAccelerationInstanceWithOptions(request, runtime);
}

model DeleteHaVipRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  haVipId?: string(name='HaVipId', example='havip-2zeo05qre24nhrqpy****'),
  ownerAccount?: string(name='OwnerAccount', example='123'),
  ownerId?: long(name='OwnerId', example='123'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='123'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='123'),
}

model DeleteHaVipResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model DeleteHaVipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHaVipResponseBody(name='body'),
}

async function deleteHaVipWithOptions(request: DeleteHaVipRequest, runtime: Util.RuntimeOptions): DeleteHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHaVip',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHaVip(request: DeleteHaVipRequest): DeleteHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHaVipWithOptions(request, runtime);
}

model DeleteIPv6TranslatorRequest {
  clientToken?: string(name='ClientToken', example='ClientToken'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1i8ahxut1iexxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIPv6TranslatorResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model DeleteIPv6TranslatorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIPv6TranslatorResponseBody(name='body'),
}

async function deleteIPv6TranslatorWithOptions(request: DeleteIPv6TranslatorRequest, runtime: Util.RuntimeOptions): DeleteIPv6TranslatorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv6TranslatorId)) {
    query['Ipv6TranslatorId'] = request.ipv6TranslatorId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIPv6Translator',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIPv6Translator(request: DeleteIPv6TranslatorRequest): DeleteIPv6TranslatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIPv6TranslatorWithOptions(request, runtime);
}

model DeleteIPv6TranslatorAclListRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  clientToken?: string(name='ClientToken', example='sha123456'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIPv6TranslatorAclListResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model DeleteIPv6TranslatorAclListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIPv6TranslatorAclListResponseBody(name='body'),
}

async function deleteIPv6TranslatorAclListWithOptions(request: DeleteIPv6TranslatorAclListRequest, runtime: Util.RuntimeOptions): DeleteIPv6TranslatorAclListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIPv6TranslatorAclList',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIPv6TranslatorAclList(request: DeleteIPv6TranslatorAclListRequest): DeleteIPv6TranslatorAclListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIPv6TranslatorAclListWithOptions(request, runtime);
}

model DeleteIPv6TranslatorEntryRequest {
  clientToken?: string(name='ClientToken', example='sha11112222'),
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6transentry-bp1g8bhrdexxxxx'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIPv6TranslatorEntryResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model DeleteIPv6TranslatorEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIPv6TranslatorEntryResponseBody(name='body'),
}

async function deleteIPv6TranslatorEntryWithOptions(request: DeleteIPv6TranslatorEntryRequest, runtime: Util.RuntimeOptions): DeleteIPv6TranslatorEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv6TranslatorEntryId)) {
    query['Ipv6TranslatorEntryId'] = request.ipv6TranslatorEntryId;
  }
  if (!Util.isUnset(request.ipv6TranslatorId)) {
    query['Ipv6TranslatorId'] = request.ipv6TranslatorId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIPv6TranslatorEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIPv6TranslatorEntry(request: DeleteIPv6TranslatorEntryRequest): DeleteIPv6TranslatorEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIPv6TranslatorEntryWithOptions(request, runtime);
}

model DeleteIpsecServerRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: string(name='DryRun', example='false'),
  ipsecServerId?: string(name='IpsecServerId', example='iss-bp1jougp8cfsbo8y9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteIpsecServerResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteIpsecServerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpsecServerResponseBody(name='body'),
}

async function deleteIpsecServerWithOptions(request: DeleteIpsecServerRequest, runtime: Util.RuntimeOptions): DeleteIpsecServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipsecServerId)) {
    query['IpsecServerId'] = request.ipsecServerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpsecServer',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIpsecServer(request: DeleteIpsecServerRequest): DeleteIpsecServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpsecServerWithOptions(request, runtime);
}

model DeleteIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIpv4GatewayResponseBody = {
  requestId?: string(name='RequestId', example='21133AC0-0636-521B-A400-253818691A56'),
}

model DeleteIpv4GatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpv4GatewayResponseBody(name='body'),
}

async function deleteIpv4GatewayWithOptions(request: DeleteIpv4GatewayRequest, runtime: Util.RuntimeOptions): DeleteIpv4GatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipv4GatewayId)) {
    query['Ipv4GatewayId'] = request.ipv4GatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpv4Gateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIpv4Gateway(request: DeleteIpv4GatewayRequest): DeleteIpv4GatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpv4GatewayWithOptions(request, runtime);
}

model DeleteIpv6EgressOnlyRuleRequest {
  clientToken?: string(name='ClientToken', example='123456'),
  ipv6EgressOnlyRuleId?: string(name='Ipv6EgressOnlyRuleId', example='ipv6py-hp3w98rmlbqp0xxxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIpv6EgressOnlyRuleResponseBody = {
  requestId?: string(name='RequestId', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model DeleteIpv6EgressOnlyRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpv6EgressOnlyRuleResponseBody(name='body'),
}

async function deleteIpv6EgressOnlyRuleWithOptions(request: DeleteIpv6EgressOnlyRuleRequest, runtime: Util.RuntimeOptions): DeleteIpv6EgressOnlyRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv6EgressOnlyRuleId)) {
    query['Ipv6EgressOnlyRuleId'] = request.ipv6EgressOnlyRuleId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpv6EgressOnlyRule',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIpv6EgressOnlyRule(request: DeleteIpv6EgressOnlyRuleRequest): DeleteIpv6EgressOnlyRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpv6EgressOnlyRuleWithOptions(request, runtime);
}

model DeleteIpv6GatewayRequest {
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp3y0l3ln89j8****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIpv6GatewayResponseBody = {
  requestId?: string(name='RequestId', example='E9A8AABE-A84B-4AF2-A68A-8E2EA190E7AE'),
}

model DeleteIpv6GatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpv6GatewayResponseBody(name='body'),
}

async function deleteIpv6GatewayWithOptions(request: DeleteIpv6GatewayRequest, runtime: Util.RuntimeOptions): DeleteIpv6GatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipv6GatewayId)) {
    query['Ipv6GatewayId'] = request.ipv6GatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpv6Gateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIpv6Gateway(request: DeleteIpv6GatewayRequest): DeleteIpv6GatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpv6GatewayWithOptions(request, runtime);
}

model DeleteIpv6InternetBandwidthRequest {
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteIpv6InternetBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='E07E0FE6-5C21-405F-AF82-7613AA81EF92'),
}

model DeleteIpv6InternetBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpv6InternetBandwidthResponseBody(name='body'),
}

async function deleteIpv6InternetBandwidthWithOptions(request: DeleteIpv6InternetBandwidthRequest, runtime: Util.RuntimeOptions): DeleteIpv6InternetBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipv6AddressId)) {
    query['Ipv6AddressId'] = request.ipv6AddressId;
  }
  if (!Util.isUnset(request.ipv6InternetBandwidthId)) {
    query['Ipv6InternetBandwidthId'] = request.ipv6InternetBandwidthId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpv6InternetBandwidth',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIpv6InternetBandwidth(request: DeleteIpv6InternetBandwidthRequest): DeleteIpv6InternetBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpv6InternetBandwidthWithOptions(request, runtime);
}

model DeleteNatGatewayRequest {
  force?: boolean(name='Force', example='false'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNatGatewayResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNatGatewayResponseBody(name='body'),
}

async function deleteNatGatewayWithOptions(request: DeleteNatGatewayRequest, runtime: Util.RuntimeOptions): DeleteNatGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNatGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatGatewayWithOptions(request, runtime);
}

model DeleteNatIpRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  natIpId?: string(name='NatIpId', example='vpcnatip-gw8y7q3cpk3fggs87****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNatIpResponseBody = {
  requestId?: string(name='RequestId', example='E9AD97A0-5338-43F8-8A80-5E274CCBA11B'),
}

model DeleteNatIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNatIpResponseBody(name='body'),
}

async function deleteNatIpWithOptions(request: DeleteNatIpRequest, runtime: Util.RuntimeOptions): DeleteNatIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natIpId)) {
    query['NatIpId'] = request.natIpId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNatIp',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNatIp(request: DeleteNatIpRequest): DeleteNatIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatIpWithOptions(request, runtime);
}

model DeleteNatIpCidrRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
  natIpCidr?: string(name='NatIpCidr', example='172.16.0.0/24'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNatIpCidrResponseBody = {
  requestId?: string(name='RequestId', example='7021BEB1-210F-48A9-AB82-BE9A9110BB89'),
}

model DeleteNatIpCidrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNatIpCidrResponseBody(name='body'),
}

async function deleteNatIpCidrWithOptions(request: DeleteNatIpCidrRequest, runtime: Util.RuntimeOptions): DeleteNatIpCidrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natIpCidr)) {
    query['NatIpCidr'] = request.natIpCidr;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNatIpCidr',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNatIpCidr(request: DeleteNatIpCidrRequest): DeleteNatIpCidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatIpCidrWithOptions(request, runtime);
}

model DeleteNetworkAclRequest {
  clientToken?: string(name='ClientToken', example='223e4867-e89b-12d3-a456-426655440000'),
  networkAclId?: string(name='NetworkAclId', example='nacl-bp1lhl0taikrbgnh****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNetworkAclResponseBody = {
  requestId?: string(name='RequestId', example='4B48E3D-DF70-471B-AA83-089E83A1B45'),
}

model DeleteNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkAclResponseBody(name='body'),
}

async function deleteNetworkAclWithOptions(request: DeleteNetworkAclRequest, runtime: Util.RuntimeOptions): DeleteNetworkAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkAcl',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNetworkAcl(request: DeleteNetworkAclRequest): DeleteNetworkAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkAclWithOptions(request, runtime);
}

model DeletePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjzm7*********'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeletePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeletePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePhysicalConnectionResponseBody(name='body'),
}

async function deletePhysicalConnectionWithOptions(request: DeletePhysicalConnectionRequest, runtime: Util.RuntimeOptions): DeletePhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePhysicalConnection(request: DeletePhysicalConnectionRequest): DeletePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePhysicalConnectionWithOptions(request, runtime);
}

model DeletePublicIpAddressPoolRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe60000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeletePublicIpAddressPoolResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeletePublicIpAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePublicIpAddressPoolResponseBody(name='body'),
}

async function deletePublicIpAddressPoolWithOptions(request: DeletePublicIpAddressPoolRequest, runtime: Util.RuntimeOptions): DeletePublicIpAddressPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publicIpAddressPoolId)) {
    query['PublicIpAddressPoolId'] = request.publicIpAddressPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePublicIpAddressPool',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePublicIpAddressPool(request: DeletePublicIpAddressPoolRequest): DeletePublicIpAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePublicIpAddressPoolWithOptions(request, runtime);
}

model DeletePublicIpAddressPoolCidrBlockRequest {
  cidrBlock?: string(name='CidrBlock', example='47.0.XX.XX/24'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeletePublicIpAddressPoolCidrBlockResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeletePublicIpAddressPoolCidrBlockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePublicIpAddressPoolCidrBlockResponseBody(name='body'),
}

async function deletePublicIpAddressPoolCidrBlockWithOptions(request: DeletePublicIpAddressPoolCidrBlockRequest, runtime: Util.RuntimeOptions): DeletePublicIpAddressPoolCidrBlockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publicIpAddressPoolId)) {
    query['PublicIpAddressPoolId'] = request.publicIpAddressPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePublicIpAddressPoolCidrBlock',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePublicIpAddressPoolCidrBlock(request: DeletePublicIpAddressPoolCidrBlockRequest): DeletePublicIpAddressPoolCidrBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePublicIpAddressPoolCidrBlockWithOptions(request, runtime);
}

model DeleteRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', example='47.100.XX.XX/24'),
      nextHop?: string(name='NextHop', example='i-j6c2fp57q8rr4jlu****'),
      routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpv****'),
      routeTableId?: string(name='RouteTableId', example='vtb-2ze3jgygk9bmsj23s****'),
    }
  ](name='RouteEntries'),
}

model DeleteRouteEntriesResponseBody = {
  failedCount?: int32(name='FailedCount', example='2'),
  failedRouteEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', example='47.100.XX.XX/24'),
      failedCode?: string(name='FailedCode', example='VPC_ROUTER_ENTRY_NOT_EXIST'),
      failedMessage?: string(name='FailedMessage', example='vRouterEntry not exists'),
      nextHop?: string(name='NextHop', example='i-j6c2fp57q8rr4jlu****'),
      routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpv****'),
    }
  ](name='FailedRouteEntries'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  successCount?: int32(name='SuccessCount', example='2'),
}

model DeleteRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRouteEntriesResponseBody(name='body'),
}

async function deleteRouteEntriesWithOptions(request: DeleteRouteEntriesRequest, runtime: Util.RuntimeOptions): DeleteRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntries)) {
    query['RouteEntries'] = request.routeEntries;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRouteEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRouteEntries(request: DeleteRouteEntriesRequest): DeleteRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteEntriesWithOptions(request, runtime);
}

model DeleteRouteEntryRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='47.100.XX.XX/16'),
  nextHopId?: string(name='NextHopId', example='ri-2zeo3xzyf38r4urzd****'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId', example='ri-2zeo3xzyf38r43cd****'),
      nextHopType?: string(name='NextHopType', example='RouterInterface'),
    }
  ](name='NextHopList'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpv****'),
  routeTableId?: string(name='RouteTableId', example='vtb-2ze3jgygk9bmsj23s****'),
}

model DeleteRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRouteEntryResponseBody(name='body'),
}

async function deleteRouteEntryWithOptions(request: DeleteRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.nextHopId)) {
    query['NextHopId'] = request.nextHopId;
  }
  if (!Util.isUnset(request.nextHopList)) {
    query['NextHopList'] = request.nextHopList;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntryId)) {
    query['RouteEntryId'] = request.routeEntryId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRouteEntry(request: DeleteRouteEntryRequest): DeleteRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteEntryWithOptions(request, runtime);
}

model DeleteRouteTableRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
}

model DeleteRouteTableResponseBody = {
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
}

model DeleteRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRouteTableResponseBody(name='body'),
}

async function deleteRouteTableWithOptions(request: DeleteRouteTableRequest, runtime: Util.RuntimeOptions): DeleteRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRouteTable',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRouteTable(request: DeleteRouteTableRequest): DeleteRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteTableWithOptions(request, runtime);
}

model DeleteRouterInterfaceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urz****'),
}

model DeleteRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRouterInterfaceResponseBody(name='body'),
}

async function deleteRouterInterfaceWithOptions(request: DeleteRouterInterfaceRequest, runtime: Util.RuntimeOptions): DeleteRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRouterInterface',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRouterInterface(request: DeleteRouterInterfaceRequest): DeleteRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouterInterfaceWithOptions(request, runtime);
}

model DeleteSnatEntryRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snatEntryId?: string(name='SnatEntryId', example='snat-bp1vcgcf8tm0plqcg****'),
  snatTableId?: string(name='SnatTableId', example='stb-bp190wu8io1vgev80****'),
}

model DeleteSnatEntryResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteSnatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnatEntryResponseBody(name='body'),
}

async function deleteSnatEntryWithOptions(request: DeleteSnatEntryRequest, runtime: Util.RuntimeOptions): DeleteSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  if (!Util.isUnset(request.snatTableId)) {
    query['SnatTableId'] = request.snatTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnatEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSnatEntry(request: DeleteSnatEntryRequest): DeleteSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnatEntryWithOptions(request, runtime);
}

model DeleteSslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osr****'),
}

model DeleteSslVpnClientCertResponseBody = {
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteSslVpnClientCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSslVpnClientCertResponseBody(name='body'),
}

async function deleteSslVpnClientCertWithOptions(request: DeleteSslVpnClientCertRequest, runtime: Util.RuntimeOptions): DeleteSslVpnClientCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnClientCertId)) {
    query['SslVpnClientCertId'] = request.sslVpnClientCertId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSslVpnClientCert',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSslVpnClientCert(request: DeleteSslVpnClientCertRequest): DeleteSslVpnClientCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSslVpnClientCertWithOptions(request, runtime);
}

model DeleteSslVpnServerRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
}

model DeleteSslVpnServerResponseBody = {
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteSslVpnServerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSslVpnServerResponseBody(name='body'),
}

async function deleteSslVpnServerWithOptions(request: DeleteSslVpnServerRequest, runtime: Util.RuntimeOptions): DeleteSslVpnServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnServerId)) {
    query['SslVpnServerId'] = request.sslVpnServerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSslVpnServer',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSslVpnServer(request: DeleteSslVpnServerRequest): DeleteSslVpnServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSslVpnServerWithOptions(request, runtime);
}

model DeleteTrafficMirrorFilterRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
}

model DeleteTrafficMirrorFilterResponseBody = {
  requestId?: string(name='RequestId', example='07F272E2-6AD5-433A-8207-A607C76F1676'),
}

model DeleteTrafficMirrorFilterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrafficMirrorFilterResponseBody(name='body'),
}

async function deleteTrafficMirrorFilterWithOptions(request: DeleteTrafficMirrorFilterRequest, runtime: Util.RuntimeOptions): DeleteTrafficMirrorFilterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterId)) {
    query['TrafficMirrorFilterId'] = request.trafficMirrorFilterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrafficMirrorFilter',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTrafficMirrorFilter(request: DeleteTrafficMirrorFilterRequest): DeleteTrafficMirrorFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficMirrorFilterWithOptions(request, runtime);
}

model DeleteTrafficMirrorFilterRulesRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
  trafficMirrorFilterRuleIds?: [ string ](name='TrafficMirrorFilterRuleIds', example='tmr-j6cbmubn323k7jlq3****'),
}

model DeleteTrafficMirrorFilterRulesResponseBody = {
  requestId?: string(name='RequestId', example='BD8A3F71-00C5-4655-8F55-11F3976C3274'),
}

model DeleteTrafficMirrorFilterRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrafficMirrorFilterRulesResponseBody(name='body'),
}

async function deleteTrafficMirrorFilterRulesWithOptions(request: DeleteTrafficMirrorFilterRulesRequest, runtime: Util.RuntimeOptions): DeleteTrafficMirrorFilterRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterId)) {
    query['TrafficMirrorFilterId'] = request.trafficMirrorFilterId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterRuleIds)) {
    query['TrafficMirrorFilterRuleIds'] = request.trafficMirrorFilterRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrafficMirrorFilterRules',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTrafficMirrorFilterRules(request: DeleteTrafficMirrorFilterRulesRequest): DeleteTrafficMirrorFilterRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficMirrorFilterRulesWithOptions(request, runtime);
}

model DeleteTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****'),
}

model DeleteTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteTrafficMirrorSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrafficMirrorSessionResponseBody(name='body'),
}

async function deleteTrafficMirrorSessionWithOptions(request: DeleteTrafficMirrorSessionRequest, runtime: Util.RuntimeOptions): DeleteTrafficMirrorSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorSessionId)) {
    query['TrafficMirrorSessionId'] = request.trafficMirrorSessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrafficMirrorSession',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTrafficMirrorSession(request: DeleteTrafficMirrorSessionRequest): DeleteTrafficMirrorSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficMirrorSessionWithOptions(request, runtime);
}

model DeleteVSwitchRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId', example='vsw-asdfjlna****'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVSwitchResponseBody(name='body'),
}

async function deleteVSwitchWithOptions(request: DeleteVSwitchRequest, runtime: Util.RuntimeOptions): DeleteVSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVSwitch',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVSwitchWithOptions(request, runtime);
}

model DeleteVbrHaRequest {
  clientToken?: string(name='ClientToken', example='CBCE910E-D396-4944-8****'),
  instanceId?: string(name='InstanceId', example='vbrha-sa1******'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteVbrHaResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeleteVbrHaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVbrHaResponseBody(name='body'),
}

async function deleteVbrHaWithOptions(request: DeleteVbrHaRequest, runtime: Util.RuntimeOptions): DeleteVbrHaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVbrHa',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVbrHa(request: DeleteVbrHaRequest): DeleteVbrHaResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVbrHaWithOptions(request, runtime);
}

model DeleteVcoRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  nextHop?: string(name='NextHop', example='vco-p0w5112fgnl2ihlmf****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='192.168.10.0/24'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w5112fgnl2ihlmf****'),
  weight?: int32(name='Weight', example='100'),
}

model DeleteVcoRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='9208DDD8-0930-3CE6-AF7F-732B4E67B3DD'),
}

model DeleteVcoRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVcoRouteEntryResponseBody(name='body'),
}

async function deleteVcoRouteEntryWithOptions(request: DeleteVcoRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteVcoRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVcoRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVcoRouteEntry(request: DeleteVcoRouteEntryRequest): DeleteVcoRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVcoRouteEntryWithOptions(request, runtime);
}

model DeleteVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrId?: string(name='VbrId', example='vbr-bp12mw1f8k3jgygk9****'),
}

model DeleteVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVirtualBorderRouterResponseBody(name='body'),
}

async function deleteVirtualBorderRouterWithOptions(request: DeleteVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): DeleteVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVirtualBorderRouter',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVirtualBorderRouter(request: DeleteVirtualBorderRouterRequest): DeleteVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualBorderRouterWithOptions(request, runtime);
}

model DeleteVpcRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-bp1m7v25emi1h5mtc****'),
}

model DeleteVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcResponseBody(name='body'),
}

async function deleteVpcWithOptions(request: DeleteVpcRequest, runtime: Util.RuntimeOptions): DeleteVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpc',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpc(request: DeleteVpcRequest): DeleteVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcWithOptions(request, runtime);
}

model DeleteVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', example='false'),
  endpointId?: string(name='EndpointId', example='vpce-bp1w1dmdqjpwul0v3****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId', example='A1122D0F-7B3B-5445-BB19-17F27F97FE1C'),
}

model DeleteVpcGatewayEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcGatewayEndpointResponseBody(name='body'),
}

async function deleteVpcGatewayEndpointWithOptions(request: DeleteVpcGatewayEndpointRequest, runtime: Util.RuntimeOptions): DeleteVpcGatewayEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcGatewayEndpoint',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpcGatewayEndpoint(request: DeleteVpcGatewayEndpointRequest): DeleteVpcGatewayEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcGatewayEndpointWithOptions(request, runtime);
}

model DeleteVpcPrefixListRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: string(name='PrefixListId', example='pl-0b78hw45f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteVpcPrefixListResponseBody = {
  requestId?: string(name='RequestId', example='64B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteVpcPrefixListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcPrefixListResponseBody(name='body'),
}

async function deleteVpcPrefixListWithOptions(request: DeleteVpcPrefixListRequest, runtime: Util.RuntimeOptions): DeleteVpcPrefixListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcPrefixList',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpcPrefixList(request: DeleteVpcPrefixListRequest): DeleteVpcPrefixListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcPrefixListWithOptions(request, runtime);
}

model DeleteVpnAttachmentRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w7gtr14m09r9lkr****'),
}

model DeleteVpnAttachmentResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='29440C49-398F-3D06-BA8B-E3CD13F3246D'),
  success?: boolean(name='Success', example='true'),
}

model DeleteVpnAttachmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpnAttachmentResponseBody(name='body'),
}

async function deleteVpnAttachmentWithOptions(request: DeleteVpnAttachmentRequest, runtime: Util.RuntimeOptions): DeleteVpnAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpnAttachment',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpnAttachment(request: DeleteVpnAttachmentRequest): DeleteVpnAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpnAttachmentWithOptions(request, runtime);
}

model DeleteVpnConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****'),
}

model DeleteVpnConnectionResponseBody = {
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteVpnConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpnConnectionResponseBody(name='body'),
}

async function deleteVpnConnectionWithOptions(request: DeleteVpnConnectionRequest, runtime: Util.RuntimeOptions): DeleteVpnConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpnConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpnConnection(request: DeleteVpnConnectionRequest): DeleteVpnConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpnConnectionWithOptions(request, runtime);
}

model DeleteVpnGatewayRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model DeleteVpnGatewayResponseBody = {
  requestId?: string(name='RequestId', example='>0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVpnGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpnGatewayResponseBody(name='body'),
}

async function deleteVpnGatewayWithOptions(request: DeleteVpnGatewayRequest, runtime: Util.RuntimeOptions): DeleteVpnGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpnGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpnGateway(request: DeleteVpnGatewayRequest): DeleteVpnGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpnGatewayWithOptions(request, runtime);
}

model DeleteVpnPbrRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  routeSource?: string(name='RouteSource', example='192.168.1.0/24'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', example='0'),
}

model DeleteVpnPbrRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model DeleteVpnPbrRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpnPbrRouteEntryResponseBody(name='body'),
}

async function deleteVpnPbrRouteEntryWithOptions(request: DeleteVpnPbrRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteVpnPbrRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.routeSource)) {
    query['RouteSource'] = request.routeSource;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpnPbrRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpnPbrRouteEntry(request: DeleteVpnPbrRouteEntryRequest): DeleteVpnPbrRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpnPbrRouteEntryWithOptions(request, runtime);
}

model DeleteVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', example='0'),
}

model DeleteVpnRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model DeleteVpnRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpnRouteEntryResponseBody(name='body'),
}

async function deleteVpnRouteEntryWithOptions(request: DeleteVpnRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteVpnRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpnRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpnRouteEntry(request: DeleteVpnRouteEntryRequest): DeleteVpnRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpnRouteEntryWithOptions(request, runtime);
}

model DeletionProtectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='eip-uf6id7gvguruxe41v****'),
  ownerId?: long(name='OwnerId'),
  protectionEnable?: boolean(name='ProtectionEnable', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type', example='EIP'),
}

model DeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', example='BAAEF103-96C4-4454-9210-066F2405F511'),
}

model DeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletionProtectionResponseBody(name='body'),
}

async function deletionProtectionWithOptions(request: DeletionProtectionRequest, runtime: Util.RuntimeOptions): DeletionProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.protectionEnable)) {
    query['ProtectionEnable'] = request.protectionEnable;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletionProtection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletionProtection(request: DeletionProtectionRequest): DeletionProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletionProtectionWithOptions(request, runtime);
}

model DescribeAccessPointsRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeAccessPointsResponseBody = {
  accessPointSet?: {
    accessPointType?: [ 
    {
      accessPointFeatureModels?: {
        accessPointFeatureModel?: [ 
        {
          featureKey?: string(name='FeatureKey', example='AP_Support_VbrBandwidthLimit'),
          featureValue?: string(name='FeatureValue', example='true'),
        }
      ](name='AccessPointFeatureModel')
      }(name='AccessPointFeatureModels'),
      accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-****'),
      attachedRegionNo?: string(name='AttachedRegionNo', example='cn-hangzhou'),
      description?: string(name='Description'),
      hostOperator?: string(name='HostOperator'),
      location?: string(name='Location'),
      name?: string(name='Name'),
      status?: string(name='Status', example='recommended'),
      type?: string(name='Type', example='VPC'),
    }
  ](name='AccessPointType')
  }(name='AccessPointSet'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='3E85D803-C7CF-4BCD-9CFE-6DBA1DFFA027'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeAccessPointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessPointsResponseBody(name='body'),
}

async function describeAccessPointsWithOptions(request: DescribeAccessPointsRequest, runtime: Util.RuntimeOptions): DescribeAccessPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessPoints',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccessPoints(request: DescribeAccessPointsRequest): DescribeAccessPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessPointsWithOptions(request, runtime);
}

model DescribeBgpGroupsRequest {
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-bp1k25cyp26cllath****'),
  isDefault?: boolean(name='IsDefault', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerId?: string(name='RouterId', example='vbr-bp1ctxy813985gkuk****'),
}

model DescribeBgpGroupsResponseBody = {
  bgpGroups?: {
    bgpGroup?: [ 
    {
      authKey?: string(name='AuthKey', example='!PWZ****'),
      bgpGroupId?: string(name='BgpGroupId', example='bgpg-bp1k25cyp26cllath****'),
      description?: string(name='Description'),
      hold?: string(name='Hold', example='30'),
      ipVersion?: string(name='IpVersion', example='IPv4'),
      isFake?: string(name='IsFake', example='true'),
      keepalive?: string(name='Keepalive', example='10'),
      localAsn?: string(name='LocalAsn', example='45104'),
      name?: string(name='Name', example='name'),
      peerAsn?: string(name='PeerAsn', example='1****'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      routeLimit?: string(name='RouteLimit', example='99'),
      routerId?: string(name='RouterId', example='vbr-bp1ctxy813985gkuk****'),
      status?: string(name='Status', example='Available'),
    }
  ](name='BgpGroup')
  }(name='BgpGroups'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1D0971B2-A35A-42C1-A44C-E91360C36C0B'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeBgpGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBgpGroupsResponseBody(name='body'),
}

async function describeBgpGroupsWithOptions(request: DescribeBgpGroupsRequest, runtime: Util.RuntimeOptions): DescribeBgpGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bgpGroupId)) {
    query['BgpGroupId'] = request.bgpGroupId;
  }
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBgpGroups',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBgpGroups(request: DescribeBgpGroupsRequest): DescribeBgpGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBgpGroupsWithOptions(request, runtime);
}

model DescribeBgpNetworksRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****'),
}

model DescribeBgpNetworksResponseBody = {
  bgpNetworks?: {
    bgpNetwork?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', example='10.1.XX.XX/24'),
      routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****'),
      status?: string(name='Status', example='Enabled'),
      vpcId?: string(name='VpcId', example='vpc-bp1qpo0kug3a2*****'),
    }
  ](name='BgpNetwork')
  }(name='BgpNetworks'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6F513A15-669F-419D-B511-08A85292059B'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeBgpNetworksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBgpNetworksResponseBody(name='body'),
}

async function describeBgpNetworksWithOptions(request: DescribeBgpNetworksRequest, runtime: Util.RuntimeOptions): DescribeBgpNetworksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBgpNetworks',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBgpNetworks(request: DescribeBgpNetworksRequest): DescribeBgpNetworksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBgpNetworksWithOptions(request, runtime);
}

model DescribeBgpPeersRequest {
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-2zev8h2wo414sfh****'),
  bgpPeerId?: string(name='BgpPeerId', example='bgp-2ze3un0ft1jd1xd****'),
  isDefault?: boolean(name='IsDefault', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerId?: string(name='RouterId', example='vbr-2zecmmvg5gvu8i4te****'),
}

model DescribeBgpPeersResponseBody = {
  bgpPeers?: {
    bgpPeer?: [ 
    {
      advertisedRouteCount?: int32(name='AdvertisedRouteCount', example='0'),
      authKey?: string(name='AuthKey', example='!PWZ****'),
      bfdMultiHop?: int32(name='BfdMultiHop', example='3'),
      bgpGroupId?: string(name='BgpGroupId', example='bgpg-2zev8h2wo414sfh****'),
      bgpPeerId?: string(name='BgpPeerId', example='bgp-2ze3un0ft1jd1xd****'),
      bgpStatus?: string(name='BgpStatus', example='Connect'),
      description?: string(name='Description', example='test'),
      enableBfd?: boolean(name='EnableBfd', example='true'),
      gmtModified?: string(name='GmtModified', example='2022-05-20T07:29:08Z'),
      hold?: string(name='Hold', example='30'),
      ipVersion?: string(name='IpVersion', example='ipv4'),
      isFake?: boolean(name='IsFake', example='true'),
      keepalive?: string(name='Keepalive', example='10'),
      localAsn?: string(name='LocalAsn', example='45104'),
      name?: string(name='Name', example='test'),
      peerAsn?: string(name='PeerAsn', example='65515'),
      peerIpAddress?: string(name='PeerIpAddress', example='116.62.XX.XX'),
      receivedRouteCount?: int32(name='ReceivedRouteCount', example='0'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      routeLimit?: string(name='RouteLimit', example='110'),
      routerId?: string(name='RouterId', example='vbr-2zecmmvg5gvu8i4te****'),
      status?: string(name='Status', example='Available'),
    }
  ](name='BgpPeer')
  }(name='BgpPeers'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeBgpPeersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBgpPeersResponseBody(name='body'),
}

async function describeBgpPeersWithOptions(request: DescribeBgpPeersRequest, runtime: Util.RuntimeOptions): DescribeBgpPeersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bgpGroupId)) {
    query['BgpGroupId'] = request.bgpGroupId;
  }
  if (!Util.isUnset(request.bgpPeerId)) {
    query['BgpPeerId'] = request.bgpPeerId;
  }
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBgpPeers',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBgpPeers(request: DescribeBgpPeersRequest): DescribeBgpPeersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBgpPeersWithOptions(request, runtime);
}

model DescribeCommonBandwidthPackagesRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145****'),
  dryRun?: boolean(name='DryRun', example='false'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false'),
  name?: string(name='Name', example='test123'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', example='false'),
}

model DescribeCommonBandwidthPackagesResponseBody = {
  commonBandwidthPackages?: {
    commonBandwidthPackage?: [ 
    {
      bandwidth?: string(name='Bandwidth', example='20'),
      bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-bp1t3sm1ffzmshdki****'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      creationTime?: string(name='CreationTime', example='2017-06-28T06:39:20Z'),
      deletionProtection?: boolean(name='DeletionProtection', example='true'),
      description?: string(name='Description', example='none'),
      expiredTime?: string(name='ExpiredTime', example='2019-01-15T03:08:37Z'),
      hasReservationData?: string(name='HasReservationData', example='false'),
      ISP?: string(name='ISP', example='BGP'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
      name?: string(name='Name', example='abc'),
      publicIpAddresses?: {
        publicIpAddresse?: [ 
        {
          allocationId?: string(name='AllocationId', example='eip-bp13e9i2qst4g6jzi****'),
          bandwidthPackageIpRelationStatus?: string(name='BandwidthPackageIpRelationStatus', example='BINDED'),
          ipAddress?: string(name='IpAddress', example='47.95.XX.XX'),
        }
      ](name='PublicIpAddresse')
      }(name='PublicIpAddresses'),
      ratio?: int32(name='Ratio', example='20'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      reservationActiveTime?: string(name='ReservationActiveTime', example='2018-08-30T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', example='1000'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', example='RENEWCHANGE'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      securityProtectionTypes?: {
        securityProtectionType?: [ string ](name='SecurityProtectionType')
      }(name='SecurityProtectionTypes'),
      serviceManaged?: int32(name='ServiceManaged', example='1'),
      status?: string(name='Status', example='Available'),
    }
  ](name='CommonBandwidthPackage')
  }(name='CommonBandwidthPackages'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20E6FD1C-7321-4DAD-BDFD-EC8769E4AA33'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeCommonBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonBandwidthPackagesResponseBody(name='body'),
}

async function describeCommonBandwidthPackagesWithOptions(request: DescribeCommonBandwidthPackagesRequest, runtime: Util.RuntimeOptions): DescribeCommonBandwidthPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.includeReservationData)) {
    query['IncludeReservationData'] = request.includeReservationData;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityProtectionEnabled)) {
    query['SecurityProtectionEnabled'] = request.securityProtectionEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonBandwidthPackages',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonBandwidthPackages(request: DescribeCommonBandwidthPackagesRequest): DescribeCommonBandwidthPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonBandwidthPackagesWithOptions(request, runtime);
}

model DescribeCustomerGatewayRequest {
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCustomerGatewayResponseBody = {
  asn?: long(name='Asn', example='65535'),
  authKey?: string(name='AuthKey', example='AuthKey****'),
  createTime?: long(name='CreateTime', example='1492747187000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
  description?: string(name='Description', example='desctest'),
  ipAddress?: string(name='IpAddress', example='139.32.XX.XX'),
  name?: string(name='Name', example='nametest'),
  requestId?: string(name='RequestId', example='A0457BC9-6C0F-4437-AB9D-FB2EABC1D6A2'),
}

model DescribeCustomerGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomerGatewayResponseBody(name='body'),
}

async function describeCustomerGatewayWithOptions(request: DescribeCustomerGatewayRequest, runtime: Util.RuntimeOptions): DescribeCustomerGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customerGatewayId)) {
    query['CustomerGatewayId'] = request.customerGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomerGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomerGateway(request: DescribeCustomerGatewayRequest): DescribeCustomerGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomerGatewayWithOptions(request, runtime);
}

model DescribeCustomerGatewaysRequest {
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCustomerGatewaysResponseBody = {
  customerGateways?: {
    customerGateway?: [ 
    {
      asn?: long(name='Asn', example='65530'),
      authKey?: string(name='AuthKey', example='AuthKey****'),
      createTime?: long(name='CreateTime', example='1492747187000'),
      customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
      description?: string(name='Description', example='desctest'),
      ipAddress?: string(name='IpAddress', example='139.32.XX.XX'),
      name?: string(name='Name', example='nametest'),
    }
  ](name='CustomerGateway')
  }(name='CustomerGateways'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E82612A9-CB90-4D7E-B394-1DB7F6509B29'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeCustomerGatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomerGatewaysResponseBody(name='body'),
}

async function describeCustomerGatewaysWithOptions(request: DescribeCustomerGatewaysRequest, runtime: Util.RuntimeOptions): DescribeCustomerGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customerGatewayId)) {
    query['CustomerGatewayId'] = request.customerGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomerGateways',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomerGateways(request: DescribeCustomerGatewaysRequest): DescribeCustomerGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomerGatewaysWithOptions(request, runtime);
}

model DescribeEcGrantRelationRequest {
  instanceId?: string(name='InstanceId', example='vbr-bp12mw1f8k3jgygk9****'),
  instanceType?: string(name='InstanceType', example='VBR'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  vbrRegionNo?: string(name='VbrRegionNo', example='cn-hangzhou'),
}

model DescribeEcGrantRelationResponseBody = {
  count?: int32(name='Count', example='1'),
  ecGrantRelations?: [ 
    {
      aliUid?: long(name='AliUid', example='1250123456123456'),
      gmtCreate?: string(name='GmtCreate', example='2022-09-02T11:46Z'),
      instanceId?: string(name='InstanceId', example='vpc-bp1brjuegjc88v3u9****'),
      instanceName?: string(name='InstanceName', example='VPCname'),
      instanceRouterId?: string(name='InstanceRouterId', example='vrt-bp1i0yzgjd8ra05ec****'),
      regionNo?: string(name='RegionNo', example='cn-hangzhou'),
      status?: string(name='Status', example='Created'),
      vbrInstanceId?: string(name='VbrInstanceId', example='vbr-m5ex0xf63xk8s5bob****'),
      vbrOwnerUid?: long(name='VbrOwnerUid', example='1210123456123456'),
      vbrRegionNo?: string(name='VbrRegionNo', example='cn-hangzhou'),
    }
  ](name='EcGrantRelations'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E6E90F6B-2B41-5AAF-ABEB-236ADBAAD91D'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeEcGrantRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEcGrantRelationResponseBody(name='body'),
}

async function describeEcGrantRelationWithOptions(request: DescribeEcGrantRelationRequest, runtime: Util.RuntimeOptions): DescribeEcGrantRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vbrRegionNo)) {
    query['VbrRegionNo'] = request.vbrRegionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEcGrantRelation',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEcGrantRelation(request: DescribeEcGrantRelationRequest): DescribeEcGrantRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEcGrantRelationWithOptions(request, runtime);
}

model DescribeEipAddressesRequest {
  filter?: [
    {
      key?: string(name='Key', example='CreationStartTime'),
      value?: string(name='Value', example='2021-05-22T09:12:00Z'),
    }
  ](name='Filter'),
  allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7ujxscd****'),
  associatedInstanceId?: string(name='AssociatedInstanceId', example='i-2zebb08phyccdvf****'),
  associatedInstanceType?: string(name='AssociatedInstanceType', example='EcsInstance'),
  chargeType?: string(name='ChargeType', example='PostPaid'),
  dryRun?: boolean(name='DryRun', example='false'),
  eipAddress?: string(name='EipAddress', example='47.75.XX.XX'),
  eipName?: string(name='EipName', example='EIP-01'),
  ISP?: string(name='ISP', example='BGP'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false'),
  lockReason?: string(name='LockReason', example='financial'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='10'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-2vc0kxcedhquybdsz****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4pcdvf****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', example='false'),
  segmentInstanceId?: string(name='SegmentInstanceId', example='eipsg-t4nr90yik5oy38xdy****'),
  status?: string(name='Status', example='Available'),
}

model DescribeEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7ujcdvf****'),
      allocationTime?: string(name='AllocationTime', example='2021-04-23T01:37:38Z'),
      bandwidth?: string(name='Bandwidth', example='5'),
      bandwidthPackageBandwidth?: string(name='BandwidthPackageBandwidth', example='50'),
      bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-bp1ego3i4j07ccdvf****'),
      bandwidthPackageType?: string(name='BandwidthPackageType', example='CommonBandwidthPackage'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='PostPaid'),
      deletionProtection?: boolean(name='DeletionProtection', example='true'),
      description?: string(name='Description', example='abc'),
      eipBandwidth?: string(name='EipBandwidth', example='101'),
      expiredTime?: string(name='ExpiredTime', example='2021-05-23T02:00:00Z'),
      HDMonitorStatus?: string(name='HDMonitorStatus', example='false'),
      hasReservationData?: string(name='HasReservationData', example='false'),
      ISP?: string(name='ISP', example='BGP'),
      instanceId?: string(name='InstanceId', example='i-bp15zckdt37cdvf****'),
      instanceRegionId?: string(name='InstanceRegionId', example='cn-hangzhou'),
      instanceType?: string(name='InstanceType', example='EcsInstance'),
      internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
      ipAddress?: string(name='IpAddress', example='47.75.XX.XX'),
      name?: string(name='Name', example='EIP-01'),
      netmode?: string(name='Netmode', example='public'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockReason?: string(name='LockReason', example='financial'),
        }
      ](name='LockReason')
      }(name='OperationLocks'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-2vc0kxcedhquybdsz****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      reservationActiveTime?: string(name='ReservationActiveTime', example='2021-05-23T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', example='12'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', example='RENEWCHANGE'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazcdxs****'),
      secondLimited?: boolean(name='SecondLimited', example='false'),
      securityProtectionTypes?: {
        securityProtectionType?: [ string ](name='SecurityProtectionType')
      }(name='SecurityProtectionTypes'),
      segmentInstanceId?: string(name='SegmentInstanceId', example='eipsg-t4nr90yik5oy38xd****'),
      serviceManaged?: int32(name='ServiceManaged', example='0'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='KeyTest'),
          value?: string(name='Value', example='ValueTest'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcId?: string(name='VpcId'),
      zone?: string(name='Zone'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEipAddressesResponseBody(name='body'),
}

async function describeEipAddressesWithOptions(request: DescribeEipAddressesRequest, runtime: Util.RuntimeOptions): DescribeEipAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.associatedInstanceId)) {
    query['AssociatedInstanceId'] = request.associatedInstanceId;
  }
  if (!Util.isUnset(request.associatedInstanceType)) {
    query['AssociatedInstanceType'] = request.associatedInstanceType;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.eipAddress)) {
    query['EipAddress'] = request.eipAddress;
  }
  if (!Util.isUnset(request.eipName)) {
    query['EipName'] = request.eipName;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.includeReservationData)) {
    query['IncludeReservationData'] = request.includeReservationData;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.publicIpAddressPoolId)) {
    query['PublicIpAddressPoolId'] = request.publicIpAddressPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityProtectionEnabled)) {
    query['SecurityProtectionEnabled'] = request.securityProtectionEnabled;
  }
  if (!Util.isUnset(request.segmentInstanceId)) {
    query['SegmentInstanceId'] = request.segmentInstanceId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEipAddresses',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipAddressesWithOptions(request, runtime);
}

model DescribeEipGatewayInfoRequest {
  instanceId?: string(name='InstanceId', example='eni-bp1d66qjxb3qoin3****'),
  ownerAccount?: string(name='OwnerAccount', example='111'),
  ownerId?: long(name='OwnerId', example='111'),
  regionId?: string(name='RegionId', example='cn-zhangjiakou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='111'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111'),
}

model DescribeEipGatewayInfoResponseBody = {
  code?: string(name='Code', example='200'),
  eipInfos?: {
    eipInfo?: [ 
    {
      ip?: string(name='Ip', example='47.xx.xx.236'),
      ipGw?: string(name='IpGw', example='47.xx.xx.1'),
      ipMask?: string(name='IpMask', example='255.255.255.0'),
    }
  ](name='EipInfo')
  }(name='EipInfos'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='C0FD0EED-F90D-4479-803D-DD62335357E5'),
}

model DescribeEipGatewayInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEipGatewayInfoResponseBody(name='body'),
}

async function describeEipGatewayInfoWithOptions(request: DescribeEipGatewayInfoRequest, runtime: Util.RuntimeOptions): DescribeEipGatewayInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEipGatewayInfo',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEipGatewayInfo(request: DescribeEipGatewayInfoRequest): DescribeEipGatewayInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipGatewayInfoWithOptions(request, runtime);
}

model DescribeEipMonitorDataRequest {
  allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7uj6idcfv****'),
  endTime?: string(name='EndTime', example='2020-01-05T03:05:10Z'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', example='60'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', example='2020-01-05T01:05:05Z'),
}

model DescribeEipMonitorDataResponseBody = {
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipBandwidth?: int32(name='EipBandwidth', example='10'),
      eipFlow?: long(name='EipFlow', example='465'),
      eipPackets?: int32(name='EipPackets', example='3434'),
      eipRX?: long(name='EipRX', example='122'),
      eipTX?: long(name='EipTX', example='343'),
      timeStamp?: string(name='TimeStamp', example='2020-01-21T09:50:23Z'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas'),
  requestId?: string(name='RequestId', example='C8B26B44-0189-443E-9816-D951F59623A9'),
}

model DescribeEipMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEipMonitorDataResponseBody(name='body'),
}

async function describeEipMonitorDataWithOptions(request: DescribeEipMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeEipMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEipMonitorData',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEipMonitorData(request: DescribeEipMonitorDataRequest): DescribeEipMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipMonitorDataWithOptions(request, runtime);
}

model DescribeEipSegmentRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001sdfg'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  segmentInstanceId?: string(name='SegmentInstanceId', example='eipsg-2zett8ba055tbsxme****'),
}

model DescribeEipSegmentResponseBody = {
  eipSegments?: {
    eipSegment?: [ 
    {
      creationTime?: string(name='CreationTime', example='2020-03-06T12:30:07Z'),
      descritpion?: string(name='Descritpion', example='MyEipSegment'),
      instanceId?: string(name='InstanceId', example='eipsg-2zett8ba055tbsxme****'),
      ipCount?: string(name='IpCount', example='28'),
      name?: string(name='Name', example='MyEipSegment'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      segment?: string(name='Segment', example='161.xx.xx.32/28'),
      status?: string(name='Status', example='Allocated'),
    }
  ](name='EipSegment')
  }(name='EipSegments'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeEipSegmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEipSegmentResponseBody(name='body'),
}

async function describeEipSegmentWithOptions(request: DescribeEipSegmentRequest, runtime: Util.RuntimeOptions): DescribeEipSegmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.segmentInstanceId)) {
    query['SegmentInstanceId'] = request.segmentInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEipSegment',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEipSegment(request: DescribeEipSegmentRequest): DescribeEipSegmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipSegmentWithOptions(request, runtime);
}

model DescribeFlowLogsRequest {
  description?: string(name='Description', example='This is my Flowlog.'),
  flowLogId?: string(name='FlowLogId', example='fl-bp1f6qqhsrc2c12ta****'),
  flowLogName?: string(name='FlowLogName', example='myFlowlog'),
  logStoreName?: string(name='LogStoreName', example='FlowLogStore'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectName?: string(name='ProjectName', example='FlowLogProject'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='eni-askldfas****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='NetworkInterface'),
  status?: string(name='Status', example='Active'),
  trafficType?: string(name='TrafficType', example='All'),
  vpcId?: string(name='VpcId', example='vpc-bp1nwd16gvo1wgs****'),
}

model DescribeFlowLogsResponseBody = {
  flowLogs?: {
    flowLog?: [ 
    {
      aggregationInterval?: int32(name='AggregationInterval', example='10'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      creationTime?: string(name='CreationTime', example='2022-01-21T03:08:50Z'),
      description?: string(name='Description', example='Description'),
      flowLogId?: string(name='FlowLogId', example='fl-bp1f6qqhsrc2c12ta****'),
      flowLogName?: string(name='FlowLogName', example='myFlowlog'),
      logStoreName?: string(name='LogStoreName', example='FlowLogStore'),
      projectName?: string(name='ProjectName', example='FlowLogProject'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', example='eni-askldfas****'),
      resourceType?: string(name='ResourceType', example='NetworkInterface'),
      serviceType?: string(name='ServiceType', example='sls'),
      status?: string(name='Status', example='Active'),
      trafficPath?: {
        trafficPathList?: [ string ](name='trafficPathList')
      }(name='TrafficPath'),
      trafficType?: string(name='TrafficType', example='All'),
    }
  ](name='FlowLog')
  }(name='FlowLogs'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
  totalCount?: string(name='TotalCount', example='1'),
}

model DescribeFlowLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowLogsResponseBody(name='body'),
}

async function describeFlowLogsWithOptions(request: DescribeFlowLogsRequest, runtime: Util.RuntimeOptions): DescribeFlowLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.flowLogName)) {
    query['FlowLogName'] = request.flowLogName;
  }
  if (!Util.isUnset(request.logStoreName)) {
    query['LogStoreName'] = request.logStoreName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.trafficType)) {
    query['TrafficType'] = request.trafficType;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowLogs',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowLogs(request: DescribeFlowLogsRequest): DescribeFlowLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowLogsWithOptions(request, runtime);
}

model DescribeForwardTableEntriesRequest {
  externalIp?: string(name='ExternalIp', example='116.28.XX.XX'),
  externalPort?: string(name='ExternalPort', example='8080'),
  forwardEntryId?: string(name='ForwardEntryId', example='fwd-8vbn3bc8roygjp0gy****'),
  forwardEntryName?: string(name='ForwardEntryName', example='ForwardEntry-1'),
  forwardTableId?: string(name='ForwardTableId', example='ftb-bp1mbjubq34hlcqpa****'),
  internalIp?: string(name='InternalIp', example='192.168.XX.XX'),
  internalPort?: string(name='InternalPort', example='80'),
  ipProtocol?: string(name='IpProtocol', example='TCP'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeForwardTableEntriesResponseBody = {
  forwardTableEntries?: {
    forwardTableEntry?: [ 
    {
      externalIp?: string(name='ExternalIp', example='139.79.XX.XX'),
      externalPort?: string(name='ExternalPort', example='80'),
      forwardEntryId?: string(name='ForwardEntryId', example='fwd-119smw5tk****'),
      forwardEntryName?: string(name='ForwardEntryName', example='ForwardEntry-1'),
      forwardTableId?: string(name='ForwardTableId', example='ftb-11tc6xgmv****'),
      internalIp?: string(name='InternalIp', example='192.168.XX.XX'),
      internalPort?: string(name='InternalPort', example='25'),
      ipProtocol?: string(name='IpProtocol', example='TCP'),
      status?: string(name='Status', example='Available'),
    }
  ](name='ForwardTableEntry')
  }(name='ForwardTableEntries'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A6C4A8B1-7561-4509-949C-20DEB40D71E6'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeForwardTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeForwardTableEntriesResponseBody(name='body'),
}

async function describeForwardTableEntriesWithOptions(request: DescribeForwardTableEntriesRequest, runtime: Util.RuntimeOptions): DescribeForwardTableEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.externalPort)) {
    query['ExternalPort'] = request.externalPort;
  }
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  if (!Util.isUnset(request.forwardEntryName)) {
    query['ForwardEntryName'] = request.forwardEntryName;
  }
  if (!Util.isUnset(request.forwardTableId)) {
    query['ForwardTableId'] = request.forwardTableId;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeForwardTableEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeForwardTableEntriesWithOptions(request, runtime);
}

model DescribeGlobalAccelerationInstancesRequest {
  bandwidthType?: string(name='BandwidthType', example='Exclusive'),
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-234sljmxaz****'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false'),
  ipAddress?: string(name='IpAddress', example='12.xx.xx.78'),
  name?: string(name='Name', example='GA-1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serverId?: string(name='ServerId', example='i-sxjblddejj9x****'),
  serviceLocation?: string(name='ServiceLocation', example='china-mainland'),
  status?: string(name='Status', example='Available'),
}

model DescribeGlobalAccelerationInstancesResponseBody = {
  globalAccelerationInstances?: {
    globalAccelerationInstance?: [ 
    {
      accelerationLocation?: string(name='AccelerationLocation', example='china-mainland'),
      backendServers?: {
        backendServer?: [ 
        {
          regionId?: string(name='RegionId', example='cn-beijing'),
          serverId?: string(name='ServerId', example='i-2zeg83zvn5d4ed4y****'),
          serverIpAddress?: string(name='ServerIpAddress', example='172.xx.xx.109'),
          serverType?: string(name='ServerType', example='EcsInstance'),
        }
      ](name='BackendServer')
      }(name='BackendServers'),
      bandwidth?: string(name='Bandwidth', example='10'),
      bandwidthType?: string(name='BandwidthType', example='Exclusive'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      creationTime?: string(name='CreationTime', example='2018-07-05T03:39:31Z'),
      description?: string(name='Description', example='apiDescription'),
      expiredTime?: string(name='ExpiredTime', example='2018-08-05T16:00Z'),
      globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-bp1x99kj7kl1ziw5x****'),
      internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
      ipAddress?: string(name='IpAddress', example='47.xx.xx.99'),
      name?: string(name='Name', example='instanceName'),
      publicIpAddresses?: {
        publicIpAddress?: [ 
        {
          allocationId?: string(name='AllocationId', example='eip-bp19yqraac4w3y0jd****'),
          ipAddress?: string(name='IpAddress', example='12.xx.xx.78'),
        }
      ](name='PublicIpAddress')
      }(name='PublicIpAddresses'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      serviceLocation?: string(name='ServiceLocation', example='china-mainland'),
      status?: string(name='Status', example='InUse'),
    }
  ](name='GlobalAccelerationInstance')
  }(name='GlobalAccelerationInstances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6B4EE38D-C75B-4E1F-844E-863A94430676'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeGlobalAccelerationInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGlobalAccelerationInstancesResponseBody(name='body'),
}

async function describeGlobalAccelerationInstancesWithOptions(request: DescribeGlobalAccelerationInstancesRequest, runtime: Util.RuntimeOptions): DescribeGlobalAccelerationInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthType)) {
    query['BandwidthType'] = request.bandwidthType;
  }
  if (!Util.isUnset(request.globalAccelerationInstanceId)) {
    query['GlobalAccelerationInstanceId'] = request.globalAccelerationInstanceId;
  }
  if (!Util.isUnset(request.includeReservationData)) {
    query['IncludeReservationData'] = request.includeReservationData;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.serviceLocation)) {
    query['ServiceLocation'] = request.serviceLocation;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGlobalAccelerationInstances',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGlobalAccelerationInstances(request: DescribeGlobalAccelerationInstancesRequest): DescribeGlobalAccelerationInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGlobalAccelerationInstancesWithOptions(request, runtime);
}

model DescribeGrantRulesToCenRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='vpc-bp18sth14qii3pnvc****'),
  instanceType?: string(name='InstanceType', example='VPC'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeGrantRulesToCenResponseBody = {
  cenGrantRules?: {
    cbnGrantRule?: [ 
    {
      cenInstanceId?: string(name='CenInstanceId', example='cen-9gsm1q2yh1prpt****'),
      cenOwnerId?: long(name='CenOwnerId', example='1000000000'),
      creationTime?: string(name='CreationTime', example='2019-11-15T09:26:36Z'),
    }
  ](name='CbnGrantRule')
  }(name='CenGrantRules'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F5BB78C8-5F41-464F-B9FF-5E0A7198BA26'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeGrantRulesToCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGrantRulesToCenResponseBody(name='body'),
}

async function describeGrantRulesToCenWithOptions(request: DescribeGrantRulesToCenRequest, runtime: Util.RuntimeOptions): DescribeGrantRulesToCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGrantRulesToCen',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGrantRulesToCen(request: DescribeGrantRulesToCenRequest): DescribeGrantRulesToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGrantRulesToCenWithOptions(request, runtime);
}

model DescribeHaVipsRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='HaVipId'),
      value?: [ string ](name='Value', example='havip-bp19o63nequs01i8d****'),
    }
  ](name='Filter'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeHaVipsResponseBody = {
  haVips?: {
    haVip?: [ 
    {
      associatedEipAddresses?: {
        associatedEipAddresse?: [ string ](name='associatedEipAddresse')
      }(name='AssociatedEipAddresses'),
      associatedInstanceType?: string(name='AssociatedInstanceType', example='EcsInstance'),
      associatedInstances?: {
        associatedInstance?: [ string ](name='associatedInstance')
      }(name='AssociatedInstances'),
      chargeType?: string(name='ChargeType', example='none'),
      createTime?: string(name='CreateTime', example='2021-07-03T14:25:26Z'),
      description?: string(name='Description', example='My HaVip'),
      haVipId?: string(name='HaVipId', example='havip-bp149uyvut73dpld****'),
      ipAddress?: string(name='IpAddress', example='192.168.24.5'),
      masterInstanceId?: string(name='MasterInstanceId', example='i-bp145q7glnuzdvz****'),
      name?: string(name='Name', example='test'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Available'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1pkt1fba8e824ez****'),
      vpcId?: string(name='VpcId', example='vpc-bp1kcm36tevkpms97****'),
    }
  ](name='HaVip')
  }(name='HaVips'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='33E480C5-B46F-4CA5-B6FD-D77C746E86AB'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeHaVipsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHaVipsResponseBody(name='body'),
}

async function describeHaVipsWithOptions(request: DescribeHaVipsRequest, runtime: Util.RuntimeOptions): DescribeHaVipsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHaVips',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHaVips(request: DescribeHaVipsRequest): DescribeHaVipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHaVipsWithOptions(request, runtime);
}

model DescribeHighDefinitionMonitorLogAttributeRequest {
  instanceId?: string(name='InstanceId', example='eip-wz9fi6qboho9fwgx7****'),
  instanceType?: string(name='InstanceType', example='EIP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeHighDefinitionMonitorLogAttributeResponseBody = {
  instanceId?: string(name='InstanceId', example='eip-wz9fi6qboho9fwgx7****'),
  instanceType?: string(name='InstanceType', example='EIP'),
  logProject?: string(name='LogProject', example='hdmonitor-cn-shenzhen-1658206966225390'),
  logStore?: string(name='LogStore', example='hdmonitor'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  success?: string(name='Success', example='true'),
}

model DescribeHighDefinitionMonitorLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHighDefinitionMonitorLogAttributeResponseBody(name='body'),
}

async function describeHighDefinitionMonitorLogAttributeWithOptions(request: DescribeHighDefinitionMonitorLogAttributeRequest, runtime: Util.RuntimeOptions): DescribeHighDefinitionMonitorLogAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHighDefinitionMonitorLogAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHighDefinitionMonitorLogAttribute(request: DescribeHighDefinitionMonitorLogAttributeRequest): DescribeHighDefinitionMonitorLogAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHighDefinitionMonitorLogAttributeWithOptions(request, runtime);
}

model DescribeIPv6TranslatorAclListAttributesRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeIPv6TranslatorAclListAttributesResponseBody = {
  aclEntries?: {
    aclEntry?: [ 
    {
      aclEntryComment?: string(name='AclEntryComment', example='client IP'),
      aclEntryId?: string(name='AclEntryId', example='ipv6transaclentry-bp105jrsxxxx'),
      aclEntryIp?: string(name='AclEntryIp', example='12ab:0:0:dc30::0102/128'),
    }
  ](name='AclEntry')
  }(name='AclEntries'),
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  aclName?: string(name='AclName', example='acl1'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIPv6TranslatorAclListAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIPv6TranslatorAclListAttributesResponseBody(name='body'),
}

async function describeIPv6TranslatorAclListAttributesWithOptions(request: DescribeIPv6TranslatorAclListAttributesRequest, runtime: Util.RuntimeOptions): DescribeIPv6TranslatorAclListAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIPv6TranslatorAclListAttributes',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIPv6TranslatorAclListAttributes(request: DescribeIPv6TranslatorAclListAttributesRequest): DescribeIPv6TranslatorAclListAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIPv6TranslatorAclListAttributesWithOptions(request, runtime);
}

model DescribeIPv6TranslatorAclListsRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  aclName?: string(name='AclName', example='acl1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeIPv6TranslatorAclListsResponseBody = {
  ipv6TranslatorAcls?: {
    IPv6TranslatorAcl?: [ 
    {
      aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
      aclName?: string(name='AclName', example='acl1'),
    }
  ](name='IPv6TranslatorAcl')
  }(name='Ipv6TranslatorAcls'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIPv6TranslatorAclListsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIPv6TranslatorAclListsResponseBody(name='body'),
}

async function describeIPv6TranslatorAclListsWithOptions(request: DescribeIPv6TranslatorAclListsRequest, runtime: Util.RuntimeOptions): DescribeIPv6TranslatorAclListsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.aclName)) {
    query['AclName'] = request.aclName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIPv6TranslatorAclLists',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIPv6TranslatorAclLists(request: DescribeIPv6TranslatorAclListsRequest): DescribeIPv6TranslatorAclListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIPv6TranslatorAclListsWithOptions(request, runtime);
}

model DescribeIPv6TranslatorEntriesRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  aclStatus?: string(name='AclStatus', example='off'),
  aclType?: string(name='AclType', example='white'),
  allocateIpv6Addr?: string(name='AllocateIpv6Addr', example='2400:3200:1600::xx'),
  allocateIpv6Port?: int32(name='AllocateIpv6Port', example='80'),
  backendIpv4Addr?: string(name='BackendIpv4Addr', example='47.99.xx.xx'),
  backendIpv4Port?: int32(name='BackendIpv4Port', example='80'),
  clientToken?: string(name='ClientToken', example='sha1111'),
  entryName?: string(name='EntryName', example='entryname'),
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6transentry-bp1g8bhrdexxxxx'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transProtocol?: string(name='TransProtocol', example='tcp'),
}

model DescribeIPv6TranslatorEntriesResponseBody = {
  ipv6TranslatorEntries?: {
    ipv6TranslatorEntry?: [ 
    {
      aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
      aclStatus?: string(name='AclStatus', example='on'),
      aclType?: string(name='AclType', example='white'),
      allocateIpv6Addr?: string(name='AllocateIpv6Addr', example='2400:3200:1600::xxx'),
      allocateIpv6Port?: int32(name='AllocateIpv6Port', example='80'),
      backendIpv4Addr?: string(name='BackendIpv4Addr', example='47.99.xx.xx'),
      backendIpv4Port?: string(name='BackendIpv4Port', example='80'),
      entryBandwidth?: string(name='EntryBandwidth', example='1'),
      entryDescription?: string(name='EntryDescription', example='description'),
      entryName?: string(name='EntryName', example='name'),
      entryStatus?: string(name='EntryStatus', example='active'),
      ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6transentry-bp1g8bhrdexxxxx'),
      ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      transProtocol?: string(name='TransProtocol', example='tcp'),
    }
  ](name='Ipv6TranslatorEntry')
  }(name='Ipv6TranslatorEntries'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='3109D437-5D6D-4A28-B5F5-EF936DExxxx'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIPv6TranslatorEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIPv6TranslatorEntriesResponseBody(name='body'),
}

async function describeIPv6TranslatorEntriesWithOptions(request: DescribeIPv6TranslatorEntriesRequest, runtime: Util.RuntimeOptions): DescribeIPv6TranslatorEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.aclStatus)) {
    query['AclStatus'] = request.aclStatus;
  }
  if (!Util.isUnset(request.aclType)) {
    query['AclType'] = request.aclType;
  }
  if (!Util.isUnset(request.allocateIpv6Addr)) {
    query['AllocateIpv6Addr'] = request.allocateIpv6Addr;
  }
  if (!Util.isUnset(request.allocateIpv6Port)) {
    query['AllocateIpv6Port'] = request.allocateIpv6Port;
  }
  if (!Util.isUnset(request.backendIpv4Addr)) {
    query['BackendIpv4Addr'] = request.backendIpv4Addr;
  }
  if (!Util.isUnset(request.backendIpv4Port)) {
    query['BackendIpv4Port'] = request.backendIpv4Port;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.entryName)) {
    query['EntryName'] = request.entryName;
  }
  if (!Util.isUnset(request.ipv6TranslatorEntryId)) {
    query['Ipv6TranslatorEntryId'] = request.ipv6TranslatorEntryId;
  }
  if (!Util.isUnset(request.ipv6TranslatorId)) {
    query['Ipv6TranslatorId'] = request.ipv6TranslatorId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.transProtocol)) {
    query['TransProtocol'] = request.transProtocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIPv6TranslatorEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIPv6TranslatorEntries(request: DescribeIPv6TranslatorEntriesRequest): DescribeIPv6TranslatorEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIPv6TranslatorEntriesWithOptions(request, runtime);
}

model DescribeIPv6TranslatorsRequest {
  allocateIpv4Addr?: string(name='AllocateIpv4Addr', example='47.99.xx.xx'),
  allocateIpv6Addr?: string(name='AllocateIpv6Addr', example='2400:3200:1600::xxx'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
  name?: string(name='Name', example='ipv6_1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  payType?: string(name='PayType', example='Prepay'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spec?: string(name='Spec', example='small'),
  status?: string(name='Status', example='active'),
}

model DescribeIPv6TranslatorsResponseBody = {
  ipv6Translators?: {
    ipv6Translator?: [ 
    {
      allocateIpv4Addr?: string(name='AllocateIpv4Addr', example='47.99.xx.xx'),
      allocateIpv6Addr?: string(name='AllocateIpv6Addr', example='2400:3200:1600::xxx'),
      availableBandwidth?: string(name='AvailableBandwidth', example='1'),
      bandwidth?: int32(name='Bandwidth', example='1'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      createTime?: long(name='CreateTime', example='1537151540000'),
      description?: string(name='Description', example='descriptionforinstance'),
      endTime?: long(name='EndTime', example='1539792000000'),
      ipv6TranslatorEntryIds?: {
        ipv6TranslatorEntryId?: [ string ](name='Ipv6TranslatorEntryId')
      }(name='Ipv6TranslatorEntryIds'),
      ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
      name?: string(name='Name', example='test'),
      payType?: string(name='PayType', example='Prepay'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      spec?: string(name='Spec', example='small'),
      status?: string(name='Status', example='active'),
    }
  ](name='Ipv6Translator')
  }(name='Ipv6Translators'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='3109D437-5D6D-4A28-B5F5-EF936DExxxx'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIPv6TranslatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIPv6TranslatorsResponseBody(name='body'),
}

async function describeIPv6TranslatorsWithOptions(request: DescribeIPv6TranslatorsRequest, runtime: Util.RuntimeOptions): DescribeIPv6TranslatorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocateIpv4Addr)) {
    query['AllocateIpv4Addr'] = request.allocateIpv4Addr;
  }
  if (!Util.isUnset(request.allocateIpv6Addr)) {
    query['AllocateIpv6Addr'] = request.allocateIpv6Addr;
  }
  if (!Util.isUnset(request.businessStatus)) {
    query['BusinessStatus'] = request.businessStatus;
  }
  if (!Util.isUnset(request.ipv6TranslatorId)) {
    query['Ipv6TranslatorId'] = request.ipv6TranslatorId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIPv6Translators',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIPv6Translators(request: DescribeIPv6TranslatorsRequest): DescribeIPv6TranslatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIPv6TranslatorsWithOptions(request, runtime);
}

model DescribeIpv6AddressesRequest {
  associatedInstanceId?: string(name='AssociatedInstanceId', example='i-2ze72wuqj4y3jl4f****'),
  associatedInstanceType?: string(name='AssociatedInstanceType', example='EcsInstance'),
  ipv6Address?: string(name='Ipv6Address', example='2408:XXXX:153:3921:851c:c435:7b12:1c5f'),
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6-2zen5j4axcp5l5qyy****'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  name?: string(name='Name', example='test'),
  networkType?: string(name='NetworkType', example='Private'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25navfgbue4g****'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
}

model DescribeIpv6AddressesResponseBody = {
  ipv6Addresses?: {
    ipv6Address?: [ 
    {
      allocationTime?: string(name='AllocationTime', example='2020-12-20T14:56:09Z'),
      associatedInstanceId?: string(name='AssociatedInstanceId', example='i-2ze72wuqj4y3jl4f****'),
      associatedInstanceType?: string(name='AssociatedInstanceType', example='EcsInstance'),
      ipv6Address?: string(name='Ipv6Address', example='2408:XXXX:153:3921:851c:c435:7b12:1c5f'),
      ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6-2zen5j4axcp5l5qyy****'),
      ipv6AddressName?: string(name='Ipv6AddressName', example='test'),
      ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-2zewg0l66s73b4k2q****'),
      ipv6InternetBandwidth?: {
        bandwidth?: int32(name='Bandwidth', example='5'),
        businessStatus?: string(name='BusinessStatus', example='Normal'),
        instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
        internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
        ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', example='ipv6bw-hp3b35oq1fj50kbv****'),
      }(name='Ipv6InternetBandwidth'),
      ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
      networkType?: string(name='NetworkType', example='Private'),
      realBandwidth?: int32(name='RealBandwidth', example='5'),
      status?: string(name='Status', example='Available'),
      vSwitchId?: string(name='VSwitchId', example='vsw-25navfgbue4g****'),
      vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
    }
  ](name='Ipv6Address')
  }(name='Ipv6Addresses'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AA4486A8-B6AE-469E-AB09-820EF8ECFA2B'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeIpv6AddressesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpv6AddressesResponseBody(name='body'),
}

async function describeIpv6AddressesWithOptions(request: DescribeIpv6AddressesRequest, runtime: Util.RuntimeOptions): DescribeIpv6AddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.associatedInstanceId)) {
    query['AssociatedInstanceId'] = request.associatedInstanceId;
  }
  if (!Util.isUnset(request.associatedInstanceType)) {
    query['AssociatedInstanceType'] = request.associatedInstanceType;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.ipv6AddressId)) {
    query['Ipv6AddressId'] = request.ipv6AddressId;
  }
  if (!Util.isUnset(request.ipv6InternetBandwidthId)) {
    query['Ipv6InternetBandwidthId'] = request.ipv6InternetBandwidthId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpv6Addresses',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpv6Addresses(request: DescribeIpv6AddressesRequest): DescribeIpv6AddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpv6AddressesWithOptions(request, runtime);
}

model DescribeIpv6EgressOnlyRulesRequest {
  instanceId?: string(name='InstanceId', example='i-123456xxxxxxxx'),
  instanceType?: string(name='InstanceType', example='Ipv6Address'),
  ipv6EgressOnlyRuleId?: string(name='Ipv6EgressOnlyRuleId', example='ipv6gwpy-123456xxxxxxxx'),
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-123456xxxxxxxx'),
  name?: string(name='Name', example='rulename'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeIpv6EgressOnlyRulesResponseBody = {
  ipv6EgressOnlyRules?: {
    ipv6EgressOnlyRule?: [ 
    {
      description?: string(name='Description', example='ruledescription'),
      instanceId?: string(name='InstanceId', example='i-123456xxxxxxxx'),
      instanceType?: string(name='InstanceType', example='Ipv6Address'),
      ipv6EgressOnlyRuleId?: string(name='Ipv6EgressOnlyRuleId', example='ipv6gwpy-123456xxxxxxxx'),
      name?: string(name='Name', example='rulename'),
      status?: string(name='Status', example='Available'),
    }
  ](name='Ipv6EgressOnlyRule')
  }(name='Ipv6EgressOnlyRules'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E16671B7-DEA6-48E0-8E9C-41913DAD44DD'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIpv6EgressOnlyRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpv6EgressOnlyRulesResponseBody(name='body'),
}

async function describeIpv6EgressOnlyRulesWithOptions(request: DescribeIpv6EgressOnlyRulesRequest, runtime: Util.RuntimeOptions): DescribeIpv6EgressOnlyRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ipv6EgressOnlyRuleId)) {
    query['Ipv6EgressOnlyRuleId'] = request.ipv6EgressOnlyRuleId;
  }
  if (!Util.isUnset(request.ipv6GatewayId)) {
    query['Ipv6GatewayId'] = request.ipv6GatewayId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpv6EgressOnlyRules',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpv6EgressOnlyRules(request: DescribeIpv6EgressOnlyRulesRequest): DescribeIpv6EgressOnlyRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpv6EgressOnlyRulesWithOptions(request, runtime);
}

model DescribeIpv6GatewayAttributeRequest {
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-123456xxxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeIpv6GatewayAttributeResponseBody = {
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  creationTime?: string(name='CreationTime', example='2018-12-05T09:21:35Z'),
  description?: string(name='Description', example='test'),
  expiredTime?: string(name='ExpiredTime', example='2018-12-05T09:21:35Z'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-123456xxxxxxxx'),
  name?: string(name='Name', example='test'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  requestId?: string(name='RequestId', example='ipv6gw-hp33p10bdbt77xxxxxxxx'),
  status?: string(name='Status', example='Available'),
  vpcId?: string(name='VpcId', example='vpc-123456xxxxxxxx'),
}

model DescribeIpv6GatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpv6GatewayAttributeResponseBody(name='body'),
}

async function describeIpv6GatewayAttributeWithOptions(request: DescribeIpv6GatewayAttributeRequest, runtime: Util.RuntimeOptions): DescribeIpv6GatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipv6GatewayId)) {
    query['Ipv6GatewayId'] = request.ipv6GatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpv6GatewayAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpv6GatewayAttribute(request: DescribeIpv6GatewayAttributeRequest): DescribeIpv6GatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpv6GatewayAttributeWithOptions(request, runtime);
}

model DescribeIpv6GatewaysRequest {
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp3rwmtmfhgis****'),
  name?: string(name='Name', example='ipv6GW'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-123sedrfswd23****'),
}

model DescribeIpv6GatewaysResponseBody = {
  ipv6Gateways?: {
    ipv6Gateway?: [ 
    {
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      creationTime?: string(name='CreationTime', example='2020-12-20T14:51:23Z'),
      description?: string(name='Description', example='descriptionforIPv6GW'),
      expiredTime?: string(name='ExpiredTime', example='2021-12-20T14:51:23Z'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp3rwmtmfhgisipv6gw-hp3rwmtmfhgis****'),
      name?: string(name='Name', example='ipv6GW'),
      regionId?: string(name='RegionId', example='cn-huhehaote'),
      status?: string(name='Status', example='Available'),
      vpcId?: string(name='VpcId', example='vpc-123sedrfswd23****'),
    }
  ](name='Ipv6Gateway')
  }(name='Ipv6Gateways'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E3A06196-3E7C-490D-8F39-CB4B5A0CE8AD'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeIpv6GatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpv6GatewaysResponseBody(name='body'),
}

async function describeIpv6GatewaysWithOptions(request: DescribeIpv6GatewaysRequest, runtime: Util.RuntimeOptions): DescribeIpv6GatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipv6GatewayId)) {
    query['Ipv6GatewayId'] = request.ipv6GatewayId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpv6Gateways',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpv6Gateways(request: DescribeIpv6GatewaysRequest): DescribeIpv6GatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpv6GatewaysWithOptions(request, runtime);
}

model DescribeNatGatewaysRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  name?: string(name='Name', example='test'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  natType?: string(name='NatType', example='Enhanced'),
  networkType?: string(name='NetworkType', example='internet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spec?: string(name='Spec'),
  status?: string(name='Status', example='Available'),
  tag?: [ 
    {
      key?: string(name='Key', example='KeyTest'),
      value?: string(name='Value', example='valueTest'),
    }
  ](name='Tag'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72z****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
}

model DescribeNatGatewaysResponseBody = {
  natGateways?: {
    natGateway?: [ 
    {
      autoPay?: boolean(name='AutoPay', example='false'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      creationTime?: string(name='CreationTime', example='2021-06-08T12:20:20Z'),
      deletionProtection?: boolean(name='DeletionProtection', example='true'),
      description?: string(name='Description', example='NAT'),
      ecsMetricEnabled?: boolean(name='EcsMetricEnabled', example='true'),
      eipBindMode?: string(name='EipBindMode', example='MULTI_BINDED'),
      expiredTime?: string(name='ExpiredTime', example='2021-08-26T16:00Z'),
      forwardTableIds?: {
        forwardTableId?: [ string ](name='ForwardTableId')
      }(name='ForwardTableIds'),
      fullNatTableIds?: {
        fullNatTableId?: [ string ](name='FullNatTableId')
      }(name='FullNatTableIds'),
      icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', example='false'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      internetChargeType?: string(name='InternetChargeType', example='PayByLcu'),
      ipLists?: {
        ipList?: [ 
        {
          allocationId?: string(name='AllocationId', example='eip-m5egzuvp3dgixen6****'),
          ipAddress?: string(name='IpAddress', example='116.62.XX.XX'),
          privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
          snatEntryEnabled?: boolean(name='SnatEntryEnabled', example='false'),
          usingStatus?: string(name='UsingStatus', example='UsedByForwardTable'),
        }
      ](name='IpList')
      }(name='IpLists'),
      name?: string(name='Name', example='abc'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-bp1047e2d4z7kf2ki****'),
      natGatewayPrivateInfo?: {
        eniInstanceId?: string(name='EniInstanceId', example='eni-m5eg4ozy5st8q3q4****'),
        eniType?: string(name='EniType', example='indirect'),
        izNo?: string(name='IzNo', example='cn-hangzhou-b'),
        maxBandwidth?: int32(name='MaxBandwidth', example='5120'),
        maxSessionEstablishRate?: int32(name='MaxSessionEstablishRate', example='100000'),
        maxSessionQuota?: int32(name='MaxSessionQuota', example='2000000'),
        privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
        vswitchId?: string(name='VswitchId', example='vsw-bp1s2laxhdf9ayjbo****'),
      }(name='NatGatewayPrivateInfo'),
      natType?: string(name='NatType', example='Enhanced'),
      networkType?: string(name='NetworkType', example='internet'),
      privateLinkEnabled?: boolean(name='PrivateLinkEnabled', example='true'),
      privateLinkMode?: string(name='PrivateLinkMode', example='FullNat'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****'),
      securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', example='false'),
      snatTableIds?: {
        snatTableId?: [ string ](name='SnatTableId')
      }(name='SnatTableIds'),
      spec?: string(name='Spec', example='Small'),
      status?: string(name='Status', example='Creating'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', example='KeyTest'),
          tagValue?: string(name='TagValue', example='valueTest'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72z****'),
    }
  ](name='NatGateway')
  }(name='NatGateways'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeNatGatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNatGatewaysResponseBody(name='body'),
}

async function describeNatGatewaysWithOptions(request: DescribeNatGatewaysRequest, runtime: Util.RuntimeOptions): DescribeNatGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natType)) {
    query['NatType'] = request.natType;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatGateways',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatGatewaysWithOptions(request, runtime);
}

model DescribeNetworkAclAttributesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spzasx****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeNetworkAclAttributesResponseBody = {
  networkAclAttribute?: {
    creationTime?: string(name='CreationTime', example='2021-12-25 11:33:27'),
    description?: string(name='Description', example='This is my NetworkAcl.'),
    egressAclEntries?: {
      egressAclEntry?: [ 
      {
        description?: string(name='Description', example='This is EgressAclEntries.'),
        destinationCidrIp?: string(name='DestinationCidrIp', example='10.0.0.0/24'),
        networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2d447uw4tillxdcv****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
        policy?: string(name='Policy', example='accept'),
        port?: string(name='Port', example='-1/-1'),
        protocol?: string(name='Protocol', example='all'),
      }
    ](name='EgressAclEntry')
    }(name='EgressAclEntries'),
    ingressAclEntries?: {
      ingressAclEntry?: [ 
      {
        description?: string(name='Description', example='This is IngressAclEntries.'),
        networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2dk86arlydmevfbg****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
        policy?: string(name='Policy', example='accept'),
        port?: string(name='Port', example='-1/-1'),
        protocol?: string(name='Protocol', example='all'),
        sourceCidrIp?: string(name='SourceCidrIp', example='10.0.0.0/24'),
      }
    ](name='IngressAclEntry')
    }(name='IngressAclEntries'),
    networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spnhmj****'),
    networkAclName?: string(name='NetworkAclName', example='acl-1'),
    ownerId?: long(name='OwnerId', example='253460731706911258'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resources?: {
      resource?: [ 
      {
        resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdwxscd****'),
        resourceType?: string(name='ResourceType', example='VSwitch'),
        status?: string(name='Status', example='BINDED'),
      }
    ](name='Resource')
    }(name='Resources'),
    status?: string(name='Status', example='Available'),
    vpcId?: string(name='VpcId', example='vpc-a2d33rfpl72k5defr****'),
  }(name='NetworkAclAttribute'),
  requestId?: string(name='RequestId', example='F5905F9C-0161-4E72-9CB1-1F3F3CF6268A'),
}

model DescribeNetworkAclAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkAclAttributesResponseBody(name='body'),
}

async function describeNetworkAclAttributesWithOptions(request: DescribeNetworkAclAttributesRequest, runtime: Util.RuntimeOptions): DescribeNetworkAclAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkAclAttributes',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkAclAttributes(request: DescribeNetworkAclAttributesRequest): DescribeNetworkAclAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkAclAttributesWithOptions(request, runtime);
}

model DescribeNetworkAclsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  networkAclId?: string(name='NetworkAclId', example='nacl-bp1lhl0taikrbgnh****'),
  networkAclName?: string(name='NetworkAclName', example='acl-1'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdwnhbg****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='VSwitch'),
  vpcId?: string(name='VpcId', example='vpc-m5ebpc2xh64mqm27e****'),
}

model DescribeNetworkAclsResponseBody = {
  networkAcls?: {
    networkAcl?: [ 
    {
      creationTime?: string(name='CreationTime', example='2021-12-25 11:44:17'),
      description?: string(name='Description', example='This is my NetworkAcl.'),
      egressAclEntries?: {
        egressAclEntry?: [ 
        {
          description?: string(name='Description', example='This is EgressAclEntries.'),
          destinationCidrIp?: string(name='DestinationCidrIp', example='10.0.0.0/24'),
          networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2d447uw4tillfvgb****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
          policy?: string(name='Policy', example='accept'),
          port?: string(name='Port', example='-1/-1'),
          protocol?: string(name='Protocol', example='all'),
        }
      ](name='EgressAclEntry')
      }(name='EgressAclEntries'),
      ingressAclEntries?: {
        ingressAclEntry?: [ 
        {
          description?: string(name='Description', example='This is IngressAclEntries.'),
          networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2dk86arlydmezasw****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
          policy?: string(name='Policy', example='accept'),
          port?: string(name='Port', example='-1/-1'),
          protocol?: string(name='Protocol', example='all'),
          sourceCidrIp?: string(name='SourceCidrIp', example='10.0.0.0/24'),
        }
      ](name='IngressAclEntry')
      }(name='IngressAclEntries'),
      networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spxscd****'),
      networkAclName?: string(name='NetworkAclName', example='acl-1'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resources?: {
        resource?: [ 
        {
          resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdwcdf****'),
          resourceType?: string(name='ResourceType', example='VSwitch'),
          status?: string(name='Status', example='BINDED'),
        }
      ](name='Resource')
      }(name='Resources'),
      status?: string(name='Status', example='Available'),
      vpcId?: string(name='VpcId', example='vpc-m5ebpc2xh64mqm27e****'),
    }
  ](name='NetworkAcl')
  }(name='NetworkAcls'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  totalCount?: string(name='TotalCount', example='2'),
}

model DescribeNetworkAclsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkAclsResponseBody(name='body'),
}

async function describeNetworkAclsWithOptions(request: DescribeNetworkAclsRequest, runtime: Util.RuntimeOptions): DescribeNetworkAclsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.networkAclName)) {
    query['NetworkAclName'] = request.networkAclName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkAcls',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkAcls(request: DescribeNetworkAclsRequest): DescribeNetworkAclsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkAclsWithOptions(request, runtime);
}

model DescribePhysicalConnectionLOARequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='pc-bp1ca4wca27ex****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePhysicalConnectionLOAResponseBody = {
  physicalConnectionLOAType?: {
    companyLocalizedName?: string(name='CompanyLocalizedName', example='company'),
    companyName?: string(name='CompanyName', example='test1234'),
    constructionTime?: string(name='ConstructionTime', example='2019-02-26T08:00:00Z'),
    instanceId?: string(name='InstanceId', example='pc-bp1ca4wca27****'),
    lineCode?: string(name='LineCode', example='aaa111'),
    lineLabel?: string(name='LineLabel', example='bbb222'),
    lineType?: string(name='LineType', example='FIBRE'),
    loaUrl?: string(name='LoaUrl', example='http://******'),
    PMInfo?: {
      PMInfo?: [ 
      {
        PMCertificateNo?: string(name='PMCertificateNo', example='12345671****'),
        PMCertificateType?: string(name='PMCertificateType', example='Other'),
        PMContactInfo?: string(name='PMContactInfo', example='18910010****'),
        PMGender?: string(name='PMGender', example='Male'),
        PMName?: string(name='PMName', example='name'),
      }
    ](name='PMInfo')
    }(name='PMInfo'),
    SI?: string(name='SI', example='ctcu'),
    status?: string(name='Status', example='Available'),
  }(name='PhysicalConnectionLOAType'),
  requestId?: string(name='RequestId', example='318BB676-0A2B-43A0-9AD8-F1D34E93750F'),
}

model DescribePhysicalConnectionLOAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhysicalConnectionLOAResponseBody(name='body'),
}

async function describePhysicalConnectionLOAWithOptions(request: DescribePhysicalConnectionLOARequest, runtime: Util.RuntimeOptions): DescribePhysicalConnectionLOAResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhysicalConnectionLOA',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhysicalConnectionLOA(request: DescribePhysicalConnectionLOARequest): DescribePhysicalConnectionLOAResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhysicalConnectionLOAWithOptions(request, runtime);
}

model DescribePhysicalConnectionsRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001'),
  filter?: [ 
    {
      key?: string(name='Key', example='Name'),
      value?: [ string ](name='Value', example='1'),
    }
  ](name='Filter'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tags?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tags'),
}

model DescribePhysicalConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  physicalConnectionSet?: {
    physicalConnectionType?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-finance-yh-E'),
      accessPointType?: string(name='AccessPointType', example='VPC'),
      adLocation?: string(name='AdLocation'),
      bandwidth?: long(name='Bandwidth', example='10'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='Prepaid'),
      circuitCode?: string(name='CircuitCode', example='longtel001'),
      creationTime?: string(name='CreationTime', example='2021-08-24T07:30:58Z'),
      description?: string(name='Description', example='desctest'),
      enabledTime?: string(name='EnabledTime', example='2021-08-24T07:33:18Z'),
      endTime?: string(name='EndTime', example='2022-04-24T16:00:00Z'),
      expectSpec?: string(name='ExpectSpec', example='50M'),
      hasReservationData?: string(name='HasReservationData', example='false'),
      lineOperator?: string(name='LineOperator', example='CT'),
      loaStatus?: string(name='LoaStatus', example='Available'),
      name?: string(name='Name', example='nametest'),
      orderMode?: string(name='OrderMode', example='PayByPhysicalConnectionOwner'),
      parentPhysicalConnectionAliUid?: long(name='ParentPhysicalConnectionAliUid', example='283117732402483989'),
      parentPhysicalConnectionId?: string(name='ParentPhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
      peerLocation?: string(name='PeerLocation'),
      physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
      portNumber?: string(name='PortNumber', example='1/1/1'),
      portType?: string(name='PortType', example='10GBase-LR'),
      productType?: string(name='ProductType', example='PhysicalConnection'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-119mfjzm****'),
      reservationActiveTime?: string(name='ReservationActiveTime', example='2022-02-25T11:01:04Z'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', example='RENEW'),
      resourceGroupId?: string(name='ResourceGroupId'),
      spec?: string(name='Spec', example='10G'),
      status?: string(name='Status', example='Enabled'),
      type?: string(name='Type', example='VPC'),
      virtualPhysicalConnectionCount?: int32(name='VirtualPhysicalConnectionCount', example='0'),
      vlanId?: string(name='VlanId', example='10'),
      vpconnStatus?: string(name='VpconnStatus', example='Confirmed'),
    }
  ](name='PhysicalConnectionType')
  }(name='PhysicalConnectionSet'),
  requestId?: string(name='RequestId', example='0E6D0EC4-7C91-53E2-9F65-64BF713114B0'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribePhysicalConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhysicalConnectionsResponseBody(name='body'),
}

async function describePhysicalConnectionsWithOptions(request: DescribePhysicalConnectionsRequest, runtime: Util.RuntimeOptions): DescribePhysicalConnectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.includeReservationData)) {
    query['IncludeReservationData'] = request.includeReservationData;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhysicalConnections',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePhysicalConnections(request: DescribePhysicalConnectionsRequest): DescribePhysicalConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhysicalConnectionsWithOptions(request, runtime);
}

model DescribePublicIpAddressRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePublicIpAddressResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  publicIpAddress?: [ string ](name='PublicIpAddress'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePublicIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePublicIpAddressResponseBody(name='body'),
}

async function describePublicIpAddressWithOptions(request: DescribePublicIpAddressRequest, runtime: Util.RuntimeOptions): DescribePublicIpAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePublicIpAddress',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePublicIpAddress(request: DescribePublicIpAddressRequest): DescribePublicIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePublicIpAddressWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  productType?: string(name='ProductType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='vpc.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-qingdao'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRouteEntryListRequest {
  destCidrBlockList?: [ string ](name='DestCidrBlockList'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.2.0/24'),
  ipVersion?: string(name='IpVersion', example='IPv4'),
  maxResult?: int32(name='MaxResult', example='10'),
  nextHopId?: string(name='NextHopId', example='vpn-bp10zyaph5cc8b7c7****'),
  nextHopType?: string(name='NextHopType', example='Instance'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnp****'),
  routeEntryName?: string(name='RouteEntryName', example='abc'),
  routeEntryType?: string(name='RouteEntryType', example='System'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp1r9pvl4xen8s9ju****'),
  serviceType?: string(name='ServiceType', example='TR'),
}

model DescribeRouteEntryListResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  routeEntrys?: {
    routeEntry?: [ 
    {
      description?: string(name='Description', example='RouteEntryDescription'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.2.0/24'),
      gmtModified?: string(name='GmtModified', example='2022-05-09T03:00:07Z'),
      ipVersion?: string(name='IpVersion', example='IPv4'),
      nextHops?: {
        nextHop?: [ 
        {
          enabled?: int32(name='Enabled', example='1'),
          nextHopId?: string(name='NextHopId', example='vpn-bp10zyaph5cc8b7c7****'),
          nextHopRegionId?: string(name='NextHopRegionId', example='cn-hangzhou'),
          nextHopRelatedInfo?: {
            instanceId?: string(name='InstanceId', example='vpc-bp1t36rn9l53iwbsf****'),
            instanceType?: string(name='InstanceType', example='VPC'),
            regionId?: string(name='RegionId', example='ch-hangzhou'),
          }(name='NextHopRelatedInfo'),
          nextHopType?: string(name='NextHopType', example='Instance'),
          weight?: int32(name='Weight', example='100'),
        }
      ](name='NextHop')
      }(name='NextHops'),
      routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnp****'),
      routeEntryName?: string(name='RouteEntryName', example='aaa'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp15w5q90d2rk3bww****'),
      serviceType?: string(name='ServiceType', example='TR'),
      status?: string(name='Status', example='Available'),
      type?: string(name='Type', example='Custom'),
    }
  ](name='RouteEntry')
  }(name='RouteEntrys'),
}

model DescribeRouteEntryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRouteEntryListResponseBody(name='body'),
}

async function describeRouteEntryListWithOptions(request: DescribeRouteEntryListRequest, runtime: Util.RuntimeOptions): DescribeRouteEntryListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destCidrBlockList)) {
    query['DestCidrBlockList'] = request.destCidrBlockList;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextHopId)) {
    query['NextHopId'] = request.nextHopId;
  }
  if (!Util.isUnset(request.nextHopType)) {
    query['NextHopType'] = request.nextHopType;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntryId)) {
    query['RouteEntryId'] = request.routeEntryId;
  }
  if (!Util.isUnset(request.routeEntryName)) {
    query['RouteEntryName'] = request.routeEntryName;
  }
  if (!Util.isUnset(request.routeEntryType)) {
    query['RouteEntryType'] = request.routeEntryType;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouteEntryList',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRouteEntryList(request: DescribeRouteEntryListRequest): DescribeRouteEntryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteEntryListWithOptions(request, runtime);
}

model DescribeRouteTableListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
  routeTableName?: string(name='RouteTableName', example='doctest'),
  routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****'),
  routerType?: string(name='RouterType', example='VRouter'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72****'),
}

model DescribeRouteTableListResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routerTableList?: {
    routerTableListType?: [ 
    {
      associateType?: string(name='AssociateType', example='VSwitch'),
      creationTime?: string(name='CreationTime', example='2021-08-22T10:40:25Z'),
      description?: string(name='Description', example='This is Route Table.'),
      gatewayIds?: {
        gatewayIds?: [ string ](name='GatewayIds')
      }(name='GatewayIds'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
      routeTableName?: string(name='RouteTableName', example='doctest'),
      routeTableType?: string(name='RouteTableType', example='System'),
      routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****'),
      routerType?: string(name='RouterType', example='VRouter'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='type'),
          value?: string(name='Value', example='ingress'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
      vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72****'),
    }
  ](name='RouterTableListType')
  }(name='RouterTableList'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeRouteTableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRouteTableListResponseBody(name='body'),
}

async function describeRouteTableListWithOptions(request: DescribeRouteTableListRequest, runtime: Util.RuntimeOptions): DescribeRouteTableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.routeTableName)) {
    query['RouteTableName'] = request.routeTableName;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  if (!Util.isUnset(request.routerType)) {
    query['RouterType'] = request.routerType;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouteTableList',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRouteTableList(request: DescribeRouteTableListRequest): DescribeRouteTableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteTableListWithOptions(request, runtime);
}

model DescribeRouteTablesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazccb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='rtb-bp12mw1f8k3jgygk9****'),
  routeTableName?: string(name='RouteTableName', example='RouteTable-1'),
  routerId?: string(name='RouterId', example='vtb-bp1krxxzp0c29fmon****'),
  routerType?: string(name='RouterType', example='VRouter'),
  type?: string(name='Type', example='custom'),
  VRouterId?: string(name='VRouterId', example='vtb-bp1krxxzp0c29fmon****'),
}

model DescribeRouteTablesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routeTables?: {
    routeTable?: [ 
    {
      creationTime?: string(name='CreationTime', example='2017-08-22T10:40:25Z'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      routeEntrys?: {
        routeEntry?: [ 
        {
          description?: string(name='Description', example='RouteEntryDescription'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.1/24'),
          instanceId?: string(name='InstanceId', example='ri-2zeo3xzyf38r4urzd****'),
          nextHopType?: string(name='NextHopType', example='local'),
          nextHops?: {
            nextHop?: [ 
            {
              enabled?: int32(name='Enabled', example='0'),
              nextHopId?: string(name='NextHopId', example='ri-2zeo3xzyf38r4urzdpvqw'),
              nextHopType?: string(name='NextHopType', example='HaVip'),
              weight?: int32(name='Weight', example='80'),
            }
          ](name='NextHop')
          }(name='NextHops'),
          routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpxxx'),
          routeEntryName?: string(name='RouteEntryName', example='test'),
          routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
          status?: string(name='Status', example='Pending'),
          type?: string(name='Type', example='System'),
        }
      ](name='RouteEntry')
      }(name='RouteEntrys'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
      routeTableType?: string(name='RouteTableType', example='System'),
      status?: string(name='Status', example='Available'),
      VRouterId?: string(name='VRouterId', example='vrt-bp1lhl0taikrteen8****'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
    }
  ](name='RouteTable')
  }(name='RouteTables'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeRouteTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRouteTablesResponseBody(name='body'),
}

async function describeRouteTablesWithOptions(request: DescribeRouteTablesRequest, runtime: Util.RuntimeOptions): DescribeRouteTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.routeTableName)) {
    query['RouteTableName'] = request.routeTableName;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  if (!Util.isUnset(request.routerType)) {
    query['RouterType'] = request.routerType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.VRouterId)) {
    query['VRouterId'] = request.VRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouteTables',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRouteTables(request: DescribeRouteTablesRequest): DescribeRouteTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteTablesWithOptions(request, runtime);
}

model DescribeRouterInterfaceAttributeRequest {
  instanceId?: string(name='InstanceId', example='ri-m5egfc10sednwk2yt****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRouterInterfaceAttributeResponseBody = {
  accessPointId?: string(name='AccessPointId', example='ap-cn-qingdao-ls-A'),
  bandwidth?: int32(name='Bandwidth', example='2'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  chargeType?: string(name='ChargeType', example='AfterPay'),
  code?: string(name='Code', example='200'),
  connectedTime?: string(name='ConnectedTime', example='2022-04-14T08:58:04Z'),
  creationTime?: string(name='CreationTime', example='2022-04-14T08:57:24Z'),
  crossBorder?: boolean(name='CrossBorder', example='false'),
  description?: string(name='Description'),
  endTime?: string(name='EndTime', example='2999-09-08T16:00:00Z'),
  gmtModified?: string(name='GmtModified', example='2022-04-28T10:02:12Z'),
  hasReservationData?: string(name='HasReservationData', example='false'),
  hcRate?: int32(name='HcRate', example='2'),
  hcThreshold?: int32(name='HcThreshold', example='8'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', example='1.1.XX.XX'),
  healthCheckStatus?: string(name='HealthCheckStatus', example='normal'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', example='2.2.XX.XX'),
  message?: string(name='Message', example='successful'),
  name?: string(name='Name'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId', example='ap-cn-qingdao-ls-B'),
  oppositeBandwidth?: int32(name='OppositeBandwidth', example='0'),
  oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus', example='Normal'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', example='ri-bp1xkrzttximaoxbl****'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', example='1321932713****'),
  oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec', example='Negative'),
  oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus', example='Active'),
  oppositeRegionId?: string(name='OppositeRegionId', example='cn-hangzhou'),
  oppositeRouterId?: string(name='OppositeRouterId', example='vrt-bp11xvy6lb9photuu****'),
  oppositeRouterType?: string(name='OppositeRouterType', example='VRouter'),
  oppositeVpcInstanceId?: string(name='OppositeVpcInstanceId', example='vpc-bp1b49rqrybk45nio****'),
  requestId?: string(name='RequestId', example='01818199-04F6-47F4-9ADF-7CC824CF57A4'),
  reservationActiveTime?: string(name='ReservationActiveTime', example='2022-06-11T16:00:00Z'),
  reservationBandwidth?: string(name='ReservationBandwidth', example='100'),
  reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
  reservationOrderType?: string(name='ReservationOrderType', example='RENEW'),
  role?: string(name='Role', example='InitiatingSide'),
  routerId?: string(name='RouterId', example='vbr-m5ex0xf63xk8s5bob****'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-m5egfc10sednwk2yt****'),
  routerType?: string(name='RouterType', example='VRouter'),
  spec?: string(name='Spec', example='Mini.2'),
  status?: string(name='Status', example='Active'),
  success?: boolean(name='Success', example='true'),
  vpcInstanceId?: string(name='VpcInstanceId', example='vpc-bp1b49rqrybk45nio****'),
}

model DescribeRouterInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRouterInterfaceAttributeResponseBody(name='body'),
}

async function describeRouterInterfaceAttributeWithOptions(request: DescribeRouterInterfaceAttributeRequest, runtime: Util.RuntimeOptions): DescribeRouterInterfaceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouterInterfaceAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRouterInterfaceAttribute(request: DescribeRouterInterfaceAttributeRequest): DescribeRouterInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouterInterfaceAttributeWithOptions(request, runtime);
}

model DescribeRouterInterfacesRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='Filter.1.Status'),
      value?: [ string ](name='Value', example='Filter.1.Active 1'),
    }
  ](name='Filter'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRouterInterfacesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='C7F6FCBD-F9CC-4501-8EF3-CDC9577CAE45'),
  routerInterfaceSet?: {
    routerInterfaceType?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-shanghaiSZ-****'),
      bandwidth?: int32(name='Bandwidth', example='10'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='PayByTraffic'),
      connectedTime?: string(name='ConnectedTime', example='2021-06-08T12:20:55'),
      creationTime?: string(name='CreationTime', example='2021-06-08T12:20:55'),
      crossBorder?: boolean(name='CrossBorder', example='false'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime', example='2021-06-08T12:20:55'),
      fastLinkMode?: boolean(name='FastLinkMode', example='false'),
      hasReservationData?: string(name='HasReservationData', example='false'),
      hcRate?: int32(name='HcRate', example='1'),
      hcThreshold?: int32(name='HcThreshold', example='2'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp', example='116.62.XX.XX'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp', example='116.62.XX.XX'),
      ipv6Status?: string(name='Ipv6Status', example='on'),
      name?: string(name='Name', example='test'),
      oppositeAccessPointId?: string(name='OppositeAccessPointId', example='ap-cn-shanghaiSZ-****'),
      oppositeBandwidth?: int32(name='OppositeBandwidth', example='12'),
      oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus', example='Normal'),
      oppositeInterfaceId?: string(name='OppositeInterfaceId', example='ri-bp1itx13bwe6f2wfh****'),
      oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', example='271598332402530847'),
      oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec', example='Large'),
      oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus', example='Normal'),
      oppositeRegionId?: string(name='OppositeRegionId', example='cn-shanghai'),
      oppositeRouterId?: string(name='OppositeRouterId', example='vrt-bp1d3bxtdv68tfd7g****'),
      oppositeRouterType?: string(name='OppositeRouterType', example='VRouter'),
      oppositeVpcInstanceId?: string(name='OppositeVpcInstanceId', example='vpc-bp1qpo0kug3a20qqe****'),
      reservationActiveTime?: string(name='ReservationActiveTime', example='2021-03-11T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', example='10'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', example='RENEWCHANGE'),
      role?: string(name='Role', example='InitiatingSide'),
      routerId?: string(name='RouterId', example='vrt-bp1d3bxtdv68tfd7g****'),
      routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2zenfgfpyu3v93koa****'),
      routerType?: string(name='RouterType', example='VRouter'),
      spec?: string(name='Spec', example='Large'),
      status?: string(name='Status', example='active'),
      vpcInstanceId?: string(name='VpcInstanceId', example='vpc-2ze3tq4uxhysg717x****'),
    }
  ](name='RouterInterfaceType')
  }(name='RouterInterfaceSet'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeRouterInterfacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRouterInterfacesResponseBody(name='body'),
}

async function describeRouterInterfacesWithOptions(request: DescribeRouterInterfacesRequest, runtime: Util.RuntimeOptions): DescribeRouterInterfacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.includeReservationData)) {
    query['IncludeReservationData'] = request.includeReservationData;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouterInterfaces',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRouterInterfaces(request: DescribeRouterInterfacesRequest): DescribeRouterInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouterInterfacesWithOptions(request, runtime);
}

model DescribeServerRelatedGlobalAccelerationInstancesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serverId?: string(name='ServerId', example='i-12s3sdf****'),
  serverType?: string(name='ServerType', example='EcsInstance'),
}

model DescribeServerRelatedGlobalAccelerationInstancesResponseBody = {
  globalAccelerationInstances?: {
    globalAccelerationInstance?: [ 
    {
      globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-t4nku6vv9****'),
      ipAddress?: string(name='IpAddress', example='12.34.56.78'),
      regionId?: string(name='RegionId', example='ap-southeast-1'),
      serverIpAddress?: string(name='ServerIpAddress', example='172.24.52.234'),
    }
  ](name='GlobalAccelerationInstance')
  }(name='GlobalAccelerationInstances'),
  requestId?: string(name='RequestId', example='A8252014-D8DE-4D85-AF35-AFEXXXXXXX'),
}

model DescribeServerRelatedGlobalAccelerationInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServerRelatedGlobalAccelerationInstancesResponseBody(name='body'),
}

async function describeServerRelatedGlobalAccelerationInstancesWithOptions(request: DescribeServerRelatedGlobalAccelerationInstancesRequest, runtime: Util.RuntimeOptions): DescribeServerRelatedGlobalAccelerationInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.serverType)) {
    query['ServerType'] = request.serverType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServerRelatedGlobalAccelerationInstances',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServerRelatedGlobalAccelerationInstances(request: DescribeServerRelatedGlobalAccelerationInstancesRequest): DescribeServerRelatedGlobalAccelerationInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServerRelatedGlobalAccelerationInstancesWithOptions(request, runtime);
}

model DescribeSnatTableEntriesRequest {
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snatEntryId?: string(name='SnatEntryId', example='snat-8vbae8uqh7rjpk7d2****'),
  snatEntryName?: string(name='SnatEntryName', example='SnatEntry-1'),
  snatIp?: string(name='SnatIp', example='116.22.XX.XX'),
  snatTableId?: string(name='SnatTableId', example='stb-8vbczigrhop8x5u3t****'),
  sourceCIDR?: string(name='SourceCIDR', example='116.22.XX.XX/24'),
  sourceVSwitchId?: string(name='SourceVSwitchId', example='vsw-3xbjkhjshjdf****'),
}

model DescribeSnatTableEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='6D7E89B1-1C5B-412B-8585-4908E222EED5'),
  snatTableEntries?: {
    snatTableEntry?: [ 
    {
      snatEntryId?: string(name='SnatEntryId', example='snat-kmd6nv8fy****'),
      snatEntryName?: string(name='SnatEntryName', example='SnatEntry-1'),
      snatIp?: string(name='SnatIp', example='116.22.XX.XX'),
      snatTableId?: string(name='SnatTableId', example='stb-gz3r3odawdgffde****'),
      sourceCIDR?: string(name='SourceCIDR', example='116.22.XX.XX/24'),
      sourceVSwitchId?: string(name='SourceVSwitchId', example='vsw-3xbdsffvfgdfds****'),
      status?: string(name='Status', example='Pending'),
    }
  ](name='SnatTableEntry')
  }(name='SnatTableEntries'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeSnatTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnatTableEntriesResponseBody(name='body'),
}

async function describeSnatTableEntriesWithOptions(request: DescribeSnatTableEntriesRequest, runtime: Util.RuntimeOptions): DescribeSnatTableEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  if (!Util.isUnset(request.snatEntryName)) {
    query['SnatEntryName'] = request.snatEntryName;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  if (!Util.isUnset(request.snatTableId)) {
    query['SnatTableId'] = request.snatTableId;
  }
  if (!Util.isUnset(request.sourceCIDR)) {
    query['SourceCIDR'] = request.sourceCIDR;
  }
  if (!Util.isUnset(request.sourceVSwitchId)) {
    query['SourceVSwitchId'] = request.sourceVSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnatTableEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnatTableEntries(request: DescribeSnatTableEntriesRequest): DescribeSnatTableEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnatTableEntriesWithOptions(request, runtime);
}

model DescribeSslVpnClientCertRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp17r58rjf5r1gjyr****'),
}

model DescribeSslVpnClientCertResponseBody = {
  caCert?: string(name='CaCert'),
  clientCert?: string(name='ClientCert'),
  clientConfig?: string(name='ClientConfig'),
  clientKey?: string(name='ClientKey'),
  createTime?: long(name='CreateTime', example='1552550980000'),
  endTime?: long(name='EndTime', example='1647158980000'),
  name?: string(name='Name', example='nametest'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp13k5mp4tg8v3z9b****'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp155e9yclsg1xgq4****'),
  status?: string(name='Status', example='normal'),
}

model DescribeSslVpnClientCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSslVpnClientCertResponseBody(name='body'),
}

async function describeSslVpnClientCertWithOptions(request: DescribeSslVpnClientCertRequest, runtime: Util.RuntimeOptions): DescribeSslVpnClientCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnClientCertId)) {
    query['SslVpnClientCertId'] = request.sslVpnClientCertId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSslVpnClientCert',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSslVpnClientCert(request: DescribeSslVpnClientCertRequest): DescribeSslVpnClientCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSslVpnClientCertWithOptions(request, runtime);
}

model DescribeSslVpnClientCertsRequest {
  name?: string(name='Name', example='cert1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osr****'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
}

model DescribeSslVpnClientCertsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  sslVpnClientCertKeys?: {
    sslVpnClientCertKey?: [ 
    {
      createTime?: long(name='CreateTime', example='1492747187000'),
      endTime?: long(name='EndTime', example='1494966335000'),
      name?: string(name='Name', example='cert1'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osr****'),
      sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
      status?: string(name='Status', example='normal'),
    }
  ](name='SslVpnClientCertKey')
  }(name='SslVpnClientCertKeys'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeSslVpnClientCertsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSslVpnClientCertsResponseBody(name='body'),
}

async function describeSslVpnClientCertsWithOptions(request: DescribeSslVpnClientCertsRequest, runtime: Util.RuntimeOptions): DescribeSslVpnClientCertsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnClientCertId)) {
    query['SslVpnClientCertId'] = request.sslVpnClientCertId;
  }
  if (!Util.isUnset(request.sslVpnServerId)) {
    query['SslVpnServerId'] = request.sslVpnServerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSslVpnClientCerts',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSslVpnClientCerts(request: DescribeSslVpnClientCertsRequest): DescribeSslVpnClientCertsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSslVpnClientCertsWithOptions(request, runtime);
}

model DescribeSslVpnServersRequest {
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp15j3du13gq1dgey****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1on0xae9d771ggi****'),
}

model DescribeSslVpnServersResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='D350187B-EA41-4577-950B-95434C8302E1'),
  sslVpnServers?: {
    sslVpnServer?: [ 
    {
      cipher?: string(name='Cipher', example='AES-128-CBC'),
      clientIpPool?: string(name='ClientIpPool', example='10.10.1.0/24'),
      compress?: boolean(name='Compress', example='false'),
      connections?: int32(name='Connections', example='0'),
      createTime?: long(name='CreateTime', example='1613800884000'),
      enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', example='true'),
      IDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-****'),
      IDaaSRegionId?: string(name='IDaaSRegionId', example='cn-hangzhou'),
      internetIp?: string(name='InternetIp', example='47.5.XX.XX'),
      localSubnet?: string(name='LocalSubnet', example='192.168.0.0/24'),
      maxConnections?: int32(name='MaxConnections', example='5'),
      name?: string(name='Name', example='test'),
      port?: int32(name='Port', example='1194'),
      proto?: string(name='Proto', example='UDP'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp15j3du13gq1dgey****'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1on0xae9d771ggi****'),
    }
  ](name='SslVpnServer')
  }(name='SslVpnServers'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeSslVpnServersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSslVpnServersResponseBody(name='body'),
}

async function describeSslVpnServersWithOptions(request: DescribeSslVpnServersRequest, runtime: Util.RuntimeOptions): DescribeSslVpnServersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnServerId)) {
    query['SslVpnServerId'] = request.sslVpnServerId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSslVpnServers',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSslVpnServers(request: DescribeSslVpnServersRequest): DescribeSslVpnServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSslVpnServersWithOptions(request, runtime);
}

model DescribeTagKeysRequest {
  keyword?: string(name='Keyword', example='keyword'),
  maxResult?: int32(name='MaxResult', example='50'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='VPC'),
}

model DescribeTagKeysResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
  tagKeys?: {
    tagKey?: [ 
    {
      tagKey?: string(name='TagKey', example='FinanceDept'),
      type?: string(name='Type', example='Custom'),
    }
  ](name='TagKey')
  }(name='TagKeys'),
}

model DescribeTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagKeysResponseBody(name='body'),
}

async function describeTagKeysWithOptions(request: DescribeTagKeysRequest, runtime: Util.RuntimeOptions): DescribeTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTagKeys',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagKeysWithOptions(request, runtime);
}

model DescribeTagKeysForExpressConnectRequest {
  keyword?: string(name='Keyword', example='keyword'),
  maxResult?: int32(name='MaxResult', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='PHYSICALCONNECTION'),
}

model DescribeTagKeysForExpressConnectResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  tagKeys?: {
    tagKey?: [ 
    {
      tagKey?: string(name='TagKey', example='FinanceDept'),
      type?: string(name='Type', example='PHYSICALCONNECTION'),
    }
  ](name='TagKey')
  }(name='TagKeys'),
}

model DescribeTagKeysForExpressConnectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagKeysForExpressConnectResponseBody(name='body'),
}

async function describeTagKeysForExpressConnectWithOptions(request: DescribeTagKeysForExpressConnectRequest, runtime: Util.RuntimeOptions): DescribeTagKeysForExpressConnectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTagKeysForExpressConnect',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTagKeysForExpressConnect(request: DescribeTagKeysForExpressConnectRequest): DescribeTagKeysForExpressConnectResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagKeysForExpressConnectWithOptions(request, runtime);
}

model DescribeTagsRequest {
  maxResult?: int32(name='MaxResult', example='50'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='VPC'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag'),
}

model DescribeTagsResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
  tagResources?: {
    tagResource?: [ 
    {
      tagKey?: string(name='TagKey', example='FinanceDept'),
      tagValue?: string(name='TagValue', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeVRoutersRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  VRouterId?: string(name='VRouterId', example='vrt-bp1lhl0taikrteen****'),
}

model DescribeVRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  totalCount?: int32(name='TotalCount', example='1'),
  VRouters?: {
    VRouter?: [ 
    {
      creationTime?: string(name='CreationTime', example='2018-03-22T07:46:20Z'),
      description?: string(name='Description', example='abc'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      routeTableIds?: {
        routeTableId?: [ string ](name='RouteTableId')
      }(name='RouteTableIds'),
      VRouterId?: string(name='VRouterId', example='vrt-rj98khsezfqpjrxmv****'),
      VRouterName?: string(name='VRouterName', example='doctest'),
      vpcId?: string(name='VpcId', example='vpc-rj905wotv6y030t1****'),
    }
  ](name='VRouter')
  }(name='VRouters'),
}

model DescribeVRoutersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVRoutersResponseBody(name='body'),
}

async function describeVRoutersWithOptions(request: DescribeVRoutersRequest, runtime: Util.RuntimeOptions): DescribeVRoutersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.VRouterId)) {
    query['VRouterId'] = request.VRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVRouters',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVRouters(request: DescribeVRoutersRequest): DescribeVRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVRoutersWithOptions(request, runtime);
}

model DescribeVSwitchAttributesRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25naue4g****'),
}

model DescribeVSwitchAttributesResponseBody = {
  availableIpAddressCount?: long(name='AvailableIpAddressCount', example='12'),
  cidrBlock?: string(name='CidrBlock', example='192.168.0.1/24'),
  creationTime?: string(name='CreationTime', example='2021-08-22T10:40:25Z'),
  description?: string(name='Description', example='abc'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:3c5:44e::/64'),
  isDefault?: boolean(name='IsDefault', example='false'),
  networkAclId?: string(name='NetworkAclId', example='1'),
  ownerId?: long(name='OwnerId', example='287683832402436789'),
  requestId?: string(name='RequestId', example='7B48B4B9-1EAD-469F-B488-594DAB4B6A1A'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
  routeTable?: {
    routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdv****'),
    routeTableType?: string(name='RouteTableType', example='System'),
  }(name='RouteTable'),
  status?: string(name='Status', example='Pending'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25b7pv15t****'),
  vSwitchName?: string(name='VSwitchName', example='test'),
  vpcId?: string(name='VpcId', example='vpc-257gq642n****'),
  zoneId?: string(name='ZoneId', example='cn-beijing-a'),
}

model DescribeVSwitchAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVSwitchAttributesResponseBody(name='body'),
}

async function describeVSwitchAttributesWithOptions(request: DescribeVSwitchAttributesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVSwitchAttributes',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVSwitchAttributes(request: DescribeVSwitchAttributesRequest): DescribeVSwitchAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchAttributesWithOptions(request, runtime);
}

model DescribeVSwitchesRequest {
  dryRun?: boolean(name='DryRun', example='true'),
  isDefault?: boolean(name='IsDefault', example='true'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-23dscddcffvf3****'),
  vSwitchName?: string(name='VSwitchName', example='vSwitch'),
  vSwitchOwnerId?: long(name='VSwitchOwnerId', example='2546073170691****'),
  vpcId?: string(name='VpcId', example='vpc-25cdvfeq58pl****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-d'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9A572171-4E27-40D1-BD36-D26C9E71E29E'),
  totalCount?: int32(name='TotalCount', example='1'),
  vSwitches?: {
    vSwitch?: [ 
    {
      availableIpAddressCount?: long(name='AvailableIpAddressCount', example='1'),
      cidrBlock?: string(name='CidrBlock', example='172.16.0.0/24'),
      creationTime?: string(name='CreationTime', example='2022-01-18T12:43:57Z'),
      description?: string(name='Description', example='VSwitchDescription'),
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:4002:10c4:4e03::/64'),
      isDefault?: boolean(name='IsDefault', example='true'),
      networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spzasx****'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
      routeTable?: {
        routeTableId?: string(name='RouteTableId', example='vrt-bp145q7glnuzdv****'),
        routeTableType?: string(name='RouteTableType', example='System'),
      }(name='RouteTable'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='department'),
          value?: string(name='Value', example='dev'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', example='vsw-25bcdxs7pv1****'),
      vSwitchName?: string(name='VSwitchName', example='vSwitch'),
      vpcId?: string(name='VpcId', example='vpc-257gcdcdq64****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-d'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vSwitchName)) {
    query['VSwitchName'] = request.vSwitchName;
  }
  if (!Util.isUnset(request.vSwitchOwnerId)) {
    query['VSwitchOwnerId'] = request.vSwitchOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVSwitches',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchesWithOptions(request, runtime);
}

model DescribeVbrHaRequest {
  clientToken?: string(name='ClientToken', example='CBCE910E-D396-4944-8****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrHaId?: string(name='VbrHaId', example='vbrha-sa1sxheuxtd98****'),
  vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****'),
}

model DescribeVbrHaResponseBody = {
  creationTime?: string(name='CreationTime', example='2021-06-08T12:20:55'),
  description?: string(name='Description', example='desc'),
  name?: string(name='Name', example='VBRHa'),
  peerVbrId?: string(name='PeerVbrId', example='vbr-bp12mw1f8k3jgygk9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  status?: string(name='Status', example='Active'),
  vbrHaId?: string(name='VbrHaId', example='vbrha-sa1sxheuxtd98****'),
  vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****'),
}

model DescribeVbrHaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVbrHaResponseBody(name='body'),
}

async function describeVbrHaWithOptions(request: DescribeVbrHaRequest, runtime: Util.RuntimeOptions): DescribeVbrHaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrHaId)) {
    query['VbrHaId'] = request.vbrHaId;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVbrHa',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVbrHa(request: DescribeVbrHaRequest): DescribeVbrHaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVbrHaWithOptions(request, runtime);
}

model DescribeVcoRouteEntriesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  ownerAccount?: string(name='OwnerAccount'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntryType?: string(name='RouteEntryType', example='custom'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
}

model DescribeVcoRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E18980E8-C8C2-31BD-8156-AE2BBDEC87E1'),
  totalCount?: int32(name='TotalCount', example='1'),
  vcoRouteEntries?: [ 
    {
      asPath?: string(name='AsPath', example='[12000]'),
      community?: string(name='Community', example='65535:65510'),
      createTime?: long(name='CreateTime', example='1658217008000'),
      nextHop?: string(name='NextHop', example='vco-p0w2jpkhi2eeop6q6****'),
      routeDest?: string(name='RouteDest', example='192.168.10.0/24'),
      routeEntryType?: string(name='RouteEntryType', example='custom'),
      source?: string(name='Source', example='CLOUD'),
      state?: string(name='State', example='published'),
      vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
      weight?: int32(name='Weight', example='100'),
    }
  ](name='VcoRouteEntries'),
}

model DescribeVcoRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVcoRouteEntriesResponseBody(name='body'),
}

async function describeVcoRouteEntriesWithOptions(request: DescribeVcoRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeVcoRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntryType)) {
    query['RouteEntryType'] = request.routeEntryType;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVcoRouteEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVcoRouteEntries(request: DescribeVcoRouteEntriesRequest): DescribeVcoRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVcoRouteEntriesWithOptions(request, runtime);
}

model DescribeVirtualBorderRoutersRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='Status'),
      value?: [ string ](name='Value', example='Active'),
    }
  ](name='Filter'),
  includeCrossAccountVbr?: boolean(name='IncludeCrossAccountVbr', example='false'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeVirtualBorderRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
  totalCount?: int32(name='TotalCount', example='1'),
  virtualBorderRouterSet?: {
    virtualBorderRouterType?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-kojok1x****'),
      activationTime?: string(name='ActivationTime', example='2021-06-08T12:20:55'),
      associatedCens?: {
        associatedCen?: [ 
        {
          cenId?: string(name='CenId', example='cen-kojok19xxx****'),
          cenOwnerId?: long(name='CenOwnerId', example='1688000000000****'),
          cenStatus?: string(name='CenStatus', example='Attached'),
        }
      ](name='AssociatedCen')
      }(name='AssociatedCens'),
      associatedPhysicalConnections?: {
        associatedPhysicalConnection?: [ 
        {
          circuitCode?: string(name='CircuitCode', example='longtel0**'),
          enableIpv6?: boolean(name='EnableIpv6', example='true'),
          localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX'),
          localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
          peerGatewayIp?: string(name='PeerGatewayIp', example='116.62.XX.XX'),
          peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
          peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56'),
          peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.252'),
          physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus', example='Normal'),
          physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjzm7****'),
          physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid', example='12345678****'),
          physicalConnectionStatus?: string(name='PhysicalConnectionStatus', example='Enabled'),
          status?: string(name='Status', example='active'),
          vlanId?: string(name='VlanId', example='0'),
          vlanInterfaceId?: string(name='VlanInterfaceId', example='ri-kojok19x3j0q6k****'),
        }
      ](name='AssociatedPhysicalConnection')
      }(name='AssociatedPhysicalConnections'),
      bandwidth?: int32(name='Bandwidth'),
      circuitCode?: string(name='CircuitCode', example='longtel0****'),
      cloudBoxInstanceId?: string(name='CloudBoxInstanceId', example='cb-****'),
      creationTime?: string(name='CreationTime', example='2020-06-08T12:20:55'),
      description?: string(name='Description', example='desc'),
      detectMultiplier?: long(name='DetectMultiplier', example='3'),
      eccId?: string(name='EccId', example='ecc-h****'),
      enableIpv6?: boolean(name='EnableIpv6', example='false'),
      localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX'),
      localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      minRxInterval?: long(name='MinRxInterval', example='300'),
      minTxInterval?: long(name='MinTxInterval', example='300'),
      name?: string(name='Name', example='test'),
      PConnVbrChargeType?: string(name='PConnVbrChargeType', example='PrePaid'),
      PConnVbrExpireTime?: string(name='PConnVbrExpireTime', example='2021-06-08T12:20:55'),
      peerGatewayIp?: string(name='PeerGatewayIp', example='192.168.XX.XX'),
      peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2000:1234:0:a000::/55'),
      peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.252'),
      physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus', example='Normal'),
      physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjzm7x****'),
      physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid', example='1688000000000****'),
      physicalConnectionStatus?: string(name='PhysicalConnectionStatus', example='Normal'),
      recoveryTime?: string(name='RecoveryTime', example='2021-05-08T12:20:55'),
      routeTableId?: string(name='RouteTableId', example='rtb-bp1****'),
      status?: string(name='Status', example='active'),
      terminationTime?: string(name='TerminationTime', example='2021-06-08T12:20:55'),
      type?: string(name='Type', example='pconnVBR'),
      vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****'),
      vlanId?: int32(name='VlanId', example='10'),
      vlanInterfaceId?: string(name='VlanInterfaceId', example='ri-2zeo3xzyf38r4xx****'),
    }
  ](name='VirtualBorderRouterType')
  }(name='VirtualBorderRouterSet'),
}

model DescribeVirtualBorderRoutersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVirtualBorderRoutersResponseBody(name='body'),
}

async function describeVirtualBorderRoutersWithOptions(request: DescribeVirtualBorderRoutersRequest, runtime: Util.RuntimeOptions): DescribeVirtualBorderRoutersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.includeCrossAccountVbr)) {
    query['IncludeCrossAccountVbr'] = request.includeCrossAccountVbr;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualBorderRouters',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualBorderRouters(request: DescribeVirtualBorderRoutersRequest): DescribeVirtualBorderRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualBorderRoutersWithOptions(request, runtime);
}

model DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='Status'),
      value?: [ string ](name='Value', example='Active'),
    }
  ](name='Filter', description='25425'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfj****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='7C5AE8B3-A2D8-428D-A2FF-93A225C0821E'),
  totalCount?: int32(name='TotalCount', example='1'),
  virtualBorderRouterForPhysicalConnectionSet?: {
    virtualBorderRouterForPhysicalConnectionType?: [ 
    {
      activationTime?: string(name='ActivationTime', example='2021-06-08T12:20:55'),
      bandwidth?: string(name='Bandwidth', example='10'),
      bandwidthStatus?: string(name='BandwidthStatus', example='Active'),
      circuitCode?: string(name='CircuitCode', example='longtel0**'),
      creationTime?: string(name='CreationTime', example='2021-06-08T12:20:55'),
      eccId?: string(name='EccId', example='ecc-sjghe****'),
      enableIpv6?: boolean(name='EnableIpv6', example='true'),
      localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.X'),
      localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='ipv6bw-uf6hcyzu65v98v3du****'),
      PConnVbrBussinessStatus?: string(name='PConnVbrBussinessStatus', example='Normal'),
      PConnVbrChargeType?: string(name='PConnVbrChargeType', example='PrePaid'),
      PConnVbrExpireTime?: string(name='PConnVbrExpireTime', example='2021-06-10T12:20:55'),
      peerGatewayIp?: string(name='PeerGatewayIp', example='162.62.XX.XX'),
      peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56'),
      peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.0'),
      recoveryTime?: string(name='RecoveryTime', example='2021-06-08T12:20:55'),
      status?: string(name='Status', example='Active'),
      terminationTime?: string(name='TerminationTime', example='2021-06-07T12:20:55'),
      type?: string(name='Type', example='pconnVBR'),
      vbrId?: string(name='VbrId', example='vbr-bp16ksp61j7e0tk****'),
      vbrOwnerUid?: long(name='VbrOwnerUid', example='253460731706911258'),
      vlanId?: int32(name='VlanId', example='1678'),
    }
  ](name='VirtualBorderRouterForPhysicalConnectionType')
  }(name='VirtualBorderRouterForPhysicalConnectionSet'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody(name='body'),
}

async function describeVirtualBorderRoutersForPhysicalConnectionWithOptions(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest, runtime: Util.RuntimeOptions): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualBorderRoutersForPhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualBorderRoutersForPhysicalConnection(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualBorderRoutersForPhysicalConnectionWithOptions(request, runtime);
}

model DescribeVpcAttributeRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  isDefault?: boolean(name='IsDefault', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-bp18sth14qii3pnv****'),
}

model DescribeVpcAttributeResponseBody = {
  associatedCens?: {
    associatedCen?: [ 
    {
      cenId?: string(name='CenId', example='cen-7qthudw0ll6jmc****'),
      cenOwnerId?: long(name='CenOwnerId', example='283117732402483989'),
      cenStatus?: string(name='CenStatus', example='Attached'),
    }
  ](name='AssociatedCen')
  }(name='AssociatedCens'),
  cidrBlock?: string(name='CidrBlock', example='192.168.0.0/16'),
  classicLinkEnabled?: boolean(name='ClassicLinkEnabled', example='false'),
  cloudResources?: {
    cloudResourceSetType?: [ 
    {
      resourceCount?: int32(name='ResourceCount', example='1'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
    }
  ](name='CloudResourceSetType')
  }(name='CloudResources'),
  creationTime?: string(name='CreationTime', example='2021-10-16T07:31:09Z'),
  description?: string(name='Description', example='VPC'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dhcpOptionsSetStatus?: string(name='DhcpOptionsSetStatus', example='Available'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
  ipv6CidrBlocks?: {
    ipv6CidrBlock?: [ 
    {
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:6a::/56'),
      ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
    }
  ](name='Ipv6CidrBlock')
  }(name='Ipv6CidrBlocks'),
  isDefault?: boolean(name='IsDefault', example='false'),
  ownerId?: long(name='OwnerId', example='283117732402483989'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='7486AE4A-129D-43DB-A714-2432C074BA04'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazbvgb4ph****'),
  secondaryCidrBlocks?: {
    secondaryCidrBlock?: [ string ](name='SecondaryCidrBlock')
  }(name='SecondaryCidrBlocks'),
  status?: string(name='Status', example='Available'),
  supportIpv4Gateway?: boolean(name='SupportIpv4Gateway', example='true'),
  userCidrs?: {
    userCidr?: [ string ](name='UserCidr')
  }(name='UserCidrs'),
  VRouterId?: string(name='VRouterId', example='vrt-bp1jso6ng1at0ajsc****'),
  vSwitchIds?: {
    vSwitchId?: [ string ](name='VSwitchId')
  }(name='VSwitchIds'),
  vpcId?: string(name='VpcId', example='vpc-bp18sth14qii3pnvo****'),
  vpcName?: string(name='VpcName', example='doctest2'),
}

model DescribeVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcAttributeResponseBody(name='body'),
}

async function describeVpcAttributeWithOptions(request: DescribeVpcAttributeRequest, runtime: Util.RuntimeOptions): DescribeVpcAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpcAttribute(request: DescribeVpcAttributeRequest): DescribeVpcAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcAttributeWithOptions(request, runtime);
}

model DescribeVpcsRequest {
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dryRun?: boolean(name='DryRun', example='false'),
  isDefault?: boolean(name='IsDefault', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxvfvazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-bp1b1xjllp3ve5yze****'),
  vpcName?: string(name='VpcName', example='Vpc-1'),
  vpcOwnerId?: long(name='VpcOwnerId', example='253460731706911258'),
}

model DescribeVpcsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='C6532AA8-D0F7-497F-A8EE-094126D441F5'),
  totalCount?: int32(name='TotalCount', example='2'),
  vpcs?: {
    vpc?: [ 
    {
      cenStatus?: string(name='CenStatus', example='Attached'),
      cidrBlock?: string(name='CidrBlock', example='192.168.0.0/16'),
      creationTime?: string(name='CreationTime', example='2021-04-18T15:02:37Z'),
      description?: string(name='Description', example='This is my VPC.'),
      dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
      dhcpOptionsSetStatus?: string(name='DhcpOptionsSetStatus', example='Available'),
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
      ipv6CidrBlocks?: {
        ipv6CidrBlock?: [ 
        {
          ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
          ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
        }
      ](name='Ipv6CidrBlock')
      }(name='Ipv6CidrBlocks'),
      isDefault?: boolean(name='IsDefault', example='false'),
      natGatewayIds?: {
        natGatewayIds?: [ string ](name='NatGatewayIds')
      }(name='NatGatewayIds'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      routerTableIds?: {
        routerTableIds?: [ string ](name='RouterTableIds')
      }(name='RouterTableIds'),
      secondaryCidrBlocks?: {
        secondaryCidrBlock?: [ string ](name='SecondaryCidrBlock')
      }(name='SecondaryCidrBlocks'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='env'),
          value?: string(name='Value', example='internal'),
        }
      ](name='Tag')
      }(name='Tags'),
      userCidrs?: {
        userCidr?: [ string ](name='UserCidr')
      }(name='UserCidrs'),
      VRouterId?: string(name='VRouterId', example='vrt-bp1jcg5cmxjbl9xgc****'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
      vpcId?: string(name='VpcId', example='vpc-bp1qpo0kug3a20qqe****'),
      vpcName?: string(name='VpcName', example='vpc1'),
    }
  ](name='Vpc')
  }(name='Vpcs'),
}

model DescribeVpcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcsResponseBody(name='body'),
}

async function describeVpcsWithOptions(request: DescribeVpcsRequest, runtime: Util.RuntimeOptions): DescribeVpcsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dhcpOptionsSetId)) {
    query['DhcpOptionsSetId'] = request.dhcpOptionsSetId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcName)) {
    query['VpcName'] = request.vpcName;
  }
  if (!Util.isUnset(request.vpcOwnerId)) {
    query['VpcOwnerId'] = request.vpcOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcs',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcsWithOptions(request, runtime);
}

model DescribeVpnAttachmentsRequest {
  attachType?: string(name='AttachType', example='CEN'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
}

model DescribeVpnAttachmentsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9F0725BB-186A-3564-91C3-AAE48042F853'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpnAttachments?: [ 
    {
      attachType?: string(name='AttachType', example='CEN'),
      crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', example='false'),
      description?: string(name='Description', example='desctest'),
      instanceId?: string(name='InstanceId', example='vco-p0w2jpkhi2eeop6q6****'),
      name?: string(name='Name', example='nametest1'),
      transitRouterId?: string(name='TransitRouterId', example='tr-p0wkh4yryb1dnanqw****'),
      transitRouterName?: string(name='TransitRouterName', example='nametest2'),
    }
  ](name='VpnAttachments'),
}

model DescribeVpnAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnAttachmentsResponseBody(name='body'),
}

async function describeVpnAttachmentsWithOptions(request: DescribeVpnAttachmentsRequest, runtime: Util.RuntimeOptions): DescribeVpnAttachmentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attachType)) {
    query['AttachType'] = request.attachType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnAttachments',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnAttachments(request: DescribeVpnAttachmentsRequest): DescribeVpnAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnAttachmentsWithOptions(request, runtime);
}

model DescribeVpnConnectionRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****'),
}

model DescribeVpnConnectionResponseBody = {
  attachInstanceId?: string(name='AttachInstanceId', example='cen-lxxpbpalc776qz****'),
  attachType?: string(name='AttachType', example='CEN'),
  createTime?: long(name='CreateTime', example='1492753817000'),
  crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', example='false'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1mvj4g9kogwwcxk****'),
  effectImmediately?: boolean(name='EffectImmediately', example='true'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', example='86400'),
    ikeMode?: string(name='IkeMode', example='main'),
    ikePfs?: string(name='IkePfs', example='group2'),
    ikeVersion?: string(name='IkeVersion', example='ikev1'),
    localId?: string(name='LocalId', example='116.28.XX.XX'),
    psk?: string(name='Psk', example='pgw6dy****'),
    remoteId?: string(name='RemoteId', example='139.34.XX.XX'),
  }(name='IkeConfig'),
  internetIp?: string(name='InternetIp', example='47.XX.XX.162'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
    ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', example='group2'),
  }(name='IpsecConfig'),
  localSubnet?: string(name='LocalSubnet', example='10.0.0.0/8'),
  name?: string(name='Name', example='ipsec1'),
  networkType?: string(name='NetworkType', example='public'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW****'),
  remoteSubnet?: string(name='RemoteSubnet', example='192.168.0.0/16'),
  requestId?: string(name='RequestId', example='F2310D45-BCF6-4E2E-9082-B4503844BA4C'),
  spec?: string(name='Spec', example='1000M'),
  state?: string(name='State', example='attached'),
  status?: string(name='Status', example='ike_sa_not_established'),
  transitRouterId?: string(name='TransitRouterId', example='tr-p0we2edef9qr44a85****'),
  transitRouterName?: string(name='TransitRouterName', example='nametest'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', example='10.0.0.1'),
    enable?: string(name='Enable', example='true'),
    interval?: int32(name='Interval', example='3'),
    policy?: string(name='Policy', example='revoke_route'),
    retry?: int32(name='Retry', example='3'),
    sip?: string(name='Sip', example='192.168.1.1'),
    status?: string(name='Status', example='failed'),
  }(name='VcoHealthCheck'),
  vpnBgpConfig?: {
    authKey?: string(name='AuthKey', example='AuthKey****'),
    enableBgp?: string(name='EnableBgp', example='true'),
    localAsn?: long(name='LocalAsn', example='65531'),
    localBgpIp?: string(name='LocalBgpIp', example='169.254.11.2'),
    peerAsn?: long(name='PeerAsn', example='65530'),
    peerBgpIp?: string(name='PeerBgpIp', example='169.254.11.1'),
    status?: string(name='Status', example='success'),
    tunnelCidr?: string(name='TunnelCidr', example='169.254.11.0/30'),
  }(name='VpnBgpConfig'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
  zoneNo?: string(name='ZoneNo', example='ap-southeast-2b'),
}

model DescribeVpnConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnConnectionResponseBody(name='body'),
}

async function describeVpnConnectionWithOptions(request: DescribeVpnConnectionRequest, runtime: Util.RuntimeOptions): DescribeVpnConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnConnection(request: DescribeVpnConnectionRequest): DescribeVpnConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnConnectionWithOptions(request, runtime);
}

model DescribeVpnConnectionLogsRequest {
  from?: int32(name='From', example='1671003744'),
  minutePeriod?: int32(name='MinutePeriod', example='10'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  to?: int32(name='To', example='1671004344'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-m5evqnds4y459flt3****'),
}

model DescribeVpnConnectionLogsResponseBody = {
  count?: int32(name='Count', example='10'),
  data?: {
    logs?: [ string ](name='Logs')
  }(name='Data'),
  isCompleted?: boolean(name='IsCompleted', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CF161502-4959-5C3B-B499-09B87BA931D9'),
}

model DescribeVpnConnectionLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnConnectionLogsResponseBody(name='body'),
}

async function describeVpnConnectionLogsWithOptions(request: DescribeVpnConnectionLogsRequest, runtime: Util.RuntimeOptions): DescribeVpnConnectionLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.minutePeriod)) {
    query['MinutePeriod'] = request.minutePeriod;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnConnectionLogs',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnConnectionLogs(request: DescribeVpnConnectionLogsRequest): DescribeVpnConnectionLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnConnectionLogsWithOptions(request, runtime);
}

model DescribeVpnConnectionsRequest {
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1mvj4g9kogw****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp10lz7aejumd****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkx****'),
}

model DescribeVpnConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='238752DC-0693-49BE-9C85-711D5691D3E5'),
  totalCount?: int32(name='TotalCount', example='2'),
  vpnConnections?: {
    vpnConnection?: [ 
    {
      attachInstanceId?: string(name='AttachInstanceId', example='cen-lxxpbpalc776qz****'),
      attachType?: string(name='AttachType', example='CEN'),
      createTime?: long(name='CreateTime', example='1492753817000'),
      crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', example='false'),
      customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1mvj4g9kogw****'),
      effectImmediately?: boolean(name='EffectImmediately', example='true'),
      enableDpd?: boolean(name='EnableDpd', example='true'),
      enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
      ikeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
        ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', example='86400'),
        ikeMode?: string(name='IkeMode', example='main'),
        ikePfs?: string(name='IkePfs', example='group2'),
        ikeVersion?: string(name='IkeVersion', example='ikev1'),
        localId?: string(name='LocalId', example='116.64.XX.XX'),
        psk?: string(name='Psk', example='pgw6dy7****'),
        remoteId?: string(name='RemoteId', example='139.17.XX.XX'),
      }(name='IkeConfig'),
      internetIp?: string(name='InternetIp', example='10.XX.XX.10'),
      ipsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
        ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
        ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', example='group2'),
      }(name='IpsecConfig'),
      localSubnet?: string(name='LocalSubnet', example='192.168.0.0/16,172.17.0.0/16'),
      name?: string(name='Name', example='nametest'),
      networkType?: string(name='NetworkType', example='public'),
      remoteCaCertificate?: string(name='RemoteCaCertificate', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
      remoteSubnet?: string(name='RemoteSubnet', example='10.0.0.0/8,172.16.0.0/16'),
      spec?: string(name='Spec', example='1000M'),
      state?: string(name='State', example='attached'),
      status?: string(name='Status', example='ipsec_sa_established'),
      transitRouterId?: string(name='TransitRouterId', example='tr-p0we2edef9qr44a85****'),
      transitRouterName?: string(name='TransitRouterName', example='nametest'),
      vcoHealthCheck?: {
        dip?: string(name='Dip', example='192.168.0.1'),
        enable?: string(name='Enable', example='true'),
        interval?: int32(name='Interval', example='2'),
        policy?: string(name='Policy', example='revoke_route'),
        retry?: int32(name='Retry', example='3'),
        sip?: string(name='Sip', example='192.168.0.50'),
        status?: string(name='Status', example='success'),
      }(name='VcoHealthCheck'),
      vpnBgpConfig?: {
        authKey?: string(name='AuthKey', example='AuthKey****'),
        localAsn?: long(name='LocalAsn', example='65531'),
        localBgpIp?: string(name='LocalBgpIp', example='169.254.10.2'),
        peerAsn?: long(name='PeerAsn', example='65530'),
        peerBgpIp?: string(name='PeerBgpIp', example='169.254.10.1'),
        status?: string(name='Status', example='success'),
        tunnelCidr?: string(name='TunnelCidr', example='169.254.10.0/30'),
      }(name='VpnBgpConfig'),
      vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp10lz7aejumd****'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm****'),
    }
  ](name='VpnConnection')
  }(name='VpnConnections'),
}

model DescribeVpnConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnConnectionsResponseBody(name='body'),
}

async function describeVpnConnectionsWithOptions(request: DescribeVpnConnectionsRequest, runtime: Util.RuntimeOptions): DescribeVpnConnectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customerGatewayId)) {
    query['CustomerGatewayId'] = request.customerGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnConnections',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnConnections(request: DescribeVpnConnectionsRequest): DescribeVpnConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnConnectionsWithOptions(request, runtime);
}

model DescribeVpnCrossAccountAuthorizationsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  ownerAccount?: string(name='OwnerAccount'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
}

model DescribeVpnCrossAccountAuthorizationsResponseBody = {
  crossAccountAuthorizations?: [ 
    {
      aliUid?: long(name='AliUid', example='1250123456123456'),
      bindInstance?: string(name='BindInstance', example='cen-vv8h0t3klfpaae****'),
      bindProduct?: string(name='BindProduct', example='CEN'),
      bindUid?: long(name='BindUid', example='1210123456123456'),
      creationTime?: long(name='CreationTime', example='1658201810000'),
      vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
    }
  ](name='CrossAccountAuthorizations'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DB04E39A-6F0C-36AC-BCA0-B6D371B90062'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeVpnCrossAccountAuthorizationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnCrossAccountAuthorizationsResponseBody(name='body'),
}

async function describeVpnCrossAccountAuthorizationsWithOptions(request: DescribeVpnCrossAccountAuthorizationsRequest, runtime: Util.RuntimeOptions): DescribeVpnCrossAccountAuthorizationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnCrossAccountAuthorizations',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnCrossAccountAuthorizations(request: DescribeVpnCrossAccountAuthorizationsRequest): DescribeVpnCrossAccountAuthorizationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnCrossAccountAuthorizationsWithOptions(request, runtime);
}

model DescribeVpnGatewayRequest {
  includeReservationData?: boolean(name='IncludeReservationData', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1r3v1xqkl0w519g****'),
}

model DescribeVpnGatewayResponseBody = {
  autoPropagate?: boolean(name='AutoPropagate', example='true'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  chargeType?: string(name='ChargeType'),
  createTime?: long(name='CreateTime', example='1495382400000'),
  description?: string(name='Description', example='vpngatewaydescription'),
  enableBgp?: boolean(name='EnableBgp', example='true'),
  endTime?: long(name='EndTime', example='1544666102000'),
  internetIp?: string(name='InternetIp', example='47.22.XX.XX'),
  ipsecVpn?: string(name='IpsecVpn', example='enable'),
  name?: string(name='Name', example='vpngatewayname'),
  networkType?: string(name='NetworkType'),
  requestId?: string(name='RequestId', example='27E4E088-8DE0-4672-BF5C-0A412389DB9E'),
  reservationData?: {
    reservationEndTime?: string(name='ReservationEndTime', example='2020-07-20T16:00:00Z'),
    reservationIpsec?: string(name='ReservationIpsec', example='enable'),
    reservationMaxConnections?: int32(name='ReservationMaxConnections', example='5'),
    reservationOrderType?: string(name='ReservationOrderType', example='TEMP_UPGRADE'),
    reservationSpec?: string(name='ReservationSpec', example='5'),
    reservationSsl?: string(name='ReservationSsl', example='enable'),
    status?: string(name='Status', example='1'),
  }(name='ReservationData'),
  spec?: string(name='Spec', example='5'),
  sslMaxConnections?: long(name='SslMaxConnections', example='5'),
  sslVpn?: string(name='SslVpn', example='enable'),
  status?: string(name='Status', example='init'),
  tag?: string(name='Tag', example='{\\"VpnEnableBgp\\":\\"true\\",\\"VpnNewImage\\":\\"true\\",\\"VpnVersion\\":\\"v1.2.4\\"}'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', example='aaa'),
      value?: string(name='Value', example='bbb'),
    }
  ](name='Tag')
  }(name='Tags'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1dmzugdikc6hdgx****'),
  vpcId?: string(name='VpcId', example='vpc-bp19m2yx1m5q0avyq****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1r3v1xqkl0w519g****'),
  vpnType?: string(name='VpnType', example='Normal'),
}

model DescribeVpnGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnGatewayResponseBody(name='body'),
}

async function describeVpnGatewayWithOptions(request: DescribeVpnGatewayRequest, runtime: Util.RuntimeOptions): DescribeVpnGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeReservationData)) {
    query['IncludeReservationData'] = request.includeReservationData;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnGateway(request: DescribeVpnGatewayRequest): DescribeVpnGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnGatewayWithOptions(request, runtime);
}

model DescribeVpnGatewaysRequest {
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', example='init'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag'),
  vpcId?: string(name='VpcId', example='vpc-bp1m3i0kn1nd4wiw9****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp17lofy9fd0dnvzv****'),
}

model DescribeVpnGatewaysResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DF11D6F6-E35A-41C3-9B20-6FC8A901FE65'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpnGateways?: {
    vpnGateway?: [ 
    {
      autoPropagate?: boolean(name='AutoPropagate', example='true'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType'),
      createTime?: long(name='CreateTime', example='1515383700000'),
      description?: string(name='Description', example='test'),
      enableBgp?: boolean(name='EnableBgp', example='true'),
      endTime?: long(name='EndTime', example='1518105600000'),
      internetIp?: string(name='InternetIp', example='47.12.XX.XX'),
      ipsecVpn?: string(name='IpsecVpn', example='enable'),
      name?: string(name='Name', example='test'),
      networkType?: string(name='NetworkType', example='public'),
      reservationData?: {
        reservationEndTime?: string(name='ReservationEndTime', example='2021-07-20T16:00:00Z'),
        reservationIpsec?: string(name='ReservationIpsec', example='enable'),
        reservationMaxConnections?: int32(name='ReservationMaxConnections', example='5'),
        reservationOrderType?: string(name='ReservationOrderType', example='TEMP_UPGRADE'),
        reservationSpec?: string(name='ReservationSpec', example='5'),
        reservationSsl?: string(name='ReservationSsl', example='enable'),
        status?: string(name='Status', example='1'),
      }(name='ReservationData'),
      spec?: string(name='Spec', example='5M'),
      sslMaxConnections?: long(name='SslMaxConnections', example='5'),
      sslVpn?: string(name='SslVpn', example='enable'),
      status?: string(name='Status', example='Active'),
      tag?: string(name='Tag', example='{\\"VpnNewImage\\":\\"true\\",\\"VpnVersion\\":\\"v1.2.2\\"}'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='FinanceDept'),
          value?: string(name='Value', example='FinanceJoshua'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp15lbk8sgtr6r5b0****'),
      vpcId?: string(name='VpcId', example='vpc-bp1m3i0kn1nd4wiw9****'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp17lofy9fd0dnvzv****'),
      vpnType?: string(name='VpnType', example='Normal'),
    }
  ](name='VpnGateway')
  }(name='VpnGateways'),
}

model DescribeVpnGatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnGatewaysResponseBody(name='body'),
}

async function describeVpnGatewaysWithOptions(request: DescribeVpnGatewaysRequest, runtime: Util.RuntimeOptions): DescribeVpnGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessStatus)) {
    query['BusinessStatus'] = request.businessStatus;
  }
  if (!Util.isUnset(request.includeReservationData)) {
    query['IncludeReservationData'] = request.includeReservationData;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnGateways',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnGateways(request: DescribeVpnGatewaysRequest): DescribeVpnGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnGatewaysWithOptions(request, runtime);
}

model DescribeVpnPbrRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-zhangjiakou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
}

model DescribeVpnPbrRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpnPbrRouteEntries?: {
    vpnPbrRouteEntry?: [ 
    {
      createTime?: long(name='CreateTime', example='1492747187000'),
      nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
      priority?: int32(name='Priority', example='10'),
      routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
      routeSource?: string(name='RouteSource', example='192.168.0.0/24'),
      state?: string(name='State', example='published'),
      vpnInstanceId?: string(name='VpnInstanceId', example='vpn-bp1a3kqjiiq9legfx****'),
      weight?: int32(name='Weight', example='0'),
    }
  ](name='VpnPbrRouteEntry')
  }(name='VpnPbrRouteEntries'),
}

model DescribeVpnPbrRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnPbrRouteEntriesResponseBody(name='body'),
}

async function describeVpnPbrRouteEntriesWithOptions(request: DescribeVpnPbrRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeVpnPbrRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnPbrRouteEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnPbrRouteEntries(request: DescribeVpnPbrRouteEntriesRequest): DescribeVpnPbrRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnPbrRouteEntriesWithOptions(request, runtime);
}

model DescribeVpnRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntryType?: string(name='RouteEntryType', example='System'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1cmw7jh1nfe43m9****'),
}

model DescribeVpnRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BF3995A6-FA4F-4C74-B90F-89ECF4BFF4D5'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpnRouteEntries?: {
    vpnRouteEntry?: [ 
    {
      asPath?: string(name='AsPath', example='65501,65001,60011'),
      community?: string(name='Community', example='65001:1000,65501:2000'),
      createTime?: long(name='CreateTime', example='1563874074000'),
      nextHop?: string(name='NextHop', example='vco-bp1tui07ob10fmuro****'),
      routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
      routeEntryType?: string(name='RouteEntryType', example='System'),
      source?: string(name='Source', example='192.168.10.0/24'),
      state?: string(name='State', example='normal'),
      vpnInstanceId?: string(name='VpnInstanceId', example='vpn-bp1cmw7jh1nfe43m9****'),
      weight?: int32(name='Weight', example='100'),
    }
  ](name='VpnRouteEntry')
  }(name='VpnRouteEntries'),
}

model DescribeVpnRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnRouteEntriesResponseBody(name='body'),
}

async function describeVpnRouteEntriesWithOptions(request: DescribeVpnRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeVpnRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntryType)) {
    query['RouteEntryType'] = request.routeEntryType;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnRouteEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnRouteEntries(request: DescribeVpnRouteEntriesRequest): DescribeVpnRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnRouteEntriesWithOptions(request, runtime);
}

model DescribeVpnSslServerLogsRequest {
  from?: int32(name='From', example='1600738962'),
  minutePeriod?: int32(name='MinutePeriod', example='10'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-m5euof6s5jy8vs5kd****'),
  to?: int32(name='To', example='1600738962'),
  vpnSslServerId?: string(name='VpnSslServerId', example='vss-bp155e9yclsg1xgq4****'),
}

model DescribeVpnSslServerLogsResponseBody = {
  count?: int32(name='Count', example='10'),
  data?: {
    logs?: [ string ](name='Logs')
  }(name='Data'),
  isCompleted?: boolean(name='IsCompleted', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DEDAC5B1-9292-5BF7-BDDF-61BA58CFB2FB'),
}

model DescribeVpnSslServerLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpnSslServerLogsResponseBody(name='body'),
}

async function describeVpnSslServerLogsWithOptions(request: DescribeVpnSslServerLogsRequest, runtime: Util.RuntimeOptions): DescribeVpnSslServerLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.minutePeriod)) {
    query['MinutePeriod'] = request.minutePeriod;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnClientCertId)) {
    query['SslVpnClientCertId'] = request.sslVpnClientCertId;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  if (!Util.isUnset(request.vpnSslServerId)) {
    query['VpnSslServerId'] = request.vpnSslServerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpnSslServerLogs',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpnSslServerLogs(request: DescribeVpnSslServerLogsRequest): DescribeVpnSslServerLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpnSslServerLogsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-cn'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneType?: string(name='ZoneType', example='AvailabilityZone'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
      zoneType?: string(name='ZoneType', example='AvailabilityZone'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneType)) {
    query['ZoneType'] = request.zoneType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachDhcpOptionsSetFromVpcRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-dfdgrgthhy****'),
}

model DetachDhcpOptionsSetFromVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DetachDhcpOptionsSetFromVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachDhcpOptionsSetFromVpcResponseBody(name='body'),
}

async function detachDhcpOptionsSetFromVpcWithOptions(request: DetachDhcpOptionsSetFromVpcRequest, runtime: Util.RuntimeOptions): DetachDhcpOptionsSetFromVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dhcpOptionsSetId)) {
    query['DhcpOptionsSetId'] = request.dhcpOptionsSetId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachDhcpOptionsSetFromVpc',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachDhcpOptionsSetFromVpc(request: DetachDhcpOptionsSetFromVpcRequest): DetachDhcpOptionsSetFromVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDhcpOptionsSetFromVpcWithOptions(request, runtime);
}

model DiagnoseVpnGatewayRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  IPsecExtendInfo?: string(name='IPsecExtendInfo', example='{"PrivateSourceIp":"192.168.1.1","PrivateDestinationIp":"192.168.0.1"}'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceId?: string(name='ResourceId', example='vco-uf66xniofskqtuoz1****'),
  resourceType?: string(name='ResourceType', example='IPsec'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-m5efhj0k1p47ctuhl****'),
}

model DiagnoseVpnGatewayResponseBody = {
  diagnoseId?: string(name='DiagnoseId', example='vpndgn-uf6kuxbe3iv028k3s****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DiagnoseVpnGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DiagnoseVpnGatewayResponseBody(name='body'),
}

/**
  * VPN网关发起诊断
  *
  * @param request DiagnoseVpnGatewayRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DiagnoseVpnGatewayResponse
 */
async function diagnoseVpnGatewayWithOptions(request: DiagnoseVpnGatewayRequest, runtime: Util.RuntimeOptions): DiagnoseVpnGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.IPsecExtendInfo)) {
    query['IPsecExtendInfo'] = request.IPsecExtendInfo;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DiagnoseVpnGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * VPN网关发起诊断
  *
  * @param request DiagnoseVpnGatewayRequest
  * @return DiagnoseVpnGatewayResponse
 */
async function diagnoseVpnGateway(request: DiagnoseVpnGatewayRequest): DiagnoseVpnGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return diagnoseVpnGatewayWithOptions(request, runtime);
}

model DisableNatGatewayEcsMetricRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-2vc53wynunp35lw1y****'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
}

model DisableNatGatewayEcsMetricResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DisableNatGatewayEcsMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableNatGatewayEcsMetricResponseBody(name='body'),
}

async function disableNatGatewayEcsMetricWithOptions(request: DisableNatGatewayEcsMetricRequest, runtime: Util.RuntimeOptions): DisableNatGatewayEcsMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableNatGatewayEcsMetric',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableNatGatewayEcsMetric(request: DisableNatGatewayEcsMetricRequest): DisableNatGatewayEcsMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableNatGatewayEcsMetricWithOptions(request, runtime);
}

model DisableVpcClassicLinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-bp1m7v25emi1h5mtc****'),
}

model DisableVpcClassicLinkResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DisableVpcClassicLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableVpcClassicLinkResponseBody(name='body'),
}

async function disableVpcClassicLinkWithOptions(request: DisableVpcClassicLinkRequest, runtime: Util.RuntimeOptions): DisableVpcClassicLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableVpcClassicLink',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableVpcClassicLink(request: DisableVpcClassicLinkRequest): DisableVpcClassicLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableVpcClassicLinkWithOptions(request, runtime);
}

model DissociateRouteTableFromGatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  gatewayId?: string(name='GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='vtb-5ts0ohchwkp3dydt2****'),
}

model DissociateRouteTableFromGatewayResponseBody = {
  requestId?: string(name='RequestId', example='C5644C9A-7480-13B6-AECB-30FF142E3724'),
}

model DissociateRouteTableFromGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateRouteTableFromGatewayResponseBody(name='body'),
}

async function dissociateRouteTableFromGatewayWithOptions(request: DissociateRouteTableFromGatewayRequest, runtime: Util.RuntimeOptions): DissociateRouteTableFromGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateRouteTableFromGateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateRouteTableFromGateway(request: DissociateRouteTableFromGatewayRequest): DissociateRouteTableFromGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateRouteTableFromGatewayWithOptions(request, runtime);
}

model DissociateRouteTablesFromVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId?: string(name='EndpointId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableIds?: [ string ](name='RouteTableIds'),
}

model DissociateRouteTablesFromVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateRouteTablesFromVpcGatewayEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateRouteTablesFromVpcGatewayEndpointResponseBody(name='body'),
}

async function dissociateRouteTablesFromVpcGatewayEndpointWithOptions(request: DissociateRouteTablesFromVpcGatewayEndpointRequest, runtime: Util.RuntimeOptions): DissociateRouteTablesFromVpcGatewayEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableIds)) {
    query['RouteTableIds'] = request.routeTableIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateRouteTablesFromVpcGatewayEndpoint',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateRouteTablesFromVpcGatewayEndpoint(request: DissociateRouteTablesFromVpcGatewayEndpointRequest): DissociateRouteTablesFromVpcGatewayEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateRouteTablesFromVpcGatewayEndpointWithOptions(request, runtime);
}

model DissociateVpnGatewayWithCertificateRequest {
  certificateId?: string(name='CertificateId', example='6bfe4218-ea1d****'),
  certificateType?: string(name='CertificateType', example='Encryption'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e*******'),
  dryRun?: boolean(name='DryRun', example='false'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model DissociateVpnGatewayWithCertificateResponseBody = {
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DissociateVpnGatewayWithCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateVpnGatewayWithCertificateResponseBody(name='body'),
}

async function dissociateVpnGatewayWithCertificateWithOptions(request: DissociateVpnGatewayWithCertificateRequest, runtime: Util.RuntimeOptions): DissociateVpnGatewayWithCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateId)) {
    query['CertificateId'] = request.certificateId;
  }
  if (!Util.isUnset(request.certificateType)) {
    query['CertificateType'] = request.certificateType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateVpnGatewayWithCertificate',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateVpnGatewayWithCertificate(request: DissociateVpnGatewayWithCertificateRequest): DissociateVpnGatewayWithCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateVpnGatewayWithCertificateWithOptions(request, runtime);
}

model DownloadVpnConnectionConfigRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****'),
}

model DownloadVpnConnectionConfigResponseBody = {
  requestId?: string(name='RequestId', example='0C68048B-0F70-40DA-B8AE-1B79B5CF62E3'),
  vpnConnectionConfig?: {
    ikeConfig?: {
      ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
      ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
      ikeLifetime?: long(name='IkeLifetime', example='86400'),
      ikeMode?: string(name='IkeMode', example='main'),
      ikePfs?: string(name='IkePfs', example='group2'),
      ikeVersion?: string(name='IkeVersion', example='ikev1'),
      localId?: string(name='LocalId', example='116.62.XX.XX'),
      psk?: string(name='Psk', example='pgw6dy7d1i8i****'),
      remoteId?: string(name='RemoteId', example='139.196.XX.XX'),
    }(name='IkeConfig'),
    ipsecConfig?: {
      ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
      ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
      ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
      ipsecPfs?: string(name='IpsecPfs', example='group2'),
    }(name='IpsecConfig'),
    local?: string(name='Local', example='139.196.XX.XX'),
    localSubnet?: string(name='LocalSubnet', example='10.0.0.0/8'),
    remote?: string(name='Remote', example='116.62.XX.XX'),
    remoteSubnet?: string(name='RemoteSubnet', example='192.168.0.0/16'),
  }(name='VpnConnectionConfig'),
}

model DownloadVpnConnectionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadVpnConnectionConfigResponseBody(name='body'),
}

async function downloadVpnConnectionConfigWithOptions(request: DownloadVpnConnectionConfigRequest, runtime: Util.RuntimeOptions): DownloadVpnConnectionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadVpnConnectionConfig',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadVpnConnectionConfig(request: DownloadVpnConnectionConfigRequest): DownloadVpnConnectionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadVpnConnectionConfigWithOptions(request, runtime);
}

model EnableNatGatewayEcsMetricRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-2vc53wynunp35lw1y****'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
}

model EnableNatGatewayEcsMetricResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model EnableNatGatewayEcsMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableNatGatewayEcsMetricResponseBody(name='body'),
}

async function enableNatGatewayEcsMetricWithOptions(request: EnableNatGatewayEcsMetricRequest, runtime: Util.RuntimeOptions): EnableNatGatewayEcsMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableNatGatewayEcsMetric',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableNatGatewayEcsMetric(request: EnableNatGatewayEcsMetricRequest): EnableNatGatewayEcsMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableNatGatewayEcsMetricWithOptions(request, runtime);
}

model EnablePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjz****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model EnablePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model EnablePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnablePhysicalConnectionResponseBody(name='body'),
}

async function enablePhysicalConnectionWithOptions(request: EnablePhysicalConnectionRequest, runtime: Util.RuntimeOptions): EnablePhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnablePhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enablePhysicalConnection(request: EnablePhysicalConnectionRequest): EnablePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enablePhysicalConnectionWithOptions(request, runtime);
}

model EnableVpcClassicLinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-bp1m7v25emi1h5mtc****'),
}

model EnableVpcClassicLinkResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model EnableVpcClassicLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableVpcClassicLinkResponseBody(name='body'),
}

async function enableVpcClassicLinkWithOptions(request: EnableVpcClassicLinkRequest, runtime: Util.RuntimeOptions): EnableVpcClassicLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableVpcClassicLink',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableVpcClassicLink(request: EnableVpcClassicLinkRequest): EnableVpcClassicLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableVpcClassicLinkWithOptions(request, runtime);
}

model EnableVpcIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsp9lumsxoqizvq2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableList?: [ string ](name='RouteTableList'),
}

model EnableVpcIpv4GatewayResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model EnableVpcIpv4GatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableVpcIpv4GatewayResponseBody(name='body'),
}

async function enableVpcIpv4GatewayWithOptions(request: EnableVpcIpv4GatewayRequest, runtime: Util.RuntimeOptions): EnableVpcIpv4GatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipv4GatewayId)) {
    query['Ipv4GatewayId'] = request.ipv4GatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableList)) {
    query['RouteTableList'] = request.routeTableList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableVpcIpv4Gateway',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableVpcIpv4Gateway(request: EnableVpcIpv4GatewayRequest): EnableVpcIpv4GatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableVpcIpv4GatewayWithOptions(request, runtime);
}

model GetDhcpOptionsSetRequest {
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetDhcpOptionsSetResponseBody = {
  associateVpcs?: [ 
    {
      associateStatus?: string(name='AssociateStatus', example='InUse'),
      vpcId?: string(name='VpcId', example='vpc-eb3b54r6otues4tjj****'),
    }
  ](name='AssociateVpcs'),
  dhcpOptions?: {
    domainName?: string(name='DomainName', example='example.com'),
    domainNameServers?: string(name='DomainNameServers', example='192.xx.xx.123'),
    ipv6LeaseTime?: string(name='Ipv6LeaseTime'),
    leaseTime?: string(name='LeaseTime'),
  }(name='DhcpOptions'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', example='test'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test'),
  ownerId?: long(name='OwnerId', example='12345678'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  status?: string(name='Status', example='Available'),
}

model GetDhcpOptionsSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDhcpOptionsSetResponseBody(name='body'),
}

async function getDhcpOptionsSetWithOptions(request: GetDhcpOptionsSetRequest, runtime: Util.RuntimeOptions): GetDhcpOptionsSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dhcpOptionsSetId)) {
    query['DhcpOptionsSetId'] = request.dhcpOptionsSetId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDhcpOptionsSet',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDhcpOptionsSet(request: GetDhcpOptionsSetRequest): GetDhcpOptionsSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDhcpOptionsSetWithOptions(request, runtime);
}

model GetFlowLogServiceStatusRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetFlowLogServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', example='true'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-06F83A1B457'),
}

model GetFlowLogServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFlowLogServiceStatusResponseBody(name='body'),
}

async function getFlowLogServiceStatusWithOptions(request: GetFlowLogServiceStatusRequest, runtime: Util.RuntimeOptions): GetFlowLogServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFlowLogServiceStatus',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFlowLogServiceStatus(request: GetFlowLogServiceStatusRequest): GetFlowLogServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFlowLogServiceStatusWithOptions(request, runtime);
}

model GetIpv4GatewayAttributeRequest {
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetIpv4GatewayAttributeResponseBody = {
  createTime?: string(name='CreateTime', example='2022-02-24T09:02:36Z'),
  enabled?: boolean(name='Enabled', example='true'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', example='new'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', example='name'),
  ipv4GatewayRouteTableId?: string(name='Ipv4GatewayRouteTableId', example='vtb-5ts0ohchwkp3dydt2****'),
  requestId?: string(name='RequestId', example='7F79A919-6FE9-50C4-967B-45705E1F9C38'),
  status?: string(name='Status', example='Created'),
  vpcId?: string(name='VpcId', example='vpc-5tsrxlw7dv074gci4****'),
}

model GetIpv4GatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIpv4GatewayAttributeResponseBody(name='body'),
}

async function getIpv4GatewayAttributeWithOptions(request: GetIpv4GatewayAttributeRequest, runtime: Util.RuntimeOptions): GetIpv4GatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipv4GatewayId)) {
    query['Ipv4GatewayId'] = request.ipv4GatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIpv4GatewayAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIpv4GatewayAttribute(request: GetIpv4GatewayAttributeRequest): GetIpv4GatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpv4GatewayAttributeWithOptions(request, runtime);
}

model GetNatGatewayAttributeRequest {
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1b0lic8uz4r6vf2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetNatGatewayAttributeResponseBody = {
  billingConfig?: {
    autoPay?: string(name='AutoPay', example='false'),
    instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
    internetChargeType?: string(name='InternetChargeType', example='PayBySpec'),
    spec?: string(name='Spec', example='Small'),
  }(name='BillingConfig'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  creationTime?: string(name='CreationTime', example='2021-12-08T12:20:20Z'),
  deletionProtectionInfo?: {
    enabled?: boolean(name='Enabled', example='true'),
  }(name='DeletionProtectionInfo'),
  description?: string(name='Description', example='NAT'),
  ecsMetricEnabled?: boolean(name='EcsMetricEnabled', example='true'),
  expiredTime?: string(name='ExpiredTime', example='2021-12-26T12:20:20Z'),
  forwardTable?: {
    forwardEntryCount?: int32(name='ForwardEntryCount', example='1'),
    forwardTableId?: string(name='ForwardTableId', example='ftb-uf6gj3mhsg94qsqst****'),
  }(name='ForwardTable'),
  fullNatTable?: {
    fullNatEntryCount?: long(name='FullNatEntryCount', example='1'),
    fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****'),
  }(name='FullNatTable'),
  ipList?: [ 
    {
      allocationId?: string(name='AllocationId', example='eip-bp13e9i2qst4g6jzi****'),
      ipAddress?: string(name='IpAddress', example='116.33.XX.XX'),
      usingStatus?: string(name='UsingStatus', example='idle'),
    }
  ](name='IpList'),
  name?: string(name='Name', example='abc'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1047e2d4z7kf2ki****'),
  natType?: string(name='NatType', example='Enhanced'),
  networkType?: string(name='NetworkType', example='internet'),
  privateInfo?: {
    eniInstanceId?: string(name='EniInstanceId', example='eni-bp1cmgtoaka8vfyg****'),
    izNo?: string(name='IzNo', example='cn-qingdao-b'),
    maxBandwidth?: int32(name='MaxBandwidth', example='5120'),
    privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
    vswitchId?: string(name='VswitchId', example='vsw-bp1s2laxhdf9ayjbo***'),
  }(name='PrivateInfo'),
  privateLinkEnabled?: boolean(name='PrivateLinkEnabled', example='true'),
  privateLinkMode?: string(name='PrivateLinkMode', example='FullNat'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****'),
  snatTable?: {
    snatEntryCount?: int32(name='SnatEntryCount', example='1'),
    snatTableId?: string(name='SnatTableId', example='stb-SnatTableIds****'),
  }(name='SnatTable'),
  status?: string(name='Status', example='Available'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72z****'),
}

model GetNatGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNatGatewayAttributeResponseBody(name='body'),
}

async function getNatGatewayAttributeWithOptions(request: GetNatGatewayAttributeRequest, runtime: Util.RuntimeOptions): GetNatGatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNatGatewayAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNatGatewayAttribute(request: GetNatGatewayAttributeRequest): GetNatGatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNatGatewayAttributeWithOptions(request, runtime);
}

model GetNatGatewayConvertStatusRequest {
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1b0lic8uz4r6vf2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetNatGatewayConvertStatusResponseBody = {
  convertSteps?: [ 
    {
      stepName?: string(name='StepName', example='init'),
      stepStartTime?: string(name='StepStartTime', example='2020-08-26T08:27:19Z'),
      stepStatus?: string(name='StepStatus', example='successful'),
    }
  ](name='ConvertSteps'),
  dstNatType?: string(name='DstNatType', example='Enhanced'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1b0lic8uz4r6vf2****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model GetNatGatewayConvertStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNatGatewayConvertStatusResponseBody(name='body'),
}

async function getNatGatewayConvertStatusWithOptions(request: GetNatGatewayConvertStatusRequest, runtime: Util.RuntimeOptions): GetNatGatewayConvertStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNatGatewayConvertStatus',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNatGatewayConvertStatus(request: GetNatGatewayConvertStatusRequest): GetNatGatewayConvertStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNatGatewayConvertStatusWithOptions(request, runtime);
}

model GetPhysicalConnectionServiceStatusRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetPhysicalConnectionServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', example='true'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model GetPhysicalConnectionServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPhysicalConnectionServiceStatusResponseBody(name='body'),
}

async function getPhysicalConnectionServiceStatusWithOptions(request: GetPhysicalConnectionServiceStatusRequest, runtime: Util.RuntimeOptions): GetPhysicalConnectionServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhysicalConnectionServiceStatus',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPhysicalConnectionServiceStatus(request: GetPhysicalConnectionServiceStatusRequest): GetPhysicalConnectionServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalConnectionServiceStatusWithOptions(request, runtime);
}

model GetTrafficMirrorServiceStatusRequest {
  ownerId?: long(name='OwnerId'),
}

model GetTrafficMirrorServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', example='true'),
  requestId?: string(name='RequestId', example='37626066-2C6C-4B62-ADD3-498920C409C5'),
}

model GetTrafficMirrorServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrafficMirrorServiceStatusResponseBody(name='body'),
}

async function getTrafficMirrorServiceStatusWithOptions(request: GetTrafficMirrorServiceStatusRequest, runtime: Util.RuntimeOptions): GetTrafficMirrorServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTrafficMirrorServiceStatus',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTrafficMirrorServiceStatus(request: GetTrafficMirrorServiceStatusRequest): GetTrafficMirrorServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrafficMirrorServiceStatusWithOptions(request, runtime);
}

model GetVpcGatewayEndpointAttributeRequest {
  endpointId?: string(name='EndpointId', example='vpce-bp1w1dmdqjpwul0v3****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetVpcGatewayEndpointAttributeResponseBody = {
  creationTime?: string(name='CreationTime', example='2021-08-27T01:58:37Z'),
  endpointDescription?: string(name='EndpointDescription', example='test'),
  endpointId?: string(name='EndpointId', example='vpce-bp1w1dmdqjpwul0v3****'),
  endpointName?: string(name='EndpointName', example='test'),
  endpointStatus?: string(name='EndpointStatus', example='Created'),
  policyDocument?: string(name='PolicyDocument', example='{"Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }'),
  requestId?: string(name='RequestId', example='A1122D0F-7B3B-5445-BB19-17F27F97FE1C'),
  routeTables?: [ string ](name='RouteTables'),
  serviceName?: string(name='ServiceName', example='com.aliyun.cn-hangzhou.oss'),
  vpcId?: string(name='VpcId', example='vpc-bp1nh86rugg01zol0****'),
}

model GetVpcGatewayEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpcGatewayEndpointAttributeResponseBody(name='body'),
}

async function getVpcGatewayEndpointAttributeWithOptions(request: GetVpcGatewayEndpointAttributeRequest, runtime: Util.RuntimeOptions): GetVpcGatewayEndpointAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcGatewayEndpointAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcGatewayEndpointAttribute(request: GetVpcGatewayEndpointAttributeRequest): GetVpcGatewayEndpointAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcGatewayEndpointAttributeWithOptions(request, runtime);
}

model GetVpcPrefixListAssociationsRequest {
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: string(name='PrefixListId', example='pl-0b7hwu67****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetVpcPrefixListAssociationsResponseBody = {
  count?: long(name='Count', example='1'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixListAssociation?: [ 
    {
      ownerId?: string(name='OwnerId', example='153460731706****'),
      prefixListId?: string(name='PrefixListId', example='pl-0b7hwu67****'),
      reason?: string(name='Reason', example='failed'),
      regionId?: string(name='RegionId'),
      resourceId?: string(name='ResourceId', example='vtb-bp1drpcfz9srr393h****'),
      resourceType?: string(name='ResourceType', example='vpcRouteTable'),
      resourceUid?: string(name='ResourceUid'),
      status?: string(name='Status', example='Success'),
    }
  ](name='PrefixListAssociation'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: long(name='TotalCount', example='1'),
}

model GetVpcPrefixListAssociationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpcPrefixListAssociationsResponseBody(name='body'),
}

async function getVpcPrefixListAssociationsWithOptions(request: GetVpcPrefixListAssociationsRequest, runtime: Util.RuntimeOptions): GetVpcPrefixListAssociationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcPrefixListAssociations',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcPrefixListAssociations(request: GetVpcPrefixListAssociationsRequest): GetVpcPrefixListAssociationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcPrefixListAssociationsWithOptions(request, runtime);
}

model GetVpcPrefixListEntriesRequest {
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: string(name='PrefixListId', example='pl-0b7hwu67****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetVpcPrefixListEntriesResponseBody = {
  count?: long(name='Count', example='1'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', example='192.168.0.0/16'),
      description?: string(name='Description', example='description'),
      prefixListId?: string(name='PrefixListId', example='pl-0b7hwu67****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='PrefixListEntry'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: long(name='TotalCount', example='1'),
}

model GetVpcPrefixListEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpcPrefixListEntriesResponseBody(name='body'),
}

async function getVpcPrefixListEntriesWithOptions(request: GetVpcPrefixListEntriesRequest, runtime: Util.RuntimeOptions): GetVpcPrefixListEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcPrefixListEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcPrefixListEntries(request: GetVpcPrefixListEntriesRequest): GetVpcPrefixListEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcPrefixListEntriesWithOptions(request, runtime);
}

model GetVpcRouteEntrySummaryRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntryType?: string(name='RouteEntryType', example='Custom'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72****'),
}

model GetVpcRouteEntrySummaryResponseBody = {
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routeEntrySummarys?: [ 
    {
      entrySummarys?: [ 
        {
          count?: int32(name='Count', example='10'),
          routeEntryType?: string(name='RouteEntryType', example='Custom'),
        }
      ](name='EntrySummarys'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
    }
  ](name='RouteEntrySummarys'),
}

model GetVpcRouteEntrySummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpcRouteEntrySummaryResponseBody(name='body'),
}

async function getVpcRouteEntrySummaryWithOptions(request: GetVpcRouteEntrySummaryRequest, runtime: Util.RuntimeOptions): GetVpcRouteEntrySummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntryType)) {
    query['RouteEntryType'] = request.routeEntryType;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcRouteEntrySummary',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcRouteEntrySummary(request: GetVpcRouteEntrySummaryRequest): GetVpcRouteEntrySummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcRouteEntrySummaryWithOptions(request, runtime);
}

model GetVpnGatewayDiagnoseResultRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  diagnoseId?: string(name='DiagnoseId', example='vpndgn-uf6kuxbe3iv028k3s****'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-uf6fzwp0ck3frwtbk****'),
}

model GetVpnGatewayDiagnoseResultResponseBody = {
  beginTime?: string(name='BeginTime', example='2022-12-15T05:28:57Z'),
  diagnoseId?: string(name='DiagnoseId', example='vpndgn-uf6sgneym02lxyuv4****'),
  diagnoseResult?: [ 
    {
      diagnoseName?: string(name='DiagnoseName', example='RouteEntryConflict'),
      diagnoseResultDescription?: string(name='DiagnoseResultDescription', example='{\\"targetIp\\":\\"192.168.0.1\\",\\"srcIp\\":\\"192.168.1.1\\",\\"rtt\\":-1.0,\\"lossRate\\":100.0}'),
      diagnoseResultLevel?: string(name='DiagnoseResultLevel', example='normal'),
    }
  ](name='DiagnoseResult'),
  finishTime?: string(name='FinishTime', example='2022-12-15T05:29:08Z'),
  finishedCount?: int32(name='FinishedCount', example='7'),
  requestId?: string(name='RequestId', example='312C4D5A-6563-5FC6-8C6E-A43A5A316FEB'),
  resourceInstanceId?: string(name='ResourceInstanceId', example='vco-uf6huqsu63azl7mdp****'),
  resourceType?: string(name='ResourceType', example='IPsec'),
  totalCount?: int32(name='TotalCount', example='7'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-uf6fzwp0ck3frwtbk****'),
}

model GetVpnGatewayDiagnoseResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpnGatewayDiagnoseResultResponseBody(name='body'),
}

/**
  * 查询VPN网关一键诊断结果
  *
  * @param request GetVpnGatewayDiagnoseResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetVpnGatewayDiagnoseResultResponse
 */
async function getVpnGatewayDiagnoseResultWithOptions(request: GetVpnGatewayDiagnoseResultRequest, runtime: Util.RuntimeOptions): GetVpnGatewayDiagnoseResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diagnoseId)) {
    query['DiagnoseId'] = request.diagnoseId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVpnGatewayDiagnoseResult',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 查询VPN网关一键诊断结果
  *
  * @param request GetVpnGatewayDiagnoseResultRequest
  * @return GetVpnGatewayDiagnoseResultResponse
 */
async function getVpnGatewayDiagnoseResult(request: GetVpnGatewayDiagnoseResultRequest): GetVpnGatewayDiagnoseResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpnGatewayDiagnoseResultWithOptions(request, runtime);
}

model GrantInstanceToCenRequest {
  cenId?: string(name='CenId', example='cen-7qthudw0ll6jmc****'),
  cenOwnerId?: long(name='CenOwnerId', example='123456789'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  instanceId?: string(name='InstanceId', example='vpc-uf6o8d1dj8sjwxi6o****'),
  instanceType?: string(name='InstanceType', example='VPC'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GrantInstanceToCenResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GrantInstanceToCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantInstanceToCenResponseBody(name='body'),
}

async function grantInstanceToCenWithOptions(request: GrantInstanceToCenRequest, runtime: Util.RuntimeOptions): GrantInstanceToCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantInstanceToCen',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantInstanceToCen(request: GrantInstanceToCenRequest): GrantInstanceToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantInstanceToCenWithOptions(request, runtime);
}

model GrantInstanceToVbrRequest {
  grantType?: string(name='GrantType', example='ALL'),
  instanceId?: string(name='InstanceId', example='vpc-bp1lqhq93q8evjpky****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vbrInstanceIds?: [ string ](name='VbrInstanceIds'),
  vbrOwnerUid?: long(name='VbrOwnerUid', example='1210123456123456'),
  vbrRegionNo?: string(name='VbrRegionNo', example='cn-hangzhou'),
}

model GrantInstanceToVbrShrinkRequest {
  grantType?: string(name='GrantType', example='ALL'),
  instanceId?: string(name='InstanceId', example='vpc-bp1lqhq93q8evjpky****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vbrInstanceIdsShrink?: string(name='VbrInstanceIds'),
  vbrOwnerUid?: long(name='VbrOwnerUid', example='1210123456123456'),
  vbrRegionNo?: string(name='VbrRegionNo', example='cn-hangzhou'),
}

model GrantInstanceToVbrResponseBody = {
  requestId?: string(name='RequestId', example='F99F13AE-D733-5856-AB97-80CC88B1D5A8'),
}

model GrantInstanceToVbrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantInstanceToVbrResponseBody(name='body'),
}

async function grantInstanceToVbrWithOptions(tmpReq: GrantInstanceToVbrRequest, runtime: Util.RuntimeOptions): GrantInstanceToVbrResponse {
  Util.validateModel(tmpReq);
  var request = new GrantInstanceToVbrShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.vbrInstanceIds)) {
    request.vbrInstanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vbrInstanceIds, 'VbrInstanceIds', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.grantType)) {
    query['GrantType'] = request.grantType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vbrInstanceIdsShrink)) {
    query['VbrInstanceIds'] = request.vbrInstanceIdsShrink;
  }
  if (!Util.isUnset(request.vbrOwnerUid)) {
    query['VbrOwnerUid'] = request.vbrOwnerUid;
  }
  if (!Util.isUnset(request.vbrRegionNo)) {
    query['VbrRegionNo'] = request.vbrRegionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantInstanceToVbr',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantInstanceToVbr(request: GrantInstanceToVbrRequest): GrantInstanceToVbrResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantInstanceToVbrWithOptions(request, runtime);
}

model ListBusinessAccessPointsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListBusinessAccessPointsResponseBody = {
  businessAccessPoints?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-xs-B'),
      accessPointName?: string(name='AccessPointName'),
      cloudBoxInstanceIds?: string(name='CloudBoxInstanceIds', example='cb-****'),
      latitude?: double(name='Latitude', example='30.198416'),
      longitude?: double(name='Longitude', example='120.247514'),
      supportLineOperator?: string(name='SupportLineOperator', example='CT'),
      supportPortTypes?: string(name='SupportPortTypes', example='1000Base-T'),
    }
  ](name='BusinessAccessPoints'),
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model ListBusinessAccessPointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBusinessAccessPointsResponseBody(name='body'),
}

async function listBusinessAccessPointsWithOptions(request: ListBusinessAccessPointsRequest, runtime: Util.RuntimeOptions): ListBusinessAccessPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBusinessAccessPoints',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBusinessAccessPoints(request: ListBusinessAccessPointsRequest): ListBusinessAccessPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBusinessAccessPointsWithOptions(request, runtime);
}

model ListDhcpOptionsSetsRequest {
  dhcpOptionsSetId?: [ string ](name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test'),
  domainName?: string(name='DomainName', example='example.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListDhcpOptionsSetsResponseBody = {
  dhcpOptionsSets?: [ 
    {
      associateVpcCount?: int32(name='AssociateVpcCount', example='2'),
      dhcpOptions?: {
        domainName?: string(name='DomainName', example='example.com'),
        domainNameServers?: string(name='DomainNameServers', example='192.168.XX.XX'),
        ipv6LeaseTime?: string(name='Ipv6LeaseTime'),
        leaseTime?: string(name='LeaseTime'),
      }(name='DhcpOptions'),
      dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', example='test'),
      dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
      dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      status?: string(name='Status', example='Available'),
    }
  ](name='DhcpOptionsSets'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd********'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ListDhcpOptionsSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDhcpOptionsSetsResponseBody(name='body'),
}

async function listDhcpOptionsSetsWithOptions(request: ListDhcpOptionsSetsRequest, runtime: Util.RuntimeOptions): ListDhcpOptionsSetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dhcpOptionsSetId)) {
    query['DhcpOptionsSetId'] = request.dhcpOptionsSetId;
  }
  if (!Util.isUnset(request.dhcpOptionsSetName)) {
    query['DhcpOptionsSetName'] = request.dhcpOptionsSetName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDhcpOptionsSets',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDhcpOptionsSets(request: ListDhcpOptionsSetsRequest): ListDhcpOptionsSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDhcpOptionsSetsWithOptions(request, runtime);
}

model ListEnhanhcedNatGatewayAvailableZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='me-east-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListEnhanhcedNatGatewayAvailableZonesResponseBody = {
  requestId?: string(name='RequestId', example='8AE6F367-52EA-535D-9A3D-EF23D70527C8'),
  zones?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='me-east-1a'),
    }
  ](name='Zones'),
}

model ListEnhanhcedNatGatewayAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnhanhcedNatGatewayAvailableZonesResponseBody(name='body'),
}

async function listEnhanhcedNatGatewayAvailableZonesWithOptions(request: ListEnhanhcedNatGatewayAvailableZonesRequest, runtime: Util.RuntimeOptions): ListEnhanhcedNatGatewayAvailableZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnhanhcedNatGatewayAvailableZones',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnhanhcedNatGatewayAvailableZones(request: ListEnhanhcedNatGatewayAvailableZonesRequest): ListEnhanhcedNatGatewayAvailableZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnhanhcedNatGatewayAvailableZonesWithOptions(request, runtime);
}

model ListFullNatEntriesRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  fullNatEntryId?: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****'),
  fullNatEntryNames?: [ string ](name='FullNatEntryNames'),
  fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****'),
  ipProtocol?: string(name='IpProtocol', example='TCP'),
  maxResults?: long(name='MaxResults', example='20'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListFullNatEntriesResponseBody = {
  fullNatEntries?: [ 
    {
      accessIp?: string(name='AccessIp', example='192.168.XX.XX'),
      accessPort?: string(name='AccessPort', example='80'),
      creationTime?: string(name='CreationTime', example='2021-10-27T02:44:40Z'),
      fullNatEntryDescription?: string(name='FullNatEntryDescription', example='abc'),
      fullNatEntryId?: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****'),
      fullNatEntryName?: string(name='FullNatEntryName', example='test'),
      fullNatEntryStatus?: string(name='FullNatEntryStatus', example='Available'),
      fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****'),
      ipProtocol?: string(name='IpProtocol', example='TCP'),
      natIp?: string(name='NatIp', example='192.168.XX.XX'),
      natIpPort?: string(name='NatIpPort', example='80'),
      networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-gw80wedm8pq0tpr2****'),
      networkInterfaceType?: string(name='NetworkInterfaceType', example='Endpoint'),
    }
  ](name='FullNatEntries'),
  fullNatTableId?: string(name='FullNatTableId', example='fullnat-gw8fz23jezpbblf1j****'),
  maxResults?: long(name='MaxResults', example='1'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-gw8054kn57y3hq3bv****'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='F03E41F6-1A74-311F-8D98-124EEE9F37B8'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListFullNatEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFullNatEntriesResponseBody(name='body'),
}

async function listFullNatEntriesWithOptions(request: ListFullNatEntriesRequest, runtime: Util.RuntimeOptions): ListFullNatEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.fullNatEntryId)) {
    query['FullNatEntryId'] = request.fullNatEntryId;
  }
  if (!Util.isUnset(request.fullNatEntryNames)) {
    query['FullNatEntryNames'] = request.fullNatEntryNames;
  }
  if (!Util.isUnset(request.fullNatTableId)) {
    query['FullNatTableId'] = request.fullNatTableId;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.networkInterfaceIds)) {
    query['NetworkInterfaceIds'] = request.networkInterfaceIds;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFullNatEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFullNatEntries(request: ListFullNatEntriesRequest): ListFullNatEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFullNatEntriesWithOptions(request, runtime);
}

model ListGatewayRouteTableEntriesRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.5'),
  gatewayRouteTableId?: string(name='GatewayRouteTableId', example='vtb-5ts0ohchwkp3dydt2****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListGatewayRouteTableEntriesResponseBody = {
  gatewayRouteEntryModels?: [ 
    {
      description?: string(name='Description', example='test'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.5'),
      name?: string(name='Name', example='name'),
      nextHopId?: string(name='NextHopId', example='i-bp11gcl0sm85t9bi****'),
      nextHopType?: string(name='NextHopType', example='EcsInstance'),
      nextHops?: [ 
        {
          enabled?: string(name='Enabled'),
          nextHopId?: string(name='NextHopId'),
          nextHopType?: string(name='NextHopType'),
          weight?: string(name='Weight'),
        }
      ](name='NextHops'),
      status?: string(name='Status', example='Available'),
    }
  ](name='GatewayRouteEntryModels'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  totalCount?: string(name='TotalCount', example='1'),
}

model ListGatewayRouteTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayRouteTableEntriesResponseBody(name='body'),
}

async function listGatewayRouteTableEntriesWithOptions(request: ListGatewayRouteTableEntriesRequest, runtime: Util.RuntimeOptions): ListGatewayRouteTableEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.gatewayRouteTableId)) {
    query['GatewayRouteTableId'] = request.gatewayRouteTableId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayRouteTableEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayRouteTableEntries(request: ListGatewayRouteTableEntriesRequest): ListGatewayRouteTableEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayRouteTableEntriesWithOptions(request, runtime);
}

model ListGeographicSubRegionsResponseBody = {
  count?: long(name='Count', example='10'),
  geographicSubRegions?: [ string ](name='GeographicSubRegions'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ListGeographicSubRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGeographicSubRegionsResponseBody(name='body'),
}

async function listGeographicSubRegionsWithOptions(runtime: Util.RuntimeOptions): ListGeographicSubRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListGeographicSubRegions',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGeographicSubRegions(): ListGeographicSubRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGeographicSubRegionsWithOptions(runtime);
}

model ListIpsecServerLogsRequest {
  from?: int32(name='From', example='1671003744'),
  ipsecServerId?: string(name='IpsecServerId', example='iss-2zei2n5q5zhirfh73****'),
  minutePeriod?: int32(name='MinutePeriod', example='10'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  to?: int32(name='To', example='1671004344'),
}

model ListIpsecServerLogsResponseBody = {
  count?: int32(name='Count', example='10'),
  data?: [ string ](name='Data'),
  isCompleted?: boolean(name='IsCompleted', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DEDAC5B1-9292-5BF7-BDDF-61BA58CFB2FB'),
}

model ListIpsecServerLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIpsecServerLogsResponseBody(name='body'),
}

async function listIpsecServerLogsWithOptions(request: ListIpsecServerLogsRequest, runtime: Util.RuntimeOptions): ListIpsecServerLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.ipsecServerId)) {
    query['IpsecServerId'] = request.ipsecServerId;
  }
  if (!Util.isUnset(request.minutePeriod)) {
    query['MinutePeriod'] = request.minutePeriod;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpsecServerLogs',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIpsecServerLogs(request: ListIpsecServerLogsRequest): ListIpsecServerLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpsecServerLogsWithOptions(request, runtime);
}

model ListIpsecServersRequest {
  ipsecServerId?: [ string ](name='IpsecServerId', example='iss-bp1bo3xuvcxo7ixll****'),
  ipsecServerName?: string(name='IpsecServerName', example='test'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ListIpsecServersResponseBody = {
  ipsecServers?: [ 
    {
      clientIpPool?: string(name='ClientIpPool', example='10.0.0.0/24'),
      creationTime?: string(name='CreationTime', example='2018-12-03T10:11:55Z'),
      effectImmediately?: boolean(name='EffectImmediately', example='false'),
      IDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-****'),
      ikeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
        ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', example='86400'),
        ikeMode?: string(name='IkeMode', example='main'),
        ikePfs?: string(name='IkePfs', example='group2'),
        ikeVersion?: string(name='IkeVersion', example='ikev2'),
        localId?: string(name='LocalId', example='116.64.XX.XX'),
        remoteId?: string(name='RemoteId', example='139.67.XX.XX'),
      }(name='IkeConfig'),
      internetIp?: string(name='InternetIp', example='47.22.XX.XX'),
      ipsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
        ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
        ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', example='group2'),
      }(name='IpsecConfig'),
      ipsecServerId?: string(name='IpsecServerId', example='iss-bp1bo3xuvcxo7ixll****'),
      ipsecServerName?: string(name='IpsecServerName', example='test'),
      localSubnet?: string(name='LocalSubnet', example='192.168.0.0/16,172.17.0.0/16'),
      maxConnections?: int32(name='MaxConnections', example='5'),
      multiFactorAuthEnabled?: boolean(name='MultiFactorAuthEnabled', example='true'),
      onlineClientCount?: int32(name='OnlineClientCount', example='1'),
      psk?: string(name='Psk', example='pgw6dy7d****'),
      pskEnabled?: boolean(name='PskEnabled', example='true'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
    }
  ](name='IpsecServers'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListIpsecServersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIpsecServersResponseBody(name='body'),
}

async function listIpsecServersWithOptions(request: ListIpsecServersRequest, runtime: Util.RuntimeOptions): ListIpsecServersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipsecServerId)) {
    query['IpsecServerId'] = request.ipsecServerId;
  }
  if (!Util.isUnset(request.ipsecServerName)) {
    query['IpsecServerName'] = request.ipsecServerName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpsecServers',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIpsecServers(request: ListIpsecServersRequest): ListIpsecServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpsecServersWithOptions(request, runtime);
}

model ListIpv4GatewaysRequest {
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', example='name'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-5tsrxlw7dv074gci4****'),
}

model ListIpv4GatewaysResponseBody = {
  ipv4GatewayModels?: [ 
    {
      enabled?: boolean(name='Enabled', example='true'),
      gmtCreate?: string(name='GmtCreate', example='2021-12-02T07:07:35Z'),
      ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', example='test'),
      ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
      ipv4GatewayName?: string(name='Ipv4GatewayName', example='name'),
      ipv4GatewayRouteTableId?: string(name='Ipv4GatewayRouteTableId', example='vtb-5ts0ohchwkp3dydt2****'),
      status?: string(name='Status', example='Created'),
      vpcId?: string(name='VpcId', example='vpc-5tsrxlw7dv074gci4****'),
    }
  ](name='Ipv4GatewayModels'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='2D265800-E306-529C-8418-84B0A1D201DB'),
  totalCount?: string(name='TotalCount', example='1'),
}

model ListIpv4GatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIpv4GatewaysResponseBody(name='body'),
}

async function listIpv4GatewaysWithOptions(request: ListIpv4GatewaysRequest, runtime: Util.RuntimeOptions): ListIpv4GatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipv4GatewayId)) {
    query['Ipv4GatewayId'] = request.ipv4GatewayId;
  }
  if (!Util.isUnset(request.ipv4GatewayName)) {
    query['Ipv4GatewayName'] = request.ipv4GatewayName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIpv4Gateways',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIpv4Gateways(request: ListIpv4GatewaysRequest): ListIpv4GatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpv4GatewaysWithOptions(request, runtime);
}

model ListNatIpCidrsRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  maxResults?: string(name='MaxResults', example='20'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
  natIpCidr?: string(name='NatIpCidr', example='172.16.0.0/24'),
  natIpCidrName?: [ string ](name='NatIpCidrName', example='test'),
  natIpCidrStatus?: string(name='NatIpCidrStatus', example='Available'),
  natIpCidrs?: [ string ](name='NatIpCidrs', example='172.16.0.0/24'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListNatIpCidrsResponseBody = {
  natIpCidrs?: [ 
    {
      creationTime?: string(name='CreationTime', example='2021-06-28T20:50Z'),
      isDefault?: boolean(name='IsDefault', example='true'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
      natIpCidr?: string(name='NatIpCidr', example='172.16.0.0/24'),
      natIpCidrDescription?: string(name='NatIpCidrDescription', example='test'),
      natIpCidrId?: string(name='NatIpCidrId', example='vpcnatcidr-gw8ov42ei6xh1jys2****'),
      natIpCidrName?: string(name='NatIpCidrName', example='Name'),
      natIpCidrStatus?: string(name='NatIpCidrStatus', example='Available'),
    }
  ](name='NatIpCidrs'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='7479A224-4A28-4895-9604-11F48BCE6A88'),
  totalCount?: string(name='TotalCount', example='1'),
}

model ListNatIpCidrsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNatIpCidrsResponseBody(name='body'),
}

async function listNatIpCidrsWithOptions(request: ListNatIpCidrsRequest, runtime: Util.RuntimeOptions): ListNatIpCidrsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natIpCidr)) {
    query['NatIpCidr'] = request.natIpCidr;
  }
  if (!Util.isUnset(request.natIpCidrName)) {
    query['NatIpCidrName'] = request.natIpCidrName;
  }
  if (!Util.isUnset(request.natIpCidrStatus)) {
    query['NatIpCidrStatus'] = request.natIpCidrStatus;
  }
  if (!Util.isUnset(request.natIpCidrs)) {
    query['NatIpCidrs'] = request.natIpCidrs;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNatIpCidrs',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNatIpCidrs(request: ListNatIpCidrsRequest): ListNatIpCidrsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNatIpCidrsWithOptions(request, runtime);
}

model ListNatIpsRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  maxResults?: string(name='MaxResults', example='20'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
  natIpCidr?: string(name='NatIpCidr', example='192.168.0.0/24'),
  natIpIds?: [ string ](name='NatIpIds', example='vpcnatip-gw8a863sut1zijxh0****'),
  natIpName?: [ string ](name='NatIpName', example='test'),
  natIpStatus?: string(name='NatIpStatus', example='Available'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListNatIpsResponseBody = {
  natIps?: [ 
    {
      isDefault?: boolean(name='IsDefault', example='true'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
      natIp?: string(name='NatIp', example='192.168.0.126'),
      natIpCidr?: string(name='NatIpCidr', example='192.168.0.0/24'),
      natIpDescription?: string(name='NatIpDescription', example='default'),
      natIpId?: string(name='NatIpId', example='vpcnatip-gw8a863sut1zijxh0****'),
      natIpName?: string(name='NatIpName', example='default'),
      natIpStatus?: string(name='NatIpStatus', example='Available'),
    }
  ](name='NatIps'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='7E78CEEA-BF8F-44D1-9DCD-D9141135B71E'),
  totalCount?: string(name='TotalCount', example='1'),
}

model ListNatIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNatIpsResponseBody(name='body'),
}

async function listNatIpsWithOptions(request: ListNatIpsRequest, runtime: Util.RuntimeOptions): ListNatIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natIpCidr)) {
    query['NatIpCidr'] = request.natIpCidr;
  }
  if (!Util.isUnset(request.natIpIds)) {
    query['NatIpIds'] = request.natIpIds;
  }
  if (!Util.isUnset(request.natIpName)) {
    query['NatIpName'] = request.natIpName;
  }
  if (!Util.isUnset(request.natIpStatus)) {
    query['NatIpStatus'] = request.natIpStatus;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNatIps',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNatIps(request: ListNatIpsRequest): ListNatIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNatIpsWithOptions(request, runtime);
}

model ListPrefixListsRequest {
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListIds?: [ string ](name='PrefixListIds', example='pl-m5estsqsdqwg88hjf****'),
  prefixListName?: string(name='PrefixListName', example='name'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model ListPrefixListsResponseBody = {
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixLists?: [ 
    {
      cidrBlocks?: [ string ](name='CidrBlocks'),
      creationTime?: string(name='CreationTime', example='2022-07-12T14:22:32Z'),
      ipVersion?: string(name='IpVersion', example='ipv4'),
      maxEntries?: int32(name='MaxEntries', example='10'),
      ownerId?: string(name='OwnerId', example='1210123456123456'),
      prefixListDescription?: string(name='PrefixListDescription', example='Created with oss service by system.'),
      prefixListId?: string(name='PrefixListId', example='pl-m5estsqsdqwg88hjf****'),
      prefixListName?: string(name='PrefixListName', example='test'),
      prefixListStatus?: string(name='PrefixListStatus', example='Created'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      shareType?: string(name='ShareType', example='Shared'),
      status?: string(name='Status', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='PrefixLists'),
  requestId?: string(name='RequestId', example='DF72F7BB-5DFA-529C-887E-B0BB70D89C4F'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListPrefixListsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrefixListsResponseBody(name='body'),
}

/**
  * **
  *
  * @param request ListPrefixListsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListPrefixListsResponse
 */
async function listPrefixListsWithOptions(request: ListPrefixListsRequest, runtime: Util.RuntimeOptions): ListPrefixListsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListIds)) {
    query['PrefixListIds'] = request.prefixListIds;
  }
  if (!Util.isUnset(request.prefixListName)) {
    query['PrefixListName'] = request.prefixListName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrefixLists',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **
  *
  * @param request ListPrefixListsRequest
  * @return ListPrefixListsResponse
 */
async function listPrefixLists(request: ListPrefixListsRequest): ListPrefixListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrefixListsWithOptions(request, runtime);
}

model ListPublicIpAddressPoolCidrBlocksRequest {
  cidrBlock?: string(name='CidrBlock', example='47.0.XX.XX/24'),
  dryRun?: boolean(name='DryRun', example='false'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListPublicIpAddressPoolCidrBlocksResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  publicIpPoolCidrBlockList?: [ 
    {
      cidrBlock?: string(name='CidrBlock', example='47.0.XX.XX/24'),
      creationTime?: string(name='CreationTime', example='2022-05-10T01:37:38Z'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
      status?: string(name='Status', example='Created'),
      totalIpNum?: int32(name='TotalIpNum', example='20'),
      usedIpNum?: int32(name='UsedIpNum', example='20'),
    }
  ](name='PublicIpPoolCidrBlockList'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListPublicIpAddressPoolCidrBlocksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPublicIpAddressPoolCidrBlocksResponseBody(name='body'),
}

async function listPublicIpAddressPoolCidrBlocksWithOptions(request: ListPublicIpAddressPoolCidrBlocksRequest, runtime: Util.RuntimeOptions): ListPublicIpAddressPoolCidrBlocksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publicIpAddressPoolId)) {
    query['PublicIpAddressPoolId'] = request.publicIpAddressPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPublicIpAddressPoolCidrBlocks',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPublicIpAddressPoolCidrBlocks(request: ListPublicIpAddressPoolCidrBlocksRequest): ListPublicIpAddressPoolCidrBlocksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicIpAddressPoolCidrBlocksWithOptions(request, runtime);
}

model ListPublicIpAddressPoolsRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  isp?: string(name='Isp', example='BGP'),
  maxResults?: int32(name='MaxResults', example='10'),
  name?: string(name='Name', example='AddressPoolName'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  publicIpAddressPoolIds?: [ string ](name='PublicIpAddressPoolIds'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', example='Created'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model ListPublicIpAddressPoolsResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  publicIpAddressPoolList?: [ 
    {
      creationTime?: string(name='CreationTime', example='2022-05-10T01:37:38Z'),
      description?: string(name='Description', example='AddressPoolDescription'),
      ipAddressRemaining?: boolean(name='IpAddressRemaining', example='true'),
      isp?: string(name='Isp', example='BGP'),
      name?: string(name='Name', example='AddressPoolName'),
      ownerId?: long(name='OwnerId'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
      regionId?: string(name='RegionId', example='cn-chengdu'),
      resourceGroupId?: string(name='ResourceGroupId'),
      shareType?: string(name='ShareType'),
      status?: string(name='Status', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      totalIpNum?: int32(name='TotalIpNum', example='100'),
      usedIpNum?: int32(name='UsedIpNum', example='20'),
    }
  ](name='PublicIpAddressPoolList'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListPublicIpAddressPoolsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPublicIpAddressPoolsResponseBody(name='body'),
}

async function listPublicIpAddressPoolsWithOptions(request: ListPublicIpAddressPoolsRequest, runtime: Util.RuntimeOptions): ListPublicIpAddressPoolsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publicIpAddressPoolIds)) {
    query['PublicIpAddressPoolIds'] = request.publicIpAddressPoolIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPublicIpAddressPools',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPublicIpAddressPools(request: ListPublicIpAddressPoolsRequest): ListPublicIpAddressPoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicIpAddressPoolsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='vpc-bp16qjewdsunr41m1****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='VPC'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='vpc-bp16qjewdsunr41m1****'),
      resourceType?: string(name='ResourceType', example='VPC'),
      tagKey?: string(name='TagKey', example='FinanceDept'),
      tagValue?: string(name='TagValue', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagResourcesForExpressConnectRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='PHYSICALCONNECTION'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag'),
}

model ListTagResourcesForExpressConnectResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='pc-bp16qjewdsunr41m1****'),
      resourceType?: string(name='ResourceType', example='PHYSICALCONNECTION'),
      tagKey?: string(name='TagKey', example='FinanceDept'),
      tagValue?: string(name='TagValue', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesForExpressConnectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesForExpressConnectResponseBody(name='body'),
}

async function listTagResourcesForExpressConnectWithOptions(request: ListTagResourcesForExpressConnectRequest, runtime: Util.RuntimeOptions): ListTagResourcesForExpressConnectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResourcesForExpressConnect',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResourcesForExpressConnect(request: ListTagResourcesForExpressConnectRequest): ListTagResourcesForExpressConnectResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesForExpressConnectWithOptions(request, runtime);
}

model ListTrafficMirrorFiltersRequest {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterIds?: [ string ](name='TrafficMirrorFilterIds', example='tmf-j6cmls82xnc86vtpe****'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', example='abc'),
}

model ListTrafficMirrorFiltersResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='739CA01C-92EB-4C69-BCC0-280149C6F41E'),
  totalCount?: string(name='TotalCount', example='1'),
  trafficMirrorFilters?: [ 
    {
      egressRules?: [ 
        {
          action?: string(name='Action', example='accept'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
          destinationPortRange?: string(name='DestinationPortRange', example='22/40'),
          priority?: int32(name='Priority', example='1'),
          protocol?: string(name='Protocol', example='TCP'),
          sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
          sourcePortRange?: string(name='SourcePortRange', example='22/40'),
          trafficDirection?: string(name='TrafficDirection', example='egress'),
          trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
          trafficMirrorFilterRuleId?: string(name='TrafficMirrorFilterRuleId', example='tmr-j6c89rzmtd3hhdugq****'),
          trafficMirrorFilterRuleStatus?: string(name='TrafficMirrorFilterRuleStatus', example='Created'),
        }
      ](name='EgressRules'),
      ingressRules?: [ 
        {
          action?: string(name='Action', example='accept'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', example='0.0.0.0/0'),
          destinationPortRange?: string(name='DestinationPortRange', example='-1/-1'),
          priority?: int32(name='Priority', example='1'),
          protocol?: string(name='Protocol', example='ALL'),
          sourceCidrBlock?: string(name='SourceCidrBlock', example='0.0.0.0/0'),
          sourcePortRange?: string(name='SourcePortRange', example='-1/-1'),
          trafficDirection?: string(name='TrafficDirection', example='ingress'),
          trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
          trafficMirrorFilterRuleId?: string(name='TrafficMirrorFilterRuleId', example='tmr-j6cezu8e68rnpepet****'),
          trafficMirrorFilterRuleStatus?: string(name='TrafficMirrorFilterRuleStatus', example='Created'),
        }
      ](name='IngressRules'),
      trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', example='This is a filter.'),
      trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
      trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', example='abc'),
      trafficMirrorFilterStatus?: string(name='TrafficMirrorFilterStatus', example='Created'),
    }
  ](name='TrafficMirrorFilters'),
}

model ListTrafficMirrorFiltersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTrafficMirrorFiltersResponseBody(name='body'),
}

async function listTrafficMirrorFiltersWithOptions(request: ListTrafficMirrorFiltersRequest, runtime: Util.RuntimeOptions): ListTrafficMirrorFiltersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterIds)) {
    query['TrafficMirrorFilterIds'] = request.trafficMirrorFilterIds;
  }
  if (!Util.isUnset(request.trafficMirrorFilterName)) {
    query['TrafficMirrorFilterName'] = request.trafficMirrorFilterName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTrafficMirrorFilters',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTrafficMirrorFilters(request: ListTrafficMirrorFiltersRequest): ListTrafficMirrorFiltersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrafficMirrorFiltersWithOptions(request, runtime);
}

model ListTrafficMirrorSessionsRequest {
  enabled?: boolean(name='Enabled', example='false'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority', example='1'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
  trafficMirrorSessionIds?: [ string ](name='TrafficMirrorSessionIds', example='tms-j6cla50buc44ap8tu****'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', example='abc'),
  trafficMirrorSourceId?: string(name='TrafficMirrorSourceId', example='eni-j6c8znm5l1yt4sox*****'),
  trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', example='eni-j6c2fp57q8rr47rp****'),
  virtualNetworkId?: int32(name='VirtualNetworkId', example='10'),
}

model ListTrafficMirrorSessionsResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='739CA01C-92EB-4C69-BCC0-280149C6F41E'),
  totalCount?: string(name='TotalCount', example='1'),
  trafficMirrorSessions?: [ 
    {
      enabled?: boolean(name='Enabled', example='false'),
      packetLength?: int32(name='PacketLength', example='1500'),
      priority?: int32(name='Priority', example='1'),
      trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
      trafficMirrorSessionBusinessStatus?: string(name='TrafficMirrorSessionBusinessStatus', example='Normal'),
      trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', example='This is a session.'),
      trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****'),
      trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', example='abc'),
      trafficMirrorSessionStatus?: string(name='TrafficMirrorSessionStatus', example='Created'),
      trafficMirrorSourceIds?: [ string ](name='TrafficMirrorSourceIds'),
      trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', example='eni-j6c2fp57q8rr47rp****'),
      trafficMirrorTargetType?: string(name='TrafficMirrorTargetType', example='NetworkInterface'),
      virtualNetworkId?: int32(name='VirtualNetworkId', example='10'),
    }
  ](name='TrafficMirrorSessions'),
}

model ListTrafficMirrorSessionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTrafficMirrorSessionsResponseBody(name='body'),
}

async function listTrafficMirrorSessionsWithOptions(request: ListTrafficMirrorSessionsRequest, runtime: Util.RuntimeOptions): ListTrafficMirrorSessionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterId)) {
    query['TrafficMirrorFilterId'] = request.trafficMirrorFilterId;
  }
  if (!Util.isUnset(request.trafficMirrorSessionIds)) {
    query['TrafficMirrorSessionIds'] = request.trafficMirrorSessionIds;
  }
  if (!Util.isUnset(request.trafficMirrorSessionName)) {
    query['TrafficMirrorSessionName'] = request.trafficMirrorSessionName;
  }
  if (!Util.isUnset(request.trafficMirrorSourceId)) {
    query['TrafficMirrorSourceId'] = request.trafficMirrorSourceId;
  }
  if (!Util.isUnset(request.trafficMirrorTargetId)) {
    query['TrafficMirrorTargetId'] = request.trafficMirrorTargetId;
  }
  if (!Util.isUnset(request.virtualNetworkId)) {
    query['VirtualNetworkId'] = request.virtualNetworkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTrafficMirrorSessions',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTrafficMirrorSessions(request: ListTrafficMirrorSessionsRequest): ListTrafficMirrorSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrafficMirrorSessionsWithOptions(request, runtime);
}

model ListVirtualPhysicalConnectionsRequest {
  isConfirmed?: boolean(name='IsConfirmed', example='true'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='dd20****'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tags?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tags'),
  virtualPhysicalConnectionAliUids?: [ string ](name='VirtualPhysicalConnectionAliUids', example='189xxx'),
  virtualPhysicalConnectionBusinessStatus?: string(name='VirtualPhysicalConnectionBusinessStatus', example='Normal'),
  virtualPhysicalConnectionIds?: [ string ](name='VirtualPhysicalConnectionIds', example='pc-xxx'),
  virtualPhysicalConnectionStatuses?: [ string ](name='VirtualPhysicalConnectionStatuses', example='pc-xxx'),
  vlanIds?: [ string ](name='VlanIds', example='pc-xxx'),
}

model ListVirtualPhysicalConnectionsResponseBody = {
  count?: int32(name='Count', example='1'),
  nextToken?: string(name='NextToken', example='dd20****'),
  requestId?: string(name='RequestId', example='2A55F69E-EE3D-5CBE-8805-734F7D5B46B9'),
  totalCount?: int32(name='TotalCount', example='1'),
  virtualPhysicalConnections?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-finance-yh-E'),
      adLocation?: string(name='AdLocation'),
      aliUid?: string(name='AliUid', example='253460731706911258'),
      bandwidth?: long(name='Bandwidth', example='50'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='Prepaid'),
      circuitCode?: string(name='CircuitCode', example='longtel001'),
      creationTime?: string(name='CreationTime', example='2021-06-08T12:20:55'),
      description?: string(name='Description', example='desctest'),
      enabledTime?: string(name='EnabledTime', example='2021-10-08T10:44Z'),
      endTime?: string(name='EndTime', example='2021-11-08T16:00:00Z'),
      expectSpec?: string(name='ExpectSpec', example='50M'),
      lineOperator?: string(name='LineOperator', example='CU'),
      loaStatus?: string(name='LoaStatus', example='Available'),
      name?: string(name='Name', example='nametest'),
      orderMode?: string(name='OrderMode', example='PayByPhysicalConnectionOwner'),
      parentPhysicalConnectionAliUid?: string(name='ParentPhysicalConnectionAliUid', example='283117732402483989'),
      parentPhysicalConnectionId?: string(name='ParentPhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
      peerLocation?: string(name='PeerLocation'),
      physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1mrgfbtmc9brre7****'),
      portNumber?: string(name='PortNumber', example='80'),
      portType?: string(name='PortType', example='10GBase-LR'),
      productType?: string(name='ProductType', example='VirtualPhysicalConnection'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-119mfjzm****'),
      resourceGroupId?: string(name='ResourceGroupId'),
      spec?: string(name='Spec', example='50M'),
      status?: string(name='Status', example='Enabled'),
      type?: string(name='Type', example='VPC'),
      virtualPhysicalConnectionStatus?: string(name='VirtualPhysicalConnectionStatus', example='Confirmed'),
      vlanId?: string(name='VlanId', example='10'),
    }
  ](name='VirtualPhysicalConnections'),
}

model ListVirtualPhysicalConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVirtualPhysicalConnectionsResponseBody(name='body'),
}

async function listVirtualPhysicalConnectionsWithOptions(request: ListVirtualPhysicalConnectionsRequest, runtime: Util.RuntimeOptions): ListVirtualPhysicalConnectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.isConfirmed)) {
    query['IsConfirmed'] = request.isConfirmed;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.virtualPhysicalConnectionAliUids)) {
    query['VirtualPhysicalConnectionAliUids'] = request.virtualPhysicalConnectionAliUids;
  }
  if (!Util.isUnset(request.virtualPhysicalConnectionBusinessStatus)) {
    query['VirtualPhysicalConnectionBusinessStatus'] = request.virtualPhysicalConnectionBusinessStatus;
  }
  if (!Util.isUnset(request.virtualPhysicalConnectionIds)) {
    query['VirtualPhysicalConnectionIds'] = request.virtualPhysicalConnectionIds;
  }
  if (!Util.isUnset(request.virtualPhysicalConnectionStatuses)) {
    query['VirtualPhysicalConnectionStatuses'] = request.virtualPhysicalConnectionStatuses;
  }
  if (!Util.isUnset(request.vlanIds)) {
    query['VlanIds'] = request.vlanIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVirtualPhysicalConnections',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVirtualPhysicalConnections(request: ListVirtualPhysicalConnectionsRequest): ListVirtualPhysicalConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVirtualPhysicalConnectionsWithOptions(request, runtime);
}

model ListVpcEndpointServicesByEndUserRequest {
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceName?: string(name='ServiceName'),
}

model ListVpcEndpointServicesByEndUserResponseBody = {
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  services?: [ 
    {
      defaultPolicyDocument?: string(name='DefaultPolicyDocument'),
      serviceDomain?: string(name='ServiceDomain'),
      serviceId?: string(name='ServiceId'),
      serviceName?: string(name='ServiceName'),
      supportPolicy?: boolean(name='SupportPolicy'),
    }
  ](name='Services'),
}

model ListVpcEndpointServicesByEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcEndpointServicesByEndUserResponseBody(name='body'),
}

async function listVpcEndpointServicesByEndUserWithOptions(request: ListVpcEndpointServicesByEndUserRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServicesByEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcEndpointServicesByEndUser',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcEndpointServicesByEndUser(request: ListVpcEndpointServicesByEndUserRequest): ListVpcEndpointServicesByEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServicesByEndUserWithOptions(request, runtime);
}

model ListVpcGatewayEndpointsRequest {
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceName?: string(name='ServiceName'),
}

model ListVpcGatewayEndpointsResponseBody = {
  endpoints?: [ 
    {
      associatedRouteTables?: [ string ](name='AssociatedRouteTables'),
      creationTime?: string(name='CreationTime'),
      endpointDescription?: string(name='EndpointDescription'),
      endpointId?: string(name='EndpointId'),
      endpointName?: string(name='EndpointName'),
      endpointStatus?: string(name='EndpointStatus'),
      policyDocument?: string(name='PolicyDocument'),
      serviceName?: string(name='ServiceName'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Endpoints'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListVpcGatewayEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcGatewayEndpointsResponseBody(name='body'),
}

async function listVpcGatewayEndpointsWithOptions(request: ListVpcGatewayEndpointsRequest, runtime: Util.RuntimeOptions): ListVpcGatewayEndpointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.endpointName)) {
    query['EndpointName'] = request.endpointName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcGatewayEndpoints',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcGatewayEndpoints(request: ListVpcGatewayEndpointsRequest): ListVpcGatewayEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcGatewayEndpointsWithOptions(request, runtime);
}

model ListVpnCertificateAssociationsRequest {
  certificateId?: [ string ](name='CertificateId', example='6bfe4218-ea1d****'),
  certificateType?: string(name='CertificateType', example='Signature'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be0****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vpnGatewayId?: [ string ](name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm****'),
}

model ListVpnCertificateAssociationsResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be****'),
  requestId?: string(name='RequestId', example='197AF2BD-547F-470C-B29A-8400400233EB'),
  totalCount?: int32(name='TotalCount', example='4'),
  vpnCertificateRelations?: [ 
    {
      associationTime?: string(name='AssociationTime', example='2020-12-29T09:30:29Z'),
      certificateId?: string(name='CertificateId', example='6bfe4218-ea1d****'),
      certificateType?: string(name='CertificateType', example='Signature'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1usbiorilk51760****'),
    }
  ](name='VpnCertificateRelations'),
}

model ListVpnCertificateAssociationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpnCertificateAssociationsResponseBody(name='body'),
}

async function listVpnCertificateAssociationsWithOptions(request: ListVpnCertificateAssociationsRequest, runtime: Util.RuntimeOptions): ListVpnCertificateAssociationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateId)) {
    query['CertificateId'] = request.certificateId;
  }
  if (!Util.isUnset(request.certificateType)) {
    query['CertificateType'] = request.certificateType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVpnCertificateAssociations',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpnCertificateAssociations(request: ListVpnCertificateAssociationsRequest): ListVpnCertificateAssociationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpnCertificateAssociationsWithOptions(request, runtime);
}

model ModifyBgpGroupAttributeRequest {
  authKey?: string(name='AuthKey', example='!PWZ2****'),
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-wz9f62v4fbg2g****'),
  clearAuthKey?: boolean(name='ClearAuthKey', example='false'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', example='BGP'),
  isFakeAsn?: boolean(name='IsFakeAsn', example='false'),
  localAsn?: long(name='LocalAsn'),
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerAsn?: long(name='PeerAsn', example='1****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeQuota?: int32(name='RouteQuota'),
}

model ModifyBgpGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', example='8C3C6D7C-A1CE-4FD8-BC57-DC493A55F76F'),
}

model ModifyBgpGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBgpGroupAttributeResponseBody(name='body'),
}

async function modifyBgpGroupAttributeWithOptions(request: ModifyBgpGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifyBgpGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authKey)) {
    query['AuthKey'] = request.authKey;
  }
  if (!Util.isUnset(request.bgpGroupId)) {
    query['BgpGroupId'] = request.bgpGroupId;
  }
  if (!Util.isUnset(request.clearAuthKey)) {
    query['ClearAuthKey'] = request.clearAuthKey;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.isFakeAsn)) {
    query['IsFakeAsn'] = request.isFakeAsn;
  }
  if (!Util.isUnset(request.localAsn)) {
    query['LocalAsn'] = request.localAsn;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerAsn)) {
    query['PeerAsn'] = request.peerAsn;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeQuota)) {
    query['RouteQuota'] = request.routeQuota;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBgpGroupAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBgpGroupAttribute(request: ModifyBgpGroupAttributeRequest): ModifyBgpGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBgpGroupAttributeWithOptions(request, runtime);
}

model ModifyBgpPeerAttributeRequest {
  bfdMultiHop?: int32(name='BfdMultiHop', example='3'),
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-m5eo12jxuw2hc0uqq****'),
  bgpPeerId?: string(name='BgpPeerId', example='bgp-m5eoyp2mwegk8ce9v****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  enableBfd?: boolean(name='EnableBfd', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerIpAddress?: string(name='PeerIpAddress', example='116.62.XX.XX'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyBgpPeerAttributeResponseBody = {
  requestId?: string(name='RequestId', example='D4B7649A-61BB-4C64-A586-1DFF1EDA6A42'),
}

model ModifyBgpPeerAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBgpPeerAttributeResponseBody(name='body'),
}

async function modifyBgpPeerAttributeWithOptions(request: ModifyBgpPeerAttributeRequest, runtime: Util.RuntimeOptions): ModifyBgpPeerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bfdMultiHop)) {
    query['BfdMultiHop'] = request.bfdMultiHop;
  }
  if (!Util.isUnset(request.bgpGroupId)) {
    query['BgpGroupId'] = request.bgpGroupId;
  }
  if (!Util.isUnset(request.bgpPeerId)) {
    query['BgpPeerId'] = request.bgpPeerId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enableBfd)) {
    query['EnableBfd'] = request.enableBfd;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerIpAddress)) {
    query['PeerIpAddress'] = request.peerIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBgpPeerAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBgpPeerAttribute(request: ModifyBgpPeerAttributeRequest): ModifyBgpPeerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBgpPeerAttributeWithOptions(request, runtime);
}

model ModifyCommonBandwidthPackageAttributeRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145****'),
  description?: string(name='Description'),
  name?: string(name='Name', example='test123'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyCommonBandwidthPackageAttributeResponseBody = {
  requestId?: string(name='RequestId', example='B450CAD8-50BC-4506-ADA7-35C6CE63E96B'),
}

model ModifyCommonBandwidthPackageAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCommonBandwidthPackageAttributeResponseBody(name='body'),
}

async function modifyCommonBandwidthPackageAttributeWithOptions(request: ModifyCommonBandwidthPackageAttributeRequest, runtime: Util.RuntimeOptions): ModifyCommonBandwidthPackageAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCommonBandwidthPackageAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCommonBandwidthPackageAttribute(request: ModifyCommonBandwidthPackageAttributeRequest): ModifyCommonBandwidthPackageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCommonBandwidthPackageAttributeWithOptions(request, runtime);
}

model ModifyCommonBandwidthPackageIpBandwidthRequest {
  bandwidth?: string(name='Bandwidth', example='500'),
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2zep6hw5d6y8exscd****'),
  eipId?: string(name='EipId', example='eip-2zewysoansu0svfbg****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyCommonBandwidthPackageIpBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='63D187BF-A30A-4DD6-B68D-FF182C96D8A2'),
}

model ModifyCommonBandwidthPackageIpBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCommonBandwidthPackageIpBandwidthResponseBody(name='body'),
}

async function modifyCommonBandwidthPackageIpBandwidthWithOptions(request: ModifyCommonBandwidthPackageIpBandwidthRequest, runtime: Util.RuntimeOptions): ModifyCommonBandwidthPackageIpBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.eipId)) {
    query['EipId'] = request.eipId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCommonBandwidthPackageIpBandwidth',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCommonBandwidthPackageIpBandwidth(request: ModifyCommonBandwidthPackageIpBandwidthRequest): ModifyCommonBandwidthPackageIpBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCommonBandwidthPackageIpBandwidthWithOptions(request, runtime);
}

model ModifyCommonBandwidthPackageSpecRequest {
  bandwidth?: string(name='Bandwidth', example='1000'),
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyCommonBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId', example='7F129000-F929-4AF5-BE8D-BAE434C795306'),
}

model ModifyCommonBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCommonBandwidthPackageSpecResponseBody(name='body'),
}

async function modifyCommonBandwidthPackageSpecWithOptions(request: ModifyCommonBandwidthPackageSpecRequest, runtime: Util.RuntimeOptions): ModifyCommonBandwidthPackageSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCommonBandwidthPackageSpec',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCommonBandwidthPackageSpec(request: ModifyCommonBandwidthPackageSpecRequest): ModifyCommonBandwidthPackageSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCommonBandwidthPackageSpecWithOptions(request, runtime);
}

model ModifyCustomerGatewayAttributeRequest {
  authKey?: string(name='AuthKey', example='AuthKey****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44****'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
  description?: string(name='Description', example='desctest'),
  name?: string(name='Name', example='nametest'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyCustomerGatewayAttributeResponseBody = {
  createTime?: long(name='CreateTime', example='1492747187000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
  description?: string(name='Description', example='desctest'),
  ipAddress?: string(name='IpAddress', example='139.32.XX.XX'),
  name?: string(name='Name', example='nametest'),
  requestId?: string(name='RequestId', example='8AA5CE21-2E6A-4530-BDF5-F055849476E6'),
}

model ModifyCustomerGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCustomerGatewayAttributeResponseBody(name='body'),
}

async function modifyCustomerGatewayAttributeWithOptions(request: ModifyCustomerGatewayAttributeRequest, runtime: Util.RuntimeOptions): ModifyCustomerGatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authKey)) {
    query['AuthKey'] = request.authKey;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.customerGatewayId)) {
    query['CustomerGatewayId'] = request.customerGatewayId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCustomerGatewayAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCustomerGatewayAttribute(request: ModifyCustomerGatewayAttributeRequest): ModifyCustomerGatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCustomerGatewayAttributeWithOptions(request, runtime);
}

model ModifyEipAddressAttributeRequest {
  allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7uj6i0d****'),
  bandwidth?: string(name='Bandwidth', example='100'),
  description?: string(name='Description', example='abc'),
  name?: string(name='Name', example='Test123'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyEipAddressAttributeResponseBody(name='body'),
}

async function modifyEipAddressAttributeWithOptions(request: ModifyEipAddressAttributeRequest, runtime: Util.RuntimeOptions): ModifyEipAddressAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEipAddressAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyEipAddressAttribute(request: ModifyEipAddressAttributeRequest): ModifyEipAddressAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEipAddressAttributeWithOptions(request, runtime);
}

model ModifyExpressCloudConnectionAttributeRequest {
  bgpAs?: string(name='BgpAs', example='sag-ejfge***'),
  ceIp?: string(name='CeIp', example='172.16.**.**'),
  description?: string(name='Description', example='ECC'),
  eccId?: string(name='EccId', example='ecc-bp1t9osmuln*******'),
  name?: string(name='Name', example='doctest'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peIp?: string(name='PeIp', example='10.10.**.**'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyExpressCloudConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId', example='E6385514-B0CC-48E3-B9F9-F7BFF64460A2'),
}

model ModifyExpressCloudConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyExpressCloudConnectionAttributeResponseBody(name='body'),
}

async function modifyExpressCloudConnectionAttributeWithOptions(request: ModifyExpressCloudConnectionAttributeRequest, runtime: Util.RuntimeOptions): ModifyExpressCloudConnectionAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bgpAs)) {
    query['BgpAs'] = request.bgpAs;
  }
  if (!Util.isUnset(request.ceIp)) {
    query['CeIp'] = request.ceIp;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eccId)) {
    query['EccId'] = request.eccId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peIp)) {
    query['PeIp'] = request.peIp;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyExpressCloudConnectionAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyExpressCloudConnectionAttribute(request: ModifyExpressCloudConnectionAttributeRequest): ModifyExpressCloudConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyExpressCloudConnectionAttributeWithOptions(request, runtime);
}

model ModifyExpressCloudConnectionBandwidthRequest {
  bandwidth?: string(name='Bandwidth', example='2'),
  eccId?: string(name='EccId', example='ecc-xxxxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyExpressCloudConnectionBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='E6385514-B0CC-48E3-B9F9-F7BFF64460A2'),
}

model ModifyExpressCloudConnectionBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyExpressCloudConnectionBandwidthResponseBody(name='body'),
}

async function modifyExpressCloudConnectionBandwidthWithOptions(request: ModifyExpressCloudConnectionBandwidthRequest, runtime: Util.RuntimeOptions): ModifyExpressCloudConnectionBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.eccId)) {
    query['EccId'] = request.eccId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyExpressCloudConnectionBandwidth',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyExpressCloudConnectionBandwidth(request: ModifyExpressCloudConnectionBandwidthRequest): ModifyExpressCloudConnectionBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyExpressCloudConnectionBandwidthWithOptions(request, runtime);
}

model ModifyFlowLogAttributeRequest {
  aggregationInterval?: int32(name='AggregationInterval', example='1'),
  description?: string(name='Description', example='This is my Flowlog.'),
  flowLogId?: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****'),
  flowLogName?: string(name='FlowLogName', example='myFlowlog'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyFlowLogAttributeResponseBody = {
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
}

model ModifyFlowLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFlowLogAttributeResponseBody(name='body'),
}

async function modifyFlowLogAttributeWithOptions(request: ModifyFlowLogAttributeRequest, runtime: Util.RuntimeOptions): ModifyFlowLogAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregationInterval)) {
    query['AggregationInterval'] = request.aggregationInterval;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.flowLogName)) {
    query['FlowLogName'] = request.flowLogName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFlowLogAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFlowLogAttribute(request: ModifyFlowLogAttributeRequest): ModifyFlowLogAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFlowLogAttributeWithOptions(request, runtime);
}

model ModifyForwardEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  externalIp?: string(name='ExternalIp', example='116.85.XX.XX'),
  externalPort?: string(name='ExternalPort', example='80'),
  forwardEntryId?: string(name='ForwardEntryId', example='fwd-8vbn3bc8roygjp0gy****'),
  forwardEntryName?: string(name='ForwardEntryName', example='test'),
  forwardTableId?: string(name='ForwardTableId', example='ftb-8vbx8xu2lqj9qb334****'),
  internalIp?: string(name='InternalIp', example='10.0.0.78'),
  internalPort?: string(name='InternalPort', example='80'),
  ipProtocol?: string(name='IpProtocol', example='TCP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portBreak?: boolean(name='PortBreak', example='false'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyForwardEntryResponseBody = {
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifyForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyForwardEntryResponseBody(name='body'),
}

async function modifyForwardEntryWithOptions(request: ModifyForwardEntryRequest, runtime: Util.RuntimeOptions): ModifyForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.externalPort)) {
    query['ExternalPort'] = request.externalPort;
  }
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  if (!Util.isUnset(request.forwardEntryName)) {
    query['ForwardEntryName'] = request.forwardEntryName;
  }
  if (!Util.isUnset(request.forwardTableId)) {
    query['ForwardTableId'] = request.forwardTableId;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portBreak)) {
    query['PortBreak'] = request.portBreak;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyForwardEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyForwardEntryWithOptions(request, runtime);
}

model ModifyFullNatEntryAttributeRequest {
  accessIp?: string(name='AccessIp', example='192.168.XX.XX'),
  accessPort?: string(name='AccessPort', example='80'),
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  fullNatEntryDescription?: string(name='FullNatEntryDescription', example='abcd'),
  fullNatEntryId?: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****'),
  fullNatEntryName?: string(name='FullNatEntryName', example='modify'),
  fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****'),
  ipProtocol?: string(name='IpProtocol', example='TCP'),
  natIp?: string(name='NatIp', example='192.168.XX.XX'),
  natIpPort?: string(name='NatIpPort', example='80'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-gw8g131ef2dnbu3k****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyFullNatEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifyFullNatEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFullNatEntryAttributeResponseBody(name='body'),
}

async function modifyFullNatEntryAttributeWithOptions(request: ModifyFullNatEntryAttributeRequest, runtime: Util.RuntimeOptions): ModifyFullNatEntryAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessIp)) {
    query['AccessIp'] = request.accessIp;
  }
  if (!Util.isUnset(request.accessPort)) {
    query['AccessPort'] = request.accessPort;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fullNatEntryDescription)) {
    query['FullNatEntryDescription'] = request.fullNatEntryDescription;
  }
  if (!Util.isUnset(request.fullNatEntryId)) {
    query['FullNatEntryId'] = request.fullNatEntryId;
  }
  if (!Util.isUnset(request.fullNatEntryName)) {
    query['FullNatEntryName'] = request.fullNatEntryName;
  }
  if (!Util.isUnset(request.fullNatTableId)) {
    query['FullNatTableId'] = request.fullNatTableId;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.natIp)) {
    query['NatIp'] = request.natIp;
  }
  if (!Util.isUnset(request.natIpPort)) {
    query['NatIpPort'] = request.natIpPort;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFullNatEntryAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFullNatEntryAttribute(request: ModifyFullNatEntryAttributeRequest): ModifyFullNatEntryAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFullNatEntryAttributeWithOptions(request, runtime);
}

model ModifyGlobalAccelerationInstanceAttributesRequest {
  description?: string(name='Description', example='My GA'),
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-14fdsf3****'),
  name?: string(name='Name', example='GA-1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyGlobalAccelerationInstanceAttributesResponseBody = {
  requestId?: string(name='RequestId', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model ModifyGlobalAccelerationInstanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyGlobalAccelerationInstanceAttributesResponseBody(name='body'),
}

async function modifyGlobalAccelerationInstanceAttributesWithOptions(request: ModifyGlobalAccelerationInstanceAttributesRequest, runtime: Util.RuntimeOptions): ModifyGlobalAccelerationInstanceAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.globalAccelerationInstanceId)) {
    query['GlobalAccelerationInstanceId'] = request.globalAccelerationInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyGlobalAccelerationInstanceAttributes',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyGlobalAccelerationInstanceAttributes(request: ModifyGlobalAccelerationInstanceAttributesRequest): ModifyGlobalAccelerationInstanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGlobalAccelerationInstanceAttributesWithOptions(request, runtime);
}

model ModifyGlobalAccelerationInstanceSpecRequest {
  bandwidth?: string(name='Bandwidth', example='10'),
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-32s33s****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyGlobalAccelerationInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model ModifyGlobalAccelerationInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyGlobalAccelerationInstanceSpecResponseBody(name='body'),
}

async function modifyGlobalAccelerationInstanceSpecWithOptions(request: ModifyGlobalAccelerationInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyGlobalAccelerationInstanceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.globalAccelerationInstanceId)) {
    query['GlobalAccelerationInstanceId'] = request.globalAccelerationInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyGlobalAccelerationInstanceSpec',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyGlobalAccelerationInstanceSpec(request: ModifyGlobalAccelerationInstanceSpecRequest): ModifyGlobalAccelerationInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGlobalAccelerationInstanceSpecWithOptions(request, runtime);
}

model ModifyHaVipAttributeRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e0****'),
  description?: string(name='Description', example='This is my HaVip.'),
  haVipId?: string(name='HaVipId', example='havip-2zeo05qre24nhrqp****'),
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyHaVipAttributeResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model ModifyHaVipAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyHaVipAttributeResponseBody(name='body'),
}

async function modifyHaVipAttributeWithOptions(request: ModifyHaVipAttributeRequest, runtime: Util.RuntimeOptions): ModifyHaVipAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyHaVipAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyHaVipAttribute(request: ModifyHaVipAttributeRequest): ModifyHaVipAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHaVipAttributeWithOptions(request, runtime);
}

model ModifyIPv6TranslatorAclAttributeRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  aclName?: string(name='AclName', example='acl1'),
  clientToken?: string(name='ClientToken', example='sha223ndd2333'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyIPv6TranslatorAclAttributeResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorAclAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIPv6TranslatorAclAttributeResponseBody(name='body'),
}

async function modifyIPv6TranslatorAclAttributeWithOptions(request: ModifyIPv6TranslatorAclAttributeRequest, runtime: Util.RuntimeOptions): ModifyIPv6TranslatorAclAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.aclName)) {
    query['AclName'] = request.aclName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIPv6TranslatorAclAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIPv6TranslatorAclAttribute(request: ModifyIPv6TranslatorAclAttributeRequest): ModifyIPv6TranslatorAclAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIPv6TranslatorAclAttributeWithOptions(request, runtime);
}

model ModifyIPv6TranslatorAclListEntryRequest {
  aclEntryComment?: string(name='AclEntryComment', example='client IP'),
  aclEntryId?: string(name='AclEntryId', example='ipv6transaclentry-bp1jzyn7ra8pyxehd****'),
  aclId?: string(name='AclId', example='ipv6transacl-bp1b4z3tleyhq1s50****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyIPv6TranslatorAclListEntryResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorAclListEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIPv6TranslatorAclListEntryResponseBody(name='body'),
}

async function modifyIPv6TranslatorAclListEntryWithOptions(request: ModifyIPv6TranslatorAclListEntryRequest, runtime: Util.RuntimeOptions): ModifyIPv6TranslatorAclListEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclEntryComment)) {
    query['AclEntryComment'] = request.aclEntryComment;
  }
  if (!Util.isUnset(request.aclEntryId)) {
    query['AclEntryId'] = request.aclEntryId;
  }
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIPv6TranslatorAclListEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIPv6TranslatorAclListEntry(request: ModifyIPv6TranslatorAclListEntryRequest): ModifyIPv6TranslatorAclListEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIPv6TranslatorAclListEntryWithOptions(request, runtime);
}

model ModifyIPv6TranslatorAttributeRequest {
  clientToken?: string(name='ClientToken', example='sha1111'),
  description?: string(name='Description', example='instancedescription'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
  name?: string(name='Name', example='instancename'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyIPv6TranslatorAttributeResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIPv6TranslatorAttributeResponseBody(name='body'),
}

async function modifyIPv6TranslatorAttributeWithOptions(request: ModifyIPv6TranslatorAttributeRequest, runtime: Util.RuntimeOptions): ModifyIPv6TranslatorAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipv6TranslatorId)) {
    query['Ipv6TranslatorId'] = request.ipv6TranslatorId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIPv6TranslatorAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIPv6TranslatorAttribute(request: ModifyIPv6TranslatorAttributeRequest): ModifyIPv6TranslatorAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIPv6TranslatorAttributeWithOptions(request, runtime);
}

model ModifyIPv6TranslatorBandwidthRequest {
  autoPay?: boolean(name='AutoPay', example='false'),
  bandwidth?: int32(name='Bandwidth', example='2'),
  clientToken?: string(name='ClientToken', example='sha1111'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyIPv6TranslatorBandwidthResponseBody = {
  orderId?: string(name='OrderId', example='202304500950739'),
  requestId?: string(name='RequestId', example='EF8198EE-8FC9-49C2-A22E-xxxx'),
}

model ModifyIPv6TranslatorBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIPv6TranslatorBandwidthResponseBody(name='body'),
}

async function modifyIPv6TranslatorBandwidthWithOptions(request: ModifyIPv6TranslatorBandwidthRequest, runtime: Util.RuntimeOptions): ModifyIPv6TranslatorBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv6TranslatorId)) {
    query['Ipv6TranslatorId'] = request.ipv6TranslatorId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIPv6TranslatorBandwidth',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIPv6TranslatorBandwidth(request: ModifyIPv6TranslatorBandwidthRequest): ModifyIPv6TranslatorBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIPv6TranslatorBandwidthWithOptions(request, runtime);
}

model ModifyIPv6TranslatorEntryRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de27sou71g0lfxxxx'),
  aclStatus?: string(name='AclStatus', example='off'),
  aclType?: string(name='AclType', example='white'),
  allocateIpv6Port?: int32(name='AllocateIpv6Port', example='80'),
  backendIpv4Addr?: string(name='BackendIpv4Addr', example='47.11.xx.xxx'),
  backendIpv4Port?: int32(name='BackendIpv4Port', example='80'),
  entryBandwidth?: int32(name='EntryBandwidth', example='10'),
  entryDescription?: string(name='EntryDescription', example='entrydescription'),
  entryName?: string(name='EntryName', example='entry1'),
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6trans-bp1858ysxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transProtocol?: string(name='TransProtocol', example='tcp'),
}

model ModifyIPv6TranslatorEntryResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIPv6TranslatorEntryResponseBody(name='body'),
}

async function modifyIPv6TranslatorEntryWithOptions(request: ModifyIPv6TranslatorEntryRequest, runtime: Util.RuntimeOptions): ModifyIPv6TranslatorEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.aclStatus)) {
    query['AclStatus'] = request.aclStatus;
  }
  if (!Util.isUnset(request.aclType)) {
    query['AclType'] = request.aclType;
  }
  if (!Util.isUnset(request.allocateIpv6Port)) {
    query['AllocateIpv6Port'] = request.allocateIpv6Port;
  }
  if (!Util.isUnset(request.backendIpv4Addr)) {
    query['BackendIpv4Addr'] = request.backendIpv4Addr;
  }
  if (!Util.isUnset(request.backendIpv4Port)) {
    query['BackendIpv4Port'] = request.backendIpv4Port;
  }
  if (!Util.isUnset(request.entryBandwidth)) {
    query['EntryBandwidth'] = request.entryBandwidth;
  }
  if (!Util.isUnset(request.entryDescription)) {
    query['EntryDescription'] = request.entryDescription;
  }
  if (!Util.isUnset(request.entryName)) {
    query['EntryName'] = request.entryName;
  }
  if (!Util.isUnset(request.ipv6TranslatorEntryId)) {
    query['Ipv6TranslatorEntryId'] = request.ipv6TranslatorEntryId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.transProtocol)) {
    query['TransProtocol'] = request.transProtocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIPv6TranslatorEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIPv6TranslatorEntry(request: ModifyIPv6TranslatorEntryRequest): ModifyIPv6TranslatorEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIPv6TranslatorEntryWithOptions(request, runtime);
}

model ModifyIpv6AddressAttributeRequest {
  description?: string(name='Description', example='test'),
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6-hp32vv2klzw4yerdf****'),
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyIpv6AddressAttributeResponseBody = {
  requestId?: string(name='RequestId', example='D560AF68-4CE8-4A5C-B3FE-469F558094D0'),
}

model ModifyIpv6AddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpv6AddressAttributeResponseBody(name='body'),
}

async function modifyIpv6AddressAttributeWithOptions(request: ModifyIpv6AddressAttributeRequest, runtime: Util.RuntimeOptions): ModifyIpv6AddressAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipv6AddressId)) {
    query['Ipv6AddressId'] = request.ipv6AddressId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIpv6AddressAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIpv6AddressAttribute(request: ModifyIpv6AddressAttributeRequest): ModifyIpv6AddressAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpv6AddressAttributeWithOptions(request, runtime);
}

model ModifyIpv6GatewayAttributeRequest {
  description?: string(name='Description', example='ipv6description'),
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp39kh1ya51yzp2lu****'),
  name?: string(name='Name', example='ipv6name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyIpv6GatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model ModifyIpv6GatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpv6GatewayAttributeResponseBody(name='body'),
}

async function modifyIpv6GatewayAttributeWithOptions(request: ModifyIpv6GatewayAttributeRequest, runtime: Util.RuntimeOptions): ModifyIpv6GatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipv6GatewayId)) {
    query['Ipv6GatewayId'] = request.ipv6GatewayId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIpv6GatewayAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIpv6GatewayAttribute(request: ModifyIpv6GatewayAttributeRequest): ModifyIpv6GatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpv6GatewayAttributeWithOptions(request, runtime);
}

model ModifyIpv6GatewaySpecRequest {
  clientToken?: string(name='ClientToken', example='123456'),
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-123456xxxxxxxx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spec?: string(name='Spec'),
}

model ModifyIpv6GatewaySpecResponseBody = {
  requestId?: string(name='RequestId', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model ModifyIpv6GatewaySpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpv6GatewaySpecResponseBody(name='body'),
}

async function modifyIpv6GatewaySpecWithOptions(request: ModifyIpv6GatewaySpecRequest, runtime: Util.RuntimeOptions): ModifyIpv6GatewaySpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv6GatewayId)) {
    query['Ipv6GatewayId'] = request.ipv6GatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIpv6GatewaySpec',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIpv6GatewaySpec(request: ModifyIpv6GatewaySpecRequest): ModifyIpv6GatewaySpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpv6GatewaySpecWithOptions(request, runtime);
}

model ModifyIpv6InternetBandwidthRequest {
  bandwidth?: long(name='Bandwidth', example='4'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyIpv6InternetBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='D560AF68-4CE8-4A5C-B3FE-469F558094D0'),
}

model ModifyIpv6InternetBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpv6InternetBandwidthResponseBody(name='body'),
}

async function modifyIpv6InternetBandwidthWithOptions(request: ModifyIpv6InternetBandwidthRequest, runtime: Util.RuntimeOptions): ModifyIpv6InternetBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv6AddressId)) {
    query['Ipv6AddressId'] = request.ipv6AddressId;
  }
  if (!Util.isUnset(request.ipv6InternetBandwidthId)) {
    query['Ipv6InternetBandwidthId'] = request.ipv6InternetBandwidthId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIpv6InternetBandwidth',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIpv6InternetBandwidth(request: ModifyIpv6InternetBandwidthRequest): ModifyIpv6InternetBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpv6InternetBandwidthWithOptions(request, runtime);
}

model ModifyNatGatewayAttributeRequest {
  description?: string(name='Description', example='Description'),
  eipBindMode?: string(name='EipBindMode', example='NAT'),
  icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', example='false'),
  name?: string(name='Name', example='nat123'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-2ze0dcn4mq31qx2jc****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyNatGatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', example='AB5F62CF-2B60-4458-A756-42C9DFE108D1'),
}

model ModifyNatGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNatGatewayAttributeResponseBody(name='body'),
}

async function modifyNatGatewayAttributeWithOptions(request: ModifyNatGatewayAttributeRequest, runtime: Util.RuntimeOptions): ModifyNatGatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eipBindMode)) {
    query['EipBindMode'] = request.eipBindMode;
  }
  if (!Util.isUnset(request.icmpReplyEnabled)) {
    query['IcmpReplyEnabled'] = request.icmpReplyEnabled;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNatGatewayAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNatGatewayAttribute(request: ModifyNatGatewayAttributeRequest): ModifyNatGatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNatGatewayAttributeWithOptions(request, runtime);
}

model ModifyNatGatewaySpecRequest {
  autoPay?: boolean(name='AutoPay', example='false'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655****'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spec?: string(name='Spec', example='Middle'),
}

model ModifyNatGatewaySpecResponseBody = {
  requestId?: string(name='RequestId', example='DBD4E4A2-786E-4BD2-8EB6-107FFC2B5B7D'),
}

model ModifyNatGatewaySpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNatGatewaySpecResponseBody(name='body'),
}

async function modifyNatGatewaySpecWithOptions(request: ModifyNatGatewaySpecRequest, runtime: Util.RuntimeOptions): ModifyNatGatewaySpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNatGatewaySpec',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNatGatewaySpec(request: ModifyNatGatewaySpecRequest): ModifyNatGatewaySpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNatGatewaySpecWithOptions(request, runtime);
}

model ModifyNatIpAttributeRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  natIpDescription?: string(name='NatIpDescription', example='test'),
  natIpId?: string(name='NatIpId', example='vpcnatip-gw8e1n11f44wpg****'),
  natIpName?: string(name='NatIpName', example='newname'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyNatIpAttributeResponseBody = {
  requestId?: string(name='RequestId', example='6CC9456C-2E29-452A-9180-B6926E51B5CA'),
}

model ModifyNatIpAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNatIpAttributeResponseBody(name='body'),
}

async function modifyNatIpAttributeWithOptions(request: ModifyNatIpAttributeRequest, runtime: Util.RuntimeOptions): ModifyNatIpAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natIpDescription)) {
    query['NatIpDescription'] = request.natIpDescription;
  }
  if (!Util.isUnset(request.natIpId)) {
    query['NatIpId'] = request.natIpId;
  }
  if (!Util.isUnset(request.natIpName)) {
    query['NatIpName'] = request.natIpName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNatIpAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNatIpAttribute(request: ModifyNatIpAttributeRequest): ModifyNatIpAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNatIpAttributeWithOptions(request, runtime);
}

model ModifyNatIpCidrAttributeRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', example='false'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
  natIpCidr?: string(name='NatIpCidr', example='172.16.0.0/24'),
  natIpCidrDescription?: string(name='NatIpCidrDescription', example='newtest'),
  natIpCidrName?: string(name='NatIpCidrName', example='newname'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='eu-central-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyNatIpCidrAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyNatIpCidrAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNatIpCidrAttributeResponseBody(name='body'),
}

async function modifyNatIpCidrAttributeWithOptions(request: ModifyNatIpCidrAttributeRequest, runtime: Util.RuntimeOptions): ModifyNatIpCidrAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natIpCidr)) {
    query['NatIpCidr'] = request.natIpCidr;
  }
  if (!Util.isUnset(request.natIpCidrDescription)) {
    query['NatIpCidrDescription'] = request.natIpCidrDescription;
  }
  if (!Util.isUnset(request.natIpCidrName)) {
    query['NatIpCidrName'] = request.natIpCidrName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNatIpCidrAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNatIpCidrAttribute(request: ModifyNatIpCidrAttributeRequest): ModifyNatIpCidrAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNatIpCidrAttributeWithOptions(request, runtime);
}

model ModifyNetworkAclAttributesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', example='This is my NetworkAcl.'),
  networkAclId?: string(name='NetworkAclId', example='acl-bp1lhl0taikrxxxxxxxx'),
  networkAclName?: string(name='NetworkAclName', example='acl-1'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyNetworkAclAttributesResponseBody = {
  requestId?: string(name='RequestId', example='8F76C3E4-B39F-465D-B8B3-50BAF03CA833'),
}

model ModifyNetworkAclAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNetworkAclAttributesResponseBody(name='body'),
}

async function modifyNetworkAclAttributesWithOptions(request: ModifyNetworkAclAttributesRequest, runtime: Util.RuntimeOptions): ModifyNetworkAclAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.networkAclName)) {
    query['NetworkAclName'] = request.networkAclName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkAclAttributes',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNetworkAclAttributes(request: ModifyNetworkAclAttributesRequest): ModifyNetworkAclAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkAclAttributesWithOptions(request, runtime);
}

model ModifyPhysicalConnectionAttributeRequest {
  circuitCode?: string(name='CircuitCode', example='longtel001'),
  clientToken?: string(name='ClientToken', example='efefe566754h'),
  description?: string(name='Description'),
  lineOperator?: string(name='LineOperator', example='CT'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerLocation?: string(name='PeerLocation'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjzm******'),
  portType?: string(name='PortType', example='1000Base-LX'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-119mfjzm7'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  bandwidth?: int32(name='bandwidth', example='5'),
}

model ModifyPhysicalConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId', example='013EE132-A109-4247-91B0-099A8FF49AD7'),
}

model ModifyPhysicalConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPhysicalConnectionAttributeResponseBody(name='body'),
}

async function modifyPhysicalConnectionAttributeWithOptions(request: ModifyPhysicalConnectionAttributeRequest, runtime: Util.RuntimeOptions): ModifyPhysicalConnectionAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.lineOperator)) {
    query['LineOperator'] = request.lineOperator;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerLocation)) {
    query['PeerLocation'] = request.peerLocation;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.portType)) {
    query['PortType'] = request.portType;
  }
  if (!Util.isUnset(request.redundantPhysicalConnectionId)) {
    query['RedundantPhysicalConnectionId'] = request.redundantPhysicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['bandwidth'] = request.bandwidth;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPhysicalConnectionAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPhysicalConnectionAttribute(request: ModifyPhysicalConnectionAttributeRequest): ModifyPhysicalConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhysicalConnectionAttributeWithOptions(request, runtime);
}

model ModifyRouteEntryRequest {
  description?: string(name='Description', example='EntryDescription'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeEntryId?: string(name='RouteEntryId', example='rte-acfvgfsghfdd****'),
  routeEntryName?: string(name='RouteEntryName', example='EntryName'),
}

model ModifyRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='861E6630-AEC0-4B2D-B214-6CB5E44B7F04'),
}

model ModifyRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRouteEntryResponseBody(name='body'),
}

async function modifyRouteEntryWithOptions(request: ModifyRouteEntryRequest, runtime: Util.RuntimeOptions): ModifyRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeEntryId)) {
    query['RouteEntryId'] = request.routeEntryId;
  }
  if (!Util.isUnset(request.routeEntryName)) {
    query['RouteEntryName'] = request.routeEntryName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRouteEntry(request: ModifyRouteEntryRequest): ModifyRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouteEntryWithOptions(request, runtime);
}

model ModifyRouteTableAttributesRequest {
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
  routeTableName?: string(name='RouteTableName', example='doctest'),
}

model ModifyRouteTableAttributesResponseBody = {
  requestId?: string(name='RequestId', example='62172DD5-6BAC-45DF-8D44'),
}

model ModifyRouteTableAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRouteTableAttributesResponseBody(name='body'),
}

async function modifyRouteTableAttributesWithOptions(request: ModifyRouteTableAttributesRequest, runtime: Util.RuntimeOptions): ModifyRouteTableAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.routeTableName)) {
    query['RouteTableName'] = request.routeTableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRouteTableAttributes',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRouteTableAttributes(request: ModifyRouteTableAttributesRequest): ModifyRouteTableAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouteTableAttributesWithOptions(request, runtime);
}

model ModifyRouterInterfaceAttributeRequest {
  deleteHealthCheckIp?: boolean(name='DeleteHealthCheckIp', example='false'),
  description?: string(name='Description'),
  hcRate?: int32(name='HcRate', example='2'),
  hcThreshold?: int32(name='HcThreshold', example='8'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', example='116.62.XX.XX'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', example='116.62.XX.XX'),
  name?: string(name='Name', example='TEST'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', example='ri-2zeo3xzyf38r4urz****'),
  oppositeInterfaceOwnerId?: long(name='OppositeInterfaceOwnerId', example='28768383240243****'),
  oppositeRouterId?: string(name='OppositeRouterId', example='vrt-bp1jcg5cmxjbl9xgc****'),
  oppositeRouterType?: string(name='OppositeRouterType', example='VBR'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urz****'),
}

model ModifyRouterInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model ModifyRouterInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRouterInterfaceAttributeResponseBody(name='body'),
}

async function modifyRouterInterfaceAttributeWithOptions(request: ModifyRouterInterfaceAttributeRequest, runtime: Util.RuntimeOptions): ModifyRouterInterfaceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteHealthCheckIp)) {
    query['DeleteHealthCheckIp'] = request.deleteHealthCheckIp;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.hcRate)) {
    query['HcRate'] = request.hcRate;
  }
  if (!Util.isUnset(request.hcThreshold)) {
    query['HcThreshold'] = request.hcThreshold;
  }
  if (!Util.isUnset(request.healthCheckSourceIp)) {
    query['HealthCheckSourceIp'] = request.healthCheckSourceIp;
  }
  if (!Util.isUnset(request.healthCheckTargetIp)) {
    query['HealthCheckTargetIp'] = request.healthCheckTargetIp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.oppositeInterfaceId)) {
    query['OppositeInterfaceId'] = request.oppositeInterfaceId;
  }
  if (!Util.isUnset(request.oppositeInterfaceOwnerId)) {
    query['OppositeInterfaceOwnerId'] = request.oppositeInterfaceOwnerId;
  }
  if (!Util.isUnset(request.oppositeRouterId)) {
    query['OppositeRouterId'] = request.oppositeRouterId;
  }
  if (!Util.isUnset(request.oppositeRouterType)) {
    query['OppositeRouterType'] = request.oppositeRouterType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRouterInterfaceAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRouterInterfaceAttribute(request: ModifyRouterInterfaceAttributeRequest): ModifyRouterInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouterInterfaceAttributeWithOptions(request, runtime);
}

model ModifyRouterInterfaceSpecRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urzd****'),
  spec?: string(name='Spec', example='Small.1'),
}

model ModifyRouterInterfaceSpecResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  spec?: string(name='Spec', example='Small.1'),
}

model ModifyRouterInterfaceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRouterInterfaceSpecResponseBody(name='body'),
}

async function modifyRouterInterfaceSpecWithOptions(request: ModifyRouterInterfaceSpecRequest, runtime: Util.RuntimeOptions): ModifyRouterInterfaceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRouterInterfaceSpec',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRouterInterfaceSpec(request: ModifyRouterInterfaceSpecRequest): ModifyRouterInterfaceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouterInterfaceSpecWithOptions(request, runtime);
}

model ModifySnatEntryRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snatEntryId?: string(name='SnatEntryId', example='snat-bp1vcgcf8tm0plqcg****'),
  snatEntryName?: string(name='SnatEntryName', example='SnatEntry-1'),
  snatIp?: string(name='SnatIp', example='47.98.XX.XX'),
  snatTableId?: string(name='SnatTableId', example='stb-8vbczigrhop8x5u3t****'),
}

model ModifySnatEntryResponseBody = {
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifySnatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySnatEntryResponseBody(name='body'),
}

async function modifySnatEntryWithOptions(request: ModifySnatEntryRequest, runtime: Util.RuntimeOptions): ModifySnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  if (!Util.isUnset(request.snatEntryName)) {
    query['SnatEntryName'] = request.snatEntryName;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  if (!Util.isUnset(request.snatTableId)) {
    query['SnatTableId'] = request.snatTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySnatEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySnatEntry(request: ModifySnatEntryRequest): ModifySnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySnatEntryWithOptions(request, runtime);
}

model ModifySslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  name?: string(name='Name', example='cert2'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osrc****'),
}

model ModifySslVpnClientCertResponseBody = {
  name?: string(name='Name', example='cert2'),
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osr****'),
}

model ModifySslVpnClientCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySslVpnClientCertResponseBody(name='body'),
}

async function modifySslVpnClientCertWithOptions(request: ModifySslVpnClientCertRequest, runtime: Util.RuntimeOptions): ModifySslVpnClientCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnClientCertId)) {
    query['SslVpnClientCertId'] = request.sslVpnClientCertId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySslVpnClientCert',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySslVpnClientCert(request: ModifySslVpnClientCertRequest): ModifySslVpnClientCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySslVpnClientCertWithOptions(request, runtime);
}

model ModifySslVpnServerRequest {
  cipher?: string(name='Cipher', example='AES-128-CBC'),
  clientIpPool?: string(name='ClientIpPool', example='10.30.30.0/24'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  compress?: boolean(name='Compress', example='true'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', example='false'),
  IDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-****'),
  IDaaSRegionId?: string(name='IDaaSRegionId', example='cn-hangzhou'),
  localSubnet?: string(name='LocalSubnet', example='10.20.20.0/24'),
  name?: string(name='Name', example='test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  port?: int32(name='Port', example='1194'),
  proto?: string(name='Proto', example='UDP'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
}

model ModifySslVpnServerResponseBody = {
  cipher?: string(name='Cipher', example='AES-128-CBC'),
  clientIpPool?: string(name='ClientIpPool', example='10.30.30.0/24'),
  compress?: boolean(name='Compress', example='false'),
  connections?: int32(name='Connections', example='0'),
  createTime?: long(name='CreateTime', example='1492753580000'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', example='false'),
  IDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-****'),
  internetIp?: string(name='InternetIp', example='47.98.XX.XX'),
  localSubnet?: string(name='LocalSubnet', example='10.20.20.0/24'),
  maxConnections?: int32(name='MaxConnections', example='5'),
  name?: string(name='Name', example='test'),
  port?: int32(name='Port', example='1194'),
  proto?: string(name='Proto', example='UDP'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='DF11D6F6-E35A-41C3-9B20-6FC8A901FE65'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifySslVpnServerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySslVpnServerResponseBody(name='body'),
}

async function modifySslVpnServerWithOptions(request: ModifySslVpnServerRequest, runtime: Util.RuntimeOptions): ModifySslVpnServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cipher)) {
    query['Cipher'] = request.cipher;
  }
  if (!Util.isUnset(request.clientIpPool)) {
    query['ClientIpPool'] = request.clientIpPool;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.compress)) {
    query['Compress'] = request.compress;
  }
  if (!Util.isUnset(request.enableMultiFactorAuth)) {
    query['EnableMultiFactorAuth'] = request.enableMultiFactorAuth;
  }
  if (!Util.isUnset(request.IDaaSInstanceId)) {
    query['IDaaSInstanceId'] = request.IDaaSInstanceId;
  }
  if (!Util.isUnset(request.IDaaSRegionId)) {
    query['IDaaSRegionId'] = request.IDaaSRegionId;
  }
  if (!Util.isUnset(request.localSubnet)) {
    query['LocalSubnet'] = request.localSubnet;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sslVpnServerId)) {
    query['SslVpnServerId'] = request.sslVpnServerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySslVpnServer',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySslVpnServer(request: ModifySslVpnServerRequest): ModifySslVpnServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySslVpnServerWithOptions(request, runtime);
}

model ModifyVRouterAttributeRequest {
  description?: string(name='Description', example='My VRouter'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  VRouterId?: string(name='VRouterId', example='vrt-gw0p7zigake75znix****'),
  VRouterName?: string(name='VRouterName', example='VRouter-1'),
}

model ModifyVRouterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyVRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVRouterAttributeResponseBody(name='body'),
}

async function modifyVRouterAttributeWithOptions(request: ModifyVRouterAttributeRequest, runtime: Util.RuntimeOptions): ModifyVRouterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.VRouterId)) {
    query['VRouterId'] = request.VRouterId;
  }
  if (!Util.isUnset(request.VRouterName)) {
    query['VRouterName'] = request.VRouterName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVRouterAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVRouterAttribute(request: ModifyVRouterAttributeRequest): ModifyVRouterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVRouterAttributeWithOptions(request, runtime);
}

model ModifyVSwitchAttributeRequest {
  description?: string(name='Description', example='This is my vswitch.'),
  enableIPv6?: boolean(name='EnableIPv6', example='false'),
  ipv6CidrBlock?: int32(name='Ipv6CidrBlock', example='10'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25nacdfvue4****'),
  vSwitchName?: string(name='VSwitchName', example='VSwitch-1'),
  vpcIpv6CidrBlock?: string(name='VpcIpv6CidrBlock', example='2408:XXXX:312:3e00::/56'),
}

model ModifyVSwitchAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyVSwitchAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVSwitchAttributeResponseBody(name='body'),
}

async function modifyVSwitchAttributeWithOptions(request: ModifyVSwitchAttributeRequest, runtime: Util.RuntimeOptions): ModifyVSwitchAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableIPv6)) {
    query['EnableIPv6'] = request.enableIPv6;
  }
  if (!Util.isUnset(request.ipv6CidrBlock)) {
    query['Ipv6CidrBlock'] = request.ipv6CidrBlock;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vSwitchName)) {
    query['VSwitchName'] = request.vSwitchName;
  }
  if (!Util.isUnset(request.vpcIpv6CidrBlock)) {
    query['VpcIpv6CidrBlock'] = request.vpcIpv6CidrBlock;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVSwitchAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVSwitchAttributeWithOptions(request, runtime);
}

model ModifyVcoRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  newWeight?: int32(name='NewWeight', example='0'),
  nextHop?: string(name='NextHop', example='vco-p0w2jpkhi2eeop6q6****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='192.168.10.0/24'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
  weight?: int32(name='Weight', example='100'),
}

model ModifyVcoRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', example='9496F8A-82F4-3130-A51A-2266ACC799B4'),
}

model ModifyVcoRouteEntryWeightResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVcoRouteEntryWeightResponseBody(name='body'),
}

async function modifyVcoRouteEntryWeightWithOptions(request: ModifyVcoRouteEntryWeightRequest, runtime: Util.RuntimeOptions): ModifyVcoRouteEntryWeightResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.newWeight)) {
    query['NewWeight'] = request.newWeight;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVcoRouteEntryWeight',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVcoRouteEntryWeight(request: ModifyVcoRouteEntryWeightRequest): ModifyVcoRouteEntryWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVcoRouteEntryWeightWithOptions(request, runtime);
}

model ModifyVirtualBorderRouterAttributeRequest {
  associatedPhysicalConnections?: string(name='AssociatedPhysicalConnections', example='[   {     "CircuitCode ": "longtel001",     " LocalGatewayIp ": "192.168.XX.XX",     "PeerGatewayIp" : "192.168.XX.XX",     " PeeringSubnetMask ": "255.255.255.252",     " PhysicalConnectionId ": "pc-kojok19****"   } ]'),
  bandwidth?: int32(name='Bandwidth', example='100'),
  circuitCode?: string(name='CircuitCode', example='longtel001'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  description?: string(name='Description', example='desc'),
  detectMultiplier?: long(name='DetectMultiplier', example='3'),
  enableIpv6?: boolean(name='EnableIpv6', example='false'),
  localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
  minRxInterval?: long(name='MinRxInterval', example='300'),
  minTxInterval?: long(name='MinTxInterval', example='300'),
  name?: string(name='Name', example='VBR'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerGatewayIp?: string(name='PeerGatewayIp', example='192.168.XX.X'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:2a2b'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.252'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrId?: string(name='VbrId', example='vbr-bp1lhl0taikrte****'),
  vlanId?: int32(name='VlanId', example='0'),
}

model ModifyVirtualBorderRouterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model ModifyVirtualBorderRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVirtualBorderRouterAttributeResponseBody(name='body'),
}

async function modifyVirtualBorderRouterAttributeWithOptions(request: ModifyVirtualBorderRouterAttributeRequest, runtime: Util.RuntimeOptions): ModifyVirtualBorderRouterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.associatedPhysicalConnections)) {
    query['AssociatedPhysicalConnections'] = request.associatedPhysicalConnections;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.detectMultiplier)) {
    query['DetectMultiplier'] = request.detectMultiplier;
  }
  if (!Util.isUnset(request.enableIpv6)) {
    query['EnableIpv6'] = request.enableIpv6;
  }
  if (!Util.isUnset(request.localGatewayIp)) {
    query['LocalGatewayIp'] = request.localGatewayIp;
  }
  if (!Util.isUnset(request.localIpv6GatewayIp)) {
    query['LocalIpv6GatewayIp'] = request.localIpv6GatewayIp;
  }
  if (!Util.isUnset(request.minRxInterval)) {
    query['MinRxInterval'] = request.minRxInterval;
  }
  if (!Util.isUnset(request.minTxInterval)) {
    query['MinTxInterval'] = request.minTxInterval;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerGatewayIp)) {
    query['PeerGatewayIp'] = request.peerGatewayIp;
  }
  if (!Util.isUnset(request.peerIpv6GatewayIp)) {
    query['PeerIpv6GatewayIp'] = request.peerIpv6GatewayIp;
  }
  if (!Util.isUnset(request.peeringIpv6SubnetMask)) {
    query['PeeringIpv6SubnetMask'] = request.peeringIpv6SubnetMask;
  }
  if (!Util.isUnset(request.peeringSubnetMask)) {
    query['PeeringSubnetMask'] = request.peeringSubnetMask;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVirtualBorderRouterAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVirtualBorderRouterAttribute(request: ModifyVirtualBorderRouterAttributeRequest): ModifyVirtualBorderRouterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVirtualBorderRouterAttributeWithOptions(request, runtime);
}

model ModifyVpcAttributeRequest {
  cidrBlock?: string(name='CidrBlock', example='192.168.0.0/24'),
  description?: string(name='Description', example='This is my VPC.'),
  enableIPv6?: boolean(name='EnableIPv6', example='false'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:6a::/56'),
  ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-bp1qtbach57ywecf****'),
  vpcName?: string(name='VpcName', example='Vpc-1'),
}

model ModifyVpcAttributeResponseBody = {
  requestId?: string(name='RequestId', example='43B72D30-25E1-4FA3-96A8-89374A521D1A'),
}

model ModifyVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcAttributeResponseBody(name='body'),
}

async function modifyVpcAttributeWithOptions(request: ModifyVpcAttributeRequest, runtime: Util.RuntimeOptions): ModifyVpcAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableIPv6)) {
    query['EnableIPv6'] = request.enableIPv6;
  }
  if (!Util.isUnset(request.ipv6CidrBlock)) {
    query['Ipv6CidrBlock'] = request.ipv6CidrBlock;
  }
  if (!Util.isUnset(request.ipv6Isp)) {
    query['Ipv6Isp'] = request.ipv6Isp;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcName)) {
    query['VpcName'] = request.vpcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpcAttribute(request: ModifyVpcAttributeRequest): ModifyVpcAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcAttributeWithOptions(request, runtime);
}

model ModifyVpcPrefixListRequest {
  addPrefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', example='172.16.0.0/12'),
      description?: string(name='Description', example='newcidr'),
    }
  ](name='AddPrefixListEntry'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  maxEntries?: int32(name='MaxEntries', example='20'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListDescription?: string(name='PrefixListDescription', example='newdescription'),
  prefixListId?: string(name='PrefixListId', example='pl-0b7hwu67****'),
  prefixListName?: string(name='PrefixListName', example='newname'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  removePrefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', example='192.168.0.0/16'),
      description?: string(name='Description', example='cidr'),
    }
  ](name='RemovePrefixListEntry'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyVpcPrefixListResponseBody = {
  prefixListId?: string(name='PrefixListId', example='pl-0b7hwu67****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyVpcPrefixListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcPrefixListResponseBody(name='body'),
}

async function modifyVpcPrefixListWithOptions(request: ModifyVpcPrefixListRequest, runtime: Util.RuntimeOptions): ModifyVpcPrefixListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addPrefixListEntry)) {
    query['AddPrefixListEntry'] = request.addPrefixListEntry;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.maxEntries)) {
    query['MaxEntries'] = request.maxEntries;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListDescription)) {
    query['PrefixListDescription'] = request.prefixListDescription;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.prefixListName)) {
    query['PrefixListName'] = request.prefixListName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removePrefixListEntry)) {
    query['RemovePrefixListEntry'] = request.removePrefixListEntry;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcPrefixList',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpcPrefixList(request: ModifyVpcPrefixListRequest): ModifyVpcPrefixListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcPrefixListWithOptions(request, runtime);
}

model ModifyVpnAttachmentAttributeRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', example='true'),
  bgpConfig?: string(name='BgpConfig', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  customerGatewayId?: string(name='CustomerGatewayId'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  healthCheckConfig?: string(name='HealthCheckConfig', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3","Policy": "revoke_route"}'),
  ikeConfig?: string(name='IkeConfig', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalIdIPsec":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', example='nametest'),
  networkType?: string(name='NetworkType', example='public'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId', example='ap-southeast-2'),
  remoteCaCert?: string(name='RemoteCaCert', example='c20ycDI1NnYxIENBIChURVNUIFN****'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.1.3.0/24,10.1.4.0/24'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w5112fgnl2ihlmf****'),
}

model ModifyVpnAttachmentAttributeResponseBody = {
  attachInstanceId?: string(name='AttachInstanceId', example='cen-c2r3m3zxkumoqz****'),
  attachType?: string(name='AttachType', example='CEN'),
  createTime?: long(name='CreateTime', example='1658201810000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-p0w2jemrcj5u61un8****'),
  description?: string(name='Description', example='desctest'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', example='86400'),
    ikeMode?: string(name='IkeMode', example='main'),
    ikePfs?: string(name='IkePfs', example='group2'),
    ikeVersion?: string(name='IkeVersion', example='ikev1'),
    localId?: string(name='LocalId', example='47.XX.XX.1'),
    psk?: string(name='Psk', example='1234***'),
    remoteId?: string(name='RemoteId', example='47.XX.XX.2'),
  }(name='IkeConfig'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', example='md5'),
    ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', example='group2'),
  }(name='IpsecConfig'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', example='nametest'),
  networkType?: string(name='NetworkType', example='public'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.1.3.0/24,10.1.4.0/24'),
  requestId?: string(name='RequestId', example='35822A84-867F-3936-A2E6-A4C4E3ED11C0'),
  spec?: string(name='Spec', example='1000M'),
  status?: string(name='Status', example='ike_sa_not_established'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', example='192.168.1.1'),
    enable?: string(name='Enable', example='true'),
    interval?: int32(name='Interval', example='3'),
    policy?: string(name='Policy', example='revoke_route'),
    retry?: int32(name='Retry', example='3'),
    sip?: string(name='Sip', example='10.1.1.1'),
  }(name='VcoHealthCheck'),
  vpnBgpConfig?: {
    enableBgp?: string(name='EnableBgp', example='true'),
    localAsn?: long(name='LocalAsn', example='45104'),
    localBgpIp?: string(name='LocalBgpIp', example='169.254.11.1'),
    peerAsn?: long(name='PeerAsn', example='65535'),
    peerBgpIp?: string(name='PeerBgpIp', example='169.254.11.2'),
    status?: string(name='Status', example='false'),
    tunnelCidr?: string(name='TunnelCidr', example='169.254.11.0/30'),
  }(name='VpnBgpConfig'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w5112fgnl2ihlmf****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-p0wa1c1018pmeb6cu****'),
}

model ModifyVpnAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpnAttachmentAttributeResponseBody(name='body'),
}

async function modifyVpnAttachmentAttributeWithOptions(request: ModifyVpnAttachmentAttributeRequest, runtime: Util.RuntimeOptions): ModifyVpnAttachmentAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoConfigRoute)) {
    query['AutoConfigRoute'] = request.autoConfigRoute;
  }
  if (!Util.isUnset(request.bgpConfig)) {
    query['BgpConfig'] = request.bgpConfig;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.customerGatewayId)) {
    query['CustomerGatewayId'] = request.customerGatewayId;
  }
  if (!Util.isUnset(request.effectImmediately)) {
    query['EffectImmediately'] = request.effectImmediately;
  }
  if (!Util.isUnset(request.enableDpd)) {
    query['EnableDpd'] = request.enableDpd;
  }
  if (!Util.isUnset(request.enableNatTraversal)) {
    query['EnableNatTraversal'] = request.enableNatTraversal;
  }
  if (!Util.isUnset(request.healthCheckConfig)) {
    query['HealthCheckConfig'] = request.healthCheckConfig;
  }
  if (!Util.isUnset(request.ikeConfig)) {
    query['IkeConfig'] = request.ikeConfig;
  }
  if (!Util.isUnset(request.ipsecConfig)) {
    query['IpsecConfig'] = request.ipsecConfig;
  }
  if (!Util.isUnset(request.localSubnet)) {
    query['LocalSubnet'] = request.localSubnet;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteCaCert)) {
    query['RemoteCaCert'] = request.remoteCaCert;
  }
  if (!Util.isUnset(request.remoteSubnet)) {
    query['RemoteSubnet'] = request.remoteSubnet;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpnAttachmentAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpnAttachmentAttribute(request: ModifyVpnAttachmentAttributeRequest): ModifyVpnAttachmentAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpnAttachmentAttributeWithOptions(request, runtime);
}

model ModifyVpnConnectionAttributeRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', example='true'),
  bgpConfig?: string(name='BgpConfig', example='{"EnableBgp":"true","LocalAsn":"65530","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  healthCheckConfig?: string(name='HealthCheckConfig', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3"}'),
  ikeConfig?: string(name='IkeConfig', example='{"Psk":"pgw6dy7d1i8i****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalIdIPsec":"116.64.XX.XX","RemoteId":"139.18.XX.XX"}'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', example='nametest'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', example='c20ycDI1NnYxIENBIChURVNUIFN****'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.2.1.0/24,10.2.2.0/24'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****'),
}

model ModifyVpnConnectionAttributeResponseBody = {
  createTime?: long(name='CreateTime', example='1492753817000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-p0w2jemrcj5u61un8****'),
  description?: string(name='Description', example='description'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', example='86400'),
    ikeMode?: string(name='IkeMode', example='main'),
    ikePfs?: string(name='IkePfs', example='group2'),
    ikeVersion?: string(name='IkeVersion', example='ikev1'),
    localId?: string(name='LocalId', example='116.64.XX.XX'),
    psk?: string(name='Psk', example='pgw6dy7d1i8i****'),
    remoteId?: string(name='RemoteId', example='139.18.XX.XX'),
  }(name='IkeConfig'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
    ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', example='group2'),
  }(name='IpsecConfig'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', example='nametest'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.2.1.0/24,10.2.2.0/24'),
  requestId?: string(name='RequestId', example='7DB79D0C-5F27-4AB5-995B-79BE55102F90'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', example='192.168.1.1'),
    enable?: string(name='Enable', example='true'),
    interval?: int32(name='Interval', example='3'),
    retry?: int32(name='Retry', example='3'),
    sip?: string(name='Sip', example='10.1.1.1'),
  }(name='VcoHealthCheck'),
  vpnBgpConfig?: {
    enableBgp?: string(name='EnableBgp', example='true'),
    localAsn?: int32(name='LocalAsn', example='65530'),
    localBgpIp?: string(name='LocalBgpIp', example='169.254.11.1'),
    peerAsn?: int32(name='PeerAsn', example='65531'),
    peerBgpIp?: string(name='PeerBgpIp', example='169.254.11.2'),
    status?: string(name='Status', example='success'),
    tunnelCidr?: string(name='TunnelCidr', example='169.254.11.0/30'),
  }(name='VpnBgpConfig'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifyVpnConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpnConnectionAttributeResponseBody(name='body'),
}

async function modifyVpnConnectionAttributeWithOptions(request: ModifyVpnConnectionAttributeRequest, runtime: Util.RuntimeOptions): ModifyVpnConnectionAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoConfigRoute)) {
    query['AutoConfigRoute'] = request.autoConfigRoute;
  }
  if (!Util.isUnset(request.bgpConfig)) {
    query['BgpConfig'] = request.bgpConfig;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.effectImmediately)) {
    query['EffectImmediately'] = request.effectImmediately;
  }
  if (!Util.isUnset(request.enableDpd)) {
    query['EnableDpd'] = request.enableDpd;
  }
  if (!Util.isUnset(request.enableNatTraversal)) {
    query['EnableNatTraversal'] = request.enableNatTraversal;
  }
  if (!Util.isUnset(request.healthCheckConfig)) {
    query['HealthCheckConfig'] = request.healthCheckConfig;
  }
  if (!Util.isUnset(request.ikeConfig)) {
    query['IkeConfig'] = request.ikeConfig;
  }
  if (!Util.isUnset(request.ipsecConfig)) {
    query['IpsecConfig'] = request.ipsecConfig;
  }
  if (!Util.isUnset(request.localSubnet)) {
    query['LocalSubnet'] = request.localSubnet;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteCaCertificate)) {
    query['RemoteCaCertificate'] = request.remoteCaCertificate;
  }
  if (!Util.isUnset(request.remoteSubnet)) {
    query['RemoteSubnet'] = request.remoteSubnet;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnConnectionId)) {
    query['VpnConnectionId'] = request.vpnConnectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpnConnectionAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpnConnectionAttribute(request: ModifyVpnConnectionAttributeRequest): ModifyVpnConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpnConnectionAttributeWithOptions(request, runtime);
}

model ModifyVpnGatewayAttributeRequest {
  autoPropagate?: boolean(name='AutoPropagate', example='true'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****'),
  description?: string(name='Description', example='test'),
  name?: string(name='Name', example='myvpn'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifyVpnGatewayAttributeResponseBody = {
  autoPropagate?: boolean(name='AutoPropagate', example='true'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  createTime?: long(name='CreateTime', example='1492753580000'),
  description?: string(name='Description', example='test'),
  enableBgp?: boolean(name='EnableBgp', example='true'),
  endTime?: long(name='EndTime', example='1495382400000'),
  internetIp?: string(name='InternetIp', example='116.62.XX.XX'),
  intranetIp?: string(name='IntranetIp', example='172.27.30.24'),
  name?: string(name='Name', example='test'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  spec?: string(name='Spec', example='5M'),
  status?: string(name='Status', example='active'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1y9ovl1cu9ou4tv****'),
  vpcId?: string(name='VpcId', example='vpc-bp1ub1yt9cvakoel****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifyVpnGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpnGatewayAttributeResponseBody(name='body'),
}

async function modifyVpnGatewayAttributeWithOptions(request: ModifyVpnGatewayAttributeRequest, runtime: Util.RuntimeOptions): ModifyVpnGatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPropagate)) {
    query['AutoPropagate'] = request.autoPropagate;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpnGatewayAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpnGatewayAttribute(request: ModifyVpnGatewayAttributeRequest): ModifyVpnGatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpnGatewayAttributeWithOptions(request, runtime);
}

model ModifyVpnPbrRouteEntryAttributeRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3****'),
  newPriority?: int32(name='NewPriority', example='10'),
  newWeight?: int32(name='NewWeight', example='0'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority', example='5'),
  regionId?: string(name='RegionId', example='cn-heyuan'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  routeSource?: string(name='RouteSource', example='192.168.1.0/24'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', example='100'),
}

model ModifyVpnPbrRouteEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpnPbrRouteEntryAttributeResponseBody(name='body'),
}

async function modifyVpnPbrRouteEntryAttributeWithOptions(request: ModifyVpnPbrRouteEntryAttributeRequest, runtime: Util.RuntimeOptions): ModifyVpnPbrRouteEntryAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.newPriority)) {
    query['NewPriority'] = request.newPriority;
  }
  if (!Util.isUnset(request.newWeight)) {
    query['NewWeight'] = request.newWeight;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.routeSource)) {
    query['RouteSource'] = request.routeSource;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpnPbrRouteEntryAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpnPbrRouteEntryAttribute(request: ModifyVpnPbrRouteEntryAttributeRequest): ModifyVpnPbrRouteEntryAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpnPbrRouteEntryAttributeWithOptions(request, runtime);
}

model ModifyVpnPbrRouteEntryPriorityRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3****'),
  newPriority?: int32(name='NewPriority', example='10'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority', example='5'),
  regionId?: string(name='RegionId', example='cn-henyuan'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  routeSource?: string(name='RouteSource', example='192.168.1.0/24'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', example='100'),
}

model ModifyVpnPbrRouteEntryPriorityResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryPriorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpnPbrRouteEntryPriorityResponseBody(name='body'),
}

async function modifyVpnPbrRouteEntryPriorityWithOptions(request: ModifyVpnPbrRouteEntryPriorityRequest, runtime: Util.RuntimeOptions): ModifyVpnPbrRouteEntryPriorityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.newPriority)) {
    query['NewPriority'] = request.newPriority;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.routeSource)) {
    query['RouteSource'] = request.routeSource;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpnPbrRouteEntryPriority',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpnPbrRouteEntryPriority(request: ModifyVpnPbrRouteEntryPriorityRequest): ModifyVpnPbrRouteEntryPriorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpnPbrRouteEntryPriorityWithOptions(request, runtime);
}

model ModifyVpnPbrRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b'),
  newWeight?: int32(name='NewWeight', example='100'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  routeSource?: string(name='RouteSource', example='192.168.1.0/24'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', example='0'),
}

model ModifyVpnPbrRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryWeightResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpnPbrRouteEntryWeightResponseBody(name='body'),
}

async function modifyVpnPbrRouteEntryWeightWithOptions(request: ModifyVpnPbrRouteEntryWeightRequest, runtime: Util.RuntimeOptions): ModifyVpnPbrRouteEntryWeightResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.newWeight)) {
    query['NewWeight'] = request.newWeight;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.routeSource)) {
    query['RouteSource'] = request.routeSource;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpnPbrRouteEntryWeight',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpnPbrRouteEntryWeight(request: ModifyVpnPbrRouteEntryWeightRequest): ModifyVpnPbrRouteEntryWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpnPbrRouteEntryWeightWithOptions(request, runtime);
}

model ModifyVpnRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b'),
  newWeight?: int32(name='NewWeight', example='100'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', example='0'),
}

model ModifyVpnRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnRouteEntryWeightResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpnRouteEntryWeightResponseBody(name='body'),
}

async function modifyVpnRouteEntryWeightWithOptions(request: ModifyVpnRouteEntryWeightRequest, runtime: Util.RuntimeOptions): ModifyVpnRouteEntryWeightResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.newWeight)) {
    query['NewWeight'] = request.newWeight;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.overlayMode)) {
    query['OverlayMode'] = request.overlayMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpnRouteEntryWeight',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpnRouteEntryWeight(request: ModifyVpnRouteEntryWeightRequest): ModifyVpnRouteEntryWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpnRouteEntryWeightWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-acfm3peow3k****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='vpc-hp31psbg8ec3023s6****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='vpc'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model OpenFlowLogServiceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OpenFlowLogServiceResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='28CF47AB-B6C0-5FA2-80C7-2B28826A92CB'),
}

model OpenFlowLogServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenFlowLogServiceResponseBody(name='body'),
}

async function openFlowLogServiceWithOptions(request: OpenFlowLogServiceRequest, runtime: Util.RuntimeOptions): OpenFlowLogServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenFlowLogService',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openFlowLogService(request: OpenFlowLogServiceRequest): OpenFlowLogServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openFlowLogServiceWithOptions(request, runtime);
}

model OpenPhysicalConnectionServiceRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OpenPhysicalConnectionServiceResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model OpenPhysicalConnectionServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenPhysicalConnectionServiceResponseBody(name='body'),
}

async function openPhysicalConnectionServiceWithOptions(request: OpenPhysicalConnectionServiceRequest, runtime: Util.RuntimeOptions): OpenPhysicalConnectionServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenPhysicalConnectionService',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openPhysicalConnectionService(request: OpenPhysicalConnectionServiceRequest): OpenPhysicalConnectionServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openPhysicalConnectionServiceWithOptions(request, runtime);
}

model OpenTrafficMirrorServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenTrafficMirrorServiceResponseBody = {
  orderId?: string(name='OrderId', example='123412341234****'),
  requestId?: string(name='RequestId', example='4FCCF008-4C13-4231-BE77-D5203801A9E2'),
}

model OpenTrafficMirrorServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenTrafficMirrorServiceResponseBody(name='body'),
}

async function openTrafficMirrorServiceWithOptions(request: OpenTrafficMirrorServiceRequest, runtime: Util.RuntimeOptions): OpenTrafficMirrorServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenTrafficMirrorService',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openTrafficMirrorService(request: OpenTrafficMirrorServiceRequest): OpenTrafficMirrorServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openTrafficMirrorServiceWithOptions(request, runtime);
}

model PublishVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  publishVpc?: boolean(name='PublishVpc', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  routeType?: string(name='RouteType', example='pbr'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****'),
}

model PublishVpnRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model PublishVpnRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishVpnRouteEntryResponseBody(name='body'),
}

async function publishVpnRouteEntryWithOptions(request: PublishVpnRouteEntryRequest, runtime: Util.RuntimeOptions): PublishVpnRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publishVpc)) {
    query['PublishVpc'] = request.publishVpc;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDest)) {
    query['RouteDest'] = request.routeDest;
  }
  if (!Util.isUnset(request.routeType)) {
    query['RouteType'] = request.routeType;
  }
  if (!Util.isUnset(request.vpnGatewayId)) {
    query['VpnGatewayId'] = request.vpnGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishVpnRouteEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishVpnRouteEntry(request: PublishVpnRouteEntryRequest): PublishVpnRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishVpnRouteEntryWithOptions(request, runtime);
}

model RecoverPhysicalConnectionRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  instanceId?: string(name='InstanceId', example='pc-bp1mrgfbtmc9brre7****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  token?: string(name='Token', example='CBCE910E-D396-4944-8****'),
}

model RecoverPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='CD14EA74-E9C3-59A9-942A-DFEC7E12818D'),
}

model RecoverPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecoverPhysicalConnectionResponseBody(name='body'),
}

async function recoverPhysicalConnectionWithOptions(request: RecoverPhysicalConnectionRequest, runtime: Util.RuntimeOptions): RecoverPhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecoverPhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recoverPhysicalConnection(request: RecoverPhysicalConnectionRequest): RecoverPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoverPhysicalConnectionWithOptions(request, runtime);
}

model RecoverVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrId?: string(name='VbrId', example='vbr-bp1lhl0taikrte****'),
}

model RecoverVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model RecoverVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecoverVirtualBorderRouterResponseBody(name='body'),
}

async function recoverVirtualBorderRouterWithOptions(request: RecoverVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): RecoverVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecoverVirtualBorderRouter',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recoverVirtualBorderRouter(request: RecoverVirtualBorderRouterRequest): RecoverVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoverVirtualBorderRouterWithOptions(request, runtime);
}

model ReleaseEipAddressRequest {
  allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7uj6i0d****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReleaseEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='748C38F6-9A3D-482E-83FB-DB6C39C68AEA'),
}

model ReleaseEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseEipAddressResponseBody(name='body'),
}

async function releaseEipAddressWithOptions(request: ReleaseEipAddressRequest, runtime: Util.RuntimeOptions): ReleaseEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseEipAddress',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseEipAddress(request: ReleaseEipAddressRequest): ReleaseEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEipAddressWithOptions(request, runtime);
}

model ReleaseEipSegmentAddressRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001sdfg'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  segmentInstanceId?: string(name='SegmentInstanceId', example='eipsg-2zett8ba055tbsxme****'),
}

model ReleaseEipSegmentAddressResponseBody = {
  requestId?: string(name='RequestId', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model ReleaseEipSegmentAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseEipSegmentAddressResponseBody(name='body'),
}

async function releaseEipSegmentAddressWithOptions(request: ReleaseEipSegmentAddressRequest, runtime: Util.RuntimeOptions): ReleaseEipSegmentAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.segmentInstanceId)) {
    query['SegmentInstanceId'] = request.segmentInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseEipSegmentAddress',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseEipSegmentAddress(request: ReleaseEipSegmentAddressRequest): ReleaseEipSegmentAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEipSegmentAddressWithOptions(request, runtime);
}

model RemoveCommonBandwidthPackageIpRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ipInstanceId?: string(name='IpInstanceId', example='eip-2zeerraiwb7uj6i0d****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RemoveCommonBandwidthPackageIpResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model RemoveCommonBandwidthPackageIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCommonBandwidthPackageIpResponseBody(name='body'),
}

async function removeCommonBandwidthPackageIpWithOptions(request: RemoveCommonBandwidthPackageIpRequest, runtime: Util.RuntimeOptions): RemoveCommonBandwidthPackageIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipInstanceId)) {
    query['IpInstanceId'] = request.ipInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveCommonBandwidthPackageIp',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeCommonBandwidthPackageIp(request: RemoveCommonBandwidthPackageIpRequest): RemoveCommonBandwidthPackageIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeCommonBandwidthPackageIpWithOptions(request, runtime);
}

model RemoveGlobalAccelerationInstanceIpRequest {
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-m5ex47zwya1sejyni****'),
  ipInstanceId?: string(name='IpInstanceId', example='eip-bp13e9i2qst4g6jzi****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RemoveGlobalAccelerationInstanceIpResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model RemoveGlobalAccelerationInstanceIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveGlobalAccelerationInstanceIpResponseBody(name='body'),
}

async function removeGlobalAccelerationInstanceIpWithOptions(request: RemoveGlobalAccelerationInstanceIpRequest, runtime: Util.RuntimeOptions): RemoveGlobalAccelerationInstanceIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalAccelerationInstanceId)) {
    query['GlobalAccelerationInstanceId'] = request.globalAccelerationInstanceId;
  }
  if (!Util.isUnset(request.ipInstanceId)) {
    query['IpInstanceId'] = request.ipInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveGlobalAccelerationInstanceIp',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeGlobalAccelerationInstanceIp(request: RemoveGlobalAccelerationInstanceIpRequest): RemoveGlobalAccelerationInstanceIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeGlobalAccelerationInstanceIpWithOptions(request, runtime);
}

model RemoveIPv6TranslatorAclListEntryRequest {
  aclEntryId?: string(name='AclEntryId', example='ipv6transaclentry-bp105jrsxxxx'),
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  clientToken?: string(name='ClientToken', example='sha123456'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RemoveIPv6TranslatorAclListEntryResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model RemoveIPv6TranslatorAclListEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveIPv6TranslatorAclListEntryResponseBody(name='body'),
}

async function removeIPv6TranslatorAclListEntryWithOptions(request: RemoveIPv6TranslatorAclListEntryRequest, runtime: Util.RuntimeOptions): RemoveIPv6TranslatorAclListEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclEntryId)) {
    query['AclEntryId'] = request.aclEntryId;
  }
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveIPv6TranslatorAclListEntry',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeIPv6TranslatorAclListEntry(request: RemoveIPv6TranslatorAclListEntryRequest): RemoveIPv6TranslatorAclListEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIPv6TranslatorAclListEntryWithOptions(request, runtime);
}

model RemoveSourcesFromTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****'),
  trafficMirrorSourceIds?: [ string ](name='TrafficMirrorSourceIds', example='eni-j6c8znm5l1yt4sox****'),
}

model RemoveSourcesFromTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', example='A33B2C6A-89D1-4DEA-A807-A6E8CC552484'),
}

model RemoveSourcesFromTrafficMirrorSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveSourcesFromTrafficMirrorSessionResponseBody(name='body'),
}

async function removeSourcesFromTrafficMirrorSessionWithOptions(request: RemoveSourcesFromTrafficMirrorSessionRequest, runtime: Util.RuntimeOptions): RemoveSourcesFromTrafficMirrorSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorSessionId)) {
    query['TrafficMirrorSessionId'] = request.trafficMirrorSessionId;
  }
  if (!Util.isUnset(request.trafficMirrorSourceIds)) {
    query['TrafficMirrorSourceIds'] = request.trafficMirrorSourceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveSourcesFromTrafficMirrorSession',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeSourcesFromTrafficMirrorSession(request: RemoveSourcesFromTrafficMirrorSessionRequest): RemoveSourcesFromTrafficMirrorSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSourcesFromTrafficMirrorSessionWithOptions(request, runtime);
}

model ReplaceVpcDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', example='vpc-dsferghthth****'),
}

model ReplaceVpcDhcpOptionsSetResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ReplaceVpcDhcpOptionsSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplaceVpcDhcpOptionsSetResponseBody(name='body'),
}

async function replaceVpcDhcpOptionsSetWithOptions(request: ReplaceVpcDhcpOptionsSetRequest, runtime: Util.RuntimeOptions): ReplaceVpcDhcpOptionsSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dhcpOptionsSetId)) {
    query['DhcpOptionsSetId'] = request.dhcpOptionsSetId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplaceVpcDhcpOptionsSet',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function replaceVpcDhcpOptionsSet(request: ReplaceVpcDhcpOptionsSetRequest): ReplaceVpcDhcpOptionsSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceVpcDhcpOptionsSetWithOptions(request, runtime);
}

model RetryVpcPrefixListAssociationRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: string(name='PrefixListId', example='pl-0b7hwu67****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='vtb-bp1drpcfz9srr393h****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='vpcRouteTable'),
}

model RetryVpcPrefixListAssociationResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model RetryVpcPrefixListAssociationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryVpcPrefixListAssociationResponseBody(name='body'),
}

async function retryVpcPrefixListAssociationWithOptions(request: RetryVpcPrefixListAssociationRequest, runtime: Util.RuntimeOptions): RetryVpcPrefixListAssociationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetryVpcPrefixListAssociation',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retryVpcPrefixListAssociation(request: RetryVpcPrefixListAssociationRequest): RetryVpcPrefixListAssociationResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryVpcPrefixListAssociationWithOptions(request, runtime);
}

model RevokeInstanceFromCenRequest {
  cenId?: string(name='CenId', example='cen-7qthudw0ll6jmc****'),
  cenOwnerId?: long(name='CenOwnerId', example='123456789'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  instanceId?: string(name='InstanceId', example='vpc-uf6o8d1dj8sjwxi6o****'),
  instanceType?: string(name='InstanceType', example='VPC'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RevokeInstanceFromCenResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RevokeInstanceFromCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeInstanceFromCenResponseBody(name='body'),
}

async function revokeInstanceFromCenWithOptions(request: RevokeInstanceFromCenRequest, runtime: Util.RuntimeOptions): RevokeInstanceFromCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeInstanceFromCen',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeInstanceFromCen(request: RevokeInstanceFromCenRequest): RevokeInstanceFromCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeInstanceFromCenWithOptions(request, runtime);
}

model RevokeInstanceFromVbrRequest {
  grantType?: string(name='GrantType', example='ALL'),
  instanceId?: string(name='InstanceId', example='vpc-bp1brjuegjc88v3u9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vbrInstanceIds?: [ string ](name='VbrInstanceIds'),
  vbrOwnerUid?: string(name='VbrOwnerUid', example='1210123456123456'),
  vbrRegionNo?: string(name='VbrRegionNo', example='cn-hangzhou'),
}

model RevokeInstanceFromVbrShrinkRequest {
  grantType?: string(name='GrantType', example='ALL'),
  instanceId?: string(name='InstanceId', example='vpc-bp1brjuegjc88v3u9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vbrInstanceIdsShrink?: string(name='VbrInstanceIds'),
  vbrOwnerUid?: string(name='VbrOwnerUid', example='1210123456123456'),
  vbrRegionNo?: string(name='VbrRegionNo', example='cn-hangzhou'),
}

model RevokeInstanceFromVbrResponseBody = {
  requestId?: string(name='RequestId', example='45B7AA4A-4658-5FFC-90DD-9B8729F301BB'),
}

model RevokeInstanceFromVbrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeInstanceFromVbrResponseBody(name='body'),
}

async function revokeInstanceFromVbrWithOptions(tmpReq: RevokeInstanceFromVbrRequest, runtime: Util.RuntimeOptions): RevokeInstanceFromVbrResponse {
  Util.validateModel(tmpReq);
  var request = new RevokeInstanceFromVbrShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.vbrInstanceIds)) {
    request.vbrInstanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vbrInstanceIds, 'VbrInstanceIds', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.grantType)) {
    query['GrantType'] = request.grantType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vbrInstanceIdsShrink)) {
    query['VbrInstanceIds'] = request.vbrInstanceIdsShrink;
  }
  if (!Util.isUnset(request.vbrOwnerUid)) {
    query['VbrOwnerUid'] = request.vbrOwnerUid;
  }
  if (!Util.isUnset(request.vbrRegionNo)) {
    query['VbrRegionNo'] = request.vbrRegionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeInstanceFromVbr',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeInstanceFromVbr(request: RevokeInstanceFromVbrRequest): RevokeInstanceFromVbrResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeInstanceFromVbrWithOptions(request, runtime);
}

model SetHighDefinitionMonitorLogStatusRequest {
  instanceId?: string(name='InstanceId', example='eip-wz9fi6qboho9fwgx7****'),
  instanceType?: string(name='InstanceType', example='EIP'),
  logProject?: string(name='LogProject', example='hdmonitor-cn-shenzhen'),
  logStore?: string(name='LogStore', example='hdmonitor'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', example='ON'),
}

model SetHighDefinitionMonitorLogStatusResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  success?: string(name='Success', example='true'),
}

model SetHighDefinitionMonitorLogStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetHighDefinitionMonitorLogStatusResponseBody(name='body'),
}

async function setHighDefinitionMonitorLogStatusWithOptions(request: SetHighDefinitionMonitorLogStatusRequest, runtime: Util.RuntimeOptions): SetHighDefinitionMonitorLogStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.logProject)) {
    query['LogProject'] = request.logProject;
  }
  if (!Util.isUnset(request.logStore)) {
    query['LogStore'] = request.logStore;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetHighDefinitionMonitorLogStatus',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setHighDefinitionMonitorLogStatus(request: SetHighDefinitionMonitorLogStatusRequest): SetHighDefinitionMonitorLogStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setHighDefinitionMonitorLogStatusWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='vpc-bp16qjewdsunr41m1****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='VPC'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TagResourcesForExpressConnectRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='PHYSICALCONNECTION'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag'),
}

model TagResourcesForExpressConnectResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model TagResourcesForExpressConnectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesForExpressConnectResponseBody(name='body'),
}

async function tagResourcesForExpressConnectWithOptions(request: TagResourcesForExpressConnectRequest, runtime: Util.RuntimeOptions): TagResourcesForExpressConnectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResourcesForExpressConnect',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResourcesForExpressConnect(request: TagResourcesForExpressConnectRequest): TagResourcesForExpressConnectResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesForExpressConnectWithOptions(request, runtime);
}

model TerminatePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjzm****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model TerminatePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model TerminatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminatePhysicalConnectionResponseBody(name='body'),
}

async function terminatePhysicalConnectionWithOptions(request: TerminatePhysicalConnectionRequest, runtime: Util.RuntimeOptions): TerminatePhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminatePhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function terminatePhysicalConnection(request: TerminatePhysicalConnectionRequest): TerminatePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminatePhysicalConnectionWithOptions(request, runtime);
}

model TerminateVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrId?: string(name='VbrId', example='vbr-bp15zckdt37pq72****'),
}

model TerminateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model TerminateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateVirtualBorderRouterResponseBody(name='body'),
}

async function terminateVirtualBorderRouterWithOptions(request: TerminateVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): TerminateVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminateVirtualBorderRouter',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function terminateVirtualBorderRouter(request: TerminateVirtualBorderRouterRequest): TerminateVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateVirtualBorderRouterWithOptions(request, runtime);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='vpc-bp16qjewdsunr41m1****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='VPC'),
  tagKey?: [ string ](name='TagKey', example='FinanceDept'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model UnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnTagResourcesResponseBody(name='body'),
}

async function unTagResourcesWithOptions(request: UnTagResourcesRequest, runtime: Util.RuntimeOptions): UnTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnTagResources',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unTagResourcesWithOptions(request, runtime);
}

model UnassociateEipAddressRequest {
  allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7uj6i0d****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11****'),
  force?: boolean(name='Force', example='false'),
  instanceId?: string(name='InstanceId', example='i-hp3akk9irtd69jad****'),
  instanceType?: string(name='InstanceType', example='EcsInstance'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  privateIpAddress?: string(name='PrivateIpAddress', example='192.XX.XX.2'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassociateEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UnassociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateEipAddressResponseBody(name='body'),
}

async function unassociateEipAddressWithOptions(request: UnassociateEipAddressRequest, runtime: Util.RuntimeOptions): UnassociateEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateEipAddress',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateEipAddress(request: UnassociateEipAddressRequest): UnassociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateEipAddressWithOptions(request, runtime);
}

model UnassociateGlobalAccelerationInstanceRequest {
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-1sxeedefrr33****'),
  instanceType?: string(name='InstanceType', example='RemoteEcsInstance'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassociateGlobalAccelerationInstanceResponseBody = {
  requestId?: string(name='RequestId', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model UnassociateGlobalAccelerationInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateGlobalAccelerationInstanceResponseBody(name='body'),
}

async function unassociateGlobalAccelerationInstanceWithOptions(request: UnassociateGlobalAccelerationInstanceRequest, runtime: Util.RuntimeOptions): UnassociateGlobalAccelerationInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalAccelerationInstanceId)) {
    query['GlobalAccelerationInstanceId'] = request.globalAccelerationInstanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateGlobalAccelerationInstance',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateGlobalAccelerationInstance(request: UnassociateGlobalAccelerationInstanceRequest): UnassociateGlobalAccelerationInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateGlobalAccelerationInstanceWithOptions(request, runtime);
}

model UnassociateHaVipRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  force?: string(name='Force', example='True'),
  haVipId?: string(name='HaVipId', example='havip-2zeo05qre24nhrqpy****'),
  instanceId?: string(name='InstanceId', example='i-faf344422ffsfad****'),
  instanceType?: string(name='InstanceType', example='EcsInstance'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassociateHaVipResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model UnassociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateHaVipResponseBody(name='body'),
}

async function unassociateHaVipWithOptions(request: UnassociateHaVipRequest, runtime: Util.RuntimeOptions): UnassociateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateHaVip',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateHaVip(request: UnassociateHaVipRequest): UnassociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateHaVipWithOptions(request, runtime);
}

model UnassociateNetworkAclRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0sp****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdw****'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
    }
  ](name='Resource'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassociateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', example='AD024BAA-2D91-48FD-810B-8FB7489B6EE6'),
}

model UnassociateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateNetworkAclResponseBody(name='body'),
}

async function unassociateNetworkAclWithOptions(request: UnassociateNetworkAclRequest, runtime: Util.RuntimeOptions): UnassociateNetworkAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateNetworkAcl',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateNetworkAcl(request: UnassociateNetworkAclRequest): UnassociateNetworkAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateNetworkAclWithOptions(request, runtime);
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', example='longtel001'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1qrb3044eqixog****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrId?: string(name='VbrId', example='vbr-bp16ksp61j7e0tkn*****'),
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociatePhysicalConnectionFromVirtualBorderRouterResponseBody(name='body'),
}

async function unassociatePhysicalConnectionFromVirtualBorderRouterWithOptions(request: UnassociatePhysicalConnectionFromVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): UnassociatePhysicalConnectionFromVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociatePhysicalConnectionFromVirtualBorderRouter',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociatePhysicalConnectionFromVirtualBorderRouter(request: UnassociatePhysicalConnectionFromVirtualBorderRouterRequest): UnassociatePhysicalConnectionFromVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociatePhysicalConnectionFromVirtualBorderRouterWithOptions(request, runtime);
}

model UnassociateRouteTableRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25naue4****'),
}

model UnassociateRouteTableResponseBody = {
  requestId?: string(name='RequestId', example='62172DD5-6BAC-45DF-8D44-xxxxxxx'),
}

model UnassociateRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateRouteTableResponseBody(name='body'),
}

async function unassociateRouteTableWithOptions(request: UnassociateRouteTableRequest, runtime: Util.RuntimeOptions): UnassociateRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateRouteTable',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateRouteTable(request: UnassociateRouteTableRequest): UnassociateRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateRouteTableWithOptions(request, runtime);
}

model UnassociateVpcCidrBlockRequest {
  IPv6CidrBlock?: string(name='IPv6CidrBlock'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ch-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secondaryCidrBlock?: string(name='SecondaryCidrBlock', example='192.168.0.0/16'),
  vpcId?: string(name='VpcId', example='vpc-o6wrloqsdqc9io3mg****'),
}

model UnassociateVpcCidrBlockResponseBody = {
  requestId?: string(name='RequestId', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model UnassociateVpcCidrBlockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateVpcCidrBlockResponseBody(name='body'),
}

async function unassociateVpcCidrBlockWithOptions(request: UnassociateVpcCidrBlockRequest, runtime: Util.RuntimeOptions): UnassociateVpcCidrBlockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.IPv6CidrBlock)) {
    query['IPv6CidrBlock'] = request.IPv6CidrBlock;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.secondaryCidrBlock)) {
    query['SecondaryCidrBlock'] = request.secondaryCidrBlock;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateVpcCidrBlock',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateVpcCidrBlock(request: UnassociateVpcCidrBlockRequest): UnassociateVpcCidrBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateVpcCidrBlockWithOptions(request, runtime);
}

model UntagResourcesForExpressConnectRequest {
  all?: boolean(name='All', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='PHYSICALCONNECTION'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesForExpressConnectResponseBody = {
  requestId?: string(name='RequestId', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
}

model UntagResourcesForExpressConnectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesForExpressConnectResponseBody(name='body'),
}

async function untagResourcesForExpressConnectWithOptions(request: UntagResourcesForExpressConnectRequest, runtime: Util.RuntimeOptions): UntagResourcesForExpressConnectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResourcesForExpressConnect',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResourcesForExpressConnect(request: UntagResourcesForExpressConnectRequest): UntagResourcesForExpressConnectResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesForExpressConnectWithOptions(request, runtime);
}

model UpdateDhcpOptionsSetAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', example='test'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test'),
  domainName?: string(name='DomainName', example='example.com'),
  domainNameServers?: string(name='DomainNameServers', example='192.xx.xx.123'),
  dryRun?: boolean(name='DryRun', example='false'),
  ipv6LeaseTime?: string(name='Ipv6LeaseTime'),
  leaseTime?: string(name='LeaseTime'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateDhcpOptionsSetAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateDhcpOptionsSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDhcpOptionsSetAttributeResponseBody(name='body'),
}

async function updateDhcpOptionsSetAttributeWithOptions(request: UpdateDhcpOptionsSetAttributeRequest, runtime: Util.RuntimeOptions): UpdateDhcpOptionsSetAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dhcpOptionsSetDescription)) {
    query['DhcpOptionsSetDescription'] = request.dhcpOptionsSetDescription;
  }
  if (!Util.isUnset(request.dhcpOptionsSetId)) {
    query['DhcpOptionsSetId'] = request.dhcpOptionsSetId;
  }
  if (!Util.isUnset(request.dhcpOptionsSetName)) {
    query['DhcpOptionsSetName'] = request.dhcpOptionsSetName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainNameServers)) {
    query['DomainNameServers'] = request.domainNameServers;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipv6LeaseTime)) {
    query['Ipv6LeaseTime'] = request.ipv6LeaseTime;
  }
  if (!Util.isUnset(request.leaseTime)) {
    query['LeaseTime'] = request.leaseTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDhcpOptionsSetAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDhcpOptionsSetAttribute(request: UpdateDhcpOptionsSetAttributeRequest): UpdateDhcpOptionsSetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDhcpOptionsSetAttributeWithOptions(request, runtime);
}

model UpdateGatewayRouteTableEntryAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', example='new'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.5'),
  dryRun?: boolean(name='DryRun', example='false'),
  IPv4GatewayRouteTableId?: string(name='IPv4GatewayRouteTableId', example='vtb-5ts0ohchwkp3dydt2****'),
  name?: string(name='Name', example='test'),
  nextHopId?: string(name='NextHopId', example='i-bp18xq9yguxoxe7m****'),
  nextHopType?: string(name='NextHopType', example='EcsInstance'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateGatewayRouteTableEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UpdateGatewayRouteTableEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteTableEntryAttributeResponseBody(name='body'),
}

async function updateGatewayRouteTableEntryAttributeWithOptions(request: UpdateGatewayRouteTableEntryAttributeRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteTableEntryAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.IPv4GatewayRouteTableId)) {
    query['IPv4GatewayRouteTableId'] = request.IPv4GatewayRouteTableId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.nextHopId)) {
    query['NextHopId'] = request.nextHopId;
  }
  if (!Util.isUnset(request.nextHopType)) {
    query['NextHopType'] = request.nextHopType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteTableEntryAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteTableEntryAttribute(request: UpdateGatewayRouteTableEntryAttributeRequest): UpdateGatewayRouteTableEntryAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteTableEntryAttributeWithOptions(request, runtime);
}

model UpdateIpsecServerRequest {
  clientIpPool?: string(name='ClientIpPool', example='10.0.0.0/24'),
  clientToken?: string(name='ClientToken', example='e4567-e89b-12d3-a456-42665544****'),
  dryRun?: string(name='DryRun', example='false'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  ikeConfig?: string(name='IkeConfig', example='{"IkeVersion":"ikev2","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400}'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}'),
  ipsecServerId?: string(name='IpsecServerId', example='iss-bp1bo3xuvcxo7ixll****'),
  ipsecServerName?: string(name='IpsecServerName', example='test'),
  localSubnet?: string(name='LocalSubnet', example='192.168.0.0/24,172.17.0.0/16'),
  psk?: string(name='Psk', example='Cfd123****'),
  pskEnabled?: boolean(name='PskEnabled', example='true'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
}

model UpdateIpsecServerResponseBody = {
  requestId?: string(name='RequestId', example='B61C08E5-403A-46A2-96C1-F7B1216DB10C'),
}

model UpdateIpsecServerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIpsecServerResponseBody(name='body'),
}

async function updateIpsecServerWithOptions(request: UpdateIpsecServerRequest, runtime: Util.RuntimeOptions): UpdateIpsecServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIpPool)) {
    query['ClientIpPool'] = request.clientIpPool;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.effectImmediately)) {
    query['EffectImmediately'] = request.effectImmediately;
  }
  if (!Util.isUnset(request.ikeConfig)) {
    query['IkeConfig'] = request.ikeConfig;
  }
  if (!Util.isUnset(request.ipsecConfig)) {
    query['IpsecConfig'] = request.ipsecConfig;
  }
  if (!Util.isUnset(request.ipsecServerId)) {
    query['IpsecServerId'] = request.ipsecServerId;
  }
  if (!Util.isUnset(request.ipsecServerName)) {
    query['IpsecServerName'] = request.ipsecServerName;
  }
  if (!Util.isUnset(request.localSubnet)) {
    query['LocalSubnet'] = request.localSubnet;
  }
  if (!Util.isUnset(request.psk)) {
    query['Psk'] = request.psk;
  }
  if (!Util.isUnset(request.pskEnabled)) {
    query['PskEnabled'] = request.pskEnabled;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIpsecServer',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIpsecServer(request: UpdateIpsecServerRequest): UpdateIpsecServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpsecServerWithOptions(request, runtime);
}

model UpdateIpv4GatewayAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', example='new'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', example='newname'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateIpv4GatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', example='671CEB03-C98D-5916-950C-C55B0BD06621'),
}

model UpdateIpv4GatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIpv4GatewayAttributeResponseBody(name='body'),
}

async function updateIpv4GatewayAttributeWithOptions(request: UpdateIpv4GatewayAttributeRequest, runtime: Util.RuntimeOptions): UpdateIpv4GatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ipv4GatewayDescription)) {
    query['Ipv4GatewayDescription'] = request.ipv4GatewayDescription;
  }
  if (!Util.isUnset(request.ipv4GatewayId)) {
    query['Ipv4GatewayId'] = request.ipv4GatewayId;
  }
  if (!Util.isUnset(request.ipv4GatewayName)) {
    query['Ipv4GatewayName'] = request.ipv4GatewayName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIpv4GatewayAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIpv4GatewayAttribute(request: UpdateIpv4GatewayAttributeRequest): UpdateIpv4GatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpv4GatewayAttributeWithOptions(request, runtime);
}

model UpdateNatGatewayNatTypeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', example='false'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1b0lic8uz4r6vf2****'),
  natType?: string(name='NatType', example='Enhanced'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp17nszybg8epodke****'),
}

model UpdateNatGatewayNatTypeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateNatGatewayNatTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNatGatewayNatTypeResponseBody(name='body'),
}

async function updateNatGatewayNatTypeWithOptions(request: UpdateNatGatewayNatTypeRequest, runtime: Util.RuntimeOptions): UpdateNatGatewayNatTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natType)) {
    query['NatType'] = request.natType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNatGatewayNatType',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNatGatewayNatType(request: UpdateNatGatewayNatTypeRequest): UpdateNatGatewayNatTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNatGatewayNatTypeWithOptions(request, runtime);
}

model UpdateNetworkAclEntriesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  egressAclEntries?: [ 
    {
      description?: string(name='Description', example='This is EgressAclEntries.'),
      destinationCidrIp?: string(name='DestinationCidrIp', example='10.0.0.0/24'),
      entryType?: string(name='EntryType', example='custom'),
      networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-2zecs97e0brcge46****'),
      networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
      policy?: string(name='Policy', example='accept'),
      port?: string(name='Port', example='-1/-1'),
      protocol?: string(name='Protocol', example='all'),
    }
  ](name='EgressAclEntries'),
  ingressAclEntries?: [ 
    {
      description?: string(name='Description', example='This is IngressAclEntries.'),
      entryType?: string(name='EntryType', example='custom'),
      networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-2zepn32de59j8m4****'),
      networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
      policy?: string(name='Policy', example='accept'),
      port?: string(name='Port', example='-1/-1'),
      protocol?: string(name='Protocol', example='all'),
      sourceCidrIp?: string(name='SourceCidrIp', example='10.0.0.0/24'),
    }
  ](name='IngressAclEntries'),
  networkAclId?: string(name='NetworkAclId', example='nacl-bp1lhl0taikrzxsc****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  updateEgressAclEntries?: boolean(name='UpdateEgressAclEntries', example='false'),
  updateIngressAclEntries?: boolean(name='UpdateIngressAclEntries', example='false'),
}

model UpdateNetworkAclEntriesResponseBody = {
  requestId?: string(name='RequestId', example='1170A5A0-E760-4331-9133-A7D38D973215'),
}

model UpdateNetworkAclEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNetworkAclEntriesResponseBody(name='body'),
}

async function updateNetworkAclEntriesWithOptions(request: UpdateNetworkAclEntriesRequest, runtime: Util.RuntimeOptions): UpdateNetworkAclEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.egressAclEntries)) {
    query['EgressAclEntries'] = request.egressAclEntries;
  }
  if (!Util.isUnset(request.ingressAclEntries)) {
    query['IngressAclEntries'] = request.ingressAclEntries;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.updateEgressAclEntries)) {
    query['UpdateEgressAclEntries'] = request.updateEgressAclEntries;
  }
  if (!Util.isUnset(request.updateIngressAclEntries)) {
    query['UpdateIngressAclEntries'] = request.updateIngressAclEntries;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNetworkAclEntries',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNetworkAclEntries(request: UpdateNetworkAclEntriesRequest): UpdateNetworkAclEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNetworkAclEntriesWithOptions(request, runtime);
}

model UpdatePublicIpAddressPoolAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', example='AddressPoolDescription'),
  dryRun?: boolean(name='DryRun', example='false'),
  name?: string(name='Name', example='AddressPoolName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
  regionId?: string(name='RegionId', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdatePublicIpAddressPoolAttributeResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model UpdatePublicIpAddressPoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePublicIpAddressPoolAttributeResponseBody(name='body'),
}

async function updatePublicIpAddressPoolAttributeWithOptions(request: UpdatePublicIpAddressPoolAttributeRequest, runtime: Util.RuntimeOptions): UpdatePublicIpAddressPoolAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publicIpAddressPoolId)) {
    query['PublicIpAddressPoolId'] = request.publicIpAddressPoolId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePublicIpAddressPoolAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePublicIpAddressPoolAttribute(request: UpdatePublicIpAddressPoolAttributeRequest): UpdatePublicIpAddressPoolAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePublicIpAddressPoolAttributeWithOptions(request, runtime);
}

model UpdateTrafficMirrorFilterAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', example='This is a new filter.'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', example='test'),
}

model UpdateTrafficMirrorFilterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='5816D35F-94D5-48CE-838F-2327C8EE8D49'),
}

model UpdateTrafficMirrorFilterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTrafficMirrorFilterAttributeResponseBody(name='body'),
}

async function updateTrafficMirrorFilterAttributeWithOptions(request: UpdateTrafficMirrorFilterAttributeRequest, runtime: Util.RuntimeOptions): UpdateTrafficMirrorFilterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterDescription)) {
    query['TrafficMirrorFilterDescription'] = request.trafficMirrorFilterDescription;
  }
  if (!Util.isUnset(request.trafficMirrorFilterId)) {
    query['TrafficMirrorFilterId'] = request.trafficMirrorFilterId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterName)) {
    query['TrafficMirrorFilterName'] = request.trafficMirrorFilterName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTrafficMirrorFilterAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTrafficMirrorFilterAttribute(request: UpdateTrafficMirrorFilterAttributeRequest): UpdateTrafficMirrorFilterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTrafficMirrorFilterAttributeWithOptions(request, runtime);
}

model UpdateTrafficMirrorFilterRuleAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
  destinationPortRange?: string(name='DestinationPortRange', example='-1/-1'),
  dryRun?: boolean(name='DryRun', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority', example='1'),
  protocol?: string(name='Protocol', example='ICMP'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ruleAction?: string(name='RuleAction', example='accept'),
  sourceCidrBlock?: string(name='SourceCidrBlock', example='0.0.0.0/0'),
  sourcePortRange?: string(name='SourcePortRange', example='22/40'),
  trafficMirrorFilterRuleId?: string(name='TrafficMirrorFilterRuleId', example='tmr-j6c89rzmtd3hhdugq****'),
}

model UpdateTrafficMirrorFilterRuleAttributeResponseBody = {
  requestId?: string(name='RequestId', example='02EB8585-D4DC-4E29-A0F4-7C588C82863C'),
}

model UpdateTrafficMirrorFilterRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTrafficMirrorFilterRuleAttributeResponseBody(name='body'),
}

async function updateTrafficMirrorFilterRuleAttributeWithOptions(request: UpdateTrafficMirrorFilterRuleAttributeRequest, runtime: Util.RuntimeOptions): UpdateTrafficMirrorFilterRuleAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.destinationPortRange)) {
    query['DestinationPortRange'] = request.destinationPortRange;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.ruleAction)) {
    query['RuleAction'] = request.ruleAction;
  }
  if (!Util.isUnset(request.sourceCidrBlock)) {
    query['SourceCidrBlock'] = request.sourceCidrBlock;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  if (!Util.isUnset(request.trafficMirrorFilterRuleId)) {
    query['TrafficMirrorFilterRuleId'] = request.trafficMirrorFilterRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTrafficMirrorFilterRuleAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTrafficMirrorFilterRuleAttribute(request: UpdateTrafficMirrorFilterRuleAttributeRequest): UpdateTrafficMirrorFilterRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTrafficMirrorFilterRuleAttributeWithOptions(request, runtime);
}

model UpdateTrafficMirrorSessionAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  dryRun?: boolean(name='DryRun', example='false'),
  enabled?: boolean(name='Enabled', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority', example='2'),
  regionId?: string(name='RegionId', example='cn-hongkong'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
  trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', example='This is a new session.'),
  trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', example='abc'),
  trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', example='eni-j6c2fp57q8rr47rp*****'),
  trafficMirrorTargetType?: string(name='TrafficMirrorTargetType', example='NetworkInterface'),
  virtualNetworkId?: int32(name='VirtualNetworkId', example='10'),
}

model UpdateTrafficMirrorSessionAttributeResponseBody = {
  requestId?: string(name='RequestId', example='64DCAF03-E2C7-479A-ACEA-38B79876B006'),
}

model UpdateTrafficMirrorSessionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTrafficMirrorSessionAttributeResponseBody(name='body'),
}

async function updateTrafficMirrorSessionAttributeWithOptions(request: UpdateTrafficMirrorSessionAttributeRequest, runtime: Util.RuntimeOptions): UpdateTrafficMirrorSessionAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trafficMirrorFilterId)) {
    query['TrafficMirrorFilterId'] = request.trafficMirrorFilterId;
  }
  if (!Util.isUnset(request.trafficMirrorSessionDescription)) {
    query['TrafficMirrorSessionDescription'] = request.trafficMirrorSessionDescription;
  }
  if (!Util.isUnset(request.trafficMirrorSessionId)) {
    query['TrafficMirrorSessionId'] = request.trafficMirrorSessionId;
  }
  if (!Util.isUnset(request.trafficMirrorSessionName)) {
    query['TrafficMirrorSessionName'] = request.trafficMirrorSessionName;
  }
  if (!Util.isUnset(request.trafficMirrorTargetId)) {
    query['TrafficMirrorTargetId'] = request.trafficMirrorTargetId;
  }
  if (!Util.isUnset(request.trafficMirrorTargetType)) {
    query['TrafficMirrorTargetType'] = request.trafficMirrorTargetType;
  }
  if (!Util.isUnset(request.virtualNetworkId)) {
    query['VirtualNetworkId'] = request.virtualNetworkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTrafficMirrorSessionAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTrafficMirrorSessionAttribute(request: UpdateTrafficMirrorSessionAttributeRequest): UpdateTrafficMirrorSessionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTrafficMirrorSessionAttributeWithOptions(request, runtime);
}

model UpdateVirtualBorderBandwidthRequest {
  bandwidth?: int32(name='Bandwidth', example='2'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  virtualBorderRouterId?: string(name='VirtualBorderRouterId', example='vbr-bp15zckdt37pq72****'),
}

model UpdateVirtualBorderBandwidthResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='none'),
  requestId?: string(name='RequestId', example='AA4486A8-B6AE-469E-AB09-820EF8ECFA2B'),
  success?: boolean(name='Success', example='true'),
}

model UpdateVirtualBorderBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVirtualBorderBandwidthResponseBody(name='body'),
}

async function updateVirtualBorderBandwidthWithOptions(request: UpdateVirtualBorderBandwidthRequest, runtime: Util.RuntimeOptions): UpdateVirtualBorderBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.virtualBorderRouterId)) {
    query['VirtualBorderRouterId'] = request.virtualBorderRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVirtualBorderBandwidth',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVirtualBorderBandwidth(request: UpdateVirtualBorderBandwidthRequest): UpdateVirtualBorderBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVirtualBorderBandwidthWithOptions(request, runtime);
}

model UpdateVirtualPhysicalConnectionRequest {
  dryRun?: boolean(name='DryRun', example='false'),
  expectSpec?: string(name='ExpectSpec', example='50M'),
  instanceId?: string(name='InstanceId', example='pc-bp1mrgfbtmc9brre7****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  token?: string(name='Token', example='CBCE910E-D396-4944-8****'),
  vlanId?: long(name='VlanId', example='1'),
}

model UpdateVirtualPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='7035627E-1C1D-5BC7-A830-F897A35912D1'),
  success?: string(name='Success', example='true'),
}

model UpdateVirtualPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVirtualPhysicalConnectionResponseBody(name='body'),
}

async function updateVirtualPhysicalConnectionWithOptions(request: UpdateVirtualPhysicalConnectionRequest, runtime: Util.RuntimeOptions): UpdateVirtualPhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.expectSpec)) {
    query['ExpectSpec'] = request.expectSpec;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVirtualPhysicalConnection',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVirtualPhysicalConnection(request: UpdateVirtualPhysicalConnectionRequest): UpdateVirtualPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVirtualPhysicalConnectionWithOptions(request, runtime);
}

model UpdateVpcGatewayEndpointAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dryRun?: boolean(name='DryRun', example='false'),
  endpointDescription?: string(name='EndpointDescription', example='updateendpoint'),
  endpointId?: string(name='EndpointId', example='vpce-bp1w1dmdqjpwul0v3****'),
  endpointName?: string(name='EndpointName', example='update'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyDocument?: string(name='PolicyDocument', example='{   "Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateVpcGatewayEndpointAttributeResponseBody = {
  requestId?: string(name='RequestId', example='E9654534-5A38-5545-813F-0403D49042FB'),
}

model UpdateVpcGatewayEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVpcGatewayEndpointAttributeResponseBody(name='body'),
}

async function updateVpcGatewayEndpointAttributeWithOptions(request: UpdateVpcGatewayEndpointAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcGatewayEndpointAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.endpointDescription)) {
    query['EndpointDescription'] = request.endpointDescription;
  }
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.endpointName)) {
    query['EndpointName'] = request.endpointName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyDocument)) {
    query['PolicyDocument'] = request.policyDocument;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpcGatewayEndpointAttribute',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVpcGatewayEndpointAttribute(request: UpdateVpcGatewayEndpointAttributeRequest): UpdateVpcGatewayEndpointAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcGatewayEndpointAttributeWithOptions(request, runtime);
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceUid?: long(name='ResourceUid', example='132193271328****'),
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponseBody = {
  quota?: long(name='Quota', example='2'),
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponseBody(name='body'),
}

async function vpcDescribeVpcNatGatewayNetworkInterfaceQuotaWithOptions(request: VpcDescribeVpcNatGatewayNetworkInterfaceQuotaRequest, runtime: Util.RuntimeOptions): VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceUid)) {
    query['ResourceUid'] = request.resourceUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VpcDescribeVpcNatGatewayNetworkInterfaceQuota',
    version = '2016-04-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function vpcDescribeVpcNatGatewayNetworkInterfaceQuota(request: VpcDescribeVpcNatGatewayNetworkInterfaceQuotaRequest): VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return vpcDescribeVpcNatGatewayNetworkInterfaceQuotaWithOptions(request, runtime);
}

