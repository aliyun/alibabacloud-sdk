/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('imarketing', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateDeviceRequest {
  channelId?: string(name='ChannelId'),
  city?: string(name='City'),
  deviceModelNumber?: string(name='DeviceModelNumber'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  district?: string(name='District'),
  extraMap?: map[string]any(name='ExtraMap'),
  firstScene?: string(name='FirstScene'),
  floor?: string(name='Floor'),
  locationName?: string(name='LocationName'),
  mediaId?: string(name='MediaId'),
  outerCode?: string(name='OuterCode'),
  province?: string(name='Province'),
  secondScene?: string(name='SecondScene'),
}

model CreateDeviceShrinkRequest {
  channelId?: string(name='ChannelId'),
  city?: string(name='City'),
  deviceModelNumber?: string(name='DeviceModelNumber'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  district?: string(name='District'),
  extraMapShrink?: string(name='ExtraMap'),
  firstScene?: string(name='FirstScene'),
  floor?: string(name='Floor'),
  locationName?: string(name='LocationName'),
  mediaId?: string(name='MediaId'),
  outerCode?: string(name='OuterCode'),
  province?: string(name='Province'),
  secondScene?: string(name='SecondScene'),
}

model CreateDeviceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDeviceWithOptions(tmpReq: CreateDeviceRequest, runtime: Util.RuntimeOptions): CreateDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extraMap)) {
    request.extraMapShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extraMap, 'ExtraMap', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelId)) {
    body['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.city)) {
    body['City'] = request.city;
  }
  if (!Util.isUnset(request.deviceModelNumber)) {
    body['DeviceModelNumber'] = request.deviceModelNumber;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.deviceType)) {
    body['DeviceType'] = request.deviceType;
  }
  if (!Util.isUnset(request.district)) {
    body['District'] = request.district;
  }
  if (!Util.isUnset(request.extraMapShrink)) {
    body['ExtraMap'] = request.extraMapShrink;
  }
  if (!Util.isUnset(request.firstScene)) {
    body['FirstScene'] = request.firstScene;
  }
  if (!Util.isUnset(request.floor)) {
    body['Floor'] = request.floor;
  }
  if (!Util.isUnset(request.locationName)) {
    body['LocationName'] = request.locationName;
  }
  if (!Util.isUnset(request.mediaId)) {
    body['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.outerCode)) {
    body['OuterCode'] = request.outerCode;
  }
  if (!Util.isUnset(request.province)) {
    body['Province'] = request.province;
  }
  if (!Util.isUnset(request.secondScene)) {
    body['SecondScene'] = request.secondScene;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDevice',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceWithOptions(request, runtime);
}

model GetBrandPageRequest {
  accountNo?: string(name='AccountNo'),
  mainId?: long(name='MainId'),
  mainName?: string(name='MainName'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model GetBrandPageResponseBody = {
  code?: long(name='Code'),
  data?: {
    list?: [ 
      {
        accountNo?: string(name='AccountNo'),
        accountType?: string(name='AccountType'),
        company?: string(name='Company'),
        mainId?: long(name='MainId'),
        mainName?: string(name='MainName'),
        parentMainId?: long(name='ParentMainId'),
      }
    ](name='List'),
    pageInfo?: {
      page?: int32(name='Page'),
      pageSize?: int32(name='PageSize'),
      totalNumber?: int32(name='TotalNumber'),
    }(name='PageInfo'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBrandPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBrandPageResponseBody(name='body'),
}

async function getBrandPageWithOptions(request: GetBrandPageRequest, runtime: Util.RuntimeOptions): GetBrandPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNo)) {
    query['AccountNo'] = request.accountNo;
  }
  if (!Util.isUnset(request.mainId)) {
    query['MainId'] = request.mainId;
  }
  if (!Util.isUnset(request.mainName)) {
    query['MainName'] = request.mainName;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBrandPage',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBrandPage(request: GetBrandPageRequest): GetBrandPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBrandPageWithOptions(request, runtime);
}

model GetBusinessIdRequest {
  businessId?: string(name='BusinessId'),
}

model GetBusinessIdResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBusinessIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBusinessIdResponseBody(name='body'),
}

async function getBusinessIdWithOptions(request: GetBusinessIdRequest, runtime: Util.RuntimeOptions): GetBusinessIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessId)) {
    query['BusinessId'] = request.businessId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBusinessId',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBusinessId(request: GetBusinessIdRequest): GetBusinessIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessIdWithOptions(request, runtime);
}

model GetLeadsListPageRequest {
  componentId?: long(name='ComponentId'),
  contentId?: long(name='ContentId'),
  creativeId?: long(name='CreativeId'),
  endTime?: long(name='EndTime'),
  mainId?: long(name='MainId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  taskId?: long(name='TaskId'),
}

model GetLeadsListPageResponseBody = {
  code?: int32(name='Code'),
  data?: {
    componentId?: string(name='ComponentId'),
    contentId?: string(name='ContentId'),
    creativeId?: string(name='CreativeId'),
    leadsDetail?: string(name='LeadsDetail'),
    serialId?: string(name='SerialId'),
    taskId?: string(name='TaskId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageInfo?: {
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    totalNumber?: int32(name='TotalNumber'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetLeadsListPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLeadsListPageResponseBody(name='body'),
}

async function getLeadsListPageWithOptions(request: GetLeadsListPageRequest, runtime: Util.RuntimeOptions): GetLeadsListPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.componentId)) {
    query['ComponentId'] = request.componentId;
  }
  if (!Util.isUnset(request.contentId)) {
    query['ContentId'] = request.contentId;
  }
  if (!Util.isUnset(request.creativeId)) {
    query['CreativeId'] = request.creativeId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.mainId)) {
    query['MainId'] = request.mainId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLeadsListPage',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLeadsListPage(request: GetLeadsListPageRequest): GetLeadsListPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLeadsListPageWithOptions(request, runtime);
}

model GetMainPartListByUserIdResponseBody = {
  data?: {
    token?: string(name='Token'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpCode?: int32(name='HttpCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMainPartListByUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMainPartListByUserIdResponseBody(name='body'),
}

async function getMainPartListByUserIdWithOptions(runtime: Util.RuntimeOptions): GetMainPartListByUserIdResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetMainPartListByUserId',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMainPartListByUserId(): GetMainPartListByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMainPartListByUserIdWithOptions(runtime);
}

model GetMainPartPageRequest {
  mainId?: long(name='MainId'),
  mainName?: string(name='MainName'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model GetMainPartPageResponseBody = {
  code?: long(name='Code'),
  data?: {
    list?: [ 
      {
        accountTypeList?: [ 
          {
            accountType?: string(name='AccountType'),
            accountTypeDesc?: string(name='AccountTypeDesc'),
          }
        ](name='AccountTypeList'),
        company?: string(name='Company'),
        mainId?: long(name='MainId'),
        mainName?: string(name='MainName'),
      }
    ](name='List'),
    pageInfo?: {
      page?: int32(name='page'),
      pageSize?: int32(name='pageSize'),
      totalNumber?: int32(name='totalNumber'),
    }(name='PageInfo'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMainPartPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMainPartPageResponseBody(name='body'),
}

async function getMainPartPageWithOptions(request: GetMainPartPageRequest, runtime: Util.RuntimeOptions): GetMainPartPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mainId)) {
    query['MainId'] = request.mainId;
  }
  if (!Util.isUnset(request.mainName)) {
    query['MainName'] = request.mainName;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMainPartPage',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMainPartPage(request: GetMainPartPageRequest): GetMainPartPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMainPartPageWithOptions(request, runtime);
}

model GetUserFinishedAdRequest {
  adid?: long(name='Adid'),
  clicklink?: string(name='Clicklink'),
  id?: string(name='Id'),
  mediaid?: string(name='Mediaid'),
  tagid?: string(name='Tagid'),
  uid?: string(name='Uid'),
}

model GetUserFinishedAdResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  ext?: map[string]string(name='Ext'),
  header?: {
    costTime?: long(name='CostTime'),
    rpcId?: string(name='RpcId'),
    traceId?: string(name='TraceId'),
    version?: string(name='Version'),
  }(name='Header'),
  requestId?: string(name='RequestId'),
  result?: {
    commission?: string(name='Commission'),
    marketingType?: string(name='MarketingType'),
    objective?: string(name='Objective'),
    success?: boolean(name='Success'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model GetUserFinishedAdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserFinishedAdResponseBody(name='body'),
}

async function getUserFinishedAdWithOptions(request: GetUserFinishedAdRequest, runtime: Util.RuntimeOptions): GetUserFinishedAdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserFinishedAd',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserFinishedAd(request: GetUserFinishedAdRequest): GetUserFinishedAdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserFinishedAdWithOptions(request, runtime);
}

model ListAdvertisingRequest {
  app?: {
    ext?: map[string]any(name='Ext'),
    mediaid?: string(name='Mediaid'),
    sn?: string(name='Sn'),
  }(name='App'),
  dealtype?: int32(name='Dealtype'),
  device?: {
    androidid?: string(name='Androidid'),
    androidmd5?: string(name='Androidmd5'),
    caid?: string(name='Caid'),
    carrier?: string(name='Carrier'),
    connectiontype?: int32(name='Connectiontype'),
    devicetype?: int32(name='Devicetype'),
    geo?: {
      city?: string(name='City'),
      district?: string(name='District'),
      lat?: double(name='Lat'),
      lon?: double(name='Lon'),
      province?: string(name='Province'),
    }(name='Geo'),
    idfa?: string(name='Idfa'),
    imei?: string(name='Imei'),
    imeimd5?: string(name='Imeimd5'),
    ip?: string(name='Ip'),
    language?: string(name='Language'),
    mac?: string(name='Mac'),
    macmd5?: string(name='Macmd5'),
    make?: string(name='Make'),
    model?: string(name='Model'),
    oaid?: string(name='Oaid'),
    os?: string(name='Os'),
    osv?: string(name='Osv'),
    ua?: string(name='Ua'),
    utdid?: string(name='Utdid'),
  }(name='Device'),
  ext?: map[string]any(name='Ext'),
  id?: string(name='Id'),
  imp?: [ 
    {
      id?: string(name='Id'),
      tagid?: string(name='Tagid'),
    }
  ](name='Imp'),
  test?: int32(name='Test'),
  user?: {
    id?: string(name='Id'),
    usertype?: string(name='Usertype'),
  }(name='User'),
}

model ListAdvertisingShrinkRequest {
  appShrink?: string(name='App'),
  dealtype?: int32(name='Dealtype'),
  deviceShrink?: string(name='Device'),
  extShrink?: string(name='Ext'),
  id?: string(name='Id'),
  impShrink?: string(name='Imp'),
  test?: int32(name='Test'),
  userShrink?: string(name='User'),
}

model ListAdvertisingResponseBody = {
  errorcode?: string(name='Errorcode'),
  errormsg?: string(name='Errormsg'),
  ext?: map[string]string(name='Ext'),
  header?: {
    costTime?: long(name='CostTime'),
    rpcId?: string(name='RpcId'),
    traceId?: string(name='TraceId'),
    version?: string(name='Version'),
  }(name='Header'),
  requestId?: string(name='RequestId'),
  result?: {
    bidid?: string(name='Bidid'),
    id?: string(name='Id'),
    seatbid?: [ 
      {
        bid?: [ 
          {
            ads?: [ 
              {
                crid?: string(name='Crid'),
                crurl?: string(name='Crurl'),
                icon?: {
                  url?: string(name='Url'),
                }(name='Icon'),
                id?: string(name='Id'),
                images?: [ 
                  {
                    desc?: string(name='Desc'),
                    format?: string(name='Format'),
                    url?: string(name='Url'),
                  }
                ](name='Images'),
                interacttype?: int32(name='Interacttype'),
                labeltype?: string(name='Labeltype'),
                landingurls?: [ string ](name='Landingurls'),
                marketingtype?: string(name='Marketingtype'),
                objective?: string(name='Objective'),
                price?: string(name='Price'),
                seat?: string(name='Seat'),
                style?: string(name='Style'),
                title?: string(name='Title'),
                trackers?: {
                  imps?: [ string ](name='Imps'),
                }(name='Trackers'),
                type?: string(name='Type'),
              }
            ](name='Ads'),
            impid?: string(name='Impid'),
          }
        ](name='Bid'),
      }
    ](name='Seatbid'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ListAdvertisingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAdvertisingResponseBody(name='body'),
}

async function listAdvertisingWithOptions(tmpReq: ListAdvertisingRequest, runtime: Util.RuntimeOptions): ListAdvertisingResponse {
  Util.validateModel(tmpReq);
  var request = new ListAdvertisingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!Util.isUnset(tmpReq.device)) {
    request.deviceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.device, 'Device', 'json');
  }
  if (!Util.isUnset(tmpReq.ext)) {
    request.extShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ext, 'Ext', 'json');
  }
  if (!Util.isUnset(tmpReq.imp)) {
    request.impShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imp, 'Imp', 'json');
  }
  if (!Util.isUnset(tmpReq.user)) {
    request.userShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.user, 'User', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAdvertising',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAdvertising(request: ListAdvertisingRequest): ListAdvertisingResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAdvertisingWithOptions(request, runtime);
}

model SendSmsRequest {
  phoneNumbers?: string(name='PhoneNumbers'),
}

model SendSmsResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpCode?: int32(name='HttpCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendSmsResponseBody(name='body'),
}

async function sendSmsWithOptions(request: SendSmsRequest, runtime: Util.RuntimeOptions): SendSmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.phoneNumbers)) {
    query['PhoneNumbers'] = request.phoneNumbers;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendSms',
    version = '2022-07-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendSms(request: SendSmsRequest): SendSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendSmsWithOptions(request, runtime);
}

