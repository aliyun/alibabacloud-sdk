/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'imarketing';
  @version = '2022-07-04';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelOrderRequest {
  channelId: string(name='ChannelId', example='665934690847195139', position='Body'),
  tradeId: string(name='TradeId', example='172df1fb-e3f0-4561-be77-7aa6cd12dcc9', position='Body'),
}

model CancelOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg'),
  ext?: map[string]any(name='Ext'),
  header?: {
    costTime?: long(name='CostTime', example='6'),
    innerErrorCode?: string(name='InnerErrorCode', example='103-002-B-001'),
    innerErrorMsg?: string(name='InnerErrorMsg'),
    rpcId?: string(name='RpcId', description='RPC ID', example='0.1.1'),
    traceId?: string(name='TraceId', example='210bc60a16915608213824028d2a16'),
    version?: string(name='Version', example='1.0'),
  }(name='Header'),
  result?: {
    requestId?: string(name='RequestId', example='565F4077-E25D-1DDF-A970-FEF3D7A05B1A'),
    success?: boolean(name='Success', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CancelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOrderResponseBody(name='body'),
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrder', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmSampleReceivedRequest {
  channelId: string(name='ChannelId', example='665934690847195139', position='Body'),
  tradeId: string(name='TradeId', example='e293f3d3-1e51-4e60-a0bb-392a508b0c29', position='Body'),
}

model ConfirmSampleReceivedResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg'),
  ext?: map[string]any(name='Ext'),
  header?: {
    costTime?: long(name='CostTime', example='51'),
    innerErrorCode?: string(name='InnerErrorCode', example='103-002-B-001'),
    innerErrorMsg?: string(name='InnerErrorMsg'),
    rpcId?: string(name='RpcId', description='RPC ID', example='0.1.1'),
    traceId?: string(name='TraceId', example='210bc60a16915517790197741d2a16'),
    version?: string(name='Version', example='1.0'),
  }(name='Header'),
  result?: {
    requestId?: string(name='RequestId', example='7ADA4EDD-7069-1252-A0FF-C6E7DB2EABD4'),
    success?: boolean(name='Success', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ConfirmSampleReceivedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmSampleReceivedResponseBody(name='body'),
}

async function confirmSampleReceived(request: ConfirmSampleReceivedRequest): ConfirmSampleReceivedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmSampleReceived', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmSampleShippedRequest {
  buyerAddress: string(name='BuyerAddress', position='Body'),
  buyerName: string(name='BuyerName', position='Body'),
  buyerPhoneNumber: string(name='BuyerPhoneNumber', example='13988888888', position='Body'),
  channelId: string(name='ChannelId', example='665934690847195139', position='Body'),
  tradeId: string(name='TradeId', example='8607f977-20eb-438f-957e-72d6df43ef8f', position='Body'),
}

model ConfirmSampleShippedResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg'),
  ext?: map[string]any(name='Ext'),
  header?: {
    costTime?: long(name='CostTime', example='11'),
    innerErrorCode?: string(name='InnerErrorCode', example='103-002-B-001'),
    innerErrorMsg?: string(name='InnerErrorMsg'),
    rpcId?: string(name='RpcId', description='RPC ID', example='0.1.1'),
    traceId?: string(name='TraceId', example='06914b9a6c454884dc9385066fdb41d2'),
    version?: string(name='Version', example='1.0'),
  }(name='Header'),
  result?: {
    requestId?: string(name='RequestId', example='E737D6A2-1D50-11C0-8286-B652CD1C20D1'),
    success?: boolean(name='Success', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ConfirmSampleShippedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmSampleShippedResponseBody(name='body'),
}

async function confirmSampleShipped(request: ConfirmSampleShippedRequest): ConfirmSampleShippedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmSampleShipped', 'POST', '/', 'json', true, 'form', request);
}

model CreateDeviceRequest {
  channelId?: string(name='ChannelId', example='747469885047067648', position='Body'),
  city?: string(name='City', position='Body'),
  deviceModelNumber?: string(name='DeviceModelNumber', example='3306196', position='Body'),
  deviceName?: string(name='DeviceName', example='ETCPPARK', position='Body'),
  deviceType?: string(name='DeviceType', example='android', position='Body'),
  district?: string(name='District', position='Body'),
  extraMap?: map[string]any(name='ExtraMap', shrink='json', position='Body'),
  firstScene?: string(name='FirstScene', position='Body'),
  floor?: string(name='Floor', position='Body'),
  locationName?: string(name='LocationName', position='Body'),
  mediaId?: string(name='MediaId', example='707566617274263557', position='Body'),
  outerCode?: string(name='OuterCode', example='9305102437', position='Body'),
  province?: string(name='Province', position='Body'),
  secondScene?: string(name='SecondScene', example='CBD', position='Body'),
}

model CreateDeviceResponseBody = {
  code?: string(name='Code', description='Id of the request', example='200'),
  message?: string(name='Message', example='Success'),
  model?: string(name='Model', example='784422933136765953'),
  requestId?: string(name='RequestId', description='Id of the request', example='ea1a40002116661614863891490d0074'),
  success?: boolean(name='Success', example='True'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCreativeInfoRequest {
  accountNo?: string(name='AccountNo', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  id: long(name='Id', example='1', position='Query'),
  mainId?: long(name='MainId', position='Query'),
  updateUser?: string(name='UpdateUser', position='Query'),
}

model DeleteCreativeInfoResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCreativeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCreativeInfoResponseBody(name='body'),
}

async function deleteCreativeInfo(request: DeleteCreativeInfoRequest): DeleteCreativeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCreativeInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetAdvertisingForE2Request {
}

model GetAdvertisingForE2ResponseBody = {
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  header?: {
    costTime?: long(name='CostTime', description='costTime', example='51'),
    innerErrorCode?: string(name='InnerErrorCode', description='innerErrorCode', example='103-002-B-001'),
    innerErrorMsg?: string(name='InnerErrorMsg', description='innerErrorMsg'),
    rpcId?: string(name='RpcId', description='rpcId', example='0.1.1'),
    traceId?: string(name='TraceId', description='traceId', example='0bc1ec4216798984196977133e7f62'),
    version?: string(name='Version', description='version', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
  }(name='Header', description='header'),
  requestId?: string(name='RequestId', example='A53EB3C4-DD25-5B90-9029-4A414877CFFB'),
  result?: {
    imgUrl?: string(name='ImgUrl'),
    targetUrl?: string(name='TargetUrl', example='https://********'),
  }(name='Result'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetAdvertisingForE2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAdvertisingForE2ResponseBody(name='body'),
}

async function getAdvertisingForE2(request: GetAdvertisingForE2Request): GetAdvertisingForE2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAdvertisingForE2', 'POST', '/', 'json', false, 'json', request);
}

model GetBrandPageRequest {
  accountNo?: string(name='AccountNo', position='Query'),
  mainId: long(name='MainId', example='162667949547700', minimum=1, maximum=9999999999999999, position='Query'),
  mainName?: string(name='MainName', position='Query'),
  pageIndex: int32(name='PageIndex', example='1', minimum=0, maximum=99999, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
}

model GetBrandPageResponseBody = {
  code?: long(name='Code'),
  data?: {
    list?: [ 
      {
        accountNo?: string(name='AccountNo'),
        accountType?: string(name='AccountType'),
        company?: string(name='Company'),
        mainId?: long(name='MainId'),
        mainName?: string(name='MainName'),
        parentMainId?: long(name='ParentMainId'),
      }
    ](name='List'),
    pageInfo?: {
      page?: int32(name='Page', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalNumber?: int32(name='TotalNumber', example='1000'),
    }(name='PageInfo'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBrandPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBrandPageResponseBody(name='body'),
}

async function getBrandPage(request: GetBrandPageRequest): GetBrandPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBrandPage', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessIdRequest {
  businessId?: string(name='BusinessId', position='Query'),
}

model GetBusinessIdResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBusinessIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBusinessIdResponseBody(name='body'),
}

async function getBusinessId(request: GetBusinessIdRequest): GetBusinessIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessId', 'POST', '/', 'json', false, 'json', request);
}

model GetCreativeInfoRequest {
  accountNo?: string(name='AccountNo', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  id: long(name='Id', example='1', position='Query'),
  mainId?: long(name='MainId', position='Query'),
}

model GetCreativeInfoResponseBody = {
  code?: int32(name='Code'),
  data?: {
    accountNo?: string(name='AccountNo'),
    chainValue?: string(name='ChainValue'),
    componentIdList?: string(name='ComponentIdList'),
    id?: int32(name='Id'),
    mainId?: long(name='MainId'),
    name?: string(name='Name'),
    pageId?: string(name='PageId'),
    status?: int32(name='Status'),
    taskCount?: int32(name='TaskCount'),
    url?: string(name='Url'),
    urlType?: string(name='UrlType'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCreativeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCreativeInfoResponseBody(name='body'),
}

async function getCreativeInfo(request: GetCreativeInfoRequest): GetCreativeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCreativeInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetLeadsListPageRequest {
  componentId?: long(name='ComponentId', position='Query'),
  contentId?: long(name='ContentId', position='Query'),
  creativeId?: long(name='CreativeId', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  mainId: long(name='MainId', minimum=1, maximum=9999999999999999, position='Query'),
  pageIndex: int32(name='PageIndex', example='1', minimum=1, maximum=999999, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=2000, position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
}

model GetLeadsListPageResponseBody = {
  code?: int32(name='Code'),
  data?: {
    list?: [ 
      {
        componentId?: string(name='ComponentId'),
        contentId?: long(name='ContentId'),
        creativeId?: int32(name='CreativeId'),
        creativeName?: string(name='CreativeName'),
        leadsDetail?: string(name='LeadsDetail'),
        serialId?: long(name='SerialId'),
        taskId?: long(name='TaskId'),
      }
    ](name='List'),
    pageInfo?: {
      page?: int32(name='Page'),
      pageSize?: int32(name='PageSize'),
      totalNumber?: int32(name='TotalNumber'),
    }(name='PageInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetLeadsListPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLeadsListPageResponseBody(name='body'),
}

async function getLeadsListPage(request: GetLeadsListPageRequest): GetLeadsListPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLeadsListPage', 'POST', '/', 'json', false, 'json', request);
}

model GetMainPartPageRequest {
  mainId?: long(name='MainId', example='162859085538403', minimum=1, maximum=9628590855384039, position='Query'),
  mainName?: string(name='MainName', position='Query'),
  pageIndex: int32(name='PageIndex', example='1', minimum=0, maximum=99999, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=10000, position='Query'),
}

model GetMainPartPageResponseBody = {
  code?: long(name='Code'),
  data?: {
    list?: [ 
      {
        accountTypeList?: [ 
          {
            accountType?: string(name='AccountType'),
            accountTypeDesc?: string(name='AccountTypeDesc'),
          }
        ](name='AccountTypeList'),
        company?: string(name='Company'),
        mainId?: long(name='MainId'),
        mainName?: string(name='MainName'),
      }
    ](name='List'),
    pageInfo?: {
      page?: int32(name='Page', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalNumber?: int32(name='TotalNumber', example='1000'),
    }(name='PageInfo'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMainPartPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMainPartPageResponseBody(name='body'),
}

async function getMainPartPage(request: GetMainPartPageRequest): GetMainPartPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMainPartPage', 'POST', '/', 'json', false, 'json', request);
}

model GetOssUploadSignatureRequest {
  fileName?: string(name='FileName', position='Query'),
  fileType?: string(name='FileType', position='Query'),
}

model GetOssUploadSignatureResponseBody = {
  data?: {
    accessKeyId?: string(name='AccessKeyId'),
    expire?: string(name='Expire'),
    host?: string(name='Host'),
    ossKey?: string(name='OssKey'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  httpCode?: int32(name='HttpCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOssUploadSignatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOssUploadSignatureResponseBody(name='body'),
}

async function getOssUploadSignature(request: GetOssUploadSignatureRequest): GetOssUploadSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssUploadSignature', 'GET', '/', 'json', false, 'json', request);
}

model GetRelatedByCreativeIdRequest {
  id: int32(name='Id', position='Query'),
}

model GetRelatedByCreativeIdResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      contentId?: long(name='ContentId'),
      contentName?: string(name='ContentName'),
      taskId?: long(name='TaskId'),
      taskName?: string(name='TaskName'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRelatedByCreativeIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRelatedByCreativeIdResponseBody(name='body'),
}

async function getRelatedByCreativeId(request: GetRelatedByCreativeIdRequest): GetRelatedByCreativeIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRelatedByCreativeId', 'POST', '/', 'json', false, 'json', request);
}

model GetUserFinishedAdRequest {
  adid?: long(name='Adid', position='Query'),
  clicklink?: string(name='Clicklink', position='Query'),
  id?: string(name='Id', position='Query'),
  mediaid?: string(name='Mediaid', position='Query'),
  tagid?: string(name='Tagid', position='Query'),
  uid?: string(name='Uid', position='Query'),
}

model GetUserFinishedAdResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  ext?: map[string]string(name='Ext'),
  header?: {
    costTime?: long(name='CostTime'),
    rpcId?: string(name='RpcId'),
    traceId?: string(name='TraceId'),
    version?: string(name='Version'),
  }(name='Header'),
  requestId?: string(name='RequestId'),
  result?: {
    commission?: string(name='Commission'),
    id?: string(name='Id'),
    marketingType?: string(name='MarketingType'),
    objective?: string(name='Objective'),
    success?: boolean(name='Success'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model GetUserFinishedAdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserFinishedAdResponseBody(name='body'),
}

async function getUserFinishedAd(request: GetUserFinishedAdRequest): GetUserFinishedAdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserFinishedAd', 'GET', '/', 'json', false, 'json', request);
}

model ListAdvertisingRequest {
  app?: {
    appid?: string(name='Appid'),
    ext?: map[string]any(name='Ext'),
    mediaid?: string(name='Mediaid'),
    sn?: string(name='Sn'),
  }(name='App', shrink='json', position='Query'),
  dealtype?: int32(name='Dealtype', position='Query'),
  device?: {
    androidid?: string(name='Androidid'),
    androidmd5?: string(name='Androidmd5'),
    caid?: string(name='Caid'),
    carrier?: string(name='Carrier'),
    connectiontype?: int32(name='Connectiontype'),
    devicetype?: int32(name='Devicetype'),
    geo?: {
      city?: string(name='City'),
      district?: string(name='District'),
      lat?: double(name='Lat'),
      lon?: double(name='Lon'),
      province?: string(name='Province'),
    }(name='Geo'),
    idfa?: string(name='Idfa'),
    imei?: string(name='Imei'),
    imeimd5?: string(name='Imeimd5'),
    ip?: string(name='Ip'),
    language?: string(name='Language'),
    mac?: string(name='Mac'),
    macmd5?: string(name='Macmd5'),
    make?: string(name='Make'),
    model?: string(name='Model'),
    oaid?: string(name='Oaid'),
    os?: string(name='Os'),
    osv?: string(name='Osv'),
    ua?: string(name='Ua'),
    utdid?: string(name='Utdid'),
  }(name='Device', shrink='json', position='Query'),
  ext?: map[string]any(name='Ext', shrink='json', position='Query'),
  id?: string(name='Id', position='Query'),
  imp?: [ 
    {
      id?: string(name='Id'),
      tagid?: string(name='Tagid'),
    }
  ](name='Imp', shrink='json', position='Query'),
  test?: int32(name='Test', position='Query'),
  user?: {
    id?: string(name='Id'),
    usertype?: string(name='Usertype'),
  }(name='User', shrink='json', position='Query'),
}

model ListAdvertisingResponseBody = {
  errorcode?: string(name='Errorcode'),
  errormsg?: string(name='Errormsg'),
  ext?: map[string]string(name='Ext'),
  header?: {
    costTime?: long(name='CostTime'),
    rpcId?: string(name='RpcId'),
    traceId?: string(name='TraceId'),
    version?: string(name='Version'),
  }(name='Header'),
  requestId?: string(name='RequestId'),
  result?: {
    bidid?: string(name='Bidid'),
    id?: string(name='Id'),
    seatbid?: [ 
      {
        bid?: [ 
          {
            ads?: [ 
              {
                crid?: string(name='Crid'),
                crurl?: string(name='Crurl'),
                icon?: {
                  url?: string(name='Url'),
                }(name='Icon'),
                id?: string(name='Id'),
                images?: [ 
                  {
                    desc?: string(name='Desc'),
                    format?: string(name='Format'),
                    url?: string(name='Url'),
                  }
                ](name='Images'),
                interacttype?: int32(name='Interacttype'),
                labeltype?: string(name='Labeltype'),
                landingurls?: [ string ](name='Landingurls'),
                marketingtype?: string(name='Marketingtype'),
                objective?: string(name='Objective'),
                price?: string(name='Price'),
                seat?: string(name='Seat'),
                style?: string(name='Style'),
                title?: string(name='Title'),
                trackers?: {
                  imps?: [ string ](name='Imps'),
                }(name='Trackers'),
                type?: string(name='Type'),
              }
            ](name='Ads'),
            impid?: string(name='Impid'),
          }
        ](name='Bid'),
      }
    ](name='Seatbid'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ListAdvertisingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAdvertisingResponseBody(name='body'),
}

async function listAdvertising(request: ListAdvertisingRequest): ListAdvertisingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAdvertising', 'GET', '/', 'json', false, 'json', request);
}

model ListSpecificAdRequest {
  app?: {
    ext?: map[string]any(name='Ext', description='ext', example='{\\"cxyAppName\\":\\"aliInstantAppMRCJ\\",\\"cxyUserType\\":\\"cxyAliInstantApp\\",\\"openId\\":\\"2088412404350201\\",\\"cxyUserId\\":\\"894464ABFC054B51AD971DFBDB97D9C0\\"}'),
    mediaid?: string(name='Mediaid', description='mediaid', example='234546546'),
    sn?: string(name='Sn', description='sn', example='testSn'),
  }(name='App', description='app', shrink='json', position='Query'),
  ext?: map[string]any(name='Ext', example='{\\"cxyAppName\\":\\"aliInstantAppMRCJ\\",\\"cxyUserType\\":\\"cxyAliInstantApp\\",\\"openId\\":\\"2088412404350201\\",\\"cxyUserId\\":\\"894464ABFC054B51AD971DFBDB97D9C0\\"}', shrink='json', position='Query'),
  id?: string(name='Id', description='id', example='acbef-345-6546', position='Query'),
  imp?: [ 
    {
      id?: string(name='Id', description='id', example='74'),
      tagid?: string(name='Tagid', description='tagid', example='7857789563'),
    }
  ](name='Imp', description='imp', shrink='json', position='Query'),
  user?: {
    id?: string(name='Id', description='uid', example='76403197902848'),
    usertype?: string(name='Usertype', description='uidtype', example='ALIPAY_OPEN_ID'),
  }(name='User', description='user', shrink='json', position='Query'),
  verifyad?: [ 
    {
      id?: string(name='Id', description='id', example='76403197902848'),
      itemid?: string(name='Itemid', example='242323'),
      marketingtype?: string(name='Marketingtype', example='brandDispatch'),
      seat?: string(name='Seat', example='4534523'),
    }
  ](name='Verifyad', shrink='json', position='Query'),
}

model ListSpecificAdResponseBody = {
  errorcode?: string(name='Errorcode', description='errorCode', example='P1001'),
  errormsg?: string(name='Errormsg', description='errorMsg', example='error'),
  ext?: map[string]string(name='Ext', description='ext'),
  header?: {
    costTime?: long(name='CostTime', description='costTime', example='15'),
    rpcId?: string(name='RpcId', description='rpcId', example='xhx3mwagszdxb5lf'),
    traceId?: string(name='TraceId', description='traceId', example='xhx3mwa'),
    version?: string(name='Version', description='version', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
  }(name='Header', description='header'),
  requestId?: string(name='RequestId', example='7ADA4EDD-7069-1252-A0FF-C6E7DB2EABD4'),
  result?: {
    bidid?: string(name='Bidid', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
    id?: string(name='Id', description='id', example='32'),
    seatbid?: [ 
      {
        bid?: [ 
          {
            ads?: [ 
              {
                crid?: string(name='Crid', description='crid', example='23435345'),
                crurl?: string(name='Crurl', example='www.taobao.com'),
                icon?: {
                  url?: string(name='Url', example='https://market.m.taobao.com/app/alicloud-tools/base-h5/index.html?rootId=16022413&appId=100100100100&pageId=page_0d884ec7&BusinessId=yc-165407506207478-165511576113195&preview=true&cid=32'),
                }(name='Icon'),
                id?: string(name='Id', example='51313927061504'),
                interacttype?: int32(name='Interacttype', description='Interacttype', example='1'),
                itemid?: string(name='Itemid', example='234543'),
                labeltype?: string(name='Labeltype'),
                landingurls?: [ string ](name='Landingurls'),
                marketingtype?: string(name='Marketingtype', example='OnlineStoreMember'),
                objective?: string(name='Objective', example='SINGLE_ACQUISITION'),
                price?: string(name='Price', example='69.0'),
                seat?: string(name='Seat', description='seat', example='645534523'),
                title?: string(name='Title'),
                trackers?: {
                  imps?: [ string ](name='Imps'),
                }(name='Trackers'),
              }
            ](name='Ads', description='ad'),
            impid?: string(name='Impid', description='impId', example='53453423'),
          }
        ](name='Bid', description='Bid'),
      }
    ](name='Seatbid', description='seat'),
  }(name='Result'),
  success?: boolean(name='Success', description='success', example='True'),
}

model ListSpecificAdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSpecificAdResponseBody(name='body'),
}

async function listSpecificAd(request: ListSpecificAdRequest): ListSpecificAdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSpecificAd', 'POST', '/', 'json', false, 'json', request);
}

model QueryAuditResultRequest {
  dspId?: string(name='DspId', position='Query'),
  ids?: [ string ](name='Ids', position='Query'),
}

model QueryAuditResultResponseBody = {
  message?: string(name='Message'),
  records?: [ 
    {
      crid?: string(name='Crid'),
      reason?: string(name='Reason'),
      state?: int32(name='State'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
  total?: int32(name='Total'),
}

model QueryAuditResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAuditResultResponseBody(name='body'),
}

async function queryAuditResult(request: QueryAuditResultRequest): QueryAuditResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuditResult', 'POST', '/', 'json', false, 'json', request);
}

model QueryBenefitGrantResultRequest {
  cloducodeFlowNo?: string(name='CloducodeFlowNo', example='12345', position='Body'),
  outerCustomerId?: string(name='OuterCustomerId', position='Body'),
}

model QueryBenefitGrantResultResponseBody = {
  code?: string(name='Code', description='Id of the request', example='200'),
  debug?: boolean(name='Debug', description='123', example='true'),
  message?: string(name='Message', example='Success'),
  model?: {
    amount?: long(name='Amount', example='2'),
    cloudcodeFlowNo?: string(name='CloudcodeFlowNo', description='12345', example='123'),
    outerCustomerId?: string(name='OuterCustomerId', description='12345', example='123'),
    outerFlowNo?: string(name='OuterFlowNo', description='12345', example='123'),
    remark?: string(name='Remark'),
    status?: int32(name='Status', example='0'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='A53EB3C4-DD25-5B90-9029-4A414877CFFB'),
  success?: boolean(name='Success', example='True'),
}

model QueryBenefitGrantResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBenefitGrantResultResponseBody(name='body'),
}

async function queryBenefitGrantResult(request: QueryBenefitGrantResultRequest): QueryBenefitGrantResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBenefitGrantResult', 'POST', '/', 'json', true, 'form', request);
}

model QueryFinanceUserInfoRequest {
  activityId?: long(name='ActivityId', example='1', position='Body'),
  userId?: long(name='UserId', example='1', position='Body'),
}

model QueryFinanceUserInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg'),
  ext?: map[string]string(name='Ext'),
  header?: {
    costTime?: long(name='CostTime', example='19'),
    innerErrorCode?: string(name='InnerErrorCode', example='1'),
    innerErrorMsg?: string(name='InnerErrorMsg'),
    rpcId?: string(name='RpcId', description='RPC ID', example='0.1.1'),
    traceId?: string(name='TraceId', example='123456'),
    version?: string(name='Version', example='10'),
  }(name='Header'),
  result?: {
    requestId?: string(name='RequestId', example='123456'),
    totalIncomeAmount?: long(name='TotalIncomeAmount', example='100'),
    userPageType?: string(name='UserPageType', example='A'),
    yesterdayIncomeAmount?: long(name='YesterdayIncomeAmount', example='100'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model QueryFinanceUserInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFinanceUserInfoResponseBody(name='body'),
}

async function queryFinanceUserInfo(request: QueryFinanceUserInfoRequest): QueryFinanceUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFinanceUserInfo', 'POST', '/', 'json', true, 'form', request);
}

model QueryOrderRequest {
  channelId: string(name='ChannelId', example='665934690847195139', position='Body'),
  channelTradeId?: string(name='ChannelTradeId', example='202308101', position='Body'),
  tradeId?: string(name='TradeId', example='bb7b39c7-4982-41af-8158-1a694b40cf2a', position='Body'),
}

model QueryOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg'),
  ext?: map[string]any(name='Ext'),
  header?: {
    costTime?: long(name='CostTime', example='8'),
    innerErrorCode?: string(name='InnerErrorCode', example='103-002-B-001'),
    innerErrorMsg?: string(name='InnerErrorMsg'),
    rpcId?: string(name='RpcId', description='RPC ID', example='0.1.1'),
    traceId?: string(name='TraceId', example='2103a00316915740246995934d0200'),
    version?: string(name='Version', example='1'),
  }(name='Header'),
  result?: {
    alipayTradeId?: string(name='AlipayTradeId', example='2023080922001195790515238438'),
    channelTradeId?: string(name='ChannelTradeId', example='202308101'),
    itemId?: long(name='ItemId', example='732766164666'),
    modifiedTime?: long(name='ModifiedTime', example='1691636782919'),
    orderStatus?: int32(name='OrderStatus', example='0'),
    price?: long(name='Price', example='50'),
    requestId?: string(name='RequestId', example='2BDF2EA5-DD3D-171D-AB54-A9EC7DA1008F'),
    success?: boolean(name='Success', example='true'),
    taobaoTradeId?: string(name='TaobaoTradeId', example='3469791531013613461'),
    tradeId?: string(name='TradeId', example='bb7b39c7-4982-41af-8158-1a694b40cf2a'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model QueryOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrderResponseBody(name='body'),
}

async function queryOrder(request: QueryOrderRequest): QueryOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrder', 'POST', '/', 'json', true, 'form', request);
}

model ReportImpressionRequest {
  impressionlink?: string(name='Impressionlink', description='impressionlink', example='2cdf86c6c3cd7947a450ea3e9031b9ecbf8921389a9fcf96e575276400c70991b6268ab8c154bd3c638eaf58336c1cde72239c7134a3fe0f8d692ff924e2460d26c35fb0cf8f98cde03f8380b50e442f9af83ab7ba7013dd69c69d4993af8993237b1d1aae4262b4acd66be7b561720bd24a4f4715d93987e434e198c8a99286bf04a56389893336ce96680e5198b34ef32579d2d0e2e261c10ae651642d', position='Query'),
}

model ReportImpressionResponseBody = {
  errorCode?: string(name='ErrorCode', description='errorCode', example='P1008'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  ext?: map[string]string(name='Ext', description='ext'),
  header?: {
    costTime?: long(name='CostTime', description='costTime', example='15'),
    rpcId?: string(name='RpcId', description='rpcId', example='xhx3mwagszdxb5lf'),
    traceId?: string(name='TraceId', description='traceId', example='xhx3mwa'),
    version?: string(name='Version', description='version', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
  }(name='Header', description='header'),
  requestId?: string(name='RequestId', example='A53EB3C4-DD25-5B90-9029-4A414877CFFB'),
  result?: {
    bidid?: string(name='Bidid', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
    success?: boolean(name='Success', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ReportImpressionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReportImpressionResponseBody(name='body'),
}

async function reportImpression(request: ReportImpressionRequest): ReportImpressionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportImpression', 'POST', '/', 'json', false, 'json', request);
}

model ReportTranslateRequest {
  impressionlink?: string(name='Impressionlink', example='2cdf86c6c3cd7947a450ea3e9031b9ecbf8921389a9fcf96e575276400c70991b6268ab8c154bd3c638eaf58336c1cde72239c7134a3fe0f8d692ff924e2460d26c35fb0cf8f98cde03f8380b50e442f9af83ab7ba7013dd69c69d4993af8993237b1d1aae4262b4acd66be7b561720bd24a4f4715d93987e434e198c8a99286bf04a56389893336ce96680e5198b34ef32579d2d0e2e261c10ae651642d', position='Query'),
}

model ReportTranslateResponseBody = {
  errorCode?: string(name='ErrorCode', description='errorCode', example='P1008'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  header?: {
    costTime?: long(name='CostTime', description='costTime', example='19'),
    innerErrorCode?: string(name='InnerErrorCode', description='innerErrorCode', example='P1000'),
    innerErrorMsg?: string(name='InnerErrorMsg', description='innerErrorMsg'),
    rpcId?: string(name='RpcId', description='rpcId', example='xhx3mwagszdxb5lf'),
    traceId?: string(name='TraceId', description='traceId', example='xhx3mwa'),
    version?: string(name='Version', description='version', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
  }(name='Header', description='header'),
  requestId?: string(name='RequestId', example='A53EB3C4-DD25-5B90-9029-4A414877CFFB'),
  result?: {
    bidid?: string(name='Bidid', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
    success?: string(name='Success', description='success', example='True'),
  }(name='Result'),
  success?: boolean(name='Success', description='success', example='True'),
}

model ReportTranslateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReportTranslateResponseBody(name='body'),
}

async function reportTranslate(request: ReportTranslateRequest): ReportTranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportTranslate', 'GET', '/', 'json', false, 'json', request);
}

model SendSmsRequest {
  nowStamp?: long(name='NowStamp', position='Query'),
  phoneNumbers: string(name='PhoneNumbers', position='Query'),
  signKey: string(name='SignKey', position='Query'),
}

model SendSmsResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpCode?: int32(name='HttpCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendSmsResponseBody(name='body'),
}

async function sendSms(request: SendSmsRequest): SendSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendSms', 'POST', '/', 'json', false, 'json', request);
}

model SyncInfoRequest {
  accountNo?: string(name='AccountNo', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  chainValue?: string(name='ChainValue', position='Query'),
  componentIdList?: string(name='ComponentIdList', position='Query'),
  createUser?: string(name='CreateUser', position='Query'),
  id?: long(name='Id', position='Query'),
  mainId?: long(name='MainId', position='Query'),
  name?: string(name='Name', position='Query'),
  nextChainValue?: string(name='NextChainValue', position='Query'),
  ossFileUrl?: string(name='OssFileUrl', position='Query'),
  pageId?: string(name='PageId', position='Query'),
  status?: int32(name='Status', position='Query'),
  updateUser?: string(name='UpdateUser', position='Query'),
  url?: string(name='Url', position='Query'),
  urlType?: int32(name='UrlType', position='Query'),
}

model SyncInfoResponseBody = {
  code?: int32(name='Code'),
  data?: {
    id?: long(name='Id'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncInfoResponseBody(name='body'),
}

async function syncInfo(request: SyncInfoRequest): SyncInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncInfo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAdxCreativeContentRequest {
  ad?: [ 
    {
      bundle?: [ string ](name='Bundle'),
      clicks?: [ string ](name='Clicks'),
      crid?: string(name='Crid'),
      enddate?: string(name='Enddate'),
      imps?: [ string ](name='Imps'),
      interacttype?: int32(name='Interacttype'),
      mediaIdList?: [ string ](name='MediaIdList'),
      nativead?: [ 
        {
          attrname?: string(name='Attrname'),
          attrvalue?: string(name='Attrvalue'),
          h?: int32(name='H'),
          mime?: string(name='Mime'),
          w?: int32(name='W'),
        }
      ](name='Nativead'),
      op?: int32(name='Op'),
      ostype?: string(name='Ostype'),
      prereview?: boolean(name='Prereview'),
      seat?: string(name='Seat'),
      startdate?: string(name='Startdate'),
      template?: int32(name='Template'),
      type?: int32(name='Type'),
    }
  ](name='Ad', position='Query'),
  dspId?: string(name='DspId', position='Query'),
}

model UpdateAdxCreativeContentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
}

model UpdateAdxCreativeContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAdxCreativeContentResponseBody(name='body'),
}

async function updateAdxCreativeContent(request: UpdateAdxCreativeContentRequest): UpdateAdxCreativeContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAdxCreativeContent', 'POST', '/', 'json', false, 'json', request);
}

model VerifyAdvertisingRequest {
  app?: {
    ext?: map[string]any(name='Ext', description='ext'),
    mediaid?: string(name='Mediaid', description='mediaid', example='234546546'),
    sn?: string(name='Sn', description='sn', example='testSn'),
  }(name='App', description='app', shrink='json', position='Query'),
  dealtype?: int32(name='Dealtype', example='1', position='Query'),
  device?: {
    androidid?: string(name='Androidid', description='androidid', example='androidid'),
    androidmd5?: string(name='Androidmd5', description='androidmd5', example='androidmd5'),
    caid?: string(name='Caid', description='Caid', example='Caid'),
    carrier?: string(name='Carrier', example='TELECOM'),
    connectiontype?: int32(name='Connectiontype', example='1'),
    devicetype?: int32(name='Devicetype', description='deviceType', example='2'),
    geo?: {
      city?: string(name='City'),
      district?: string(name='District'),
      lat?: double(name='Lat', description='lat', example='23.5646'),
      lon?: double(name='Lon', description='lon', example='123.53453'),
      province?: string(name='Province'),
    }(name='Geo'),
    idfa?: string(name='Idfa', description='Idfa', example='Idfa'),
    imei?: string(name='Imei', description='imei', example='8605210594812500'),
    imeimd5?: string(name='Imeimd5', description='imeimd5', example='sdffgdghgcx'),
    ip?: string(name='Ip', example='172.26.60.154'),
    language?: string(name='Language', example='cn'),
    mac?: string(name='Mac', example='e8fdf8b3cf9a'),
    macmd5?: string(name='Macmd5', description='Macmd5', example='Macmd5'),
    make?: string(name='Make', description='make', example='rewr'),
    model?: string(name='Model', description='model', example='fdsf'),
    oaid?: string(name='Oaid', description='oaid', example='dsgfsg'),
    os?: string(name='Os', description='os', example='ios'),
    osv?: string(name='Osv', description='osv', example='gh'),
    ua?: string(name='Ua', description='ua', example='dsf'),
    utdid?: string(name='Utdid', description='Utdid', example='11148984'),
  }(name='Device', description='device', shrink='json', position='Query'),
  ext?: map[string]any(name='Ext', description='ext', example='{}', shrink='json', position='Query'),
  id?: string(name='Id', description='id', example='acbef-345-6546', position='Query'),
  imp?: [ 
    {
      id?: string(name='Id', description='id', example='1'),
      tagid?: string(name='Tagid', description='tagid', example='7857789563'),
    }
  ](name='Imp', description='imp', shrink='json', position='Query'),
  test?: int32(name='Test', description='test', example='0', position='Query'),
  user?: {
    id?: string(name='Id', description='uid', example='208834564534'),
    usertype?: string(name='Usertype', description='uidtype', example='ALIPAY_OPEN_ID'),
  }(name='User', description='user', shrink='json', position='Query'),
  verifyad?: [ 
    {
      id?: string(name='Id', example='44'),
      seat?: string(name='Seat', example='4534523'),
    }
  ](name='Verifyad', shrink='json', position='Query'),
}

model VerifyAdvertisingResponseBody = {
  errorcode?: string(name='Errorcode', description='errorCode', example='P1001'),
  errormsg?: string(name='Errormsg', description='errorMsg', example='error'),
  ext?: map[string]string(name='Ext', description='ext'),
  header?: {
    costTime?: long(name='CostTime', description='costTime', example='19'),
    rpcId?: string(name='RpcId', description='rpcId', example='xhx3mwagszdxb5lf'),
    traceId?: string(name='TraceId', description='traceId', example='xhx3mwa'),
    version?: string(name='Version', description='version', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
  }(name='Header', description='header'),
  requestId?: string(name='RequestId', example='A53EB3C4-DD25-5B90-9029-4A414877CFFB'),
  result?: {
    bidid?: string(name='Bidid', example='9885db29-3406-456f-8160-2b8dfc42c1df'),
    id?: string(name='Id', description='id', example='32'),
    seatbid?: [ 
      {
        bid?: [ 
          {
            ads?: [ 
              {
                crid?: string(name='Crid', description='crid', example='23435345'),
                crurl?: string(name='Crurl', example='www.taobao.com'),
                icon?: {
                  url?: string(name='Url', example='https://market.m.taobao.com/app/alicloud-tools/base-h5/index.html?rootId=16022413&appId=100100100100&pageId=page_0d884ec7&BusinessId=yc-165407506207478-165511576113195&preview=true&cid=32'),
                }(name='Icon'),
                id?: string(name='Id', example='51313927061504'),
                images?: [ 
                  {
                    desc?: string(name='Desc', example='caozhen_test'),
                    format?: string(name='Format', example='JPEG'),
                    url?: string(name='Url', example='https://market.m.taobao.com/app/alicloud-tools/base-h5/index.html?rootId=16022413&appId=100100100100&pageId=page_63b9b362&BusinessId=yc-165407506207478-165511576113195&preview=true&cid=31'),
                  }
                ](name='Images'),
                interacttype?: int32(name='Interacttype', description='Interacttype', example='1'),
                labeltype?: string(name='Labeltype'),
                landingurls?: [ string ](name='Landingurls'),
                marketingtype?: string(name='Marketingtype', example='OnlineStoreMember'),
                objective?: string(name='Objective', example='SINGLE_ACQUISITION'),
                price?: string(name='Price', example='805.22'),
                seat?: string(name='Seat', description='seat', example='645534523'),
                style?: string(name='Style', example='1302'),
                title?: string(name='Title'),
                trackers?: {
                  imps?: [ string ](name='Imps'),
                }(name='Trackers'),
                type?: string(name='Type', example='5'),
              }
            ](name='Ads'),
            impid?: string(name='Impid', description='impId', example='53453423'),
          }
        ](name='Bid', description='bid'),
      }
    ](name='Seatbid'),
  }(name='Result'),
  success?: boolean(name='Success', description='success', example='True'),
}

model VerifyAdvertisingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyAdvertisingResponseBody(name='body'),
}

async function verifyAdvertising(request: VerifyAdvertisingRequest): VerifyAdvertisingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyAdvertising', 'GET', '/', 'json', false, 'json', request);
}

model VerifySmsCodeRequest {
  code: string(name='Code', position='Query'),
  nowStamp: long(name='NowStamp', position='Query'),
  phoneNumbers: string(name='PhoneNumbers', position='Query'),
  signKey: string(name='SignKey', position='Query'),
}

model VerifySmsCodeResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model VerifySmsCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifySmsCodeResponseBody(name='body'),
}

async function verifySmsCode(request: VerifySmsCodeRequest): VerifySmsCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifySmsCode', 'POST', '/', 'json', false, 'json', request);
}

