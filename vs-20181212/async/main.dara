/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'vs';
  @version = '2018-12-12';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDeviceRequest {
  config: string(name='Config', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protocol: string(name='Protocol', position='Query'),
}

model AddDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model AddDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddDeviceResponseBody(name='body'),
}

async function addDevice(request: AddDeviceRequest): AddDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDevice', 'POST', '/', 'json', false, 'json', request);
}

model AddRegisteredDeviceRequest {
  dsn: string(name='Dsn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  registerCode: string(name='RegisterCode', position='Query'),
  secretKey: string(name='SecretKey', position='Query'),
  vendor: string(name='Vendor', position='Query'),
}

model AddRegisteredDeviceResponseBody = {
  dsn?: string(name='Dsn'),
  id?: string(name='Id'),
  registerCode?: string(name='RegisterCode'),
  requestId?: string(name='RequestId'),
  secretKey?: string(name='SecretKey'),
  vendor?: string(name='Vendor'),
}

model AddRegisteredDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddRegisteredDeviceResponseBody(name='body'),
}

async function addRegisteredDevice(request: AddRegisteredDeviceRequest): AddRegisteredDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRegisteredDevice', 'POST', '/', 'json', false, 'json', request);
}

model AddRegisteredVendorRequest {
  description: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model AddRegisteredVendorResponseBody = {
  description?: string(name='Description'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  vendor?: string(name='Vendor'),
}

model AddRegisteredVendorResponse = {
  headers: map[string]string(name='headers'),
  body: AddRegisteredVendorResponseBody(name='body'),
}

async function addRegisteredVendor(request: AddRegisteredVendorRequest): AddRegisteredVendorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRegisteredVendor', 'POST', '/', 'json', false, 'json', request);
}

model AddRenderingDeviceInternetPortsRequest {
  ISP?: string(name='ISP', position='Query'),
  instanceIds: string(name='InstanceIds', position='Query'),
  internalPort: string(name='InternalPort', position='Query'),
  ipProtocol: string(name='IpProtocol', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model AddRenderingDeviceInternetPortsResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model AddRenderingDeviceInternetPortsResponse = {
  headers: map[string]string(name='headers'),
  body: AddRenderingDeviceInternetPortsResponseBody(name='body'),
}

async function addRenderingDeviceInternetPorts(request: AddRenderingDeviceInternetPortsRequest): AddRenderingDeviceInternetPortsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRenderingDeviceInternetPorts', 'POST', '/', 'json', false, 'json', request);
}

model AddVsPullStreamInfoConfigRequest {
  always?: string(name='Always', position='Query'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceUrl: string(name='SourceUrl', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model AddVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVsPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddVsPullStreamInfoConfigResponseBody(name='body'),
}

async function addVsPullStreamInfoConfig(request: AddVsPullStreamInfoConfigRequest): AddVsPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVsPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindDirectoriesRequest {
  deviceId: string(name='DeviceId', position='Query'),
  directoryId: string(name='DirectoryId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchBindDirectoriesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      directoryId?: string(name='DirectoryId'),
      error?: string(name='Error'),
    }
  ](name='Results'),
}

model BatchBindDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindDirectoriesResponseBody(name='body'),
}

async function batchBindDirectories(request: BatchBindDirectoriesRequest): BatchBindDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindDirectories', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindParentPlatformDevicesRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentPlatformId: string(name='ParentPlatformId', position='Query'),
}

model BatchBindParentPlatformDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      error?: string(name='Error'),
      parentPlatformId?: string(name='ParentPlatformId'),
    }
  ](name='Results'),
}

model BatchBindParentPlatformDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindParentPlatformDevicesResponseBody(name='body'),
}

async function batchBindParentPlatformDevices(request: BatchBindParentPlatformDevicesRequest): BatchBindParentPlatformDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindParentPlatformDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindPurchasedDevicesRequest {
  deviceId: string(name='DeviceId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region: string(name='Region', position='Query'),
}

model BatchBindPurchasedDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      error?: string(name='Error'),
      groupId?: string(name='GroupId'),
      region?: string(name='Region'),
    }
  ](name='Results'),
}

model BatchBindPurchasedDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindPurchasedDevicesResponseBody(name='body'),
}

async function batchBindPurchasedDevices(request: BatchBindPurchasedDevicesRequest): BatchBindPurchasedDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindPurchasedDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindTemplateRequest {
  applyAll?: boolean(name='ApplyAll', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replace?: boolean(name='Replace', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model BatchBindTemplateResponseBody = {
  bindings?: [ 
    {
      error?: string(name='Error'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      templateId?: string(name='TemplateId'),
    }
  ](name='Bindings'),
  requestId?: string(name='RequestId'),
}

model BatchBindTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindTemplateResponseBody(name='body'),
}

async function batchBindTemplate(request: BatchBindTemplateRequest): BatchBindTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindTemplate', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindTemplatesRequest {
  applyAll?: boolean(name='ApplyAll', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replace?: boolean(name='Replace', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
  templateType?: string(name='TemplateType', position='Query'),
}

model BatchBindTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      templateId?: string(name='TemplateId'),
    }
  ](name='Results'),
}

model BatchBindTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindTemplatesResponseBody(name='body'),
}

async function batchBindTemplates(request: BatchBindTemplatesRequest): BatchBindTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindTemplates', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteDevicesRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchDeleteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      id?: string(name='Id'),
    }
  ](name='Results'),
}

model BatchDeleteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDevicesResponseBody(name='body'),
}

async function batchDeleteDevices(request: BatchDeleteDevicesRequest): BatchDeleteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteVsDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchDeleteVsDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteVsDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteVsDomainConfigsResponseBody(name='body'),
}

async function batchDeleteVsDomainConfigs(request: BatchDeleteVsDomainConfigsRequest): BatchDeleteVsDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteVsDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchForbidVsStreamRequest {
  channel: string(name='Channel', position='Query'),
  controlStreamAction?: string(name='ControlStreamAction', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  liveStreamType: string(name='LiveStreamType', position='Query'),
  oneshot?: string(name='Oneshot', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resumeTime?: string(name='ResumeTime', position='Query'),
}

model BatchForbidVsStreamResponseBody = {
  forbidResult?: {
    forbidResultInfo?: [ 
    {
      channels?: {
        channel?: [ string ](name='Channel')
      }(name='Channels'),
      count?: int32(name='Count'),
      detail?: string(name='Detail'),
      result?: string(name='Result'),
    }
  ](name='ForbidResultInfo')
  }(name='ForbidResult'),
  requestId?: string(name='RequestId'),
}

model BatchForbidVsStreamResponse = {
  headers: map[string]string(name='headers'),
  body: BatchForbidVsStreamResponseBody(name='body'),
}

async function batchForbidVsStream(request: BatchForbidVsStreamRequest): BatchForbidVsStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchForbidVsStream', 'POST', '/', 'json', false, 'json', request);
}

model BatchResumeVsStreamRequest {
  channel: string(name='Channel', position='Query'),
  controlStreamAction?: string(name='ControlStreamAction', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  liveStreamType: string(name='LiveStreamType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchResumeVsStreamResponseBody = {
  requestId?: string(name='RequestId'),
  resumeResult?: {
    resumeResultInfo?: [ 
    {
      channels?: {
        channel?: [ string ](name='Channel')
      }(name='Channels'),
      count?: int32(name='Count'),
      detail?: string(name='Detail'),
      result?: string(name='Result'),
    }
  ](name='ResumeResultInfo')
  }(name='ResumeResult'),
}

model BatchResumeVsStreamResponse = {
  headers: map[string]string(name='headers'),
  body: BatchResumeVsStreamResponseBody(name='body'),
}

async function batchResumeVsStream(request: BatchResumeVsStreamRequest): BatchResumeVsStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchResumeVsStream', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetVsDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchSetVsDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetVsDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetVsDomainConfigsResponseBody(name='body'),
}

async function batchSetVsDomainConfigs(request: BatchSetVsDomainConfigsRequest): BatchSetVsDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetVsDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchStartDevicesRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchStartDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      id?: string(name='Id'),
      streams?: [ 
        {
          error?: string(name='Error'),
          id?: string(name='Id'),
          name?: string(name='Name'),
        }
      ](name='Streams'),
    }
  ](name='Results'),
}

model BatchStartDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartDevicesResponseBody(name='body'),
}

async function batchStartDevices(request: BatchStartDevicesRequest): BatchStartDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStartDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchStartStreamsRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchStartStreamsResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Results'),
}

model BatchStartStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartStreamsResponseBody(name='body'),
}

async function batchStartStreams(request: BatchStartStreamsRequest): BatchStartStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStartStreams', 'POST', '/', 'json', false, 'json', request);
}

model BatchStopDevicesRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model BatchStopDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      id?: string(name='Id'),
      streams?: [ 
        {
          error?: string(name='Error'),
          id?: string(name='Id'),
          name?: string(name='Name'),
        }
      ](name='Streams'),
    }
  ](name='Results'),
}

model BatchStopDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopDevicesResponseBody(name='body'),
}

async function batchStopDevices(request: BatchStopDevicesRequest): BatchStopDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStopDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchStopStreamsRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model BatchStopStreamsResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Results'),
}

model BatchStopStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopStreamsResponseBody(name='body'),
}

async function batchStopStreams(request: BatchStopStreamsRequest): BatchStopStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStopStreams', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindDirectoriesRequest {
  deviceId: string(name='DeviceId', position='Query'),
  directoryId: string(name='DirectoryId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchUnbindDirectoriesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      directoryId?: string(name='DirectoryId'),
      error?: string(name='Error'),
    }
  ](name='Results'),
}

model BatchUnbindDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindDirectoriesResponseBody(name='body'),
}

async function batchUnbindDirectories(request: BatchUnbindDirectoriesRequest): BatchUnbindDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindDirectories', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindParentPlatformDevicesRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentPlatformId: string(name='ParentPlatformId', position='Query'),
}

model BatchUnbindParentPlatformDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      error?: string(name='Error'),
      parentPlatformId?: string(name='ParentPlatformId'),
    }
  ](name='Results'),
}

model BatchUnbindParentPlatformDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindParentPlatformDevicesResponseBody(name='body'),
}

async function batchUnbindParentPlatformDevices(request: BatchUnbindParentPlatformDevicesRequest): BatchUnbindParentPlatformDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindParentPlatformDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindPurchasedDevicesRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchUnbindPurchasedDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      error?: string(name='Error'),
    }
  ](name='Results'),
}

model BatchUnbindPurchasedDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindPurchasedDevicesResponseBody(name='body'),
}

async function batchUnbindPurchasedDevices(request: BatchUnbindPurchasedDevicesRequest): BatchUnbindPurchasedDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindPurchasedDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindTemplateRequest {
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  templateId?: string(name='TemplateId', position='Query'),
  templateType?: string(name='TemplateType', position='Query'),
}

model BatchUnbindTemplateResponseBody = {
  bindings?: [ 
    {
      error?: string(name='Error'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      templateId?: string(name='TemplateId'),
    }
  ](name='Bindings'),
  requestId?: string(name='RequestId'),
}

model BatchUnbindTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindTemplateResponseBody(name='body'),
}

async function batchUnbindTemplate(request: BatchUnbindTemplateRequest): BatchUnbindTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindTemplate', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindTemplatesRequest {
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  templateId?: string(name='TemplateId', position='Query'),
  templateType?: string(name='TemplateType', position='Query'),
}

model BatchUnbindTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      templateId?: string(name='TemplateId'),
      templateType?: string(name='TemplateType'),
    }
  ](name='Results'),
}

model BatchUnbindTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindTemplatesResponseBody(name='body'),
}

async function batchUnbindTemplates(request: BatchUnbindTemplatesRequest): BatchUnbindTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindTemplates', 'POST', '/', 'json', false, 'json', request);
}

model BindDirectoryRequest {
  deviceId: string(name='DeviceId', position='Query'),
  directoryId: string(name='DirectoryId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BindDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: BindDirectoryResponseBody(name='body'),
}

async function bindDirectory(request: BindDirectoryRequest): BindDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDirectory', 'POST', '/', 'json', false, 'json', request);
}

model BindParentPlatformDeviceRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentPlatformId: string(name='ParentPlatformId', position='Query'),
}

model BindParentPlatformDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindParentPlatformDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindParentPlatformDeviceResponseBody(name='body'),
}

async function bindParentPlatformDevice(request: BindParentPlatformDeviceRequest): BindParentPlatformDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindParentPlatformDevice', 'POST', '/', 'json', false, 'json', request);
}

model BindPurchasedDeviceRequest {
  deviceId: string(name='DeviceId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region: string(name='Region', position='Query'),
}

model BindPurchasedDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindPurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindPurchasedDeviceResponseBody(name='body'),
}

async function bindPurchasedDevice(request: BindPurchasedDeviceRequest): BindPurchasedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPurchasedDevice', 'POST', '/', 'json', false, 'json', request);
}

model BindTemplateRequest {
  applyAll?: boolean(name='ApplyAll', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replace?: boolean(name='Replace', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
  templateType?: string(name='TemplateType', position='Query'),
}

model BindTemplateResponseBody = {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model BindTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: BindTemplateResponseBody(name='body'),
}

async function bindTemplate(request: BindTemplateRequest): BindTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CaptureDeviceSnapshotRequest {
  deviceId: string(name='DeviceId', position='Query'),
  mode: string(name='Mode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  snapshotConfig: string(name='SnapshotConfig', position='Query'),
  streamId?: string(name='StreamId', position='Query'),
}

model CaptureDeviceSnapshotResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CaptureDeviceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CaptureDeviceSnapshotResponseBody(name='body'),
}

async function captureDeviceSnapshot(request: CaptureDeviceSnapshotRequest): CaptureDeviceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CaptureDeviceSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model ContinuousAdjustRequest {
  focus?: string(name='Focus', position='Query'),
  id: string(name='Id', position='Query'),
  iris?: string(name='Iris', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ContinuousAdjustResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ContinuousAdjustResponse = {
  headers: map[string]string(name='headers'),
  body: ContinuousAdjustResponseBody(name='body'),
}

async function continuousAdjust(request: ContinuousAdjustRequest): ContinuousAdjustResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinuousAdjust', 'POST', '/', 'json', false, 'json', request);
}

model ContinuousMoveRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pan?: string(name='Pan', position='Query'),
  tilt?: string(name='Tilt', position='Query'),
  zoom?: string(name='Zoom', position='Query'),
}

model ContinuousMoveResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ContinuousMoveResponse = {
  headers: map[string]string(name='headers'),
  body: ContinuousMoveResponseBody(name='body'),
}

async function continuousMove(request: ContinuousMoveRequest): ContinuousMoveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinuousMove', 'POST', '/', 'json', false, 'json', request);
}

model CreateAIConfigRequest {
  captureInterval: int32(name='CaptureInterval', position='Query'),
  configs: string(name='Configs', position='Query'),
  description?: string(name='Description', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  features: string(name='Features', position='Query'),
  instanceId: long(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
}

model CreateAIConfigResponseBody = {
  configId?: string(name='ConfigId'),
  requestId?: string(name='RequestId'),
}

model CreateAIConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAIConfigResponseBody(name='body'),
}

async function createAIConfig(request: CreateAIConfigRequest): CreateAIConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAIConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  description?: string(name='Description', position='Query'),
  internalPorts?: string(name='InternalPorts', position='Query'),
  maintainTime?: string(name='MaintainTime', position='Query'),
  name: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceRequest {
  alarmMethod?: string(name='AlarmMethod', position='Query'),
  autoPos?: boolean(name='AutoPos', position='Query'),
  autoStart?: boolean(name='AutoStart', position='Query'),
  description?: string(name='Description', position='Query'),
  directoryId?: string(name='DirectoryId', position='Query'),
  dsn?: string(name='Dsn', position='Query'),
  gbId?: string(name='GbId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ip?: string(name='Ip', position='Query'),
  latitude?: string(name='Latitude', position='Query'),
  longitude?: string(name='Longitude', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  params?: string(name='Params', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  password?: string(name='Password', position='Query'),
  port?: long(name='Port', position='Query'),
  posInterval?: long(name='PosInterval', position='Query'),
  type: string(name='Type', position='Query'),
  url?: string(name='Url', position='Query'),
  username?: string(name='Username', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model CreateDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevice', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceAlarmRequest {
  alarm: int32(name='Alarm', position='Query'),
  channelId: int32(name='ChannelId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  expire?: long(name='Expire', position='Query'),
  id: string(name='Id', position='Query'),
  objectType: int32(name='ObjectType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  subAlarm: int32(name='SubAlarm', position='Query'),
}

model CreateDeviceAlarmResponseBody = {
  alarmDelay?: long(name='AlarmDelay'),
  alarmId?: string(name='AlarmId'),
  expire?: long(name='Expire'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model CreateDeviceAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceAlarmResponseBody(name='body'),
}

async function createDeviceAlarm(request: CreateDeviceAlarmRequest): CreateDeviceAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceAlarm', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceSnapshotRequest {
  deviceId: string(name='DeviceId', position='Query'),
  mode: string(name='Mode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  snapshotConfig: string(name='SnapshotConfig', position='Query'),
  streamId?: string(name='StreamId', position='Query'),
}

model CreateDeviceSnapshotResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateDeviceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceSnapshotResponseBody(name='body'),
}

async function createDeviceSnapshot(request: CreateDeviceSnapshotRequest): CreateDeviceSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model CreateDirectoryRequest {
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  name: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentId: string(name='ParentId', position='Query'),
}

model CreateDirectoryResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDirectoryResponseBody(name='body'),
}

async function createDirectory(request: CreateDirectoryRequest): CreateDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDirectory', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupRequest {
  app?: string(name='App', position='Query'),
  callback?: string(name='Callback', position='Query'),
  description?: string(name='Description', position='Query'),
  inProtocol: string(name='InProtocol', position='Query'),
  lazyPull?: boolean(name='LazyPull', position='Query'),
  name: string(name='Name', position='Query'),
  outProtocol?: string(name='OutProtocol', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain?: string(name='PlayDomain', position='Query'),
  pushDomain?: string(name='PushDomain', position='Query'),
  region?: string(name='Region', position='Query'),
}

model CreateGroupResponseBody = {
  gbId?: string(name='GbId'),
  gbIp?: string(name='GbIp'),
  gbPort?: long(name='GbPort'),
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupResponseBody(name='body'),
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateParentPlatformRequest {
  autoStart?: boolean(name='AutoStart', position='Query'),
  clientAuth?: boolean(name='ClientAuth', position='Query'),
  clientPassword?: string(name='ClientPassword', position='Query'),
  clientUsername?: string(name='ClientUsername', position='Query'),
  description?: string(name='Description', position='Query'),
  gbId: string(name='GbId', position='Query'),
  ip: string(name='Ip', position='Query'),
  name: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port: long(name='Port', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
}

model CreateParentPlatformResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: CreateParentPlatformResponseBody(name='body'),
}

async function createParentPlatform(request: CreateParentPlatformRequest): CreateParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model CreateRenderingDeviceRequest {
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  count: int32(name='Count', maximum=10, position='Query'),
  description?: string(name='Description', position='Query'),
  edgeNodeName: string(name='EdgeNodeName', position='Query'),
  ISP?: string(name='ISP', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  specification: string(name='Specification', position='Query'),
}

model CreateRenderingDeviceResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model CreateRenderingDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRenderingDeviceResponseBody(name='body'),
}

async function createRenderingDevice(request: CreateRenderingDeviceRequest): CreateRenderingDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRenderingDevice', 'POST', '/', 'json', false, 'json', request);
}

model CreateStreamSnapshotRequest {
  id: string(name='Id', position='Query'),
  location?: string(name='Location', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CreateStreamSnapshotResponseBody = {
  format?: string(name='Format'),
  height?: long(name='Height'),
  id?: string(name='Id'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossObject?: string(name='OssObject'),
  requestId?: string(name='RequestId'),
  timestamp?: long(name='Timestamp'),
  url?: string(name='Url'),
  width?: long(name='Width'),
}

model CreateStreamSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStreamSnapshotResponseBody(name='body'),
}

async function createStreamSnapshot(request: CreateStreamSnapshotRequest): CreateStreamSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStreamSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  callback?: string(name='Callback', position='Query'),
  description?: string(name='Description', position='Query'),
  fileFormat?: string(name='FileFormat', position='Query'),
  flv?: string(name='Flv', position='Query'),
  hlsM3u8?: string(name='HlsM3u8', position='Query'),
  hlsTs?: string(name='HlsTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  jpgOnDemand?: string(name='JpgOnDemand', position='Query'),
  jpgOverwrite?: string(name='JpgOverwrite', position='Query'),
  jpgSequence?: string(name='JpgSequence', position='Query'),
  mp4?: string(name='Mp4', position='Query'),
  name: string(name='Name', position='Query'),
  ossBucket?: string(name='OssBucket', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossFilePrefix?: string(name='OssFilePrefix', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  retention?: long(name='Retention', position='Query'),
  transConfigsJSON?: string(name='TransConfigsJSON', position='Query'),
  trigger?: string(name='Trigger', position='Query'),
  type: string(name='Type', position='Query'),
}

model CreateTemplateResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAIConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteAIConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAIConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAIConfigResponseBody(name='body'),
}

async function deleteAIConfig(request: DeleteAIConfigRequest): DeleteAIConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAIConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBucketRequest {
  bucketName: string(name='BucketName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteBucketResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBucketResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBucketResponseBody(name='body'),
}

async function deleteBucket(request: DeleteBucketRequest): DeleteBucketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBucket', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDirectoryRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDirectoryResponseBody(name='body'),
}

async function deleteDirectory(request: DeleteDirectoryRequest): DeleteDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupResponseBody(name='body'),
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteParentPlatformRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteParentPlatformResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteParentPlatformResponseBody(name='body'),
}

async function deleteParentPlatform(request: DeleteParentPlatformRequest): DeleteParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model DeletePresetRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  presetId: string(name='PresetId', position='Query'),
}

model DeletePresetResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model DeletePresetResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePresetResponseBody(name='body'),
}

async function deletePreset(request: DeletePresetRequest): DeletePresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePreset', 'POST', '/', 'json', false, 'json', request);
}

model DeletePurchasedDeviceRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeletePurchasedDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePurchasedDeviceResponseBody(name='body'),
}

async function deletePurchasedDevice(request: DeletePurchasedDeviceRequest): DeletePurchasedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePurchasedDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRenderingDeviceInternetPortsRequest {
  ISP?: string(name='ISP', position='Query'),
  instanceIds: string(name='InstanceIds', position='Query'),
  internalPort: string(name='InternalPort', position='Query'),
  ipProtocol: string(name='IpProtocol', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteRenderingDeviceInternetPortsResponseBody = {
  instanceIds?: {
    instanceIds?: [ string ](name='instanceIds')
  }(name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model DeleteRenderingDeviceInternetPortsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRenderingDeviceInternetPortsResponseBody(name='body'),
}

async function deleteRenderingDeviceInternetPorts(request: DeleteRenderingDeviceInternetPortsRequest): DeleteRenderingDeviceInternetPortsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRenderingDeviceInternetPorts', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRenderingDevicesRequest {
  instanceIds: string(name='InstanceIds', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteRenderingDevicesResponseBody = {
  failedIds?: [ string ](name='FailedIds'),
  requestId?: string(name='RequestId'),
}

model DeleteRenderingDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRenderingDevicesResponseBody(name='body'),
}

async function deleteRenderingDevices(request: DeleteRenderingDevicesRequest): DeleteRenderingDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRenderingDevices', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVsPullStreamInfoConfigRequest {
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model DeleteVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVsPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVsPullStreamInfoConfigResponseBody(name='body'),
}

async function deleteVsPullStreamInfoConfig(request: DeleteVsPullStreamInfoConfigRequest): DeleteVsPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVsPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVsStreamsNotifyUrlConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteVsStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVsStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function deleteVsStreamsNotifyUrlConfig(request: DeleteVsStreamsNotifyUrlConfigRequest): DeleteVsStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVsStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAIConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeAIConfigResponseBody = {
  AIConfig?: {
    captureInterval?: int32(name='CaptureInterval'),
    configs?: string(name='Configs'),
    description?: string(name='Description'),
    endTime?: long(name='EndTime'),
    features?: string(name='Features'),
    instanceId?: long(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
  }(name='AIConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeAIConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAIConfigResponseBody(name='body'),
}

async function describeAIConfig(request: DescribeAIConfigRequest): DescribeAIConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAIConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAIConfigListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model DescribeAIConfigListResponseBody = {
  AIConfigList?: {
    AIConfigList?: [ 
    {
      captureInterval?: int32(name='CaptureInterval'),
      configId?: string(name='ConfigId'),
      configs?: string(name='Configs'),
      description?: string(name='Description'),
      endTime?: long(name='EndTime'),
      features?: string(name='Features'),
      instanceId?: long(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='AIConfigList')
  }(name='AIConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeAIConfigListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAIConfigListResponseBody(name='body'),
}

async function describeAIConfigList(request: DescribeAIConfigListRequest): DescribeAIConfigListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAIConfigList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAIEventListRequest {
  endTime: long(name='EndTime', position='Query'),
  feature?: string(name='Feature', position='Query'),
  instanceId: long(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  triggered?: boolean(name='Triggered', position='Query'),
}

model DescribeAIEventListResponseBody = {
  AIEventList?: string(name='AIEventList'),
  requestId?: string(name='RequestId'),
}

model DescribeAIEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAIEventListResponseBody(name='body'),
}

async function describeAIEventList(request: DescribeAIEventListRequest): DescribeAIEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAIEventList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAccountStatRequest {
  id?: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeAccountStatResponseBody = {
  groupLimit?: long(name='GroupLimit'),
  groupNum?: long(name='GroupNum'),
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
  templateLimit?: long(name='TemplateLimit'),
  templateNum?: long(name='TemplateNum'),
}

model DescribeAccountStatResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountStatResponseBody(name='body'),
}

async function describeAccountStat(request: DescribeAccountStatRequest): DescribeAccountStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountStat', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  description?: string(name='Description'),
  internalPorts?: [ 
    {
      ipProtocol?: string(name='IpProtocol'),
      platform?: string(name='Platform'),
      port?: [ string ](name='Port'),
    }
  ](name='InternalPorts'),
  maintainTime?: string(name='MaintainTime'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterResponseBody(name='body'),
}

async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterDevicesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  description?: string(name='Description', position='Query'),
  edgeNodeName?: string(name='EdgeNodeName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: long(name='PageSize', maximum=100, position='Query'),
  platform: string(name='Platform', position='Query'),
  specification?: string(name='Specification', position='Query'),
}

model DescribeClusterDevicesResponseBody = {
  devices?: [ 
    {
      autoRenew?: boolean(name='AutoRenew'),
      autoRenewPeriod?: int32(name='AutoRenewPeriod'),
      description?: string(name='Description'),
      edgeNodeName?: string(name='EdgeNodeName'),
      imageId?: string(name='ImageId'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      ipInfos?: [ 
        {
          externalIp?: string(name='ExternalIp'),
          externalPort?: string(name='ExternalPort'),
          ISP?: string(name='ISP'),
          internalIp?: string(name='InternalIp'),
          internalPort?: string(name='InternalPort'),
          ipProtocol?: string(name='IpProtocol'),
          natType?: string(name='NatType'),
        }
      ](name='IpInfos'),
      macAddress?: string(name='MacAddress'),
      period?: int32(name='Period'),
      periodUnit?: string(name='PeriodUnit'),
      platformType?: string(name='PlatformType'),
      podInfos?: [ 
        {
          network?: [ 
            {
              containerPorts?: string(name='ContainerPorts'),
              externalIp?: string(name='ExternalIp'),
              externalPorts?: string(name='ExternalPorts'),
            }
          ](name='Network'),
          podId?: string(name='PodId'),
          status?: string(name='Status'),
        }
      ](name='PodInfos'),
      server?: string(name='Server'),
      status?: string(name='Status'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeClusterDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterDevicesResponseBody(name='body'),
}

async function describeClusterDevices(request: DescribeClusterDevicesRequest): DescribeClusterDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClustersRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model DescribeClustersResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='ClusterId'),
      description?: string(name='Description'),
      internalPorts?: [ 
        {
          ipProtocol?: string(name='IpProtocol'),
          platform?: string(name='Platform'),
          port?: [ string ](name='Port'),
        }
      ](name='InternalPorts'),
      maintainTime?: string(name='MaintainTime'),
      name?: string(name='Name'),
      status?: string(name='Status'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersResponseBody(name='body'),
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContainerInstanceIdRequest {
  nodeName: string(name='NodeName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  podIndex: int32(name='PodIndex', position='Query'),
}

model DescribeContainerInstanceIdResponseBody = {
  instanceDetail?: {
    instanceId?: string(name='InstanceId'),
  }(name='InstanceDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeContainerInstanceIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContainerInstanceIdResponseBody(name='body'),
}

async function describeContainerInstanceId(request: DescribeContainerInstanceIdRequest): DescribeContainerInstanceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerInstanceId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceRequest {
  id: string(name='Id', position='Query'),
  includeDirectory?: boolean(name='IncludeDirectory', position='Query'),
  includeStats?: boolean(name='IncludeStats', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDeviceResponseBody = {
  alarmMethod?: string(name='AlarmMethod'),
  autoPos?: boolean(name='AutoPos'),
  autoStart?: boolean(name='AutoStart'),
  channelSyncTime?: string(name='ChannelSyncTime'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  directory?: {
    createdTime?: string(name='CreatedTime'),
    description?: string(name='Description'),
    groupId?: string(name='GroupId'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    parentId?: string(name='ParentId'),
  }(name='Directory'),
  directoryId?: string(name='DirectoryId'),
  dsn?: string(name='Dsn'),
  enabled?: boolean(name='Enabled'),
  gbId?: string(name='GbId'),
  groupId?: string(name='GroupId'),
  id?: string(name='Id'),
  ip?: string(name='Ip'),
  latitude?: string(name='Latitude'),
  longitude?: string(name='Longitude'),
  name?: string(name='Name'),
  params?: string(name='Params'),
  parentId?: string(name='ParentId'),
  password?: string(name='Password'),
  port?: long(name='Port'),
  posInterval?: long(name='PosInterval'),
  protocol?: string(name='Protocol'),
  registeredTime?: string(name='RegisteredTime'),
  requestId?: string(name='RequestId'),
  stats?: {
    channelNum?: long(name='ChannelNum'),
    failedNum?: long(name='FailedNum'),
    offlineNum?: long(name='OfflineNum'),
    onlineNum?: long(name='OnlineNum'),
    streamNum?: long(name='StreamNum'),
  }(name='Stats'),
  status?: string(name='Status'),
  type?: string(name='Type'),
  url?: string(name='Url'),
  username?: string(name='Username'),
  vendor?: string(name='Vendor'),
}

model DescribeDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceResponseBody(name='body'),
}

async function describeDevice(request: DescribeDeviceRequest): DescribeDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDevice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceChannelsRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model DescribeDeviceChannelsResponseBody = {
  channels?: [ 
    {
      channelId?: long(name='ChannelId'),
      deviceId?: string(name='DeviceId'),
      deviceStatus?: string(name='DeviceStatus'),
      gbId?: string(name='GbId'),
      name?: string(name='Name'),
      params?: string(name='Params'),
      streamId?: string(name='StreamId'),
      streamStatus?: string(name='StreamStatus'),
    }
  ](name='Channels'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDeviceChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceChannelsResponseBody(name='body'),
}

async function describeDeviceChannels(request: DescribeDeviceChannelsRequest): DescribeDeviceChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceChannels', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceGatewayRequest {
  clientIp?: string(name='ClientIp', position='Query'),
  expire?: long(name='Expire', position='Query'),
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDeviceGatewayResponseBody = {
  host?: string(name='Host'),
  port?: long(name='Port'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId'),
  token?: string(name='Token'),
}

model DescribeDeviceGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceGatewayResponseBody(name='body'),
}

async function describeDeviceGateway(request: DescribeDeviceGatewayRequest): DescribeDeviceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceGateway', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceURLRequest {
  auth?: boolean(name='Auth', position='Query'),
  expire?: long(name='Expire', position='Query'),
  id: string(name='Id', position='Query'),
  mode?: string(name='Mode', position='Query'),
  outProtocol: string(name='OutProtocol', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  stream: string(name='Stream', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDeviceURLResponseBody = {
  expireTime?: long(name='ExpireTime'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model DescribeDeviceURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceURLResponseBody(name='body'),
}

async function describeDeviceURL(request: DescribeDeviceURLRequest): DescribeDeviceURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceURL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDevicesRequest {
  directoryId?: string(name='DirectoryId', position='Query'),
  dsn?: string(name='Dsn', position='Query'),
  gbId?: string(name='GbId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  id?: string(name='Id', position='Query'),
  includeDirectory?: boolean(name='IncludeDirectory', position='Query'),
  includeStats?: boolean(name='IncludeStats', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
  status?: string(name='Status', position='Query'),
  type?: string(name='Type', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model DescribeDevicesResponseBody = {
  devices?: [ 
    {
      alarmMethod?: string(name='AlarmMethod'),
      autoDirectory?: boolean(name='AutoDirectory'),
      autoPos?: boolean(name='AutoPos'),
      autoStart?: boolean(name='AutoStart'),
      channelSyncTime?: string(name='ChannelSyncTime'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      directory?: {
        createdTime?: string(name='CreatedTime'),
        description?: string(name='Description'),
        groupId?: string(name='GroupId'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        parentId?: string(name='ParentId'),
      }(name='Directory'),
      directoryId?: string(name='DirectoryId'),
      dsn?: string(name='Dsn'),
      enabled?: boolean(name='Enabled'),
      gbId?: string(name='GbId'),
      groupId?: string(name='GroupId'),
      id?: string(name='Id'),
      ip?: string(name='Ip'),
      latitude?: string(name='Latitude'),
      longitude?: string(name='Longitude'),
      name?: string(name='Name'),
      params?: string(name='Params'),
      parentId?: string(name='ParentId'),
      password?: string(name='Password'),
      port?: long(name='Port'),
      posInterval?: long(name='PosInterval'),
      protocol?: string(name='Protocol'),
      registeredTime?: string(name='RegisteredTime'),
      stats?: {
        channelNum?: long(name='ChannelNum'),
        failedNum?: long(name='FailedNum'),
        offlineNum?: long(name='OfflineNum'),
        onlineNum?: long(name='OnlineNum'),
        streamNum?: long(name='StreamNum'),
      }(name='Stats'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      url?: string(name='Url'),
      username?: string(name='Username'),
      vendor?: string(name='Vendor'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDevicesResponseBody(name='body'),
}

async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDirectoriesRequest {
  groupId: string(name='GroupId', position='Query'),
  noPagination?: boolean(name='NoPagination', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
}

model DescribeDirectoriesResponseBody = {
  directories?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      parentId?: string(name='ParentId'),
    }
  ](name='Directories'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDirectoriesResponseBody(name='body'),
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDirectories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDirectoryRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDirectoryResponseBody = {
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  parentId?: string(name='ParentId'),
  requestId?: string(name='RequestId'),
}

model DescribeDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDirectoryResponseBody(name='body'),
}

async function describeDirectory(request: DescribeDirectoryRequest): DescribeDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExternalStreamURLRequest {
  kind: string(name='Kind', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  profile?: string(name='Profile', position='Query'),
  txId?: string(name='TxId', position='Query'),
  url: string(name='Url', position='Query'),
}

model DescribeExternalStreamURLResponseBody = {
  ip?: string(name='Ip'),
  outProtocol?: string(name='OutProtocol'),
  port?: long(name='Port'),
  profile?: string(name='Profile'),
  requestId?: string(name='RequestId'),
  txId?: string(name='TxId'),
  url?: string(name='Url'),
}

model DescribeExternalStreamURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExternalStreamURLResponseBody(name='body'),
}

async function describeExternalStreamURL(request: DescribeExternalStreamURLRequest): DescribeExternalStreamURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExternalStreamURL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupRequest {
  id: string(name='Id', position='Query'),
  includeStats?: boolean(name='IncludeStats', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeGroupResponseBody = {
  aliasId?: string(name='AliasId'),
  app?: string(name='App'),
  callback?: string(name='Callback'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  enabled?: boolean(name='Enabled'),
  gbId?: string(name='GbId'),
  gbIp?: string(name='GbIp'),
  gbPort?: long(name='GbPort'),
  gbTcpPorts?: [ string ](name='GbTcpPorts'),
  gbUdpPorts?: [ string ](name='GbUdpPorts'),
  id?: string(name='Id'),
  inProtocol?: string(name='InProtocol'),
  lazyPull?: boolean(name='LazyPull'),
  name?: string(name='Name'),
  outProtocol?: string(name='OutProtocol'),
  playDomain?: string(name='PlayDomain'),
  pushDomain?: string(name='PushDomain'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  stats?: {
    deviceNum?: long(name='DeviceNum'),
    iedNum?: long(name='IedNum'),
    ipcNum?: long(name='IpcNum'),
    platformNum?: long(name='PlatformNum'),
  }(name='Stats'),
  status?: string(name='Status'),
}

model DescribeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupResponseBody(name='body'),
}

async function describeGroup(request: DescribeGroupRequest): DescribeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupsRequest {
  id?: string(name='Id', position='Query'),
  inProtocol?: string(name='InProtocol', position='Query'),
  includeStats?: boolean(name='IncludeStats', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  region?: string(name='Region', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeGroupsResponseBody = {
  groups?: [ 
    {
      aliasId?: string(name='AliasId'),
      app?: string(name='App'),
      callback?: string(name='Callback'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      enabled?: boolean(name='Enabled'),
      gbId?: string(name='GbId'),
      gbIp?: string(name='GbIp'),
      gbPort?: long(name='GbPort'),
      gbTcpPorts?: [ string ](name='GbTcpPorts'),
      gbUdpPorts?: [ string ](name='GbUdpPorts'),
      id?: string(name='Id'),
      inProtocol?: string(name='InProtocol'),
      lazyPull?: boolean(name='LazyPull'),
      name?: string(name='Name'),
      outProtocol?: string(name='OutProtocol'),
      playDomain?: string(name='PlayDomain'),
      pushDomain?: string(name='PushDomain'),
      region?: string(name='Region'),
      stats?: {
        deviceNum?: long(name='DeviceNum'),
        iedNum?: long(name='IedNum'),
        ipcNum?: long(name='IpcNum'),
        platformNum?: long(name='PlatformNum'),
      }(name='Stats'),
      status?: string(name='Status'),
    }
  ](name='Groups'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupsResponseBody(name='body'),
}

async function describeGroups(request: DescribeGroupsRequest): DescribeGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNodeDevicesInfoRequest {
  nodeName?: string(name='NodeName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeNodeDevicesInfoResponseBody = {
  nodeDevices?: [ 
    {
      deviceInfos?: [ 
        {
          IP?: string(name='IP'),
          instanceId?: string(name='InstanceId'),
          name?: string(name='Name'),
          server?: string(name='Server'),
        }
      ](name='DeviceInfos'),
      nodeName?: string(name='NodeName'),
    }
  ](name='NodeDevices'),
  requestId?: string(name='RequestId'),
}

model DescribeNodeDevicesInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodeDevicesInfoResponseBody(name='body'),
}

async function describeNodeDevicesInfo(request: DescribeNodeDevicesInfoRequest): DescribeNodeDevicesInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodeDevicesInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParentPlatformRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeParentPlatformResponseBody = {
  autoStart?: boolean(name='AutoStart'),
  clientAuth?: boolean(name='ClientAuth'),
  clientGbId?: string(name='ClientGbId'),
  clientIp?: string(name='ClientIp'),
  clientPassword?: string(name='ClientPassword'),
  clientPort?: long(name='ClientPort'),
  clientUsername?: string(name='ClientUsername'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  gbId?: string(name='GbId'),
  id?: string(name='Id'),
  ip?: string(name='Ip'),
  name?: string(name='Name'),
  port?: long(name='Port'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParentPlatformResponseBody(name='body'),
}

async function describeParentPlatform(request: DescribeParentPlatformRequest): DescribeParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParentPlatformDevicesRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
}

model DescribeParentPlatformDevicesResponseBody = {
  devices?: [ 
    {
      gbId?: string(name='GbId'),
      groupId?: string(name='GroupId'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      parentId?: string(name='ParentId'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeParentPlatformDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParentPlatformDevicesResponseBody(name='body'),
}

async function describeParentPlatformDevices(request: DescribeParentPlatformDevicesRequest): DescribeParentPlatformDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParentPlatformDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParentPlatformsRequest {
  gbId?: string(name='GbId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeParentPlatformsResponseBody = {
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  platforms?: [ 
    {
      autoStart?: boolean(name='AutoStart'),
      clientAuth?: boolean(name='ClientAuth'),
      clientGbId?: string(name='ClientGbId'),
      clientIp?: string(name='ClientIp'),
      clientPassword?: string(name='ClientPassword'),
      clientPort?: long(name='ClientPort'),
      clientUsername?: string(name='ClientUsername'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      gbId?: string(name='GbId'),
      id?: string(name='Id'),
      ip?: string(name='Ip'),
      name?: string(name='Name'),
      port?: long(name='Port'),
      protocol?: string(name='Protocol'),
      status?: string(name='Status'),
    }
  ](name='Platforms'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeParentPlatformsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParentPlatformsResponseBody(name='body'),
}

async function describeParentPlatforms(request: DescribeParentPlatformsRequest): DescribeParentPlatformsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParentPlatforms', 'POST', '/', 'json', false, 'json', request);
}

model DescribePresetsRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribePresetsResponseBody = {
  id?: string(name='Id'),
  presets?: [ 
    {
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Presets'),
  requestId?: string(name='RequestId'),
}

model DescribePresetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePresetsResponseBody(name='body'),
}

async function describePresets(request: DescribePresetsRequest): DescribePresetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePresets', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedDeviceRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribePurchasedDeviceResponseBody = {
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  orderId?: string(name='OrderId'),
  region?: string(name='Region'),
  registerCode?: string(name='RegisterCode'),
  requestId?: string(name='RequestId'),
  subType?: string(name='SubType'),
  type?: string(name='Type'),
  vendor?: string(name='Vendor'),
}

model DescribePurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedDeviceResponseBody(name='body'),
}

async function describePurchasedDevice(request: DescribePurchasedDeviceRequest): DescribePurchasedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedDevice', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedDevicesRequest {
  groupId?: string(name='GroupId', position='Query'),
  id?: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
  subType?: string(name='SubType', position='Query'),
  type?: string(name='Type', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model DescribePurchasedDevicesResponseBody = {
  devices?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      orderId?: string(name='OrderId'),
      region?: string(name='Region'),
      registerCode?: string(name='RegisterCode'),
      subType?: string(name='SubType'),
      type?: string(name='Type'),
      vendor?: string(name='Vendor'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribePurchasedDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedDevicesResponseBody(name='body'),
}

async function describePurchasedDevices(request: DescribePurchasedDevicesRequest): DescribePurchasedDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecordsRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  privateBucket?: boolean(name='PrivateBucket', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamId: string(name='StreamId', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeRecordsResponseBody = {
  nextStartTime?: string(name='NextStartTime'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  records?: [ 
    {
      endTime?: string(name='EndTime'),
      fileFormat?: string(name='FileFormat'),
      height?: long(name='Height'),
      id?: string(name='Id'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      ossObject?: string(name='OssObject'),
      startTime?: string(name='StartTime'),
      streamId?: string(name='StreamId'),
      templateId?: string(name='TemplateId'),
      type?: string(name='Type'),
      url?: string(name='Url'),
      width?: long(name='Width'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordsResponseBody(name='body'),
}

async function describeRecords(request: DescribeRecordsRequest): DescribeRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRenderingDevicesRequest {
  instanceIds: string(name='InstanceIds', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeRenderingDevicesResponseBody = {
  devices?: [ 
    {
      autoRenew?: boolean(name='AutoRenew'),
      autoRenewPeriod?: int32(name='AutoRenewPeriod'),
      clusterId?: string(name='ClusterId'),
      description?: string(name='Description'),
      edgeNodeName?: string(name='EdgeNodeName'),
      imageId?: string(name='ImageId'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      ipInfos?: [ 
        {
          externalIp?: string(name='ExternalIp'),
          externalPort?: string(name='ExternalPort'),
          ISP?: string(name='ISP'),
          internalIp?: string(name='InternalIp'),
          internalPort?: string(name='InternalPort'),
          ipProtocol?: string(name='IpProtocol'),
          natType?: string(name='NatType'),
        }
      ](name='IpInfos'),
      macAddress?: string(name='MacAddress'),
      period?: int32(name='Period'),
      periodUnit?: string(name='PeriodUnit'),
      platformType?: string(name='PlatformType'),
      podInfos?: [ 
        {
          network?: [ 
            {
              containerPorts?: string(name='ContainerPorts'),
              externalIp?: string(name='ExternalIp'),
              externalPorts?: string(name='ExternalPorts'),
            }
          ](name='Network'),
          podId?: string(name='PodId'),
          status?: string(name='Status'),
        }
      ](name='PodInfos'),
      serverName?: string(name='ServerName'),
      specification?: string(name='Specification'),
      status?: string(name='Status'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeRenderingDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRenderingDevicesResponseBody(name='body'),
}

async function describeRenderingDevices(request: DescribeRenderingDevicesRequest): DescribeRenderingDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRenderingDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeStreamResponseBody = {
  app?: string(name='App'),
  createdTime?: string(name='CreatedTime'),
  deviceId?: string(name='DeviceId'),
  enabled?: boolean(name='Enabled'),
  groupId?: string(name='GroupId'),
  height?: int32(name='Height'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  playDomain?: string(name='PlayDomain'),
  protocol?: string(name='Protocol'),
  pushDomain?: string(name='PushDomain'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  width?: int32(name='Width'),
}

model DescribeStreamResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStreamResponseBody(name='body'),
}

async function describeStream(request: DescribeStreamRequest): DescribeStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStream', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamURLRequest {
  auth?: boolean(name='Auth', position='Query'),
  authKey?: string(name='AuthKey', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  expire?: long(name='Expire', position='Query'),
  id: string(name='Id', position='Query'),
  outProtocol: string(name='OutProtocol', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  transcode?: string(name='Transcode', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeStreamURLResponseBody = {
  expireTime?: long(name='ExpireTime'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model DescribeStreamURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStreamURLResponseBody(name='body'),
}

async function describeStreamURL(request: DescribeStreamURLRequest): DescribeStreamURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStreamURL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamVodListRequest {
  endTime: long(name='EndTime', position='Query'),
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeStreamVodListResponseBody = {
  records?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
}

model DescribeStreamVodListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStreamVodListResponseBody(name='body'),
}

async function describeStreamVodList(request: DescribeStreamVodListRequest): DescribeStreamVodListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStreamVodList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamsRequest {
  app?: string(name='App', position='Query'),
  deviceId?: string(name='DeviceId', position='Query'),
  domain?: string(name='Domain', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  id?: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
}

model DescribeStreamsResponseBody = {
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  streams?: [ 
    {
      app?: string(name='App'),
      createdTime?: string(name='CreatedTime'),
      deviceId?: string(name='DeviceId'),
      enabled?: boolean(name='Enabled'),
      groupId?: string(name='GroupId'),
      height?: int32(name='Height'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      playDomain?: string(name='PlayDomain'),
      protocol?: string(name='Protocol'),
      pushDomain?: string(name='PushDomain'),
      status?: string(name='Status'),
      width?: int32(name='Width'),
    }
  ](name='Streams'),
  totalCount?: long(name='TotalCount'),
}

model DescribeStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStreamsResponseBody(name='body'),
}

async function describeStreams(request: DescribeStreamsRequest): DescribeStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStreams', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplateRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeTemplateResponseBody = {
  callback?: string(name='Callback'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  fileFormat?: string(name='FileFormat'),
  flv?: string(name='Flv'),
  hlsM3u8?: string(name='HlsM3u8'),
  hlsTs?: string(name='HlsTs'),
  id?: string(name='Id'),
  interval?: long(name='Interval'),
  jpgOnDemand?: string(name='JpgOnDemand'),
  jpgOverwrite?: string(name='JpgOverwrite'),
  jpgSequence?: string(name='JpgSequence'),
  mp4?: string(name='Mp4'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossFilePrefix?: string(name='OssFilePrefix'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  retention?: long(name='Retention'),
  transConfigs?: [ 
    {
      fps?: long(name='Fps'),
      gop?: long(name='Gop'),
      height?: long(name='Height'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      videoBitrate?: long(name='VideoBitrate'),
      videoCodec?: string(name='VideoCodec'),
      width?: long(name='Width'),
    }
  ](name='TransConfigs'),
  trigger?: string(name='Trigger'),
  type?: string(name='Type'),
}

model DescribeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTemplateResponseBody(name='body'),
}

async function describeTemplate(request: DescribeTemplateRequest): DescribeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplatesRequest {
  id?: string(name='Id', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeTemplatesResponseBody = {
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  templates?: [ 
    {
      callback?: string(name='Callback'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      fileFormat?: string(name='FileFormat'),
      flv?: string(name='Flv'),
      hlsM3u8?: string(name='HlsM3u8'),
      hlsTs?: string(name='HlsTs'),
      id?: string(name='Id'),
      interval?: long(name='Interval'),
      jpgOnDemand?: string(name='JpgOnDemand'),
      jpgOverwrite?: string(name='JpgOverwrite'),
      jpgSequence?: string(name='JpgSequence'),
      mp4?: string(name='Mp4'),
      name?: string(name='Name'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      ossFilePrefix?: string(name='OssFilePrefix'),
      region?: string(name='Region'),
      retention?: long(name='Retention'),
      transConfigs?: [ 
        {
          fps?: long(name='Fps'),
          gop?: long(name='Gop'),
          height?: long(name='Height'),
          name?: string(name='Name'),
          videoBitrate?: long(name='VideoBitrate'),
          videoCodec?: string(name='VideoCodec'),
          width?: long(name='Width'),
          id?: string(name='id'),
        }
      ](name='TransConfigs'),
      trigger?: string(name='Trigger'),
      type?: string(name='Type'),
    }
  ](name='Templates'),
  totalCount?: long(name='TotalCount'),
}

model DescribeTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTemplatesResponseBody(name='body'),
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVodStreamURLRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  txId?: string(name='TxId', position='Query'),
  url: string(name='Url', position='Query'),
}

model DescribeVodStreamURLResponseBody = {
  outProtocol?: string(name='OutProtocol'),
  port?: long(name='Port'),
  requestId?: string(name='RequestId'),
  txId?: string(name='TxId'),
  url?: string(name='Url'),
}

model DescribeVodStreamURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodStreamURLResponseBody(name='body'),
}

async function describeVodStreamURL(request: DescribeVodStreamURLRequest): DescribeVodStreamURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVodStreamURL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsCertificateDetailRequest {
  certName: string(name='CertName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsCertificateDetailResponseBody = {
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  requestId?: string(name='RequestId'),
}

model DescribeVsCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsCertificateDetailResponseBody(name='body'),
}

async function describeVsCertificateDetail(request: DescribeVsCertificateDetailRequest): DescribeVsCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsCertificateListRequest {
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsCertificateListResponseBody = {
  certificateListModel?: {
    certList?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeVsCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsCertificateListResponseBody(name='body'),
}

async function describeVsCertificateList(request: DescribeVsCertificateListRequest): DescribeVsCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsCertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDevicesDataRequest {
  endTime?: string(name='EndTime', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDevicesDataResponseBody = {
  devicesDataPerInterval?: {
    dataModule?: [ 
    {
      devicesDataValue?: string(name='DevicesDataValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='DevicesDataPerInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDevicesDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDevicesDataResponseBody(name='body'),
}

async function describeVsDevicesData(request: DescribeVsDevicesDataRequest): DescribeVsDevicesDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDevicesData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bpsValue?: string(name='BpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainBpsDataResponseBody(name='body'),
}

async function describeVsDomainBpsData(request: DescribeVsDomainBpsDataRequest): DescribeVsDomainBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainCertificateInfoRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certType?: string(name='CertType'),
      domainName?: string(name='DomainName'),
      SSLPub?: string(name='SSLPub'),
      serverCertificateStatus?: string(name='ServerCertificateStatus'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainCertificateInfoResponseBody(name='body'),
}

async function describeVsDomainCertificateInfo(request: DescribeVsDomainCertificateInfoRequest): DescribeVsDomainCertificateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainCertificateInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainConfigsRequest {
  domainName: string(name='DomainName', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsDomainConfigsResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainConfigsResponseBody(name='body'),
}

async function describeVsDomainConfigs(request: DescribeVsDomainConfigsRequest): DescribeVsDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainDetailRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsDomainDetailResponseBody = {
  domainConfig?: {
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    domainType?: string(name='DomainType'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    region?: string(name='Region'),
    SSLProtocol?: string(name='SSLProtocol'),
    scope?: string(name='Scope'),
  }(name='DomainConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainDetailResponseBody(name='body'),
}

async function describeVsDomainDetail(request: DescribeVsDomainDetailRequest): DescribeVsDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainOnlineUserNumRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queryTime?: string(name='QueryTime', position='Query'),
}

model DescribeVsDomainOnlineUserNumResponseBody = {
  onlineUserInfo?: {
    liveStreamOnlineUserNumInfo?: [ 
    {
      infos?: {
        info?: [ 
        {
          transcodeTemplate?: string(name='TranscodeTemplate'),
          userNumber?: long(name='UserNumber'),
        }
      ](name='Info')
      }(name='Infos'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveStreamOnlineUserNumInfo')
  }(name='OnlineUserInfo'),
  requestId?: string(name='RequestId'),
  streamCount?: int32(name='StreamCount'),
  userCount?: int32(name='UserCount'),
}

model DescribeVsDomainOnlineUserNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainOnlineUserNumResponseBody(name='body'),
}

async function describeVsDomainOnlineUserNum(request: DescribeVsDomainOnlineUserNumRequest): DescribeVsDomainOnlineUserNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainOnlineUserNum', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainPvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainPvDataResponseBody(name='body'),
}

async function describeVsDomainPvData(request: DescribeVsDomainPvDataRequest): DescribeVsDomainPvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainPvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainPvUvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainPvUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvUvDataInfos?: {
    pvUvDataInfo?: [ 
    {
      PV?: string(name='PV'),
      timeStamp?: string(name='TimeStamp'),
      UV?: string(name='UV'),
    }
  ](name='PvUvDataInfo')
  }(name='PvUvDataInfos'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainPvUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainPvUvDataResponseBody(name='body'),
}

async function describeVsDomainPvUvData(request: DescribeVsDomainPvUvDataRequest): DescribeVsDomainPvUvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainPvUvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainRecordDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainRecordDataResponseBody = {
  recordDataPerInterval?: {
    dataModule?: [ 
    {
      recordValue?: string(name='RecordValue'),
      streamCountValue?: string(name='StreamCountValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RecordDataPerInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDomainRecordDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainRecordDataResponseBody(name='body'),
}

async function describeVsDomainRecordData(request: DescribeVsDomainRecordDataRequest): DescribeVsDomainRecordDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainRecordData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainRegionDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      region?: string(name='Region'),
      regionEname?: string(name='RegionEname'),
      reqErrRate?: string(name='ReqErrRate'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeVsDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainRegionDataResponseBody(name='body'),
}

async function describeVsDomainRegionData(request: DescribeVsDomainRegionDataRequest): DescribeVsDomainRegionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainRegionData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainReqBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainReqBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  reqBpsDataPerInterval?: {
    dataModule?: [ 
    {
      reqBpsValue?: string(name='ReqBpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='ReqBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainReqBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainReqBpsDataResponseBody(name='body'),
}

async function describeVsDomainReqBpsData(request: DescribeVsDomainReqBpsDataRequest): DescribeVsDomainReqBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainReqBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainReqTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainReqTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  reqTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      reqTrafficValue?: string(name='ReqTrafficValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='ReqTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainReqTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainReqTrafficDataResponseBody(name='body'),
}

async function describeVsDomainReqTrafficData(request: DescribeVsDomainReqTrafficDataRequest): DescribeVsDomainReqTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainReqTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainSnapshotDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainSnapshotDataResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotDataPerInterval?: {
    dataModule?: [ 
    {
      snapshotValue?: string(name='SnapshotValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='SnapshotDataPerInterval'),
}

model DescribeVsDomainSnapshotDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainSnapshotDataResponseBody(name='body'),
}

async function describeVsDomainSnapshotData(request: DescribeVsDomainSnapshotDataRequest): DescribeVsDomainSnapshotDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainSnapshotData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeVsDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainTrafficDataResponseBody(name='body'),
}

async function describeVsDomainTrafficData(request: DescribeVsDomainTrafficDataRequest): DescribeVsDomainTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainUvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeVsDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainUvDataResponseBody(name='body'),
}

async function describeVsDomainUvData(request: DescribeVsDomainUvDataRequest): DescribeVsDomainUvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainUvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsPullStreamConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsPullStreamConfigResponseBody = {
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      endTime?: string(name='EndTime'),
      sourceUrl?: string(name='SourceUrl'),
      startTime?: string(name='StartTime'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
  requestId?: string(name='RequestId'),
}

model DescribeVsPullStreamConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsPullStreamConfigResponseBody(name='body'),
}

async function describeVsPullStreamConfig(request: DescribeVsPullStreamConfigRequest): DescribeVsPullStreamConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsPullStreamConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsPullStreamInfoConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsPullStreamInfoConfigResponseBody = {
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      endTime?: string(name='EndTime'),
      sourceUrl?: string(name='SourceUrl'),
      startTime?: string(name='StartTime'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
  requestId?: string(name='RequestId'),
}

model DescribeVsPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsPullStreamInfoConfigResponseBody(name='body'),
}

async function describeVsPullStreamInfoConfig(request: DescribeVsPullStreamInfoConfigRequest): DescribeVsPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsStorageTrafficUsageDataRequest {
  bucket?: string(name='Bucket', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  splitBy?: string(name='SplitBy', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeVsStorageTrafficUsageDataResponseBody = {
  requestId?: string(name='RequestId'),
  trafficUsage?: {
    trafficUsageDataModule?: [ 
    {
      bucket?: string(name='Bucket'),
      lanBandwidthInDataValue?: float(name='LanBandwidthInDataValue'),
      lanBandwidthOutDataValue?: float(name='LanBandwidthOutDataValue'),
      lanTrafficInDataValue?: long(name='LanTrafficInDataValue'),
      lanTrafficOutDataValue?: long(name='LanTrafficOutDataValue'),
      timeStamp?: string(name='TimeStamp'),
      wanBandwidthInDataValue?: float(name='WanBandwidthInDataValue'),
      wanBandwidthOutDataValue?: float(name='WanBandwidthOutDataValue'),
      wanTrafficInDataValue?: long(name='WanTrafficInDataValue'),
      wanTrafficOutDataValue?: long(name='WanTrafficOutDataValue'),
    }
  ](name='TrafficUsageDataModule')
  }(name='TrafficUsage'),
}

model DescribeVsStorageTrafficUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStorageTrafficUsageDataResponseBody(name='body'),
}

async function describeVsStorageTrafficUsageData(request: DescribeVsStorageTrafficUsageDataRequest): DescribeVsStorageTrafficUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsStorageTrafficUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsStorageUsageDataRequest {
  bucket?: string(name='Bucket', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  splitBy?: string(name='SplitBy', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeVsStorageUsageDataResponseBody = {
  requestId?: string(name='RequestId'),
  storageUsage?: {
    storageUsageDataModule?: [ 
    {
      bucket?: string(name='Bucket'),
      storageDataValue?: int32(name='StorageDataValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='StorageUsageDataModule')
  }(name='StorageUsage'),
}

model DescribeVsStorageUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStorageUsageDataResponseBody(name='body'),
}

async function describeVsStorageUsageData(request: DescribeVsStorageUsageDataRequest): DescribeVsStorageUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsStorageUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsStreamsNotifyUrlConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsStreamsNotifyUrlConfigResponseBody = {
  liveStreamsNotifyConfig?: {
    authKey?: string(name='AuthKey'),
    authType?: string(name='AuthType'),
    domainName?: string(name='DomainName'),
    notifyUrl?: string(name='NotifyUrl'),
  }(name='LiveStreamsNotifyConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeVsStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function describeVsStreamsNotifyUrlConfig(request: DescribeVsStreamsNotifyUrlConfigRequest): DescribeVsStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsStreamsOnlineListRequest {
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
  streamType?: string(name='StreamType', position='Query'),
}

model DescribeVsStreamsOnlineListResponseBody = {
  onlineInfo?: {
    liveStreamOnlineInfo?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      publishDomain?: string(name='PublishDomain'),
      publishTime?: string(name='PublishTime'),
      publishType?: string(name='PublishType'),
      publishUrl?: string(name='PublishUrl'),
      streamName?: string(name='StreamName'),
      transcodeId?: string(name='TranscodeId'),
      transcoded?: string(name='Transcoded'),
    }
  ](name='LiveStreamOnlineInfo')
  }(name='OnlineInfo'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeVsStreamsOnlineListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStreamsOnlineListResponseBody(name='body'),
}

async function describeVsStreamsOnlineList(request: DescribeVsStreamsOnlineListRequest): DescribeVsStreamsOnlineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsStreamsOnlineList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsStreamsPublishListRequest {
  appName?: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  streamName?: string(name='StreamName', position='Query'),
  streamType?: string(name='StreamType', position='Query'),
}

model DescribeVsStreamsPublishListResponseBody = {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  publishInfo?: {
    liveStreamPublishInfo?: [ 
    {
      appName?: string(name='AppName'),
      clientAddr?: string(name='ClientAddr'),
      domainName?: string(name='DomainName'),
      edgeNodeAddr?: string(name='EdgeNodeAddr'),
      publishDomain?: string(name='PublishDomain'),
      publishTime?: string(name='PublishTime'),
      publishType?: string(name='PublishType'),
      publishUrl?: string(name='PublishUrl'),
      stopTime?: string(name='StopTime'),
      streamName?: string(name='StreamName'),
      streamUrl?: string(name='StreamUrl'),
      transcodeId?: string(name='TranscodeId'),
      transcoded?: string(name='Transcoded'),
    }
  ](name='LiveStreamPublishInfo')
  }(name='PublishInfo'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeVsStreamsPublishListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStreamsPublishListResponseBody(name='body'),
}

async function describeVsStreamsPublishList(request: DescribeVsStreamsPublishListRequest): DescribeVsStreamsPublishListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsStreamsPublishList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsTopDomainsByFlowRequest {
  endTime?: string(name='EndTime', position='Query'),
  limit?: long(name='Limit', minimum=1, maximum=100, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeVsTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName'),
      maxBps?: long(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
      trafficPercent?: string(name='TrafficPercent'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeVsTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsTopDomainsByFlowResponseBody(name='body'),
}

async function describeVsTopDomainsByFlow(request: DescribeVsTopDomainsByFlowRequest): DescribeVsTopDomainsByFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsTopDomainsByFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsUpPeakPublishStreamDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  domainSwitch?: string(name='DomainSwitch', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeVsUpPeakPublishStreamDataResponseBody = {
  describeVsUpPeakPublishStreamDatas?: {
    describeVsUpPeakPublishStreamData?: [ 
    {
      bandWidth?: string(name='BandWidth'),
      peakTime?: string(name='PeakTime'),
      publishStreamNum?: int32(name='PublishStreamNum'),
      queryTime?: string(name='QueryTime'),
      statName?: string(name='StatName'),
    }
  ](name='DescribeVsUpPeakPublishStreamData')
  }(name='DescribeVsUpPeakPublishStreamDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeVsUpPeakPublishStreamDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsUpPeakPublishStreamDataResponseBody(name='body'),
}

async function describeVsUpPeakPublishStreamData(request: DescribeVsUpPeakPublishStreamDataRequest): DescribeVsUpPeakPublishStreamDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsUpPeakPublishStreamData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsUserResourcePackageRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeVsUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      currCapacity?: string(name='CurrCapacity'),
      displayName?: string(name='DisplayName'),
      initCapacity?: string(name='InitCapacity'),
      instanceId?: string(name='InstanceId'),
      status?: string(name='Status'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos'),
}

model DescribeVsUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsUserResourcePackageResponseBody(name='body'),
}

async function describeVsUserResourcePackage(request: DescribeVsUserResourcePackageRequest): DescribeVsUserResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsUserResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

model ForbidVsStreamRequest {
  appName: string(name='AppName', position='Query'),
  controlStreamAction?: string(name='ControlStreamAction', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  liveStreamType: string(name='LiveStreamType', position='Query'),
  oneshot?: string(name='Oneshot', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resumeTime?: string(name='ResumeTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model ForbidVsStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ForbidVsStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ForbidVsStreamResponseBody(name='body'),
}

async function forbidVsStream(request: ForbidVsStreamRequest): ForbidVsStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ForbidVsStream', 'POST', '/', 'json', false, 'json', request);
}

model GetBucketInfoRequest {
  bucketName: string(name='BucketName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetBucketInfoResponseBody = {
  bucketInfo?: {
    bucketAcl?: string(name='BucketAcl'),
    bucketName?: string(name='BucketName'),
    comment?: string(name='Comment'),
    createTime?: string(name='CreateTime'),
    dataRedundancyType?: string(name='DataRedundancyType'),
    dispatcherType?: string(name='DispatcherType'),
    endpoint?: string(name='Endpoint'),
    modifyTime?: string(name='ModifyTime'),
    resourceType?: string(name='ResourceType'),
    storageClass?: string(name='StorageClass'),
  }(name='BucketInfo'),
  requestId?: string(name='RequestId'),
}

model GetBucketInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetBucketInfoResponseBody(name='body'),
}

async function getBucketInfo(request: GetBucketInfoRequest): GetBucketInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBucketInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetObjectTotalRequest {
  bucketName: string(name='BucketName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetObjectTotalResponseBody = {
  objectCount?: long(name='ObjectCount'),
  requestId?: string(name='RequestId'),
}

model GetObjectTotalResponse = {
  headers: map[string]string(name='headers'),
  body: GetObjectTotalResponseBody(name='body'),
}

async function getObjectTotal(request: GetObjectTotalRequest): GetObjectTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetObjectTotal', 'POST', '/', 'json', false, 'json', request);
}

model GotoPresetRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  presetId: string(name='PresetId', position='Query'),
}

model GotoPresetResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model GotoPresetResponse = {
  headers: map[string]string(name='headers'),
  body: GotoPresetResponseBody(name='body'),
}

async function gotoPreset(request: GotoPresetRequest): GotoPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GotoPreset', 'POST', '/', 'json', false, 'json', request);
}

model ListBucketsRequest {
  keyword?: string(name='Keyword', position='Query'),
  marker?: string(name='Marker', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prefix?: string(name='Prefix', position='Query'),
}

model ListBucketsResponseBody = {
  bucketInfos?: [ 
    {
      bucketAcl?: string(name='BucketAcl'),
      bucketName?: string(name='BucketName'),
      comment?: string(name='Comment'),
      createTime?: string(name='CreateTime'),
      dataRedundancyType?: string(name='DataRedundancyType'),
      dispatcherType?: string(name='DispatcherType'),
      endpoint?: string(name='Endpoint'),
      modifyTime?: string(name='ModifyTime'),
      resourceType?: string(name='ResourceType'),
      storageClass?: string(name='StorageClass'),
    }
  ](name='BucketInfos'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListBucketsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBucketsResponseBody(name='body'),
}

async function listBuckets(request: ListBucketsRequest): ListBucketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBuckets', 'POST', '/', 'json', false, 'json', request);
}

model ListDeviceChannelsRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model ListDeviceChannelsResponseBody = {
  channels?: [ 
    {
      channelId?: long(name='ChannelId'),
      deviceId?: string(name='DeviceId'),
      deviceStatus?: string(name='DeviceStatus'),
      name?: string(name='Name'),
      params?: string(name='Params'),
    }
  ](name='Channels'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDeviceChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceChannelsResponseBody(name='body'),
}

async function listDeviceChannels(request: ListDeviceChannelsRequest): ListDeviceChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceChannels', 'POST', '/', 'json', false, 'json', request);
}

model ListDeviceRecordsRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  searchCriteria: string(name='SearchCriteria', position='Query'),
  streamId?: string(name='StreamId', position='Query'),
}

model ListDeviceRecordsResponseBody = {
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  records?: [ 
    {
      endTime?: string(name='EndTime'),
      fileSize?: long(name='FileSize'),
      filename?: string(name='Filename'),
      recordType?: string(name='RecordType'),
      startTime?: string(name='StartTime'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDeviceRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceRecordsResponseBody(name='body'),
}

async function listDeviceRecords(request: ListDeviceRecordsRequest): ListDeviceRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceRecords', 'POST', '/', 'json', false, 'json', request);
}

model ListObjectsRequest {
  bucketName: string(name='BucketName', position='Query'),
  continuationToken?: string(name='ContinuationToken', position='Query'),
  delimiter?: string(name='Delimiter', position='Query'),
  encodingType?: string(name='EncodingType', position='Query'),
  marker?: string(name='Marker', position='Query'),
  maxKeys?: int32(name='MaxKeys', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefix?: string(name='Prefix', position='Query'),
  startAfter?: string(name='StartAfter', position='Query'),
}

model ListObjectsResponseBody = {
  bucketName?: string(name='BucketName'),
  commonPrefixes?: [ string ](name='CommonPrefixes'),
  contents?: [ 
    {
      ETag?: string(name='ETag'),
      key?: string(name='Key'),
      lastModified?: string(name='LastModified'),
      size?: long(name='Size'),
      storageClass?: string(name='StorageClass'),
    }
  ](name='Contents'),
  continuationToken?: string(name='ContinuationToken'),
  delimiter?: string(name='Delimiter'),
  encodingType?: string(name='EncodingType'),
  isTruncated?: boolean(name='IsTruncated'),
  keyCount?: int32(name='KeyCount'),
  marker?: string(name='Marker'),
  maxKeys?: int32(name='MaxKeys'),
  nextContinuationToken?: string(name='NextContinuationToken'),
  nextMarker?: string(name='NextMarker'),
  prefix?: string(name='Prefix'),
  requestId?: string(name='RequestId'),
}

model ListObjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListObjectsResponseBody(name='body'),
}

async function listObjects(request: ListObjectsRequest): ListObjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListObjects', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeviceRequest {
  alarmMethod?: string(name='AlarmMethod', position='Query'),
  autoPos?: boolean(name='AutoPos', position='Query'),
  autoStart?: boolean(name='AutoStart', position='Query'),
  description?: string(name='Description', position='Query'),
  directoryId?: string(name='DirectoryId', position='Query'),
  gbId?: string(name='GbId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  id: string(name='Id', position='Query'),
  ip?: string(name='Ip', position='Query'),
  latitude?: string(name='Latitude', position='Query'),
  longitude?: string(name='Longitude', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  params?: string(name='Params', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  password?: string(name='Password', position='Query'),
  port?: long(name='Port', position='Query'),
  posInterval?: long(name='PosInterval', position='Query'),
  type?: string(name='Type', position='Query'),
  url?: string(name='Url', position='Query'),
  username?: string(name='Username', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model ModifyDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceResponseBody(name='body'),
}

async function modifyDevice(request: ModifyDeviceRequest): ModifyDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDevice', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeviceAlarmRequest {
  alarmId: string(name='AlarmId', position='Query'),
  channelId: int32(name='ChannelId', position='Query'),
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  status: int32(name='Status', position='Query'),
}

model ModifyDeviceAlarmResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeviceAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceAlarmResponseBody(name='body'),
}

async function modifyDeviceAlarm(request: ModifyDeviceAlarmRequest): ModifyDeviceAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeviceAlarm', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeviceCaptureRequest {
  id: string(name='Id', position='Query'),
  image?: int32(name='Image', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  video?: int32(name='Video', position='Query'),
}

model ModifyDeviceCaptureResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeviceCaptureResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceCaptureResponseBody(name='body'),
}

async function modifyDeviceCapture(request: ModifyDeviceCaptureRequest): ModifyDeviceCaptureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeviceCapture', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeviceChannelsRequest {
  channels: string(name='Channels', position='Query'),
  deviceStatus?: string(name='DeviceStatus', position='Query'),
  dsn?: string(name='Dsn', position='Query'),
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyDeviceChannelsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeviceChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceChannelsResponseBody(name='body'),
}

async function modifyDeviceChannels(request: ModifyDeviceChannelsRequest): ModifyDeviceChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeviceChannels', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDirectoryRequest {
  description?: string(name='Description', position='Query'),
  id: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyDirectoryResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDirectoryResponseBody(name='body'),
}

async function modifyDirectory(request: ModifyDirectoryRequest): ModifyDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGroupRequest {
  callback?: string(name='Callback', position='Query'),
  description?: string(name='Description', position='Query'),
  enabled?: boolean(name='Enabled', position='Query'),
  id: string(name='Id', position='Query'),
  inProtocol?: string(name='InProtocol', position='Query'),
  lazyPull?: boolean(name='LazyPull', position='Query'),
  name?: string(name='Name', position='Query'),
  outProtocol?: string(name='OutProtocol', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain?: string(name='PlayDomain', position='Query'),
  pushDomain?: string(name='PushDomain', position='Query'),
  region?: string(name='Region', position='Query'),
}

model ModifyGroupResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGroupResponseBody(name='body'),
}

async function modifyGroup(request: ModifyGroupRequest): ModifyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyParentPlatformRequest {
  autoStart?: boolean(name='AutoStart', position='Query'),
  clientAuth?: boolean(name='ClientAuth', position='Query'),
  clientPassword?: string(name='ClientPassword', position='Query'),
  clientUsername?: string(name='ClientUsername', position='Query'),
  description?: string(name='Description', position='Query'),
  gbId?: string(name='GbId', position='Query'),
  id: string(name='Id', position='Query'),
  ip?: string(name='Ip', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: long(name='Port', position='Query'),
}

model ModifyParentPlatformResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParentPlatformResponseBody(name='body'),
}

async function modifyParentPlatform(request: ModifyParentPlatformRequest): ModifyParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPurchasedDeviceRequest {
  description?: string(name='Description', position='Query'),
  id: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  registerCode?: string(name='RegisterCode', position='Query'),
  subType?: string(name='SubType', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model ModifyPurchasedDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyPurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPurchasedDeviceResponseBody(name='body'),
}

async function modifyPurchasedDevice(request: ModifyPurchasedDeviceRequest): ModifyPurchasedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPurchasedDevice', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTemplateRequest {
  callback?: string(name='Callback', position='Query'),
  description?: string(name='Description', position='Query'),
  fileFormat?: string(name='FileFormat', position='Query'),
  flv?: string(name='Flv', position='Query'),
  hlsM3u8?: string(name='HlsM3u8', position='Query'),
  hlsTs?: string(name='HlsTs', position='Query'),
  id: string(name='Id', position='Query'),
  interval?: long(name='Interval', position='Query'),
  jpgOnDemand?: string(name='JpgOnDemand', position='Query'),
  jpgOverwrite?: string(name='JpgOverwrite', position='Query'),
  jpgSequence?: string(name='JpgSequence', position='Query'),
  mp4?: string(name='Mp4', position='Query'),
  name?: string(name='Name', position='Query'),
  ossBucket?: string(name='OssBucket', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', position='Query'),
  ossFilePrefix?: string(name='OssFilePrefix', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  retention?: long(name='Retention', position='Query'),
  transConfigsJSON?: string(name='TransConfigsJSON', position='Query'),
  trigger?: string(name='Trigger', position='Query'),
}

model ModifyTemplateResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTemplateResponseBody(name='body'),
}

async function modifyTemplate(request: ModifyTemplateRequest): ModifyTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTemplate', 'POST', '/', 'json', false, 'json', request);
}

model OpenVsServiceRequest {
}

model OpenVsServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenVsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenVsServiceResponseBody(name='body'),
}

async function openVsService(request: OpenVsServiceRequest): OpenVsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenVsService', 'POST', '/', 'json', false, 'json', request);
}

model OperateRenderingDevicesRequest {
  instanceIds: string(name='InstanceIds', position='Query'),
  operation: string(name='Operation', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  podId?: string(name='PodId', position='Query'),
}

model OperateRenderingDevicesResponseBody = {
  failedIds?: [ string ](name='FailedIds'),
  requestId?: string(name='RequestId'),
}

model OperateRenderingDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: OperateRenderingDevicesResponseBody(name='body'),
}

async function operateRenderingDevices(request: OperateRenderingDevicesRequest): OperateRenderingDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateRenderingDevices', 'POST', '/', 'json', false, 'json', request);
}

model PrepareUploadRequest {
  bucketName: string(name='BucketName', position='Query'),
  clientIp?: string(name='ClientIp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model PrepareUploadResponseBody = {
  bucketName?: string(name='BucketName'),
  endpoint?: string(name='Endpoint'),
  requestId?: string(name='RequestId'),
}

model PrepareUploadResponse = {
  headers: map[string]string(name='headers'),
  body: PrepareUploadResponseBody(name='body'),
}

async function prepareUpload(request: PrepareUploadRequest): PrepareUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PrepareUpload', 'POST', '/', 'json', false, 'json', request);
}

model PutBucketRequest {
  bucketAcl?: string(name='BucketAcl', position='Query'),
  bucketName: string(name='BucketName', position='Query'),
  comment?: string(name='Comment', position='Query'),
  dataRedundancyType?: string(name='DataRedundancyType', position='Query'),
  dispatcherType?: string(name='DispatcherType', position='Query'),
  endpoint?: string(name='Endpoint', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  storageClass?: string(name='StorageClass', position='Query'),
}

model PutBucketResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutBucketResponse = {
  headers: map[string]string(name='headers'),
  body: PutBucketResponseBody(name='body'),
}

async function putBucket(request: PutBucketRequest): PutBucketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutBucket', 'POST', '/', 'json', false, 'json', request);
}

model ResetRenderingDevicesRequest {
  imageId?: string(name='ImageId', position='Query'),
  instanceIds: string(name='InstanceIds', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  podId?: string(name='PodId', position='Query'),
}

model ResetRenderingDevicesResponseBody = {
  failedIds?: [ string ](name='FailedIds'),
  requestId?: string(name='RequestId'),
}

model ResetRenderingDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ResetRenderingDevicesResponseBody(name='body'),
}

async function resetRenderingDevices(request: ResetRenderingDevicesRequest): ResetRenderingDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetRenderingDevices', 'POST', '/', 'json', false, 'json', request);
}

model ResumeVsStreamRequest {
  appName: string(name='AppName', position='Query'),
  controlStreamAction?: string(name='ControlStreamAction', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  liveStreamType: string(name='LiveStreamType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model ResumeVsStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResumeVsStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeVsStreamResponseBody(name='body'),
}

async function resumeVsStream(request: ResumeVsStreamRequest): ResumeVsStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeVsStream', 'POST', '/', 'json', false, 'json', request);
}

model SetPresetRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  presetId: string(name='PresetId', position='Query'),
}

model SetPresetResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model SetPresetResponse = {
  headers: map[string]string(name='headers'),
  body: SetPresetResponseBody(name='body'),
}

async function setPreset(request: SetPresetRequest): SetPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPreset', 'POST', '/', 'json', false, 'json', request);
}

model SetVsDomainCertificateRequest {
  certName?: string(name='CertName', position='Query'),
  certType?: string(name='CertType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  forceSet?: string(name='ForceSet', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  SSLPri?: string(name='SSLPri', position='Query'),
  SSLProtocol: string(name='SSLProtocol', position='Query'),
  SSLPub?: string(name='SSLPub', position='Query'),
}

model SetVsDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetVsDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetVsDomainCertificateResponseBody(name='body'),
}

async function setVsDomainCertificate(request: SetVsDomainCertificateRequest): SetVsDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetVsDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetVsStreamsNotifyUrlConfigRequest {
  authKey?: string(name='AuthKey', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  notifyUrl: string(name='NotifyUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetVsStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetVsStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function setVsStreamsNotifyUrlConfig(request: SetVsStreamsNotifyUrlConfigRequest): SetVsStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetVsStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model StartDeviceRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StartDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StartDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: StartDeviceResponseBody(name='body'),
}

async function startDevice(request: StartDeviceRequest): StartDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDevice', 'POST', '/', 'json', false, 'json', request);
}

model StartParentPlatformRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StartParentPlatformResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StartParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: StartParentPlatformResponseBody(name='body'),
}

async function startParentPlatform(request: StartParentPlatformRequest): StartParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model StartRecordStreamRequest {
  app?: string(name='App', position='Query'),
  id?: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain?: string(name='PlayDomain', position='Query'),
}

model StartRecordStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartRecordStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StartRecordStreamResponseBody(name='body'),
}

async function startRecordStream(request: StartRecordStreamRequest): StartRecordStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRecordStream', 'POST', '/', 'json', false, 'json', request);
}

model StartStreamRequest {
  endTime?: long(name='EndTime', position='Query'),
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model StartStreamResponseBody = {
  id?: string(name='Id'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model StartStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StartStreamResponseBody(name='body'),
}

async function startStream(request: StartStreamRequest): StartStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartStream', 'POST', '/', 'json', false, 'json', request);
}

model StartTransferStreamRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  transcode?: string(name='Transcode', position='Query'),
  url: string(name='Url', position='Query'),
}

model StartTransferStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartTransferStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StartTransferStreamResponseBody(name='body'),
}

async function startTransferStream(request: StartTransferStreamRequest): StartTransferStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTransferStream', 'POST', '/', 'json', false, 'json', request);
}

model StopAdjustRequest {
  focus?: boolean(name='Focus', position='Query'),
  id: string(name='Id', position='Query'),
  iris?: boolean(name='Iris', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StopAdjustResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopAdjustResponse = {
  headers: map[string]string(name='headers'),
  body: StopAdjustResponseBody(name='body'),
}

async function stopAdjust(request: StopAdjustRequest): StopAdjustResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAdjust', 'POST', '/', 'json', false, 'json', request);
}

model StopDeviceRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model StopDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: StopDeviceResponseBody(name='body'),
}

async function stopDevice(request: StopDeviceRequest): StopDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDevice', 'POST', '/', 'json', false, 'json', request);
}

model StopMoveRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pan?: boolean(name='Pan', position='Query'),
  tilt?: boolean(name='Tilt', position='Query'),
  zoom?: boolean(name='Zoom', position='Query'),
}

model StopMoveResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopMoveResponse = {
  headers: map[string]string(name='headers'),
  body: StopMoveResponseBody(name='body'),
}

async function stopMove(request: StopMoveRequest): StopMoveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMove', 'POST', '/', 'json', false, 'json', request);
}

model StopParentPlatformRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StopParentPlatformResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: StopParentPlatformResponseBody(name='body'),
}

async function stopParentPlatform(request: StopParentPlatformRequest): StopParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model StopRecordStreamRequest {
  app?: string(name='App', position='Query'),
  id?: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain?: string(name='PlayDomain', position='Query'),
}

model StopRecordStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopRecordStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StopRecordStreamResponseBody(name='body'),
}

async function stopRecordStream(request: StopRecordStreamRequest): StopRecordStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRecordStream', 'POST', '/', 'json', false, 'json', request);
}

model StopStreamRequest {
  id: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model StopStreamResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StopStreamResponseBody(name='body'),
}

async function stopStream(request: StopStreamRequest): StopStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopStream', 'POST', '/', 'json', false, 'json', request);
}

model StopTransferStreamRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  transcode?: string(name='Transcode', position='Query'),
}

model StopTransferStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopTransferStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StopTransferStreamResponseBody(name='body'),
}

async function stopTransferStream(request: StopTransferStreamRequest): StopTransferStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTransferStream', 'POST', '/', 'json', false, 'json', request);
}

model SyncCatalogsRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SyncCatalogsResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model SyncCatalogsResponse = {
  headers: map[string]string(name='headers'),
  body: SyncCatalogsResponseBody(name='body'),
}

async function syncCatalogs(request: SyncCatalogsRequest): SyncCatalogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncCatalogs', 'POST', '/', 'json', false, 'json', request);
}

model SyncDeviceChannelsRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SyncDeviceChannelsResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model SyncDeviceChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: SyncDeviceChannelsResponseBody(name='body'),
}

async function syncDeviceChannels(request: SyncDeviceChannelsRequest): SyncDeviceChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncDeviceChannels', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDirectoryRequest {
  deviceId: string(name='DeviceId', position='Query'),
  directoryId: string(name='DirectoryId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UnbindDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDirectoryResponseBody(name='body'),
}

async function unbindDirectory(request: UnbindDirectoryRequest): UnbindDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDirectory', 'POST', '/', 'json', false, 'json', request);
}

model UnbindParentPlatformDeviceRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentPlatformId: string(name='ParentPlatformId', position='Query'),
}

model UnbindParentPlatformDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindParentPlatformDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindParentPlatformDeviceResponseBody(name='body'),
}

async function unbindParentPlatformDevice(request: UnbindParentPlatformDeviceRequest): UnbindParentPlatformDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindParentPlatformDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnbindPurchasedDeviceRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UnbindPurchasedDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindPurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindPurchasedDeviceResponseBody(name='body'),
}

async function unbindPurchasedDevice(request: UnbindPurchasedDeviceRequest): UnbindPurchasedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindPurchasedDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnbindTemplateRequest {
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  templateId?: string(name='TemplateId', position='Query'),
  templateType?: string(name='TemplateType', position='Query'),
}

model UnbindTemplateResponseBody = {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
  templateType?: string(name='TemplateType'),
}

model UnbindTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindTemplateResponseBody(name='body'),
}

async function unbindTemplate(request: UnbindTemplateRequest): UnbindTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UnlockDeviceRequest {
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UnlockDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model UnlockDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockDeviceResponseBody(name='body'),
}

async function unlockDevice(request: UnlockDeviceRequest): UnlockDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockDevice', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAIConfigRequest {
  captureInterval?: int32(name='CaptureInterval', position='Query'),
  configId: string(name='ConfigId', position='Query'),
  configs?: string(name='Configs', position='Query'),
  description?: string(name='Description', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  features?: string(name='Features', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
}

model UpdateAIConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAIConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAIConfigResponseBody(name='body'),
}

async function updateAIConfig(request: UpdateAIConfigRequest): UpdateAIConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAIConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBucketInfoRequest {
  bucketName: string(name='BucketName', position='Query'),
  comment?: string(name='Comment', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UpdateBucketInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBucketInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBucketInfoResponseBody(name='body'),
}

async function updateBucketInfo(request: UpdateBucketInfoRequest): UpdateBucketInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBucketInfo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  description?: string(name='Description', position='Query'),
  effectiveTime?: string(name='EffectiveTime', position='Query'),
  internalPorts?: string(name='InternalPorts', position='Query'),
  maintainTime?: string(name='MaintainTime', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
}

model UpdateClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateClusterResponseBody(name='body'),
}

async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRenderingDeviceSpecRequest {
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: long(name='AutoRenewPeriod', position='Query'),
  description?: string(name='Description', position='Query'),
  effectiveTime?: boolean(name='EffectiveTime', position='Query'),
  instanceIds: string(name='InstanceIds', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  specification?: string(name='Specification', position='Query'),
}

model UpdateRenderingDeviceSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateRenderingDeviceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRenderingDeviceSpecResponseBody(name='body'),
}

async function updateRenderingDeviceSpec(request: UpdateRenderingDeviceSpecRequest): UpdateRenderingDeviceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRenderingDeviceSpec', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVsPullStreamInfoConfigRequest {
  always?: string(name='Always', position='Query'),
  appName: string(name='AppName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceUrl: string(name='SourceUrl', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  streamName: string(name='StreamName', position='Query'),
}

model UpdateVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVsPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVsPullStreamInfoConfigResponseBody(name='body'),
}

async function updateVsPullStreamInfoConfig(request: UpdateVsPullStreamInfoConfigRequest): UpdateVsPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVsPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeRenderingDevicesHostOSRequest {
  instanceIds: string(name='InstanceIds', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  romName: string(name='RomName', position='Query'),
  romPath: string(name='RomPath', position='Query'),
  romVersion: string(name='RomVersion', position='Query'),
}

model UpgradeRenderingDevicesHostOSResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeRenderingDevicesHostOSResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeRenderingDevicesHostOSResponseBody(name='body'),
}

async function upgradeRenderingDevicesHostOS(request: UpgradeRenderingDevicesHostOSRequest): UpgradeRenderingDevicesHostOSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeRenderingDevicesHostOS', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeRenderingDevicesImageRequest {
  imageId: string(name='ImageId', position='Query'),
  instanceIds: string(name='InstanceIds', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UpgradeRenderingDevicesImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeRenderingDevicesImageResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeRenderingDevicesImageResponseBody(name='body'),
}

async function upgradeRenderingDevicesImage(request: UpgradeRenderingDevicesImageRequest): UpgradeRenderingDevicesImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeRenderingDevicesImage', 'POST', '/', 'json', false, 'json', request);
}

model UploadDeviceRecordRequest {
  deviceId: string(name='DeviceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  searchCriteria: string(name='SearchCriteria', position='Query'),
  streamId?: string(name='StreamId', position='Query'),
  uploadId?: string(name='UploadId', position='Query'),
  uploadMode: string(name='UploadMode', position='Query'),
  uploadParams: string(name='UploadParams', position='Query'),
  uploadType: string(name='UploadType', position='Query'),
}

model UploadDeviceRecordResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model UploadDeviceRecordResponse = {
  headers: map[string]string(name='headers'),
  body: UploadDeviceRecordResponseBody(name='body'),
}

async function uploadDeviceRecord(request: UploadDeviceRecordRequest): UploadDeviceRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadDeviceRecord', 'POST', '/', 'json', false, 'json', request);
}

