/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'vs';
  @version = '2018-12-12';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddVsPullStreamInfoConfigRequest {
  always?: string(name='Always', position='Query'),
  appName: string(name='AppName', description='This parameter is required.', example='xxxApp', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  endTime?: string(name='EndTime', example='2017-08-28T09:30:30Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceUrl: string(name='SourceUrl', description='This parameter is required.', example='up.******.com.cn', position='Query'),
  startTime?: string(name='StartTime', example='2017-08-28T07:30:30Z', position='Query'),
  streamName: string(name='StreamName', description='This parameter is required.', example='xxxStream', position='Query'),
}

model AddVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId', example='3CB843A9-DD34-4881-B8D6-B0D539D111E4'),
}

model AddVsPullStreamInfoConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddVsPullStreamInfoConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddVsPullStreamInfoConfig  AddVsPullStreamInfoConfigRequest
  * @return AddVsPullStreamInfoConfigResponse
 */
async function addVsPullStreamInfoConfig(request: AddVsPullStreamInfoConfigRequest): AddVsPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVsPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindDirectoriesRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  directoryId: string(name='DirectoryId', description='This parameter is required.', example='399*****488-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchBindDirectoriesResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
      directoryId?: string(name='DirectoryId', example='399*****488-cn-qingdao'),
      error?: string(name='Error', example='An error occurred while processing your request.'),
    }
  ](name='Results'),
}

model BatchBindDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchBindDirectoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchBindDirectories  BatchBindDirectoriesRequest
  * @return BatchBindDirectoriesResponse
 */
async function batchBindDirectories(request: BatchBindDirectoriesRequest): BatchBindDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindDirectories', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindParentPlatformDevicesRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentPlatformId: string(name='ParentPlatformId', description='This parameter is required.', example='361*****212-cn-qingdao', position='Query'),
}

model BatchBindParentPlatformDevicesResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
      error?: string(name='Error', example='some error'),
      parentPlatformId?: string(name='ParentPlatformId', example='361*****212-cn-qingdao'),
    }
  ](name='Results'),
}

model BatchBindParentPlatformDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchBindParentPlatformDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchBindParentPlatformDevices  BatchBindParentPlatformDevicesRequest
  * @return BatchBindParentPlatformDevicesResponse
 */
async function batchBindParentPlatformDevices(request: BatchBindParentPlatformDevicesRequest): BatchBindParentPlatformDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindParentPlatformDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindPurchasedDevicesRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='348*****174-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region: string(name='Region', description='This parameter is required.', example='cn-qingdao', position='Query'),
}

model BatchBindPurchasedDevicesResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
      error?: string(name='Error', example='some error'),
      groupId?: string(name='GroupId', example='238*****380-cn-qingdao'),
      region?: string(name='Region', example='cn-qingdao'),
    }
  ](name='Results'),
}

model BatchBindPurchasedDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchBindPurchasedDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchBindPurchasedDevices  BatchBindPurchasedDevicesRequest
  * @return BatchBindPurchasedDevicesResponse
 */
async function batchBindPurchasedDevices(request: BatchBindPurchasedDevicesRequest): BatchBindPurchasedDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindPurchasedDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindTemplateRequest {
  applyAll?: boolean(name='ApplyAll', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='323*****994-cn-qingdao', position='Query'),
  instanceType: string(name='InstanceType', description='This parameter is required.', example='group', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replace?: boolean(name='Replace', example='false', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='323*****998-cn-qingdao', position='Query'),
}

model BatchBindTemplateResponseBody = {
  bindings?: [ 
    {
      error?: string(name='Error', example='some error'),
      instanceId?: string(name='InstanceId', example='323*****994-cn-qingdao'),
      instanceType?: string(name='InstanceType', example='group'),
      templateId?: string(name='TemplateId', example='323*****998-cn-qingdao'),
    }
  ](name='Bindings'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model BatchBindTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchBindTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchBindTemplate  BatchBindTemplateRequest
  * @return BatchBindTemplateResponse
 */
async function batchBindTemplate(request: BatchBindTemplateRequest): BatchBindTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindTemplate', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindTemplatesRequest {
  applyAll?: boolean(name='ApplyAll', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='323*****994-cn-qingdao', position='Query'),
  instanceType: string(name='InstanceType', description='This parameter is required.', example='stream', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replace?: boolean(name='Replace', example='true', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='323*****998-cn-qingdao', position='Query'),
  templateType?: string(name='TemplateType', example='timeshift', position='Query'),
}

model BatchBindTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='20D0DFCE-5DB7-5D83-BD82-8482F2327636'),
  results?: [ 
    {
      error?: string(name='Error', example='some error'),
      instanceId?: string(name='InstanceId', example='323*****994-cn-qingdao'),
      instanceType?: string(name='InstanceType', example='group'),
      templateId?: string(name='TemplateId', example='323*****998-cn-qingdao'),
    }
  ](name='Results'),
}

model BatchBindTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchBindTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchBindTemplates  BatchBindTemplatesRequest
  * @return BatchBindTemplatesResponse
 */
async function batchBindTemplates(request: BatchBindTemplatesRequest): BatchBindTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindTemplates', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteDevicesRequest {
  id: string(name='Id', description='This parameter is required.', example='32388****39092996', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchDeleteDevicesResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      error?: string(name='Error', example='Device not found'),
      id?: string(name='Id', example='323884****9092996'),
    }
  ](name='Results'),
}

model BatchDeleteDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchDeleteDevices  BatchDeleteDevicesRequest
  * @return BatchDeleteDevicesResponse
 */
async function batchDeleteDevices(request: BatchDeleteDevicesRequest): BatchDeleteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteVsDomainConfigsRequest {
  domainNames: string(name='DomainNames', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  functionNames: string(name='FunctionNames', description='This parameter is required.', example='https_force', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchDeleteVsDomainConfigsResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model BatchDeleteVsDomainConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteVsDomainConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchDeleteVsDomainConfigs  BatchDeleteVsDomainConfigsRequest
  * @return BatchDeleteVsDomainConfigsResponse
 */
async function batchDeleteVsDomainConfigs(request: BatchDeleteVsDomainConfigsRequest): BatchDeleteVsDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteVsDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchForbidVsStreamRequest {
  channel: string(name='Channel', description='This parameter is required.', example='live/stream1,live/stream2', position='Query'),
  controlStreamAction?: string(name='ControlStreamAction', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  liveStreamType: string(name='LiveStreamType', description='This parameter is required.', example='publisher', position='Query'),
  oneshot?: string(name='Oneshot', example='yes', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resumeTime?: string(name='ResumeTime', example='2015-12-01T17:37:00Z', position='Query'),
}

model BatchForbidVsStreamResponseBody = {
  forbidResult?: {
    forbidResultInfo?: [ 
    {
      channels?: {
        channel?: [ string ](name='Channel')
      }(name='Channels'),
      count?: int32(name='Count', example='2'),
      detail?: string(name='Detail', example='ok'),
      result?: string(name='Result', example='success'),
    }
  ](name='ForbidResultInfo')
  }(name='ForbidResult'),
  requestId?: string(name='RequestId', example='B058D71B-76EA-5DF6-ACAF-A617C1E7937F'),
}

model BatchForbidVsStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchForbidVsStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchForbidVsStream  BatchForbidVsStreamRequest
  * @return BatchForbidVsStreamResponse
 */
async function batchForbidVsStream(request: BatchForbidVsStreamRequest): BatchForbidVsStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchForbidVsStream', 'POST', '/', 'json', false, 'json', request);
}

model BatchResumeVsStreamRequest {
  channel: string(name='Channel', description='This parameter is required.', example='live/stream1', position='Query'),
  controlStreamAction?: string(name='ControlStreamAction', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  liveStreamType: string(name='LiveStreamType', description='This parameter is required.', example='publisher', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchResumeVsStreamResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  resumeResult?: {
    resumeResultInfo?: [ 
    {
      channels?: {
        channel?: [ string ](name='Channel')
      }(name='Channels'),
      count?: int32(name='Count', example='1'),
      detail?: string(name='Detail', example='ok'),
      result?: string(name='Result', example='success'),
    }
  ](name='ResumeResultInfo')
  }(name='ResumeResult'),
}

model BatchResumeVsStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchResumeVsStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchResumeVsStream  BatchResumeVsStreamRequest
  * @return BatchResumeVsStreamResponse
 */
async function batchResumeVsStream(request: BatchResumeVsStreamRequest): BatchResumeVsStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchResumeVsStream', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetVsDomainConfigsRequest {
  domainNames: string(name='DomainNames', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  functions: string(name='Functions', description='This parameter is required.', example='[{“functionArgs”:[{“argName”:”domain_name”,”argValue”:”api.hellodtworld.com”}],”functionName”:”set_req_host_header”}]', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchSetVsDomainConfigsResponseBody = {
  requestId?: string(name='RequestId', example='9BEC5E85-C76B-56EF-A922-860EFDB8B64B'),
}

model BatchSetVsDomainConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchSetVsDomainConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchSetVsDomainConfigs  BatchSetVsDomainConfigsRequest
  * @return BatchSetVsDomainConfigsResponse
 */
async function batchSetVsDomainConfigs(request: BatchSetVsDomainConfigsRequest): BatchSetVsDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetVsDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchStartDevicesRequest {
  id: string(name='Id', description='This parameter is required.', example='32388487****92996-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchStartDevicesResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      id?: string(name='Id', example='32388487****92996-cn-qingdao'),
      streams?: [ 
        {
          error?: string(name='Error', example='Stream not found'),
          id?: string(name='Id', example='3238848****092997-cn-qingdao'),
          name?: string(name='Name', example='310101*****187542126'),
        }
      ](name='Streams'),
    }
  ](name='Results'),
}

model BatchStartDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchStartDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchStartDevices  BatchStartDevicesRequest
  * @return BatchStartDevicesResponse
 */
async function batchStartDevices(request: BatchStartDevicesRequest): BatchStartDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStartDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchStartStreamsRequest {
  id: string(name='Id', description='This parameter is required.', example='323*****997-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchStartStreamsResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      error?: string(name='Error', example='stream not found'),
      id?: string(name='Id', example='323*****997-cn-qingdao'),
      name?: string(name='Name', example='31000000*****0000002'),
    }
  ](name='Results'),
}

model BatchStartStreamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchStartStreamsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchStartStreams  BatchStartStreamsRequest
  * @return BatchStartStreamsResponse
 */
async function batchStartStreams(request: BatchStartStreamsRequest): BatchStartStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStartStreams', 'POST', '/', 'json', false, 'json', request);
}

model BatchStopDevicesRequest {
  id: string(name='Id', description='This parameter is required.', example='32388487****92996', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-10-14T23:00:00Z', position='Query'),
}

model BatchStopDevicesResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      id?: string(name='Id', example='32388487****92996'),
      streams?: [ 
        {
          error?: string(name='Error', example='Stream not found'),
          id?: string(name='Id', example='323884****9092997'),
          name?: string(name='Name', example='32388*****39092997'),
        }
      ](name='Streams'),
    }
  ](name='Results'),
}

model BatchStopDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchStopDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchStopDevices  BatchStopDevicesRequest
  * @return BatchStopDevicesResponse
 */
async function batchStopDevices(request: BatchStopDevicesRequest): BatchStopDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStopDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchStopStreamsRequest {
  id: string(name='Id', description='This parameter is required.', example='323*****997-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-12-10T10:00:00Z', position='Query'),
}

model BatchStopStreamsResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      error?: string(name='Error', example='stream not found'),
      id?: string(name='Id', example='323*****997-cn-qingdao'),
      name?: string(name='Name', example='3100000*****00000002'),
    }
  ](name='Results'),
}

model BatchStopStreamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchStopStreamsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchStopStreams  BatchStopStreamsRequest
  * @return BatchStopStreamsResponse
 */
async function batchStopStreams(request: BatchStopStreamsRequest): BatchStopStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStopStreams', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindDirectoriesRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  directoryId: string(name='DirectoryId', description='This parameter is required.', example='399*****488-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchUnbindDirectoriesResponseBody = {
  requestId?: string(name='RequestId', example='64DB7F34-11A8-45DC-A421-40ACF446282C'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
      directoryId?: string(name='DirectoryId', example='399*****488-cn-qingdao'),
      error?: string(name='Error', example='An error occurred while processing your request.'),
    }
  ](name='Results'),
}

model BatchUnbindDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUnbindDirectoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUnbindDirectories  BatchUnbindDirectoriesRequest
  * @return BatchUnbindDirectoriesResponse
 */
async function batchUnbindDirectories(request: BatchUnbindDirectoriesRequest): BatchUnbindDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindDirectories', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindParentPlatformDevicesRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentPlatformId: string(name='ParentPlatformId', description='This parameter is required.', example='361*****212-cn-qingdao', position='Query'),
}

model BatchUnbindParentPlatformDevicesResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
      error?: string(name='Error', example='some error'),
      parentPlatformId?: string(name='ParentPlatformId', example='361*****212-cn-qingdao'),
    }
  ](name='Results'),
}

model BatchUnbindParentPlatformDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUnbindParentPlatformDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUnbindParentPlatformDevices  BatchUnbindParentPlatformDevicesRequest
  * @return BatchUnbindParentPlatformDevicesResponse
 */
async function batchUnbindParentPlatformDevices(request: BatchUnbindParentPlatformDevicesRequest): BatchUnbindParentPlatformDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindParentPlatformDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindPurchasedDevicesRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BatchUnbindPurchasedDevicesResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
      error?: string(name='Error', example='some error'),
    }
  ](name='Results'),
}

model BatchUnbindPurchasedDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUnbindPurchasedDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUnbindPurchasedDevices  BatchUnbindPurchasedDevicesRequest
  * @return BatchUnbindPurchasedDevicesResponse
 */
async function batchUnbindPurchasedDevices(request: BatchUnbindPurchasedDevicesRequest): BatchUnbindPurchasedDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindPurchasedDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindTemplateRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='323*****994-cn-qingdao', position='Query'),
  instanceType: string(name='InstanceType', description='This parameter is required.', example='group', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  templateId?: string(name='TemplateId', example='323*****998-cn-qingdao', position='Query'),
  templateType?: string(name='TemplateType', example='record', position='Query'),
}

model BatchUnbindTemplateResponseBody = {
  bindings?: [ 
    {
      error?: string(name='Error', example='some error'),
      instanceId?: string(name='InstanceId', example='323*****994-cn-qingdao'),
      instanceType?: string(name='InstanceType', example='group'),
      templateId?: string(name='TemplateId', example='323*****998-cn-qingdao'),
    }
  ](name='Bindings'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model BatchUnbindTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUnbindTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUnbindTemplate  BatchUnbindTemplateRequest
  * @return BatchUnbindTemplateResponse
 */
async function batchUnbindTemplate(request: BatchUnbindTemplateRequest): BatchUnbindTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindTemplate', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindTemplatesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='400941290881239938-cn-beijing', position='Query'),
  instanceType: string(name='InstanceType', description='This parameter is required.', example='stream', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  templateId?: string(name='TemplateId', example='323*****998-cn-qingdao', position='Query'),
  templateType?: string(name='TemplateType', example='record', position='Query'),
}

model BatchUnbindTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='90B377DF-C874-5BBD-B957-42C4C06AFECE'),
  results?: [ 
    {
      error?: string(name='Error', example='some error'),
      instanceId?: string(name='InstanceId', example='323*****994-cn-qingdao'),
      instanceType?: string(name='InstanceType', example='group'),
      templateId?: string(name='TemplateId', example='323*****998-cn-qingdao'),
      templateType?: string(name='TemplateType', example='snapshot'),
    }
  ](name='Results'),
}

model BatchUnbindTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUnbindTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUnbindTemplates  BatchUnbindTemplatesRequest
  * @return BatchUnbindTemplatesResponse
 */
async function batchUnbindTemplates(request: BatchUnbindTemplatesRequest): BatchUnbindTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindTemplates', 'POST', '/', 'json', false, 'json', request);
}

model BindDirectoryRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  directoryId: string(name='DirectoryId', description='This parameter is required.', example='399*****488-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model BindDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='3CB843A9-DD34-4881-B8D6-B0D539D111E4'),
}

model BindDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindDirectory  BindDirectoryRequest
  * @return BindDirectoryResponse
 */
async function bindDirectory(request: BindDirectoryRequest): BindDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDirectory', 'POST', '/', 'json', false, 'json', request);
}

model BindParentPlatformDeviceRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentPlatformId: string(name='ParentPlatformId', description='This parameter is required.', example='361*****212-cn-qingdao', position='Query'),
}

model BindParentPlatformDeviceResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model BindParentPlatformDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindParentPlatformDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindParentPlatformDevice  BindParentPlatformDeviceRequest
  * @return BindParentPlatformDeviceResponse
 */
async function bindParentPlatformDevice(request: BindParentPlatformDeviceRequest): BindParentPlatformDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindParentPlatformDevice', 'POST', '/', 'json', false, 'json', request);
}

model BindPurchasedDeviceRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='3939*****6580539-cn-qingdao', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='3484*****8732174-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region: string(name='Region', description='This parameter is required.', example='cn-qingdao', position='Query'),
}

model BindPurchasedDeviceResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model BindPurchasedDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindPurchasedDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindPurchasedDevice  BindPurchasedDeviceRequest
  * @return BindPurchasedDeviceResponse
 */
async function bindPurchasedDevice(request: BindPurchasedDeviceRequest): BindPurchasedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPurchasedDevice', 'POST', '/', 'json', false, 'json', request);
}

model BindTemplateRequest {
  applyAll?: boolean(name='ApplyAll', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='323*****994-cn-qingdao', position='Query'),
  instanceType: string(name='InstanceType', description='This parameter is required.', example='group', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replace?: boolean(name='Replace', example='false', position='Query'),
  templateId: string(name='TemplateId', description='This parameter is required.', example='323*****998-cn-qingdao', position='Query'),
  templateType?: string(name='TemplateType', example='record', position='Query'),
}

model BindTemplateResponseBody = {
  instanceId?: string(name='InstanceId', example='323*****994-cn-qingdao'),
  instanceType?: string(name='InstanceType', example='group'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  templateId?: string(name='TemplateId', example='323*****998-cn-qingdao'),
}

model BindTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindTemplate  BindTemplateRequest
  * @return BindTemplateResponse
 */
async function bindTemplate(request: BindTemplateRequest): BindTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ContinuousAdjustRequest {
  focus?: string(name='Focus', example='0.5', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  iris?: string(name='Iris', example='0.5', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ContinuousAdjustResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ContinuousAdjustResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContinuousAdjustResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ContinuousAdjust  ContinuousAdjustRequest
  * @return ContinuousAdjustResponse
 */
async function continuousAdjust(request: ContinuousAdjustRequest): ContinuousAdjustResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinuousAdjust', 'POST', '/', 'json', false, 'json', request);
}

model ContinuousMoveRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pan?: string(name='Pan', example='0.5', position='Query'),
  tilt?: string(name='Tilt', example='0.5', position='Query'),
  zoom?: string(name='Zoom', example='0.5', position='Query'),
}

model ContinuousMoveResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ContinuousMoveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContinuousMoveResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ContinuousMove  ContinuousMoveRequest
  * @return ContinuousMoveResponse
 */
async function continuousMove(request: ContinuousMoveRequest): ContinuousMoveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinuousMove', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceRequest {
  alarmMethod?: string(name='AlarmMethod', example='0', position='Query'),
  autoDirectory?: boolean(name='AutoDirectory', position='Query'),
  autoPos?: boolean(name='AutoPos', example='false', position='Query'),
  autoStart?: boolean(name='AutoStart', example='false', position='Query'),
  description?: string(name='Description', position='Query'),
  directoryId?: string(name='DirectoryId', example='399*****488-cn-qingdao', position='Query'),
  dsn?: string(name='Dsn', example='7D0*****4C0', position='Query'),
  gbId?: string(name='GbId', example='31000000****00000002', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='348*****174-cn-qingdao', position='Query'),
  ip?: string(name='Ip', example='10.10.10.10', position='Query'),
  latitude?: string(name='Latitude', example='119.20', position='Query'),
  longitude?: string(name='Longitude', example='45.00', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  params?: string(name='Params', example='{}', position='Query'),
  parentId?: string(name='ParentId', example='399*****774-cn-qingdao', position='Query'),
  password?: string(name='Password', example='admin', position='Query'),
  port?: long(name='Port', example='8080', position='Query'),
  posInterval?: long(name='PosInterval', example='300', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='ipc', position='Query'),
  url?: string(name='Url', example='rtmp://xxx/xxx', position='Query'),
  username?: string(name='Username', example='admin', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model CreateDeviceResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model CreateDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDevice  CreateDeviceRequest
  * @return CreateDeviceResponse
 */
async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevice', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceAlarmRequest {
  alarm: int32(name='Alarm', description='This parameter is required.', example='1', position='Query'),
  channelId: int32(name='ChannelId', description='This parameter is required.', example='12', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1632314789000', position='Query'),
  expire?: long(name='Expire', example='3600', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  objectType: int32(name='ObjectType', description='This parameter is required.', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1632121707000', position='Query'),
  subAlarm: int32(name='SubAlarm', description='This parameter is required.', position='Query'),
}

model CreateDeviceAlarmResponseBody = {
  alarmDelay?: long(name='AlarmDelay', example='60'),
  alarmId?: string(name='AlarmId', example='0hyNgTdgv2D000195842'),
  expire?: long(name='Expire', example='3600'),
  requestId?: string(name='RequestId', example='76E11E6A-4441-51C9-AF60-D354362257A7'),
  url?: string(name='Url', example='rtmp://demo.aliyundoc.com/live/310101*****7542007?auth_key=1639130258-0-0-b2b04fe85ece6*****a6b1a42bc7e'),
}

model CreateDeviceAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeviceAlarmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDeviceAlarm  CreateDeviceAlarmRequest
  * @return CreateDeviceAlarmResponse
 */
async function createDeviceAlarm(request: CreateDeviceAlarmRequest): CreateDeviceAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceAlarm', 'POST', '/', 'json', false, 'json', request);
}

model CreateDirectoryRequest {
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='348*****174-cn-qingdao', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentId: string(name='ParentId', description='This parameter is required.', example='399*****774-cn-qingdao', position='Query'),
}

model CreateDirectoryResponseBody = {
  id?: string(name='Id', example='399*****488-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model CreateDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDirectory  CreateDirectoryRequest
  * @return CreateDirectoryResponse
 */
async function createDirectory(request: CreateDirectoryRequest): CreateDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDirectory', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupRequest {
  app?: string(name='App', example='live', position='Query'),
  callback?: string(name='Callback', example='http://example.com/callback', position='Query'),
  description?: string(name='Description', position='Query'),
  inProtocol: string(name='InProtocol', description='This parameter is required.', example='rtmp', position='Query'),
  lazyPull?: boolean(name='LazyPull', example='false', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  outProtocol?: string(name='OutProtocol', example='flv,rtmp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain?: string(name='PlayDomain', example='demo.aliyundoc.com', position='Query'),
  pushDomain?: string(name='PushDomain', example='example.aliyundoc.com', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
}

model CreateGroupResponseBody = {
  gbId?: string(name='GbId', example='31000000****00000001'),
  gbIp?: string(name='GbIp', example='10.10.10.10'),
  gbPort?: long(name='GbPort', example='5060'),
  id?: string(name='Id', example='33763****77224964-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model CreateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGroup  CreateGroupRequest
  * @return CreateGroupResponse
 */
async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateParentPlatformRequest {
  autoStart?: boolean(name='AutoStart', example='false', position='Query'),
  clientAuth?: boolean(name='ClientAuth', example='true', position='Query'),
  clientPassword?: string(name='ClientPassword', example='admin123', position='Query'),
  clientUsername?: string(name='ClientUsername', example='user01', position='Query'),
  description?: string(name='Description', position='Query'),
  gbId: string(name='GbId', description='This parameter is required.', example='31000*****2170123451', position='Query'),
  ip: string(name='Ip', description='This parameter is required.', example='10.10.10.10', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port: long(name='Port', description='This parameter is required.', example='5060', position='Query'),
  protocol?: string(name='Protocol', example='gb28181', position='Query'),
}

model CreateParentPlatformResponseBody = {
  id?: string(name='Id', example='359*****374-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model CreateParentPlatformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateParentPlatformResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateParentPlatform  CreateParentPlatformRequest
  * @return CreateParentPlatformResponse
 */
async function createParentPlatform(request: CreateParentPlatformRequest): CreateParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model CreateRenderingDataPackageRequest {
  category?: string(name='Category', position='Query'),
  description?: string(name='Description', example='testdescription', maxLength=64, position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model CreateRenderingDataPackageResponseBody = {
  dataPackageId?: string(name='DataPackageId', example='dp-9f8c57355d224ad7beaf95e145f22111'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model CreateRenderingDataPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRenderingDataPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRenderingDataPackage  CreateRenderingDataPackageRequest
  * @return CreateRenderingDataPackageResponse
 */
async function createRenderingDataPackage(request: CreateRenderingDataPackageRequest): CreateRenderingDataPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRenderingDataPackage', 'POST', '/', 'json', false, 'json', request);
}

model CreateRenderingInstanceRequest {
  autoRenew?: boolean(name='AutoRenew', example='true', position='Query'),
  clientInfo?: {
    clientIp?: string(name='ClientIp', example='172.21.128.110'),
  }(name='ClientInfo', shrink='json', position='Query'),
  instanceBillingCycle?: string(name='InstanceBillingCycle', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', example='PrePaid', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='95BandwidthByMonth', position='Query'),
  internetMaxBandwidth?: long(name='InternetMaxBandwidth', example='10', position='Query'),
  period?: string(name='Period', example='1', position='Query'),
  renderingSpec: string(name='RenderingSpec', description='This parameter is required.', example='crs.cp.l1', position='Query'),
  storageSize?: string(name='StorageSize', position='Query'),
}

model CreateRenderingInstanceResponseBody = {
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111'),
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model CreateRenderingInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRenderingInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRenderingInstance  CreateRenderingInstanceRequest
  * @return CreateRenderingInstanceResponse
 */
async function createRenderingInstance(request: CreateRenderingInstanceRequest): CreateRenderingInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRenderingInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateRenderingInstanceGatewayRequest {
  gatewayInstanceId: string(name='GatewayInstanceId', description='This parameter is required.', example='render-xxx', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model CreateRenderingInstanceGatewayResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model CreateRenderingInstanceGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRenderingInstanceGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRenderingInstanceGateway  CreateRenderingInstanceGatewayRequest
  * @return CreateRenderingInstanceGatewayResponse
 */
async function createRenderingInstanceGateway(request: CreateRenderingInstanceGatewayRequest): CreateRenderingInstanceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRenderingInstanceGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateStreamSnapshotRequest {
  id: string(name='Id', description='This parameter is required.', example='323*****997-cn-qingdao', position='Query'),
  location?: string(name='Location', example='device', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CreateStreamSnapshotResponseBody = {
  format?: string(name='Format', example='jpg'),
  height?: long(name='Height', example='720'),
  id?: string(name='Id', example='323*****997-cn-qingdao'),
  ossBucket?: string(name='OssBucket', example='examplebucket'),
  ossEndpoint?: string(name='OssEndpoint', example='oss-cn-qingdao.aliyuncs.com'),
  ossObject?: string(name='OssObject', example='photos/live/340200*****100049/ondemand-1639126601767.jpg'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  timestamp?: long(name='Timestamp', example='1639126601767'),
  url?: string(name='Url', example='http://examplebucket.oss-*****.aliyuncs.com/photos/live/340200*****100049/ondemand-1639126601767.jpg'),
  width?: long(name='Width', example='1280'),
}

model CreateStreamSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStreamSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateStreamSnapshot  CreateStreamSnapshotRequest
  * @return CreateStreamSnapshotResponse
 */
async function createStreamSnapshot(request: CreateStreamSnapshotRequest): CreateStreamSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStreamSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  callback?: string(name='Callback', example='http://example.com/callback', position='Query'),
  description?: string(name='Description', position='Query'),
  fileFormat?: string(name='FileFormat', example='hls', position='Query'),
  flv?: string(name='Flv', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  hlsM3u8?: string(name='HlsM3u8', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  hlsTs?: string(name='HlsTs', example='osspath/record/{StreamName}/{UnixTimestamp}_{Sequence}', position='Query'),
  interval?: long(name='Interval', example='3600', position='Query'),
  jpgOnDemand?: string(name='JpgOnDemand', example='osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}_ondemand.jpg', position='Query'),
  jpgOverwrite?: string(name='JpgOverwrite', example='osspath/snapshot/{AppName}/{StreamName}.jpg', position='Query'),
  jpgSequence?: string(name='JpgSequence', example='osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}.jpg', position='Query'),
  mp4?: string(name='Mp4', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  ossBucket?: string(name='OssBucket', example='bucketname', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', example='oss-cn-qingdao.aliyuncs.com', position='Query'),
  ossFilePrefix?: string(name='OssFilePrefix', example='oss-prefix', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', example='cn-qingdao', position='Query'),
  retention?: long(name='Retention', example='3', position='Query'),
  transConfigsJSON?: string(name='TransConfigsJSON', example='[{"Fps":25,"Gop":50,"Height":720,"VideoCodec":"h264","Width":1280,"Name":"sd","VideoBitrate":800}]', position='Query'),
  trigger?: string(name='Trigger', example='auto', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='record', position='Query'),
}

model CreateTemplateResponseBody = {
  id?: string(name='Id', example='399*****735-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model CreateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTemplate  CreateTemplateRequest
  * @return CreateTemplateResponse
 */
async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCloudAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb', position='Query'),
}

model DeleteCloudAppResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteCloudAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCloudAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCloudApp  DeleteCloudAppRequest
  * @return DeleteCloudAppResponse
 */
async function deleteCloudApp(request: DeleteCloudAppRequest): DeleteCloudAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCloudApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceRequest {
  id: string(name='Id', description='This parameter is required.', example='3238848****092996', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDevice  DeleteDeviceRequest
  * @return DeleteDeviceResponse
 */
async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDirectoryRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****174-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDirectory  DeleteDirectoryRequest
  * @return DeleteDirectoryResponse
 */
async function deleteDirectory(request: DeleteDirectoryRequest): DeleteDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFileRequest {
  fileId: string(name='FileId', description='This parameter is required.', example='f-167131acd45omat771813f7141d28db2f7', position='Query'),
}

model DeleteFileResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFile  DeleteFileRequest
  * @return DeleteFileResponse
 */
async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  id: string(name='Id', description='This parameter is required.', example='33763950751395843', position='Query'),
  ownerId?: long(name='OwnerId', example='123456', position='Query'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId', description='Request Id', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteGroup  DeleteGroupRequest
  * @return DeleteGroupResponse
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteParentPlatformRequest {
  id: string(name='Id', description='This parameter is required.', example='359*****374-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteParentPlatformResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteParentPlatformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteParentPlatformResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteParentPlatform  DeleteParentPlatformRequest
  * @return DeleteParentPlatformResponse
 */
async function deleteParentPlatform(request: DeleteParentPlatformRequest): DeleteParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model DeletePresetRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  presetId: string(name='PresetId', description='This parameter is required.', example='2', position='Query'),
}

model DeletePresetResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='F18FD685-B194-4489-9609-F80A9490A258'),
}

model DeletePresetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePresetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePreset  DeletePresetRequest
  * @return DeletePresetResponse
 */
async function deletePreset(request: DeletePresetRequest): DeletePresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePreset', 'POST', '/', 'json', false, 'json', request);
}

model DeletePublicKeyRequest {
  keyName: string(name='KeyName', description='This parameter is required.', example='appKey', position='Query'),
}

model DeletePublicKeyResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeletePublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePublicKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePublicKey  DeletePublicKeyRequest
  * @return DeletePublicKeyResponse
 */
async function deletePublicKey(request: DeletePublicKeyRequest): DeletePublicKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePublicKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRenderingInstanceConfigurationRequest {
  configuration?: [ 
    {
      attributeNames?: [ string ](name='AttributeNames'),
      moduleName: string(name='ModuleName', description='This parameter is required.', example='location'),
    }
  ](name='Configuration', shrink='json', position='Body'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model DeleteRenderingInstanceConfigurationResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteRenderingInstanceConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRenderingInstanceConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRenderingInstanceConfiguration  DeleteRenderingInstanceConfigurationRequest
  * @return DeleteRenderingInstanceConfigurationResponse
 */
async function deleteRenderingInstanceConfiguration(request: DeleteRenderingInstanceConfigurationRequest): DeleteRenderingInstanceConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRenderingInstanceConfiguration', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRenderingInstanceGatewayRequest {
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model DeleteRenderingInstanceGatewayResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteRenderingInstanceGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRenderingInstanceGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRenderingInstanceGateway  DeleteRenderingInstanceGatewayRequest
  * @return DeleteRenderingInstanceGatewayResponse
 */
async function deleteRenderingInstanceGateway(request: DeleteRenderingInstanceGatewayRequest): DeleteRenderingInstanceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRenderingInstanceGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRenderingInstanceSettingsRequest {
  attributeNames?: [ string ](name='AttributeNames', shrink='json', position='Query'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model DeleteRenderingInstanceSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteRenderingInstanceSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRenderingInstanceSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRenderingInstanceSettings  DeleteRenderingInstanceSettingsRequest
  * @return DeleteRenderingInstanceSettingsResponse
 */
async function deleteRenderingInstanceSettings(request: DeleteRenderingInstanceSettingsRequest): DeleteRenderingInstanceSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRenderingInstanceSettings', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  id: string(name='Id', description='This parameter is required.', example='323*****998-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTemplate  DeleteTemplateRequest
  * @return DeleteTemplateResponse
 */
async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVsPullStreamInfoConfigRequest {
  appName: string(name='AppName', description='This parameter is required.', example='xxxApp', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', description='This parameter is required.', example='xxxStream', position='Query'),
}

model DeleteVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DeleteVsPullStreamInfoConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVsPullStreamInfoConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVsPullStreamInfoConfig  DeleteVsPullStreamInfoConfigRequest
  * @return DeleteVsPullStreamInfoConfigResponse
 */
async function deleteVsPullStreamInfoConfig(request: DeleteVsPullStreamInfoConfigRequest): DeleteVsPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVsPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVsStreamsNotifyUrlConfigRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteVsStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId', example='4C747C97-7ECD-4C61-8A92-67AD806331FF'),
}

model DeleteVsStreamsNotifyUrlConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVsStreamsNotifyUrlConfig  DeleteVsStreamsNotifyUrlConfigRequest
  * @return DeleteVsStreamsNotifyUrlConfigResponse
 */
async function deleteVsStreamsNotifyUrlConfig(request: DeleteVsStreamsNotifyUrlConfigRequest): DeleteVsStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVsStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountStatRequest {
  id?: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeAccountStatResponseBody = {
  groupLimit?: long(name='GroupLimit', example='100'),
  groupNum?: long(name='GroupNum', example='6'),
  id?: string(name='Id', description='ID', example='3238848****092996'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  templateLimit?: long(name='TemplateLimit', example='20'),
  templateNum?: long(name='TemplateNum', example='10'),
}

model DescribeAccountStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountStatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccountStat  DescribeAccountStatRequest
  * @return DescribeAccountStatResponse
 */
async function describeAccountStat(request: DescribeAccountStatRequest): DescribeAccountStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountStat', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceRequest {
  id: string(name='Id', description='This parameter is required.', example='3238848****092996-cn-qingdao', position='Query'),
  includeDirectory?: boolean(name='IncludeDirectory', example='false', position='Query'),
  includeStats?: boolean(name='IncludeStats', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDeviceResponseBody = {
  alarmMethod?: string(name='AlarmMethod', example='5'),
  autoDirectory?: boolean(name='AutoDirectory'),
  autoPos?: boolean(name='AutoPos', example='false'),
  autoStart?: boolean(name='AutoStart', example='false'),
  channelSyncTime?: string(name='ChannelSyncTime', example='2019-02-28T17:01:17Z'),
  createdTime?: string(name='CreatedTime', example='2019-02-28T17:00:17Z'),
  description?: string(name='Description'),
  directory?: {
    createdTime?: string(name='CreatedTime', example='2019-02-28T17:00:17Z'),
    description?: string(name='Description'),
    groupId?: string(name='GroupId', example='3238848****092994-cn-qingdao'),
    id?: string(name='Id', example='3238848****092994-cn-qingdao'),
    name?: string(name='Name'),
    parentId?: string(name='ParentId', example='3238848****092995-cn-qingdao'),
  }(name='Directory'),
  directoryId?: string(name='DirectoryId', example='3238848****092994-cn-qingdao'),
  dsn?: string(name='Dsn', example='7D0*****4C0'),
  enabled?: boolean(name='Enabled', example='true'),
  gbId?: string(name='GbId', example='31000000****00000002'),
  groupId?: string(name='GroupId', example='3238848****092994-cn-qingdao'),
  id?: string(name='Id', example='3238848****092996-cn-qingdao'),
  ip?: string(name='Ip', example='10.10.10.10'),
  latitude?: string(name='Latitude', example='119.20'),
  longitude?: string(name='Longitude', example='45.00'),
  name?: string(name='Name'),
  params?: string(name='Params', example='{}'),
  parentId?: string(name='ParentId', example='3238848****092995-cn-qingdao'),
  password?: string(name='Password', example='admin'),
  port?: long(name='Port', example='8080'),
  posInterval?: long(name='PosInterval', example='300'),
  protocol?: string(name='Protocol', example='gb28181'),
  registeredTime?: string(name='RegisteredTime', example='2019-02-28T17:00:17Z'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  stats?: {
    channelNum?: long(name='ChannelNum', example='1'),
    failedNum?: long(name='FailedNum', example='1'),
    offlineNum?: long(name='OfflineNum', example='1'),
    onlineNum?: long(name='OnlineNum', example='1'),
    streamNum?: long(name='StreamNum', example='1'),
  }(name='Stats'),
  status?: string(name='Status', example='on'),
  type?: string(name='Type', example='ipc'),
  url?: string(name='Url', example='rtmp://xxx/xxx'),
  username?: string(name='Username', example='admin'),
  vendor?: string(name='Vendor'),
}

model DescribeDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDevice  DescribeDeviceRequest
  * @return DescribeDeviceResponse
 */
async function describeDevice(request: DescribeDeviceRequest): DescribeDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDevice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceChannelsRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
}

model DescribeDeviceChannelsResponseBody = {
  channels?: [ 
    {
      channelId?: long(name='ChannelId', example='0'),
      deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
      deviceStatus?: string(name='DeviceStatus', example='on'),
      gbId?: string(name='GbId', example='3100000****000000002'),
      name?: string(name='Name'),
      params?: string(name='Params', example='{}'),
      streamId?: string(name='StreamId', example='323*****997-cn-qingdao'),
      streamStatus?: string(name='StreamStatus', example='off'),
    }
  ](name='Channels'),
  pageCount?: long(name='PageCount', example='1'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='4641C72D-462E-4AEA-8485-FC267AF90B0A'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DescribeDeviceChannelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceChannelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDeviceChannels  DescribeDeviceChannelsRequest
  * @return DescribeDeviceChannelsResponse
 */
async function describeDeviceChannels(request: DescribeDeviceChannelsRequest): DescribeDeviceChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceChannels', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceGatewayRequest {
  clientIp?: string(name='ClientIp', example='192.168.0.1', position='Query'),
  expire?: long(name='Expire', example='3600', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='24611****70597051-cn-beijing', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDeviceGatewayResponseBody = {
  host?: string(name='Host', example='192.168.0.1'),
  port?: long(name='Port', example='8080'),
  protocol?: string(name='Protocol', example='gb28181'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  token?: string(name='Token', example='f5578fbc-694c-461d-a2a2-eb090775cef0'),
}

model DescribeDeviceGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDeviceGateway  DescribeDeviceGatewayRequest
  * @return DescribeDeviceGatewayResponse
 */
async function describeDeviceGateway(request: DescribeDeviceGatewayRequest): DescribeDeviceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceGateway', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceURLRequest {
  auth?: boolean(name='Auth', position='Query'),
  expire?: long(name='Expire', example='3600', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  mode?: string(name='Mode', example='push', position='Query'),
  outProtocol: string(name='OutProtocol', description='This parameter is required.', example='rtmp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  stream: string(name='Stream', description='This parameter is required.', example='live001', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDeviceURLResponseBody = {
  expireTime?: long(name='ExpireTime', example='1639130258'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  url?: string(name='Url', example='rtmp://demo.aliyundoc.com/live/live001?auth_key=1639130258-0-0-b2b04fe85ece6*****a6b1a42bc7e'),
}

model DescribeDeviceURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceURLResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDeviceURL  DescribeDeviceURLRequest
  * @return DescribeDeviceURLResponse
 */
async function describeDeviceURL(request: DescribeDeviceURLRequest): DescribeDeviceURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceURL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDevicesRequest {
  directoryId?: string(name='DirectoryId', example='399*****488-cn-qingdao', position='Query'),
  dsn?: string(name='Dsn', example='7D0*****4C0', position='Query'),
  gbId?: string(name='GbId', example='310000000****0000002', position='Query'),
  groupId?: string(name='GroupId', example='348*****174-cn-qingdao', position='Query'),
  id?: string(name='Id', example='348*****380-cn-qingdao', position='Query'),
  includeDirectory?: boolean(name='IncludeDirectory', example='false', position='Query'),
  includeStats?: boolean(name='IncludeStats', example='false', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  parentId?: string(name='ParentId', example='399*****774-cn-qingdao', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
  status?: string(name='Status', example='on', position='Query'),
  type?: string(name='Type', example='ipc', position='Query'),
  vendor?: string(name='Vendor', example='8yd*****qem', position='Query'),
}

model DescribeDevicesResponseBody = {
  devices?: [ 
    {
      alarmMethod?: string(name='AlarmMethod', example='0'),
      autoDirectory?: boolean(name='AutoDirectory', example='true'),
      autoPos?: boolean(name='AutoPos', example='false'),
      autoStart?: boolean(name='AutoStart', example='false'),
      channelSyncTime?: string(name='ChannelSyncTime', example='2019-02-28T17:01:17Z'),
      createdTime?: string(name='CreatedTime', example='2019-02-28T17:00:17Z'),
      description?: string(name='Description'),
      directory?: {
        createdTime?: string(name='CreatedTime', example='2019-02-28T17:00:17Z'),
        description?: string(name='Description'),
        groupId?: string(name='GroupId', example='348*****174-cn-qingdao'),
        id?: string(name='Id', example='399*****488-cn-qingdao'),
        name?: string(name='Name'),
        parentId?: string(name='ParentId', example='399*****774-cn-qingdao'),
      }(name='Directory'),
      directoryId?: string(name='DirectoryId', example='399*****488-cn-qingdao'),
      dsn?: string(name='Dsn', example='7D0*****4C0'),
      enabled?: boolean(name='Enabled', example='true'),
      gbId?: string(name='GbId', example='310000000****0000002'),
      groupId?: string(name='GroupId', example='348*****174-cn-qingdao'),
      id?: string(name='Id', example='348*****380-cn-qingdao'),
      ip?: string(name='Ip', example='10.10.10.10'),
      latitude?: string(name='Latitude', example='119.20'),
      longitude?: string(name='Longitude', example='45.00'),
      name?: string(name='Name'),
      params?: string(name='Params', example='{}'),
      parentId?: string(name='ParentId', example='3238848****092995'),
      password?: string(name='Password', example='admin'),
      port?: long(name='Port', example='8080'),
      posInterval?: long(name='PosInterval', example='300'),
      protocol?: string(name='Protocol', example='gb28181'),
      registeredTime?: string(name='RegisteredTime', example='2019-02-28T17:00:17Z'),
      stats?: {
        channelNum?: long(name='ChannelNum', example='0'),
        failedNum?: long(name='FailedNum', example='0'),
        offlineNum?: long(name='OfflineNum', example='0'),
        onlineNum?: long(name='OnlineNum', example='0'),
        streamNum?: long(name='StreamNum', example='0'),
      }(name='Stats'),
      status?: string(name='Status', example='on'),
      type?: string(name='Type', example='ipc'),
      url?: string(name='Url', example='rtmp://xxx/xxx'),
      username?: string(name='Username', example='admin'),
      vendor?: string(name='Vendor'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount', example='5'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='77'),
}

model DescribeDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDevices  DescribeDevicesRequest
  * @return DescribeDevicesResponse
 */
async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDirectoriesRequest {
  groupId: string(name='GroupId', description='This parameter is required.', example='348*****174-cn-qingdao', position='Query'),
  noPagination?: boolean(name='NoPagination', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  parentId?: string(name='ParentId', example='399*****774-cn-qingdao', position='Query'),
  sortBy?: string(name='SortBy', example='ID', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
}

model DescribeDirectoriesResponseBody = {
  directories?: [ 
    {
      createdTime?: string(name='CreatedTime', example='2021-09-10T10:00:00Z'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId', example='348*****174-cn-qingdao'),
      id?: string(name='Id', example='399*****488-cn-qingdao'),
      name?: string(name='Name'),
      parentId?: string(name='ParentId', example='399*****774-cn-qingdao'),
    }
  ](name='Directories'),
  pageCount?: long(name='PageCount', example='1'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DescribeDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDirectoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDirectories  DescribeDirectoriesRequest
  * @return DescribeDirectoriesResponse
 */
async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDirectories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDirectoryRequest {
  id: string(name='Id', description='This parameter is required.', example='399*****488-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDirectoryResponseBody = {
  createdTime?: string(name='CreatedTime', example='2021-09-10T10:00:00Z'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId', example='348*****174-cn-qingdao'),
  id?: string(name='Id', example='399*****488-cn-qingdao'),
  name?: string(name='Name'),
  parentId?: string(name='ParentId', example='399*****774-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDirectory  DescribeDirectoryRequest
  * @return DescribeDirectoryResponse
 */
async function describeDirectory(request: DescribeDirectoryRequest): DescribeDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupRequest {
  id: string(name='Id', description='This parameter is required.', position='Query'),
  includeStats?: boolean(name='IncludeStats', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeGroupResponseBody = {
  aliasId?: string(name='AliasId', example='337639*****24964-cn-qingdao'),
  app?: string(name='App', example='live'),
  callback?: string(name='Callback', example='http://example.com/callback'),
  createdTime?: string(name='CreatedTime', example='2019-02-28T17:00:17Z'),
  description?: string(name='Description'),
  enabled?: boolean(name='Enabled', example='true'),
  gbId?: string(name='GbId', example='3100000*****0000001'),
  gbIp?: string(name='GbIp', example='10.10.10.10'),
  gbPort?: long(name='GbPort', example='5060'),
  gbTcpPorts?: [ string ](name='GbTcpPorts'),
  gbUdpPorts?: [ string ](name='GbUdpPorts'),
  id?: string(name='Id', example='337639****224964-cn-qingdao'),
  inProtocol?: string(name='InProtocol', example='gb28181'),
  lazyPull?: boolean(name='LazyPull', example='false'),
  name?: string(name='Name'),
  outProtocol?: string(name='OutProtocol', example='flv,hls,rtmp'),
  playDomain?: string(name='PlayDomain', example='example.aliyundoc.com'),
  pushDomain?: string(name='PushDomain', example='demo.aliyundoc.com'),
  region?: string(name='Region', example='cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  stats?: {
    deviceNum?: long(name='DeviceNum', example='200'),
    iedNum?: long(name='IedNum', example='0'),
    ipcNum?: long(name='IpcNum', example='100'),
    platformNum?: long(name='PlatformNum', example='100'),
  }(name='Stats'),
  status?: string(name='Status', example='on'),
}

model DescribeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGroup  DescribeGroupRequest
  * @return DescribeGroupResponse
 */
async function describeGroup(request: DescribeGroupRequest): DescribeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupsRequest {
  id?: string(name='Id', example='33763950877224964-cn-qingdao', position='Query'),
  inProtocol?: string(name='InProtocol', example='rtmp', position='Query'),
  includeStats?: boolean(name='IncludeStats', example='false', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  region?: string(name='Region', example='cn-qingdao', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
  status?: string(name='Status', example='on', position='Query'),
}

model DescribeGroupsResponseBody = {
  groups?: [ 
    {
      aliasId?: string(name='AliasId', example='337639*****24964-cn-qingdao'),
      app?: string(name='App', example='live'),
      callback?: string(name='Callback', example='http://example.com/callback'),
      createdTime?: string(name='CreatedTime', example='2019-02-28T17:00:17Z'),
      description?: string(name='Description'),
      enabled?: boolean(name='Enabled', example='true'),
      gbId?: string(name='GbId', example='31000000000000000001'),
      gbIp?: string(name='GbIp', example='10.10.10.10'),
      gbPort?: long(name='GbPort', example='5060'),
      gbTcpPorts?: [ string ](name='GbTcpPorts'),
      gbUdpPorts?: [ string ](name='GbUdpPorts'),
      id?: string(name='Id', example='33763950877224964-cn-qingdao'),
      inProtocol?: string(name='InProtocol', example='gb28181'),
      lazyPull?: boolean(name='LazyPull', example='false'),
      name?: string(name='Name'),
      outProtocol?: string(name='OutProtocol', example='rtmp,flv,hls'),
      playDomain?: string(name='PlayDomain', example='demo.aliyundoc.com'),
      pushDomain?: string(name='PushDomain', example='example.aliyundoc.com'),
      region?: string(name='Region', example='cn-qingdao'),
      stats?: {
        deviceNum?: long(name='DeviceNum', example='200'),
        iedNum?: long(name='IedNum', example='0'),
        ipcNum?: long(name='IpcNum', example='200'),
        platformNum?: long(name='PlatformNum', example='0'),
      }(name='Stats'),
      status?: string(name='Status', example='on'),
    }
  ](name='Groups'),
  pageCount?: long(name='PageCount', example='10'),
  pageNum?: long(name='PageNum', example='5'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='200'),
}

model DescribeGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGroups  DescribeGroupsRequest
  * @return DescribeGroupsResponse
 */
async function describeGroups(request: DescribeGroupsRequest): DescribeGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParentPlatformRequest {
  id: string(name='Id', description='This parameter is required.', example='359*****374-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeParentPlatformResponseBody = {
  autoStart?: boolean(name='AutoStart', example='false'),
  clientAuth?: boolean(name='ClientAuth', example='true'),
  clientGbId?: string(name='ClientGbId', example='31010*****317542006'),
  clientIp?: string(name='ClientIp', example='192.168.0.1'),
  clientPassword?: string(name='ClientPassword', example='admin123'),
  clientPort?: long(name='ClientPort', example='5160'),
  clientUsername?: string(name='ClientUsername', example='user01'),
  createdTime?: string(name='CreatedTime', example='2018-12-10T21:00:00Z'),
  description?: string(name='Description'),
  gbId?: string(name='GbId', example='31000*****2170123451'),
  id?: string(name='Id', example='359*****374-cn-qingdao'),
  ip?: string(name='Ip', example='10.10.10.10'),
  name?: string(name='Name'),
  port?: long(name='Port', example='5060'),
  protocol?: string(name='Protocol', example='gb28181'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  status?: string(name='Status', example='on'),
}

model DescribeParentPlatformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParentPlatformResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeParentPlatform  DescribeParentPlatformRequest
  * @return DescribeParentPlatformResponse
 */
async function describeParentPlatform(request: DescribeParentPlatformRequest): DescribeParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParentPlatformDevicesRequest {
  id: string(name='Id', description='This parameter is required.', example='359*****374-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='id', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
}

model DescribeParentPlatformDevicesResponseBody = {
  devices?: [ 
    {
      gbId?: string(name='GbId', example='310101*****7542007'),
      groupId?: string(name='GroupId', example='3484*****8732174-cn-qingdao'),
      id?: string(name='Id', example='3487*****323380-cn-qingdao'),
      name?: string(name='Name'),
      parentId?: string(name='ParentId', example='3614*****766212-cn-qingdao'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount', example='1'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DescribeParentPlatformDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParentPlatformDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeParentPlatformDevices  DescribeParentPlatformDevicesRequest
  * @return DescribeParentPlatformDevicesResponse
 */
async function describeParentPlatformDevices(request: DescribeParentPlatformDevicesRequest): DescribeParentPlatformDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParentPlatformDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParentPlatformsRequest {
  gbId?: string(name='GbId', example='31000*****2170123451', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='id', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
  status?: string(name='Status', example='on', position='Query'),
}

model DescribeParentPlatformsResponseBody = {
  pageCount?: long(name='PageCount', example='1'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  platforms?: [ 
    {
      autoStart?: boolean(name='AutoStart', example='false'),
      clientAuth?: boolean(name='ClientAuth', example='true'),
      clientGbId?: string(name='ClientGbId', example='31010*****317542006'),
      clientIp?: string(name='ClientIp', example='192.168.0.1'),
      clientPassword?: string(name='ClientPassword', example='admin123'),
      clientPort?: long(name='ClientPort', example='5160'),
      clientUsername?: string(name='ClientUsername', example='user01'),
      createdTime?: string(name='CreatedTime', example='2018-12-10T21:00:00Z'),
      description?: string(name='Description'),
      gbId?: string(name='GbId', example='31000*****2170123451'),
      id?: string(name='Id', example='359*****374-cn-qingdao'),
      ip?: string(name='Ip', example='10.10.10.10'),
      name?: string(name='Name'),
      port?: long(name='Port', example='5060'),
      protocol?: string(name='Protocol', example='gb28181'),
      status?: string(name='Status', example='on'),
    }
  ](name='Platforms'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DescribeParentPlatformsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeParentPlatformsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeParentPlatforms  DescribeParentPlatformsRequest
  * @return DescribeParentPlatformsResponse
 */
async function describeParentPlatforms(request: DescribeParentPlatformsRequest): DescribeParentPlatformsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParentPlatforms', 'POST', '/', 'json', false, 'json', request);
}

model DescribePresetsRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribePresetsResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  presets?: [ 
    {
      id?: string(name='Id', example='2'),
      name?: string(name='Name'),
    }
  ](name='Presets'),
  requestId?: string(name='RequestId', example='9FE0CA83-BFD3-4EBD-A429-FABB9B9AE772'),
}

model DescribePresetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePresetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePresets  DescribePresetsRequest
  * @return DescribePresetsResponse
 */
async function describePresets(request: DescribePresetsRequest): DescribePresetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePresets', 'POST', '/', 'json', false, 'json', request);
}

model DescribePublishStreamStatusRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribePublishStreamStatusResponseBody = {
  code?: long(name='Code'),
  message?: long(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribePublishStreamStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePublishStreamStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePublishStreamStatus  DescribePublishStreamStatusRequest
  * @return DescribePublishStreamStatusResponse
 */
async function describePublishStreamStatus(request: DescribePublishStreamStatusRequest): DescribePublishStreamStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePublishStreamStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedDeviceRequest {
  id: string(name='Id', description='This parameter is required.', example='3614*****66212-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribePurchasedDeviceResponseBody = {
  createdTime?: string(name='CreatedTime', example='2018-12-10T21:00:00Z'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId', example='348*****174-cn-qingdao'),
  groupName?: string(name='GroupName'),
  id?: string(name='Id', example='33763****77224964-cn-qingdao'),
  name?: string(name='Name', example='test'),
  orderId?: string(name='OrderId', example='2117*****0447'),
  region?: string(name='Region', example='cn-qingdao'),
  registerCode?: string(name='RegisterCode', example='12345*****67890'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  subType?: string(name='SubType', example='dome'),
  type?: string(name='Type', example='ipc'),
  vendor?: string(name='Vendor', example='8yd*****qem'),
}

model DescribePurchasedDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePurchasedDevice  DescribePurchasedDeviceRequest
  * @return DescribePurchasedDeviceResponse
 */
async function describePurchasedDevice(request: DescribePurchasedDeviceRequest): DescribePurchasedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedDevice', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedDevicesRequest {
  groupId?: string(name='GroupId', example='348*****174-cn-qingdao', position='Query'),
  id?: string(name='Id', example='4070*****1132-cn-qingdao', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='id', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
  subType?: string(name='SubType', example='dome', position='Query'),
  type?: string(name='Type', example='ipc', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model DescribePurchasedDevicesResponseBody = {
  devices?: [ 
    {
      createdTime?: string(name='CreatedTime', example='2019-02-28T17:00:17Z'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId', example='348*****174-cn-qingdao'),
      groupName?: string(name='GroupName'),
      id?: string(name='Id', example='348*****380-cn-qingdao'),
      name?: string(name='Name'),
      orderId?: string(name='OrderId', example='2117*****0447'),
      region?: string(name='Region', example='cn-qingdao'),
      registerCode?: string(name='RegisterCode', example='1234*****67890'),
      subType?: string(name='SubType', example='dome'),
      type?: string(name='Type', example='ipc'),
      vendor?: string(name='Vendor'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount', example='1'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DescribePurchasedDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePurchasedDevices  DescribePurchasedDevicesRequest
  * @return DescribePurchasedDevicesResponse
 */
async function describePurchasedDevices(request: DescribePurchasedDevicesRequest): DescribePurchasedDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecordsRequest {
  endTime: string(name='EndTime', description='This parameter is required.', example='2021-11-24T00:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  privateBucket?: boolean(name='PrivateBucket', example='true', position='Query'),
  sortBy?: string(name='SortBy', example='Id', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2021-11-22T00:00:00Z', position='Query'),
  streamId: string(name='StreamId', description='This parameter is required.', example='323*****997-cn-qingdao', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='record', position='Query'),
}

model DescribeRecordsResponseBody = {
  nextStartTime?: string(name='NextStartTime', example='2018-12-10T11:00:00Z'),
  pageCount?: long(name='PageCount', example='5'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  records?: [ 
    {
      endTime?: string(name='EndTime', example='2021-11-23T18:33:48'),
      fileFormat?: string(name='FileFormat', example='hls'),
      height?: long(name='Height', example='1080'),
      id?: string(name='Id', example='2be2a673-6033-4874-b6f2-f2bc0a1*****'),
      ossBucket?: string(name='OssBucket', example='my_oss_bucket'),
      ossEndpoint?: string(name='OssEndpoint', example='oss-cn-qingdao.aliyuncs.com'),
      ossObject?: string(name='OssObject', example='record/live/310*****007/2021-11-23-18-19-38_2021-11-23-18-33-48.m3u8'),
      startTime?: string(name='StartTime', example='2021-11-23T18:19:32'),
      streamId?: string(name='StreamId', example='323*****997-cn-qingdao'),
      templateId?: string(name='TemplateId', example='388*****204-cn-qingdao'),
      type?: string(name='Type', example='record'),
      url?: string(name='Url', example='http://my_oss_bucket.oss-cn-qingdao.aliyuncs.com/record/live/310*****007/2021-11-23-18-19-38_2021-11-23-18-33-48.m3u8'),
      width?: long(name='Width', example='1920'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='100'),
}

model DescribeRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecords  DescribeRecordsRequest
  * @return DescribeRecordsResponse
 */
async function describeRecords(request: DescribeRecordsRequest): DescribeRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRenderingInstanceRequest {
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model DescribeRenderingInstanceResponseBody = {
  configInfo?: {
    configuration?: [ 
      {
        attributes?: [ 
          {
            name?: string(name='Name', example='lon'),
            value?: any(name='Value', example='100'),
          }
        ](name='Attributes'),
        moduleName?: string(name='ModuleName', example='location'),
      }
    ](name='Configuration'),
    networkConfig?: {
      bandwidthStatus?: string(name='BandwidthStatus', example='success'),
      maxEgressBandwidth?: int32(name='MaxEgressBandwidth', example='100'),
      maxIngressBandwidth?: int32(name='MaxIngressBandwidth', example='100'),
      updateTime?: string(name='UpdateTime', example='2023-08-17T09:54:35Z'),
    }(name='NetworkConfig'),
  }(name='ConfigInfo'),
  creationTime?: string(name='CreationTime', example='2024-05-07T02:27:06Z'),
  hostname?: string(name='Hostname', example='cn-xxx.ecr.aliyuncs.com'),
  portMappings?: [ 
    {
      externalPort?: string(name='ExternalPort', example='10013/10020'),
      internalPort?: string(name='InternalPort', example='49008/49015'),
    }
  ](name='PortMappings'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111'),
  renderingSpec?: string(name='RenderingSpec'),
  renderingStatus?: {
    description?: string(name='Description'),
    latestAction?: string(name='LatestAction', example='MigrateLocalData'),
    status?: string(name='Status', example='Working'),
  }(name='RenderingStatus'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  storageSize?: int32(name='StorageSize'),
  systemInfo?: {
    frequency?: int32(name='Frequency', example='60'),
    resolution?: string(name='Resolution', example='1920*1080'),
  }(name='SystemInfo'),
}

model DescribeRenderingInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRenderingInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRenderingInstance  DescribeRenderingInstanceRequest
  * @return DescribeRenderingInstanceResponse
 */
async function describeRenderingInstance(request: DescribeRenderingInstanceRequest): DescribeRenderingInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRenderingInstance', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRenderingInstanceConfigurationRequest {
  configuration?: [ 
    {
      attributeNames?: [ string ](name='AttributeNames'),
      moduleName: string(name='ModuleName', description='This parameter is required.', example='location'),
    }
  ](name='Configuration', shrink='json', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model DescribeRenderingInstanceConfigurationResponseBody = {
  configuration?: [ 
    {
      attributes?: [ 
        {
          name?: string(name='Name', example='lon'),
          value?: any(name='Value', example='100'),
        }
      ](name='Attributes'),
      moduleName?: string(name='ModuleName', example='location'),
    }
  ](name='Configuration'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeRenderingInstanceConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRenderingInstanceConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRenderingInstanceConfiguration  DescribeRenderingInstanceConfigurationRequest
  * @return DescribeRenderingInstanceConfigurationResponse
 */
async function describeRenderingInstanceConfiguration(request: DescribeRenderingInstanceConfigurationRequest): DescribeRenderingInstanceConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRenderingInstanceConfiguration', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRenderingInstanceSettingsRequest {
  attributeNames?: [ string ](name='AttributeNames', shrink='json', position='Query'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model DescribeRenderingInstanceSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  settings?: [ 
    {
      attributeName?: string(name='AttributeName', example='navbar.hide'),
      attributeValue?: string(name='AttributeValue', example='1'),
    }
  ](name='Settings'),
}

model DescribeRenderingInstanceSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRenderingInstanceSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRenderingInstanceSettings  DescribeRenderingInstanceSettingsRequest
  * @return DescribeRenderingInstanceSettingsResponse
 */
async function describeRenderingInstanceSettings(request: DescribeRenderingInstanceSettingsRequest): DescribeRenderingInstanceSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRenderingInstanceSettings', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamRequest {
  id: string(name='Id', description='This parameter is required.', example='323*****997-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeStreamResponseBody = {
  app?: string(name='App', example='live'),
  createdTime?: string(name='CreatedTime', example='2019-02-28T17:00:17Z'),
  deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
  enabled?: boolean(name='Enabled', example='true'),
  groupId?: string(name='GroupId', example='348*****174-cn-qingdao'),
  height?: int32(name='Height', example='720'),
  id?: string(name='Id', example='323*****997-cn-qingdao'),
  name?: string(name='Name', example='31000000*****0000002'),
  playDomain?: string(name='PlayDomain', example='example.aliyundoc.com'),
  protocol?: string(name='Protocol', example='gb28181'),
  pushDomain?: string(name='PushDomain', example='demo.aliyundoc.com'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  status?: string(name='Status', example='on'),
  width?: int32(name='Width', example='1280'),
}

model DescribeStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeStream  DescribeStreamRequest
  * @return DescribeStreamResponse
 */
async function describeStream(request: DescribeStreamRequest): DescribeStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStream', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamURLRequest {
  auth?: boolean(name='Auth', example='true', position='Query'),
  authKey?: string(name='AuthKey', example='ocs*****ace', position='Query'),
  endTime?: long(name='EndTime', example='1571649499', position='Query'),
  expire?: long(name='Expire', example='3600', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='323*****997-cn-qingdao', position='Query'),
  outProtocol: string(name='OutProtocol', description='This parameter is required.', example='rtmp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: long(name='StartTime', example='1571639499', position='Query'),
  transcode?: string(name='Transcode', example='sd', position='Query'),
  type?: string(name='Type', example='live', position='Query'),
}

model DescribeStreamURLResponseBody = {
  expireTime?: long(name='ExpireTime', example='1557977029'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  url?: string(name='Url', example='rtmp://demo.aliyundoc.com/live/310101*****7542007?auth_key=1639130258-0-0-b2b04fe85ece6*****a6b1a42bc7e'),
}

model DescribeStreamURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStreamURLResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeStreamURL  DescribeStreamURLRequest
  * @return DescribeStreamURLResponse
 */
async function describeStreamURL(request: DescribeStreamURLRequest): DescribeStreamURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStreamURL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamVodListRequest {
  endTime: long(name='EndTime', description='This parameter is required.', example='1634873413', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='18526049*****219118918-cn-beijing', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1639077653', position='Query'),
}

model DescribeStreamVodListResponseBody = {
  records?: [ 
    {
      endTime?: long(name='EndTime', example='1634873413'),
      startTime?: long(name='StartTime', example='1639077653'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeStreamVodListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStreamVodListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeStreamVodList  DescribeStreamVodListRequest
  * @return DescribeStreamVodListResponse
 */
async function describeStreamVodList(request: DescribeStreamVodListRequest): DescribeStreamVodListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStreamVodList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStreamsRequest {
  app?: string(name='App', example='live', position='Query'),
  deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao', position='Query'),
  domain?: string(name='Domain', example='example.aliyundoc.com', position='Query'),
  groupId?: string(name='GroupId', example='348*****174-cn-qingdao', position='Query'),
  id?: string(name='Id', example='323*****997-cn-qingdao', position='Query'),
  name?: string(name='Name', example='3100000*****00000002', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  parentId?: string(name='ParentId', example='399*****774-cn-qingdao', position='Query'),
  sortBy?: string(name='SortBy', example='Id', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
}

model DescribeStreamsResponseBody = {
  pageCount?: long(name='PageCount', example='5'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  streams?: [ 
    {
      app?: string(name='App', example='live'),
      createdTime?: string(name='CreatedTime', example='2018-12-10T17:00:00Z'),
      deviceId?: string(name='DeviceId', example='348*****380-cn-qingdao'),
      enabled?: boolean(name='Enabled', example='true'),
      groupId?: string(name='GroupId', example='348*****174-cn-qingdao'),
      height?: int32(name='Height', example='720'),
      id?: string(name='Id', example='323*****997-cn-qingdao'),
      name?: string(name='Name', example='31000000*****0000002'),
      playDomain?: string(name='PlayDomain', example='demo.aliyundoc.com'),
      protocol?: string(name='Protocol', example='gb28181'),
      pushDomain?: string(name='PushDomain', example='example.aliyundoc.com'),
      status?: string(name='Status', example='on'),
      width?: int32(name='Width', example='1280'),
    }
  ](name='Streams'),
  totalCount?: long(name='TotalCount', example='100'),
}

model DescribeStreamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStreamsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeStreams  DescribeStreamsRequest
  * @return DescribeStreamsResponse
 */
async function describeStreams(request: DescribeStreamsRequest): DescribeStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStreams', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplateRequest {
  id: string(name='Id', description='This parameter is required.', example='323*****998-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeTemplateResponseBody = {
  callback?: string(name='Callback', example='http://example.com/callback'),
  createdTime?: string(name='CreatedTime', example='2020-12-10T10:00:00Z'),
  description?: string(name='Description'),
  fileFormat?: string(name='FileFormat', example='hls'),
  flv?: string(name='Flv', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}'),
  hlsM3u8?: string(name='HlsM3u8', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}'),
  hlsTs?: string(name='HlsTs', example='osspath/record/{StreamName}/{UnixTimestamp}_{Sequence}'),
  id?: string(name='Id', example='323*****998-cn-qingdao'),
  interval?: long(name='Interval', example='3600'),
  jpgOnDemand?: string(name='JpgOnDemand', example='osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}_ondemand.jpg'),
  jpgOverwrite?: string(name='JpgOverwrite', example='osspath/snapshot/{AppName}/{StreamName}.jpg'),
  jpgSequence?: string(name='JpgSequence', example='osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}.jpg'),
  mp4?: string(name='Mp4', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket', example='my_oss_bucket'),
  ossEndpoint?: string(name='OssEndpoint', example='oss-cn-qingdao.aliyuncs.com'),
  ossFilePrefix?: string(name='OssFilePrefix', example='oss-prefix'),
  region?: string(name='Region', example='cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  retention?: long(name='Retention', example='3'),
  transConfigs?: [ 
    {
      fps?: long(name='Fps', example='25'),
      gop?: long(name='Gop', example='50'),
      height?: long(name='Height', example='720'),
      id?: string(name='Id', example='399*****430-cn-qingdao'),
      name?: string(name='Name', example='sd'),
      videoBitrate?: long(name='VideoBitrate', example='800'),
      videoCodec?: string(name='VideoCodec', example='h264'),
      width?: long(name='Width', example='1280'),
    }
  ](name='TransConfigs'),
  trigger?: string(name='Trigger', example='auto'),
  type?: string(name='Type', example='record'),
}

model DescribeTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTemplate  DescribeTemplateRequest
  * @return DescribeTemplateResponse
 */
async function describeTemplate(request: DescribeTemplateRequest): DescribeTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplatesRequest {
  id?: string(name='Id', example='323434****83423432', position='Query'),
  instanceId?: string(name='InstanceId', example='323*****998-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sortBy?: string(name='SortBy', example='id', position='Query'),
  sortDirection?: string(name='SortDirection', example='asc', position='Query'),
  type?: string(name='Type', example='record', position='Query'),
}

model DescribeTemplatesResponseBody = {
  pageCount?: long(name='PageCount', example='5'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='F3F88C96-CA6E-573E-B8F7-5BE83A1A0BCF'),
  templates?: [ 
    {
      callback?: string(name='Callback', example='http://example.com/callback'),
      createdTime?: string(name='CreatedTime', example='2018-12-10T10:00:00Z'),
      description?: string(name='Description'),
      fileFormat?: string(name='FileFormat', example='hls'),
      flv?: string(name='Flv', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}'),
      hlsM3u8?: string(name='HlsM3u8', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}'),
      hlsTs?: string(name='HlsTs', example='osspath/record/{StreamName}/{UnixTimestamp}_{Sequence}'),
      id?: string(name='Id', example='323*****998-cn-qingdao'),
      interval?: long(name='Interval', example='3600'),
      jpgOnDemand?: string(name='JpgOnDemand', example='osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}_ondemand.jpg'),
      jpgOverwrite?: string(name='JpgOverwrite', example='osspath/snapshot/{AppName}/{StreamName}.jpg'),
      jpgSequence?: string(name='JpgSequence', example='osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}.jpg'),
      mp4?: string(name='Mp4', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}'),
      name?: string(name='Name'),
      ossBucket?: string(name='OssBucket', example='my_oss_bucket'),
      ossEndpoint?: string(name='OssEndpoint', example='oss-cn-qingdao.aliyuncs.com'),
      ossFilePrefix?: string(name='OssFilePrefix', example='my_prefix'),
      region?: string(name='Region', example='cn-qingdao'),
      retention?: long(name='Retention', example='3'),
      transConfigs?: [ 
        {
          fps?: long(name='Fps', example='25'),
          gop?: long(name='Gop', example='50'),
          height?: long(name='Height', example='720'),
          name?: string(name='Name', example='sd'),
          videoBitrate?: long(name='VideoBitrate', example='800'),
          videoCodec?: string(name='VideoCodec', example='h264'),
          width?: long(name='Width', example='1280'),
          id?: string(name='id', example='399788187729597430-cn-qingdao'),
        }
      ](name='TransConfigs'),
      trigger?: string(name='Trigger', example='auto'),
      type?: string(name='Type', example='record'),
    }
  ](name='Templates'),
  totalCount?: long(name='TotalCount', example='100'),
}

model DescribeTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTemplates  DescribeTemplatesRequest
  * @return DescribeTemplatesResponse
 */
async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVodStreamURLRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  url: string(name='Url', description='This parameter is required.', example='http://xxx/xxx.mp4', position='Query'),
}

model DescribeVodStreamURLResponseBody = {
  outProtocol?: string(name='OutProtocol', example='rtsp'),
  port?: long(name='Port', example='8080'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  url?: string(name='Url', example='rtsp://domain/live/stream?sign=xxxxxx'),
}

model DescribeVodStreamURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVodStreamURLResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVodStreamURL  DescribeVodStreamURLRequest
  * @return DescribeVodStreamURLResponse
 */
async function describeVodStreamURL(request: DescribeVodStreamURLRequest): DescribeVodStreamURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVodStreamURL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsCertificateDetailRequest {
  certName: string(name='CertName', description='This parameter is required.', example='cert-539xxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsCertificateDetailResponseBody = {
  cert?: string(name='Cert', example='-----BEGIN CERTIFICATE-----xxxxx-----END CERTIFICATE-----'),
  certId?: long(name='CertId', example='63000000'),
  certName?: string(name='CertName', example='cert-539xxxxx'),
  key?: string(name='Key', example='xxxxx'),
  requestId?: string(name='RequestId', example='D94D0E1E-E71B-562D-8C18-969BB3653FBD'),
}

model DescribeVsCertificateDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsCertificateDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsCertificateDetail  DescribeVsCertificateDetailRequest
  * @return DescribeVsCertificateDetailResponse
 */
async function describeVsCertificateDetail(request: DescribeVsCertificateDetailRequest): DescribeVsCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsCertificateListRequest {
  domainName?: string(name='DomainName', example='example.aliyundoc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsCertificateListResponseBody = {
  certificateListModel?: {
    certList?: [ 
      {
        certId?: long(name='CertId', example='6338888'),
        certName?: string(name='CertName', example='cert-5391062'),
        common?: string(name='Common', example='example.aliyundoc.com'),
        fingerprint?: string(name='Fingerprint', example='3EB2585309AE5C8F369****7CDA6A8F5CEC8B2D4'),
        issuer?: string(name='Issuer', example='xxxxCert Inc'),
        lastTime?: long(name='LastTime', example='1632462708'),
      }
    ](name='CertList'),
    count?: int32(name='Count', example='2'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId', example='6E310519-E035-51AB-80D4-C1CBECD39EB5'),
}

model DescribeVsCertificateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsCertificateListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsCertificateList  DescribeVsCertificateListRequest
  * @return DescribeVsCertificateListResponse
 */
async function describeVsCertificateList(request: DescribeVsCertificateListRequest): DescribeVsCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsCertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDevicesDataRequest {
  endTime?: string(name='EndTime', example='2022-01-30T16:00:00Z', position='Query'),
  groupId?: string(name='GroupId', example='348*****174-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2022-01-04T16:00:00Z', position='Query'),
}

model DescribeVsDevicesDataResponseBody = {
  devicesDataPerInterval?: {
    dataModule?: [ 
    {
      devicesDataValue?: string(name='DevicesDataValue', example='128'),
      timeStamp?: string(name='TimeStamp', example='2022-01-04T16:00:00Z'),
    }
  ](name='DataModule')
  }(name='DevicesDataPerInterval'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeVsDevicesDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDevicesDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDevicesData  DescribeVsDevicesDataRequest
  * @return DescribeVsDevicesDataResponse
 */
async function describeVsDevicesData(request: DescribeVsDevicesDataRequest): DescribeVsDevicesDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDevicesData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainBpsDataRequest {
  domainName?: string(name='DomainName', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-10-02T02:30:48Z', position='Query'),
  interval?: string(name='Interval', example='300', position='Query'),
  ispNameEn?: string(name='IspNameEn', example='unicom', position='Query'),
  locationNameEn?: string(name='LocationNameEn', example='guangdong', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-12-26T16:00:00Z', position='Query'),
}

model DescribeVsDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bpsValue?: string(name='BpsValue', example='1000'),
      timeStamp?: string(name='TimeStamp', example='2015-12-10T20:00:00Z'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval', example='2100'),
  domainName?: string(name='DomainName', example='example.aliyundoc.com'),
  endTime?: string(name='EndTime', example='2021-10-01T07:10:48Z'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2021-09-18T16:00:00Z'),
}

model DescribeVsDomainBpsDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainBpsDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainBpsData  DescribeVsDomainBpsDataRequest
  * @return DescribeVsDomainBpsDataResponse
 */
async function describeVsDomainBpsData(request: DescribeVsDomainBpsDataRequest): DescribeVsDomainBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainCertificateInfoRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName', example='example.com'),
      certExpireTime?: string(name='CertExpireTime', example='2018-06-03T22:03:39Z'),
      certLife?: string(name='CertLife', example='months'),
      certName?: string(name='CertName', example='myname'),
      certOrg?: string(name='CertOrg', example='Let\\"s Encrypt'),
      certType?: string(name='CertType', example='free'),
      domainName?: string(name='DomainName', example='example.com'),
      SSLPub?: string(name='SSLPub', example='asdadaxxxx'),
      serverCertificateStatus?: string(name='ServerCertificateStatus', example='on'),
      status?: string(name='Status', example='success'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeVsDomainCertificateInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainCertificateInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainCertificateInfo  DescribeVsDomainCertificateInfoRequest
  * @return DescribeVsDomainCertificateInfoResponse
 */
async function describeVsDomainCertificateInfo(request: DescribeVsDomainCertificateInfoRequest): DescribeVsDomainCertificateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainCertificateInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainConfigsRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  functionNames: string(name='FunctionNames', description='This parameter is required.', example='path_based_ttl_set,oss_auth', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsDomainConfigsResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId', example='6295'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName', example='auth_type'),
          argValue?: string(name='ArgValue', example='req_auth'),
        }
      ](name='FunctionArgs'),
      functionName?: string(name='FunctionName', example='aliauth'),
      status?: string(name='Status', example='success'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId', example='D94D0E1E-E71B-562D-8C18-969BB3653FBD'),
}

model DescribeVsDomainConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainConfigs  DescribeVsDomainConfigsRequest
  * @return DescribeVsDomainConfigsResponse
 */
async function describeVsDomainConfigs(request: DescribeVsDomainConfigsRequest): DescribeVsDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainDetailRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsDomainDetailResponseBody = {
  domainConfig?: {
    cname?: string(name='Cname', example='example.aliyundoc.com.*****.com'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName', example='example.aliyundoc.com'),
    domainStatus?: string(name='DomainStatus', example='online'),
    domainType?: string(name='DomainType', example='vs'),
    gmtCreated?: string(name='GmtCreated', example='2021-07-19T10:27:23Z'),
    gmtModified?: string(name='GmtModified', example='2021-07-19T10:27:23Z'),
    region?: string(name='Region', example='cn-qingdao'),
    SSLProtocol?: string(name='SSLProtocol', example='off'),
    scope?: string(name='Scope', example='domestic'),
  }(name='DomainConfig'),
  requestId?: string(name='RequestId', example='9BEC5E85-C76B-56EF-A922-860EFDB8B64B'),
}

model DescribeVsDomainDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainDetail  DescribeVsDomainDetailRequest
  * @return DescribeVsDomainDetailResponse
 */
async function describeVsDomainDetail(request: DescribeVsDomainDetailRequest): DescribeVsDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainPvDataRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-10-15T15:59:59Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-10-10T17:00:00Z', position='Query'),
}

model DescribeVsDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='3600'),
  domainName?: string(name='DomainName', example='example.aliyundoc.com'),
  endTime?: string(name='EndTime', example='2021-11-12T15:59:59Z'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2021-11-22T00:00:00Z'),
      value?: string(name='Value', example='100'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2021-11-22T00:00:00Z'),
}

model DescribeVsDomainPvDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainPvDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainPvData  DescribeVsDomainPvDataRequest
  * @return DescribeVsDomainPvDataResponse
 */
async function describeVsDomainPvData(request: DescribeVsDomainPvDataRequest): DescribeVsDomainPvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainPvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainPvUvDataRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-11-24T00:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-10-14T23:00:00Z', position='Query'),
}

model DescribeVsDomainPvUvDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='3600'),
  domainName?: string(name='DomainName', example='example.aliyundoc.com'),
  endTime?: string(name='EndTime', example='2021-11-24T00:00:00Z'),
  pvUvDataInfos?: {
    pvUvDataInfo?: [ 
    {
      pv?: string(name='PV', example='100'),
      timeStamp?: string(name='TimeStamp', example='2021-10-14T23:00:00Z'),
      uv?: string(name='UV', example='100'),
    }
  ](name='PvUvDataInfo')
  }(name='PvUvDataInfos'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2021-12-12T10:00:00Z'),
}

model DescribeVsDomainPvUvDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainPvUvDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainPvUvData  DescribeVsDomainPvUvDataRequest
  * @return DescribeVsDomainPvUvDataResponse
 */
async function describeVsDomainPvUvData(request: DescribeVsDomainPvUvDataRequest): DescribeVsDomainPvUvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainPvUvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainRecordDataRequest {
  domainName?: string(name='DomainName', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-11-19T15:59:59Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  startTime?: string(name='StartTime', example='2021-09-29T16:00:00Z', position='Query'),
}

model DescribeVsDomainRecordDataResponseBody = {
  recordDataPerInterval?: {
    dataModule?: [ 
    {
      recordValue?: string(name='RecordValue', example='100'),
      streamCountValue?: string(name='StreamCountValue', example='1'),
      timeStamp?: string(name='TimeStamp', example='2021-11-19T15:59:59Z'),
    }
  ](name='DataModule')
  }(name='RecordDataPerInterval'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeVsDomainRecordDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainRecordDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainRecordData  DescribeVsDomainRecordDataRequest
  * @return DescribeVsDomainRecordDataResponse
 */
async function describeVsDomainRecordData(request: DescribeVsDomainRecordDataRequest): DescribeVsDomainRecordDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainRecordData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainRegionDataRequest {
  domainName?: string(name='DomainName', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-10-31T15:59:59Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-10-30T16:00:00Z', position='Query'),
}

model DescribeVsDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='3600'),
  domainName?: string(name='DomainName', example='example.aliyundoc.com'),
  endTime?: string(name='EndTime', example='2021-10-31T15:59:59Z'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2021-10-30T16:00:00Z'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize', example='2888253.7875'),
      avgResponseRate?: string(name='AvgResponseRate', example='154.3345765545624'),
      avgResponseTime?: string(name='AvgResponseTime', example='5183.666666666667'),
      bps?: string(name='Bps', example='380.9614285714286'),
      bytesProportion?: string(name='BytesProportion', example='0.003544181046236794'),
      proportion?: string(name='Proportion', example='0.01155980271270037'),
      qps?: string(name='Qps', example='0.001746031746031746'),
      region?: string(name='Region'),
      regionEname?: string(name='RegionEname', example='chongqing'),
      reqErrRate?: string(name='ReqErrRate', example='0'),
      totalBytes?: string(name='TotalBytes', example='2400057'),
      totalQuery?: string(name='TotalQuery', example='3'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeVsDomainRegionDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainRegionDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainRegionData  DescribeVsDomainRegionDataRequest
  * @return DescribeVsDomainRegionDataResponse
 */
async function describeVsDomainRegionData(request: DescribeVsDomainRegionDataRequest): DescribeVsDomainRegionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainRegionData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainReqBpsDataRequest {
  domainName?: string(name='DomainName', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-10-16T07:00:46Z', position='Query'),
  interval?: string(name='Interval', example='300', position='Query'),
  ispNameEn?: string(name='IspNameEn', example='telecom', position='Query'),
  locationNameEn?: string(name='LocationNameEn', example='beijing', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2022-01-15T16:00:00Z', position='Query'),
}

model DescribeVsDomainReqBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='3600'),
  domainName?: string(name='DomainName', example='example.aliyundoc.com'),
  endTime?: string(name='EndTime', example='2021-09-24T03:30:46Z'),
  reqBpsDataPerInterval?: {
    dataModule?: [ 
    {
      reqBpsValue?: string(name='ReqBpsValue', example='1000'),
      timeStamp?: string(name='TimeStamp', example='2021-12-24T16:00:00Z'),
    }
  ](name='DataModule')
  }(name='ReqBpsDataPerInterval'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2021-12-24T16:00:00Z'),
}

model DescribeVsDomainReqBpsDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainReqBpsDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainReqBpsData  DescribeVsDomainReqBpsDataRequest
  * @return DescribeVsDomainReqBpsDataResponse
 */
async function describeVsDomainReqBpsData(request: DescribeVsDomainReqBpsDataRequest): DescribeVsDomainReqBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainReqBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainReqTrafficDataRequest {
  domainName?: string(name='DomainName', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-10-13T10:00:41Z', position='Query'),
  interval?: string(name='Interval', example='3600', position='Query'),
  ispNameEn?: string(name='IspNameEn', example='unicom', position='Query'),
  locationNameEn?: string(name='LocationNameEn', example='shanghai', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-09-30T16:00:00Z', position='Query'),
}

model DescribeVsDomainReqTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='3600'),
  domainName?: string(name='DomainName', example='example.aliyundoc.com'),
  endTime?: string(name='EndTime', example='2021-09-22T03:40:41Z'),
  reqTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      reqTrafficValue?: string(name='ReqTrafficValue', example='10000'),
      timeStamp?: string(name='TimeStamp', example='2021-09-22T03:40:41Z'),
    }
  ](name='DataModule')
  }(name='ReqTrafficDataPerInterval'),
  requestId?: string(name='RequestId', example='9BEC5E85-C76B-56EF-A922-860EFDB8B64B'),
  startTime?: string(name='StartTime', example='2021-09-21T16:00:00Z'),
}

model DescribeVsDomainReqTrafficDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainReqTrafficDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainReqTrafficData  DescribeVsDomainReqTrafficDataRequest
  * @return DescribeVsDomainReqTrafficDataResponse
 */
async function describeVsDomainReqTrafficData(request: DescribeVsDomainReqTrafficDataRequest): DescribeVsDomainReqTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainReqTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainSnapshotDataRequest {
  domainName?: string(name='DomainName', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-10-18T16:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-10-05T16:00:00Z', position='Query'),
}

model DescribeVsDomainSnapshotDataResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  snapshotDataPerInterval?: {
    dataModule?: [ 
    {
      snapshotValue?: string(name='SnapshotValue', example='1'),
      timeStamp?: string(name='TimeStamp', example='2015-12-10T20:00:00Z'),
    }
  ](name='DataModule')
  }(name='SnapshotDataPerInterval'),
}

model DescribeVsDomainSnapshotDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainSnapshotDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainSnapshotData  DescribeVsDomainSnapshotDataRequest
  * @return DescribeVsDomainSnapshotDataResponse
 */
async function describeVsDomainSnapshotData(request: DescribeVsDomainSnapshotDataRequest): DescribeVsDomainSnapshotDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainSnapshotData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainTrafficDataRequest {
  domainName?: string(name='DomainName', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-09-21T02:50:42Z', position='Query'),
  interval?: string(name='Interval', example='3600', position='Query'),
  ispNameEn?: string(name='IspNameEn', example='telecom', position='Query'),
  locationNameEn?: string(name='LocationNameEn', example='beijing', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-08-18T16:00:00Z', position='Query'),
}

model DescribeVsDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='3600'),
  domainName?: string(name='DomainName', example='example.aliyundoc.com'),
  endTime?: string(name='EndTime', example='2021-09-20T07:10:42Z'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2021-10-25T16:00:00Z'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2021-09-20T07:10:42Z'),
      trafficValue?: string(name='TrafficValue', example='100'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeVsDomainTrafficDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainTrafficDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainTrafficData  DescribeVsDomainTrafficDataRequest
  * @return DescribeVsDomainTrafficDataResponse
 */
async function describeVsDomainTrafficData(request: DescribeVsDomainTrafficDataRequest): DescribeVsDomainTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsDomainUvDataRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2021-11-24T00:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-10-12T10:00:00Z', position='Query'),
}

model DescribeVsDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='3600'),
  domainName?: string(name='DomainName', example='example.aliyundoc.com'),
  endTime?: string(name='EndTime', example='2015-11-30T00:00:00Z'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2015-11-29T00:00:00Z'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2015-11-29T15:00:00Z'),
      value?: string(name='Value', example='100'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeVsDomainUvDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsDomainUvDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsDomainUvData  DescribeVsDomainUvDataRequest
  * @return DescribeVsDomainUvDataResponse
 */
async function describeVsDomainUvData(request: DescribeVsDomainUvDataRequest): DescribeVsDomainUvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsDomainUvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsPullStreamInfoConfigRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsPullStreamInfoConfigResponseBody = {
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      appName?: string(name='AppName', example='xxxApp'),
      domainName?: string(name='DomainName', example='example.com'),
      endTime?: string(name='EndTime', example='2016-05-15T07:30:00Z'),
      sourceUrl?: string(name='SourceUrl', example='http://test'),
      startTime?: string(name='StartTime', example='2016-05-15T01:30:00Z'),
      streamName?: string(name='StreamName', example='xxxStream'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeVsPullStreamInfoConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsPullStreamInfoConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsPullStreamInfoConfig  DescribeVsPullStreamInfoConfigRequest
  * @return DescribeVsPullStreamInfoConfigResponse
 */
async function describeVsPullStreamInfoConfig(request: DescribeVsPullStreamInfoConfigRequest): DescribeVsPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsStreamsNotifyUrlConfigRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsStreamsNotifyUrlConfigResponseBody = {
  liveStreamsNotifyConfig?: {
    authKey?: string(name='AuthKey'),
    authType?: string(name='AuthType'),
    domainName?: string(name='DomainName', example='example.aliyundoc.com'),
    notifyUrl?: string(name='NotifyUrl'),
  }(name='LiveStreamsNotifyConfig'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeVsStreamsNotifyUrlConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsStreamsNotifyUrlConfig  DescribeVsStreamsNotifyUrlConfigRequest
  * @return DescribeVsStreamsNotifyUrlConfigResponse
 */
async function describeVsStreamsNotifyUrlConfig(request: DescribeVsStreamsNotifyUrlConfigRequest): DescribeVsStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsStreamsOnlineListRequest {
  appName?: string(name='AppName', example='xxxApp', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  endTime?: string(name='EndTime', example='2016-06-30T19:00:00Z', position='Query'),
  orderBy?: string(name='OrderBy', example='publish_time_asc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  queryType?: string(name='QueryType', example='fuzzy', position='Query'),
  startTime?: string(name='StartTime', example='2016-06-29T19:00:00Z', position='Query'),
  streamName?: string(name='StreamName', example='xxxStream', position='Query'),
  streamType?: string(name='StreamType', example='all', position='Query'),
}

model DescribeVsStreamsOnlineListResponseBody = {
  onlineInfo?: {
    liveStreamOnlineInfo?: [ 
    {
      appName?: string(name='AppName', example='xxxApp'),
      domainName?: string(name='DomainName', example='example.com'),
      publishDomain?: string(name='PublishDomain', example='push.example.com'),
      publishTime?: string(name='PublishTime', example='2015-12-02T06:58:04Z'),
      publishType?: string(name='PublishType', example='edge'),
      publishUrl?: string(name='PublishUrl', example='rtmp://example.com/xchen'),
      streamName?: string(name='StreamName', example='testxchen_small'),
      transcodeId?: string(name='TranscodeId', example='123'),
      transcoded?: string(name='Transcoded', example='no'),
    }
  ](name='LiveStreamOnlineInfo')
  }(name='OnlineInfo'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='B31FC4AD-3592-573E-8063-878F722B322A'),
  totalNum?: int32(name='TotalNum', example='10'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model DescribeVsStreamsOnlineListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsStreamsOnlineListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsStreamsOnlineList  DescribeVsStreamsOnlineListRequest
  * @return DescribeVsStreamsOnlineListResponse
 */
async function describeVsStreamsOnlineList(request: DescribeVsStreamsOnlineListRequest): DescribeVsStreamsOnlineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsStreamsOnlineList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsStreamsPublishListRequest {
  appName?: string(name='AppName', example='xxxApp', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2016-06-30T19:00:00Z', position='Query'),
  orderBy?: string(name='OrderBy', example='publish_time_asc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='3000', position='Query'),
  queryType?: string(name='QueryType', example='fuzzy', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2016-06-29T19:00:00Z', position='Query'),
  streamName?: string(name='StreamName', example='xxxStream', position='Query'),
  streamType?: string(name='StreamType', example='all', position='Query'),
}

model DescribeVsStreamsPublishListResponseBody = {
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='3000'),
  publishInfo?: {
    liveStreamPublishInfo?: [ 
    {
      appName?: string(name='AppName', example='xxxApp'),
      clientAddr?: string(name='ClientAddr', example='192.168.0.1'),
      domainName?: string(name='DomainName', example='example.aliyundoc.com'),
      edgeNodeAddr?: string(name='EdgeNodeAddr', example='192.168.0.1'),
      publishDomain?: string(name='PublishDomain', example='example.aliyundoc.com'),
      publishTime?: string(name='PublishTime', example='2016-06-29T19:00:00Z'),
      publishType?: string(name='PublishType', example='center'),
      publishUrl?: string(name='PublishUrl', example='https://example.aliyundoc.com/xxxApp/3402000****320000001.m3u8'),
      stopTime?: string(name='StopTime', example='2016-06-29T19:00:00Z'),
      streamName?: string(name='StreamName', example='xxxStream'),
      streamUrl?: string(name='StreamUrl', example='https://example.aliyundoc.com/xxxApp/3402000****320000001.m3u8'),
      transcodeId?: string(name='TranscodeId', example='3888920****8138204-cn-qingdao'),
      transcoded?: string(name='Transcoded', example='yes'),
    }
  ](name='LiveStreamPublishInfo')
  }(name='PublishInfo'),
  requestId?: string(name='RequestId', example='119F7639-4646-51A4-B6C1-300D391C0104'),
  totalNum?: int32(name='TotalNum', example='200'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model DescribeVsStreamsPublishListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsStreamsPublishListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsStreamsPublishList  DescribeVsStreamsPublishListRequest
  * @return DescribeVsStreamsPublishListResponse
 */
async function describeVsStreamsPublishList(request: DescribeVsStreamsPublishListRequest): DescribeVsStreamsPublishListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsStreamsPublishList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsTopDomainsByFlowRequest {
  endTime?: string(name='EndTime', example='2018-12-10T18:00:00Z', position='Query'),
  limit?: long(name='Limit', example='3', minimum=1, maximum=100, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-12-12T10:00:00Z', position='Query'),
}

model DescribeVsTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount', example='20'),
  domainOnlineCount?: long(name='DomainOnlineCount', example='12'),
  endTime?: string(name='EndTime', example='2018-12-10T18:00:00Z'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2021-12-10T10:00:00Z'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName', example='example.aliyundoc.com'),
      maxBps?: long(name='MaxBps', example='100'),
      maxBpsTime?: string(name='MaxBpsTime', example='1457111400'),
      rank?: long(name='Rank', example='1'),
      totalAccess?: long(name='TotalAccess', example='100'),
      totalTraffic?: string(name='TotalTraffic', example='100'),
      trafficPercent?: string(name='TrafficPercent', example='30.64191989360235'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeVsTopDomainsByFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsTopDomainsByFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsTopDomainsByFlow  DescribeVsTopDomainsByFlowRequest
  * @return DescribeVsTopDomainsByFlowResponse
 */
async function describeVsTopDomainsByFlow(request: DescribeVsTopDomainsByFlowRequest): DescribeVsTopDomainsByFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsTopDomainsByFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsUpPeakPublishStreamDataRequest {
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  domainSwitch?: string(name='DomainSwitch', example='on', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2017-12-10T21:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2017-12-10T20:00:00Z', position='Query'),
}

model DescribeVsUpPeakPublishStreamDataResponseBody = {
  describeVsUpPeakPublishStreamDatas?: {
    describeVsUpPeakPublishStreamData?: [ 
    {
      bandWidth?: string(name='BandWidth'),
      peakTime?: string(name='PeakTime', example='1522252320000'),
      publishStreamNum?: int32(name='PublishStreamNum', example='31'),
      queryTime?: string(name='QueryTime', example='1522166400000'),
      statName?: string(name='StatName', example='example.com'),
    }
  ](name='DescribeVsUpPeakPublishStreamData')
  }(name='DescribeVsUpPeakPublishStreamDatas'),
  requestId?: string(name='RequestId', example='27A3C548-A699-48F9-97CD-F35D81075AF3'),
}

model DescribeVsUpPeakPublishStreamDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsUpPeakPublishStreamDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsUpPeakPublishStreamData  DescribeVsUpPeakPublishStreamDataRequest
  * @return DescribeVsUpPeakPublishStreamDataResponse
 */
async function describeVsUpPeakPublishStreamData(request: DescribeVsUpPeakPublishStreamDataRequest): DescribeVsUpPeakPublishStreamDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsUpPeakPublishStreamData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsUserResourcePackageRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeVsUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      currCapacity?: string(name='CurrCapacity'),
      displayName?: string(name='DisplayName'),
      initCapacity?: string(name='InitCapacity'),
      instanceId?: string(name='InstanceId'),
      status?: string(name='Status'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos'),
}

model DescribeVsUserResourcePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsUserResourcePackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsUserResourcePackage  DescribeVsUserResourcePackageRequest
  * @return DescribeVsUserResourcePackageResponse
 */
async function describeVsUserResourcePackage(request: DescribeVsUserResourcePackageRequest): DescribeVsUserResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsUserResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVsVerifyContentRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVsVerifyContentResponseBody = {
  content?: string(name='Content', example='verify_dffeb6610035dcb77b413a59c3*****'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeVsVerifyContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVsVerifyContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVsVerifyContent  DescribeVsVerifyContentRequest
  * @return DescribeVsVerifyContentResponse
 */
async function describeVsVerifyContent(request: DescribeVsVerifyContentRequest): DescribeVsVerifyContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVsVerifyContent', 'POST', '/', 'json', false, 'json', request);
}

model ForbidVsStreamRequest {
  appName: string(name='AppName', description='This parameter is required.', example='xxxApp', position='Query'),
  controlStreamAction?: string(name='ControlStreamAction', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  liveStreamType: string(name='LiveStreamType', description='This parameter is required.', example='publisher', position='Query'),
  oneshot?: string(name='Oneshot', example='yes', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resumeTime?: string(name='ResumeTime', example='2015-12-01T17:37:00Z', position='Query'),
  streamName: string(name='StreamName', description='This parameter is required.', example='xxxStream', position='Query'),
}

model ForbidVsStreamResponseBody = {
  requestId?: string(name='RequestId', example='119F7639-4646-51A4-B6C1-300D391C0104'),
}

model ForbidVsStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ForbidVsStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ForbidVsStream  ForbidVsStreamRequest
  * @return ForbidVsStreamResponse
 */
async function forbidVsStream(request: ForbidVsStreamRequest): ForbidVsStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ForbidVsStream', 'POST', '/', 'json', false, 'json', request);
}

model GetRenderingInstanceStreamingInfoRequest {
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model GetRenderingInstanceStreamingInfoResponseBody = {
  flowId?: string(name='FlowId', example='792fy125-594c-4dde-ab35-9ff8hrf0a86f'),
  gateway?: string(name='Gateway', example='10.178.208.22'),
  hostname?: string(name='Hostname', example='10.18.20.2'),
  port?: string(name='Port', example='10003'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model GetRenderingInstanceStreamingInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRenderingInstanceStreamingInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRenderingInstanceStreamingInfo  GetRenderingInstanceStreamingInfoRequest
  * @return GetRenderingInstanceStreamingInfoResponse
 */
async function getRenderingInstanceStreamingInfo(request: GetRenderingInstanceStreamingInfoRequest): GetRenderingInstanceStreamingInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRenderingInstanceStreamingInfo', 'POST', '/', 'json', false, 'json', request);
}

model GotoPresetRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  presetId: string(name='PresetId', description='This parameter is required.', example='2', position='Query'),
}

model GotoPresetResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='30295DF1-1DC7-48BA-BE5A-D58E61EB2375'),
}

model GotoPresetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GotoPresetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GotoPreset  GotoPresetRequest
  * @return GotoPresetResponse
 */
async function gotoPreset(request: GotoPresetRequest): GotoPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GotoPreset', 'POST', '/', 'json', false, 'json', request);
}

model InstallCloudAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model InstallCloudAppResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model InstallCloudAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallCloudAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InstallCloudApp  InstallCloudAppRequest
  * @return InstallCloudAppResponse
 */
async function installCloudApp(request: InstallCloudAppRequest): InstallCloudAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCloudApp', 'POST', '/', 'json', false, 'json', request);
}

model ListCloudAppInstallationsRequest {
  appId?: string(name='AppId', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb', position='Query'),
  appName?: string(name='AppName', example='com.aaa.bbb', position='Query'),
  appVersion?: string(name='AppVersion', example='1.0', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model ListCloudAppInstallationsResponseBody = {
  installationInfos?: [ 
    {
      appId?: string(name='AppId', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb'),
      appName?: string(name='AppName', example='com.aaa.bbb'),
      appVersion?: string(name='AppVersion', example='1.5.0'),
      installationTime?: string(name='InstallationTime', example='2024-05-28T14:48:34+08:00'),
      renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111'),
      status?: string(name='Status', example='installed'),
      statusDescription?: string(name='StatusDescription', example='install success'),
      updateTime?: string(name='UpdateTime', example='2024-05-28T14:50:04+08:00'),
    }
  ](name='InstallationInfos'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListCloudAppInstallationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCloudAppInstallationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCloudAppInstallations  ListCloudAppInstallationsRequest
  * @return ListCloudAppInstallationsResponse
 */
async function listCloudAppInstallations(request: ListCloudAppInstallationsRequest): ListCloudAppInstallationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudAppInstallations', 'GET', '/', 'json', false, 'json', request);
}

model ListCloudAppsRequest {
  appId?: string(name='AppId', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb', position='Query'),
  appName?: string(name='AppName', example='com.aaa.bbb', position='Query'),
  appVersion?: string(name='AppVersion', example='1.0', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model ListCloudAppsResponseBody = {
  cloudApps?: [ 
    {
      appId?: string(name='AppId', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb'),
      appName?: string(name='AppName', example='com.aaa.bbb'),
      appVersion?: string(name='AppVersion', example='1.5.0'),
      description?: string(name='Description', example='demo'),
      status?: string(name='Status', example='Success'),
      statusDescription?: string(name='StatusDescription', example='upload success'),
      updateTime?: string(name='UpdateTime', example='2024-05-28T14:48:34+08:00'),
      uploadTime?: string(name='UploadTime', example='2024-05-28T14:28:14+08:00'),
    }
  ](name='CloudApps'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListCloudAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCloudAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCloudApps  ListCloudAppsRequest
  * @return ListCloudAppsResponse
 */
async function listCloudApps(request: ListCloudAppsRequest): ListCloudAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudApps', 'GET', '/', 'json', false, 'json', request);
}

model ListFilePushStatusesRequest {
  fileId?: string(name='FileId', example='f-1671accd4dafdag3er256cvgewt13f7141db2f7', position='Query'),
  fileName?: string(name='FileName', example='myfile', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model ListFilePushStatusesResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  pushStatuses?: [ 
    {
      fileId?: string(name='FileId', example='f-1671accd4dafdag3er256cvgewt13f7141db2f7'),
      fileName?: string(name='FileName', example='myfile'),
      pushTime?: string(name='PushTime', example='2024-03-26T16:32:20+08:00'),
      renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111'),
      status?: string(name='Status', example='Success'),
      statusDescription?: string(name='StatusDescription', example='push success'),
      updateTime?: string(name='UpdateTime', example='2024-03-26T17:02:10+08:00'),
    }
  ](name='PushStatuses'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListFilePushStatusesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilePushStatusesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFilePushStatuses  ListFilePushStatusesRequest
  * @return ListFilePushStatusesResponse
 */
async function listFilePushStatuses(request: ListFilePushStatusesRequest): ListFilePushStatusesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFilePushStatuses', 'GET', '/', 'json', false, 'json', request);
}

model ListFilesRequest {
  fileId?: string(name='FileId', example='f-1671accd4dafdag3er256cvgewt13f7141db2f7', position='Query'),
  fileName?: string(name='FileName', example='myfile', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model ListFilesResponseBody = {
  files?: [ 
    {
      description?: string(name='Description'),
      fileId?: string(name='FileId', example='f-1671accd4dafdag3er256cvgewt13f7141db2f7'),
      fileName?: string(name='FileName', example='myfile'),
      status?: string(name='Status', example='Success'),
      statusDescription?: string(name='StatusDescription', example='upload success'),
      targetPath?: string(name='TargetPath', example='/data/tmp/test/xxx.tar'),
      updateTime?: string(name='UpdateTime', example='2024-03-28T14:15:08+08:00'),
      uploadTime?: string(name='UploadTime', example='2024-03-28T14:10:12+08:00'),
    }
  ](name='Files'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='200'),
}

model ListFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFiles  ListFilesRequest
  * @return ListFilesResponse
 */
async function listFiles(request: ListFilesRequest): ListFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFiles', 'GET', '/', 'json', false, 'json', request);
}

model ListPublicKeysRequest {
  keyGroup?: string(name='KeyGroup', example='g-test', position='Query'),
  keyName?: string(name='KeyName', example='mykey', position='Query'),
  keyType?: string(name='KeyType', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model ListPublicKeysResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  publicKeys?: [ 
    {
      content?: string(name='Content', example='verify_30d89ccb0905c8c7882c1d14a991954b'),
      description?: string(name='Description'),
      keyGroup?: string(name='KeyGroup', example='mygroup'),
      keyName?: string(name='KeyName', example='mykey'),
      keyType?: string(name='KeyType'),
      uploadTime?: string(name='UploadTime', example='2024-06-11T14:26:48+08:00'),
    }
  ](name='PublicKeys'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListPublicKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublicKeys  ListPublicKeysRequest
  * @return ListPublicKeysResponse
 */
async function listPublicKeys(request: ListPublicKeysRequest): ListPublicKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicKeys', 'GET', '/', 'json', false, 'json', request);
}

model ListRenderingDataPackagesRequest {
  category?: string(name='Category', position='Query'),
  dataPackageId?: string(name='DataPackageId', example='dp-449ea3d16c0841b8bf33ec5bbc86a152', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  size?: int32(name='Size', example='20', position='Query'),
  status?: string(name='Status', example='available', position='Query'),
}

model ListRenderingDataPackagesResponseBody = {
  dataPackages?: [ 
    {
      category?: string(name='Category'),
      creationTime?: string(name='CreationTime', example='2024-10-15T10:23:06+08:00'),
      dataPackageId?: string(name='DataPackageId', example='dp-449ea3d16c0841b8bf33ec5bbc86a152'),
      description?: string(name='Description', example='test'),
      renderingInstanceId?: string(name='RenderingInstanceId', example='render-342012a227dc4ddf91f024639e43051a'),
      size?: int32(name='Size', example='10'),
      status?: string(name='Status', example='available'),
      updateTime?: string(name='UpdateTime', example='2024-12-06T02:03:59Z'),
    }
  ](name='DataPackages'),
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListRenderingDataPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRenderingDataPackagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRenderingDataPackages  ListRenderingDataPackagesRequest
  * @return ListRenderingDataPackagesResponse
 */
async function listRenderingDataPackages(request: ListRenderingDataPackagesRequest): ListRenderingDataPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRenderingDataPackages', 'POST', '/', 'json', false, 'json', request);
}

model ListRenderingInstanceGatewayRequest {
  gatewayInstanceId?: string(name='GatewayInstanceId', example='render-xxx', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model ListRenderingInstanceGatewayResponseBody = {
  gatewayConfigurationInfos?: [ 
    {
      creationTime?: string(name='CreationTime', example='2024-10-15 10:19:13'),
      gatewayInstanceId?: string(name='GatewayInstanceId', example='render-xxx'),
      renderingInstanceId?: string(name='RenderingInstanceId', example='render-342012a227dc4ddf91f024639e43051a'),
      status?: string(name='Status', example='available'),
      updateTime?: string(name='UpdateTime', example='2024-11-02 12:08:26'),
    }
  ](name='GatewayConfigurationInfos'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: string(name='TotalCount', example='100'),
}

model ListRenderingInstanceGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRenderingInstanceGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRenderingInstanceGateway  ListRenderingInstanceGatewayRequest
  * @return ListRenderingInstanceGatewayResponse
 */
async function listRenderingInstanceGateway(request: ListRenderingInstanceGatewayRequest): ListRenderingInstanceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRenderingInstanceGateway', 'POST', '/', 'json', false, 'json', request);
}

model ListRenderingInstancesRequest {
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
  renderingSpec?: string(name='RenderingSpec', example='crs.cp.l1', position='Query'),
  storageSize?: int32(name='StorageSize', position='Query'),
}

model ListRenderingInstancesResponseBody = {
  renderingInstances?: [ 
    {
      creationTime?: string(name='CreationTime', example='2023-11-17T02:18:04Z'),
      renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111'),
      renderingSpec?: string(name='RenderingSpec', example='crs.cp.l1'),
      storageSize?: int32(name='StorageSize'),
    }
  ](name='RenderingInstances'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListRenderingInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRenderingInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRenderingInstances  ListRenderingInstancesRequest
  * @return ListRenderingInstancesResponse
 */
async function listRenderingInstances(request: ListRenderingInstancesRequest): ListRenderingInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRenderingInstances', 'GET', '/', 'json', false, 'json', request);
}

model ManageLoginRequest {
  actionName?: string(name='ActionName', example='open', position='Query'),
  keyGroup?: string(name='KeyGroup', example='mygroup', position='Query'),
  keyName?: string(name='KeyName', example='mykey', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model ManageLoginResponseBody = {
  loginInfo?: {
    adbLoginPort?: int32(name='AdbLoginPort'),
    loginHostname?: string(name='LoginHostname', example='12.10.4.10'),
    loginPort?: int32(name='LoginPort', example='10004'),
  }(name='LoginInfo'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ManageLoginResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManageLoginResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ManageLogin  ManageLoginRequest
  * @return ManageLoginResponse
 */
async function manageLogin(request: ManageLoginRequest): ManageLoginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManageLogin', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeviceRequest {
  alarmMethod?: string(name='AlarmMethod', example='0', position='Query'),
  autoDirectory?: boolean(name='AutoDirectory', position='Query'),
  autoPos?: boolean(name='AutoPos', example='false', position='Query'),
  autoStart?: boolean(name='AutoStart', example='false', position='Query'),
  description?: string(name='Description', position='Query'),
  directoryId?: string(name='DirectoryId', example='399*****488-cn-qingdao', position='Query'),
  gbId?: string(name='GbId', example='3100000****000000002', position='Query'),
  groupId?: string(name='GroupId', example='348*****174-cn-qingdao', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ip?: string(name='Ip', example='10.10.10.10', position='Query'),
  latitude?: string(name='Latitude', example='119.20', position='Query'),
  longitude?: string(name='Longitude', example='45.00', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  params?: string(name='Params', example='{}', position='Query'),
  parentId?: string(name='ParentId', example='399*****774-cn-qingdao', position='Query'),
  password?: string(name='Password', example='admin', position='Query'),
  port?: long(name='Port', example='8080', position='Query'),
  posInterval?: long(name='PosInterval', example='300', position='Query'),
  type?: string(name='Type', example='ipc', position='Query'),
  url?: string(name='Url', example='rtmp://xxx/xxx', position='Query'),
  username?: string(name='Username', example='admin', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model ModifyDeviceResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ModifyDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDevice  ModifyDeviceRequest
  * @return ModifyDeviceResponse
 */
async function modifyDevice(request: ModifyDeviceRequest): ModifyDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDevice', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeviceAlarmRequest {
  alarmId: string(name='AlarmId', description='This parameter is required.', example='0dGo7jLwwf1000296232', position='Query'),
  channelId: int32(name='ChannelId', description='This parameter is required.', example='10', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  status: int32(name='Status', description='This parameter is required.', example='1', position='Query'),
}

model ModifyDeviceAlarmResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ModifyDeviceAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDeviceAlarmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDeviceAlarm  ModifyDeviceAlarmRequest
  * @return ModifyDeviceAlarmResponse
 */
async function modifyDeviceAlarm(request: ModifyDeviceAlarmRequest): ModifyDeviceAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeviceAlarm', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeviceCaptureRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  image?: int32(name='Image', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  video?: int32(name='Video', example='1', position='Query'),
}

model ModifyDeviceCaptureResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ModifyDeviceCaptureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDeviceCaptureResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDeviceCapture  ModifyDeviceCaptureRequest
  * @return ModifyDeviceCaptureResponse
 */
async function modifyDeviceCapture(request: ModifyDeviceCaptureRequest): ModifyDeviceCaptureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeviceCapture', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeviceChannelsRequest {
  channels: string(name='Channels', description='This parameter is required.', position='Query'),
  deviceStatus?: string(name='DeviceStatus', example='on', position='Query'),
  dsn?: string(name='Dsn', example='210235C3GN32090008286cf17e130d', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyDeviceChannelsResponseBody = {
  requestId?: string(name='RequestId', example='8F4D95B6-EB19-5245-AD77-95EDA83E53B7'),
}

model ModifyDeviceChannelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDeviceChannelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDeviceChannels  ModifyDeviceChannelsRequest
  * @return ModifyDeviceChannelsResponse
 */
async function modifyDeviceChannels(request: ModifyDeviceChannelsRequest): ModifyDeviceChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeviceChannels', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDirectoryRequest {
  description?: string(name='Description', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='399*****488-cn-qingdao', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyDirectoryResponseBody = {
  id?: string(name='Id', example='399*****488-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ModifyDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDirectory  ModifyDirectoryRequest
  * @return ModifyDirectoryResponse
 */
async function modifyDirectory(request: ModifyDirectoryRequest): ModifyDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGroupRequest {
  callback?: string(name='Callback', example='http://example.com/callback', position='Query'),
  description?: string(name='Description', position='Query'),
  enabled?: boolean(name='Enabled', example='true', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='32388487739092994-cn-qingdao', position='Query'),
  inProtocol?: string(name='InProtocol', example='gb28181', position='Query'),
  lazyPull?: boolean(name='LazyPull', example='false', position='Query'),
  name?: string(name='Name', example='myGroup', position='Query'),
  outProtocol?: string(name='OutProtocol', example='flv,rtmp,hls', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain?: string(name='PlayDomain', example='myplay.com', position='Query'),
  pushDomain?: string(name='PushDomain', example='mypush.com', position='Query'),
  region?: string(name='Region', example='cn-qingdao', position='Query'),
}

model ModifyGroupResponseBody = {
  id?: string(name='Id', example='32388487739092994-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ModifyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyGroup  ModifyGroupRequest
  * @return ModifyGroupResponse
 */
async function modifyGroup(request: ModifyGroupRequest): ModifyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyParentPlatformRequest {
  autoStart?: boolean(name='AutoStart', example='false', position='Query'),
  clientAuth?: boolean(name='ClientAuth', example='true', position='Query'),
  clientPassword?: string(name='ClientPassword', example='admin123', position='Query'),
  clientUsername?: string(name='ClientUsername', example='user01', position='Query'),
  description?: string(name='Description', position='Query'),
  gbId?: string(name='GbId', example='31000*****2170123451', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='359*****374-cn-qingdao', position='Query'),
  ip?: string(name='Ip', example='10.10.10.10', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: long(name='Port', example='5060', position='Query'),
}

model ModifyParentPlatformResponseBody = {
  id?: string(name='Id', example='359*****374-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ModifyParentPlatformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyParentPlatformResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyParentPlatform  ModifyParentPlatformRequest
  * @return ModifyParentPlatformResponse
 */
async function modifyParentPlatform(request: ModifyParentPlatformRequest): ModifyParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRenderingInstanceRequest {
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
  renderingSpec?: string(name='RenderingSpec', example='crs.cp.l1', position='Query'),
  storageSize?: string(name='StorageSize', example='20', position='Query'),
}

model ModifyRenderingInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6DFE7B89-8532-566F-B5CE-924B10FCE7AC'),
}

model ModifyRenderingInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRenderingInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRenderingInstance  ModifyRenderingInstanceRequest
  * @return ModifyRenderingInstanceResponse
 */
async function modifyRenderingInstance(request: ModifyRenderingInstanceRequest): ModifyRenderingInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRenderingInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRenderingInstanceBandwidthRequest {
  maxEgressBandwidth?: int32(name='MaxEgressBandwidth', example='100', position='Query'),
  maxIngressBandwidth?: int32(name='MaxIngressBandwidth', example='100', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model ModifyRenderingInstanceBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ModifyRenderingInstanceBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRenderingInstanceBandwidthResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRenderingInstanceBandwidth  ModifyRenderingInstanceBandwidthRequest
  * @return ModifyRenderingInstanceBandwidthResponse
 */
async function modifyRenderingInstanceBandwidth(request: ModifyRenderingInstanceBandwidthRequest): ModifyRenderingInstanceBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRenderingInstanceBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTemplateRequest {
  callback?: string(name='Callback', example='http://example.com/callback', position='Query'),
  description?: string(name='Description', position='Query'),
  fileFormat?: string(name='FileFormat', example='hls', position='Query'),
  flv?: string(name='Flv', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  hlsM3u8?: string(name='HlsM3u8', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  hlsTs?: string(name='HlsTs', example='osspath/record/{StreamName}/{UnixTimestamp}_{Sequence}', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='323*****998-cn-qingdao', position='Query'),
  interval?: long(name='Interval', example='3600', position='Query'),
  jpgOnDemand?: string(name='JpgOnDemand', example='osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}_ondemand.jpg', position='Query'),
  jpgOverwrite?: string(name='JpgOverwrite', example='osspath/snapshot/{AppName}/{StreamName}.jpg', position='Query'),
  jpgSequence?: string(name='JpgSequence', example='osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}.jpg', position='Query'),
  mp4?: string(name='Mp4', example='osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}', position='Query'),
  name?: string(name='Name', position='Query'),
  ossBucket?: string(name='OssBucket', example='bucketname', position='Query'),
  ossEndpoint?: string(name='OssEndpoint', example='oss-cn-qingdao.aliyuncs.com', position='Query'),
  ossFilePrefix?: string(name='OssFilePrefix', example='oss-prefix', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', example='cn-qingdao', position='Query'),
  retention?: long(name='Retention', example='3', position='Query'),
  transConfigsJSON?: string(name='TransConfigsJSON', example='[{"Fps":25,"Gop":50,"Height":720,"VideoCodec":"h264","Width":1280,"Name":"sd","VideoBitrate":800}]', position='Query'),
  trigger?: string(name='Trigger', example='auto', position='Query'),
}

model ModifyTemplateResponseBody = {
  id?: string(name='Id', example='323*****998-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ModifyTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyTemplate  ModifyTemplateRequest
  * @return ModifyTemplateResponse
 */
async function modifyTemplate(request: ModifyTemplateRequest): ModifyTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTemplate', 'POST', '/', 'json', false, 'json', request);
}

model OpenVsServiceRequest {
}

model OpenVsServiceResponseBody = {
  orderId?: string(name='OrderId', example='150275784'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model OpenVsServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenVsServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenVsService  OpenVsServiceRequest
  * @return OpenVsServiceResponse
 */
async function openVsService(request: OpenVsServiceRequest): OpenVsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenVsService', 'POST', '/', 'json', false, 'json', request);
}

model PushFileRequest {
  fileId: string(name='FileId', description='This parameter is required.', example='f-1671accd4dafdag3er256cvgewt13f7141db2f7', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model PushFileResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model PushFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushFile  PushFileRequest
  * @return PushFileResponse
 */
async function pushFile(request: PushFileRequest): PushFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushFile', 'POST', '/', 'json', false, 'json', request);
}

model RebootRenderingInstanceRequest {
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model RebootRenderingInstanceResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model RebootRenderingInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootRenderingInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RebootRenderingInstance  RebootRenderingInstanceRequest
  * @return RebootRenderingInstanceResponse
 */
async function rebootRenderingInstance(request: RebootRenderingInstanceRequest): RebootRenderingInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootRenderingInstance', 'POST', '/', 'json', false, 'json', request);
}

model RecoverRenderingDataPackageRequest {
  dataPackageId: string(name='DataPackageId', description='This parameter is required.', example='dp-449ea3d16c0841b8bf33ec5bbc86a152', position='Query'),
  loadMode?: string(name='LoadMode', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model RecoverRenderingDataPackageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model RecoverRenderingDataPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverRenderingDataPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecoverRenderingDataPackage  RecoverRenderingDataPackageRequest
  * @return RecoverRenderingDataPackageResponse
 */
async function recoverRenderingDataPackage(request: RecoverRenderingDataPackageRequest): RecoverRenderingDataPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverRenderingDataPackage', 'POST', '/', 'json', false, 'json', request);
}

model RefreshRenderingInstanceStreamingRequest {
  clientInfo?: {
    clientIp?: string(name='ClientIp', example='172.21.128.110'),
    newClient?: boolean(name='NewClient', example='true'),
  }(name='ClientInfo', shrink='json', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model RefreshRenderingInstanceStreamingResponseBody = {
  flowId?: string(name='FlowId', example='792fy125-594c-4dde-ab35-9ff8hrf0a86f'),
  gateway?: string(name='Gateway', example='10.178.208.22'),
  hostname?: string(name='Hostname', example='cn-xxx.ecr.aliyuncs.com'),
  port?: string(name='Port', example='8080'),
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111'),
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model RefreshRenderingInstanceStreamingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshRenderingInstanceStreamingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshRenderingInstanceStreaming  RefreshRenderingInstanceStreamingRequest
  * @return RefreshRenderingInstanceStreamingResponse
 */
async function refreshRenderingInstanceStreaming(request: RefreshRenderingInstanceStreamingRequest): RefreshRenderingInstanceStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshRenderingInstanceStreaming', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseRenderingDataPackageRequest {
  dataPackageId: string(name='DataPackageId', description='This parameter is required.', example='dp-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model ReleaseRenderingDataPackageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='5BEF36E7-3838-5B92-BA32-87DBF1425ABC'),
}

model ReleaseRenderingDataPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseRenderingDataPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseRenderingDataPackage  ReleaseRenderingDataPackageRequest
  * @return ReleaseRenderingDataPackageResponse
 */
async function releaseRenderingDataPackage(request: ReleaseRenderingDataPackageRequest): ReleaseRenderingDataPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseRenderingDataPackage', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseRenderingInstanceRequest {
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model ReleaseRenderingInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ReleaseRenderingInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseRenderingInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseRenderingInstance  ReleaseRenderingInstanceRequest
  * @return ReleaseRenderingInstanceResponse
 */
async function releaseRenderingInstance(request: ReleaseRenderingInstanceRequest): ReleaseRenderingInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseRenderingInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewRenderingInstanceRequest {
  autoRenew?: boolean(name='AutoRenew', example='true', position='Query'),
  period?: string(name='Period', example='1', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model RenewRenderingInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model RenewRenderingInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewRenderingInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewRenderingInstance  RenewRenderingInstanceRequest
  * @return RenewRenderingInstanceResponse
 */
async function renewRenderingInstance(request: RenewRenderingInstanceRequest): RenewRenderingInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewRenderingInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetRenderingInstanceRequest {
  actionName?: string(name='ActionName', example='Reset', position='Query'),
  dataPackageId?: string(name='DataPackageId', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model ResetRenderingInstanceResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ResetRenderingInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetRenderingInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetRenderingInstance  ResetRenderingInstanceRequest
  * @return ResetRenderingInstanceResponse
 */
async function resetRenderingInstance(request: ResetRenderingInstanceRequest): ResetRenderingInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetRenderingInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResumeVsStreamRequest {
  appName: string(name='AppName', description='This parameter is required.', example='xxxxApp', position='Query'),
  controlStreamAction?: string(name='ControlStreamAction', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  liveStreamType: string(name='LiveStreamType', description='This parameter is required.', example='publisher', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  streamName: string(name='StreamName', description='This parameter is required.', example='xxxxStream', position='Query'),
}

model ResumeVsStreamResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model ResumeVsStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeVsStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumeVsStream  ResumeVsStreamRequest
  * @return ResumeVsStreamResponse
 */
async function resumeVsStream(request: ResumeVsStreamRequest): ResumeVsStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeVsStream', 'POST', '/', 'json', false, 'json', request);
}

model SendRenderingInstanceCommandsRequest {
  commands: string(name='Commands', description='This parameter is required.', example='date;ls -l /tmp', position='Body'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model SendRenderingInstanceCommandsResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  result?: string(name='Result', example='Thu Jun 27 16:06:26 CST 2024'),
}

model SendRenderingInstanceCommandsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendRenderingInstanceCommandsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendRenderingInstanceCommands  SendRenderingInstanceCommandsRequest
  * @return SendRenderingInstanceCommandsResponse
 */
async function sendRenderingInstanceCommands(request: SendRenderingInstanceCommandsRequest): SendRenderingInstanceCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendRenderingInstanceCommands', 'POST', '/', 'json', true, 'form', request);
}

model SetPresetRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  presetId: string(name='PresetId', description='This parameter is required.', example='2', position='Query'),
}

model SetPresetResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='30295DF1-1DC7-48BA-BE5A-D58E61EB2375'),
}

model SetPresetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPresetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPreset  SetPresetRequest
  * @return SetPresetResponse
 */
async function setPreset(request: SetPresetRequest): SetPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPreset', 'POST', '/', 'json', false, 'json', request);
}

model SetVsDomainCertificateRequest {
  certName?: string(name='CertName', example='Cert-77****7', position='Query'),
  certType?: string(name='CertType', example='free', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  forceSet?: string(name='ForceSet', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', example='cn-qingdao', position='Query'),
  SSLPri?: string(name='SSLPri', example='xxxxxxx', position='Query'),
  SSLProtocol: string(name='SSLProtocol', description='This parameter is required.', example='on', position='Query'),
  SSLPub?: string(name='SSLPub', example='328uiuii28****82dsada81', position='Query'),
}

model SetVsDomainCertificateResponseBody = {
  requestId?: string(name='RequestId', example='119F7639-4646-51A4-B6C1-300D391C0104'),
}

model SetVsDomainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetVsDomainCertificateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetVsDomainCertificate  SetVsDomainCertificateRequest
  * @return SetVsDomainCertificateResponse
 */
async function setVsDomainCertificate(request: SetVsDomainCertificateRequest): SetVsDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetVsDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetVsStreamsNotifyUrlConfigRequest {
  authKey?: string(name='AuthKey', example='ocs*****ace', position='Query'),
  authType?: string(name='AuthType', example='type_a', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  notifyUrl: string(name='NotifyUrl', description='This parameter is required.', example='http://xxx.com/xx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetVsStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model SetVsStreamsNotifyUrlConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetVsStreamsNotifyUrlConfig  SetVsStreamsNotifyUrlConfigRequest
  * @return SetVsStreamsNotifyUrlConfigResponse
 */
async function setVsStreamsNotifyUrlConfig(request: SetVsStreamsNotifyUrlConfigRequest): SetVsStreamsNotifyUrlConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetVsStreamsNotifyUrlConfig', 'POST', '/', 'json', false, 'json', request);
}

model StartDeviceRequest {
  id: string(name='Id', description='This parameter is required.', example='323884****9092996', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StartDeviceResponseBody = {
  id?: string(name='Id', example='323884****9092996'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StartDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartDevice  StartDeviceRequest
  * @return StartDeviceResponse
 */
async function startDevice(request: StartDeviceRequest): StartDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDevice', 'POST', '/', 'json', false, 'json', request);
}

model StartParentPlatformRequest {
  id: string(name='Id', description='This parameter is required.', example='359*****374-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StartParentPlatformResponseBody = {
  id?: string(name='Id', example='359*****374-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StartParentPlatformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartParentPlatformResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartParentPlatform  StartParentPlatformRequest
  * @return StartParentPlatformResponse
 */
async function startParentPlatform(request: StartParentPlatformRequest): StartParentPlatformResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartParentPlatform', 'POST', '/', 'json', false, 'json', request);
}

model StartPublishStreamRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publishUrl: string(name='PublishUrl', description='This parameter is required.', position='Query'),
}

model StartPublishStreamResponseBody = {
  code?: long(name='Code'),
  message?: long(name='Message'),
  requestId?: string(name='RequestId'),
}

model StartPublishStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartPublishStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartPublishStream  StartPublishStreamRequest
  * @return StartPublishStreamResponse
 */
async function startPublishStream(request: StartPublishStreamRequest): StartPublishStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartPublishStream', 'POST', '/', 'json', false, 'json', request);
}

model StartRecordStreamRequest {
  app?: string(name='App', example='live', position='Query'),
  id?: string(name='Id', example='323*****997-cn-qingdao', position='Query'),
  name?: string(name='Name', example='310000*****000002', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain?: string(name='PlayDomain', example='example.com', position='Query'),
}

model StartRecordStreamResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StartRecordStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartRecordStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartRecordStream  StartRecordStreamRequest
  * @return StartRecordStreamResponse
 */
async function startRecordStream(request: StartRecordStreamRequest): StartRecordStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRecordStream', 'POST', '/', 'json', false, 'json', request);
}

model StartStreamRequest {
  endTime?: long(name='EndTime', example='1599336385', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='323*****997-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: long(name='StartTime', example='1589336385', position='Query'),
}

model StartStreamResponseBody = {
  id?: string(name='Id', example='323*****997-cn-qingdao'),
  name?: string(name='Name', example='31000000000000000002'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StartStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartStream  StartStreamRequest
  * @return StartStreamResponse
 */
async function startStream(request: StartStreamRequest): StartStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartStream', 'POST', '/', 'json', false, 'json', request);
}

model StartTransferStreamRequest {
  id: string(name='Id', description='This parameter is required.', example='323*****998-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  transcode?: string(name='Transcode', example='sd', position='Query'),
  url: string(name='Url', description='This parameter is required.', example='example.com', position='Query'),
}

model StartTransferStreamResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StartTransferStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartTransferStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartTransferStream  StartTransferStreamRequest
  * @return StartTransferStreamResponse
 */
async function startTransferStream(request: StartTransferStreamRequest): StartTransferStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTransferStream', 'POST', '/', 'json', false, 'json', request);
}

model StopAdjustRequest {
  focus?: boolean(name='Focus', example='true', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  iris?: boolean(name='Iris', example='true', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StopAdjustResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StopAdjustResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAdjustResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopAdjust  StopAdjustRequest
  * @return StopAdjustResponse
 */
async function stopAdjust(request: StopAdjustRequest): StopAdjustResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAdjust', 'POST', '/', 'json', false, 'json', request);
}

model StopDeviceRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-12-10T10:00:00Z', position='Query'),
}

model StopDeviceResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StopDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDevice  StopDeviceRequest
  * @return StopDeviceResponse
 */
async function stopDevice(request: StopDeviceRequest): StopDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDevice', 'POST', '/', 'json', false, 'json', request);
}

model StopMoveRequest {
  id: string(name='Id', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pan?: boolean(name='Pan', example='true', position='Query'),
  tilt?: boolean(name='Tilt', example='true', position='Query'),
  zoom?: boolean(name='Zoom', example='true', position='Query'),
}

model StopMoveResponseBody = {
  id?: string(name='Id', example='348*****380-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StopMoveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopMoveResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopMove  StopMoveRequest
  * @return StopMoveResponse
 */
async function stopMove(request: StopMoveRequest): StopMoveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMove', 'POST', '/', 'json', false, 'json', request);
}

model StopPublishStreamRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model StopPublishStreamResponseBody = {
  code?: long(name='Code'),
  message?: long(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopPublishStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopPublishStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopPublishStream  StopPublishStreamRequest
  * @return StopPublishStreamResponse
 */
async function stopPublishStream(request: StopPublishStreamRequest): StopPublishStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopPublishStream', 'POST', '/', 'json', false, 'json', request);
}

model StopRecordStreamRequest {
  app?: string(name='App', example='live', position='Query'),
  id?: string(name='Id', example='323*****997-cn-qingdao', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playDomain?: string(name='PlayDomain', example='example.com', position='Query'),
}

model StopRecordStreamResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StopRecordStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopRecordStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopRecordStream  StopRecordStreamRequest
  * @return StopRecordStreamResponse
 */
async function stopRecordStream(request: StopRecordStreamRequest): StopRecordStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRecordStream', 'POST', '/', 'json', false, 'json', request);
}

model StopStreamRequest {
  id: string(name='Id', description='This parameter is required.', example='32388487****92997-cn-qingdao', position='Query'),
  name?: string(name='Name', example='31000000*****0000002', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-12-12T10:00:00Z', position='Query'),
}

model StopStreamResponseBody = {
  id?: string(name='Id', example='32388487****92997-cn-qingdao'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StopStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopStream  StopStreamRequest
  * @return StopStreamResponse
 */
async function stopStream(request: StopStreamRequest): StopStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopStream', 'POST', '/', 'json', false, 'json', request);
}

model StopTransferStreamRequest {
  id: string(name='Id', description='This parameter is required.', example='323434****83423432', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  transcode?: string(name='Transcode', example='sd', position='Query'),
}

model StopTransferStreamResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model StopTransferStreamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTransferStreamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopTransferStream  StopTransferStreamRequest
  * @return StopTransferStreamResponse
 */
async function stopTransferStream(request: StopTransferStreamRequest): StopTransferStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTransferStream', 'POST', '/', 'json', false, 'json', request);
}

model SyncCatalogsRequest {
  id: string(name='Id', description='This parameter is required.', example='3238****739092996', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SyncCatalogsResponseBody = {
  id?: string(name='Id', example='3238****739092996'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model SyncCatalogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncCatalogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncCatalogs  SyncCatalogsRequest
  * @return SyncCatalogsResponse
 */
async function syncCatalogs(request: SyncCatalogsRequest): SyncCatalogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncCatalogs', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDirectoryRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='34871************3380-cn-qingdao', position='Query'),
  directoryId: string(name='DirectoryId', description='This parameter is required.', example='3998**************9488-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UnbindDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UnbindDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindDirectory  UnbindDirectoryRequest
  * @return UnbindDirectoryResponse
 */
async function unbindDirectory(request: UnbindDirectoryRequest): UnbindDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDirectory', 'POST', '/', 'json', false, 'json', request);
}

model UnbindParentPlatformDeviceRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='348*****380-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parentPlatformId: string(name='ParentPlatformId', description='This parameter is required.', example='361*****212-cn-qingdao', position='Query'),
}

model UnbindParentPlatformDeviceResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UnbindParentPlatformDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindParentPlatformDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindParentPlatformDevice  UnbindParentPlatformDeviceRequest
  * @return UnbindParentPlatformDeviceResponse
 */
async function unbindParentPlatformDevice(request: UnbindParentPlatformDeviceRequest): UnbindParentPlatformDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindParentPlatformDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnbindPurchasedDeviceRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='3939*****6580539-cn-qingdao', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UnbindPurchasedDeviceResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UnbindPurchasedDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindPurchasedDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindPurchasedDevice  UnbindPurchasedDeviceRequest
  * @return UnbindPurchasedDeviceResponse
 */
async function unbindPurchasedDevice(request: UnbindPurchasedDeviceRequest): UnbindPurchasedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindPurchasedDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnbindTemplateRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='323*****994-cn-qingdao', position='Query'),
  instanceType: string(name='InstanceType', description='This parameter is required.', example='group', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  templateId?: string(name='TemplateId', example='323*****998-cn-qingdao', position='Query'),
  templateType?: string(name='TemplateType', example='record', position='Query'),
}

model UnbindTemplateResponseBody = {
  instanceId?: string(name='InstanceId', example='323*****994-cn-qingdao'),
  instanceType?: string(name='InstanceType', example='group'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  templateId?: string(name='TemplateId', example='323*****998-cn-qingdao'),
  templateType?: string(name='TemplateType', example='record'),
}

model UnbindTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindTemplate  UnbindTemplateRequest
  * @return UnbindTemplateResponse
 */
async function unbindTemplate(request: UnbindTemplateRequest): UnbindTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UninstallCloudAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb', position='Query'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model UninstallCloudAppResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UninstallCloudAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallCloudAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UninstallCloudApp  UninstallCloudAppRequest
  * @return UninstallCloudAppResponse
 */
async function uninstallCloudApp(request: UninstallCloudAppRequest): UninstallCloudAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallCloudApp', 'POST', '/', 'json', false, 'json', request);
}

model UnlockDeviceRequest {
  id: string(name='Id', description='This parameter is required.', example='323884****9092996', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UnlockDeviceResponseBody = {
  id?: string(name='Id', example='323884****9092996'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UnlockDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnlockDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnlockDevice  UnlockDeviceRequest
  * @return UnlockDeviceResponse
 */
async function unlockDevice(request: UnlockDeviceRequest): UnlockDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockDevice', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCloudAppInfoRequest {
  appId: string(name='AppId', description='This parameter is required.', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb', position='Query'),
  description: string(name='Description', description='This parameter is required.', maxLength=255, position='Query'),
}

model UpdateCloudAppInfoResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UpdateCloudAppInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCloudAppInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCloudAppInfo  UpdateCloudAppInfoRequest
  * @return UpdateCloudAppInfoResponse
 */
async function updateCloudAppInfo(request: UpdateCloudAppInfoRequest): UpdateCloudAppInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCloudAppInfo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFileInfoRequest {
  description: string(name='Description', description='This parameter is required.', maxLength=255, position='Query'),
  fileId: string(name='FileId', description='This parameter is required.', example='f-16713accddtgtj6340jgnclhwsg1813f718db2f7', position='Query'),
}

model UpdateFileInfoResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UpdateFileInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFileInfo  UpdateFileInfoRequest
  * @return UpdateFileInfoResponse
 */
async function updateFileInfo(request: UpdateFileInfoRequest): UpdateFileInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileInfo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRenderingInstanceConfigurationRequest {
  configuration: [ 
    {
      attributes: [ 
        {
          name: string(name='Name', description='This parameter is required.', example='lon'),
          value: any(name='Value', description='This parameter is required.', example='100'),
        }
      ](name='Attributes', description='This parameter is required.'),
      moduleName: string(name='ModuleName', description='This parameter is required.', example='location'),
    }
  ](name='Configuration', description='This parameter is required.', shrink='json', position='Body'),
  renderingInstanceId: string(name='RenderingInstanceId', description='This parameter is required.', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
}

model UpdateRenderingInstanceConfigurationResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UpdateRenderingInstanceConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRenderingInstanceConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRenderingInstanceConfiguration  UpdateRenderingInstanceConfigurationRequest
  * @return UpdateRenderingInstanceConfigurationResponse
 */
async function updateRenderingInstanceConfiguration(request: UpdateRenderingInstanceConfigurationRequest): UpdateRenderingInstanceConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRenderingInstanceConfiguration', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRenderingInstanceSettingsRequest {
  renderingInstanceId?: string(name='RenderingInstanceId', example='render-9f8c57355d224ad7beaf95e145f22111', position='Query'),
  settings?: [ 
    {
      attributeName?: string(name='AttributeName', example='navbar.hide'),
      attributeValue?: string(name='AttributeValue', example='1'),
    }
  ](name='Settings', shrink='json', position='Query'),
}

model UpdateRenderingInstanceSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UpdateRenderingInstanceSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRenderingInstanceSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRenderingInstanceSettings  UpdateRenderingInstanceSettingsRequest
  * @return UpdateRenderingInstanceSettingsResponse
 */
async function updateRenderingInstanceSettings(request: UpdateRenderingInstanceSettingsRequest): UpdateRenderingInstanceSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRenderingInstanceSettings', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVsPullStreamInfoConfigRequest {
  always?: string(name='Always', position='Query'),
  appName: string(name='AppName', description='This parameter is required.', example='xxxApp', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  endTime?: string(name='EndTime', example='2018-12-10T18:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sourceUrl: string(name='SourceUrl', description='This parameter is required.', example='up.xxx.com.cn', position='Query'),
  startTime?: string(name='StartTime', example='2021-12-10T10:00:00Z', position='Query'),
  streamName: string(name='StreamName', description='This parameter is required.', example='xxxStream', position='Query'),
}

model UpdateVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UpdateVsPullStreamInfoConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVsPullStreamInfoConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVsPullStreamInfoConfig  UpdateVsPullStreamInfoConfigRequest
  * @return UpdateVsPullStreamInfoConfigResponse
 */
async function updateVsPullStreamInfoConfig(request: UpdateVsPullStreamInfoConfigRequest): UpdateVsPullStreamInfoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVsPullStreamInfoConfig', 'POST', '/', 'json', false, 'json', request);
}

model UploadCloudAppRequest {
  appName: string(name='AppName', description='This parameter is required.', example='com.aaa.bbb', minLength=8, maxLength=255, position='Query'),
  appVersion: string(name='AppVersion', description='This parameter is required.', example='1.1.1', minLength=1, maxLength=255, position='Query'),
  description?: string(name='Description', maxLength=255, position='Query'),
  downloadUrl: string(name='DownloadUrl', description='This parameter is required.', example='https://xxx.xxx.xxx.apk', position='Query'),
  md5: string(name='Md5', description='This parameter is required.', example='0CFBB7BD10CDD7279642ADAB8FEF3DEE', position='Query'),
}

model UploadCloudAppResponseBody = {
  appId?: string(name='AppId', example='cap-b06b26edfhytbn b94a75ae1a79efc90eb'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UploadCloudAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadCloudAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadCloudApp  UploadCloudAppRequest
  * @return UploadCloudAppResponse
 */
async function uploadCloudApp(request: UploadCloudAppRequest): UploadCloudAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadCloudApp', 'POST', '/', 'json', false, 'json', request);
}

model UploadFileRequest {
  description?: string(name='Description', maxLength=255, position='Query'),
  fileName: string(name='FileName', description='This parameter is required.', example='mytest', minLength=8, maxLength=255, position='Query'),
  md5: string(name='Md5', description='This parameter is required.', example='150b6083f50dd08159d45a0d5e4b56f9', position='Query'),
  originUrl: string(name='OriginUrl', description='This parameter is required.', example='https://xxx.xxx.xxx.tar', position='Query'),
  targetPath: string(name='TargetPath', description='This parameter is required.', example='/data/tmp/test/xxx.tar', position='Query'),
}

model UploadFileResponseBody = {
  fileId?: string(name='FileId', example='f-1671330gr7934d4771813f7141d28db2f7'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UploadFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadFile  UploadFileRequest
  * @return UploadFileResponse
 */
async function uploadFile(request: UploadFileRequest): UploadFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadFile', 'POST', '/', 'json', false, 'json', request);
}

model UploadPublicKeyRequest {
  content: string(name='Content', description='This parameter is required.', example='verify_dffeb6610035dcb77b413a59c3*****', position='Query'),
  description?: string(name='Description', maxLength=255, position='Query'),
  keyGroup?: string(name='KeyGroup', example='g-test', position='Query'),
  keyName: string(name='KeyName', description='This parameter is required.', example='mykey-v1.0', minLength=8, maxLength=255, position='Query'),
  keyType?: string(name='KeyType', position='Query'),
}

model UploadPublicKeyResponseBody = {
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model UploadPublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadPublicKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadPublicKey  UploadPublicKeyRequest
  * @return UploadPublicKeyResponse
 */
async function uploadPublicKey(request: UploadPublicKeyRequest): UploadPublicKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadPublicKey', 'POST', '/', 'json', false, 'json', request);
}

model VerifyVsDomainOwnerRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='example.aliyundoc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  verifyType: string(name='VerifyType', description='This parameter is required.', example='dnsCheck', position='Query'),
}

model VerifyVsDomainOwnerResponseBody = {
  content?: string(name='Content', example='verify_dffeb6610035dcb77b413a59c32c****'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model VerifyVsDomainOwnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyVsDomainOwnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyVsDomainOwner  VerifyVsDomainOwnerRequest
  * @return VerifyVsDomainOwnerResponse
 */
async function verifyVsDomainOwner(request: VerifyVsDomainOwnerRequest): VerifyVsDomainOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyVsDomainOwner', 'POST', '/', 'json', false, 'json', request);
}

