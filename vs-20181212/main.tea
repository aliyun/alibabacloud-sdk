/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('vs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDeviceRequest {
  config?: string(name='Config'),
  groupId?: string(name='GroupId'),
  ownerId?: long(name='OwnerId'),
  protocol?: string(name='Protocol'),
}

model AddDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model AddDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddDeviceResponseBody(name='body'),
}

async function addDeviceWithOptions(request: AddDeviceRequest, runtime: Util.RuntimeOptions): AddDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDevice(request: AddDeviceRequest): AddDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDeviceWithOptions(request, runtime);
}

model AddRegisteredDeviceRequest {
  dsn?: string(name='Dsn'),
  ownerId?: long(name='OwnerId'),
  registerCode?: string(name='RegisterCode'),
  secretKey?: string(name='SecretKey'),
  vendor?: string(name='Vendor'),
}

model AddRegisteredDeviceResponseBody = {
  dsn?: string(name='Dsn'),
  id?: string(name='Id'),
  registerCode?: string(name='RegisterCode'),
  requestId?: string(name='RequestId'),
  secretKey?: string(name='SecretKey'),
  vendor?: string(name='Vendor'),
}

model AddRegisteredDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddRegisteredDeviceResponseBody(name='body'),
}

async function addRegisteredDeviceWithOptions(request: AddRegisteredDeviceRequest, runtime: Util.RuntimeOptions): AddRegisteredDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dsn)) {
    query['Dsn'] = request.dsn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.registerCode)) {
    query['RegisterCode'] = request.registerCode;
  }
  if (!Util.isUnset(request.secretKey)) {
    query['SecretKey'] = request.secretKey;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddRegisteredDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRegisteredDevice(request: AddRegisteredDeviceRequest): AddRegisteredDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRegisteredDeviceWithOptions(request, runtime);
}

model AddRegisteredVendorRequest {
  description?: string(name='Description'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model AddRegisteredVendorResponseBody = {
  description?: string(name='Description'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  vendor?: string(name='Vendor'),
}

model AddRegisteredVendorResponse = {
  headers: map[string]string(name='headers'),
  body: AddRegisteredVendorResponseBody(name='body'),
}

async function addRegisteredVendorWithOptions(request: AddRegisteredVendorRequest, runtime: Util.RuntimeOptions): AddRegisteredVendorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddRegisteredVendor',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRegisteredVendor(request: AddRegisteredVendorRequest): AddRegisteredVendorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRegisteredVendorWithOptions(request, runtime);
}

model AddRenderingDeviceInternetPortsRequest {
  ISP?: string(name='ISP'),
  instanceIds?: string(name='InstanceIds'),
  internalPort?: string(name='InternalPort'),
  ipProtocol?: string(name='IpProtocol'),
  ownerId?: long(name='OwnerId'),
}

model AddRenderingDeviceInternetPortsResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model AddRenderingDeviceInternetPortsResponse = {
  headers: map[string]string(name='headers'),
  body: AddRenderingDeviceInternetPortsResponseBody(name='body'),
}

async function addRenderingDeviceInternetPortsWithOptions(request: AddRenderingDeviceInternetPortsRequest, runtime: Util.RuntimeOptions): AddRenderingDeviceInternetPortsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddRenderingDeviceInternetPorts',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRenderingDeviceInternetPorts(request: AddRenderingDeviceInternetPortsRequest): AddRenderingDeviceInternetPortsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRenderingDeviceInternetPortsWithOptions(request, runtime);
}

model AddVsPullStreamInfoConfigRequest {
  always?: string(name='Always'),
  appName?: string(name='AppName'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  sourceUrl?: string(name='SourceUrl'),
  startTime?: string(name='StartTime'),
  streamName?: string(name='StreamName'),
}

model AddVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVsPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddVsPullStreamInfoConfigResponseBody(name='body'),
}

async function addVsPullStreamInfoConfigWithOptions(request: AddVsPullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): AddVsPullStreamInfoConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.always)) {
    query['Always'] = request.always;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sourceUrl)) {
    query['SourceUrl'] = request.sourceUrl;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.streamName)) {
    query['StreamName'] = request.streamName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddVsPullStreamInfoConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addVsPullStreamInfoConfig(request: AddVsPullStreamInfoConfigRequest): AddVsPullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVsPullStreamInfoConfigWithOptions(request, runtime);
}

model BatchBindDirectoriesRequest {
  deviceId?: string(name='DeviceId'),
  directoryId?: string(name='DirectoryId'),
  ownerId?: long(name='OwnerId'),
}

model BatchBindDirectoriesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      directoryId?: string(name='DirectoryId'),
      error?: string(name='Error'),
    }
  ](name='Results'),
}

model BatchBindDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindDirectoriesResponseBody(name='body'),
}

async function batchBindDirectoriesWithOptions(request: BatchBindDirectoriesRequest, runtime: Util.RuntimeOptions): BatchBindDirectoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindDirectories',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindDirectories(request: BatchBindDirectoriesRequest): BatchBindDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindDirectoriesWithOptions(request, runtime);
}

model BatchBindParentPlatformDevicesRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
  parentPlatformId?: string(name='ParentPlatformId'),
}

model BatchBindParentPlatformDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      error?: string(name='Error'),
      parentPlatformId?: string(name='ParentPlatformId'),
    }
  ](name='Results'),
}

model BatchBindParentPlatformDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindParentPlatformDevicesResponseBody(name='body'),
}

async function batchBindParentPlatformDevicesWithOptions(request: BatchBindParentPlatformDevicesRequest, runtime: Util.RuntimeOptions): BatchBindParentPlatformDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parentPlatformId)) {
    query['ParentPlatformId'] = request.parentPlatformId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindParentPlatformDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindParentPlatformDevices(request: BatchBindParentPlatformDevicesRequest): BatchBindParentPlatformDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindParentPlatformDevicesWithOptions(request, runtime);
}

model BatchBindPurchasedDevicesRequest {
  deviceId?: string(name='DeviceId'),
  groupId?: string(name='GroupId'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
}

model BatchBindPurchasedDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      error?: string(name='Error'),
      groupId?: string(name='GroupId'),
      region?: string(name='Region'),
    }
  ](name='Results'),
}

model BatchBindPurchasedDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindPurchasedDevicesResponseBody(name='body'),
}

async function batchBindPurchasedDevicesWithOptions(request: BatchBindPurchasedDevicesRequest, runtime: Util.RuntimeOptions): BatchBindPurchasedDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindPurchasedDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindPurchasedDevices(request: BatchBindPurchasedDevicesRequest): BatchBindPurchasedDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindPurchasedDevicesWithOptions(request, runtime);
}

model BatchBindTemplateRequest {
  applyAll?: boolean(name='ApplyAll'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  replace?: boolean(name='Replace'),
  templateId?: string(name='TemplateId'),
}

model BatchBindTemplateResponseBody = {
  bindings?: [ 
    {
      error?: string(name='Error'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      templateId?: string(name='TemplateId'),
    }
  ](name='Bindings'),
  requestId?: string(name='RequestId'),
}

model BatchBindTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindTemplateResponseBody(name='body'),
}

async function batchBindTemplateWithOptions(request: BatchBindTemplateRequest, runtime: Util.RuntimeOptions): BatchBindTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyAll)) {
    query['ApplyAll'] = request.applyAll;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.replace)) {
    query['Replace'] = request.replace;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindTemplate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindTemplate(request: BatchBindTemplateRequest): BatchBindTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindTemplateWithOptions(request, runtime);
}

model BatchBindTemplatesRequest {
  applyAll?: boolean(name='ApplyAll'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  replace?: boolean(name='Replace'),
  templateId?: string(name='TemplateId'),
  templateType?: string(name='TemplateType'),
}

model BatchBindTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      templateId?: string(name='TemplateId'),
    }
  ](name='Results'),
}

model BatchBindTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindTemplatesResponseBody(name='body'),
}

async function batchBindTemplatesWithOptions(request: BatchBindTemplatesRequest, runtime: Util.RuntimeOptions): BatchBindTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyAll)) {
    query['ApplyAll'] = request.applyAll;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.replace)) {
    query['Replace'] = request.replace;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindTemplates',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindTemplates(request: BatchBindTemplatesRequest): BatchBindTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindTemplatesWithOptions(request, runtime);
}

model BatchDeleteDevicesRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model BatchDeleteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      id?: string(name='Id'),
    }
  ](name='Results'),
}

model BatchDeleteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDevicesResponseBody(name='body'),
}

async function batchDeleteDevicesWithOptions(request: BatchDeleteDevicesRequest, runtime: Util.RuntimeOptions): BatchDeleteDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteDevices(request: BatchDeleteDevicesRequest): BatchDeleteDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteDevicesWithOptions(request, runtime);
}

model BatchDeleteVsDomainConfigsRequest {
  domainNames?: string(name='DomainNames'),
  functionNames?: string(name='FunctionNames'),
  ownerId?: long(name='OwnerId'),
}

model BatchDeleteVsDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteVsDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteVsDomainConfigsResponseBody(name='body'),
}

async function batchDeleteVsDomainConfigsWithOptions(request: BatchDeleteVsDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchDeleteVsDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteVsDomainConfigs',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteVsDomainConfigs(request: BatchDeleteVsDomainConfigsRequest): BatchDeleteVsDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteVsDomainConfigsWithOptions(request, runtime);
}

model BatchForbidVsStreamRequest {
  channel?: string(name='Channel'),
  controlStreamAction?: string(name='ControlStreamAction'),
  domainName?: string(name='DomainName'),
  liveStreamType?: string(name='LiveStreamType'),
  oneshot?: string(name='Oneshot'),
  ownerId?: long(name='OwnerId'),
  resumeTime?: string(name='ResumeTime'),
}

model BatchForbidVsStreamResponseBody = {
  forbidResult?: {
    forbidResultInfo?: [ 
    {
      channels?: {
        channel?: [ string ](name='Channel')
      }(name='Channels'),
      count?: int32(name='Count'),
      detail?: string(name='Detail'),
      result?: string(name='Result'),
    }
  ](name='ForbidResultInfo')
  }(name='ForbidResult'),
  requestId?: string(name='RequestId'),
}

model BatchForbidVsStreamResponse = {
  headers: map[string]string(name='headers'),
  body: BatchForbidVsStreamResponseBody(name='body'),
}

async function batchForbidVsStreamWithOptions(request: BatchForbidVsStreamRequest, runtime: Util.RuntimeOptions): BatchForbidVsStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.controlStreamAction)) {
    query['ControlStreamAction'] = request.controlStreamAction;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.liveStreamType)) {
    query['LiveStreamType'] = request.liveStreamType;
  }
  if (!Util.isUnset(request.oneshot)) {
    query['Oneshot'] = request.oneshot;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resumeTime)) {
    query['ResumeTime'] = request.resumeTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchForbidVsStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchForbidVsStream(request: BatchForbidVsStreamRequest): BatchForbidVsStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchForbidVsStreamWithOptions(request, runtime);
}

model BatchResumeVsStreamRequest {
  channel?: string(name='Channel'),
  controlStreamAction?: string(name='ControlStreamAction'),
  domainName?: string(name='DomainName'),
  liveStreamType?: string(name='LiveStreamType'),
  ownerId?: long(name='OwnerId'),
}

model BatchResumeVsStreamResponseBody = {
  requestId?: string(name='RequestId'),
  resumeResult?: {
    resumeResultInfo?: [ 
    {
      channels?: {
        channel?: [ string ](name='Channel')
      }(name='Channels'),
      count?: int32(name='Count'),
      detail?: string(name='Detail'),
      result?: string(name='Result'),
    }
  ](name='ResumeResultInfo')
  }(name='ResumeResult'),
}

model BatchResumeVsStreamResponse = {
  headers: map[string]string(name='headers'),
  body: BatchResumeVsStreamResponseBody(name='body'),
}

async function batchResumeVsStreamWithOptions(request: BatchResumeVsStreamRequest, runtime: Util.RuntimeOptions): BatchResumeVsStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.controlStreamAction)) {
    query['ControlStreamAction'] = request.controlStreamAction;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.liveStreamType)) {
    query['LiveStreamType'] = request.liveStreamType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchResumeVsStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchResumeVsStream(request: BatchResumeVsStreamRequest): BatchResumeVsStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchResumeVsStreamWithOptions(request, runtime);
}

model BatchSetVsDomainConfigsRequest {
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
  ownerId?: long(name='OwnerId'),
}

model BatchSetVsDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetVsDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetVsDomainConfigsResponseBody(name='body'),
}

async function batchSetVsDomainConfigsWithOptions(request: BatchSetVsDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetVsDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetVsDomainConfigs',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetVsDomainConfigs(request: BatchSetVsDomainConfigsRequest): BatchSetVsDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetVsDomainConfigsWithOptions(request, runtime);
}

model BatchStartDevicesRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model BatchStartDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      id?: string(name='Id'),
      streams?: [ 
        {
          error?: string(name='Error'),
          id?: string(name='Id'),
          name?: string(name='Name'),
        }
      ](name='Streams'),
    }
  ](name='Results'),
}

model BatchStartDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartDevicesResponseBody(name='body'),
}

async function batchStartDevicesWithOptions(request: BatchStartDevicesRequest, runtime: Util.RuntimeOptions): BatchStartDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStartDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchStartDevices(request: BatchStartDevicesRequest): BatchStartDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartDevicesWithOptions(request, runtime);
}

model BatchStartStreamsRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model BatchStartStreamsResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Results'),
}

model BatchStartStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartStreamsResponseBody(name='body'),
}

async function batchStartStreamsWithOptions(request: BatchStartStreamsRequest, runtime: Util.RuntimeOptions): BatchStartStreamsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStartStreams',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchStartStreams(request: BatchStartStreamsRequest): BatchStartStreamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartStreamsWithOptions(request, runtime);
}

model BatchStopDevicesRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model BatchStopDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      id?: string(name='Id'),
      streams?: [ 
        {
          error?: string(name='Error'),
          id?: string(name='Id'),
          name?: string(name='Name'),
        }
      ](name='Streams'),
    }
  ](name='Results'),
}

model BatchStopDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopDevicesResponseBody(name='body'),
}

async function batchStopDevicesWithOptions(request: BatchStopDevicesRequest, runtime: Util.RuntimeOptions): BatchStopDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStopDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchStopDevices(request: BatchStopDevicesRequest): BatchStopDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopDevicesWithOptions(request, runtime);
}

model BatchStopStreamsRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model BatchStopStreamsResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Results'),
}

model BatchStopStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopStreamsResponseBody(name='body'),
}

async function batchStopStreamsWithOptions(request: BatchStopStreamsRequest, runtime: Util.RuntimeOptions): BatchStopStreamsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStopStreams',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchStopStreams(request: BatchStopStreamsRequest): BatchStopStreamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopStreamsWithOptions(request, runtime);
}

model BatchUnbindDirectoriesRequest {
  deviceId?: string(name='DeviceId'),
  directoryId?: string(name='DirectoryId'),
  ownerId?: long(name='OwnerId'),
}

model BatchUnbindDirectoriesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      directoryId?: string(name='DirectoryId'),
      error?: string(name='Error'),
    }
  ](name='Results'),
}

model BatchUnbindDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindDirectoriesResponseBody(name='body'),
}

async function batchUnbindDirectoriesWithOptions(request: BatchUnbindDirectoriesRequest, runtime: Util.RuntimeOptions): BatchUnbindDirectoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindDirectories',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindDirectories(request: BatchUnbindDirectoriesRequest): BatchUnbindDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindDirectoriesWithOptions(request, runtime);
}

model BatchUnbindParentPlatformDevicesRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
  parentPlatformId?: string(name='ParentPlatformId'),
}

model BatchUnbindParentPlatformDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      error?: string(name='Error'),
      parentPlatformId?: string(name='ParentPlatformId'),
    }
  ](name='Results'),
}

model BatchUnbindParentPlatformDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindParentPlatformDevicesResponseBody(name='body'),
}

async function batchUnbindParentPlatformDevicesWithOptions(request: BatchUnbindParentPlatformDevicesRequest, runtime: Util.RuntimeOptions): BatchUnbindParentPlatformDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parentPlatformId)) {
    query['ParentPlatformId'] = request.parentPlatformId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindParentPlatformDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindParentPlatformDevices(request: BatchUnbindParentPlatformDevicesRequest): BatchUnbindParentPlatformDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindParentPlatformDevicesWithOptions(request, runtime);
}

model BatchUnbindPurchasedDevicesRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
}

model BatchUnbindPurchasedDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      deviceId?: string(name='DeviceId'),
      error?: string(name='Error'),
    }
  ](name='Results'),
}

model BatchUnbindPurchasedDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindPurchasedDevicesResponseBody(name='body'),
}

async function batchUnbindPurchasedDevicesWithOptions(request: BatchUnbindPurchasedDevicesRequest, runtime: Util.RuntimeOptions): BatchUnbindPurchasedDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindPurchasedDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindPurchasedDevices(request: BatchUnbindPurchasedDevicesRequest): BatchUnbindPurchasedDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindPurchasedDevicesWithOptions(request, runtime);
}

model BatchUnbindTemplateRequest {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  templateId?: string(name='TemplateId'),
  templateType?: string(name='TemplateType'),
}

model BatchUnbindTemplateResponseBody = {
  bindings?: [ 
    {
      error?: string(name='Error'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      templateId?: string(name='TemplateId'),
    }
  ](name='Bindings'),
  requestId?: string(name='RequestId'),
}

model BatchUnbindTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindTemplateResponseBody(name='body'),
}

async function batchUnbindTemplateWithOptions(request: BatchUnbindTemplateRequest, runtime: Util.RuntimeOptions): BatchUnbindTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindTemplate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindTemplate(request: BatchUnbindTemplateRequest): BatchUnbindTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindTemplateWithOptions(request, runtime);
}

model BatchUnbindTemplatesRequest {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  templateId?: string(name='TemplateId'),
  templateType?: string(name='TemplateType'),
}

model BatchUnbindTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      error?: string(name='Error'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      templateId?: string(name='TemplateId'),
      templateType?: string(name='TemplateType'),
    }
  ](name='Results'),
}

model BatchUnbindTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindTemplatesResponseBody(name='body'),
}

async function batchUnbindTemplatesWithOptions(request: BatchUnbindTemplatesRequest, runtime: Util.RuntimeOptions): BatchUnbindTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindTemplates',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindTemplates(request: BatchUnbindTemplatesRequest): BatchUnbindTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindTemplatesWithOptions(request, runtime);
}

model BindDirectoryRequest {
  deviceId?: string(name='DeviceId'),
  directoryId?: string(name='DirectoryId'),
  ownerId?: long(name='OwnerId'),
}

model BindDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: BindDirectoryResponseBody(name='body'),
}

async function bindDirectoryWithOptions(request: BindDirectoryRequest, runtime: Util.RuntimeOptions): BindDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindDirectory',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindDirectory(request: BindDirectoryRequest): BindDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindDirectoryWithOptions(request, runtime);
}

model BindParentPlatformDeviceRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
  parentPlatformId?: string(name='ParentPlatformId'),
}

model BindParentPlatformDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindParentPlatformDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindParentPlatformDeviceResponseBody(name='body'),
}

async function bindParentPlatformDeviceWithOptions(request: BindParentPlatformDeviceRequest, runtime: Util.RuntimeOptions): BindParentPlatformDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parentPlatformId)) {
    query['ParentPlatformId'] = request.parentPlatformId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindParentPlatformDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindParentPlatformDevice(request: BindParentPlatformDeviceRequest): BindParentPlatformDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindParentPlatformDeviceWithOptions(request, runtime);
}

model BindPurchasedDeviceRequest {
  deviceId?: string(name='DeviceId'),
  groupId?: string(name='GroupId'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
}

model BindPurchasedDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindPurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindPurchasedDeviceResponseBody(name='body'),
}

async function bindPurchasedDeviceWithOptions(request: BindPurchasedDeviceRequest, runtime: Util.RuntimeOptions): BindPurchasedDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindPurchasedDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindPurchasedDevice(request: BindPurchasedDeviceRequest): BindPurchasedDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindPurchasedDeviceWithOptions(request, runtime);
}

model BindTemplateRequest {
  applyAll?: boolean(name='ApplyAll'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  replace?: boolean(name='Replace'),
  templateId?: string(name='TemplateId'),
  templateType?: string(name='TemplateType'),
}

model BindTemplateResponseBody = {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model BindTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: BindTemplateResponseBody(name='body'),
}

async function bindTemplateWithOptions(request: BindTemplateRequest, runtime: Util.RuntimeOptions): BindTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyAll)) {
    query['ApplyAll'] = request.applyAll;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.replace)) {
    query['Replace'] = request.replace;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindTemplate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindTemplate(request: BindTemplateRequest): BindTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindTemplateWithOptions(request, runtime);
}

model CaptureDeviceSnapshotRequest {
  deviceId?: string(name='DeviceId'),
  mode?: string(name='Mode'),
  ownerId?: long(name='OwnerId'),
  snapshotConfig?: string(name='SnapshotConfig'),
  streamId?: string(name='StreamId'),
}

model CaptureDeviceSnapshotResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CaptureDeviceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CaptureDeviceSnapshotResponseBody(name='body'),
}

async function captureDeviceSnapshotWithOptions(request: CaptureDeviceSnapshotRequest, runtime: Util.RuntimeOptions): CaptureDeviceSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.snapshotConfig)) {
    query['SnapshotConfig'] = request.snapshotConfig;
  }
  if (!Util.isUnset(request.streamId)) {
    query['StreamId'] = request.streamId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CaptureDeviceSnapshot',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function captureDeviceSnapshot(request: CaptureDeviceSnapshotRequest): CaptureDeviceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return captureDeviceSnapshotWithOptions(request, runtime);
}

model ContinuousAdjustRequest {
  focus?: string(name='Focus'),
  id?: string(name='Id'),
  iris?: string(name='Iris'),
  ownerId?: long(name='OwnerId'),
}

model ContinuousAdjustResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ContinuousAdjustResponse = {
  headers: map[string]string(name='headers'),
  body: ContinuousAdjustResponseBody(name='body'),
}

async function continuousAdjustWithOptions(request: ContinuousAdjustRequest, runtime: Util.RuntimeOptions): ContinuousAdjustResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.focus)) {
    query['Focus'] = request.focus;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.iris)) {
    query['Iris'] = request.iris;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ContinuousAdjust',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function continuousAdjust(request: ContinuousAdjustRequest): ContinuousAdjustResponse {
  var runtime = new Util.RuntimeOptions{};
  return continuousAdjustWithOptions(request, runtime);
}

model ContinuousMoveRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  pan?: string(name='Pan'),
  tilt?: string(name='Tilt'),
  zoom?: string(name='Zoom'),
}

model ContinuousMoveResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ContinuousMoveResponse = {
  headers: map[string]string(name='headers'),
  body: ContinuousMoveResponseBody(name='body'),
}

async function continuousMoveWithOptions(request: ContinuousMoveRequest, runtime: Util.RuntimeOptions): ContinuousMoveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pan)) {
    query['Pan'] = request.pan;
  }
  if (!Util.isUnset(request.tilt)) {
    query['Tilt'] = request.tilt;
  }
  if (!Util.isUnset(request.zoom)) {
    query['Zoom'] = request.zoom;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ContinuousMove',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function continuousMove(request: ContinuousMoveRequest): ContinuousMoveResponse {
  var runtime = new Util.RuntimeOptions{};
  return continuousMoveWithOptions(request, runtime);
}

model CreateAIConfigRequest {
  captureInterval?: int32(name='CaptureInterval'),
  configs?: string(name='Configs'),
  description?: string(name='Description'),
  endTime?: long(name='EndTime'),
  features?: string(name='Features'),
  instanceId?: long(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
}

model CreateAIConfigResponseBody = {
  configId?: string(name='ConfigId'),
  requestId?: string(name='RequestId'),
}

model CreateAIConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAIConfigResponseBody(name='body'),
}

async function createAIConfigWithOptions(request: CreateAIConfigRequest, runtime: Util.RuntimeOptions): CreateAIConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.captureInterval)) {
    query['CaptureInterval'] = request.captureInterval;
  }
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.features)) {
    query['Features'] = request.features;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAIConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAIConfig(request: CreateAIConfigRequest): CreateAIConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAIConfigWithOptions(request, runtime);
}

model CreateClusterRequest {
  description?: string(name='Description'),
  internalPorts?: string(name='InternalPorts'),
  maintainTime?: string(name='MaintainTime'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createClusterWithOptions(request: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.internalPorts)) {
    query['InternalPorts'] = request.internalPorts;
  }
  if (!Util.isUnset(request.maintainTime)) {
    query['MaintainTime'] = request.maintainTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model CreateDeviceRequest {
  alarmMethod?: string(name='AlarmMethod'),
  autoPos?: boolean(name='AutoPos'),
  autoStart?: boolean(name='AutoStart'),
  description?: string(name='Description'),
  directoryId?: string(name='DirectoryId'),
  dsn?: string(name='Dsn'),
  gbId?: string(name='GbId'),
  groupId?: string(name='GroupId'),
  ip?: string(name='Ip'),
  latitude?: string(name='Latitude'),
  longitude?: string(name='Longitude'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  params?: string(name='Params'),
  parentId?: string(name='ParentId'),
  password?: string(name='Password'),
  port?: long(name='Port'),
  posInterval?: long(name='PosInterval'),
  type?: string(name='Type'),
  url?: string(name='Url'),
  username?: string(name='Username'),
  vendor?: string(name='Vendor'),
}

model CreateDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDeviceWithOptions(request: CreateDeviceRequest, runtime: Util.RuntimeOptions): CreateDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmMethod)) {
    query['AlarmMethod'] = request.alarmMethod;
  }
  if (!Util.isUnset(request.autoPos)) {
    query['AutoPos'] = request.autoPos;
  }
  if (!Util.isUnset(request.autoStart)) {
    query['AutoStart'] = request.autoStart;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.dsn)) {
    query['Dsn'] = request.dsn;
  }
  if (!Util.isUnset(request.gbId)) {
    query['GbId'] = request.gbId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.latitude)) {
    query['Latitude'] = request.latitude;
  }
  if (!Util.isUnset(request.longitude)) {
    query['Longitude'] = request.longitude;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.params)) {
    query['Params'] = request.params;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.posInterval)) {
    query['PosInterval'] = request.posInterval;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceWithOptions(request, runtime);
}

model CreateDeviceAlarmRequest {
  alarm?: int32(name='Alarm'),
  channelId?: int32(name='ChannelId'),
  endTime?: long(name='EndTime'),
  expire?: long(name='Expire'),
  id?: string(name='Id'),
  objectType?: int32(name='ObjectType'),
  ownerId?: long(name='OwnerId'),
  startTime?: long(name='StartTime'),
  subAlarm?: int32(name='SubAlarm'),
}

model CreateDeviceAlarmResponseBody = {
  alarmDelay?: long(name='AlarmDelay'),
  alarmId?: string(name='AlarmId'),
  expire?: long(name='Expire'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model CreateDeviceAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceAlarmResponseBody(name='body'),
}

async function createDeviceAlarmWithOptions(request: CreateDeviceAlarmRequest, runtime: Util.RuntimeOptions): CreateDeviceAlarmResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarm)) {
    query['Alarm'] = request.alarm;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.expire)) {
    query['Expire'] = request.expire;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.subAlarm)) {
    query['SubAlarm'] = request.subAlarm;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceAlarm',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeviceAlarm(request: CreateDeviceAlarmRequest): CreateDeviceAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceAlarmWithOptions(request, runtime);
}

model CreateDeviceSnapshotRequest {
  deviceId?: string(name='DeviceId'),
  mode?: string(name='Mode'),
  ownerId?: long(name='OwnerId'),
  snapshotConfig?: string(name='SnapshotConfig'),
  streamId?: string(name='StreamId'),
}

model CreateDeviceSnapshotResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateDeviceSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceSnapshotResponseBody(name='body'),
}

async function createDeviceSnapshotWithOptions(request: CreateDeviceSnapshotRequest, runtime: Util.RuntimeOptions): CreateDeviceSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.snapshotConfig)) {
    query['SnapshotConfig'] = request.snapshotConfig;
  }
  if (!Util.isUnset(request.streamId)) {
    query['StreamId'] = request.streamId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceSnapshot',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeviceSnapshot(request: CreateDeviceSnapshotRequest): CreateDeviceSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceSnapshotWithOptions(request, runtime);
}

model CreateDirectoryRequest {
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  parentId?: string(name='ParentId'),
}

model CreateDirectoryResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDirectoryResponseBody(name='body'),
}

async function createDirectoryWithOptions(request: CreateDirectoryRequest, runtime: Util.RuntimeOptions): CreateDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDirectory',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDirectory(request: CreateDirectoryRequest): CreateDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDirectoryWithOptions(request, runtime);
}

model CreateGroupRequest {
  app?: string(name='App'),
  callback?: string(name='Callback'),
  description?: string(name='Description'),
  inProtocol?: string(name='InProtocol'),
  lazyPull?: boolean(name='LazyPull'),
  name?: string(name='Name'),
  outProtocol?: string(name='OutProtocol'),
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain'),
  pushDomain?: string(name='PushDomain'),
  region?: string(name='Region'),
}

model CreateGroupResponseBody = {
  gbId?: string(name='GbId'),
  gbIp?: string(name='GbIp'),
  gbPort?: long(name='GbPort'),
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupResponseBody(name='body'),
}

async function createGroupWithOptions(request: CreateGroupRequest, runtime: Util.RuntimeOptions): CreateGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.app)) {
    query['App'] = request.app;
  }
  if (!Util.isUnset(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inProtocol)) {
    query['InProtocol'] = request.inProtocol;
  }
  if (!Util.isUnset(request.lazyPull)) {
    query['LazyPull'] = request.lazyPull;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.outProtocol)) {
    query['OutProtocol'] = request.outProtocol;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playDomain)) {
    query['PlayDomain'] = request.playDomain;
  }
  if (!Util.isUnset(request.pushDomain)) {
    query['PushDomain'] = request.pushDomain;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGroup',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGroupWithOptions(request, runtime);
}

model CreateParentPlatformRequest {
  autoStart?: boolean(name='AutoStart'),
  clientAuth?: boolean(name='ClientAuth'),
  clientPassword?: string(name='ClientPassword'),
  clientUsername?: string(name='ClientUsername'),
  description?: string(name='Description'),
  gbId?: string(name='GbId'),
  ip?: string(name='Ip'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  port?: long(name='Port'),
  protocol?: string(name='Protocol'),
}

model CreateParentPlatformResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: CreateParentPlatformResponseBody(name='body'),
}

async function createParentPlatformWithOptions(request: CreateParentPlatformRequest, runtime: Util.RuntimeOptions): CreateParentPlatformResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoStart)) {
    query['AutoStart'] = request.autoStart;
  }
  if (!Util.isUnset(request.clientAuth)) {
    query['ClientAuth'] = request.clientAuth;
  }
  if (!Util.isUnset(request.clientPassword)) {
    query['ClientPassword'] = request.clientPassword;
  }
  if (!Util.isUnset(request.clientUsername)) {
    query['ClientUsername'] = request.clientUsername;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.gbId)) {
    query['GbId'] = request.gbId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateParentPlatform',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createParentPlatform(request: CreateParentPlatformRequest): CreateParentPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  return createParentPlatformWithOptions(request, runtime);
}

model CreateRenderingDeviceRequest {
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  clusterId?: string(name='ClusterId'),
  count?: int32(name='Count'),
  description?: string(name='Description'),
  edgeNodeName?: string(name='EdgeNodeName'),
  ISP?: string(name='ISP'),
  imageId?: string(name='ImageId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceName?: string(name='InstanceName'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  securityGroupId?: string(name='SecurityGroupId'),
  specification?: string(name='Specification'),
}

model CreateRenderingDeviceResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model CreateRenderingDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRenderingDeviceResponseBody(name='body'),
}

async function createRenderingDeviceWithOptions(request: CreateRenderingDeviceRequest, runtime: Util.RuntimeOptions): CreateRenderingDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.edgeNodeName)) {
    query['EdgeNodeName'] = request.edgeNodeName;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRenderingDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRenderingDevice(request: CreateRenderingDeviceRequest): CreateRenderingDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRenderingDeviceWithOptions(request, runtime);
}

model CreateStreamSnapshotRequest {
  id?: string(name='Id'),
  location?: string(name='Location'),
  ownerId?: long(name='OwnerId'),
}

model CreateStreamSnapshotResponseBody = {
  format?: string(name='Format'),
  height?: long(name='Height'),
  id?: string(name='Id'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossObject?: string(name='OssObject'),
  requestId?: string(name='RequestId'),
  timestamp?: long(name='Timestamp'),
  url?: string(name='Url'),
  width?: long(name='Width'),
}

model CreateStreamSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStreamSnapshotResponseBody(name='body'),
}

async function createStreamSnapshotWithOptions(request: CreateStreamSnapshotRequest, runtime: Util.RuntimeOptions): CreateStreamSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStreamSnapshot',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStreamSnapshot(request: CreateStreamSnapshotRequest): CreateStreamSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStreamSnapshotWithOptions(request, runtime);
}

model CreateTemplateRequest {
  callback?: string(name='Callback'),
  description?: string(name='Description'),
  fileFormat?: string(name='FileFormat'),
  flv?: string(name='Flv'),
  hlsM3u8?: string(name='HlsM3u8'),
  hlsTs?: string(name='HlsTs'),
  interval?: long(name='Interval'),
  jpgOnDemand?: string(name='JpgOnDemand'),
  jpgOverwrite?: string(name='JpgOverwrite'),
  jpgSequence?: string(name='JpgSequence'),
  mp4?: string(name='Mp4'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossFilePrefix?: string(name='OssFilePrefix'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  retention?: long(name='Retention'),
  transConfigsJSON?: string(name='TransConfigsJSON'),
  trigger?: string(name='Trigger'),
  type?: string(name='Type'),
}

model CreateTemplateResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplateWithOptions(request: CreateTemplateRequest, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileFormat)) {
    query['FileFormat'] = request.fileFormat;
  }
  if (!Util.isUnset(request.flv)) {
    query['Flv'] = request.flv;
  }
  if (!Util.isUnset(request.hlsM3u8)) {
    query['HlsM3u8'] = request.hlsM3u8;
  }
  if (!Util.isUnset(request.hlsTs)) {
    query['HlsTs'] = request.hlsTs;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.jpgOnDemand)) {
    query['JpgOnDemand'] = request.jpgOnDemand;
  }
  if (!Util.isUnset(request.jpgOverwrite)) {
    query['JpgOverwrite'] = request.jpgOverwrite;
  }
  if (!Util.isUnset(request.jpgSequence)) {
    query['JpgSequence'] = request.jpgSequence;
  }
  if (!Util.isUnset(request.mp4)) {
    query['Mp4'] = request.mp4;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!Util.isUnset(request.ossFilePrefix)) {
    query['OssFilePrefix'] = request.ossFilePrefix;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.transConfigsJSON)) {
    query['TransConfigsJSON'] = request.transConfigsJSON;
  }
  if (!Util.isUnset(request.trigger)) {
    query['Trigger'] = request.trigger;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTemplate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTemplateWithOptions(request, runtime);
}

model DeleteAIConfigRequest {
  configId?: string(name='ConfigId'),
  ownerId?: long(name='OwnerId'),
}

model DeleteAIConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAIConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAIConfigResponseBody(name='body'),
}

async function deleteAIConfigWithOptions(request: DeleteAIConfigRequest, runtime: Util.RuntimeOptions): DeleteAIConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAIConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAIConfig(request: DeleteAIConfigRequest): DeleteAIConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAIConfigWithOptions(request, runtime);
}

model DeleteBucketRequest {
  bucketName?: string(name='BucketName'),
  ownerId?: long(name='OwnerId'),
}

model DeleteBucketResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBucketResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBucketResponseBody(name='body'),
}

async function deleteBucketWithOptions(request: DeleteBucketRequest, runtime: Util.RuntimeOptions): DeleteBucketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBucket',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBucket(request: DeleteBucketRequest): DeleteBucketResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBucketWithOptions(request, runtime);
}

model DeleteClusterRequest {
  clusterId?: string(name='ClusterId'),
  ownerId?: long(name='OwnerId'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCluster',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model DeleteDeviceRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

model DeleteDirectoryRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DeleteDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDirectoryResponseBody(name='body'),
}

async function deleteDirectoryWithOptions(request: DeleteDirectoryRequest, runtime: Util.RuntimeOptions): DeleteDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDirectory',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDirectory(request: DeleteDirectoryRequest): DeleteDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoryWithOptions(request, runtime);
}

model DeleteGroupRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupResponseBody(name='body'),
}

async function deleteGroupWithOptions(request: DeleteGroupRequest, runtime: Util.RuntimeOptions): DeleteGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroup',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGroupWithOptions(request, runtime);
}

model DeleteParentPlatformRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DeleteParentPlatformResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteParentPlatformResponseBody(name='body'),
}

async function deleteParentPlatformWithOptions(request: DeleteParentPlatformRequest, runtime: Util.RuntimeOptions): DeleteParentPlatformResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteParentPlatform',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteParentPlatform(request: DeleteParentPlatformRequest): DeleteParentPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteParentPlatformWithOptions(request, runtime);
}

model DeletePresetRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  presetId?: string(name='PresetId'),
}

model DeletePresetResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model DeletePresetResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePresetResponseBody(name='body'),
}

async function deletePresetWithOptions(request: DeletePresetRequest, runtime: Util.RuntimeOptions): DeletePresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.presetId)) {
    query['PresetId'] = request.presetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePreset',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePreset(request: DeletePresetRequest): DeletePresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePresetWithOptions(request, runtime);
}

model DeletePurchasedDeviceRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DeletePurchasedDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePurchasedDeviceResponseBody(name='body'),
}

async function deletePurchasedDeviceWithOptions(request: DeletePurchasedDeviceRequest, runtime: Util.RuntimeOptions): DeletePurchasedDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePurchasedDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePurchasedDevice(request: DeletePurchasedDeviceRequest): DeletePurchasedDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePurchasedDeviceWithOptions(request, runtime);
}

model DeleteRenderingDeviceInternetPortsRequest {
  ISP?: string(name='ISP'),
  instanceIds?: string(name='InstanceIds'),
  internalPort?: string(name='InternalPort'),
  ipProtocol?: string(name='IpProtocol'),
  ownerId?: long(name='OwnerId'),
}

model DeleteRenderingDeviceInternetPortsResponseBody = {
  instanceIds?: {
    instanceIds?: [ string ](name='instanceIds')
  }(name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model DeleteRenderingDeviceInternetPortsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRenderingDeviceInternetPortsResponseBody(name='body'),
}

async function deleteRenderingDeviceInternetPortsWithOptions(request: DeleteRenderingDeviceInternetPortsRequest, runtime: Util.RuntimeOptions): DeleteRenderingDeviceInternetPortsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRenderingDeviceInternetPorts',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRenderingDeviceInternetPorts(request: DeleteRenderingDeviceInternetPortsRequest): DeleteRenderingDeviceInternetPortsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRenderingDeviceInternetPortsWithOptions(request, runtime);
}

model DeleteRenderingDevicesRequest {
  instanceIds?: string(name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
}

model DeleteRenderingDevicesResponseBody = {
  failedIds?: [ string ](name='FailedIds'),
  requestId?: string(name='RequestId'),
}

model DeleteRenderingDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRenderingDevicesResponseBody(name='body'),
}

async function deleteRenderingDevicesWithOptions(request: DeleteRenderingDevicesRequest, runtime: Util.RuntimeOptions): DeleteRenderingDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRenderingDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRenderingDevices(request: DeleteRenderingDevicesRequest): DeleteRenderingDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRenderingDevicesWithOptions(request, runtime);
}

model DeleteTemplateRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplateWithOptions(request: DeleteTemplateRequest, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTemplate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTemplateWithOptions(request, runtime);
}

model DeleteVsPullStreamInfoConfigRequest {
  appName?: string(name='AppName'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  streamName?: string(name='StreamName'),
}

model DeleteVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVsPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVsPullStreamInfoConfigResponseBody(name='body'),
}

async function deleteVsPullStreamInfoConfigWithOptions(request: DeleteVsPullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): DeleteVsPullStreamInfoConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.streamName)) {
    query['StreamName'] = request.streamName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVsPullStreamInfoConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVsPullStreamInfoConfig(request: DeleteVsPullStreamInfoConfigRequest): DeleteVsPullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVsPullStreamInfoConfigWithOptions(request, runtime);
}

model DeleteVsStreamsNotifyUrlConfigRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DeleteVsStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVsStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function deleteVsStreamsNotifyUrlConfigWithOptions(request: DeleteVsStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): DeleteVsStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVsStreamsNotifyUrlConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVsStreamsNotifyUrlConfig(request: DeleteVsStreamsNotifyUrlConfigRequest): DeleteVsStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVsStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model DescribeAIConfigRequest {
  configId?: string(name='ConfigId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeAIConfigResponseBody = {
  AIConfig?: {
    captureInterval?: int32(name='CaptureInterval'),
    configs?: string(name='Configs'),
    description?: string(name='Description'),
    endTime?: long(name='EndTime'),
    features?: string(name='Features'),
    instanceId?: long(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
  }(name='AIConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeAIConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAIConfigResponseBody(name='body'),
}

async function describeAIConfigWithOptions(request: DescribeAIConfigRequest, runtime: Util.RuntimeOptions): DescribeAIConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAIConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAIConfig(request: DescribeAIConfigRequest): DescribeAIConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAIConfigWithOptions(request, runtime);
}

model DescribeAIConfigListRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
}

model DescribeAIConfigListResponseBody = {
  AIConfigList?: {
    AIConfigList?: [ 
    {
      captureInterval?: int32(name='CaptureInterval'),
      configId?: string(name='ConfigId'),
      configs?: string(name='Configs'),
      description?: string(name='Description'),
      endTime?: long(name='EndTime'),
      features?: string(name='Features'),
      instanceId?: long(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='AIConfigList')
  }(name='AIConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeAIConfigListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAIConfigListResponseBody(name='body'),
}

async function describeAIConfigListWithOptions(request: DescribeAIConfigListRequest, runtime: Util.RuntimeOptions): DescribeAIConfigListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAIConfigList',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAIConfigList(request: DescribeAIConfigListRequest): DescribeAIConfigListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAIConfigListWithOptions(request, runtime);
}

model DescribeAIEventListRequest {
  endTime?: long(name='EndTime'),
  feature?: string(name='Feature'),
  instanceId?: long(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  startTime?: long(name='StartTime'),
  triggered?: boolean(name='Triggered'),
}

model DescribeAIEventListResponseBody = {
  AIEventList?: string(name='AIEventList'),
  requestId?: string(name='RequestId'),
}

model DescribeAIEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAIEventListResponseBody(name='body'),
}

async function describeAIEventListWithOptions(request: DescribeAIEventListRequest, runtime: Util.RuntimeOptions): DescribeAIEventListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAIEventList',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAIEventList(request: DescribeAIEventListRequest): DescribeAIEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAIEventListWithOptions(request, runtime);
}

model DescribeAccountStatRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DescribeAccountStatResponseBody = {
  groupLimit?: long(name='GroupLimit'),
  groupNum?: long(name='GroupNum'),
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
  templateLimit?: long(name='TemplateLimit'),
  templateNum?: long(name='TemplateNum'),
}

model DescribeAccountStatResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountStatResponseBody(name='body'),
}

async function describeAccountStatWithOptions(request: DescribeAccountStatRequest, runtime: Util.RuntimeOptions): DescribeAccountStatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccountStat',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccountStat(request: DescribeAccountStatRequest): DescribeAccountStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountStatWithOptions(request, runtime);
}

model DescribeClusterRequest {
  clusterId?: string(name='ClusterId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  description?: string(name='Description'),
  internalPorts?: [ 
    {
      ipProtocol?: string(name='IpProtocol'),
      platform?: string(name='Platform'),
      port?: [ string ](name='Port'),
    }
  ](name='InternalPorts'),
  maintainTime?: string(name='MaintainTime'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterResponseBody(name='body'),
}

async function describeClusterWithOptions(request: DescribeClusterRequest, runtime: Util.RuntimeOptions): DescribeClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCluster',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterWithOptions(request, runtime);
}

model DescribeClusterDevicesRequest {
  clusterId?: string(name='ClusterId'),
  description?: string(name='Description'),
  edgeNodeName?: string(name='EdgeNodeName'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  platform?: string(name='Platform'),
  specification?: string(name='Specification'),
}

model DescribeClusterDevicesResponseBody = {
  devices?: [ 
    {
      autoRenew?: boolean(name='AutoRenew'),
      autoRenewPeriod?: int32(name='AutoRenewPeriod'),
      description?: string(name='Description'),
      edgeNodeName?: string(name='EdgeNodeName'),
      imageId?: string(name='ImageId'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      ipInfos?: [ 
        {
          externalIp?: string(name='ExternalIp'),
          externalPort?: string(name='ExternalPort'),
          ISP?: string(name='ISP'),
          internalIp?: string(name='InternalIp'),
          internalPort?: string(name='InternalPort'),
          ipProtocol?: string(name='IpProtocol'),
          natType?: string(name='NatType'),
        }
      ](name='IpInfos'),
      macAddress?: string(name='MacAddress'),
      period?: int32(name='Period'),
      periodUnit?: string(name='PeriodUnit'),
      platformType?: string(name='PlatformType'),
      podInfos?: [ 
        {
          network?: [ 
            {
              containerPorts?: string(name='ContainerPorts'),
              externalIp?: string(name='ExternalIp'),
              externalPorts?: string(name='ExternalPorts'),
            }
          ](name='Network'),
          podId?: string(name='PodId'),
          status?: string(name='Status'),
        }
      ](name='PodInfos'),
      server?: string(name='Server'),
      status?: string(name='Status'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeClusterDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterDevicesResponseBody(name='body'),
}

async function describeClusterDevicesWithOptions(request: DescribeClusterDevicesRequest, runtime: Util.RuntimeOptions): DescribeClusterDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.edgeNodeName)) {
    query['EdgeNodeName'] = request.edgeNodeName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterDevices(request: DescribeClusterDevicesRequest): DescribeClusterDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterDevicesWithOptions(request, runtime);
}

model DescribeClustersRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
}

model DescribeClustersResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='ClusterId'),
      description?: string(name='Description'),
      internalPorts?: [ 
        {
          ipProtocol?: string(name='IpProtocol'),
          platform?: string(name='Platform'),
          port?: [ string ](name='Port'),
        }
      ](name='InternalPorts'),
      maintainTime?: string(name='MaintainTime'),
      name?: string(name='Name'),
      status?: string(name='Status'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersResponseBody(name='body'),
}

async function describeClustersWithOptions(request: DescribeClustersRequest, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusters',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClustersWithOptions(request, runtime);
}

model DescribeContainerInstanceIdRequest {
  nodeName?: string(name='NodeName'),
  ownerId?: long(name='OwnerId'),
  podIndex?: int32(name='PodIndex'),
}

model DescribeContainerInstanceIdResponseBody = {
  instanceDetail?: {
    instanceId?: string(name='InstanceId'),
  }(name='InstanceDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeContainerInstanceIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContainerInstanceIdResponseBody(name='body'),
}

async function describeContainerInstanceIdWithOptions(request: DescribeContainerInstanceIdRequest, runtime: Util.RuntimeOptions): DescribeContainerInstanceIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.podIndex)) {
    query['PodIndex'] = request.podIndex;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerInstanceId',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerInstanceId(request: DescribeContainerInstanceIdRequest): DescribeContainerInstanceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerInstanceIdWithOptions(request, runtime);
}

model DescribeDeviceRequest {
  id?: string(name='Id'),
  includeDirectory?: boolean(name='IncludeDirectory'),
  includeStats?: boolean(name='IncludeStats'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDeviceResponseBody = {
  alarmMethod?: string(name='AlarmMethod'),
  autoPos?: boolean(name='AutoPos'),
  autoStart?: boolean(name='AutoStart'),
  channelSyncTime?: string(name='ChannelSyncTime'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  directory?: {
    createdTime?: string(name='CreatedTime'),
    description?: string(name='Description'),
    groupId?: string(name='GroupId'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    parentId?: string(name='ParentId'),
  }(name='Directory'),
  directoryId?: string(name='DirectoryId'),
  dsn?: string(name='Dsn'),
  enabled?: boolean(name='Enabled'),
  gbId?: string(name='GbId'),
  groupId?: string(name='GroupId'),
  id?: string(name='Id'),
  ip?: string(name='Ip'),
  latitude?: string(name='Latitude'),
  longitude?: string(name='Longitude'),
  name?: string(name='Name'),
  params?: string(name='Params'),
  parentId?: string(name='ParentId'),
  password?: string(name='Password'),
  port?: long(name='Port'),
  posInterval?: long(name='PosInterval'),
  protocol?: string(name='Protocol'),
  registeredTime?: string(name='RegisteredTime'),
  requestId?: string(name='RequestId'),
  stats?: {
    channelNum?: long(name='ChannelNum'),
    failedNum?: long(name='FailedNum'),
    offlineNum?: long(name='OfflineNum'),
    onlineNum?: long(name='OnlineNum'),
    streamNum?: long(name='StreamNum'),
  }(name='Stats'),
  status?: string(name='Status'),
  type?: string(name='Type'),
  url?: string(name='Url'),
  username?: string(name='Username'),
  vendor?: string(name='Vendor'),
}

model DescribeDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceResponseBody(name='body'),
}

async function describeDeviceWithOptions(request: DescribeDeviceRequest, runtime: Util.RuntimeOptions): DescribeDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.includeDirectory)) {
    query['IncludeDirectory'] = request.includeDirectory;
  }
  if (!Util.isUnset(request.includeStats)) {
    query['IncludeStats'] = request.includeStats;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDevice(request: DescribeDeviceRequest): DescribeDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceWithOptions(request, runtime);
}

model DescribeDeviceChannelsRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model DescribeDeviceChannelsResponseBody = {
  channels?: [ 
    {
      channelId?: long(name='ChannelId'),
      deviceId?: string(name='DeviceId'),
      deviceStatus?: string(name='DeviceStatus'),
      gbId?: string(name='GbId'),
      name?: string(name='Name'),
      params?: string(name='Params'),
      streamId?: string(name='StreamId'),
      streamStatus?: string(name='StreamStatus'),
    }
  ](name='Channels'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDeviceChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceChannelsResponseBody(name='body'),
}

async function describeDeviceChannelsWithOptions(request: DescribeDeviceChannelsRequest, runtime: Util.RuntimeOptions): DescribeDeviceChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeviceChannels',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeviceChannels(request: DescribeDeviceChannelsRequest): DescribeDeviceChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceChannelsWithOptions(request, runtime);
}

model DescribeDeviceGatewayRequest {
  clientIp?: string(name='ClientIp'),
  expire?: long(name='Expire'),
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDeviceGatewayResponseBody = {
  host?: string(name='Host'),
  port?: long(name='Port'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId'),
  token?: string(name='Token'),
}

model DescribeDeviceGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceGatewayResponseBody(name='body'),
}

async function describeDeviceGatewayWithOptions(request: DescribeDeviceGatewayRequest, runtime: Util.RuntimeOptions): DescribeDeviceGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.expire)) {
    query['Expire'] = request.expire;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeviceGateway',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeviceGateway(request: DescribeDeviceGatewayRequest): DescribeDeviceGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceGatewayWithOptions(request, runtime);
}

model DescribeDeviceURLRequest {
  auth?: boolean(name='Auth'),
  expire?: long(name='Expire'),
  id?: string(name='Id'),
  mode?: string(name='Mode'),
  outProtocol?: string(name='OutProtocol'),
  ownerId?: long(name='OwnerId'),
  stream?: string(name='Stream'),
  type?: string(name='Type'),
}

model DescribeDeviceURLResponseBody = {
  expireTime?: long(name='ExpireTime'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model DescribeDeviceURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceURLResponseBody(name='body'),
}

async function describeDeviceURLWithOptions(request: DescribeDeviceURLRequest, runtime: Util.RuntimeOptions): DescribeDeviceURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auth)) {
    query['Auth'] = request.auth;
  }
  if (!Util.isUnset(request.expire)) {
    query['Expire'] = request.expire;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.outProtocol)) {
    query['OutProtocol'] = request.outProtocol;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.stream)) {
    query['Stream'] = request.stream;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeviceURL',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeviceURL(request: DescribeDeviceURLRequest): DescribeDeviceURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceURLWithOptions(request, runtime);
}

model DescribeDevicesRequest {
  directoryId?: string(name='DirectoryId'),
  dsn?: string(name='Dsn'),
  gbId?: string(name='GbId'),
  groupId?: string(name='GroupId'),
  id?: string(name='Id'),
  includeDirectory?: boolean(name='IncludeDirectory'),
  includeStats?: boolean(name='IncludeStats'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  parentId?: string(name='ParentId'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
  status?: string(name='Status'),
  type?: string(name='Type'),
  vendor?: string(name='Vendor'),
}

model DescribeDevicesResponseBody = {
  devices?: [ 
    {
      alarmMethod?: string(name='AlarmMethod'),
      autoDirectory?: boolean(name='AutoDirectory'),
      autoPos?: boolean(name='AutoPos'),
      autoStart?: boolean(name='AutoStart'),
      channelSyncTime?: string(name='ChannelSyncTime'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      directory?: {
        createdTime?: string(name='CreatedTime'),
        description?: string(name='Description'),
        groupId?: string(name='GroupId'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        parentId?: string(name='ParentId'),
      }(name='Directory'),
      directoryId?: string(name='DirectoryId'),
      dsn?: string(name='Dsn'),
      enabled?: boolean(name='Enabled'),
      gbId?: string(name='GbId'),
      groupId?: string(name='GroupId'),
      id?: string(name='Id'),
      ip?: string(name='Ip'),
      latitude?: string(name='Latitude'),
      longitude?: string(name='Longitude'),
      name?: string(name='Name'),
      params?: string(name='Params'),
      parentId?: string(name='ParentId'),
      password?: string(name='Password'),
      port?: long(name='Port'),
      posInterval?: long(name='PosInterval'),
      protocol?: string(name='Protocol'),
      registeredTime?: string(name='RegisteredTime'),
      stats?: {
        channelNum?: long(name='ChannelNum'),
        failedNum?: long(name='FailedNum'),
        offlineNum?: long(name='OfflineNum'),
        onlineNum?: long(name='OnlineNum'),
        streamNum?: long(name='StreamNum'),
      }(name='Stats'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      url?: string(name='Url'),
      username?: string(name='Username'),
      vendor?: string(name='Vendor'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDevicesResponseBody(name='body'),
}

async function describeDevicesWithOptions(request: DescribeDevicesRequest, runtime: Util.RuntimeOptions): DescribeDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.dsn)) {
    query['Dsn'] = request.dsn;
  }
  if (!Util.isUnset(request.gbId)) {
    query['GbId'] = request.gbId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.includeDirectory)) {
    query['IncludeDirectory'] = request.includeDirectory;
  }
  if (!Util.isUnset(request.includeStats)) {
    query['IncludeStats'] = request.includeStats;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDevicesWithOptions(request, runtime);
}

model DescribeDirectoriesRequest {
  groupId?: string(name='GroupId'),
  noPagination?: boolean(name='NoPagination'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  parentId?: string(name='ParentId'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
}

model DescribeDirectoriesResponseBody = {
  directories?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      parentId?: string(name='ParentId'),
    }
  ](name='Directories'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDirectoriesResponseBody(name='body'),
}

async function describeDirectoriesWithOptions(request: DescribeDirectoriesRequest, runtime: Util.RuntimeOptions): DescribeDirectoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.noPagination)) {
    query['NoPagination'] = request.noPagination;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDirectories',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoriesWithOptions(request, runtime);
}

model DescribeDirectoryRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDirectoryResponseBody = {
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  parentId?: string(name='ParentId'),
  requestId?: string(name='RequestId'),
}

model DescribeDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDirectoryResponseBody(name='body'),
}

async function describeDirectoryWithOptions(request: DescribeDirectoryRequest, runtime: Util.RuntimeOptions): DescribeDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDirectory',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDirectory(request: DescribeDirectoryRequest): DescribeDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoryWithOptions(request, runtime);
}

model DescribeExternalStreamURLRequest {
  kind?: string(name='Kind'),
  ownerId?: long(name='OwnerId'),
  profile?: string(name='Profile'),
  txId?: string(name='TxId'),
  url?: string(name='Url'),
}

model DescribeExternalStreamURLResponseBody = {
  ip?: string(name='Ip'),
  outProtocol?: string(name='OutProtocol'),
  port?: long(name='Port'),
  profile?: string(name='Profile'),
  requestId?: string(name='RequestId'),
  txId?: string(name='TxId'),
  url?: string(name='Url'),
}

model DescribeExternalStreamURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExternalStreamURLResponseBody(name='body'),
}

async function describeExternalStreamURLWithOptions(request: DescribeExternalStreamURLRequest, runtime: Util.RuntimeOptions): DescribeExternalStreamURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.kind)) {
    query['Kind'] = request.kind;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.profile)) {
    query['Profile'] = request.profile;
  }
  if (!Util.isUnset(request.txId)) {
    query['TxId'] = request.txId;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExternalStreamURL',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExternalStreamURL(request: DescribeExternalStreamURLRequest): DescribeExternalStreamURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExternalStreamURLWithOptions(request, runtime);
}

model DescribeGroupRequest {
  id?: string(name='Id'),
  includeStats?: boolean(name='IncludeStats'),
  ownerId?: long(name='OwnerId'),
}

model DescribeGroupResponseBody = {
  aliasId?: string(name='AliasId'),
  app?: string(name='App'),
  callback?: string(name='Callback'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  enabled?: boolean(name='Enabled'),
  gbId?: string(name='GbId'),
  gbIp?: string(name='GbIp'),
  gbPort?: long(name='GbPort'),
  gbTcpPorts?: [ string ](name='GbTcpPorts'),
  gbUdpPorts?: [ string ](name='GbUdpPorts'),
  id?: string(name='Id'),
  inProtocol?: string(name='InProtocol'),
  lazyPull?: boolean(name='LazyPull'),
  name?: string(name='Name'),
  outProtocol?: string(name='OutProtocol'),
  playDomain?: string(name='PlayDomain'),
  pushDomain?: string(name='PushDomain'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  stats?: {
    deviceNum?: long(name='DeviceNum'),
    iedNum?: long(name='IedNum'),
    ipcNum?: long(name='IpcNum'),
    platformNum?: long(name='PlatformNum'),
  }(name='Stats'),
  status?: string(name='Status'),
}

model DescribeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupResponseBody(name='body'),
}

async function describeGroupWithOptions(request: DescribeGroupRequest, runtime: Util.RuntimeOptions): DescribeGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.includeStats)) {
    query['IncludeStats'] = request.includeStats;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroup',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroup(request: DescribeGroupRequest): DescribeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupWithOptions(request, runtime);
}

model DescribeGroupsRequest {
  id?: string(name='Id'),
  inProtocol?: string(name='InProtocol'),
  includeStats?: boolean(name='IncludeStats'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  region?: string(name='Region'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
  status?: string(name='Status'),
}

model DescribeGroupsResponseBody = {
  groups?: [ 
    {
      aliasId?: string(name='AliasId'),
      app?: string(name='App'),
      callback?: string(name='Callback'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      enabled?: boolean(name='Enabled'),
      gbId?: string(name='GbId'),
      gbIp?: string(name='GbIp'),
      gbPort?: long(name='GbPort'),
      gbTcpPorts?: [ string ](name='GbTcpPorts'),
      gbUdpPorts?: [ string ](name='GbUdpPorts'),
      id?: string(name='Id'),
      inProtocol?: string(name='InProtocol'),
      lazyPull?: boolean(name='LazyPull'),
      name?: string(name='Name'),
      outProtocol?: string(name='OutProtocol'),
      playDomain?: string(name='PlayDomain'),
      pushDomain?: string(name='PushDomain'),
      region?: string(name='Region'),
      stats?: {
        deviceNum?: long(name='DeviceNum'),
        iedNum?: long(name='IedNum'),
        ipcNum?: long(name='IpcNum'),
        platformNum?: long(name='PlatformNum'),
      }(name='Stats'),
      status?: string(name='Status'),
    }
  ](name='Groups'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupsResponseBody(name='body'),
}

async function describeGroupsWithOptions(request: DescribeGroupsRequest, runtime: Util.RuntimeOptions): DescribeGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.inProtocol)) {
    query['InProtocol'] = request.inProtocol;
  }
  if (!Util.isUnset(request.includeStats)) {
    query['IncludeStats'] = request.includeStats;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroups',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroups(request: DescribeGroupsRequest): DescribeGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupsWithOptions(request, runtime);
}

model DescribeNodeDevicesInfoRequest {
  nodeName?: string(name='NodeName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeNodeDevicesInfoResponseBody = {
  nodeDevices?: [ 
    {
      deviceInfos?: [ 
        {
          IP?: string(name='IP'),
          instanceId?: string(name='InstanceId'),
          name?: string(name='Name'),
          server?: string(name='Server'),
        }
      ](name='DeviceInfos'),
      nodeName?: string(name='NodeName'),
    }
  ](name='NodeDevices'),
  requestId?: string(name='RequestId'),
}

model DescribeNodeDevicesInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodeDevicesInfoResponseBody(name='body'),
}

async function describeNodeDevicesInfoWithOptions(request: DescribeNodeDevicesInfoRequest, runtime: Util.RuntimeOptions): DescribeNodeDevicesInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNodeDevicesInfo',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNodeDevicesInfo(request: DescribeNodeDevicesInfoRequest): DescribeNodeDevicesInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNodeDevicesInfoWithOptions(request, runtime);
}

model DescribeParentPlatformRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DescribeParentPlatformResponseBody = {
  autoStart?: boolean(name='AutoStart'),
  clientAuth?: boolean(name='ClientAuth'),
  clientGbId?: string(name='ClientGbId'),
  clientIp?: string(name='ClientIp'),
  clientPassword?: string(name='ClientPassword'),
  clientPort?: long(name='ClientPort'),
  clientUsername?: string(name='ClientUsername'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  gbId?: string(name='GbId'),
  id?: string(name='Id'),
  ip?: string(name='Ip'),
  name?: string(name='Name'),
  port?: long(name='Port'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParentPlatformResponseBody(name='body'),
}

async function describeParentPlatformWithOptions(request: DescribeParentPlatformRequest, runtime: Util.RuntimeOptions): DescribeParentPlatformResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParentPlatform',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParentPlatform(request: DescribeParentPlatformRequest): DescribeParentPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParentPlatformWithOptions(request, runtime);
}

model DescribeParentPlatformDevicesRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
}

model DescribeParentPlatformDevicesResponseBody = {
  devices?: [ 
    {
      gbId?: string(name='GbId'),
      groupId?: string(name='GroupId'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      parentId?: string(name='ParentId'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeParentPlatformDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParentPlatformDevicesResponseBody(name='body'),
}

async function describeParentPlatformDevicesWithOptions(request: DescribeParentPlatformDevicesRequest, runtime: Util.RuntimeOptions): DescribeParentPlatformDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParentPlatformDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParentPlatformDevices(request: DescribeParentPlatformDevicesRequest): DescribeParentPlatformDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParentPlatformDevicesWithOptions(request, runtime);
}

model DescribeParentPlatformsRequest {
  gbId?: string(name='GbId'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
  status?: string(name='Status'),
}

model DescribeParentPlatformsResponseBody = {
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  platforms?: [ 
    {
      autoStart?: boolean(name='AutoStart'),
      clientAuth?: boolean(name='ClientAuth'),
      clientGbId?: string(name='ClientGbId'),
      clientIp?: string(name='ClientIp'),
      clientPassword?: string(name='ClientPassword'),
      clientPort?: long(name='ClientPort'),
      clientUsername?: string(name='ClientUsername'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      gbId?: string(name='GbId'),
      id?: string(name='Id'),
      ip?: string(name='Ip'),
      name?: string(name='Name'),
      port?: long(name='Port'),
      protocol?: string(name='Protocol'),
      status?: string(name='Status'),
    }
  ](name='Platforms'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeParentPlatformsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParentPlatformsResponseBody(name='body'),
}

async function describeParentPlatformsWithOptions(request: DescribeParentPlatformsRequest, runtime: Util.RuntimeOptions): DescribeParentPlatformsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gbId)) {
    query['GbId'] = request.gbId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParentPlatforms',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParentPlatforms(request: DescribeParentPlatformsRequest): DescribeParentPlatformsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParentPlatformsWithOptions(request, runtime);
}

model DescribePresetsRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DescribePresetsResponseBody = {
  id?: string(name='Id'),
  presets?: [ 
    {
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Presets'),
  requestId?: string(name='RequestId'),
}

model DescribePresetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePresetsResponseBody(name='body'),
}

async function describePresetsWithOptions(request: DescribePresetsRequest, runtime: Util.RuntimeOptions): DescribePresetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePresets',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePresets(request: DescribePresetsRequest): DescribePresetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePresetsWithOptions(request, runtime);
}

model DescribePurchasedDeviceRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DescribePurchasedDeviceResponseBody = {
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  orderId?: string(name='OrderId'),
  region?: string(name='Region'),
  registerCode?: string(name='RegisterCode'),
  requestId?: string(name='RequestId'),
  subType?: string(name='SubType'),
  type?: string(name='Type'),
  vendor?: string(name='Vendor'),
}

model DescribePurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedDeviceResponseBody(name='body'),
}

async function describePurchasedDeviceWithOptions(request: DescribePurchasedDeviceRequest, runtime: Util.RuntimeOptions): DescribePurchasedDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedDevice(request: DescribePurchasedDeviceRequest): DescribePurchasedDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedDeviceWithOptions(request, runtime);
}

model DescribePurchasedDevicesRequest {
  groupId?: string(name='GroupId'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
  subType?: string(name='SubType'),
  type?: string(name='Type'),
  vendor?: string(name='Vendor'),
}

model DescribePurchasedDevicesResponseBody = {
  devices?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      orderId?: string(name='OrderId'),
      region?: string(name='Region'),
      registerCode?: string(name='RegisterCode'),
      subType?: string(name='SubType'),
      type?: string(name='Type'),
      vendor?: string(name='Vendor'),
    }
  ](name='Devices'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribePurchasedDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedDevicesResponseBody(name='body'),
}

async function describePurchasedDevicesWithOptions(request: DescribePurchasedDevicesRequest, runtime: Util.RuntimeOptions): DescribePurchasedDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedDevices(request: DescribePurchasedDevicesRequest): DescribePurchasedDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedDevicesWithOptions(request, runtime);
}

model DescribeRecordsRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  privateBucket?: boolean(name='PrivateBucket'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
  startTime?: string(name='StartTime'),
  streamId?: string(name='StreamId'),
  type?: string(name='Type'),
}

model DescribeRecordsResponseBody = {
  nextStartTime?: string(name='NextStartTime'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  records?: [ 
    {
      endTime?: string(name='EndTime'),
      fileFormat?: string(name='FileFormat'),
      height?: long(name='Height'),
      id?: string(name='Id'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      ossObject?: string(name='OssObject'),
      startTime?: string(name='StartTime'),
      streamId?: string(name='StreamId'),
      templateId?: string(name='TemplateId'),
      type?: string(name='Type'),
      url?: string(name='Url'),
      width?: long(name='Width'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordsResponseBody(name='body'),
}

async function describeRecordsWithOptions(request: DescribeRecordsRequest, runtime: Util.RuntimeOptions): DescribeRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.privateBucket)) {
    query['PrivateBucket'] = request.privateBucket;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.streamId)) {
    query['StreamId'] = request.streamId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecords',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecords(request: DescribeRecordsRequest): DescribeRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordsWithOptions(request, runtime);
}

model DescribeRenderingDevicesRequest {
  instanceIds?: string(name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
}

model DescribeRenderingDevicesResponseBody = {
  devices?: [ 
    {
      autoRenew?: boolean(name='AutoRenew'),
      autoRenewPeriod?: int32(name='AutoRenewPeriod'),
      clusterId?: string(name='ClusterId'),
      description?: string(name='Description'),
      edgeNodeName?: string(name='EdgeNodeName'),
      imageId?: string(name='ImageId'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      ipInfos?: [ 
        {
          externalIp?: string(name='ExternalIp'),
          externalPort?: string(name='ExternalPort'),
          ISP?: string(name='ISP'),
          internalIp?: string(name='InternalIp'),
          internalPort?: string(name='InternalPort'),
          ipProtocol?: string(name='IpProtocol'),
          natType?: string(name='NatType'),
        }
      ](name='IpInfos'),
      macAddress?: string(name='MacAddress'),
      period?: int32(name='Period'),
      periodUnit?: string(name='PeriodUnit'),
      platformType?: string(name='PlatformType'),
      podInfos?: [ 
        {
          network?: [ 
            {
              containerPorts?: string(name='ContainerPorts'),
              externalIp?: string(name='ExternalIp'),
              externalPorts?: string(name='ExternalPorts'),
            }
          ](name='Network'),
          podId?: string(name='PodId'),
          status?: string(name='Status'),
        }
      ](name='PodInfos'),
      serverName?: string(name='ServerName'),
      specification?: string(name='Specification'),
      status?: string(name='Status'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeRenderingDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRenderingDevicesResponseBody(name='body'),
}

async function describeRenderingDevicesWithOptions(request: DescribeRenderingDevicesRequest, runtime: Util.RuntimeOptions): DescribeRenderingDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRenderingDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRenderingDevices(request: DescribeRenderingDevicesRequest): DescribeRenderingDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRenderingDevicesWithOptions(request, runtime);
}

model DescribeStreamRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DescribeStreamResponseBody = {
  app?: string(name='App'),
  createdTime?: string(name='CreatedTime'),
  deviceId?: string(name='DeviceId'),
  enabled?: boolean(name='Enabled'),
  groupId?: string(name='GroupId'),
  height?: int32(name='Height'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  playDomain?: string(name='PlayDomain'),
  protocol?: string(name='Protocol'),
  pushDomain?: string(name='PushDomain'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  width?: int32(name='Width'),
}

model DescribeStreamResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStreamResponseBody(name='body'),
}

async function describeStreamWithOptions(request: DescribeStreamRequest, runtime: Util.RuntimeOptions): DescribeStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStream(request: DescribeStreamRequest): DescribeStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStreamWithOptions(request, runtime);
}

model DescribeStreamURLRequest {
  auth?: boolean(name='Auth'),
  authKey?: string(name='AuthKey'),
  endTime?: long(name='EndTime'),
  expire?: long(name='Expire'),
  id?: string(name='Id'),
  outProtocol?: string(name='OutProtocol'),
  ownerId?: long(name='OwnerId'),
  startTime?: long(name='StartTime'),
  transcode?: string(name='Transcode'),
  type?: string(name='Type'),
}

model DescribeStreamURLResponseBody = {
  expireTime?: long(name='ExpireTime'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model DescribeStreamURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStreamURLResponseBody(name='body'),
}

async function describeStreamURLWithOptions(request: DescribeStreamURLRequest, runtime: Util.RuntimeOptions): DescribeStreamURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auth)) {
    query['Auth'] = request.auth;
  }
  if (!Util.isUnset(request.authKey)) {
    query['AuthKey'] = request.authKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.expire)) {
    query['Expire'] = request.expire;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.outProtocol)) {
    query['OutProtocol'] = request.outProtocol;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.transcode)) {
    query['Transcode'] = request.transcode;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStreamURL',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStreamURL(request: DescribeStreamURLRequest): DescribeStreamURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStreamURLWithOptions(request, runtime);
}

model DescribeStreamVodListRequest {
  endTime?: long(name='EndTime'),
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  startTime?: long(name='StartTime'),
}

model DescribeStreamVodListResponseBody = {
  records?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
}

model DescribeStreamVodListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStreamVodListResponseBody(name='body'),
}

async function describeStreamVodListWithOptions(request: DescribeStreamVodListRequest, runtime: Util.RuntimeOptions): DescribeStreamVodListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStreamVodList',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStreamVodList(request: DescribeStreamVodListRequest): DescribeStreamVodListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStreamVodListWithOptions(request, runtime);
}

model DescribeStreamsRequest {
  app?: string(name='App'),
  deviceId?: string(name='DeviceId'),
  domain?: string(name='Domain'),
  groupId?: string(name='GroupId'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  parentId?: string(name='ParentId'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
}

model DescribeStreamsResponseBody = {
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  streams?: [ 
    {
      app?: string(name='App'),
      createdTime?: string(name='CreatedTime'),
      deviceId?: string(name='DeviceId'),
      enabled?: boolean(name='Enabled'),
      groupId?: string(name='GroupId'),
      height?: int32(name='Height'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      playDomain?: string(name='PlayDomain'),
      protocol?: string(name='Protocol'),
      pushDomain?: string(name='PushDomain'),
      status?: string(name='Status'),
      width?: int32(name='Width'),
    }
  ](name='Streams'),
  totalCount?: long(name='TotalCount'),
}

model DescribeStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStreamsResponseBody(name='body'),
}

async function describeStreamsWithOptions(request: DescribeStreamsRequest, runtime: Util.RuntimeOptions): DescribeStreamsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.app)) {
    query['App'] = request.app;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStreams',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStreams(request: DescribeStreamsRequest): DescribeStreamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStreamsWithOptions(request, runtime);
}

model DescribeTemplateRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model DescribeTemplateResponseBody = {
  callback?: string(name='Callback'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  fileFormat?: string(name='FileFormat'),
  flv?: string(name='Flv'),
  hlsM3u8?: string(name='HlsM3u8'),
  hlsTs?: string(name='HlsTs'),
  id?: string(name='Id'),
  interval?: long(name='Interval'),
  jpgOnDemand?: string(name='JpgOnDemand'),
  jpgOverwrite?: string(name='JpgOverwrite'),
  jpgSequence?: string(name='JpgSequence'),
  mp4?: string(name='Mp4'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossFilePrefix?: string(name='OssFilePrefix'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  retention?: long(name='Retention'),
  transConfigs?: [ 
    {
      fps?: long(name='Fps'),
      gop?: long(name='Gop'),
      height?: long(name='Height'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      videoBitrate?: long(name='VideoBitrate'),
      videoCodec?: string(name='VideoCodec'),
      width?: long(name='Width'),
    }
  ](name='TransConfigs'),
  trigger?: string(name='Trigger'),
  type?: string(name='Type'),
}

model DescribeTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTemplateResponseBody(name='body'),
}

async function describeTemplateWithOptions(request: DescribeTemplateRequest, runtime: Util.RuntimeOptions): DescribeTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTemplate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTemplate(request: DescribeTemplateRequest): DescribeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTemplateWithOptions(request, runtime);
}

model DescribeTemplatesRequest {
  id?: string(name='Id'),
  instanceId?: string(name='InstanceId'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
  sortDirection?: string(name='SortDirection'),
  type?: string(name='Type'),
}

model DescribeTemplatesResponseBody = {
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  templates?: [ 
    {
      callback?: string(name='Callback'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      fileFormat?: string(name='FileFormat'),
      flv?: string(name='Flv'),
      hlsM3u8?: string(name='HlsM3u8'),
      hlsTs?: string(name='HlsTs'),
      id?: string(name='Id'),
      interval?: long(name='Interval'),
      jpgOnDemand?: string(name='JpgOnDemand'),
      jpgOverwrite?: string(name='JpgOverwrite'),
      jpgSequence?: string(name='JpgSequence'),
      mp4?: string(name='Mp4'),
      name?: string(name='Name'),
      ossBucket?: string(name='OssBucket'),
      ossEndpoint?: string(name='OssEndpoint'),
      ossFilePrefix?: string(name='OssFilePrefix'),
      region?: string(name='Region'),
      retention?: long(name='Retention'),
      transConfigs?: [ 
        {
          fps?: long(name='Fps'),
          gop?: long(name='Gop'),
          height?: long(name='Height'),
          name?: string(name='Name'),
          videoBitrate?: long(name='VideoBitrate'),
          videoCodec?: string(name='VideoCodec'),
          width?: long(name='Width'),
          id?: string(name='id'),
        }
      ](name='TransConfigs'),
      trigger?: string(name='Trigger'),
      type?: string(name='Type'),
    }
  ](name='Templates'),
  totalCount?: long(name='TotalCount'),
}

model DescribeTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTemplatesResponseBody(name='body'),
}

async function describeTemplatesWithOptions(request: DescribeTemplatesRequest, runtime: Util.RuntimeOptions): DescribeTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTemplates',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTemplatesWithOptions(request, runtime);
}

model DescribeVodStreamURLRequest {
  ownerId?: long(name='OwnerId'),
  txId?: string(name='TxId'),
  url?: string(name='Url'),
}

model DescribeVodStreamURLResponseBody = {
  outProtocol?: string(name='OutProtocol'),
  port?: long(name='Port'),
  requestId?: string(name='RequestId'),
  txId?: string(name='TxId'),
  url?: string(name='Url'),
}

model DescribeVodStreamURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodStreamURLResponseBody(name='body'),
}

async function describeVodStreamURLWithOptions(request: DescribeVodStreamURLRequest, runtime: Util.RuntimeOptions): DescribeVodStreamURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.txId)) {
    query['TxId'] = request.txId;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVodStreamURL',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVodStreamURL(request: DescribeVodStreamURLRequest): DescribeVodStreamURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodStreamURLWithOptions(request, runtime);
}

model DescribeVsCertificateDetailRequest {
  certName?: string(name='CertName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVsCertificateDetailResponseBody = {
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  requestId?: string(name='RequestId'),
}

model DescribeVsCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsCertificateDetailResponseBody(name='body'),
}

async function describeVsCertificateDetailWithOptions(request: DescribeVsCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeVsCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsCertificateDetail',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsCertificateDetail(request: DescribeVsCertificateDetailRequest): DescribeVsCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsCertificateDetailWithOptions(request, runtime);
}

model DescribeVsCertificateListRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVsCertificateListResponseBody = {
  certificateListModel?: {
    certList?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeVsCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsCertificateListResponseBody(name='body'),
}

async function describeVsCertificateListWithOptions(request: DescribeVsCertificateListRequest, runtime: Util.RuntimeOptions): DescribeVsCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsCertificateList',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsCertificateList(request: DescribeVsCertificateListRequest): DescribeVsCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsCertificateListWithOptions(request, runtime);
}

model DescribeVsDevicesDataRequest {
  endTime?: string(name='EndTime'),
  groupId?: string(name='GroupId'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDevicesDataResponseBody = {
  devicesDataPerInterval?: {
    dataModule?: [ 
    {
      devicesDataValue?: string(name='DevicesDataValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='DevicesDataPerInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDevicesDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDevicesDataResponseBody(name='body'),
}

async function describeVsDevicesDataWithOptions(request: DescribeVsDevicesDataRequest, runtime: Util.RuntimeOptions): DescribeVsDevicesDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDevicesData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDevicesData(request: DescribeVsDevicesDataRequest): DescribeVsDevicesDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDevicesDataWithOptions(request, runtime);
}

model DescribeVsDomainBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bpsValue?: string(name='BpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainBpsDataResponseBody(name='body'),
}

async function describeVsDomainBpsDataWithOptions(request: DescribeVsDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainBpsData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainBpsData(request: DescribeVsDomainBpsDataRequest): DescribeVsDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainBpsDataWithOptions(request, runtime);
}

model DescribeVsDomainCertificateInfoRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVsDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certType?: string(name='CertType'),
      domainName?: string(name='DomainName'),
      SSLPub?: string(name='SSLPub'),
      serverCertificateStatus?: string(name='ServerCertificateStatus'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainCertificateInfoResponseBody(name='body'),
}

async function describeVsDomainCertificateInfoWithOptions(request: DescribeVsDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeVsDomainCertificateInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainCertificateInfo',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainCertificateInfo(request: DescribeVsDomainCertificateInfoRequest): DescribeVsDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeVsDomainConfigsRequest {
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVsDomainConfigsResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainConfigsResponseBody(name='body'),
}

async function describeVsDomainConfigsWithOptions(request: DescribeVsDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeVsDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainConfigs',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainConfigs(request: DescribeVsDomainConfigsRequest): DescribeVsDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainConfigsWithOptions(request, runtime);
}

model DescribeVsDomainDetailRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVsDomainDetailResponseBody = {
  domainConfig?: {
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    domainType?: string(name='DomainType'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    region?: string(name='Region'),
    SSLProtocol?: string(name='SSLProtocol'),
    scope?: string(name='Scope'),
  }(name='DomainConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainDetailResponseBody(name='body'),
}

async function describeVsDomainDetailWithOptions(request: DescribeVsDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeVsDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainDetail',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainDetail(request: DescribeVsDomainDetailRequest): DescribeVsDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainDetailWithOptions(request, runtime);
}

model DescribeVsDomainOnlineUserNumRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  queryTime?: string(name='QueryTime'),
}

model DescribeVsDomainOnlineUserNumResponseBody = {
  onlineUserInfo?: {
    liveStreamOnlineUserNumInfo?: [ 
    {
      infos?: {
        info?: [ 
        {
          transcodeTemplate?: string(name='TranscodeTemplate'),
          userNumber?: long(name='UserNumber'),
        }
      ](name='Info')
      }(name='Infos'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveStreamOnlineUserNumInfo')
  }(name='OnlineUserInfo'),
  requestId?: string(name='RequestId'),
  streamCount?: int32(name='StreamCount'),
  userCount?: int32(name='UserCount'),
}

model DescribeVsDomainOnlineUserNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainOnlineUserNumResponseBody(name='body'),
}

async function describeVsDomainOnlineUserNumWithOptions(request: DescribeVsDomainOnlineUserNumRequest, runtime: Util.RuntimeOptions): DescribeVsDomainOnlineUserNumResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.queryTime)) {
    query['QueryTime'] = request.queryTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainOnlineUserNum',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainOnlineUserNum(request: DescribeVsDomainOnlineUserNumRequest): DescribeVsDomainOnlineUserNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainOnlineUserNumWithOptions(request, runtime);
}

model DescribeVsDomainPvDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainPvDataResponseBody(name='body'),
}

async function describeVsDomainPvDataWithOptions(request: DescribeVsDomainPvDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainPvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainPvData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainPvData(request: DescribeVsDomainPvDataRequest): DescribeVsDomainPvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainPvDataWithOptions(request, runtime);
}

model DescribeVsDomainPvUvDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainPvUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvUvDataInfos?: {
    pvUvDataInfo?: [ 
    {
      PV?: string(name='PV'),
      timeStamp?: string(name='TimeStamp'),
      UV?: string(name='UV'),
    }
  ](name='PvUvDataInfo')
  }(name='PvUvDataInfos'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainPvUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainPvUvDataResponseBody(name='body'),
}

async function describeVsDomainPvUvDataWithOptions(request: DescribeVsDomainPvUvDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainPvUvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainPvUvData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainPvUvData(request: DescribeVsDomainPvUvDataRequest): DescribeVsDomainPvUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainPvUvDataWithOptions(request, runtime);
}

model DescribeVsDomainRecordDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainRecordDataResponseBody = {
  recordDataPerInterval?: {
    dataModule?: [ 
    {
      recordValue?: string(name='RecordValue'),
      streamCountValue?: string(name='StreamCountValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RecordDataPerInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeVsDomainRecordDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainRecordDataResponseBody(name='body'),
}

async function describeVsDomainRecordDataWithOptions(request: DescribeVsDomainRecordDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainRecordDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainRecordData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainRecordData(request: DescribeVsDomainRecordDataRequest): DescribeVsDomainRecordDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainRecordDataWithOptions(request, runtime);
}

model DescribeVsDomainRegionDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      region?: string(name='Region'),
      regionEname?: string(name='RegionEname'),
      reqErrRate?: string(name='ReqErrRate'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeVsDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainRegionDataResponseBody(name='body'),
}

async function describeVsDomainRegionDataWithOptions(request: DescribeVsDomainRegionDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainRegionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainRegionData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainRegionData(request: DescribeVsDomainRegionDataRequest): DescribeVsDomainRegionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainRegionDataWithOptions(request, runtime);
}

model DescribeVsDomainReqBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainReqBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  reqBpsDataPerInterval?: {
    dataModule?: [ 
    {
      reqBpsValue?: string(name='ReqBpsValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='ReqBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainReqBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainReqBpsDataResponseBody(name='body'),
}

async function describeVsDomainReqBpsDataWithOptions(request: DescribeVsDomainReqBpsDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainReqBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainReqBpsData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainReqBpsData(request: DescribeVsDomainReqBpsDataRequest): DescribeVsDomainReqBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainReqBpsDataWithOptions(request, runtime);
}

model DescribeVsDomainReqTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainReqTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  reqTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      reqTrafficValue?: string(name='ReqTrafficValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='ReqTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainReqTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainReqTrafficDataResponseBody(name='body'),
}

async function describeVsDomainReqTrafficDataWithOptions(request: DescribeVsDomainReqTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainReqTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainReqTrafficData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainReqTrafficData(request: DescribeVsDomainReqTrafficDataRequest): DescribeVsDomainReqTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainReqTrafficDataWithOptions(request, runtime);
}

model DescribeVsDomainSnapshotDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainSnapshotDataResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotDataPerInterval?: {
    dataModule?: [ 
    {
      snapshotValue?: string(name='SnapshotValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='SnapshotDataPerInterval'),
}

model DescribeVsDomainSnapshotDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainSnapshotDataResponseBody(name='body'),
}

async function describeVsDomainSnapshotDataWithOptions(request: DescribeVsDomainSnapshotDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainSnapshotDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainSnapshotData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainSnapshotData(request: DescribeVsDomainSnapshotDataRequest): DescribeVsDomainSnapshotDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainSnapshotDataWithOptions(request, runtime);
}

model DescribeVsDomainTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeVsDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainTrafficDataResponseBody(name='body'),
}

async function describeVsDomainTrafficDataWithOptions(request: DescribeVsDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainTrafficData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainTrafficData(request: DescribeVsDomainTrafficDataRequest): DescribeVsDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainTrafficDataWithOptions(request, runtime);
}

model DescribeVsDomainUvDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeVsDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsDomainUvDataResponseBody(name='body'),
}

async function describeVsDomainUvDataWithOptions(request: DescribeVsDomainUvDataRequest, runtime: Util.RuntimeOptions): DescribeVsDomainUvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsDomainUvData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsDomainUvData(request: DescribeVsDomainUvDataRequest): DescribeVsDomainUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsDomainUvDataWithOptions(request, runtime);
}

model DescribeVsPullStreamConfigRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVsPullStreamConfigResponseBody = {
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      endTime?: string(name='EndTime'),
      sourceUrl?: string(name='SourceUrl'),
      startTime?: string(name='StartTime'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
  requestId?: string(name='RequestId'),
}

model DescribeVsPullStreamConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsPullStreamConfigResponseBody(name='body'),
}

async function describeVsPullStreamConfigWithOptions(request: DescribeVsPullStreamConfigRequest, runtime: Util.RuntimeOptions): DescribeVsPullStreamConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsPullStreamConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsPullStreamConfig(request: DescribeVsPullStreamConfigRequest): DescribeVsPullStreamConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsPullStreamConfigWithOptions(request, runtime);
}

model DescribeVsPullStreamInfoConfigRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVsPullStreamInfoConfigResponseBody = {
  liveAppRecordList?: {
    liveAppRecord?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      endTime?: string(name='EndTime'),
      sourceUrl?: string(name='SourceUrl'),
      startTime?: string(name='StartTime'),
      streamName?: string(name='StreamName'),
    }
  ](name='LiveAppRecord')
  }(name='LiveAppRecordList'),
  requestId?: string(name='RequestId'),
}

model DescribeVsPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsPullStreamInfoConfigResponseBody(name='body'),
}

async function describeVsPullStreamInfoConfigWithOptions(request: DescribeVsPullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): DescribeVsPullStreamInfoConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsPullStreamInfoConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsPullStreamInfoConfig(request: DescribeVsPullStreamInfoConfigRequest): DescribeVsPullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsPullStreamInfoConfigWithOptions(request, runtime);
}

model DescribeVsStorageTrafficUsageDataRequest {
  bucket?: string(name='Bucket'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  splitBy?: string(name='SplitBy'),
  startTime?: string(name='StartTime'),
}

model DescribeVsStorageTrafficUsageDataResponseBody = {
  requestId?: string(name='RequestId'),
  trafficUsage?: {
    trafficUsageDataModule?: [ 
    {
      bucket?: string(name='Bucket'),
      lanBandwidthInDataValue?: float(name='LanBandwidthInDataValue'),
      lanBandwidthOutDataValue?: float(name='LanBandwidthOutDataValue'),
      lanTrafficInDataValue?: long(name='LanTrafficInDataValue'),
      lanTrafficOutDataValue?: long(name='LanTrafficOutDataValue'),
      timeStamp?: string(name='TimeStamp'),
      wanBandwidthInDataValue?: float(name='WanBandwidthInDataValue'),
      wanBandwidthOutDataValue?: float(name='WanBandwidthOutDataValue'),
      wanTrafficInDataValue?: long(name='WanTrafficInDataValue'),
      wanTrafficOutDataValue?: long(name='WanTrafficOutDataValue'),
    }
  ](name='TrafficUsageDataModule')
  }(name='TrafficUsage'),
}

model DescribeVsStorageTrafficUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStorageTrafficUsageDataResponseBody(name='body'),
}

async function describeVsStorageTrafficUsageDataWithOptions(request: DescribeVsStorageTrafficUsageDataRequest, runtime: Util.RuntimeOptions): DescribeVsStorageTrafficUsageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucket)) {
    query['Bucket'] = request.bucket;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.splitBy)) {
    query['SplitBy'] = request.splitBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsStorageTrafficUsageData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsStorageTrafficUsageData(request: DescribeVsStorageTrafficUsageDataRequest): DescribeVsStorageTrafficUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsStorageTrafficUsageDataWithOptions(request, runtime);
}

model DescribeVsStorageUsageDataRequest {
  bucket?: string(name='Bucket'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  splitBy?: string(name='SplitBy'),
  startTime?: string(name='StartTime'),
}

model DescribeVsStorageUsageDataResponseBody = {
  requestId?: string(name='RequestId'),
  storageUsage?: {
    storageUsageDataModule?: [ 
    {
      bucket?: string(name='Bucket'),
      storageDataValue?: int32(name='StorageDataValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='StorageUsageDataModule')
  }(name='StorageUsage'),
}

model DescribeVsStorageUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStorageUsageDataResponseBody(name='body'),
}

async function describeVsStorageUsageDataWithOptions(request: DescribeVsStorageUsageDataRequest, runtime: Util.RuntimeOptions): DescribeVsStorageUsageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucket)) {
    query['Bucket'] = request.bucket;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.splitBy)) {
    query['SplitBy'] = request.splitBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsStorageUsageData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsStorageUsageData(request: DescribeVsStorageUsageDataRequest): DescribeVsStorageUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsStorageUsageDataWithOptions(request, runtime);
}

model DescribeVsStreamsNotifyUrlConfigRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVsStreamsNotifyUrlConfigResponseBody = {
  liveStreamsNotifyConfig?: {
    authKey?: string(name='AuthKey'),
    authType?: string(name='AuthType'),
    domainName?: string(name='DomainName'),
    notifyUrl?: string(name='NotifyUrl'),
  }(name='LiveStreamsNotifyConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeVsStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function describeVsStreamsNotifyUrlConfigWithOptions(request: DescribeVsStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): DescribeVsStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsStreamsNotifyUrlConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsStreamsNotifyUrlConfig(request: DescribeVsStreamsNotifyUrlConfigRequest): DescribeVsStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model DescribeVsStreamsOnlineListRequest {
  appName?: string(name='AppName'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  orderBy?: string(name='OrderBy'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  queryType?: string(name='QueryType'),
  startTime?: string(name='StartTime'),
  streamName?: string(name='StreamName'),
  streamType?: string(name='StreamType'),
}

model DescribeVsStreamsOnlineListResponseBody = {
  onlineInfo?: {
    liveStreamOnlineInfo?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      publishDomain?: string(name='PublishDomain'),
      publishTime?: string(name='PublishTime'),
      publishType?: string(name='PublishType'),
      publishUrl?: string(name='PublishUrl'),
      streamName?: string(name='StreamName'),
      transcodeId?: string(name='TranscodeId'),
      transcoded?: string(name='Transcoded'),
    }
  ](name='LiveStreamOnlineInfo')
  }(name='OnlineInfo'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeVsStreamsOnlineListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStreamsOnlineListResponseBody(name='body'),
}

async function describeVsStreamsOnlineListWithOptions(request: DescribeVsStreamsOnlineListRequest, runtime: Util.RuntimeOptions): DescribeVsStreamsOnlineListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.streamName)) {
    query['StreamName'] = request.streamName;
  }
  if (!Util.isUnset(request.streamType)) {
    query['StreamType'] = request.streamType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsStreamsOnlineList',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsStreamsOnlineList(request: DescribeVsStreamsOnlineListRequest): DescribeVsStreamsOnlineListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsStreamsOnlineListWithOptions(request, runtime);
}

model DescribeVsStreamsPublishListRequest {
  appName?: string(name='AppName'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  orderBy?: string(name='OrderBy'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryType?: string(name='QueryType'),
  startTime?: string(name='StartTime'),
  streamName?: string(name='StreamName'),
  streamType?: string(name='StreamType'),
}

model DescribeVsStreamsPublishListResponseBody = {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  publishInfo?: {
    liveStreamPublishInfo?: [ 
    {
      appName?: string(name='AppName'),
      clientAddr?: string(name='ClientAddr'),
      domainName?: string(name='DomainName'),
      edgeNodeAddr?: string(name='EdgeNodeAddr'),
      publishDomain?: string(name='PublishDomain'),
      publishTime?: string(name='PublishTime'),
      publishType?: string(name='PublishType'),
      publishUrl?: string(name='PublishUrl'),
      stopTime?: string(name='StopTime'),
      streamName?: string(name='StreamName'),
      streamUrl?: string(name='StreamUrl'),
      transcodeId?: string(name='TranscodeId'),
      transcoded?: string(name='Transcoded'),
    }
  ](name='LiveStreamPublishInfo')
  }(name='PublishInfo'),
  requestId?: string(name='RequestId'),
  totalNum?: int32(name='TotalNum'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeVsStreamsPublishListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsStreamsPublishListResponseBody(name='body'),
}

async function describeVsStreamsPublishListWithOptions(request: DescribeVsStreamsPublishListRequest, runtime: Util.RuntimeOptions): DescribeVsStreamsPublishListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.streamName)) {
    query['StreamName'] = request.streamName;
  }
  if (!Util.isUnset(request.streamType)) {
    query['StreamType'] = request.streamType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsStreamsPublishList',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsStreamsPublishList(request: DescribeVsStreamsPublishListRequest): DescribeVsStreamsPublishListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsStreamsPublishListWithOptions(request, runtime);
}

model DescribeVsTopDomainsByFlowRequest {
  endTime?: string(name='EndTime'),
  limit?: long(name='Limit'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName'),
      maxBps?: long(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
      trafficPercent?: string(name='TrafficPercent'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeVsTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsTopDomainsByFlowResponseBody(name='body'),
}

async function describeVsTopDomainsByFlowWithOptions(request: DescribeVsTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeVsTopDomainsByFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsTopDomainsByFlow',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsTopDomainsByFlow(request: DescribeVsTopDomainsByFlowRequest): DescribeVsTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeVsUpPeakPublishStreamDataRequest {
  domainName?: string(name='DomainName'),
  domainSwitch?: string(name='DomainSwitch'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVsUpPeakPublishStreamDataResponseBody = {
  describeVsUpPeakPublishStreamDatas?: {
    describeVsUpPeakPublishStreamData?: [ 
    {
      bandWidth?: string(name='BandWidth'),
      peakTime?: string(name='PeakTime'),
      publishStreamNum?: int32(name='PublishStreamNum'),
      queryTime?: string(name='QueryTime'),
      statName?: string(name='StatName'),
    }
  ](name='DescribeVsUpPeakPublishStreamData')
  }(name='DescribeVsUpPeakPublishStreamDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeVsUpPeakPublishStreamDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsUpPeakPublishStreamDataResponseBody(name='body'),
}

async function describeVsUpPeakPublishStreamDataWithOptions(request: DescribeVsUpPeakPublishStreamDataRequest, runtime: Util.RuntimeOptions): DescribeVsUpPeakPublishStreamDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainSwitch)) {
    query['DomainSwitch'] = request.domainSwitch;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsUpPeakPublishStreamData',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsUpPeakPublishStreamData(request: DescribeVsUpPeakPublishStreamDataRequest): DescribeVsUpPeakPublishStreamDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsUpPeakPublishStreamDataWithOptions(request, runtime);
}

model DescribeVsUserResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeVsUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      currCapacity?: string(name='CurrCapacity'),
      displayName?: string(name='DisplayName'),
      initCapacity?: string(name='InitCapacity'),
      instanceId?: string(name='InstanceId'),
      status?: string(name='Status'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos'),
}

model DescribeVsUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVsUserResourcePackageResponseBody(name='body'),
}

async function describeVsUserResourcePackageWithOptions(request: DescribeVsUserResourcePackageRequest, runtime: Util.RuntimeOptions): DescribeVsUserResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVsUserResourcePackage',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVsUserResourcePackage(request: DescribeVsUserResourcePackageRequest): DescribeVsUserResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVsUserResourcePackageWithOptions(request, runtime);
}

model ForbidVsStreamRequest {
  appName?: string(name='AppName'),
  controlStreamAction?: string(name='ControlStreamAction'),
  domainName?: string(name='DomainName'),
  liveStreamType?: string(name='LiveStreamType'),
  oneshot?: string(name='Oneshot'),
  ownerId?: long(name='OwnerId'),
  resumeTime?: string(name='ResumeTime'),
  streamName?: string(name='StreamName'),
}

model ForbidVsStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ForbidVsStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ForbidVsStreamResponseBody(name='body'),
}

async function forbidVsStreamWithOptions(request: ForbidVsStreamRequest, runtime: Util.RuntimeOptions): ForbidVsStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.controlStreamAction)) {
    query['ControlStreamAction'] = request.controlStreamAction;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.liveStreamType)) {
    query['LiveStreamType'] = request.liveStreamType;
  }
  if (!Util.isUnset(request.oneshot)) {
    query['Oneshot'] = request.oneshot;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resumeTime)) {
    query['ResumeTime'] = request.resumeTime;
  }
  if (!Util.isUnset(request.streamName)) {
    query['StreamName'] = request.streamName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ForbidVsStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function forbidVsStream(request: ForbidVsStreamRequest): ForbidVsStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return forbidVsStreamWithOptions(request, runtime);
}

model GetBucketInfoRequest {
  bucketName?: string(name='BucketName'),
  ownerId?: long(name='OwnerId'),
}

model GetBucketInfoResponseBody = {
  bucketInfo?: {
    bucketAcl?: string(name='BucketAcl'),
    bucketName?: string(name='BucketName'),
    comment?: string(name='Comment'),
    createTime?: string(name='CreateTime'),
    dataRedundancyType?: string(name='DataRedundancyType'),
    dispatcherType?: string(name='DispatcherType'),
    endpoint?: string(name='Endpoint'),
    modifyTime?: string(name='ModifyTime'),
    resourceType?: string(name='ResourceType'),
    storageClass?: string(name='StorageClass'),
  }(name='BucketInfo'),
  requestId?: string(name='RequestId'),
}

model GetBucketInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetBucketInfoResponseBody(name='body'),
}

async function getBucketInfoWithOptions(request: GetBucketInfoRequest, runtime: Util.RuntimeOptions): GetBucketInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBucketInfo',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBucketInfo(request: GetBucketInfoRequest): GetBucketInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBucketInfoWithOptions(request, runtime);
}

model GetObjectTotalRequest {
  bucketName?: string(name='BucketName'),
  ownerId?: long(name='OwnerId'),
}

model GetObjectTotalResponseBody = {
  objectCount?: long(name='ObjectCount'),
  requestId?: string(name='RequestId'),
}

model GetObjectTotalResponse = {
  headers: map[string]string(name='headers'),
  body: GetObjectTotalResponseBody(name='body'),
}

async function getObjectTotalWithOptions(request: GetObjectTotalRequest, runtime: Util.RuntimeOptions): GetObjectTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetObjectTotal',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getObjectTotal(request: GetObjectTotalRequest): GetObjectTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getObjectTotalWithOptions(request, runtime);
}

model GotoPresetRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  presetId?: string(name='PresetId'),
}

model GotoPresetResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model GotoPresetResponse = {
  headers: map[string]string(name='headers'),
  body: GotoPresetResponseBody(name='body'),
}

async function gotoPresetWithOptions(request: GotoPresetRequest, runtime: Util.RuntimeOptions): GotoPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.presetId)) {
    query['PresetId'] = request.presetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GotoPreset',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function gotoPreset(request: GotoPresetRequest): GotoPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return gotoPresetWithOptions(request, runtime);
}

model ListBucketsRequest {
  keyword?: string(name='Keyword'),
  marker?: string(name='Marker'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  prefix?: string(name='Prefix'),
}

model ListBucketsResponseBody = {
  bucketInfos?: [ 
    {
      bucketAcl?: string(name='BucketAcl'),
      bucketName?: string(name='BucketName'),
      comment?: string(name='Comment'),
      createTime?: string(name='CreateTime'),
      dataRedundancyType?: string(name='DataRedundancyType'),
      dispatcherType?: string(name='DispatcherType'),
      endpoint?: string(name='Endpoint'),
      modifyTime?: string(name='ModifyTime'),
      resourceType?: string(name='ResourceType'),
      storageClass?: string(name='StorageClass'),
    }
  ](name='BucketInfos'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListBucketsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBucketsResponseBody(name='body'),
}

async function listBucketsWithOptions(request: ListBucketsRequest, runtime: Util.RuntimeOptions): ListBucketsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.marker)) {
    query['Marker'] = request.marker;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBuckets',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBuckets(request: ListBucketsRequest): ListBucketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBucketsWithOptions(request, runtime);
}

model ListDeviceChannelsRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model ListDeviceChannelsResponseBody = {
  channels?: [ 
    {
      channelId?: long(name='ChannelId'),
      deviceId?: string(name='DeviceId'),
      deviceStatus?: string(name='DeviceStatus'),
      name?: string(name='Name'),
      params?: string(name='Params'),
    }
  ](name='Channels'),
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDeviceChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceChannelsResponseBody(name='body'),
}

async function listDeviceChannelsWithOptions(request: ListDeviceChannelsRequest, runtime: Util.RuntimeOptions): ListDeviceChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceChannels',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeviceChannels(request: ListDeviceChannelsRequest): ListDeviceChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceChannelsWithOptions(request, runtime);
}

model ListDeviceRecordsRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  searchCriteria?: string(name='SearchCriteria'),
  streamId?: string(name='StreamId'),
}

model ListDeviceRecordsResponseBody = {
  pageCount?: long(name='PageCount'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  records?: [ 
    {
      endTime?: string(name='EndTime'),
      fileSize?: long(name='FileSize'),
      filename?: string(name='Filename'),
      recordType?: string(name='RecordType'),
      startTime?: string(name='StartTime'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDeviceRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceRecordsResponseBody(name='body'),
}

async function listDeviceRecordsWithOptions(request: ListDeviceRecordsRequest, runtime: Util.RuntimeOptions): ListDeviceRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchCriteria)) {
    query['SearchCriteria'] = request.searchCriteria;
  }
  if (!Util.isUnset(request.streamId)) {
    query['StreamId'] = request.streamId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceRecords',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeviceRecords(request: ListDeviceRecordsRequest): ListDeviceRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceRecordsWithOptions(request, runtime);
}

model ListObjectsRequest {
  bucketName?: string(name='BucketName'),
  continuationToken?: string(name='ContinuationToken'),
  delimiter?: string(name='Delimiter'),
  encodingType?: string(name='EncodingType'),
  marker?: string(name='Marker'),
  maxKeys?: int32(name='MaxKeys'),
  ownerId?: long(name='OwnerId'),
  prefix?: string(name='Prefix'),
  startAfter?: string(name='StartAfter'),
}

model ListObjectsResponseBody = {
  bucketName?: string(name='BucketName'),
  commonPrefixes?: [ string ](name='CommonPrefixes'),
  contents?: [ 
    {
      ETag?: string(name='ETag'),
      key?: string(name='Key'),
      lastModified?: string(name='LastModified'),
      size?: long(name='Size'),
      storageClass?: string(name='StorageClass'),
    }
  ](name='Contents'),
  continuationToken?: string(name='ContinuationToken'),
  delimiter?: string(name='Delimiter'),
  encodingType?: string(name='EncodingType'),
  isTruncated?: boolean(name='IsTruncated'),
  keyCount?: int32(name='KeyCount'),
  marker?: string(name='Marker'),
  maxKeys?: int32(name='MaxKeys'),
  nextContinuationToken?: string(name='NextContinuationToken'),
  nextMarker?: string(name='NextMarker'),
  prefix?: string(name='Prefix'),
  requestId?: string(name='RequestId'),
}

model ListObjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListObjectsResponseBody(name='body'),
}

async function listObjectsWithOptions(request: ListObjectsRequest, runtime: Util.RuntimeOptions): ListObjectsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.continuationToken)) {
    query['ContinuationToken'] = request.continuationToken;
  }
  if (!Util.isUnset(request.delimiter)) {
    query['Delimiter'] = request.delimiter;
  }
  if (!Util.isUnset(request.encodingType)) {
    query['EncodingType'] = request.encodingType;
  }
  if (!Util.isUnset(request.marker)) {
    query['Marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxKeys)) {
    query['MaxKeys'] = request.maxKeys;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.startAfter)) {
    query['StartAfter'] = request.startAfter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListObjects',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listObjects(request: ListObjectsRequest): ListObjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listObjectsWithOptions(request, runtime);
}

model ModifyDeviceRequest {
  alarmMethod?: string(name='AlarmMethod'),
  autoPos?: boolean(name='AutoPos'),
  autoStart?: boolean(name='AutoStart'),
  description?: string(name='Description'),
  directoryId?: string(name='DirectoryId'),
  gbId?: string(name='GbId'),
  groupId?: string(name='GroupId'),
  id?: string(name='Id'),
  ip?: string(name='Ip'),
  latitude?: string(name='Latitude'),
  longitude?: string(name='Longitude'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  params?: string(name='Params'),
  parentId?: string(name='ParentId'),
  password?: string(name='Password'),
  port?: long(name='Port'),
  posInterval?: long(name='PosInterval'),
  type?: string(name='Type'),
  url?: string(name='Url'),
  username?: string(name='Username'),
  vendor?: string(name='Vendor'),
}

model ModifyDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceResponseBody(name='body'),
}

async function modifyDeviceWithOptions(request: ModifyDeviceRequest, runtime: Util.RuntimeOptions): ModifyDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmMethod)) {
    query['AlarmMethod'] = request.alarmMethod;
  }
  if (!Util.isUnset(request.autoPos)) {
    query['AutoPos'] = request.autoPos;
  }
  if (!Util.isUnset(request.autoStart)) {
    query['AutoStart'] = request.autoStart;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.gbId)) {
    query['GbId'] = request.gbId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.latitude)) {
    query['Latitude'] = request.latitude;
  }
  if (!Util.isUnset(request.longitude)) {
    query['Longitude'] = request.longitude;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.params)) {
    query['Params'] = request.params;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.posInterval)) {
    query['PosInterval'] = request.posInterval;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDevice(request: ModifyDeviceRequest): ModifyDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeviceWithOptions(request, runtime);
}

model ModifyDeviceAlarmRequest {
  alarmId?: string(name='AlarmId'),
  channelId?: int32(name='ChannelId'),
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  status?: int32(name='Status'),
}

model ModifyDeviceAlarmResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeviceAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceAlarmResponseBody(name='body'),
}

async function modifyDeviceAlarmWithOptions(request: ModifyDeviceAlarmRequest, runtime: Util.RuntimeOptions): ModifyDeviceAlarmResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmId)) {
    query['AlarmId'] = request.alarmId;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDeviceAlarm',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDeviceAlarm(request: ModifyDeviceAlarmRequest): ModifyDeviceAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeviceAlarmWithOptions(request, runtime);
}

model ModifyDeviceCaptureRequest {
  id?: string(name='Id'),
  image?: int32(name='Image'),
  ownerId?: long(name='OwnerId'),
  video?: int32(name='Video'),
}

model ModifyDeviceCaptureResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeviceCaptureResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceCaptureResponseBody(name='body'),
}

async function modifyDeviceCaptureWithOptions(request: ModifyDeviceCaptureRequest, runtime: Util.RuntimeOptions): ModifyDeviceCaptureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.video)) {
    query['Video'] = request.video;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDeviceCapture',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDeviceCapture(request: ModifyDeviceCaptureRequest): ModifyDeviceCaptureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeviceCaptureWithOptions(request, runtime);
}

model ModifyDeviceChannelsRequest {
  channels?: string(name='Channels'),
  deviceStatus?: string(name='DeviceStatus'),
  dsn?: string(name='Dsn'),
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model ModifyDeviceChannelsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeviceChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceChannelsResponseBody(name='body'),
}

async function modifyDeviceChannelsWithOptions(request: ModifyDeviceChannelsRequest, runtime: Util.RuntimeOptions): ModifyDeviceChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channels)) {
    query['Channels'] = request.channels;
  }
  if (!Util.isUnset(request.deviceStatus)) {
    query['DeviceStatus'] = request.deviceStatus;
  }
  if (!Util.isUnset(request.dsn)) {
    query['Dsn'] = request.dsn;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDeviceChannels',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDeviceChannels(request: ModifyDeviceChannelsRequest): ModifyDeviceChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeviceChannelsWithOptions(request, runtime);
}

model ModifyDirectoryRequest {
  description?: string(name='Description'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model ModifyDirectoryResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDirectoryResponseBody(name='body'),
}

async function modifyDirectoryWithOptions(request: ModifyDirectoryRequest, runtime: Util.RuntimeOptions): ModifyDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDirectory',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDirectory(request: ModifyDirectoryRequest): ModifyDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDirectoryWithOptions(request, runtime);
}

model ModifyGroupRequest {
  callback?: string(name='Callback'),
  description?: string(name='Description'),
  enabled?: boolean(name='Enabled'),
  id?: string(name='Id'),
  inProtocol?: string(name='InProtocol'),
  lazyPull?: boolean(name='LazyPull'),
  name?: string(name='Name'),
  outProtocol?: string(name='OutProtocol'),
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain'),
  pushDomain?: string(name='PushDomain'),
  region?: string(name='Region'),
}

model ModifyGroupResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGroupResponseBody(name='body'),
}

async function modifyGroupWithOptions(request: ModifyGroupRequest, runtime: Util.RuntimeOptions): ModifyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.inProtocol)) {
    query['InProtocol'] = request.inProtocol;
  }
  if (!Util.isUnset(request.lazyPull)) {
    query['LazyPull'] = request.lazyPull;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.outProtocol)) {
    query['OutProtocol'] = request.outProtocol;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playDomain)) {
    query['PlayDomain'] = request.playDomain;
  }
  if (!Util.isUnset(request.pushDomain)) {
    query['PushDomain'] = request.pushDomain;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyGroup',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyGroup(request: ModifyGroupRequest): ModifyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGroupWithOptions(request, runtime);
}

model ModifyParentPlatformRequest {
  autoStart?: boolean(name='AutoStart'),
  clientAuth?: boolean(name='ClientAuth'),
  clientPassword?: string(name='ClientPassword'),
  clientUsername?: string(name='ClientUsername'),
  description?: string(name='Description'),
  gbId?: string(name='GbId'),
  id?: string(name='Id'),
  ip?: string(name='Ip'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  port?: long(name='Port'),
}

model ModifyParentPlatformResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParentPlatformResponseBody(name='body'),
}

async function modifyParentPlatformWithOptions(request: ModifyParentPlatformRequest, runtime: Util.RuntimeOptions): ModifyParentPlatformResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoStart)) {
    query['AutoStart'] = request.autoStart;
  }
  if (!Util.isUnset(request.clientAuth)) {
    query['ClientAuth'] = request.clientAuth;
  }
  if (!Util.isUnset(request.clientPassword)) {
    query['ClientPassword'] = request.clientPassword;
  }
  if (!Util.isUnset(request.clientUsername)) {
    query['ClientUsername'] = request.clientUsername;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.gbId)) {
    query['GbId'] = request.gbId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyParentPlatform',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyParentPlatform(request: ModifyParentPlatformRequest): ModifyParentPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParentPlatformWithOptions(request, runtime);
}

model ModifyPurchasedDeviceRequest {
  description?: string(name='Description'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  orderId?: string(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  registerCode?: string(name='RegisterCode'),
  subType?: string(name='SubType'),
  vendor?: string(name='Vendor'),
}

model ModifyPurchasedDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyPurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPurchasedDeviceResponseBody(name='body'),
}

async function modifyPurchasedDeviceWithOptions(request: ModifyPurchasedDeviceRequest, runtime: Util.RuntimeOptions): ModifyPurchasedDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.registerCode)) {
    query['RegisterCode'] = request.registerCode;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPurchasedDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPurchasedDevice(request: ModifyPurchasedDeviceRequest): ModifyPurchasedDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPurchasedDeviceWithOptions(request, runtime);
}

model ModifyTemplateRequest {
  callback?: string(name='Callback'),
  description?: string(name='Description'),
  fileFormat?: string(name='FileFormat'),
  flv?: string(name='Flv'),
  hlsM3u8?: string(name='HlsM3u8'),
  hlsTs?: string(name='HlsTs'),
  id?: string(name='Id'),
  interval?: long(name='Interval'),
  jpgOnDemand?: string(name='JpgOnDemand'),
  jpgOverwrite?: string(name='JpgOverwrite'),
  jpgSequence?: string(name='JpgSequence'),
  mp4?: string(name='Mp4'),
  name?: string(name='Name'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossFilePrefix?: string(name='OssFilePrefix'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  retention?: long(name='Retention'),
  transConfigsJSON?: string(name='TransConfigsJSON'),
  trigger?: string(name='Trigger'),
}

model ModifyTemplateResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model ModifyTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTemplateResponseBody(name='body'),
}

async function modifyTemplateWithOptions(request: ModifyTemplateRequest, runtime: Util.RuntimeOptions): ModifyTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileFormat)) {
    query['FileFormat'] = request.fileFormat;
  }
  if (!Util.isUnset(request.flv)) {
    query['Flv'] = request.flv;
  }
  if (!Util.isUnset(request.hlsM3u8)) {
    query['HlsM3u8'] = request.hlsM3u8;
  }
  if (!Util.isUnset(request.hlsTs)) {
    query['HlsTs'] = request.hlsTs;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.jpgOnDemand)) {
    query['JpgOnDemand'] = request.jpgOnDemand;
  }
  if (!Util.isUnset(request.jpgOverwrite)) {
    query['JpgOverwrite'] = request.jpgOverwrite;
  }
  if (!Util.isUnset(request.jpgSequence)) {
    query['JpgSequence'] = request.jpgSequence;
  }
  if (!Util.isUnset(request.mp4)) {
    query['Mp4'] = request.mp4;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!Util.isUnset(request.ossFilePrefix)) {
    query['OssFilePrefix'] = request.ossFilePrefix;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.transConfigsJSON)) {
    query['TransConfigsJSON'] = request.transConfigsJSON;
  }
  if (!Util.isUnset(request.trigger)) {
    query['Trigger'] = request.trigger;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTemplate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTemplate(request: ModifyTemplateRequest): ModifyTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTemplateWithOptions(request, runtime);
}

model OpenVsServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenVsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenVsServiceResponseBody(name='body'),
}

async function openVsServiceWithOptions(runtime: Util.RuntimeOptions): OpenVsServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'OpenVsService',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openVsService(): OpenVsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openVsServiceWithOptions(runtime);
}

model OperateRenderingDevicesRequest {
  instanceIds?: string(name='InstanceIds'),
  operation?: string(name='Operation'),
  ownerId?: long(name='OwnerId'),
  podId?: string(name='PodId'),
}

model OperateRenderingDevicesResponseBody = {
  failedIds?: [ string ](name='FailedIds'),
  requestId?: string(name='RequestId'),
}

model OperateRenderingDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: OperateRenderingDevicesResponseBody(name='body'),
}

async function operateRenderingDevicesWithOptions(request: OperateRenderingDevicesRequest, runtime: Util.RuntimeOptions): OperateRenderingDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.podId)) {
    query['PodId'] = request.podId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateRenderingDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateRenderingDevices(request: OperateRenderingDevicesRequest): OperateRenderingDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateRenderingDevicesWithOptions(request, runtime);
}

model PrepareUploadRequest {
  bucketName?: string(name='BucketName'),
  clientIp?: string(name='ClientIp'),
  ownerId?: long(name='OwnerId'),
}

model PrepareUploadResponseBody = {
  bucketName?: string(name='BucketName'),
  endpoint?: string(name='Endpoint'),
  requestId?: string(name='RequestId'),
}

model PrepareUploadResponse = {
  headers: map[string]string(name='headers'),
  body: PrepareUploadResponseBody(name='body'),
}

async function prepareUploadWithOptions(request: PrepareUploadRequest, runtime: Util.RuntimeOptions): PrepareUploadResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PrepareUpload',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function prepareUpload(request: PrepareUploadRequest): PrepareUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  return prepareUploadWithOptions(request, runtime);
}

model PutBucketRequest {
  bucketAcl?: string(name='BucketAcl'),
  bucketName?: string(name='BucketName'),
  comment?: string(name='Comment'),
  dataRedundancyType?: string(name='DataRedundancyType'),
  dispatcherType?: string(name='DispatcherType'),
  endpoint?: string(name='Endpoint'),
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  storageClass?: string(name='StorageClass'),
}

model PutBucketResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutBucketResponse = {
  headers: map[string]string(name='headers'),
  body: PutBucketResponseBody(name='body'),
}

async function putBucketWithOptions(request: PutBucketRequest, runtime: Util.RuntimeOptions): PutBucketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketAcl)) {
    query['BucketAcl'] = request.bucketAcl;
  }
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.dataRedundancyType)) {
    query['DataRedundancyType'] = request.dataRedundancyType;
  }
  if (!Util.isUnset(request.dispatcherType)) {
    query['DispatcherType'] = request.dispatcherType;
  }
  if (!Util.isUnset(request.endpoint)) {
    query['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.storageClass)) {
    query['StorageClass'] = request.storageClass;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutBucket',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function putBucket(request: PutBucketRequest): PutBucketResponse {
  var runtime = new Util.RuntimeOptions{};
  return putBucketWithOptions(request, runtime);
}

model ResetRenderingDevicesRequest {
  imageId?: string(name='ImageId'),
  instanceIds?: string(name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
  podId?: string(name='PodId'),
}

model ResetRenderingDevicesResponseBody = {
  failedIds?: [ string ](name='FailedIds'),
  requestId?: string(name='RequestId'),
}

model ResetRenderingDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ResetRenderingDevicesResponseBody(name='body'),
}

async function resetRenderingDevicesWithOptions(request: ResetRenderingDevicesRequest, runtime: Util.RuntimeOptions): ResetRenderingDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.podId)) {
    query['PodId'] = request.podId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetRenderingDevices',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetRenderingDevices(request: ResetRenderingDevicesRequest): ResetRenderingDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetRenderingDevicesWithOptions(request, runtime);
}

model ResumeVsStreamRequest {
  appName?: string(name='AppName'),
  controlStreamAction?: string(name='ControlStreamAction'),
  domainName?: string(name='DomainName'),
  liveStreamType?: string(name='LiveStreamType'),
  ownerId?: long(name='OwnerId'),
  streamName?: string(name='StreamName'),
}

model ResumeVsStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResumeVsStreamResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeVsStreamResponseBody(name='body'),
}

async function resumeVsStreamWithOptions(request: ResumeVsStreamRequest, runtime: Util.RuntimeOptions): ResumeVsStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.controlStreamAction)) {
    query['ControlStreamAction'] = request.controlStreamAction;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.liveStreamType)) {
    query['LiveStreamType'] = request.liveStreamType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.streamName)) {
    query['StreamName'] = request.streamName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeVsStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeVsStream(request: ResumeVsStreamRequest): ResumeVsStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeVsStreamWithOptions(request, runtime);
}

model SetPresetRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  presetId?: string(name='PresetId'),
}

model SetPresetResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model SetPresetResponse = {
  headers: map[string]string(name='headers'),
  body: SetPresetResponseBody(name='body'),
}

async function setPresetWithOptions(request: SetPresetRequest, runtime: Util.RuntimeOptions): SetPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.presetId)) {
    query['PresetId'] = request.presetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetPreset',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setPreset(request: SetPresetRequest): SetPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return setPresetWithOptions(request, runtime);
}

model SetVsDomainCertificateRequest {
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  domainName?: string(name='DomainName'),
  forceSet?: string(name='ForceSet'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  SSLPri?: string(name='SSLPri'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
}

model SetVsDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetVsDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetVsDomainCertificateResponseBody(name='body'),
}

async function setVsDomainCertificateWithOptions(request: SetVsDomainCertificateRequest, runtime: Util.RuntimeOptions): SetVsDomainCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.forceSet)) {
    query['ForceSet'] = request.forceSet;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.SSLPri)) {
    query['SSLPri'] = request.SSLPri;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetVsDomainCertificate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setVsDomainCertificate(request: SetVsDomainCertificateRequest): SetVsDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setVsDomainCertificateWithOptions(request, runtime);
}

model SetVsStreamsNotifyUrlConfigRequest {
  authKey?: string(name='AuthKey'),
  authType?: string(name='AuthType'),
  domainName?: string(name='DomainName'),
  notifyUrl?: string(name='NotifyUrl'),
  ownerId?: long(name='OwnerId'),
}

model SetVsStreamsNotifyUrlConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetVsStreamsNotifyUrlConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetVsStreamsNotifyUrlConfigResponseBody(name='body'),
}

async function setVsStreamsNotifyUrlConfigWithOptions(request: SetVsStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): SetVsStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authKey)) {
    query['AuthKey'] = request.authKey;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.notifyUrl)) {
    query['NotifyUrl'] = request.notifyUrl;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetVsStreamsNotifyUrlConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setVsStreamsNotifyUrlConfig(request: SetVsStreamsNotifyUrlConfigRequest): SetVsStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setVsStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model StartDeviceRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model StartDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StartDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: StartDeviceResponseBody(name='body'),
}

async function startDeviceWithOptions(request: StartDeviceRequest, runtime: Util.RuntimeOptions): StartDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDevice(request: StartDeviceRequest): StartDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDeviceWithOptions(request, runtime);
}

model StartParentPlatformRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model StartParentPlatformResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StartParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: StartParentPlatformResponseBody(name='body'),
}

async function startParentPlatformWithOptions(request: StartParentPlatformRequest, runtime: Util.RuntimeOptions): StartParentPlatformResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartParentPlatform',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startParentPlatform(request: StartParentPlatformRequest): StartParentPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  return startParentPlatformWithOptions(request, runtime);
}

model StartRecordStreamRequest {
  app?: string(name='App'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain'),
}

model StartRecordStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartRecordStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StartRecordStreamResponseBody(name='body'),
}

async function startRecordStreamWithOptions(request: StartRecordStreamRequest, runtime: Util.RuntimeOptions): StartRecordStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.app)) {
    query['App'] = request.app;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playDomain)) {
    query['PlayDomain'] = request.playDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRecordStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startRecordStream(request: StartRecordStreamRequest): StartRecordStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRecordStreamWithOptions(request, runtime);
}

model StartStreamRequest {
  endTime?: long(name='EndTime'),
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  startTime?: long(name='StartTime'),
}

model StartStreamResponseBody = {
  id?: string(name='Id'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model StartStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StartStreamResponseBody(name='body'),
}

async function startStreamWithOptions(request: StartStreamRequest, runtime: Util.RuntimeOptions): StartStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startStream(request: StartStreamRequest): StartStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return startStreamWithOptions(request, runtime);
}

model StartTransferStreamRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  transcode?: string(name='Transcode'),
  url?: string(name='Url'),
}

model StartTransferStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartTransferStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StartTransferStreamResponseBody(name='body'),
}

async function startTransferStreamWithOptions(request: StartTransferStreamRequest, runtime: Util.RuntimeOptions): StartTransferStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.transcode)) {
    query['Transcode'] = request.transcode;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartTransferStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startTransferStream(request: StartTransferStreamRequest): StartTransferStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return startTransferStreamWithOptions(request, runtime);
}

model StopAdjustRequest {
  focus?: boolean(name='Focus'),
  id?: string(name='Id'),
  iris?: boolean(name='Iris'),
  ownerId?: long(name='OwnerId'),
}

model StopAdjustResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopAdjustResponse = {
  headers: map[string]string(name='headers'),
  body: StopAdjustResponseBody(name='body'),
}

async function stopAdjustWithOptions(request: StopAdjustRequest, runtime: Util.RuntimeOptions): StopAdjustResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.focus)) {
    query['Focus'] = request.focus;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.iris)) {
    query['Iris'] = request.iris;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopAdjust',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopAdjust(request: StopAdjustRequest): StopAdjustResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAdjustWithOptions(request, runtime);
}

model StopDeviceRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model StopDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: StopDeviceResponseBody(name='body'),
}

async function stopDeviceWithOptions(request: StopDeviceRequest, runtime: Util.RuntimeOptions): StopDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDevice(request: StopDeviceRequest): StopDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDeviceWithOptions(request, runtime);
}

model StopMoveRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  pan?: boolean(name='Pan'),
  tilt?: boolean(name='Tilt'),
  zoom?: boolean(name='Zoom'),
}

model StopMoveResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopMoveResponse = {
  headers: map[string]string(name='headers'),
  body: StopMoveResponseBody(name='body'),
}

async function stopMoveWithOptions(request: StopMoveRequest, runtime: Util.RuntimeOptions): StopMoveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pan)) {
    query['Pan'] = request.pan;
  }
  if (!Util.isUnset(request.tilt)) {
    query['Tilt'] = request.tilt;
  }
  if (!Util.isUnset(request.zoom)) {
    query['Zoom'] = request.zoom;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopMove',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopMove(request: StopMoveRequest): StopMoveResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMoveWithOptions(request, runtime);
}

model StopParentPlatformRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model StopParentPlatformResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopParentPlatformResponse = {
  headers: map[string]string(name='headers'),
  body: StopParentPlatformResponseBody(name='body'),
}

async function stopParentPlatformWithOptions(request: StopParentPlatformRequest, runtime: Util.RuntimeOptions): StopParentPlatformResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopParentPlatform',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopParentPlatform(request: StopParentPlatformRequest): StopParentPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopParentPlatformWithOptions(request, runtime);
}

model StopRecordStreamRequest {
  app?: string(name='App'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  playDomain?: string(name='PlayDomain'),
}

model StopRecordStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopRecordStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StopRecordStreamResponseBody(name='body'),
}

async function stopRecordStreamWithOptions(request: StopRecordStreamRequest, runtime: Util.RuntimeOptions): StopRecordStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.app)) {
    query['App'] = request.app;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playDomain)) {
    query['PlayDomain'] = request.playDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopRecordStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopRecordStream(request: StopRecordStreamRequest): StopRecordStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRecordStreamWithOptions(request, runtime);
}

model StopStreamRequest {
  id?: string(name='Id'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model StopStreamResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model StopStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StopStreamResponseBody(name='body'),
}

async function stopStreamWithOptions(request: StopStreamRequest, runtime: Util.RuntimeOptions): StopStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopStream(request: StopStreamRequest): StopStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopStreamWithOptions(request, runtime);
}

model StopTransferStreamRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
  transcode?: string(name='Transcode'),
}

model StopTransferStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopTransferStreamResponse = {
  headers: map[string]string(name='headers'),
  body: StopTransferStreamResponseBody(name='body'),
}

async function stopTransferStreamWithOptions(request: StopTransferStreamRequest, runtime: Util.RuntimeOptions): StopTransferStreamResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.transcode)) {
    query['Transcode'] = request.transcode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopTransferStream',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopTransferStream(request: StopTransferStreamRequest): StopTransferStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopTransferStreamWithOptions(request, runtime);
}

model SyncCatalogsRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model SyncCatalogsResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model SyncCatalogsResponse = {
  headers: map[string]string(name='headers'),
  body: SyncCatalogsResponseBody(name='body'),
}

async function syncCatalogsWithOptions(request: SyncCatalogsRequest, runtime: Util.RuntimeOptions): SyncCatalogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncCatalogs',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncCatalogs(request: SyncCatalogsRequest): SyncCatalogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncCatalogsWithOptions(request, runtime);
}

model SyncDeviceChannelsRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
}

model SyncDeviceChannelsResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model SyncDeviceChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: SyncDeviceChannelsResponseBody(name='body'),
}

async function syncDeviceChannelsWithOptions(request: SyncDeviceChannelsRequest, runtime: Util.RuntimeOptions): SyncDeviceChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncDeviceChannels',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncDeviceChannels(request: SyncDeviceChannelsRequest): SyncDeviceChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncDeviceChannelsWithOptions(request, runtime);
}

model UnbindDirectoryRequest {
  deviceId?: string(name='DeviceId'),
  directoryId?: string(name='DirectoryId'),
  ownerId?: long(name='OwnerId'),
}

model UnbindDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDirectoryResponseBody(name='body'),
}

async function unbindDirectoryWithOptions(request: UnbindDirectoryRequest, runtime: Util.RuntimeOptions): UnbindDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindDirectory',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindDirectory(request: UnbindDirectoryRequest): UnbindDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindDirectoryWithOptions(request, runtime);
}

model UnbindParentPlatformDeviceRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
  parentPlatformId?: string(name='ParentPlatformId'),
}

model UnbindParentPlatformDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindParentPlatformDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindParentPlatformDeviceResponseBody(name='body'),
}

async function unbindParentPlatformDeviceWithOptions(request: UnbindParentPlatformDeviceRequest, runtime: Util.RuntimeOptions): UnbindParentPlatformDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parentPlatformId)) {
    query['ParentPlatformId'] = request.parentPlatformId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindParentPlatformDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindParentPlatformDevice(request: UnbindParentPlatformDeviceRequest): UnbindParentPlatformDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindParentPlatformDeviceWithOptions(request, runtime);
}

model UnbindPurchasedDeviceRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
}

model UnbindPurchasedDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindPurchasedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindPurchasedDeviceResponseBody(name='body'),
}

async function unbindPurchasedDeviceWithOptions(request: UnbindPurchasedDeviceRequest, runtime: Util.RuntimeOptions): UnbindPurchasedDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindPurchasedDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindPurchasedDevice(request: UnbindPurchasedDeviceRequest): UnbindPurchasedDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindPurchasedDeviceWithOptions(request, runtime);
}

model UnbindTemplateRequest {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  templateId?: string(name='TemplateId'),
  templateType?: string(name='TemplateType'),
}

model UnbindTemplateResponseBody = {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
  templateType?: string(name='TemplateType'),
}

model UnbindTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindTemplateResponseBody(name='body'),
}

async function unbindTemplateWithOptions(request: UnbindTemplateRequest, runtime: Util.RuntimeOptions): UnbindTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindTemplate',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindTemplate(request: UnbindTemplateRequest): UnbindTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindTemplateWithOptions(request, runtime);
}

model UnlockDeviceRequest {
  id?: string(name='Id'),
  ownerId?: long(name='OwnerId'),
}

model UnlockDeviceResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model UnlockDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockDeviceResponseBody(name='body'),
}

async function unlockDeviceWithOptions(request: UnlockDeviceRequest, runtime: Util.RuntimeOptions): UnlockDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnlockDevice',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockDevice(request: UnlockDeviceRequest): UnlockDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockDeviceWithOptions(request, runtime);
}

model UpdateAIConfigRequest {
  captureInterval?: int32(name='CaptureInterval'),
  configId?: string(name='ConfigId'),
  configs?: string(name='Configs'),
  description?: string(name='Description'),
  endTime?: long(name='EndTime'),
  features?: string(name='Features'),
  ownerId?: long(name='OwnerId'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
}

model UpdateAIConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAIConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAIConfigResponseBody(name='body'),
}

async function updateAIConfigWithOptions(request: UpdateAIConfigRequest, runtime: Util.RuntimeOptions): UpdateAIConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.captureInterval)) {
    query['CaptureInterval'] = request.captureInterval;
  }
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.features)) {
    query['Features'] = request.features;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAIConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAIConfig(request: UpdateAIConfigRequest): UpdateAIConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAIConfigWithOptions(request, runtime);
}

model UpdateBucketInfoRequest {
  bucketName?: string(name='BucketName'),
  comment?: string(name='Comment'),
  ownerId?: long(name='OwnerId'),
}

model UpdateBucketInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBucketInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBucketInfoResponseBody(name='body'),
}

async function updateBucketInfoWithOptions(request: UpdateBucketInfoRequest, runtime: Util.RuntimeOptions): UpdateBucketInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBucketInfo',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBucketInfo(request: UpdateBucketInfoRequest): UpdateBucketInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBucketInfoWithOptions(request, runtime);
}

model UpdateClusterRequest {
  clusterId?: string(name='ClusterId'),
  description?: string(name='Description'),
  effectiveTime?: string(name='EffectiveTime'),
  internalPorts?: string(name='InternalPorts'),
  maintainTime?: string(name='MaintainTime'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model UpdateClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateClusterResponseBody(name='body'),
}

async function updateClusterWithOptions(request: UpdateClusterRequest, runtime: Util.RuntimeOptions): UpdateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.effectiveTime)) {
    query['EffectiveTime'] = request.effectiveTime;
  }
  if (!Util.isUnset(request.internalPorts)) {
    query['InternalPorts'] = request.internalPorts;
  }
  if (!Util.isUnset(request.maintainTime)) {
    query['MaintainTime'] = request.maintainTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCluster',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClusterWithOptions(request, runtime);
}

model UpdateRenderingDeviceSpecRequest {
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: long(name='AutoRenewPeriod'),
  description?: string(name='Description'),
  effectiveTime?: boolean(name='EffectiveTime'),
  instanceIds?: string(name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  specification?: string(name='Specification'),
}

model UpdateRenderingDeviceSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateRenderingDeviceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRenderingDeviceSpecResponseBody(name='body'),
}

async function updateRenderingDeviceSpecWithOptions(request: UpdateRenderingDeviceSpecRequest, runtime: Util.RuntimeOptions): UpdateRenderingDeviceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.effectiveTime)) {
    query['EffectiveTime'] = request.effectiveTime;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRenderingDeviceSpec',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRenderingDeviceSpec(request: UpdateRenderingDeviceSpecRequest): UpdateRenderingDeviceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRenderingDeviceSpecWithOptions(request, runtime);
}

model UpdateVsPullStreamInfoConfigRequest {
  always?: string(name='Always'),
  appName?: string(name='AppName'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  sourceUrl?: string(name='SourceUrl'),
  startTime?: string(name='StartTime'),
  streamName?: string(name='StreamName'),
}

model UpdateVsPullStreamInfoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVsPullStreamInfoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVsPullStreamInfoConfigResponseBody(name='body'),
}

async function updateVsPullStreamInfoConfigWithOptions(request: UpdateVsPullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): UpdateVsPullStreamInfoConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.always)) {
    query['Always'] = request.always;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sourceUrl)) {
    query['SourceUrl'] = request.sourceUrl;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.streamName)) {
    query['StreamName'] = request.streamName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVsPullStreamInfoConfig',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVsPullStreamInfoConfig(request: UpdateVsPullStreamInfoConfigRequest): UpdateVsPullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVsPullStreamInfoConfigWithOptions(request, runtime);
}

model UpgradeRenderingDevicesHostOSRequest {
  instanceIds?: string(name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
  romName?: string(name='RomName'),
  romPath?: string(name='RomPath'),
  romVersion?: string(name='RomVersion'),
}

model UpgradeRenderingDevicesHostOSResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeRenderingDevicesHostOSResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeRenderingDevicesHostOSResponseBody(name='body'),
}

async function upgradeRenderingDevicesHostOSWithOptions(request: UpgradeRenderingDevicesHostOSRequest, runtime: Util.RuntimeOptions): UpgradeRenderingDevicesHostOSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.romName)) {
    query['RomName'] = request.romName;
  }
  if (!Util.isUnset(request.romPath)) {
    query['RomPath'] = request.romPath;
  }
  if (!Util.isUnset(request.romVersion)) {
    query['RomVersion'] = request.romVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeRenderingDevicesHostOS',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeRenderingDevicesHostOS(request: UpgradeRenderingDevicesHostOSRequest): UpgradeRenderingDevicesHostOSResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeRenderingDevicesHostOSWithOptions(request, runtime);
}

model UpgradeRenderingDevicesImageRequest {
  imageId?: string(name='ImageId'),
  instanceIds?: string(name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
}

model UpgradeRenderingDevicesImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeRenderingDevicesImageResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeRenderingDevicesImageResponseBody(name='body'),
}

async function upgradeRenderingDevicesImageWithOptions(request: UpgradeRenderingDevicesImageRequest, runtime: Util.RuntimeOptions): UpgradeRenderingDevicesImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeRenderingDevicesImage',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeRenderingDevicesImage(request: UpgradeRenderingDevicesImageRequest): UpgradeRenderingDevicesImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeRenderingDevicesImageWithOptions(request, runtime);
}

model UploadDeviceRecordRequest {
  deviceId?: string(name='DeviceId'),
  ownerId?: long(name='OwnerId'),
  searchCriteria?: string(name='SearchCriteria'),
  streamId?: string(name='StreamId'),
  uploadId?: string(name='UploadId'),
  uploadMode?: string(name='UploadMode'),
  uploadParams?: string(name='UploadParams'),
  uploadType?: string(name='UploadType'),
}

model UploadDeviceRecordResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model UploadDeviceRecordResponse = {
  headers: map[string]string(name='headers'),
  body: UploadDeviceRecordResponseBody(name='body'),
}

async function uploadDeviceRecordWithOptions(request: UploadDeviceRecordRequest, runtime: Util.RuntimeOptions): UploadDeviceRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.searchCriteria)) {
    query['SearchCriteria'] = request.searchCriteria;
  }
  if (!Util.isUnset(request.streamId)) {
    query['StreamId'] = request.streamId;
  }
  if (!Util.isUnset(request.uploadId)) {
    query['UploadId'] = request.uploadId;
  }
  if (!Util.isUnset(request.uploadMode)) {
    query['UploadMode'] = request.uploadMode;
  }
  if (!Util.isUnset(request.uploadParams)) {
    query['UploadParams'] = request.uploadParams;
  }
  if (!Util.isUnset(request.uploadType)) {
    query['UploadType'] = request.uploadType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadDeviceRecord',
    version = '2018-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadDeviceRecord(request: UploadDeviceRecordRequest): UploadDeviceRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDeviceRecordWithOptions(request, runtime);
}

