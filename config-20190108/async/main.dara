/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Config';
  @version = '2019-01-08';
  @endpointRule = 'central';
  @endpointMap = {
    cn-shanghai = 'config.cn-shanghai.aliyuncs.com',
    ap-southeast-1 = 'config.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ActiveConfigRulesRequest {
  configRuleIds: string(name='ConfigRuleIds', position='Query'),
}

model ActiveConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model ActiveConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ActiveConfigRulesResponseBody(name='body'),
}

async function activeConfigRules(request: ActiveConfigRulesRequest): ActiveConfigRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActiveConfigRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConfigRulesRequest {
  configRuleIds: string(name='ConfigRuleIds', position='Query'),
}

model DeleteConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model DeleteConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConfigRulesResponseBody(name='body'),
}

async function deleteConfigRules(request: DeleteConfigRulesRequest): DeleteConfigRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConfigRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeComplianceRequest {
  complianceType?: string(name='ComplianceType', position='Query'),
  configRuleId?: string(name='ConfigRuleId', position='Query'),
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model DescribeComplianceResponseBody = {
  complianceResult?: {
    compliances?: [ 
      {
        complianceType?: string(name='ComplianceType'),
        count?: int32(name='Count'),
      }
    ](name='Compliances'),
    totalCount?: long(name='TotalCount'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId'),
}

model DescribeComplianceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeComplianceResponseBody(name='body'),
}

async function describeCompliance(request: DescribeComplianceRequest): DescribeComplianceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCompliance', 'GET', '/', 'json', false, 'json', request);
}

model DescribeComplianceSummaryRequest {
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
}

model DescribeComplianceSummaryResponseBody = {
  complianceSummary?: {
    complianceSummaryByConfigRule?: {
      complianceSummaryTimestamp?: long(name='ComplianceSummaryTimestamp'),
      compliantCount?: int32(name='CompliantCount'),
      nonCompliantCount?: int32(name='NonCompliantCount'),
      totalCount?: long(name='TotalCount'),
    }(name='ComplianceSummaryByConfigRule'),
    complianceSummaryByResource?: {
      complianceSummaryTimestamp?: long(name='ComplianceSummaryTimestamp'),
      compliantCount?: int32(name='CompliantCount'),
      nonCompliantCount?: int32(name='NonCompliantCount'),
      totalCount?: long(name='TotalCount'),
    }(name='ComplianceSummaryByResource'),
  }(name='ComplianceSummary'),
  requestId?: string(name='RequestId'),
}

model DescribeComplianceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeComplianceSummaryResponseBody(name='body'),
}

async function describeComplianceSummary(request: DescribeComplianceSummaryRequest): DescribeComplianceSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeComplianceSummary', 'GET', '/', 'json', false, 'json', request);
}

model DescribeConfigRuleRequest {
  configRuleId: string(name='ConfigRuleId', position='Query'),
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
}

model DescribeConfigRuleResponseBody = {
  configRule?: {
    configRuleArn?: string(name='ConfigRuleArn'),
    configRuleEvaluationStatus?: {
      firstActivatedTimestamp?: long(name='FirstActivatedTimestamp'),
      firstEvaluationStarted?: boolean(name='FirstEvaluationStarted'),
      lastErrorCode?: string(name='LastErrorCode'),
      lastErrorMessage?: string(name='LastErrorMessage'),
      lastFailedEvaluationTimestamp?: long(name='LastFailedEvaluationTimestamp'),
      lastFailedInvocationTimestamp?: long(name='LastFailedInvocationTimestamp'),
      lastSuccessfulEvaluationTimestamp?: long(name='LastSuccessfulEvaluationTimestamp'),
      lastSuccessfulInvocationTimestamp?: long(name='LastSuccessfulInvocationTimestamp'),
    }(name='ConfigRuleEvaluationStatus'),
    configRuleId?: string(name='ConfigRuleId'),
    configRuleName?: string(name='ConfigRuleName'),
    configRuleState?: string(name='ConfigRuleState'),
    createTimestamp?: long(name='CreateTimestamp'),
    description?: string(name='Description'),
    inputParameters?: map[string]any(name='InputParameters'),
    managedRule?: {
      compulsoryInputParameterDetails?: map[string]any(name='CompulsoryInputParameterDetails'),
      description?: string(name='Description'),
      identifier?: string(name='Identifier'),
      labels?: [ string ](name='Labels'),
      managedRuleName?: string(name='ManagedRuleName'),
      optionalInputParameterDetails?: map[string]any(name='OptionalInputParameterDetails'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
          messageType?: string(name='MessageType'),
        }
      ](name='SourceDetails'),
    }(name='ManagedRule'),
    maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
    modifiedTimestamp?: long(name='ModifiedTimestamp'),
    riskLevel?: int32(name='RiskLevel'),
    scope?: {
      complianceResourceId?: string(name='ComplianceResourceId'),
      complianceResourceTypes?: [ string ](name='ComplianceResourceTypes'),
    }(name='Scope'),
    source?: {
      identifier?: string(name='Identifier'),
      owner?: string(name='Owner'),
      sourceConditions?: [ 
        {
          desiredValue?: string(name='DesiredValue'),
          name?: string(name='Name'),
          operator?: string(name='Operator'),
          tips?: string(name='Tips'),
        }
      ](name='SourceConditions'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency'),
          messageType?: string(name='MessageType'),
        }
      ](name='SourceDetails'),
    }(name='Source'),
  }(name='ConfigRule'),
  requestId?: string(name='RequestId'),
}

model DescribeConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigRuleResponseBody(name='body'),
}

async function describeConfigRule(request: DescribeConfigRuleRequest): DescribeConfigRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConfigRule', 'GET', '/', 'json', false, 'json', request);
}

model DescribeConfigurationRecorderRequest {
}

model DescribeConfigurationRecorderResponseBody = {
  configurationRecorder?: {
    accountId?: long(name='AccountId'),
    configurationRecorderStatus?: string(name='ConfigurationRecorderStatus'),
    organizationEnableStatus?: string(name='OrganizationEnableStatus'),
    organizationMasterId?: long(name='OrganizationMasterId'),
    resourceTypes?: [ string ](name='ResourceTypes'),
  }(name='ConfigurationRecorder'),
  requestId?: string(name='RequestId'),
}

model DescribeConfigurationRecorderResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigurationRecorderResponseBody(name='body'),
}

async function describeConfigurationRecorder(request: DescribeConfigurationRecorderRequest): DescribeConfigurationRecorderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConfigurationRecorder', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDeliveryChannelsRequest {
  deliveryChannelIds?: string(name='DeliveryChannelIds', position='Query'),
}

model DescribeDeliveryChannelsResponseBody = {
  deliveryChannels?: [ 
    {
      configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification'),
      configurationSnapshot?: boolean(name='ConfigurationSnapshot'),
      deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn'),
      deliveryChannelCondition?: string(name='DeliveryChannelCondition'),
      deliveryChannelId?: string(name='DeliveryChannelId'),
      deliveryChannelName?: string(name='DeliveryChannelName'),
      deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn'),
      deliveryChannelType?: string(name='DeliveryChannelType'),
      description?: string(name='Description'),
      nonCompliantNotification?: boolean(name='NonCompliantNotification'),
      oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn'),
      status?: int32(name='Status'),
    }
  ](name='DeliveryChannels'),
  requestId?: string(name='RequestId'),
}

model DescribeDeliveryChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeliveryChannelsResponseBody(name='body'),
}

async function describeDeliveryChannels(request: DescribeDeliveryChannelsRequest): DescribeDeliveryChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeliveryChannels', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDiscoveredResourceRequest {
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model DescribeDiscoveredResourceResponseBody = {
  discoveredResourceDetail?: {
    accountId?: long(name='AccountId'),
    availabilityZone?: string(name='AvailabilityZone'),
    configuration?: string(name='Configuration'),
    region?: string(name='Region'),
    resourceCreationTime?: long(name='ResourceCreationTime'),
    resourceDeleted?: int32(name='ResourceDeleted'),
    resourceId?: string(name='ResourceId'),
    resourceName?: string(name='ResourceName'),
    resourceStatus?: string(name='ResourceStatus'),
    resourceType?: string(name='ResourceType'),
    tags?: string(name='Tags'),
  }(name='DiscoveredResourceDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeDiscoveredResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiscoveredResourceResponseBody(name='body'),
}

async function describeDiscoveredResource(request: DescribeDiscoveredResourceRequest): DescribeDiscoveredResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiscoveredResource', 'GET', '/', 'json', false, 'json', request);
}

model DescribeEvaluationResultsRequest {
  complianceType?: string(name='ComplianceType', position='Query'),
  configRuleId?: string(name='ConfigRuleId', position='Query'),
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model DescribeEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation'),
        complianceType?: string(name='ComplianceType'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            configRuleArn?: string(name='ConfigRuleArn'),
            configRuleId?: string(name='ConfigRuleId'),
            configRuleName?: string(name='ConfigRuleName'),
            regionId?: string(name='RegionId'),
            resourceId?: string(name='ResourceId'),
            resourceName?: string(name='ResourceName'),
            resourceType?: string(name='ResourceType'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType'),
        remediationEnabled?: boolean(name='RemediationEnabled'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp'),
        riskLevel?: int32(name='RiskLevel'),
      }
    ](name='EvaluationResultList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId'),
}

model DescribeEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEvaluationResultsResponseBody(name='body'),
}

async function describeEvaluationResults(request: DescribeEvaluationResultsRequest): DescribeEvaluationResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEvaluationResults', 'GET', '/', 'json', false, 'json', request);
}

model GetAggregateDiscoveredResourceRequest {
  aggregatorId: string(name='AggregatorId', position='Query'),
  region: string(name='Region', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceOwnerId: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model GetAggregateDiscoveredResourceResponseBody = {
  discoveredResourceDetail?: {
    accountId?: long(name='AccountId'),
    availabilityZone?: string(name='AvailabilityZone'),
    configuration?: string(name='Configuration'),
    region?: string(name='Region'),
    resourceCreationTime?: long(name='ResourceCreationTime'),
    resourceDeleted?: int32(name='ResourceDeleted'),
    resourceId?: string(name='ResourceId'),
    resourceName?: string(name='ResourceName'),
    resourceStatus?: string(name='ResourceStatus'),
    resourceType?: string(name='ResourceType'),
    tags?: string(name='Tags'),
  }(name='DiscoveredResourceDetail'),
  requestId?: string(name='RequestId'),
}

model GetAggregateDiscoveredResourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetAggregateDiscoveredResourceResponseBody(name='body'),
}

async function getAggregateDiscoveredResource(request: GetAggregateDiscoveredResourceRequest): GetAggregateDiscoveredResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAggregateDiscoveredResource', 'GET', '/', 'json', false, 'json', request);
}

model GetDiscoveredResourceCountsRequest {
  groupByKey?: string(name='GroupByKey', position='Query'),
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
}

model GetDiscoveredResourceCountsResponseBody = {
  groupedResourceCounts?: {
    groupByKey?: string(name='GroupByKey'),
    groupedResourceCountList?: [ 
      {
        groupName?: string(name='GroupName'),
        resourceCount?: long(name='ResourceCount'),
      }
    ](name='GroupedResourceCountList'),
  }(name='GroupedResourceCounts'),
  requestId?: string(name='RequestId'),
}

model GetDiscoveredResourceCountsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiscoveredResourceCountsResponseBody(name='body'),
}

async function getDiscoveredResourceCounts(request: GetDiscoveredResourceCountsRequest): GetDiscoveredResourceCountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDiscoveredResourceCounts', 'GET', '/', 'json', false, 'json', request);
}

model GetDiscoveredResourceSummaryRequest {
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
}

model GetDiscoveredResourceSummaryResponseBody = {
  discoveredResourceSummary?: {
    regionCount?: int32(name='RegionCount'),
    resourceCount?: int32(name='ResourceCount'),
    resourceTypeCount?: int32(name='ResourceTypeCount'),
  }(name='DiscoveredResourceSummary'),
  requestId?: string(name='RequestId'),
}

model GetDiscoveredResourceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiscoveredResourceSummaryResponseBody(name='body'),
}

async function getDiscoveredResourceSummary(request: GetDiscoveredResourceSummaryRequest): GetDiscoveredResourceSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDiscoveredResourceSummary', 'GET', '/', 'json', false, 'json', request);
}

model GetResourceComplianceTimelineRequest {
  endTime?: long(name='EndTime', position='Query'),
  limit?: int32(name='Limit', minimum=1, maximum=100, position='Query'),
  memberId?: string(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  region: string(name='Region', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model GetResourceComplianceTimelineResponseBody = {
  requestId?: string(name='RequestId'),
  resourceComplianceTimeline?: {
    complianceList?: [ 
      {
        accountId?: string(name='AccountId'),
        availabilityZone?: string(name='AvailabilityZone'),
        captureTime?: long(name='CaptureTime'),
        configuration?: string(name='Configuration'),
        configurationDiff?: string(name='ConfigurationDiff'),
        region?: string(name='Region'),
        resourceCreateTime?: long(name='ResourceCreateTime'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceStatus?: string(name='ResourceStatus'),
        resourceType?: string(name='ResourceType'),
        tags?: string(name='Tags'),
      }
    ](name='ComplianceList'),
    limit?: int32(name='Limit'),
    nextToken?: string(name='NextToken'),
    totalCount?: long(name='TotalCount'),
  }(name='ResourceComplianceTimeline'),
}

model GetResourceComplianceTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceComplianceTimelineResponseBody(name='body'),
}

async function getResourceComplianceTimeline(request: GetResourceComplianceTimelineRequest): GetResourceComplianceTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceComplianceTimeline', 'GET', '/', 'json', false, 'json', request);
}

model GetResourceConfigurationTimelineRequest {
  endTime?: long(name='EndTime', position='Query'),
  limit?: int32(name='Limit', minimum=1, maximum=100, position='Query'),
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  region: string(name='Region', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model GetResourceConfigurationTimelineResponseBody = {
  requestId?: string(name='RequestId'),
  resourceConfigurationTimeline?: {
    configurationList?: [ 
      {
        accountId?: long(name='AccountId'),
        availabilityZone?: string(name='AvailabilityZone'),
        captureTime?: string(name='CaptureTime'),
        configurationDiff?: string(name='ConfigurationDiff'),
        region?: string(name='Region'),
        resourceCreateTime?: string(name='ResourceCreateTime'),
        resourceEventType?: string(name='ResourceEventType'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceType?: string(name='ResourceType'),
        tags?: string(name='Tags'),
      }
    ](name='ConfigurationList'),
    limit?: int32(name='Limit'),
    nextToken?: string(name='NextToken'),
    totalCount?: long(name='TotalCount'),
  }(name='ResourceConfigurationTimeline'),
}

model GetResourceConfigurationTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceConfigurationTimelineResponseBody(name='body'),
}

async function getResourceConfigurationTimeline(request: GetResourceConfigurationTimelineRequest): GetResourceConfigurationTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceConfigurationTimeline', 'GET', '/', 'json', false, 'json', request);
}

model GetSupportedResourceTypesRequest {
}

model GetSupportedResourceTypesResponseBody = {
  requestId?: string(name='RequestId'),
  resourceTypes?: [ string ](name='ResourceTypes'),
}

model GetSupportedResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: GetSupportedResourceTypesResponseBody(name='body'),
}

async function getSupportedResourceTypes(request: GetSupportedResourceTypesRequest): GetSupportedResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSupportedResourceTypes', 'GET', '/', 'json', false, 'json', request);
}

model ListAggregateDiscoveredResourcesRequest {
  aggregatorId: string(name='AggregatorId', position='Query'),
  pageNumber: int32(name='PageNumber', minimum=1, maximum=100000, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regions?: string(name='Regions', position='Query'),
  resourceDeleted?: int32(name='ResourceDeleted', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceTypes?: string(name='ResourceTypes', position='Query'),
}

model ListAggregateDiscoveredResourcesResponseBody = {
  discoveredResourceProfiles?: {
    discoveredResourceProfileList?: [ 
      {
        accountId?: long(name='AccountId'),
        region?: string(name='Region'),
        resourceCreationTime?: long(name='ResourceCreationTime'),
        resourceDeleted?: int32(name='ResourceDeleted'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceOwnerId?: long(name='ResourceOwnerId'),
        resourceStatus?: string(name='ResourceStatus'),
        resourceType?: string(name='ResourceType'),
        tags?: string(name='Tags'),
      }
    ](name='DiscoveredResourceProfileList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='DiscoveredResourceProfiles'),
  requestId?: string(name='RequestId'),
}

model ListAggregateDiscoveredResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAggregateDiscoveredResourcesResponseBody(name='body'),
}

async function listAggregateDiscoveredResources(request: ListAggregateDiscoveredResourcesRequest): ListAggregateDiscoveredResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAggregateDiscoveredResources', 'POST', '/', 'json', false, 'json', request);
}

model ListConfigRulesRequest {
  compliancePackId?: string(name='CompliancePackId', position='Query'),
  complianceType?: string(name='ComplianceType', position='Query'),
  configRuleName?: string(name='ConfigRuleName', position='Query'),
  configRuleState?: string(name='ConfigRuleState', position='Query'),
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  riskLevel?: int32(name='RiskLevel', position='Query'),
}

model ListConfigRulesResponseBody = {
  configRules?: {
    configRuleList?: [ 
      {
        accountId?: long(name='AccountId'),
        automationType?: string(name='AutomationType'),
        compliance?: {
          complianceType?: string(name='ComplianceType'),
          count?: int32(name='Count'),
        }(name='Compliance'),
        compliancePackId?: string(name='CompliancePackId'),
        configRuleArn?: string(name='ConfigRuleArn'),
        configRuleId?: string(name='ConfigRuleId'),
        configRuleName?: string(name='ConfigRuleName'),
        configRuleState?: string(name='ConfigRuleState'),
        createBy?: {
          compliancePackId?: string(name='CompliancePackId'),
          compliancePackName?: string(name='CompliancePackName'),
        }(name='CreateBy'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel'),
        sourceIdentifier?: string(name='SourceIdentifier'),
        sourceOwner?: string(name='SourceOwner'),
      }
    ](name='ConfigRuleList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='ConfigRules'),
  requestId?: string(name='RequestId'),
}

model ListConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigRulesResponseBody(name='body'),
}

async function listConfigRules(request: ListConfigRulesRequest): ListConfigRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConfigRules', 'GET', '/', 'json', false, 'json', request);
}

model ListDiscoveredResourcesRequest {
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
  pageNumber: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regions?: string(name='Regions', position='Query'),
  resourceDeleted?: int32(name='ResourceDeleted', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceTypes?: string(name='ResourceTypes', position='Query'),
}

model ListDiscoveredResourcesResponseBody = {
  discoveredResourceProfiles?: {
    discoveredResourceProfileList?: [ 
      {
        accountId?: long(name='AccountId'),
        region?: string(name='Region'),
        resourceCreationTime?: long(name='ResourceCreationTime'),
        resourceDeleted?: int32(name='ResourceDeleted'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceStatus?: string(name='ResourceStatus'),
        resourceType?: string(name='ResourceType'),
        tags?: string(name='Tags'),
      }
    ](name='DiscoveredResourceProfileList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='DiscoveredResourceProfiles'),
  requestId?: string(name='RequestId'),
}

model ListDiscoveredResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDiscoveredResourcesResponseBody(name='body'),
}

async function listDiscoveredResources(request: ListDiscoveredResourcesRequest): ListDiscoveredResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDiscoveredResources', 'POST', '/', 'json', false, 'json', request);
}

model ListRemediationTemplatesRequest {
  managedRuleIdentifier: string(name='ManagedRuleIdentifier', position='Query'),
  remediationType?: string(name='RemediationType', position='Query'),
}

model ListRemediationTemplatesResponseBody = {
  remediationTemplates?: [ 
    {
      remediationType?: string(name='RemediationType'),
      templateDefinition?: string(name='TemplateDefinition'),
      templateIdentifier?: string(name='TemplateIdentifier'),
      templateName?: string(name='TemplateName'),
    }
  ](name='RemediationTemplates'),
  requestId?: string(name='RequestId'),
}

model ListRemediationTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRemediationTemplatesResponseBody(name='body'),
}

async function listRemediationTemplates(request: ListRemediationTemplatesRequest): ListRemediationTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRemediationTemplates', 'POST', '/', 'json', false, 'json', request);
}

model PutConfigRuleRequest {
  clientToken?: string(name='ClientToken', position='Body'),
  configRuleId?: string(name='ConfigRuleId', position='Body'),
  configRuleName: string(name='ConfigRuleName', position='Body'),
  description?: string(name='Description', position='Body'),
  inputParameters?: string(name='InputParameters', position='Body'),
  memberId?: long(name='MemberId', position='Query'),
  multiAccount?: boolean(name='MultiAccount', position='Query'),
  riskLevel: int32(name='RiskLevel', position='Body'),
  scopeComplianceResourceId?: string(name='ScopeComplianceResourceId', position='Body'),
  scopeComplianceResourceTypes: string(name='ScopeComplianceResourceTypes', position='Body'),
  sourceDetailMessageType: string(name='SourceDetailMessageType', position='Body'),
  sourceIdentifier: string(name='SourceIdentifier', position='Body'),
  sourceMaximumExecutionFrequency?: string(name='SourceMaximumExecutionFrequency', position='Body'),
  sourceOwner: string(name='SourceOwner', position='Body'),
}

model PutConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId'),
  requestId?: string(name='RequestId'),
}

model PutConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PutConfigRuleResponseBody(name='body'),
}

async function putConfigRule(request: PutConfigRuleRequest): PutConfigRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutConfigRule', 'POST', '/', 'json', true, 'form', request);
}

model PutConfigurationRecorderRequest {
  resourceTypes: string(name='ResourceTypes', position='Body'),
}

model PutConfigurationRecorderResponseBody = {
  configurationRecorder?: {
    accountId?: long(name='AccountId'),
    configurationRecorderStatus?: string(name='ConfigurationRecorderStatus'),
    resourceTypes?: [ string ](name='ResourceTypes'),
  }(name='ConfigurationRecorder'),
  requestId?: string(name='RequestId'),
}

model PutConfigurationRecorderResponse = {
  headers: map[string]string(name='headers'),
  body: PutConfigurationRecorderResponseBody(name='body'),
}

async function putConfigurationRecorder(request: PutConfigurationRecorderRequest): PutConfigurationRecorderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutConfigurationRecorder', 'POST', '/', 'json', true, 'form', request);
}

model PutDeliveryChannelRequest {
  clientToken?: string(name='ClientToken', position='Body'),
  deliveryChannelAssumeRoleArn: string(name='DeliveryChannelAssumeRoleArn', position='Body'),
  deliveryChannelCondition?: string(name='DeliveryChannelCondition', position='Body'),
  deliveryChannelId?: string(name='DeliveryChannelId', position='Body'),
  deliveryChannelName?: string(name='DeliveryChannelName', position='Body'),
  deliveryChannelTargetArn: string(name='DeliveryChannelTargetArn', position='Body'),
  deliveryChannelType: string(name='DeliveryChannelType', position='Body'),
  description?: string(name='Description', position='Body'),
  status?: int32(name='Status', position='Body'),
}

model PutDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId'),
  requestId?: string(name='RequestId'),
}

model PutDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  body: PutDeliveryChannelResponseBody(name='body'),
}

async function putDeliveryChannel(request: PutDeliveryChannelRequest): PutDeliveryChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutDeliveryChannel', 'POST', '/', 'json', true, 'form', request);
}

model PutEvaluationsRequest {
  evaluations?: string(name='Evaluations', position='Body'),
  resultToken: string(name='ResultToken', position='Body'),
}

model PutEvaluationsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model PutEvaluationsResponse = {
  headers: map[string]string(name='headers'),
  body: PutEvaluationsResponseBody(name='body'),
}

async function putEvaluations(request: PutEvaluationsRequest): PutEvaluationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutEvaluations', 'POST', '/', 'json', true, 'form', request);
}

model StartConfigRuleEvaluationRequest {
  compliancePackId?: string(name='CompliancePackId', position='Query'),
  configRuleId?: string(name='ConfigRuleId', position='Query'),
  revertEvaluation?: boolean(name='RevertEvaluation', position='Query'),
}

model StartConfigRuleEvaluationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model StartConfigRuleEvaluationResponse = {
  headers: map[string]string(name='headers'),
  body: StartConfigRuleEvaluationResponseBody(name='body'),
}

async function startConfigRuleEvaluation(request: StartConfigRuleEvaluationRequest): StartConfigRuleEvaluationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartConfigRuleEvaluation', 'POST', '/', 'json', false, 'json', request);
}

model StartConfigurationRecorderRequest {
  enterpriseEdition?: boolean(name='EnterpriseEdition', position='Body'),
}

model StartConfigurationRecorderResponseBody = {
  configurationRecorder?: {
    accountId?: long(name='AccountId'),
    configurationRecorderStatus?: string(name='ConfigurationRecorderStatus'),
    organizationEnableStatus?: string(name='OrganizationEnableStatus'),
    organizationMasterId?: long(name='OrganizationMasterId'),
    resourceTypes?: [ string ](name='ResourceTypes'),
  }(name='ConfigurationRecorder'),
  requestId?: string(name='RequestId'),
}

model StartConfigurationRecorderResponse = {
  headers: map[string]string(name='headers'),
  body: StartConfigurationRecorderResponseBody(name='body'),
}

async function startConfigurationRecorder(request: StartConfigurationRecorderRequest): StartConfigurationRecorderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartConfigurationRecorder', 'POST', '/', 'json', true, 'form', request);
}

model StopConfigRulesRequest {
  configRuleIds: string(name='ConfigRuleIds', position='Query'),
}

model StopConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId'),
        errorCode?: string(name='ErrorCode'),
        success?: boolean(name='Success'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId'),
}

model StopConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  body: StopConfigRulesResponseBody(name='body'),
}

async function stopConfigRules(request: StopConfigRulesRequest): StopConfigRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopConfigRules', 'POST', '/', 'json', false, 'json', request);
}

