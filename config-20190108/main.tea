/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-shanghai = 'config.cn-shanghai.aliyuncs.com',
    ap-southeast-1 = 'config.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('config', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActiveConfigRulesRequest {
  configRuleIds?: string(name='ConfigRuleIds', example='cr-2da35180a8d1008e****,cr-2da35180a8d1008e****'),
}

model ActiveConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-2da35180a8d1008e****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleStatusNotInActive'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='49C1A88F-D163-46DF-84A6-F300229F37AE'),
}

model ActiveConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActiveConfigRulesResponseBody(name='body'),
}

async function activeConfigRulesWithOptions(request: ActiveConfigRulesRequest, runtime: Util.RuntimeOptions): ActiveConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActiveConfigRules',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activeConfigRules(request: ActiveConfigRulesRequest): ActiveConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeConfigRulesWithOptions(request, runtime);
}

model DeleteConfigRulesRequest {
  configRuleIds?: string(name='ConfigRuleIds', example='cr-2da35180a8d1008e****,cr-2da35180a8d1008e****'),
}

model DeleteConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-2da35180a8d1008e****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleCanNotDelete'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='49C1A88F-D163-46DF-84A6-F300229F37AE'),
}

model DeleteConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConfigRulesResponseBody(name='body'),
}

async function deleteConfigRulesWithOptions(request: DeleteConfigRulesRequest, runtime: Util.RuntimeOptions): DeleteConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConfigRules',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConfigRules(request: DeleteConfigRulesRequest): DeleteConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConfigRulesWithOptions(request, runtime);
}

model DescribeComplianceRequest {
  complianceType?: string(name='ComplianceType', example='COMPLIANT'),
  configRuleId?: string(name='ConfigRuleId', example='cr-12b398b633820012****'),
  memberId?: long(name='MemberId', example='1234567'),
  multiAccount?: boolean(name='MultiAccount', example='false'),
  resourceId?: string(name='ResourceId', example='i-bp151g9tpto890zr****'),
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
}

model DescribeComplianceResponseBody = {
  complianceResult?: {
    compliances?: [ 
      {
        complianceType?: string(name='ComplianceType', example='COMPLIANT'),
        count?: int32(name='Count', example='13'),
      }
    ](name='Compliances'),
    totalCount?: long(name='TotalCount', example='13'),
  }(name='ComplianceResult'),
  requestId?: string(name='RequestId', example='17306AB1-34E0-468F-BD7B-68D8AEAB754F'),
}

model DescribeComplianceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeComplianceResponseBody(name='body'),
}

async function describeComplianceWithOptions(request: DescribeComplianceRequest, runtime: Util.RuntimeOptions): DescribeComplianceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.complianceType)) {
    query['ComplianceType'] = request.complianceType;
  }
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCompliance',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCompliance(request: DescribeComplianceRequest): DescribeComplianceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeComplianceWithOptions(request, runtime);
}

model DescribeComplianceSummaryRequest {
  memberId?: long(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='false'),
}

model DescribeComplianceSummaryResponseBody = {
  complianceSummary?: {
    complianceSummaryByConfigRule?: {
      complianceSummaryTimestamp?: long(name='ComplianceSummaryTimestamp', example='1589853712165'),
      compliantCount?: int32(name='CompliantCount', example='111'),
      nonCompliantCount?: int32(name='NonCompliantCount', example='12'),
      totalCount?: long(name='TotalCount', example='123'),
    }(name='ComplianceSummaryByConfigRule'),
    complianceSummaryByResource?: {
      complianceSummaryTimestamp?: long(name='ComplianceSummaryTimestamp', example='1589853712165'),
      compliantCount?: int32(name='CompliantCount', example='1'),
      nonCompliantCount?: int32(name='NonCompliantCount', example='12'),
      totalCount?: long(name='TotalCount', example='13'),
    }(name='ComplianceSummaryByResource'),
  }(name='ComplianceSummary'),
  requestId?: string(name='RequestId', example='CAEE6F34-DEDC-4AAA-AA8C-946D5D008735'),
}

model DescribeComplianceSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeComplianceSummaryResponseBody(name='body'),
}

async function describeComplianceSummaryWithOptions(request: DescribeComplianceSummaryRequest, runtime: Util.RuntimeOptions): DescribeComplianceSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeComplianceSummary',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeComplianceSummary(request: DescribeComplianceSummaryRequest): DescribeComplianceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeComplianceSummaryWithOptions(request, runtime);
}

model DescribeConfigRuleRequest {
  configRuleId?: string(name='ConfigRuleId', example='cr-7bc06457e0d90041****'),
  memberId?: long(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='false'),
}

model DescribeConfigRuleResponseBody = {
  configRule?: {
    configRuleArn?: string(name='ConfigRuleArn', example='acs:config::120886317861****:rule/cr-7bc06457e0d90041****'),
    configRuleEvaluationStatus?: {
      firstActivatedTimestamp?: long(name='FirstActivatedTimestamp', example='1618901952341'),
      firstEvaluationStarted?: boolean(name='FirstEvaluationStarted', example='true'),
      lastErrorCode?: string(name='LastErrorCode', example='FunctionNotFound'),
      lastErrorMessage?: string(name='LastErrorMessage', example='function \\"funtionName\\" does not exist in service \\"serviceName\\"'),
      lastFailedEvaluationTimestamp?: long(name='LastFailedEvaluationTimestamp', example='1602819143913'),
      lastFailedInvocationTimestamp?: long(name='LastFailedInvocationTimestamp', example='1602819143910'),
      lastSuccessfulEvaluationTimestamp?: long(name='LastSuccessfulEvaluationTimestamp', example='1618901957876'),
      lastSuccessfulInvocationTimestamp?: long(name='LastSuccessfulInvocationTimestamp', example='1618901957395'),
    }(name='ConfigRuleEvaluationStatus'),
    configRuleId?: string(name='ConfigRuleId', example='cr-7bc06457e0d90041****'),
    configRuleName?: string(name='ConfigRuleName'),
    configRuleState?: string(name='ConfigRuleState', example='ACTIVE'),
    createTimestamp?: long(name='CreateTimestamp', example='1602818964884'),
    description?: string(name='Description'),
    inputParameters?: map[string]any(name='InputParameters', example='{"cpuCount": "2" }'),
    managedRule?: {
      compulsoryInputParameterDetails?: map[string]any(name='CompulsoryInputParameterDetails', example='{"cpuCount": {"defaultValue": "2","type": "integer"}'),
      description?: string(name='Description'),
      identifier?: string(name='Identifier', example='rds-cpu-min-count-limit'),
      labels?: [ string ](name='Labels'),
      managedRuleName?: string(name='ManagedRuleName', example='rds-cpu-min-count-limit'),
      optionalInputParameterDetails?: map[string]any(name='OptionalInputParameterDetails', example='{"tag1Value":{"type":"string","defaultValue":""},"tag2Key":{"type":"string","defaultValue":""}}'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource', example='aliyun.config'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='Six_Hours'),
          messageType?: string(name='MessageType', example='ConfigurationItemChangeNotification'),
        }
      ](name='SourceDetails'),
    }(name='ManagedRule'),
    maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='Six_Hours'),
    modifiedTimestamp?: long(name='ModifiedTimestamp', example='1602992721000'),
    riskLevel?: int32(name='RiskLevel', example='3'),
    scope?: {
      complianceResourceId?: string(name='ComplianceResourceId', example='vpc-6weoy5flv41pj4wvr****'),
      complianceResourceTypes?: [ string ](name='ComplianceResourceTypes'),
    }(name='Scope'),
    source?: {
      identifier?: string(name='Identifier', example='rds-cpu-min-count-limit'),
      owner?: string(name='Owner', example='ALIYUN'),
      sourceConditions?: [ 
        {
          desiredValue?: string(name='DesiredValue', example='2'),
          name?: string(name='Name', example='cpuCount'),
          operator?: string(name='Operator', example='GreaterOrEquals'),
          tips?: string(name='Tips'),
        }
      ](name='SourceConditions'),
      sourceDetails?: [ 
        {
          eventSource?: string(name='EventSource', example='aliyun.config'),
          maximumExecutionFrequency?: string(name='MaximumExecutionFrequency', example='Six_Hours'),
          messageType?: string(name='MessageType', example='ConfigurationItemChangeNotification'),
        }
      ](name='SourceDetails'),
    }(name='Source'),
  }(name='ConfigRule'),
  requestId?: string(name='RequestId', example='A68DD98C-DE65-46AC-B2D2-04A4A9AB5B99'),
}

model DescribeConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeConfigRuleResponseBody(name='body'),
}

async function describeConfigRuleWithOptions(request: DescribeConfigRuleRequest, runtime: Util.RuntimeOptions): DescribeConfigRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeConfigRule',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeConfigRule(request: DescribeConfigRuleRequest): DescribeConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConfigRuleWithOptions(request, runtime);
}

model DescribeConfigurationRecorderResponseBody = {
  configurationRecorder?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    configurationRecorderStatus?: string(name='ConfigurationRecorderStatus', example='REGISTERED'),
    organizationEnableStatus?: string(name='OrganizationEnableStatus', example='REGISTRABLE'),
    organizationMasterId?: long(name='OrganizationMasterId', example='120886317861****'),
    resourceTypes?: [ string ](name='ResourceTypes'),
  }(name='ConfigurationRecorder'),
  requestId?: string(name='RequestId', example='A3601178-A6A2-4636-BE56-1116F73C0B0C'),
}

model DescribeConfigurationRecorderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeConfigurationRecorderResponseBody(name='body'),
}

async function describeConfigurationRecorderWithOptions(runtime: Util.RuntimeOptions): DescribeConfigurationRecorderResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeConfigurationRecorder',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeConfigurationRecorder(): DescribeConfigurationRecorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConfigurationRecorderWithOptions(runtime);
}

model DescribeDeliveryChannelsRequest {
  deliveryChannelIds?: string(name='DeliveryChannelIds', example='cdc-d9106457e0d900b1****'),
}

model DescribeDeliveryChannelsResponseBody = {
  deliveryChannels?: [ 
    {
      configurationItemChangeNotification?: boolean(name='ConfigurationItemChangeNotification', example='true'),
      configurationSnapshot?: boolean(name='ConfigurationSnapshot', example='false'),
      deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn', example='acs:ram::120886317861****:role/aliyunserviceroleforconfig'),
      deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
      deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-d9106457e0d900b1****'),
      deliveryChannelName?: string(name='DeliveryChannelName', example='myDeliveryChannel'),
      deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-shanghai:120886317861****:new-bucket'),
      deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
      description?: string(name='Description', example='My OSS delivery.'),
      nonCompliantNotification?: boolean(name='NonCompliantNotification', example='false'),
      oversizedDataOSSTargetArn?: string(name='OversizedDataOSSTargetArn', example='acs:oss:cn-shanghai:100931896542****:new-bucket'),
      status?: int32(name='Status', example='1'),
    }
  ](name='DeliveryChannels'),
  requestId?: string(name='RequestId', example='DC300244-FCE3-5061-8214-C27ECB668487'),
}

model DescribeDeliveryChannelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeliveryChannelsResponseBody(name='body'),
}

async function describeDeliveryChannelsWithOptions(request: DescribeDeliveryChannelsRequest, runtime: Util.RuntimeOptions): DescribeDeliveryChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliveryChannelIds)) {
    query['DeliveryChannelIds'] = request.deliveryChannelIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeliveryChannels',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeliveryChannels(request: DescribeDeliveryChannelsRequest): DescribeDeliveryChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeliveryChannelsWithOptions(request, runtime);
}

model DescribeDiscoveredResourceRequest {
  memberId?: long(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='true'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='adaf.zhilon****'),
  resourceType?: string(name='ResourceType', example='ACS::CDN::Domain'),
}

model DescribeDiscoveredResourceResponseBody = {
  discoveredResourceDetail?: {
    accountId?: long(name='AccountId', example='987654321'),
    availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-h'),
    configuration?: string(name='Configuration', example='{\\"Description\\":\\"\\",\\"SslProtocol\\":\\"off\\",\\"DomainName\\":\\"adaf.zhilong****\\",\\"GmtModified\\":\\"2019-04-10T03:11Z\\",\\"CdnType\\":\\"web\\",\\"GmtCreated\\":\\"2016-03-03T01:31:35Z\\",\\"Cname\\":\\"adaf.zhilong.me.w.kun****.com\\",\\"Sources\\":{\\"Source\\":[{\\"Type\\":\\"oss\\",\\"Content\\":\\"test2-mh.oss-cn-hangzhou.aliyuncs.com\\",\\"Priority\\":\\"20\\",\\"Port\\":80,\\"Weight\\":\\"10\\"}]},\\"DomainStatus\\":\\"offline\\",\\"Sandbox\\":\\"\\"}'),
    region?: string(name='Region', example='cn-hangzhou'),
    resourceCreationTime?: long(name='ResourceCreationTime', example='1456968695000'),
    resourceDeleted?: int32(name='ResourceDeleted', example='1'),
    resourceId?: string(name='ResourceId', example='adaf.zhilon****'),
    resourceName?: string(name='ResourceName', example='test-resource-name'),
    resourceStatus?: string(name='ResourceStatus', example='offline'),
    resourceType?: string(name='ResourceType', example='ACS::CDN::Domain'),
    tags?: string(name='Tags', example='{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}'),
  }(name='DiscoveredResourceDetail'),
  requestId?: string(name='RequestId', example='E4D71ACE-6B0A-46E0-8352-56952378CC7F'),
}

model DescribeDiscoveredResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiscoveredResourceResponseBody(name='body'),
}

async function describeDiscoveredResourceWithOptions(request: DescribeDiscoveredResourceRequest, runtime: Util.RuntimeOptions): DescribeDiscoveredResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiscoveredResource',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiscoveredResource(request: DescribeDiscoveredResourceRequest): DescribeDiscoveredResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiscoveredResourceWithOptions(request, runtime);
}

model DescribeEvaluationResultsRequest {
  complianceType?: string(name='ComplianceType', example='COMPLIANT'),
  configRuleId?: string(name='ConfigRuleId', example='cr-2da35180a8d1008e****'),
  memberId?: long(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='false'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceId?: string(name='ResourceId', example='i-bp151g9tpto890zr****'),
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
}

model DescribeEvaluationResultsResponseBody = {
  evaluationResults?: {
    evaluationResultList?: [ 
      {
        annotation?: string(name='Annotation', example='{"operator": "StringEquals", "property": "$.SslProtocol", "desiredValue": "on", "configuration": "[\\"off\\"]"}'),
        complianceType?: string(name='ComplianceType', example='COMPLIANT'),
        configRuleInvokedTimestamp?: long(name='ConfigRuleInvokedTimestamp', example='1589941923258'),
        evaluationResultIdentifier?: {
          evaluationResultQualifier?: {
            configRuleArn?: string(name='ConfigRuleArn', example='acs:config::120390217529****:config-rule/cr-2da35180a8d1008e****'),
            configRuleId?: string(name='ConfigRuleId', example='cr-2da35180a8d1008e****'),
            configRuleName?: string(name='ConfigRuleName'),
            regionId?: string(name='RegionId', example='cn-hangzhou'),
            resourceId?: string(name='ResourceId', example='i-bp151g9tpto890zr****'),
            resourceName?: string(name='ResourceName', example='launch-advisor-20200330'),
            resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
          }(name='EvaluationResultQualifier'),
          orderingTimestamp?: long(name='OrderingTimestamp', example='1589941923117'),
        }(name='EvaluationResultIdentifier'),
        invokingEventMessageType?: string(name='InvokingEventMessageType', example='ConfigurationItemChangeNotification'),
        remediationEnabled?: boolean(name='RemediationEnabled', example='false'),
        resultRecordedTimestamp?: long(name='ResultRecordedTimestamp', example='1589941923432'),
        riskLevel?: int32(name='RiskLevel', example='1'),
      }
    ](name='EvaluationResultList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='2'),
  }(name='EvaluationResults'),
  requestId?: string(name='RequestId', example='D296EE41-1143-4B13-83BB-909008100130'),
}

model DescribeEvaluationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEvaluationResultsResponseBody(name='body'),
}

async function describeEvaluationResultsWithOptions(request: DescribeEvaluationResultsRequest, runtime: Util.RuntimeOptions): DescribeEvaluationResultsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEvaluationResults',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEvaluationResults(request: DescribeEvaluationResultsRequest): DescribeEvaluationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluationResultsWithOptions(request, runtime);
}

model GetAggregateDiscoveredResourceRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-5885626622af0008****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='new-bucket'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='ACS::OSS::Bucket'),
}

model GetAggregateDiscoveredResourceResponseBody = {
  discoveredResourceDetail?: {
    accountId?: long(name='AccountId', example='100931896542****'),
    availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-h'),
    configuration?: string(name='Configuration', example='{\\"AccessControlList\\":{\\"Grant\\":\\"private\\"},\\"ServerSideEncryptionRule\\":{\\"SSEAlgorithm\\":\\"None\\"},\\"Comment\\":\\"\\",\\"CreationDate\\":\\"2021-06-29T10:05:12.000Z\\",\\"Owner\\":{\\"DisplayName\\":\\"100931896542****\\",\\"ID\\":\\"100931896542****\\"},\\"StorageClass\\":\\"Standard\\",\\"DataRedundancyType\\":\\"LRS\\",\\"AllowEmptyReferer\\":\\"true\\",\\"Name\\":\\"new-bucket\\",\\"BucketPolicy\\":{\\"LogPrefix\\":\\"\\",\\"LogBucket\\":\\"\\"},\\"ExtranetEndpoint\\":\\"oss-cn-hangzhou.aliyuncs.com\\",\\"IntranetEndpoint\\":\\"oss-cn-hangzhou-internal.aliyuncs.com\\",\\"Location\\":\\"oss-cn-hangzhou\\"}'),
    region?: string(name='Region', example='cn-hangzhou'),
    resourceCreationTime?: long(name='ResourceCreationTime', example='1624961112000'),
    resourceDeleted?: int32(name='ResourceDeleted', example='1'),
    resourceId?: string(name='ResourceId', example='new-bucket'),
    resourceName?: string(name='ResourceName', example='new-bucket'),
    resourceStatus?: string(name='ResourceStatus', example='offline'),
    resourceType?: string(name='ResourceType', example='ACS::OSS::BucketACS::CDN::Domain'),
    tags?: string(name='Tags', example='{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}'),
  }(name='DiscoveredResourceDetail'),
  requestId?: string(name='RequestId', example='E4D71ACE-6B0A-46E0-8352-56952378CC7F'),
}

model GetAggregateDiscoveredResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAggregateDiscoveredResourceResponseBody(name='body'),
}

async function getAggregateDiscoveredResourceWithOptions(request: GetAggregateDiscoveredResourceRequest, runtime: Util.RuntimeOptions): GetAggregateDiscoveredResourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAggregateDiscoveredResource',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAggregateDiscoveredResource(request: GetAggregateDiscoveredResourceRequest): GetAggregateDiscoveredResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAggregateDiscoveredResourceWithOptions(request, runtime);
}

model GetDiscoveredResourceCountsRequest {
  groupByKey?: string(name='GroupByKey', example='ResourceType'),
  memberId?: long(name='MemberId', example='120886317861****'),
  multiAccount?: boolean(name='MultiAccount', example='true'),
}

model GetDiscoveredResourceCountsResponseBody = {
  groupedResourceCounts?: {
    groupByKey?: string(name='GroupByKey', example='ResourceType'),
    groupedResourceCountList?: [ 
      {
        groupName?: string(name='GroupName', example='ACS::ECS::SecurityGroup'),
        resourceCount?: long(name='ResourceCount', example='10'),
      }
    ](name='GroupedResourceCountList'),
  }(name='GroupedResourceCounts'),
  requestId?: string(name='RequestId', example='54BFA4FB-6E08-4D58-9E83-1A8A3EC80247'),
}

model GetDiscoveredResourceCountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDiscoveredResourceCountsResponseBody(name='body'),
}

async function getDiscoveredResourceCountsWithOptions(request: GetDiscoveredResourceCountsRequest, runtime: Util.RuntimeOptions): GetDiscoveredResourceCountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupByKey)) {
    query['GroupByKey'] = request.groupByKey;
  }
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiscoveredResourceCounts',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiscoveredResourceCounts(request: GetDiscoveredResourceCountsRequest): GetDiscoveredResourceCountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiscoveredResourceCountsWithOptions(request, runtime);
}

model GetDiscoveredResourceSummaryRequest {
  memberId?: long(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='false'),
}

model GetDiscoveredResourceSummaryResponseBody = {
  discoveredResourceSummary?: {
    regionCount?: int32(name='RegionCount', example='6'),
    resourceCount?: int32(name='ResourceCount', example='7'),
    resourceTypeCount?: int32(name='ResourceTypeCount', example='45'),
  }(name='DiscoveredResourceSummary'),
  requestId?: string(name='RequestId', example='2A8FA4FB-2E08-4D28-8F83-1A8A3EC80B1C'),
}

model GetDiscoveredResourceSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDiscoveredResourceSummaryResponseBody(name='body'),
}

async function getDiscoveredResourceSummaryWithOptions(request: GetDiscoveredResourceSummaryRequest, runtime: Util.RuntimeOptions): GetDiscoveredResourceSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiscoveredResourceSummary',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiscoveredResourceSummary(request: GetDiscoveredResourceSummaryRequest): GetDiscoveredResourceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiscoveredResourceSummaryWithOptions(request, runtime);
}

model GetResourceComplianceTimelineRequest {
  endTime?: long(name='EndTime', example='1593599342230'),
  limit?: int32(name='Limit', example='10'),
  memberId?: string(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='true'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='i-uf6072y75i2cevjq****'),
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
  startTime?: long(name='StartTime', example='1593599340010'),
}

model GetResourceComplianceTimelineResponseBody = {
  requestId?: string(name='RequestId', example='DE9FFFE5-FCAD-4B24-9546-BF49273C562B'),
  resourceComplianceTimeline?: {
    complianceList?: [ 
      {
        accountId?: string(name='AccountId', example='120390217529****'),
        availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-f'),
        captureTime?: long(name='CaptureTime', example='1203902175292305'),
        configuration?: string(name='Configuration', example='{\\"managetest-required-tags\\":[{},{\\"configRuleId\\":\\"cr-656d5180a8d1009c****\\",\\"configRuleArn\\":\\"acs:config::120390217529****:config-rule/cr-656d5180a8d1009c****\\",\\"configRuleName\\":\\"managetest-required-tags\\",\\"complianceType\\":\\"NON_COMPLIANT\\",\\"riskLevel\\":1,\\"annotation\\":\\"{\\\\\\"desiredValue\\\\\\":\\\\\\"key1\\\\\\",\\\\\\"reason\\\\\\":\\\\\\"No tag with name key1\\\\\\"}\\",\\"invokingEventMessageType\\":\\"ConfigurationItemChangeNotification\\"}]}'),
        configurationDiff?: string(name='ConfigurationDiff', example='{\\"Compliance\\":{\\"complianceType\\":\\"NON_COMPLIANT\\",\\"count\\":2},\\"ConfigRuleList\\":[{\\"configRuleId\\":\\"cr-7b6e5180a8d100cc****\\",\\"configRuleArn\\":\\"acs:config::120390217529****:config-rule/cr-7b6e5180a8d100cc****\\",\\"configRuleName\\":\\"required-tags\\",\\"complianceType\\":\\"COMPLIANT\\",\\"riskLevel\\":1,\\"invokingEventMessageType\\":\\"ConfigurationItemChangeNotification\\"}]}'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceCreateTime?: long(name='ResourceCreateTime', example='1203902175293610'),
        resourceId?: string(name='ResourceId', example='i-uf6072y75i2cevjq****'),
        resourceName?: string(name='ResourceName', example='test-resource'),
        resourceStatus?: string(name='ResourceStatus', example='Running'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
        tags?: string(name='Tags', example='{\\"project\\":[\\"efg\\"]}'),
      }
    ](name='ComplianceList'),
    limit?: int32(name='Limit', example='10'),
    nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='ResourceComplianceTimeline'),
}

model GetResourceComplianceTimelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceComplianceTimelineResponseBody(name='body'),
}

async function getResourceComplianceTimelineWithOptions(request: GetResourceComplianceTimelineRequest, runtime: Util.RuntimeOptions): GetResourceComplianceTimelineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceComplianceTimeline',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceComplianceTimeline(request: GetResourceComplianceTimelineRequest): GetResourceComplianceTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceComplianceTimelineWithOptions(request, runtime);
}

model GetResourceConfigurationTimelineRequest {
  endTime?: long(name='EndTime', example='1605489235000'),
  limit?: int32(name='Limit', example='10'),
  memberId?: long(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='true'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='i-bp19xem7lt97h973****'),
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
  startTime?: long(name='StartTime', example='1605489195000'),
}

model GetResourceConfigurationTimelineResponseBody = {
  requestId?: string(name='RequestId', example='ED9CD1B3-286C-4E05-A765-5E1E0B9BC2AB'),
  resourceConfigurationTimeline?: {
    configurationList?: [ 
      {
        accountId?: long(name='AccountId', example='987654321'),
        availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-h'),
        captureTime?: string(name='CaptureTime', example='1605316711000'),
        configurationDiff?: string(name='ConfigurationDiff', example='{\\"ExpiredTime\\":[\\"2020-10-26T16:00Z\\",\\"2020-11-26T16:00Z\\"]}'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceCreateTime?: string(name='ResourceCreateTime', example='1605237751000'),
        resourceEventType?: string(name='ResourceEventType', example='DISCOVERED'),
        resourceId?: string(name='ResourceId', example='i-bp19xem7lt97h973****'),
        resourceName?: string(name='ResourceName', example='ECS-test'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
        tags?: string(name='Tags', example='"{\\"\\"hc\\"\\":[\\"\\"value2\\"\\"]}"'),
      }
    ](name='ConfigurationList'),
    limit?: int32(name='Limit', example='10'),
    nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='ResourceConfigurationTimeline'),
}

model GetResourceConfigurationTimelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceConfigurationTimelineResponseBody(name='body'),
}

async function getResourceConfigurationTimelineWithOptions(request: GetResourceConfigurationTimelineRequest, runtime: Util.RuntimeOptions): GetResourceConfigurationTimelineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceConfigurationTimeline',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceConfigurationTimeline(request: GetResourceConfigurationTimelineRequest): GetResourceConfigurationTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceConfigurationTimelineWithOptions(request, runtime);
}

model GetSupportedResourceTypesResponseBody = {
  requestId?: string(name='RequestId', example='6CE4ABA1-9A57-41A9-8EA9-E8B17D4671CD'),
  resourceTypes?: [ string ](name='ResourceTypes'),
}

model GetSupportedResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSupportedResourceTypesResponseBody(name='body'),
}

async function getSupportedResourceTypesWithOptions(runtime: Util.RuntimeOptions): GetSupportedResourceTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetSupportedResourceTypes',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSupportedResourceTypes(): GetSupportedResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSupportedResourceTypesWithOptions(runtime);
}

model ListAggregateDiscoveredResourcesRequest {
  aggregatorId?: string(name='AggregatorId', example='ca-c560626622af0005****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regions?: string(name='Regions', example='cn-huhehaote'),
  resourceDeleted?: int32(name='ResourceDeleted', example='1'),
  resourceId?: string(name='ResourceId', example='eni-hp31cqoba96jagtz****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceTypes?: string(name='ResourceTypes', example='ACS::ECS::NetworkInterface'),
}

model ListAggregateDiscoveredResourcesResponseBody = {
  discoveredResourceProfiles?: {
    discoveredResourceProfileList?: [ 
      {
        accountId?: long(name='AccountId', example='161259599160****'),
        region?: string(name='Region', example='cn-huhehaote'),
        resourceCreationTime?: long(name='ResourceCreationTime', example='1618675206000'),
        resourceDeleted?: int32(name='ResourceDeleted', example='1'),
        resourceId?: string(name='ResourceId', example='eni-hp31cqoba96jagtz****'),
        resourceName?: string(name='ResourceName', example='Cloud Firewall'),
        resourceOwnerId?: long(name='ResourceOwnerId', example='161259599160****'),
        resourceStatus?: string(name='ResourceStatus', example='InUse'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::NetworkInterface'),
        tags?: string(name='Tags', example='{\\"key1\\":[\\"value2\\"]}'),
      }
    ](name='DiscoveredResourceProfileList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='8'),
  }(name='DiscoveredResourceProfiles'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model ListAggregateDiscoveredResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAggregateDiscoveredResourcesResponseBody(name='body'),
}

async function listAggregateDiscoveredResourcesWithOptions(request: ListAggregateDiscoveredResourcesRequest, runtime: Util.RuntimeOptions): ListAggregateDiscoveredResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregatorId)) {
    query['AggregatorId'] = request.aggregatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regions)) {
    query['Regions'] = request.regions;
  }
  if (!Util.isUnset(request.resourceDeleted)) {
    query['ResourceDeleted'] = request.resourceDeleted;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceTypes)) {
    query['ResourceTypes'] = request.resourceTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAggregateDiscoveredResources',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAggregateDiscoveredResources(request: ListAggregateDiscoveredResourcesRequest): ListAggregateDiscoveredResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAggregateDiscoveredResourcesWithOptions(request, runtime);
}

model ListConfigRulesRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-8d5c6457e0d9002a****'),
  complianceType?: string(name='ComplianceType', example='COMPLIANT'),
  configRuleName?: string(name='ConfigRuleName'),
  configRuleState?: string(name='ConfigRuleState', example='ACTIVE'),
  memberId?: long(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  riskLevel?: int32(name='RiskLevel', example='1'),
}

model ListConfigRulesResponseBody = {
  configRules?: {
    configRuleList?: [ 
      {
        accountId?: long(name='AccountId', example='987654321'),
        automationType?: string(name='AutomationType', example='LC'),
        compliance?: {
          complianceType?: string(name='ComplianceType', example='COMPLIANT'),
          count?: int32(name='Count', example='161'),
        }(name='Compliance'),
        compliancePackId?: string(name='CompliancePackId', example='cp-8d5c6457e0d9002a****'),
        configRuleArn?: string(name='ConfigRuleArn', example='acs:config::120886317861****:rule/cr-8d5c6457e0d9002a****'),
        configRuleId?: string(name='ConfigRuleId', example='cr-8d5c6457e0d9002a****'),
        configRuleName?: string(name='ConfigRuleName'),
        configRuleState?: string(name='ConfigRuleState', example='ACTIVE'),
        createBy?: {
          compliancePackId?: string(name='CompliancePackId', example='cp-8d5c6457e0d9002a****'),
          compliancePackName?: string(name='CompliancePackName'),
        }(name='CreateBy'),
        description?: string(name='Description'),
        riskLevel?: int32(name='RiskLevel', example='1'),
        sourceIdentifier?: string(name='SourceIdentifier', example='oss-bucket-public-read-prohibited'),
        sourceOwner?: string(name='SourceOwner', example='ALIYUN'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
      }
    ](name='ConfigRuleList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='ConfigRules'),
  requestId?: string(name='RequestId', example='8195B664-9565-4685-89AC-8B5F04B44B92'),
}

model ListConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConfigRulesResponseBody(name='body'),
}

async function listConfigRulesWithOptions(request: ListConfigRulesRequest, runtime: Util.RuntimeOptions): ListConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.compliancePackId)) {
    query['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.complianceType)) {
    query['ComplianceType'] = request.complianceType;
  }
  if (!Util.isUnset(request.configRuleName)) {
    query['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.configRuleState)) {
    query['ConfigRuleState'] = request.configRuleState;
  }
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConfigRules',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConfigRules(request: ListConfigRulesRequest): ListConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigRulesWithOptions(request, runtime);
}

model ListDiscoveredResourcesRequest {
  memberId?: long(name='MemberId', example='120886341261****'),
  multiAccount?: boolean(name='MultiAccount', example='false'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='1'),
  regions?: string(name='Regions', example='cn-huhehaote'),
  resourceDeleted?: int32(name='ResourceDeleted', example='1'),
  resourceId?: string(name='ResourceId', example='eni-hp31cqoba96jagtz****'),
  resourceTypes?: string(name='ResourceTypes', example='ACS::ECS::NetworkInterface'),
}

model ListDiscoveredResourcesResponseBody = {
  discoveredResourceProfiles?: {
    discoveredResourceProfileList?: [ 
      {
        accountId?: long(name='AccountId', example='120886317861****'),
        region?: string(name='Region', example='cn-huhehaote'),
        resourceCreationTime?: long(name='ResourceCreationTime', example='1618675206000'),
        resourceDeleted?: int32(name='ResourceDeleted', example='1'),
        resourceId?: string(name='ResourceId', example='eni-hp31cqoba96jagtz****'),
        resourceName?: string(name='ResourceName', example='Cloud Firewall'),
        resourceStatus?: string(name='ResourceStatus', example='InUse'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::NetworkInterface'),
        tags?: string(name='Tags', example='{\\"key1\\":[\\"value2\\"]}'),
      }
    ](name='DiscoveredResourceProfileList'),
    pageNumber?: int32(name='PageNumber', example='10'),
    pageSize?: int32(name='PageSize', example='1'),
    totalCount?: int32(name='TotalCount', example='129'),
  }(name='DiscoveredResourceProfiles'),
  requestId?: string(name='RequestId', example='C7817373-78CB-4F9A-8AFA-E7A88E9D64A2'),
}

model ListDiscoveredResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDiscoveredResourcesResponseBody(name='body'),
}

async function listDiscoveredResourcesWithOptions(request: ListDiscoveredResourcesRequest, runtime: Util.RuntimeOptions): ListDiscoveredResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regions)) {
    query['Regions'] = request.regions;
  }
  if (!Util.isUnset(request.resourceDeleted)) {
    query['ResourceDeleted'] = request.resourceDeleted;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceTypes)) {
    query['ResourceTypes'] = request.resourceTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDiscoveredResources',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDiscoveredResources(request: ListDiscoveredResourcesRequest): ListDiscoveredResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDiscoveredResourcesWithOptions(request, runtime);
}

model ListRemediationTemplatesRequest {
  managedRuleIdentifier?: string(name='ManagedRuleIdentifier', example='oss-bucket-public-write-prohibited'),
  remediationType?: string(name='RemediationType', example='OOS'),
}

model ListRemediationTemplatesResponseBody = {
  remediationTemplates?: [ 
    {
      remediationType?: string(name='RemediationType', example='OOS'),
      templateDefinition?: string(name='TemplateDefinition'),
      templateIdentifier?: string(name='TemplateIdentifier', example='ACS-OSS-PutBucketAcl'),
      templateName?: string(name='TemplateName', example='Set the ACL of an OSS bucket to private.'),
    }
  ](name='RemediationTemplates'),
  requestId?: string(name='RequestId', example='FC2C4750-7024-499C-A69F-763543D1CBE3'),
}

model ListRemediationTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRemediationTemplatesResponseBody(name='body'),
}

async function listRemediationTemplatesWithOptions(request: ListRemediationTemplatesRequest, runtime: Util.RuntimeOptions): ListRemediationTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.managedRuleIdentifier)) {
    query['ManagedRuleIdentifier'] = request.managedRuleIdentifier;
  }
  if (!Util.isUnset(request.remediationType)) {
    query['RemediationType'] = request.remediationType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRemediationTemplates',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRemediationTemplates(request: ListRemediationTemplatesRequest): ListRemediationTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRemediationTemplatesWithOptions(request, runtime);
}

model PutConfigRuleRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-2a914fcf617e00c9****'),
  configRuleName?: string(name='ConfigRuleName'),
  description?: string(name='Description'),
  inputParameters?: string(name='InputParameters', example='{"cpuCount": "2"}'),
  memberId?: long(name='MemberId', example='123456789'),
  multiAccount?: boolean(name='MultiAccount', example='false'),
  riskLevel?: int32(name='RiskLevel', example='1'),
  scopeComplianceResourceId?: string(name='ScopeComplianceResourceId', example='vpc-6weoy5flv41pj4wvr****'),
  scopeComplianceResourceTypes?: string(name='ScopeComplianceResourceTypes', example='["ACS::RDS::DBInstance"]'),
  sourceDetailMessageType?: string(name='SourceDetailMessageType', example='ConfigurationItemChangeNotification'),
  sourceIdentifier?: string(name='SourceIdentifier', example='rds-cpu-min-count-limit'),
  sourceMaximumExecutionFrequency?: string(name='SourceMaximumExecutionFrequency', example='Twelve_Hours'),
  sourceOwner?: string(name='SourceOwner', example='ALIYUN'),
}

model PutConfigRuleResponseBody = {
  configRuleId?: string(name='ConfigRuleId', example='cr-76ac4fcfb57e00c9****'),
  requestId?: string(name='RequestId', example='A7A0FFF8-0B44-40C6-8BBF-3A185EFDF3F7'),
}

model PutConfigRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutConfigRuleResponseBody(name='body'),
}

async function putConfigRuleWithOptions(request: PutConfigRuleRequest, runtime: Util.RuntimeOptions): PutConfigRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.multiAccount)) {
    query['MultiAccount'] = request.multiAccount;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configRuleId)) {
    body['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.configRuleName)) {
    body['ConfigRuleName'] = request.configRuleName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scopeComplianceResourceId)) {
    body['ScopeComplianceResourceId'] = request.scopeComplianceResourceId;
  }
  if (!Util.isUnset(request.scopeComplianceResourceTypes)) {
    body['ScopeComplianceResourceTypes'] = request.scopeComplianceResourceTypes;
  }
  if (!Util.isUnset(request.sourceDetailMessageType)) {
    body['SourceDetailMessageType'] = request.sourceDetailMessageType;
  }
  if (!Util.isUnset(request.sourceIdentifier)) {
    body['SourceIdentifier'] = request.sourceIdentifier;
  }
  if (!Util.isUnset(request.sourceMaximumExecutionFrequency)) {
    body['SourceMaximumExecutionFrequency'] = request.sourceMaximumExecutionFrequency;
  }
  if (!Util.isUnset(request.sourceOwner)) {
    body['SourceOwner'] = request.sourceOwner;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PutConfigRule',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function putConfigRule(request: PutConfigRuleRequest): PutConfigRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return putConfigRuleWithOptions(request, runtime);
}

model PutConfigurationRecorderRequest {
  resourceTypes?: string(name='ResourceTypes', example='ACS::ECS::Instance,ACS::ECS::Disk'),
}

model PutConfigurationRecorderResponseBody = {
  configurationRecorder?: {
    accountId?: long(name='AccountId', example='123456789'),
    configurationRecorderStatus?: string(name='ConfigurationRecorderStatus', example='REGISTERED'),
    resourceTypes?: [ string ](name='ResourceTypes'),
  }(name='ConfigurationRecorder'),
  requestId?: string(name='RequestId', example='7C189ED2-30C1-492E-82B6-0D828B556ED9'),
}

model PutConfigurationRecorderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutConfigurationRecorderResponseBody(name='body'),
}

async function putConfigurationRecorderWithOptions(request: PutConfigurationRecorderRequest, runtime: Util.RuntimeOptions): PutConfigurationRecorderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceTypes)) {
    body['ResourceTypes'] = request.resourceTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PutConfigurationRecorder',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function putConfigurationRecorder(request: PutConfigurationRecorderRequest): PutConfigurationRecorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return putConfigurationRecorderWithOptions(request, runtime);
}

model PutDeliveryChannelRequest {
  clientToken?: string(name='ClientToken', example='1594295238-f9361358-5843-4294-8d30-b5183fac****'),
  deliveryChannelAssumeRoleArn?: string(name='DeliveryChannelAssumeRoleArn', example='acs:ram::100931896542****:role/aliyunserviceroleforconfig'),
  deliveryChannelCondition?: string(name='DeliveryChannelCondition', example='[{"filterType":"ResourceType","values":["ACS::ActionTrail::Trail","ACS::CBWP::CommonBandwidthPackage","ACS::CDN::Domain","ACS::CEN::CenBandwidthPackage","ACS::CEN::CenInstance","ACS::CEN::Flowlog","ACS::DdosCoo::Instance"],"multiple":true}]'),
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-193f6457e0d90080****'),
  deliveryChannelName?: string(name='DeliveryChannelName', example='testoss'),
  deliveryChannelTargetArn?: string(name='DeliveryChannelTargetArn', example='acs:oss:cn-hangzhou:100931896542****:20171130--1'),
  deliveryChannelType?: string(name='DeliveryChannelType', example='OSS'),
  description?: string(name='Description', example='My OSS delivery.'),
  status?: int32(name='Status', example='1'),
}

model PutDeliveryChannelResponseBody = {
  deliveryChannelId?: string(name='DeliveryChannelId', example='cdc-ee0f626622af0069****'),
  requestId?: string(name='RequestId', example='0D6B9E0A-AD53-4732-922B-0F584ECA5FAB'),
}

model PutDeliveryChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutDeliveryChannelResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request PutDeliveryChannelRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PutDeliveryChannelResponse
 */
async function putDeliveryChannelWithOptions(request: PutDeliveryChannelRequest, runtime: Util.RuntimeOptions): PutDeliveryChannelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.deliveryChannelAssumeRoleArn)) {
    body['DeliveryChannelAssumeRoleArn'] = request.deliveryChannelAssumeRoleArn;
  }
  if (!Util.isUnset(request.deliveryChannelCondition)) {
    body['DeliveryChannelCondition'] = request.deliveryChannelCondition;
  }
  if (!Util.isUnset(request.deliveryChannelId)) {
    body['DeliveryChannelId'] = request.deliveryChannelId;
  }
  if (!Util.isUnset(request.deliveryChannelName)) {
    body['DeliveryChannelName'] = request.deliveryChannelName;
  }
  if (!Util.isUnset(request.deliveryChannelTargetArn)) {
    body['DeliveryChannelTargetArn'] = request.deliveryChannelTargetArn;
  }
  if (!Util.isUnset(request.deliveryChannelType)) {
    body['DeliveryChannelType'] = request.deliveryChannelType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PutDeliveryChannel',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request PutDeliveryChannelRequest
  * @return PutDeliveryChannelResponse
 */
async function putDeliveryChannel(request: PutDeliveryChannelRequest): PutDeliveryChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDeliveryChannelWithOptions(request, runtime);
}

model PutEvaluationsRequest {
  evaluations?: string(name='Evaluations', example='[{"annotation":"Resource type is ACS::CEN::Flowlog, not in ACS::ECS::Instance,ACS::ECS::NetworkInterface.","complianceResourceId":"flowlog-o6wdfo1yvgo4i8****","complianceResourceType":"ACS::CEN::Flowlog","complianceType":"NOT_APPLICABLE","orderingTimestamp":1588907220408}]'),
  resultToken?: string(name='ResultToken', example='=lAUbfkWp7GL9AFoQEIStinqBMc4FC8sHvip/1F1npkWUDNS2GEm6xwL6Zl/fSr0bbkWY+aiCLjTJxnp4H/yp/8p/Q8VCAtqG5uhRii4sfnYRnTPnE****'),
}

model PutEvaluationsResponseBody = {
  requestId?: string(name='RequestId', example='A7A0FFF8-0B44-40C6-8BBF-3A185EFDF3F7'),
  result?: boolean(name='Result', example='true'),
}

model PutEvaluationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutEvaluationsResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request PutEvaluationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PutEvaluationsResponse
 */
async function putEvaluationsWithOptions(request: PutEvaluationsRequest, runtime: Util.RuntimeOptions): PutEvaluationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.evaluations)) {
    body['Evaluations'] = request.evaluations;
  }
  if (!Util.isUnset(request.resultToken)) {
    body['ResultToken'] = request.resultToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PutEvaluations',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request PutEvaluationsRequest
  * @return PutEvaluationsResponse
 */
async function putEvaluations(request: PutEvaluationsRequest): PutEvaluationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEvaluationsWithOptions(request, runtime);
}

model StartConfigRuleEvaluationRequest {
  compliancePackId?: string(name='CompliancePackId', example='cp-ac16626622af0053****'),
  configRuleId?: string(name='ConfigRuleId', example='cr-bdb6626622af0012****'),
  revertEvaluation?: boolean(name='RevertEvaluation', example='false'),
}

model StartConfigRuleEvaluationResponseBody = {
  requestId?: string(name='RequestId', example='C32EEAD7-BF64-5927-977A-AFF9342B7275'),
  result?: boolean(name='Result', example='true'),
}

model StartConfigRuleEvaluationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartConfigRuleEvaluationResponseBody(name='body'),
}

async function startConfigRuleEvaluationWithOptions(request: StartConfigRuleEvaluationRequest, runtime: Util.RuntimeOptions): StartConfigRuleEvaluationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.compliancePackId)) {
    query['CompliancePackId'] = request.compliancePackId;
  }
  if (!Util.isUnset(request.configRuleId)) {
    query['ConfigRuleId'] = request.configRuleId;
  }
  if (!Util.isUnset(request.revertEvaluation)) {
    query['RevertEvaluation'] = request.revertEvaluation;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartConfigRuleEvaluation',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startConfigRuleEvaluation(request: StartConfigRuleEvaluationRequest): StartConfigRuleEvaluationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startConfigRuleEvaluationWithOptions(request, runtime);
}

model StartConfigurationRecorderRequest {
  enterpriseEdition?: boolean(name='EnterpriseEdition', example='false'),
}

model StartConfigurationRecorderResponseBody = {
  configurationRecorder?: {
    accountId?: long(name='AccountId', example='123456789'),
    configurationRecorderStatus?: string(name='ConfigurationRecorderStatus', example='REGISTRABLE'),
    organizationEnableStatus?: string(name='OrganizationEnableStatus', example='REGISTRABLE'),
    organizationMasterId?: long(name='OrganizationMasterId', example='987654321'),
    resourceTypes?: [ string ](name='ResourceTypes'),
  }(name='ConfigurationRecorder'),
  requestId?: string(name='RequestId', example='A3601178-A6A2-4636-BE56-1116F73C0B0C'),
}

model StartConfigurationRecorderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartConfigurationRecorderResponseBody(name='body'),
}

async function startConfigurationRecorderWithOptions(request: StartConfigurationRecorderRequest, runtime: Util.RuntimeOptions): StartConfigurationRecorderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.enterpriseEdition)) {
    body['EnterpriseEdition'] = request.enterpriseEdition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartConfigurationRecorder',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startConfigurationRecorder(request: StartConfigurationRecorderRequest): StartConfigurationRecorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return startConfigurationRecorderWithOptions(request, runtime);
}

model StopConfigRulesRequest {
  configRuleIds?: string(name='ConfigRuleIds', example='cr-2da35180a8d1008e****,cr-2da35180a8d1008e****'),
}

model StopConfigRulesResponseBody = {
  operateRuleResult?: {
    operateRuleItemList?: [ 
      {
        configRuleId?: string(name='ConfigRuleId', example='cr-2da35180a8d1008e****'),
        errorCode?: string(name='ErrorCode', example='ConfigRuleStatusNotActive'),
        success?: boolean(name='Success', example='false'),
      }
    ](name='OperateRuleItemList'),
  }(name='OperateRuleResult'),
  requestId?: string(name='RequestId', example='49C1A88F-D163-46DF-84A6-F300229F37AE'),
}

model StopConfigRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopConfigRulesResponseBody(name='body'),
}

async function stopConfigRulesWithOptions(request: StopConfigRulesRequest, runtime: Util.RuntimeOptions): StopConfigRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configRuleIds)) {
    query['ConfigRuleIds'] = request.configRuleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopConfigRules',
    version = '2019-01-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopConfigRules(request: StopConfigRulesRequest): StopConfigRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopConfigRulesWithOptions(request, runtime);
}

