import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetAsyncJobResultRequest = {
  jobId: string(name='JobId', description='jobId'),
}

model GetAsyncJobResultResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    jobId: string(name='JobId', description='jobId'),
    status: string(name='Status', description='status'),
    result: string(name='Result', description='result'),
    errorCode: string(name='ErrorCode', description='errorCode'),
    errorMessage: string(name='ErrorMessage', description='errorMessage'),
  }(name='Data', description='data'),
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  return doRequest('GetAsyncJobResult', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model SuperResolveVideoRequest = {
  videoUrl: string(name='VideoUrl', description='videoUrl'),
  bitRate?: integer(name='BitRate', description='bitRate'),
}

model SuperResolveVideoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    videoUrl: string(name='VideoUrl', description='VideoUrl'),
  }(name='Data', description='data'),
}

async function superResolveVideo(request: SuperResolveVideoRequest, runtime: Util.RuntimeOptions): SuperResolveVideoResponse {
  Util.validateModel(request);
  return doRequest('SuperResolveVideo', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model SuperResolveVideoAdvanceRequest = {
  videoUrlObject: readable(description='VideoUrlObject', name='VideoUrlObject'),
  bitRate?: integer(name='BitRate', description='bitRate'),
}

async function superResolveVideoAdvance(request: SuperResolveVideoAdvanceRequest, runtime: Util.RuntimeOptions): SuperResolveVideoResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoenhan',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var superResolveVideoreq = new SuperResolveVideoRequest{};
  RPCUtil.convert(request, superResolveVideoreq);
  superResolveVideoreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var superResolveVideoResp = superResolveVideo(superResolveVideoreq, runtime);
  return superResolveVideoResp;
}

model EraseVideoLogoRequest = {
  videoUrl: string(name='VideoUrl', description='videoUrl'),
  boxes?: [
    {
      h?: float(name='H', description='h'),
      w?: float(name='W', description='w'),
      x?: float(name='X', description='x'),
      y?: float(name='Y', description='y'),
    }
  ](name='Boxes', description='boxes'),
}

model EraseVideoLogoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    videoUrl: string(name='VideoUrl', description='VideoUrl'),
  }(name='Data', description='data'),
}

async function eraseVideoLogo(request: EraseVideoLogoRequest, runtime: Util.RuntimeOptions): EraseVideoLogoResponse {
  Util.validateModel(request);
  return doRequest('EraseVideoLogo', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model EraseVideoLogoAdvanceRequest = {
  videoUrlObject: readable(description='VideoUrlObject', name='VideoUrlObject'),
  boxes?: [
    {
      h?: float(name='H', description='h'),
      w?: float(name='W', description='w'),
      x?: float(name='X', description='x'),
      y?: float(name='Y', description='y'),
    }
  ](name='Boxes', description='boxes'),
}

async function eraseVideoLogoAdvance(request: EraseVideoLogoAdvanceRequest, runtime: Util.RuntimeOptions): EraseVideoLogoResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoenhan',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var eraseVideoLogoreq = new EraseVideoLogoRequest{};
  RPCUtil.convert(request, eraseVideoLogoreq);
  eraseVideoLogoreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var eraseVideoLogoResp = eraseVideoLogo(eraseVideoLogoreq, runtime);
  return eraseVideoLogoResp;
}

model EraseVideoSubtitlesRequest = {
  videoUrl: string(name='VideoUrl', description='videoUrl'),
  BX?: float(name='BX', description='bx'),
  BY?: float(name='BY', description='by'),
  BW?: float(name='BW', description='bw'),
  BH?: float(name='BH', description='bh'),
}

model EraseVideoSubtitlesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    videoUrl: string(name='VideoUrl', description='VideoUrl'),
  }(name='Data', description='data'),
}

async function eraseVideoSubtitles(request: EraseVideoSubtitlesRequest, runtime: Util.RuntimeOptions): EraseVideoSubtitlesResponse {
  Util.validateModel(request);
  return doRequest('EraseVideoSubtitles', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model EraseVideoSubtitlesAdvanceRequest = {
  videoUrlObject: readable(description='VideoUrlObject', name='VideoUrlObject'),
  BX?: float(name='BX', description='bx'),
  BY?: float(name='BY', description='by'),
  BW?: float(name='BW', description='bw'),
  BH?: float(name='BH', description='bh'),
}

async function eraseVideoSubtitlesAdvance(request: EraseVideoSubtitlesAdvanceRequest, runtime: Util.RuntimeOptions): EraseVideoSubtitlesResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoenhan',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var eraseVideoSubtitlesreq = new EraseVideoSubtitlesRequest{};
  RPCUtil.convert(request, eraseVideoSubtitlesreq);
  eraseVideoSubtitlesreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var eraseVideoSubtitlesResp = eraseVideoSubtitles(eraseVideoSubtitlesreq, runtime);
  return eraseVideoSubtitlesResp;
}

model AbstractEcommerceVideoRequest = {
  videoUrl: string(name='VideoUrl', description='videoUrl'),
  duration: float(name='Duration', description='duration'),
  width?: integer(name='Width', description='width'),
  height?: integer(name='Height', description='height'),
}

model AbstractEcommerceVideoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    videoUrl: string(name='VideoUrl', description='VideoUrl'),
    videoCoverUrl: string(name='VideoCoverUrl', description='VideoCoverUrl'),
  }(name='Data', description='data'),
}

async function abstractEcommerceVideo(request: AbstractEcommerceVideoRequest, runtime: Util.RuntimeOptions): AbstractEcommerceVideoResponse {
  Util.validateModel(request);
  return doRequest('AbstractEcommerceVideo', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model AbstractEcommerceVideoAdvanceRequest = {
  videoUrlObject: readable(description='VideoUrlObject', name='VideoUrlObject'),
  duration: float(name='Duration', description='duration'),
  width?: integer(name='Width', description='width'),
  height?: integer(name='Height', description='height'),
}

async function abstractEcommerceVideoAdvance(request: AbstractEcommerceVideoAdvanceRequest, runtime: Util.RuntimeOptions): AbstractEcommerceVideoResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoenhan',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var abstractEcommerceVideoreq = new AbstractEcommerceVideoRequest{};
  RPCUtil.convert(request, abstractEcommerceVideoreq);
  abstractEcommerceVideoreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var abstractEcommerceVideoResp = abstractEcommerceVideo(abstractEcommerceVideoreq, runtime);
  return abstractEcommerceVideoResp;
}

model AbstractFilmVideoRequest = {
  videoUrl: string(name='VideoUrl', description='videoUrl'),
  length: integer(name='Length', description='length'),
}

model AbstractFilmVideoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    videoUrl: string(name='VideoUrl', description='VideoUrl'),
  }(name='Data', description='data'),
}

async function abstractFilmVideo(request: AbstractFilmVideoRequest, runtime: Util.RuntimeOptions): AbstractFilmVideoResponse {
  Util.validateModel(request);
  return doRequest('AbstractFilmVideo', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model AbstractFilmVideoAdvanceRequest = {
  videoUrlObject: readable(description='VideoUrlObject', name='VideoUrlObject'),
  length: integer(name='Length', description='length'),
}

async function abstractFilmVideoAdvance(request: AbstractFilmVideoAdvanceRequest, runtime: Util.RuntimeOptions): AbstractFilmVideoResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoenhan',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var abstractFilmVideoreq = new AbstractFilmVideoRequest{};
  RPCUtil.convert(request, abstractFilmVideoreq);
  abstractFilmVideoreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var abstractFilmVideoResp = abstractFilmVideo(abstractFilmVideoreq, runtime);
  return abstractFilmVideoResp;
}

model AdjustVideoColorRequest = {
  videoUrl: string(name='VideoUrl', description='videoUrl'),
  videoBitrate?: string(name='VideoBitrate', description='videoBitrate'),
  videoCodec?: string(name='VideoCodec', description='videoCodec'),
  videoFormat?: string(name='VideoFormat', description='videoFormat'),
  mode: string(name='Mode', description='mode'),
}

model AdjustVideoColorResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    videoUrl: string(name='VideoUrl', description='VideoUrl'),
  }(name='Data', description='data'),
}

async function adjustVideoColor(request: AdjustVideoColorRequest, runtime: Util.RuntimeOptions): AdjustVideoColorResponse {
  Util.validateModel(request);
  return doRequest('AdjustVideoColor', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model AdjustVideoColorAdvanceRequest = {
  videoUrlObject: readable(description='VideoUrlObject', name='VideoUrlObject'),
  videoBitrate?: string(name='VideoBitrate', description='videoBitrate'),
  videoCodec?: string(name='VideoCodec', description='videoCodec'),
  videoFormat?: string(name='VideoFormat', description='videoFormat'),
  mode: string(name='Mode', description='mode'),
}

async function adjustVideoColorAdvance(request: AdjustVideoColorAdvanceRequest, runtime: Util.RuntimeOptions): AdjustVideoColorResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoenhan',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var adjustVideoColorreq = new AdjustVideoColorRequest{};
  RPCUtil.convert(request, adjustVideoColorreq);
  adjustVideoColorreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var adjustVideoColorResp = adjustVideoColor(adjustVideoColorreq, runtime);
  return adjustVideoColorResp;
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
