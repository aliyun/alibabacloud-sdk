/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'videoenhan';
  @version = '2020-03-20';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DeleteFaceVideoTemplateRequest {
  templateId: string(name='TemplateId', description='This parameter is required.', example='3bf2418c-7adf-4002-a9d6-2f7cf1889c0d', position='Body'),
}

model DeleteFaceVideoTemplateResponseBody = {
  requestId?: string(name='RequestId', example='2337D184-CD63-57B5-96A2-B60AABCB7B58'),
}

model DeleteFaceVideoTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceVideoTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFaceVideoTemplate  DeleteFaceVideoTemplateRequest
  * @return DeleteFaceVideoTemplateResponse
 */
async function deleteFaceVideoTemplate(request: DeleteFaceVideoTemplateRequest): DeleteFaceVideoTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceVideoTemplate', 'POST', '/', 'json', true, 'form', request);
}

model GetAsyncJobResultRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='E75FE679-0303-4DD1-8252-1143B4FA8A27', position='Body'),
}

model GetAsyncJobResultResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode', example='InvalidParameter'),
    errorMessage?: string(name='ErrorMessage', example='paramsIllegal'),
    jobId?: string(name='JobId', example='49E2CC28-ED1D-4CC5-854D-7D0AE2B20976'),
    result?: string(name='Result', example='{\\"VideoUrl\\":\\"http://algo-app-aic-vd-cn-shanghai-prod.oss-cn-shanghai.aliyuncs.com/video-super-resolution/2020-03-26-02/55%3A59-XFLsuEKpPxleHl4n.mp4?Expires=1585193159&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=OqsxMwAKsFVjPO%2Brgw%2BpXHIm6v****\\"}'),
    status?: string(name='Status', example='PROCESS_SUCCESS'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='43A0AEB6-45F4-4138-8E89-E1A5D63200E3'),
}

model GetAsyncJobResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsyncJobResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAsyncJobResult  GetAsyncJobResultRequest
  * @return GetAsyncJobResultResponse
 */
async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncJobResult', 'POST', '/', 'json', true, 'form', request);
}

model QueryFaceVideoTemplateRequest {
  pageNo?: long(name='PageNo', minimum=1, maximum=5000, position='Query'),
  pageSize?: long(name='PageSize', example='100', minimum=1, maximum=500, position='Query'),
  templateId?: string(name='TemplateId', example='3bf2418c-7adf-4002-a9d6-2f7cf1889c0d', position='Query'),
}

model QueryFaceVideoTemplateResponseBody = {
  data?: {
    elements?: [ 
      {
        createTime?: string(name='CreateTime', example='2021-09-06 15:17:19'),
        faceInfos?: [ 
          {
            templateFaceID?: string(name='TemplateFaceID'),
            templateFaceURL?: string(name='TemplateFaceURL'),
          }
        ](name='FaceInfos'),
        templateId?: string(name='TemplateId', example='3bf2418c-7adf-4002-a9d6-2f7cf1889c0d'),
        templateURL?: string(name='TemplateURL', example='http://vibktprfx-prod-prod-aic-gd-cn-shanghai.oss-cn-shanghai.aliyuncs.com/image-face-fusion/OriginUrl/user/2021-09-06/e4d6ecf6-8dc8-4dac-acb5-56a737ccbc06?Expires=1630914551&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=kBcLm66y7%2FZ3eIMgwXJg1zNP7k****'),
        updateTime?: string(name='UpdateTime', example='2021-09-06 15:18:15'),
        userId?: string(name='UserId', example='zhangsan'),
      }
    ](name='Elements'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A06E3D21-890D-500B-97DA-D8B99D2DDDC4'),
}

model QueryFaceVideoTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFaceVideoTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryFaceVideoTemplate  QueryFaceVideoTemplateRequest
  * @return QueryFaceVideoTemplateResponse
 */
async function queryFaceVideoTemplate(request: QueryFaceVideoTemplateRequest): QueryFaceVideoTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceVideoTemplate', 'POST', '/', 'json', false, 'json', request);
}

