/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PolardbAI';
  @version = '2024-08-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model OpenApiModelsPredictCmd {
}

model PredictSseRequest {
  dbName?: string(name='dbName', example='db_test', position='Body'),
  input?: string(name='input', position='Body'),
  instanceName?: string(name='instanceName', example='pc-2ze454l20me07****', position='Body'),
  modelClass?: string(name='modelClass', example='_polar4ai_tongyi', position='Body'),
  parameters?: map[string]any(name='parameters', example='{"basic_index_name":"index_table"}', position='Body'),
}

model PredictSseResponseBody = {
  data?: any(name='data'),
  errCode?: string(name='errCode', example='ER_ILLEGAL_MODEL_CLASS'),
  errMessage?: string(name='errMessage', example='Illegal model class.'),
  requestId?: string(name='requestId', description='Id of the request', example='983863E2-****-1D15-A4AE-3468CD75383D'),
  success?: boolean(name='success', example='true'),
}

model PredictSseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PredictSseResponseBody(name='body'),
}

async function predictSse(request: PredictSseRequest): PredictSseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PredictSse', 'POST', '/v1/openapi/models/predictSse', 'json', false, 'json', request);
}

function predictSseWithResponseIterable(request: PredictSseRequest): iterator[PredictSseResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'PredictSse', 'POST', '/v1/openapi/models/predictSse', 'json', false, 'json', request);
}

