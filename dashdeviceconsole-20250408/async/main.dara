/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DashDeviceConsole';
  @version = '2025-04-08';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DeletePromptRequest {
  groupId?: string(name='groupId', example='chat', position='Query'),
}

model DeletePromptResponseBody = {
  data?: any(name='data', example='{$PromptContent}'),
  errorCode?: string(name='errorCode', example='success'),
  message?: string(name='message', example='successful'),
  requestId?: string(name='requestId', description='Id of the request', example='5090DEE5-E7DB-59A8-B712-28918D3AAA8A'),
  statusCode?: int32(name='statusCode', example='200'),
}

model DeletePromptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePromptResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePrompt  DeletePromptRequest
  * @return DeletePromptResponse
 */
async function deletePrompt(request: DeletePromptRequest): DeletePromptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePrompt', 'DELETE', '/prompt/delete', 'json', false, 'json', request);
}

model GetPromptRequest {
  groupId?: string(name='groupId', example='chat', position='Query'),
}

model GetPromptResponseBody = {
  data?: any(name='data', example='{$PromptContent}'),
  errorCode?: string(name='errorCode', example='success'),
  message?: string(name='message', example='successful'),
  requestId?: string(name='requestId', description='Id of the request', example='BDA59622-2114-5F68-A530-3FCACAF0F04F'),
  statusCode?: int32(name='statusCode', example='200'),
}

model GetPromptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPromptResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPrompt  GetPromptRequest
  * @return GetPromptResponse
 */
async function getPrompt(request: GetPromptRequest): GetPromptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPrompt', 'POST', '/prompt/get', 'json', false, 'json', request);
}

model PushPromptRequest {
  groupId?: string(name='groupId', example='chat', position='Query'),
  promptContent?: string(name='promptContent', example='{}', position='Body'),
}

model PushPromptResponseBody = {
  data?: any(name='data', example='True'),
  errorCode?: string(name='errorCode', example='success'),
  message?: string(name='message', example='successful'),
  requestId?: string(name='requestId', description='Id of the request', example='5090DEE5-E7DB-59A8-B712-28918D3AAA8A'),
  statusCode?: int32(name='statusCode'),
}

model PushPromptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushPromptResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushPrompt  PushPromptRequest
  * @return PushPromptResponse
 */
async function pushPrompt(request: PushPromptRequest): PushPromptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushPrompt', 'POST', '/prompt/push', 'json', true, 'form', request);
}

