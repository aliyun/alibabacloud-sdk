/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bailianmodelonchip', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActiveInteractionCreateRequest {
  image?: string(name='image', description='This parameter is required.', example='https://linkscreen-daily.oss-cn-hangzhou.aliyuncs.com/mock/251023/a_person_1.jpg'),
}

model ActiveInteractionCreateResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    gesture?: string(name='gesture', example='point'),
    person?: string(name='person', example='A man in dark clothing stands on a rocky hilltop, facing away from the camera, gazing at the expansive view with a contemplative posture.'),
    scene?: string(name='scene', example='Mountainous landscape with layered ridges receding into haze, under a vast blue sky with wispy clouds and soft golden light near the horizon.'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='AF54F772-60FF-56FD-A3EA-11620EF1229A'),
  success?: boolean(name='success', example='True'),
}

model ActiveInteractionCreateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActiveInteractionCreateResponseBody(name='body'),
}

/**
 * @summary 主动交互消息传递
 *
 * @param request ActiveInteractionCreateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ActiveInteractionCreateResponse
 */
@context("activeInteractionCreateWithContext")
async function activeInteractionCreateWithOptions(request: ActiveInteractionCreateRequest, headers: map[string]string, runtime: $RuntimeOptions): ActiveInteractionCreateResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.image)) {
    body['image'] = request.image;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ActiveInteractionCreate',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/active/interaction/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 主动交互消息传递
 *
 * @param request ActiveInteractionCreateRequest
 * @return ActiveInteractionCreateResponse
 */
async function activeInteractionCreate(request: ActiveInteractionCreateRequest): ActiveInteractionCreateResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return activeInteractionCreateWithOptions(request, headers, runtime);
}

model DeviceRegisterRequest {
  appId?: string(name='appId', description='This parameter is required.'),
  nonce?: string(name='nonce', description='This parameter is required.', example='2a64edd96296880f55aa61987b'),
  requestTime?: string(name='requestTime', description='This parameter is required.'),
  signature?: string(name='signature', description='This parameter is required.'),
}

model DeviceRegisterResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    appId?: string(name='appId'),
    deviceName?: string(name='deviceName', example='991fa52b7935aaa33536e05d4f4b5003'),
    nonce?: string(name='nonce', example='e2e928e8244f45ab30ec6ba9f9'),
    responseTime?: string(name='responseTime', example='1748312544852'),
    signature?: string(name='signature', example='s8wPO/w79jP7sz6OaHkixAje2GmgzmZiCuCZZ+J8w77ICTyqD30lL6rUhnXwwx4MyGF62DRPFnpXtJ6c5mlmt6QdML3FkjGn+i/wR5T6QMkVDW6YRPWsx3jkIWRQ2sDnmVNBtixo2s9w3RJrnddRzVCaR/WeLOfiVLWcrLcJditzO/1YXBZ9vuRKQ4iperfhZvw372N/m8/1qtjJl+FUe2+wxK6RMxr03K7R'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='52548360-B3AA-55EA-893F-48C16470F64A'),
  success?: boolean(name='success', example='True'),
}

model DeviceRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeviceRegisterResponseBody(name='body'),
}

/**
 * @summary 设备注册
 *
 * @param request DeviceRegisterRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeviceRegisterResponse
 */
@context("deviceRegisterWithContext")
async function deviceRegisterWithOptions(request: DeviceRegisterRequest, headers: map[string]string, runtime: $RuntimeOptions): DeviceRegisterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['appId'] = request.appId;
  }
  if (!$isNull(request.nonce)) {
    body['nonce'] = request.nonce;
  }
  if (!$isNull(request.requestTime)) {
    body['requestTime'] = request.requestTime;
  }
  if (!$isNull(request.signature)) {
    body['signature'] = request.signature;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeviceRegister',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/register`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设备注册
 *
 * @param request DeviceRegisterRequest
 * @return DeviceRegisterResponse
 */
async function deviceRegister(request: DeviceRegisterRequest): DeviceRegisterResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deviceRegisterWithOptions(request, headers, runtime);
}

model GetTokenRequest {
  appId?: string(name='appId', description='This parameter is required.'),
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  nonce?: string(name='nonce', description='This parameter is required.', example='2a64edd96296880f55aa61987b'),
  requestTime?: string(name='requestTime', description='This parameter is required.', example='1748413148546'),
  signature?: string(name='signature', description='This parameter is required.', example='5/Smm8gnDSgZY2Blftq9eGYpVnpYCztoLJaJfhlH7id0lNlQxydRLtjUkGPr1qdbQq+oUn6Y1h0KJUdk0rf4am3MzdNr/Uhc47c8bbXnV8SlIC0agGo5skEQZNObzUD+sFxt8uN35/FYf7YRC8R61xY7+NPN2NLJrA/DPhewtVRRgAbb8RjergTcIG6oN1XTzLyC+76Az/3o2dPCxTfMXG3AFQc='),
  tokenKey?: string(name='tokenKey', example='sk-4asv136677d2411b876e536bc8xxxxx'),
  tokenType?: string(name='tokenType', description='This parameter is required.', example='oss'),
}

model GetTokenResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    appId?: string(name='appId'),
    deviceName?: string(name='deviceName', example='5b504f84b69b9a73d3a21a2cff05e190'),
    nonce?: string(name='nonce', example='b79d692c315d6bfb28312edf15'),
    requestIp?: string(name='requestIp', example='127.0.0.1'),
    responseTime?: string(name='responseTime', example='1748413248360'),
    signature?: string(name='signature', example='N1faAjFhhaRNFaZNC8woRpQyAzEfBaIoWQEgDfds/Fwm7nIyEDLlSK3Ttx2OFebiHZ/MpHRr/3MnI/jpVWB/xNYIQxm6sccHJENHNAz6gaW+itU5wUrh+46EpqySABV8kc2pQ0HmYlbePfjjOK6lCfQjEGpekSAgQ6tDhG1lXWfKdtggq58Ut5bImMxMhk4R/PFUWrJe4CDuFu072C+foI0JlUV9TnGtVQ58oz8VRndrGXyauS/xqg8iGSZn6FyprUf5p+0ow20E'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='B08AAA14-AD93-51F6-82AE-82AFAE9375B6'),
  success?: string(name='success', example='true'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
 * @summary 获取网关校验Token
 *
 * @param request GetTokenRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTokenResponse
 */
@context("getTokenWithContext")
async function getTokenWithOptions(request: GetTokenRequest, headers: map[string]string, runtime: $RuntimeOptions): GetTokenResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['appId'] = request.appId;
  }
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.nonce)) {
    body['nonce'] = request.nonce;
  }
  if (!$isNull(request.requestTime)) {
    body['requestTime'] = request.requestTime;
  }
  if (!$isNull(request.signature)) {
    body['signature'] = request.signature;
  }
  if (!$isNull(request.tokenKey)) {
    body['tokenKey'] = request.tokenKey;
  }
  if (!$isNull(request.tokenType)) {
    body['tokenType'] = request.tokenType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetToken',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/auth/v1/token/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取网关校验Token
 *
 * @param request GetTokenRequest
 * @return GetTokenResponse
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTokenWithOptions(request, headers, runtime);
}

