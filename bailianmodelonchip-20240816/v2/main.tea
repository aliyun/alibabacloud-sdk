/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bailianmodelonchip', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateChannelSignRequest {
  channelName?: string(name='channelName', description='This parameter is required.'),
  contact?: string(name='contact'),
  description?: string(name='description'),
  phone?: string(name='phone', example='13555555555'),
  remark?: string(name='remark'),
}

model CreateChannelSignResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    channelName?: string(name='channelName'),
    contact?: string(name='contact'),
    createTime?: string(name='createTime', example='2024-11-25 08:00:00'),
    description?: string(name='description'),
    modifyTime?: string(name='modifyTime', example='2024-11-25 08:00:00'),
    phone?: string(name='phone', example='13555555555'),
    remark?: string(name='remark'),
    status?: string(name='status', example='review'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='65857D96-A86B-5BBB-8392-0793E95DEB81'),
  success?: string(name='success', example='True'),
}

model CreateChannelSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChannelSignResponseBody(name='body'),
}

/**
 * @summary 创建渠道签约申请
 *
 * @param request CreateChannelSignRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateChannelSignResponse
 */
async function createChannelSignWithOptions(request: CreateChannelSignRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateChannelSignResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.channelName)) {
    body['channelName'] = request.channelName;
  }
  if (!$isNull(request.contact)) {
    body['contact'] = request.contact;
  }
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!$isNull(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateChannelSign',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/channel/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建渠道签约申请
 *
 * @param request CreateChannelSignRequest
 * @return CreateChannelSignResponse
 */
async function createChannelSign(request: CreateChannelSignRequest): CreateChannelSignResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createChannelSignWithOptions(request, headers, runtime);
}

model CreateProductRequest {
  description?: string(name='description'),
  euid?: string(name='euid', description='This parameter is required.', example='1221031972475999'),
  productName?: string(name='productName', description='This parameter is required.'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='503041545'),
  userId?: string(name='userId', description='This parameter is required.', example='123456'),
}

model CreateProductResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    apiKey?: string(name='apiKey', example='v7+7WMzYjHhyhb0c6IDL3e1rwCcphld19XzLYcwredVkHOht9et5GhPV45AqCzX7'),
    description?: string(name='description'),
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    productName?: string(name='productName'),
    productSecret?: string(name='productSecret', example='10bcac8989aed3f1047b71e6c06ef3ab'),
    tenantId?: string(name='tenantId', example='503041545'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='0abb7ee317248118358433637e749a'),
  success?: string(name='success', example='True'),
}

model CreateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductResponseBody(name='body'),
}

/**
 * @summary 创建产品
 *
 * @param request CreateProductRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProductResponse
 */
async function createProductWithOptions(request: CreateProductRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateProductResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.euid)) {
    body['euid'] = request.euid;
  }
  if (!$isNull(request.productName)) {
    body['productName'] = request.productName;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.userId)) {
    body['userId'] = request.userId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateProduct',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/product/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建产品
 *
 * @param request CreateProductRequest
 * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createProductWithOptions(request, headers, runtime);
}

model DeleteProductRequest {
  productKey?: string(name='productKey', description='This parameter is required.', example='el3SzmCU2p0x4RBc'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='235454102432001'),
  userId?: string(name='userId', description='This parameter is required.', example='123456'),
}

model DeleteProductResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    productName?: string(name='productName', example='btripOpen'),
    tenantId?: string(name='tenantId', example='355806813982786'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='AF54F772-60FF-56FD-A3EA-11620EF1229A'),
  success?: string(name='success', example='True'),
}

model DeleteProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProductResponseBody(name='body'),
}

/**
 * @summary 删除产品
 *
 * @param request DeleteProductRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProductResponse
 */
async function deleteProductWithOptions(request: DeleteProductRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteProductResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.userId)) {
    body['userId'] = request.userId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteProduct',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/product/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除产品
 *
 * @param request DeleteProductRequest
 * @return DeleteProductResponse
 */
async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProductWithOptions(request, headers, runtime);
}

model DeviceRegisterRequest {
  nonce?: string(name='nonce', description='This parameter is required.', example='2a64edd96296880f55aa61987b'),
  productKey?: string(name='productKey', description='This parameter is required.', example='el3SzmCU2p0x4RBc'),
  requestTime?: string(name='requestTime', description='This parameter is required.', example='1748312544852'),
  signature?: string(name='signature', description='This parameter is required.', example='3spKwUgUpAGsXbbrHKnpVJPlI9wamoyhh96uqJuSyCKyJ7oscLAHRcz15dSzLG5L+ywFgYXSQNqdRtsn/Ri0j7pD0IuoKt9R7EnNo/U6viPvWD3Ldp3ehDDtOFtSrpUg6LTedvGtUWYU4x/zSD2jgCXijEdZCCMGCypcheMHRXfInYWF1xFtnCEXJfxtrBrnCk1p/pW3JSmdHJzmInnUEO3dWbNe3A=='),
}

model DeviceRegisterResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    deviceName?: string(name='deviceName', example='991fa52b7935aaa33536e05d4f4b5003'),
    nonce?: string(name='nonce', example='e2e928e8244f45ab30ec6ba9f9'),
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    responseTime?: string(name='responseTime', example='1748312544852'),
    signature?: string(name='signature', example='s8wPO/w79jP7sz6OaHkixAje2GmgzmZiCuCZZ+J8w77ICTyqD30lL6rUhnXwwx4MyGF62DRPFnpXtJ6c5mlmt6QdML3FkjGn+i/wR5T6QMkVDW6YRPWsx3jkIWRQ2sDnmVNBtixo2s9w3RJrnddRzVCaR/WeLOfiVLWcrLcJditzO/1YXBZ9vuRKQ4iperfhZvw372N/m8/1qtjJl+FUe2+wxK6RMxr03K7R'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='52548360-B3AA-55EA-893F-48C16470F64A'),
  success?: boolean(name='success', example='True'),
}

model DeviceRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeviceRegisterResponseBody(name='body'),
}

/**
 * @summary 设备注册
 *
 * @param request DeviceRegisterRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeviceRegisterResponse
 */
async function deviceRegisterWithOptions(request: DeviceRegisterRequest, headers: map[string]string, runtime: $RuntimeOptions): DeviceRegisterResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.productKey)) {
    query['productKey'] = request.productKey;
  }
  if (!$isNull(request.requestTime)) {
    query['requestTime'] = request.requestTime;
  }
  if (!$isNull(request.signature)) {
    query['signature'] = request.signature;
  }

  var body : map[string]any = {};
  if (!$isNull(request.nonce)) {
    body['nonce'] = request.nonce;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeviceRegister',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/register`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设备注册
 *
 * @param request DeviceRegisterRequest
 * @return DeviceRegisterResponse
 */
async function deviceRegister(request: DeviceRegisterRequest): DeviceRegisterResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deviceRegisterWithOptions(request, headers, runtime);
}

model GetChannelSignResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    channelName?: string(name='channelName'),
    contact?: string(name='contact'),
    createTime?: string(name='createTime', example='2025-05-24 00:00:00'),
    description?: string(name='description'),
    modifyTime?: string(name='modifyTime', example='2025-05-24 00:00:00'),
    phone?: string(name='phone', example='13555555555'),
    remark?: string(name='remark'),
    status?: string(name='status', example='review'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='D9272777-8401-5744-B059-BA21CF4BE80F'),
  success?: string(name='success', example='true'),
}

model GetChannelSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChannelSignResponseBody(name='body'),
}

/**
 * @summary 查询渠道签约申请
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetChannelSignResponse
 */
async function getChannelSignWithOptions(headers: map[string]string, runtime: $RuntimeOptions): GetChannelSignResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetChannelSign',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/channel/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询渠道签约申请
 *
 * @return GetChannelSignResponse
 */
async function getChannelSign(): GetChannelSignResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getChannelSignWithOptions(headers, runtime);
}

model GetQuotaInfoRequest {
  recordId?: long(name='recordId', description='This parameter is required.', example='55'),
}

model GetQuotaInfoResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    activeLicenseCount?: long(name='activeLicenseCount', example='20'),
    duration?: int32(name='duration', example='12'),
    durationType?: int32(name='durationType', example='2'),
    licenseCount?: long(name='licenseCount', example='100'),
    maxQps?: int32(name='maxQps', example='100'),
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    purchaseModel?: int32(name='purchaseModel', example='1'),
    tenantId?: string(name='tenantId', example='51505222'),
    tokenNumber?: long(name='tokenNumber', example='100000'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='7B0FC4BC-9E4B-5AD7-9D35-6559BDC0788E'),
  success?: string(name='success', example='true'),
}

model GetQuotaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQuotaInfoResponseBody(name='body'),
}

/**
 * @summary 获取额度信息
 *
 * @param request GetQuotaInfoRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQuotaInfoResponse
 */
async function getQuotaInfoWithOptions(request: GetQuotaInfoRequest, headers: map[string]string, runtime: $RuntimeOptions): GetQuotaInfoResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.recordId)) {
    body['recordId'] = request.recordId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetQuotaInfo',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/quota/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取额度信息
 *
 * @param request GetQuotaInfoRequest
 * @return GetQuotaInfoResponse
 */
async function getQuotaInfo(request: GetQuotaInfoRequest): GetQuotaInfoResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getQuotaInfoWithOptions(request, headers, runtime);
}

model GetTokenRequest {
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  nonce?: string(name='nonce', description='This parameter is required.', example='2a64edd96296880f55aa61987b'),
  productKey?: string(name='productKey', description='This parameter is required.', example='el3SzmCU2p0x4RBc'),
  requestTime?: string(name='requestTime', description='This parameter is required.', example='1748413148546'),
  signature?: string(name='signature', description='This parameter is required.', example='5/Smm8gnDSgZY2Blftq9eGYpVnpYCztoLJaJfhlH7id0lNlQxydRLtjUkGPr1qdbQq+oUn6Y1h0KJUdk0rf4am3MzdNr/Uhc47c8bbXnV8SlIC0agGo5skEQZNObzUD+sFxt8uN35/FYf7YRC8R61xY7+NPN2NLJrA/DPhewtVRRgAbb8RjergTcIG6oN1XTzLyC+76Az/3o2dPCxTfMXG3AFQc='),
  tokenKey?: string(name='tokenKey', example='sk-4asv136677d2411b876e536bc8xxxxx'),
  tokenType?: string(name='tokenType', description='This parameter is required.', example='oss'),
}

model GetTokenResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    deviceName?: string(name='deviceName', example='5b504f84b69b9a73d3a21a2cff05e190'),
    nonce?: string(name='nonce', example='b79d692c315d6bfb28312edf15'),
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    requestIp?: string(name='requestIp', example='127.0.0.1'),
    responseTime?: string(name='responseTime', example='1748413248360'),
    signature?: string(name='signature', example='N1faAjFhhaRNFaZNC8woRpQyAzEfBaIoWQEgDfds/Fwm7nIyEDLlSK3Ttx2OFebiHZ/MpHRr/3MnI/jpVWB/xNYIQxm6sccHJENHNAz6gaW+itU5wUrh+46EpqySABV8kc2pQ0HmYlbePfjjOK6lCfQjEGpekSAgQ6tDhG1lXWfKdtggq58Ut5bImMxMhk4R/PFUWrJe4CDuFu072C+foI0JlUV9TnGtVQ58oz8VRndrGXyauS/xqg8iGSZn6FyprUf5p+0ow20E'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='B08AAA14-AD93-51F6-82AE-82AFAE9375B6'),
  success?: string(name='success', example='true'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
 * @summary 获取网关校验Token
 *
 * @param request GetTokenRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTokenResponse
 */
async function getTokenWithOptions(request: GetTokenRequest, headers: map[string]string, runtime: $RuntimeOptions): GetTokenResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.nonce)) {
    body['nonce'] = request.nonce;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.requestTime)) {
    body['requestTime'] = request.requestTime;
  }
  if (!$isNull(request.signature)) {
    body['signature'] = request.signature;
  }
  if (!$isNull(request.tokenKey)) {
    body['tokenKey'] = request.tokenKey;
  }
  if (!$isNull(request.tokenType)) {
    body['tokenType'] = request.tokenType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetToken',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/auth/v1/token/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取网关校验Token
 *
 * @param request GetTokenRequest
 * @return GetTokenResponse
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTokenWithOptions(request, headers, runtime);
}

model HalfLLMAppCallRequest {
  appId?: string(name='appId', description='This parameter is required.', example='b883e6dcf14041fba390c1f795493c6b'),
  bizParam?: map[string]string(name='bizParam'),
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  modelTypeList?: [ string ](name='modelTypeList', description='This parameter is required.'),
  productKey?: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='678699541713794'),
  text?: string(name='text', description='This parameter is required.'),
}

model HalfLLMAppCallShrinkRequest {
  appId?: string(name='appId', description='This parameter is required.', example='b883e6dcf14041fba390c1f795493c6b'),
  bizParamShrink?: string(name='bizParam'),
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  modelTypeListShrink?: string(name='modelTypeList', description='This parameter is required.'),
  productKey?: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='678699541713794'),
  text?: string(name='text', description='This parameter is required.'),
}

model HalfLLMAppCallResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    message?: string(name='message', example='null'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='finishReason', example='null'),
          message?: {
            content?: string(name='content'),
            role?: string(name='role', example='assistant'),
          }(name='message'),
        }
      ](name='choices'),
    }(name='output'),
    requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
    rt?: {
      firstRt?: long(name='firstRt', example='443'),
      totalRt?: long(name='totalRt', example='4432'),
    }(name='rt'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
    usages?: {
      inputTokens?: long(name='inputTokens', example='356'),
      outputTokens?: long(name='outputTokens', example='698'),
    }(name='usages'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='D7FEF19A-8B65-5914-9FA3-F26E820294B4'),
  success?: string(name='success', example='true'),
}

model HalfLLMAppCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMAppCallResponseBody(name='body'),
}

/**
 * @summary 半托管大模型应用请求
 *
 * @param tmpReq HalfLLMAppCallRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return HalfLLMAppCallResponse
 */
async function halfLLMAppCallWithOptions(tmpReq: HalfLLMAppCallRequest, headers: map[string]string, runtime: $RuntimeOptions): HalfLLMAppCallResponse {
  tmpReq.validate();
  var request = new HalfLLMAppCallShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.bizParam)) {
    request.bizParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizParam, 'bizParam', 'json');
  }
  if (!$isNull(tmpReq.modelTypeList)) {
    request.modelTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.modelTypeList, 'modelTypeList', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['appId'] = request.appId;
  }
  if (!$isNull(request.bizParamShrink)) {
    body['bizParam'] = request.bizParamShrink;
  }
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.modelTypeListShrink)) {
    body['modelTypeList'] = request.modelTypeListShrink;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.text)) {
    body['text'] = request.text;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'HalfLLMAppCall',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/half/llm/app/call`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 半托管大模型应用请求
 *
 * @param request HalfLLMAppCallRequest
 * @return HalfLLMAppCallResponse
 */
async function halfLLMAppCall(request: HalfLLMAppCallRequest): HalfLLMAppCallResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return halfLLMAppCallWithOptions(request, headers, runtime);
}

model HalfLLMChatRequest {
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  enableSearch?: boolean(name='enableSearch', example='true'),
  inputText?: string(name='inputText', description='This parameter is required.'),
  model?: string(name='model', example='qwen-plus'),
  productKey?: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM'),
  prompt?: string(name='prompt'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
  stream?: boolean(name='stream', example='true'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='520539530998273'),
}

model HalfLLMChatResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    message?: string(name='message', example='null'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='finishReason', example='null'),
          message?: {
            content?: string(name='content'),
            role?: string(name='role', example='assistant'),
          }(name='message'),
        }
      ](name='choices'),
    }(name='output'),
    requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='5DD2E24F-93A2-551D-B192-8DBBEEFE9129'),
  success?: string(name='success', example='true'),
}

model HalfLLMChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMChatResponseBody(name='body'),
}

/**
 * @summary 半托管大模型流式文本对话
 *
 * @param request HalfLLMChatRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return HalfLLMChatResponse
 */
async function halfLLMChatWithOptions(request: HalfLLMChatRequest, headers: map[string]string, runtime: $RuntimeOptions): HalfLLMChatResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.enableSearch)) {
    body['enableSearch'] = request.enableSearch;
  }
  if (!$isNull(request.inputText)) {
    body['inputText'] = request.inputText;
  }
  if (!$isNull(request.model)) {
    body['model'] = request.model;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.prompt)) {
    body['prompt'] = request.prompt;
  }
  if (!$isNull(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }
  if (!$isNull(request.stream)) {
    body['stream'] = request.stream;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'HalfLLMChat',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/half/llm/chat`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 半托管大模型流式文本对话
 *
 * @param request HalfLLMChatRequest
 * @return HalfLLMChatResponse
 */
async function halfLLMChat(request: HalfLLMChatRequest): HalfLLMChatResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return halfLLMChatWithOptions(request, headers, runtime);
}

model HalfLLMImageChatRequest {
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  enableSearch?: boolean(name='enableSearch', example='false'),
  imageUrl?: string(name='imageUrl', description='This parameter is required.', example='https://xxx/xx.jpg'),
  inputText?: string(name='inputText', description='This parameter is required.'),
  model?: string(name='model', example='qwen-vl-max'),
  productKey?: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM'),
  prompt?: string(name='prompt'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='520539530998273'),
}

model HalfLLMImageChatResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    message?: string(name='message', example='null'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='finishReason', example='null'),
          message?: {
            content?: string(name='content'),
            role?: string(name='role', example='assistant'),
          }(name='message'),
        }
      ](name='choices'),
    }(name='output'),
    requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
    rt?: {
      firstRt?: long(name='firstRt', example='1563'),
      totalRt?: long(name='totalRt', example='8235'),
    }(name='rt'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
    usages?: {
      inputTokens?: long(name='inputTokens', example='136'),
      outputTokens?: long(name='outputTokens', example='589'),
    }(name='usages'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='84656A01-32F0-5D12-8C72-E3AFAA0C8A29'),
  success?: string(name='success', example='true'),
}

model HalfLLMImageChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMImageChatResponseBody(name='body'),
}

/**
 * @summary 半托管大模型文本合成语音
 *
 * @param request HalfLLMImageChatRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return HalfLLMImageChatResponse
 */
async function halfLLMImageChatWithOptions(request: HalfLLMImageChatRequest, headers: map[string]string, runtime: $RuntimeOptions): HalfLLMImageChatResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.enableSearch)) {
    body['enableSearch'] = request.enableSearch;
  }
  if (!$isNull(request.imageUrl)) {
    body['imageUrl'] = request.imageUrl;
  }
  if (!$isNull(request.inputText)) {
    body['inputText'] = request.inputText;
  }
  if (!$isNull(request.model)) {
    body['model'] = request.model;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.prompt)) {
    body['prompt'] = request.prompt;
  }
  if (!$isNull(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'HalfLLMImageChat',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/half/llm/image/chat`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 半托管大模型文本合成语音
 *
 * @param request HalfLLMImageChatRequest
 * @return HalfLLMImageChatResponse
 */
async function halfLLMImageChat(request: HalfLLMImageChatRequest): HalfLLMImageChatResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return halfLLMImageChatWithOptions(request, headers, runtime);
}

model HalfLLMImageOcrRequest {
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  imageUrl?: string(name='imageUrl', description='This parameter is required.', example='https://xxx/xx.jpg'),
  model?: string(name='model', example='qwen-vl-ocr'),
  productKey?: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='520539530998273'),
}

model HalfLLMImageOcrResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    message?: string(name='message', example='null'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='finishReason', example='null'),
          message?: {
            content?: string(name='content', example='xxx'),
            role?: string(name='role', example='assistant'),
          }(name='message'),
        }
      ](name='choices'),
    }(name='output'),
    requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
    rt?: {
      firstRt?: long(name='firstRt', example='635'),
      totalRt?: long(name='totalRt', example='8571'),
    }(name='rt'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
    usages?: {
      inputTokens?: long(name='inputTokens', example='771'),
      outputTokens?: long(name='outputTokens', example='563'),
    }(name='usages'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
  success?: string(name='success', example='true'),
}

model HalfLLMImageOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMImageOcrResponseBody(name='body'),
}

/**
 * @summary 半托管大模型图片识别
 *
 * @param request HalfLLMImageOcrRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return HalfLLMImageOcrResponse
 */
async function halfLLMImageOcrWithOptions(request: HalfLLMImageOcrRequest, headers: map[string]string, runtime: $RuntimeOptions): HalfLLMImageOcrResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.imageUrl)) {
    body['imageUrl'] = request.imageUrl;
  }
  if (!$isNull(request.model)) {
    body['model'] = request.model;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'HalfLLMImageOcr',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/half/llm/image/ocr`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 半托管大模型图片识别
 *
 * @param request HalfLLMImageOcrRequest
 * @return HalfLLMImageOcrResponse
 */
async function halfLLMImageOcr(request: HalfLLMImageOcrRequest): HalfLLMImageOcrResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return halfLLMImageOcrWithOptions(request, headers, runtime);
}

model HalfLLMTTSChatRequest {
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  enableSearch?: boolean(name='enableSearch', example='false'),
  format?: string(name='format', example='.pcm。'),
  model?: string(name='model', example='qwen-max'),
  pitchRate?: int32(name='pitchRate', example='0'),
  productKey?: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM'),
  prompt?: string(name='prompt'),
  sampleRate?: int32(name='sampleRate', example='16000'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
  speechRate?: int32(name='speechRate', example='0'),
  stream?: boolean(name='stream', example='true'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='661708759700322'),
  text?: string(name='text', description='This parameter is required.'),
  url?: string(name='url', example='wss://nls-gateway-cn-beijing.aliyuncs.com/ws/v1'),
  voice?: string(name='voice', example='siyue'),
  volume?: int32(name='volume', example='50'),
}

model HalfLLMTTSChatResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    data?: bytes(name='data', example='xxxx'),
    message?: string(name='message', example='null'),
    requestId?: string(name='requestId', example='sDwqZnFGwsv9x7yjVwQVKTV4'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
    text?: string(name='text'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='A9CE316B-B616-5A97-8FFC-5D0D664CA7AF'),
  success?: string(name='success', example='true'),
}

model HalfLLMTTSChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMTTSChatResponseBody(name='body'),
}

/**
 * @summary 半托管大模型文本合成语音
 *
 * @param request HalfLLMTTSChatRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return HalfLLMTTSChatResponse
 */
async function halfLLMTTSChatWithOptions(request: HalfLLMTTSChatRequest, headers: map[string]string, runtime: $RuntimeOptions): HalfLLMTTSChatResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.enableSearch)) {
    body['enableSearch'] = request.enableSearch;
  }
  if (!$isNull(request.format)) {
    body['format'] = request.format;
  }
  if (!$isNull(request.model)) {
    body['model'] = request.model;
  }
  if (!$isNull(request.pitchRate)) {
    body['pitchRate'] = request.pitchRate;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.prompt)) {
    body['prompt'] = request.prompt;
  }
  if (!$isNull(request.sampleRate)) {
    body['sampleRate'] = request.sampleRate;
  }
  if (!$isNull(request.sessionId)) {
    body['sessionId'] = request.sessionId;
  }
  if (!$isNull(request.speechRate)) {
    body['speechRate'] = request.speechRate;
  }
  if (!$isNull(request.stream)) {
    body['stream'] = request.stream;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.text)) {
    body['text'] = request.text;
  }
  if (!$isNull(request.url)) {
    body['url'] = request.url;
  }
  if (!$isNull(request.voice)) {
    body['voice'] = request.voice;
  }
  if (!$isNull(request.volume)) {
    body['volume'] = request.volume;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'HalfLLMTTSChat',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/half/llm/tts/chat`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 半托管大模型文本合成语音
 *
 * @param request HalfLLMTTSChatRequest
 * @return HalfLLMTTSChatResponse
 */
async function halfLLMTTSChat(request: HalfLLMTTSChatRequest): HalfLLMTTSChatResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return halfLLMTTSChatWithOptions(request, headers, runtime);
}

model QueryDevicePageRequest {
  deviceName?: string(name='deviceName', example='5b504f84b69b9a73d3a21a2cff05e190'),
  disableStatus?: int32(name='disableStatus', example='1'),
  pageIndex?: int32(name='pageIndex', description='This parameter is required.', example='1'),
  pageSize?: int32(name='pageSize', description='This parameter is required.', example='20'),
  productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
  productName?: string(name='productName'),
  status?: int32(name='status', example='1'),
}

model QueryDevicePageResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    data?: [ 
      {
        activeTime?: string(name='activeTime', example='2025-03-15 09:44:32'),
        aliyunUid?: string(name='aliyunUid', example='1539704706413278'),
        batchNo?: string(name='batchNo', example='202504010001'),
        deviceName?: string(name='deviceName', example='5b504f84b69b9a73d3a21a2cff05e190'),
        disableStatus?: int32(name='disableStatus', example='1'),
        gmtCreate?: string(name='gmtCreate', example='2025-04-27 09:10:31'),
        gmtModify?: string(name='gmtModify', example='2025-04-27 09:10:31'),
        id?: long(name='id', description='ID。', example='201'),
        productKey?: string(name='productKey', example='nnjNQQv3ZjyYE7H4'),
        productName?: string(name='productName'),
        remark?: string(name='remark'),
        status?: int32(name='status', example='1'),
        tenantId?: string(name='tenantId', example='493303079000577'),
      }
    ](name='data'),
    pageIndex?: int32(name='pageIndex', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: long(name='total', example='100'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='60FD351B-10C4-5C2C-ADA2-524FC39FC174'),
  success?: string(name='success', example='true'),
}

model QueryDevicePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDevicePageResponseBody(name='body'),
}

/**
 * @summary 设备列表分页查询
 *
 * @param request QueryDevicePageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDevicePageResponse
 */
async function queryDevicePageWithOptions(request: QueryDevicePageRequest, headers: map[string]string, runtime: $RuntimeOptions): QueryDevicePageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.disableStatus)) {
    body['disableStatus'] = request.disableStatus;
  }
  if (!$isNull(request.pageIndex)) {
    body['pageIndex'] = request.pageIndex;
  }
  if (!$isNull(request.pageSize)) {
    body['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.productName)) {
    body['productName'] = request.productName;
  }
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDevicePage',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/page`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设备列表分页查询
 *
 * @param request QueryDevicePageRequest
 * @return QueryDevicePageResponse
 */
async function queryDevicePage(request: QueryDevicePageRequest): QueryDevicePageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return queryDevicePageWithOptions(request, headers, runtime);
}

model QueryProductPageRequest {
  modelType?: bytes(name='modelType', example='1'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  productName?: string(name='productName'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='679583000646594'),
  userId?: string(name='userId', description='This parameter is required.', example='359687'),
}

model QueryProductPageResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    data?: [ 
      {
        activeLicenseCount?: long(name='activeLicenseCount', example='100'),
        apiKey?: string(name='apiKey', example='zcrzbqrF29pkgXukLaQ+6jGsohQiPhdOuIrUSVSvNO5oDntQdM76mNXj+AJ2i7eP'),
        createTime?: string(name='createTime', example='2024-03-05 06:24:27'),
        description?: string(name='description'),
        licenseCount?: long(name='licenseCount', example='1000'),
        maxQps?: int32(name='maxQps', example='100'),
        productKey?: string(name='productKey', example='nnjNQQv3ZjyYE7H4'),
        productName?: string(name='productName'),
        productSecret?: string(name='productSecret', example='3dc95cac8272b86a5d10de7768d8fc41'),
        tenantId?: string(name='tenantId', example='383756559581697'),
        tokenCount?: long(name='tokenCount', example='100000'),
        updateTime?: string(name='updateTime', example='2024-03-05 06:24:27'),
        usedToken?: long(name='usedToken', example='10000'),
        userId?: string(name='userId', example='359687'),
      }
    ](name='data'),
    pageIndex?: int32(name='pageIndex', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: long(name='total', example='100'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='EA4643D5-5FA8-55BA-A959-F7D3E38E0AE0'),
  success?: string(name='success', example='true'),
}

model QueryProductPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryProductPageResponseBody(name='body'),
}

/**
 * @summary 分页查询产品
 *
 * @param request QueryProductPageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryProductPageResponse
 */
async function queryProductPageWithOptions(request: QueryProductPageRequest, headers: map[string]string, runtime: $RuntimeOptions): QueryProductPageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.modelType)) {
    body['modelType'] = request.modelType;
  }
  if (!$isNull(request.pageIndex)) {
    body['pageIndex'] = request.pageIndex;
  }
  if (!$isNull(request.pageSize)) {
    body['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.productName)) {
    body['productName'] = request.productName;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.userId)) {
    body['userId'] = request.userId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryProductPage',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/product/page`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询产品
 *
 * @param request QueryProductPageRequest
 * @return QueryProductPageResponse
 */
async function queryProductPage(request: QueryProductPageRequest): QueryProductPageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return queryProductPageWithOptions(request, headers, runtime);
}

model QueryProductQuotaPageRequest {
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
  productName?: string(name='productName'),
  purchaseTimeEnd?: string(name='purchaseTimeEnd', example='2025-04-01 00:00:00'),
  purchaseTimeStart?: string(name='purchaseTimeStart', example='2025-03-01 00:00:00'),
  purchaseType?: int32(name='purchaseType', example='1'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='628103740287873'),
  userId?: string(name='userId', description='This parameter is required.', example='123456'),
}

model QueryProductQuotaPageResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    data?: [ 
      {
        createTime?: string(name='createTime', example='2025-03-23 02:02:03'),
        duration?: int32(name='duration', example='12'),
        durationType?: int32(name='durationType', example='2'),
        expireTime?: string(name='expireTime', example='2025-05-31 00:00:00'),
        id?: long(name='id', description='ID。', example='67241348'),
        ifUnsubscribe?: int32(name='ifUnsubscribe', example='0'),
        ifUsed?: int32(name='ifUsed', example='1'),
        licenseCount?: long(name='licenseCount', example='100'),
        maxQps?: int32(name='maxQps', example='100'),
        orderId?: string(name='orderId', example='g6RD6uvFYNZv44ky'),
        productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
        productName?: string(name='productName'),
        purchaseModel?: int32(name='purchaseModel', example='1'),
        purchaseType?: int32(name='purchaseType', example='1'),
        settlementFee?: double(name='settlementFee', example='100.0'),
        tenantId?: string(name='tenantId', example='217037888563265'),
        tokenNumber?: long(name='tokenNumber', example='10000'),
        unitPrice?: double(name='unitPrice', example='1.0'),
        updateTime?: string(name='updateTime', example='2025-03-23 02:02:03'),
        userId?: string(name='userId', example='123456'),
      }
    ](name='data'),
    pageIndex?: int32(name='pageIndex', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: long(name='total', example='151'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='32B81CD6-D583-5056-A6EB-3C1107AB26C3'),
  success?: string(name='success', example='true'),
}

model QueryProductQuotaPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryProductQuotaPageResponseBody(name='body'),
}

/**
 * @summary 分页查询产品额度
 *
 * @param request QueryProductQuotaPageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryProductQuotaPageResponse
 */
async function queryProductQuotaPageWithOptions(request: QueryProductQuotaPageRequest, headers: map[string]string, runtime: $RuntimeOptions): QueryProductQuotaPageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.pageIndex)) {
    body['pageIndex'] = request.pageIndex;
  }
  if (!$isNull(request.pageSize)) {
    body['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.productName)) {
    body['productName'] = request.productName;
  }
  if (!$isNull(request.purchaseTimeEnd)) {
    body['purchaseTimeEnd'] = request.purchaseTimeEnd;
  }
  if (!$isNull(request.purchaseTimeStart)) {
    body['purchaseTimeStart'] = request.purchaseTimeStart;
  }
  if (!$isNull(request.purchaseType)) {
    body['purchaseType'] = request.purchaseType;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.userId)) {
    body['userId'] = request.userId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryProductQuotaPage',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/product/quotaPage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询产品额度
 *
 * @param request QueryProductQuotaPageRequest
 * @return QueryProductQuotaPageResponse
 */
async function queryProductQuotaPage(request: QueryProductQuotaPageRequest): QueryProductQuotaPageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return queryProductQuotaPageWithOptions(request, headers, runtime);
}

model QueryTokenUsageRequest {
  endDate?: string(name='endDate', description='This parameter is required.', example='2025-04-02 00:00:00'),
  productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
  startDate?: string(name='startDate', description='This parameter is required.', example='2025-04-01 00:00:00'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='520539530998273'),
}

model QueryTokenUsageResponseBody = {
  code?: string(name='code', example='success'),
  data?: [ 
    {
      apiKey?: string(name='apiKey', example='oqYVtK7DnaVj4JpbFtghJV2CZy7HwhOI0do3mf8twx9TGCMNNXYBptJ0+ULqO3xD'),
      inputToken?: long(name='inputToken', example='1000'),
      outputToken?: long(name='outputToken', example='1000'),
      productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
      productName?: string(name='productName'),
      tenantId?: string(name='tenantId', example='520539530998273'),
      usageTime?: string(name='usageTime', example='2025-04-01'),
    }
  ](name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='B08AAA14-AD93-51F6-82AE-82AFAE9375B6'),
  success?: string(name='success', example='true'),
}

model QueryTokenUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTokenUsageResponseBody(name='body'),
}

/**
 * @summary 查询token使用量
 *
 * @param request QueryTokenUsageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryTokenUsageResponse
 */
async function queryTokenUsageWithOptions(request: QueryTokenUsageRequest, headers: map[string]string, runtime: $RuntimeOptions): QueryTokenUsageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.endDate)) {
    body['endDate'] = request.endDate;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.startDate)) {
    body['startDate'] = request.startDate;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryTokenUsage',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/token/usage/query`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询token使用量
 *
 * @param request QueryTokenUsageRequest
 * @return QueryTokenUsageResponse
 */
async function queryTokenUsage(request: QueryTokenUsageRequest): QueryTokenUsageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return queryTokenUsageWithOptions(request, headers, runtime);
}

model RevokeChannelSignResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    channelName?: string(name='channelName'),
    contact?: string(name='contact'),
    createTime?: string(name='createTime', example='2025-05-01 10:43:21'),
    description?: string(name='description'),
    modifyTime?: string(name='modifyTime', example='2025-05-01 10:43:21'),
    phone?: string(name='phone', example='13555555555'),
    remark?: string(name='remark'),
    status?: string(name='status', example='revoke'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='2C17015D-F916-5C2B-8C50-424DA829685E'),
  success?: string(name='success', example='true'),
}

model RevokeChannelSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeChannelSignResponseBody(name='body'),
}

/**
 * @summary 撤销渠道签约申请
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeChannelSignResponse
 */
async function revokeChannelSignWithOptions(headers: map[string]string, runtime: $RuntimeOptions): RevokeChannelSignResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'RevokeChannelSign',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/channel/revoke`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 撤销渠道签约申请
 *
 * @return RevokeChannelSignResponse
 */
async function revokeChannelSign(): RevokeChannelSignResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return revokeChannelSignWithOptions(headers, runtime);
}

model UpdateDeviceStatusRequest {
  deviceName?: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190'),
  productKey?: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM'),
  remark?: string(name='remark'),
  status?: int32(name='status', description='This parameter is required.', example='2'),
}

model UpdateDeviceStatusResponseBody = {
  code?: string(name='code', example='success'),
  data?: boolean(name='data', example='true'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='037E1251-1B9E-5DF5-B787-C3971A79DF89'),
  success?: string(name='success', example='true'),
}

model UpdateDeviceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDeviceStatusResponseBody(name='body'),
}

/**
 * @summary 修改设备状态
 *
 * @param request UpdateDeviceStatusRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDeviceStatusResponse
 */
async function updateDeviceStatusWithOptions(request: UpdateDeviceStatusRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateDeviceStatusResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.deviceName)) {
    body['deviceName'] = request.deviceName;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.remark)) {
    body['remark'] = request.remark;
  }
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDeviceStatus',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/device/v1/update/status`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改设备状态
 *
 * @param request UpdateDeviceStatusRequest
 * @return UpdateDeviceStatusResponse
 */
async function updateDeviceStatus(request: UpdateDeviceStatusRequest): UpdateDeviceStatusResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDeviceStatusWithOptions(request, headers, runtime);
}

model UpdateImageQuotaRequest {
  duration?: int32(name='duration', example='1'),
  durationType?: int32(name='durationType', example='2'),
  imageCount?: int32(name='imageCount', example='100'),
  licenseCount?: long(name='licenseCount', example='10'),
  packageType?: int32(name='packageType', example='2'),
  productKey?: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM'),
  purchaseType?: int32(name='purchaseType', description='This parameter is required.', example='1'),
  recordId?: int32(name='recordId', example='355'),
  settlementAmount?: double(name='settlementAmount', description='This parameter is required.', example='10.0'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='520539530998273'),
  unitPrice?: double(name='unitPrice', description='This parameter is required.', example='1.0'),
  userId?: string(name='userId', description='This parameter is required.', example='123456'),
}

model UpdateImageQuotaResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    orderId?: string(name='orderId', example='FlUHDd8ol1yRmA92'),
    productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
    productName?: string(name='productName'),
    tenantId?: string(name='tenantId', example='520539530998273'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='28BD530A-C469-5CF9-9F4E-DA0AF0A1AC73'),
  success?: string(name='success', example='true'),
}

model UpdateImageQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateImageQuotaResponseBody(name='body'),
}

/**
 * @summary 修改图片模型额度
 *
 * @param request UpdateImageQuotaRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateImageQuotaResponse
 */
async function updateImageQuotaWithOptions(request: UpdateImageQuotaRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateImageQuotaResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.duration)) {
    body['duration'] = request.duration;
  }
  if (!$isNull(request.durationType)) {
    body['durationType'] = request.durationType;
  }
  if (!$isNull(request.imageCount)) {
    body['imageCount'] = request.imageCount;
  }
  if (!$isNull(request.licenseCount)) {
    body['licenseCount'] = request.licenseCount;
  }
  if (!$isNull(request.packageType)) {
    body['packageType'] = request.packageType;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.purchaseType)) {
    body['purchaseType'] = request.purchaseType;
  }
  if (!$isNull(request.recordId)) {
    body['recordId'] = request.recordId;
  }
  if (!$isNull(request.settlementAmount)) {
    body['settlementAmount'] = request.settlementAmount;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.unitPrice)) {
    body['unitPrice'] = request.unitPrice;
  }
  if (!$isNull(request.userId)) {
    body['userId'] = request.userId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateImageQuota',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/quota/update/image`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改图片模型额度
 *
 * @param request UpdateImageQuotaRequest
 * @return UpdateImageQuotaResponse
 */
async function updateImageQuota(request: UpdateImageQuotaRequest): UpdateImageQuotaResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateImageQuotaWithOptions(request, headers, runtime);
}

model UpdateQuotaRequest {
  duration?: int32(name='duration', example='1'),
  durationType?: int32(name='durationType', example='2'),
  licenseCount?: long(name='licenseCount', example='10'),
  maxQps?: int32(name='maxQps', example='100'),
  packageType?: int32(name='packageType', example='2'),
  productKey?: string(name='productKey', description='This parameter is required.', example='nnjNQQv3ZjyYE7H4'),
  purchaseType?: int32(name='purchaseType', description='This parameter is required.', example='1'),
  recordId?: int32(name='recordId', example='421'),
  settlementAmount?: double(name='settlementAmount', description='This parameter is required.', example='10.0'),
  tenantId?: string(name='tenantId', description='This parameter is required.', example='520539530998273'),
  tokenNumber?: long(name='tokenNumber', example='10000'),
  unitPrice?: double(name='unitPrice', description='This parameter is required.', example='1.0'),
  userId?: string(name='userId', description='This parameter is required.', example='123456'),
}

model UpdateQuotaResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    orderId?: string(name='orderId', example='g6RD6uvFYNZv44ky'),
    productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
    productName?: string(name='productName'),
    tenantId?: string(name='tenantId', example='520539530998273'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='89946BAA-E4E1-5114-8A5E-A542FEDC9B16'),
  success?: string(name='success', example='true'),
}

model UpdateQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQuotaResponseBody(name='body'),
}

/**
 * @summary 修改额度
 *
 * @param request UpdateQuotaRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateQuotaResponse
 */
async function updateQuotaWithOptions(request: UpdateQuotaRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateQuotaResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.duration)) {
    body['duration'] = request.duration;
  }
  if (!$isNull(request.durationType)) {
    body['durationType'] = request.durationType;
  }
  if (!$isNull(request.licenseCount)) {
    body['licenseCount'] = request.licenseCount;
  }
  if (!$isNull(request.maxQps)) {
    body['maxQps'] = request.maxQps;
  }
  if (!$isNull(request.packageType)) {
    body['packageType'] = request.packageType;
  }
  if (!$isNull(request.productKey)) {
    body['productKey'] = request.productKey;
  }
  if (!$isNull(request.purchaseType)) {
    body['purchaseType'] = request.purchaseType;
  }
  if (!$isNull(request.recordId)) {
    body['recordId'] = request.recordId;
  }
  if (!$isNull(request.settlementAmount)) {
    body['settlementAmount'] = request.settlementAmount;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.tokenNumber)) {
    body['tokenNumber'] = request.tokenNumber;
  }
  if (!$isNull(request.unitPrice)) {
    body['unitPrice'] = request.unitPrice;
  }
  if (!$isNull(request.userId)) {
    body['userId'] = request.userId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateQuota',
    version = '2024-08-16',
    protocol = 'HTTPS',
    pathname = `/open/api/v1/quota/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改额度
 *
 * @param request UpdateQuotaRequest
 * @return UpdateQuotaResponse
 */
async function updateQuota(request: UpdateQuotaRequest): UpdateQuotaResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateQuotaWithOptions(request, headers, runtime);
}

