/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BailianModelOnChip';
  @version = '2024-08-16';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DeviceRegisterRequest {
  appId: string(name='appId', description='This parameter is required.', position='Body'),
  nonce: string(name='nonce', description='This parameter is required.', example='2a64edd96296880f55aa61987b', position='Body'),
  requestTime: string(name='requestTime', description='This parameter is required.', position='Body'),
  signature: string(name='signature', description='This parameter is required.', position='Body'),
}

model DeviceRegisterResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    appId?: string(name='appId'),
    deviceName?: string(name='deviceName', example='991fa52b7935aaa33536e05d4f4b5003'),
    nonce?: string(name='nonce', example='e2e928e8244f45ab30ec6ba9f9'),
    responseTime?: string(name='responseTime', example='1748312544852'),
    signature?: string(name='signature', example='s8wPO/w79jP7sz6OaHkixAje2GmgzmZiCuCZZ+J8w77ICTyqD30lL6rUhnXwwx4MyGF62DRPFnpXtJ6c5mlmt6QdML3FkjGn+i/wR5T6QMkVDW6YRPWsx3jkIWRQ2sDnmVNBtixo2s9w3RJrnddRzVCaR/WeLOfiVLWcrLcJditzO/1YXBZ9vuRKQ4iperfhZvw372N/m8/1qtjJl+FUe2+wxK6RMxr03K7R'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='52548360-B3AA-55EA-893F-48C16470F64A'),
  success?: boolean(name='success', example='True'),
}

model DeviceRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeviceRegisterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeviceRegister  DeviceRegisterRequest
  * @return DeviceRegisterResponse
 */
async function deviceRegister(request: DeviceRegisterRequest): DeviceRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeviceRegister', 'POST', '/open/api/device/v1/register', 'json', true, 'form', request);
}

model GetTokenRequest {
  appId: string(name='appId', description='This parameter is required.', position='Body'),
  deviceName: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  nonce: string(name='nonce', description='This parameter is required.', example='2a64edd96296880f55aa61987b', position='Body'),
  requestTime: string(name='requestTime', description='This parameter is required.', example='1748413148546', position='Body'),
  signature: string(name='signature', description='This parameter is required.', example='5/Smm8gnDSgZY2Blftq9eGYpVnpYCztoLJaJfhlH7id0lNlQxydRLtjUkGPr1qdbQq+oUn6Y1h0KJUdk0rf4am3MzdNr/Uhc47c8bbXnV8SlIC0agGo5skEQZNObzUD+sFxt8uN35/FYf7YRC8R61xY7+NPN2NLJrA/DPhewtVRRgAbb8RjergTcIG6oN1XTzLyC+76Az/3o2dPCxTfMXG3AFQc=', position='Body'),
  tokenKey?: string(name='tokenKey', example='sk-4asv136677d2411b876e536bc8xxxxx', position='Body'),
  tokenType: string(name='tokenType', description='This parameter is required.', example='oss', position='Body'),
}

model GetTokenResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    appId?: string(name='appId'),
    deviceName?: string(name='deviceName', example='5b504f84b69b9a73d3a21a2cff05e190'),
    nonce?: string(name='nonce', example='b79d692c315d6bfb28312edf15'),
    requestIp?: string(name='requestIp', example='127.0.0.1'),
    responseTime?: string(name='responseTime', example='1748413248360'),
    signature?: string(name='signature', example='N1faAjFhhaRNFaZNC8woRpQyAzEfBaIoWQEgDfds/Fwm7nIyEDLlSK3Ttx2OFebiHZ/MpHRr/3MnI/jpVWB/xNYIQxm6sccHJENHNAz6gaW+itU5wUrh+46EpqySABV8kc2pQ0HmYlbePfjjOK6lCfQjEGpekSAgQ6tDhG1lXWfKdtggq58Ut5bImMxMhk4R/PFUWrJe4CDuFu072C+foI0JlUV9TnGtVQ58oz8VRndrGXyauS/xqg8iGSZn6FyprUf5p+0ow20E'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='B08AAA14-AD93-51F6-82AE-82AFAE9375B6'),
  success?: string(name='success', example='true'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetToken  GetTokenRequest
  * @return GetTokenResponse
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetToken', 'POST', '/open/api/auth/v1/token/get', 'json', true, 'form', request);
}

