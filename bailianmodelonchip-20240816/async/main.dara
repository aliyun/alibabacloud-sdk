/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BailianModelOnChip';
  @version = '2024-08-16';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateChannelSignRequest {
  channelName: string(name='channelName', description='This parameter is required.', position='Body'),
  contact?: string(name='contact', position='Body'),
  description?: string(name='description', position='Body'),
  phone?: string(name='phone', example='13555555555', position='Body'),
  remark?: string(name='remark', position='Body'),
}

model CreateChannelSignResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    channelName?: string(name='channelName'),
    contact?: string(name='contact'),
    createTime?: string(name='createTime', example='2024-11-25 08:00:00'),
    description?: string(name='description'),
    modifyTime?: string(name='modifyTime', example='2024-11-25 08:00:00'),
    phone?: string(name='phone', example='13555555555'),
    remark?: string(name='remark'),
    status?: string(name='status', example='review'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='65857D96-A86B-5BBB-8392-0793E95DEB81'),
  success?: string(name='success', example='True'),
}

model CreateChannelSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChannelSignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateChannelSign  CreateChannelSignRequest
  * @return CreateChannelSignResponse
 */
async function createChannelSign(request: CreateChannelSignRequest): CreateChannelSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateChannelSign', 'POST', '/open/api/v1/channel/create', 'json', true, 'form', request);
}

model CreateProductRequest {
  description?: string(name='description', position='Body'),
  euid: string(name='euid', description='This parameter is required.', example='1221031972475999', position='Body'),
  productName: string(name='productName', description='This parameter is required.', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='503041545', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='123456', position='Body'),
}

model CreateProductResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    apiKey?: string(name='apiKey', example='v7+7WMzYjHhyhb0c6IDL3e1rwCcphld19XzLYcwredVkHOht9et5GhPV45AqCzX7'),
    description?: string(name='description'),
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    productName?: string(name='productName'),
    productSecret?: string(name='productSecret', example='10bcac8989aed3f1047b71e6c06ef3ab'),
    tenantId?: string(name='tenantId', example='503041545'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='0abb7ee317248118358433637e749a'),
  success?: string(name='success', example='True'),
}

model CreateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProduct  CreateProductRequest
  * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProduct', 'POST', '/open/api/v1/product/create', 'json', true, 'form', request);
}

model DeleteProductRequest {
  productKey: string(name='productKey', description='This parameter is required.', example='el3SzmCU2p0x4RBc', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='235454102432001', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='123456', position='Body'),
}

model DeleteProductResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    productName?: string(name='productName', example='btripOpen'),
    tenantId?: string(name='tenantId', example='355806813982786'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='AF54F772-60FF-56FD-A3EA-11620EF1229A'),
  success?: string(name='success', example='True'),
}

model DeleteProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProduct  DeleteProductRequest
  * @return DeleteProductResponse
 */
async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProduct', 'POST', '/open/api/v1/product/delete', 'json', true, 'form', request);
}

model DeviceRegisterRequest {
  nonce: string(name='nonce', description='This parameter is required.', example='2a64edd96296880f55aa61987b', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='el3SzmCU2p0x4RBc', position='Query'),
  requestTime: string(name='requestTime', description='This parameter is required.', example='1748312544852', position='Query'),
  signature: string(name='signature', description='This parameter is required.', example='3spKwUgUpAGsXbbrHKnpVJPlI9wamoyhh96uqJuSyCKyJ7oscLAHRcz15dSzLG5L+ywFgYXSQNqdRtsn/Ri0j7pD0IuoKt9R7EnNo/U6viPvWD3Ldp3ehDDtOFtSrpUg6LTedvGtUWYU4x/zSD2jgCXijEdZCCMGCypcheMHRXfInYWF1xFtnCEXJfxtrBrnCk1p/pW3JSmdHJzmInnUEO3dWbNe3A==', position='Query'),
}

model DeviceRegisterResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    deviceName?: string(name='deviceName', example='991fa52b7935aaa33536e05d4f4b5003'),
    nonce?: string(name='nonce', example='e2e928e8244f45ab30ec6ba9f9'),
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    responseTime?: string(name='responseTime', example='1748312544852'),
    signature?: string(name='signature', example='s8wPO/w79jP7sz6OaHkixAje2GmgzmZiCuCZZ+J8w77ICTyqD30lL6rUhnXwwx4MyGF62DRPFnpXtJ6c5mlmt6QdML3FkjGn+i/wR5T6QMkVDW6YRPWsx3jkIWRQ2sDnmVNBtixo2s9w3RJrnddRzVCaR/WeLOfiVLWcrLcJditzO/1YXBZ9vuRKQ4iperfhZvw372N/m8/1qtjJl+FUe2+wxK6RMxr03K7R'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='52548360-B3AA-55EA-893F-48C16470F64A'),
  success?: boolean(name='success', example='True'),
}

model DeviceRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeviceRegisterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeviceRegister  DeviceRegisterRequest
  * @return DeviceRegisterResponse
 */
async function deviceRegister(request: DeviceRegisterRequest): DeviceRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeviceRegister', 'POST', '/open/api/device/v1/register', 'json', true, 'form', request);
}

model GetChannelSignRequest {
}

model GetChannelSignResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    channelName?: string(name='channelName'),
    contact?: string(name='contact'),
    createTime?: string(name='createTime', example='2025-05-24 00:00:00'),
    description?: string(name='description'),
    modifyTime?: string(name='modifyTime', example='2025-05-24 00:00:00'),
    phone?: string(name='phone', example='13555555555'),
    remark?: string(name='remark'),
    status?: string(name='status', example='review'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='D9272777-8401-5744-B059-BA21CF4BE80F'),
  success?: string(name='success', example='true'),
}

model GetChannelSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChannelSignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetChannelSign  GetChannelSignRequest
  * @return GetChannelSignResponse
 */
async function getChannelSign(request: GetChannelSignRequest): GetChannelSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetChannelSign', 'POST', '/open/api/v1/channel/get', 'json', false, 'json', request);
}

model GetQuotaInfoRequest {
  recordId: long(name='recordId', description='This parameter is required.', example='55', position='Body'),
}

model GetQuotaInfoResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    activeLicenseCount?: long(name='activeLicenseCount', example='20'),
    duration?: int32(name='duration', example='12'),
    durationType?: int32(name='durationType', example='2'),
    licenseCount?: long(name='licenseCount', example='100'),
    maxQps?: int32(name='maxQps', example='100'),
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    purchaseModel?: int32(name='purchaseModel', example='1'),
    tenantId?: string(name='tenantId', example='51505222'),
    tokenNumber?: long(name='tokenNumber', example='100000'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='7B0FC4BC-9E4B-5AD7-9D35-6559BDC0788E'),
  success?: string(name='success', example='true'),
}

model GetQuotaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQuotaInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetQuotaInfo  GetQuotaInfoRequest
  * @return GetQuotaInfoResponse
 */
async function getQuotaInfo(request: GetQuotaInfoRequest): GetQuotaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQuotaInfo', 'POST', '/open/api/v1/quota/get', 'json', true, 'form', request);
}

model GetTokenRequest {
  deviceName: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  nonce: string(name='nonce', description='This parameter is required.', example='2a64edd96296880f55aa61987b', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='el3SzmCU2p0x4RBc', position='Body'),
  requestTime: string(name='requestTime', description='This parameter is required.', example='1748413148546', position='Body'),
  signature: string(name='signature', description='This parameter is required.', example='5/Smm8gnDSgZY2Blftq9eGYpVnpYCztoLJaJfhlH7id0lNlQxydRLtjUkGPr1qdbQq+oUn6Y1h0KJUdk0rf4am3MzdNr/Uhc47c8bbXnV8SlIC0agGo5skEQZNObzUD+sFxt8uN35/FYf7YRC8R61xY7+NPN2NLJrA/DPhewtVRRgAbb8RjergTcIG6oN1XTzLyC+76Az/3o2dPCxTfMXG3AFQc=', position='Body'),
  tokenKey?: string(name='tokenKey', example='sk-4asv136677d2411b876e536bc8xxxxx', position='Body'),
  tokenType: string(name='tokenType', description='This parameter is required.', example='oss', position='Body'),
}

model GetTokenResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    deviceName?: string(name='deviceName', example='5b504f84b69b9a73d3a21a2cff05e190'),
    nonce?: string(name='nonce', example='b79d692c315d6bfb28312edf15'),
    productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc'),
    requestIp?: string(name='requestIp', example='127.0.0.1'),
    responseTime?: string(name='responseTime', example='1748413248360'),
    signature?: string(name='signature', example='N1faAjFhhaRNFaZNC8woRpQyAzEfBaIoWQEgDfds/Fwm7nIyEDLlSK3Ttx2OFebiHZ/MpHRr/3MnI/jpVWB/xNYIQxm6sccHJENHNAz6gaW+itU5wUrh+46EpqySABV8kc2pQ0HmYlbePfjjOK6lCfQjEGpekSAgQ6tDhG1lXWfKdtggq58Ut5bImMxMhk4R/PFUWrJe4CDuFu072C+foI0JlUV9TnGtVQ58oz8VRndrGXyauS/xqg8iGSZn6FyprUf5p+0ow20E'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='B08AAA14-AD93-51F6-82AE-82AFAE9375B6'),
  success?: string(name='success', example='true'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetToken  GetTokenRequest
  * @return GetTokenResponse
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetToken', 'POST', '/open/api/auth/v1/token/get', 'json', true, 'form', request);
}

model HalfLLMAppCallRequest {
  appId: string(name='appId', description='This parameter is required.', example='b883e6dcf14041fba390c1f795493c6b', position='Body'),
  bizParam?: map[string]string(name='bizParam', shrink='json', position='Body'),
  deviceName: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  modelTypeList: [ string ](name='modelTypeList', description='This parameter is required.', shrink='json', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM', position='Body'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='678699541713794', position='Body'),
  text: string(name='text', description='This parameter is required.', position='Body'),
}

model HalfLLMAppCallResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    message?: string(name='message', example='null'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='finishReason', example='null'),
          message?: {
            content?: string(name='content'),
            role?: string(name='role', example='assistant'),
          }(name='message'),
        }
      ](name='choices'),
    }(name='output'),
    requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
    rt?: {
      firstRt?: long(name='firstRt', example='443'),
      totalRt?: long(name='totalRt', example='4432'),
    }(name='rt'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
    usages?: {
      inputTokens?: long(name='inputTokens', example='356'),
      outputTokens?: long(name='outputTokens', example='698'),
    }(name='usages'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='D7FEF19A-8B65-5914-9FA3-F26E820294B4'),
  success?: string(name='success', example='true'),
}

model HalfLLMAppCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMAppCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of HalfLLMAppCall  HalfLLMAppCallRequest
  * @return HalfLLMAppCallResponse
 */
async function halfLLMAppCall(request: HalfLLMAppCallRequest): HalfLLMAppCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HalfLLMAppCall', 'POST', '/open/api/device/v1/half/llm/app/call', 'json', true, 'form', request);
}

async function halfLLMAppCallWithAsyncResponseHandler(request: HalfLLMAppCallRequest, responseHandler: AsyncResponseHandler): HalfLLMAppCallResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'HalfLLMAppCall', 'POST', '/open/api/device/v1/half/llm/app/call', 'json', true, 'form', request, responseHandler);
}

function halfLLMAppCallWithResponseIterable(request: HalfLLMAppCallRequest): iterator[HalfLLMAppCallResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'HalfLLMAppCall', 'POST', '/open/api/device/v1/half/llm/app/call', 'json', true, 'form', request);
}

model HalfLLMChatRequest {
  deviceName: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  enableSearch?: boolean(name='enableSearch', example='true', position='Body'),
  inputText: string(name='inputText', description='This parameter is required.', position='Body'),
  model?: string(name='model', example='qwen-plus', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM', position='Body'),
  prompt?: string(name='prompt', position='Body'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='520539530998273', position='Body'),
}

model HalfLLMChatResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    message?: string(name='message', example='null'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='finishReason', example='null'),
          message?: {
            content?: string(name='content'),
            role?: string(name='role', example='assistant'),
          }(name='message'),
        }
      ](name='choices'),
    }(name='output'),
    requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='5DD2E24F-93A2-551D-B192-8DBBEEFE9129'),
  success?: string(name='success', example='true'),
}

model HalfLLMChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of HalfLLMChat  HalfLLMChatRequest
  * @return HalfLLMChatResponse
 */
async function halfLLMChat(request: HalfLLMChatRequest): HalfLLMChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HalfLLMChat', 'POST', '/open/api/device/v1/half/llm/chat', 'json', true, 'form', request);
}

async function halfLLMChatWithAsyncResponseHandler(request: HalfLLMChatRequest, responseHandler: AsyncResponseHandler): HalfLLMChatResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'HalfLLMChat', 'POST', '/open/api/device/v1/half/llm/chat', 'json', true, 'form', request, responseHandler);
}

function halfLLMChatWithResponseIterable(request: HalfLLMChatRequest): iterator[HalfLLMChatResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'HalfLLMChat', 'POST', '/open/api/device/v1/half/llm/chat', 'json', true, 'form', request);
}

model HalfLLMImageChatRequest {
  deviceName: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  enableSearch?: boolean(name='enableSearch', example='false', position='Body'),
  imageUrl: string(name='imageUrl', description='This parameter is required.', example='https://xxx/xx.jpg', position='Body'),
  inputText: string(name='inputText', description='This parameter is required.', position='Body'),
  model?: string(name='model', example='qwen-vl-max', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM', position='Body'),
  prompt?: string(name='prompt', position='Body'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='520539530998273', position='Body'),
}

model HalfLLMImageChatResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    message?: string(name='message', example='null'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='finishReason', example='null'),
          message?: {
            content?: string(name='content'),
            role?: string(name='role', example='assistant'),
          }(name='message'),
        }
      ](name='choices'),
    }(name='output'),
    requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
    rt?: {
      firstRt?: long(name='firstRt', example='1563'),
      totalRt?: long(name='totalRt', example='8235'),
    }(name='rt'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
    usages?: {
      inputTokens?: long(name='inputTokens', example='136'),
      outputTokens?: long(name='outputTokens', example='589'),
    }(name='usages'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='84656A01-32F0-5D12-8C72-E3AFAA0C8A29'),
  success?: string(name='success', example='true'),
}

model HalfLLMImageChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMImageChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of HalfLLMImageChat  HalfLLMImageChatRequest
  * @return HalfLLMImageChatResponse
 */
async function halfLLMImageChat(request: HalfLLMImageChatRequest): HalfLLMImageChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HalfLLMImageChat', 'POST', '/open/api/device/v1/half/llm/image/chat', 'json', true, 'form', request);
}

async function halfLLMImageChatWithAsyncResponseHandler(request: HalfLLMImageChatRequest, responseHandler: AsyncResponseHandler): HalfLLMImageChatResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'HalfLLMImageChat', 'POST', '/open/api/device/v1/half/llm/image/chat', 'json', true, 'form', request, responseHandler);
}

function halfLLMImageChatWithResponseIterable(request: HalfLLMImageChatRequest): iterator[HalfLLMImageChatResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'HalfLLMImageChat', 'POST', '/open/api/device/v1/half/llm/image/chat', 'json', true, 'form', request);
}

model HalfLLMImageOcrRequest {
  deviceName: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  imageUrl: string(name='imageUrl', description='This parameter is required.', example='https://xxx/xx.jpg', position='Body'),
  model?: string(name='model', example='qwen-vl-ocr', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='520539530998273', position='Body'),
}

model HalfLLMImageOcrResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    message?: string(name='message', example='null'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='finishReason', example='null'),
          message?: {
            content?: string(name='content', example='xxx'),
            role?: string(name='role', example='assistant'),
          }(name='message'),
        }
      ](name='choices'),
    }(name='output'),
    requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
    rt?: {
      firstRt?: long(name='firstRt', example='635'),
      totalRt?: long(name='totalRt', example='8571'),
    }(name='rt'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
    usages?: {
      inputTokens?: long(name='inputTokens', example='771'),
      outputTokens?: long(name='outputTokens', example='563'),
    }(name='usages'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='4Oy0zoqcjcclBgREcZvXF12y'),
  success?: string(name='success', example='true'),
}

model HalfLLMImageOcrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMImageOcrResponseBody(name='body'),
}

/**
  * @param request  the request parameters of HalfLLMImageOcr  HalfLLMImageOcrRequest
  * @return HalfLLMImageOcrResponse
 */
async function halfLLMImageOcr(request: HalfLLMImageOcrRequest): HalfLLMImageOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HalfLLMImageOcr', 'POST', '/open/api/device/v1/half/llm/image/ocr', 'json', true, 'form', request);
}

async function halfLLMImageOcrWithAsyncResponseHandler(request: HalfLLMImageOcrRequest, responseHandler: AsyncResponseHandler): HalfLLMImageOcrResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'HalfLLMImageOcr', 'POST', '/open/api/device/v1/half/llm/image/ocr', 'json', true, 'form', request, responseHandler);
}

function halfLLMImageOcrWithResponseIterable(request: HalfLLMImageOcrRequest): iterator[HalfLLMImageOcrResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'HalfLLMImageOcr', 'POST', '/open/api/device/v1/half/llm/image/ocr', 'json', true, 'form', request);
}

model HalfLLMTTSChatRequest {
  deviceName: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  enableSearch?: boolean(name='enableSearch', example='false', position='Body'),
  format?: string(name='format', example='.pcm。', position='Body'),
  model?: string(name='model', example='qwen-max', position='Body'),
  pitchRate?: int32(name='pitchRate', example='0', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM', position='Body'),
  prompt?: string(name='prompt', position='Body'),
  sampleRate?: int32(name='sampleRate', example='16000', position='Body'),
  sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH', position='Body'),
  speechRate?: int32(name='speechRate', example='0', position='Body'),
  stream?: boolean(name='stream', example='true', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='661708759700322', position='Body'),
  text: string(name='text', description='This parameter is required.', position='Body'),
  url?: string(name='url', example='wss://nls-gateway-cn-beijing.aliyuncs.com/ws/v1', position='Body'),
  voice?: string(name='voice', example='siyue', position='Body'),
  volume?: int32(name='volume', example='50', position='Body'),
}

model HalfLLMTTSChatResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    code?: string(name='code', example='200'),
    data?: bytes(name='data', example='xxxx'),
    message?: string(name='message', example='null'),
    requestId?: string(name='requestId', example='sDwqZnFGwsv9x7yjVwQVKTV4'),
    sessionId?: string(name='sessionId', example='0sIRZDNncmCfBagzy534x2PH'),
    text?: string(name='text'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='A9CE316B-B616-5A97-8FFC-5D0D664CA7AF'),
  success?: string(name='success', example='true'),
}

model HalfLLMTTSChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HalfLLMTTSChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of HalfLLMTTSChat  HalfLLMTTSChatRequest
  * @return HalfLLMTTSChatResponse
 */
async function halfLLMTTSChat(request: HalfLLMTTSChatRequest): HalfLLMTTSChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HalfLLMTTSChat', 'POST', '/open/api/device/v1/half/llm/tts/chat', 'json', true, 'form', request);
}

async function halfLLMTTSChatWithAsyncResponseHandler(request: HalfLLMTTSChatRequest, responseHandler: AsyncResponseHandler): HalfLLMTTSChatResponse {
  @handler.validateRequestModel(request);
  return @handler.doResponseHandler('RESTFUL', 'HalfLLMTTSChat', 'POST', '/open/api/device/v1/half/llm/tts/chat', 'json', true, 'form', request, responseHandler);
}

function halfLLMTTSChatWithResponseIterable(request: HalfLLMTTSChatRequest): iterator[HalfLLMTTSChatResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'HalfLLMTTSChat', 'POST', '/open/api/device/v1/half/llm/tts/chat', 'json', true, 'form', request);
}

model QueryDevicePageRequest {
  deviceName?: string(name='deviceName', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  disableStatus?: int32(name='disableStatus', example='1', position='Body'),
  pageIndex: int32(name='pageIndex', description='This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='pageSize', description='This parameter is required.', example='20', position='Body'),
  productKey?: string(name='productKey', example='el3SzmCU2p0x4RBc', position='Body'),
  productName?: string(name='productName', position='Body'),
  status?: int32(name='status', example='1', position='Body'),
}

model QueryDevicePageResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    data?: [ 
      {
        activeTime?: string(name='activeTime', example='2025-03-15 09:44:32'),
        aliyunUid?: string(name='aliyunUid', example='1539704706413278'),
        batchNo?: string(name='batchNo', example='202504010001'),
        deviceName?: string(name='deviceName', example='5b504f84b69b9a73d3a21a2cff05e190'),
        disableStatus?: int32(name='disableStatus', example='1'),
        gmtCreate?: string(name='gmtCreate', example='2025-04-27 09:10:31'),
        gmtModify?: string(name='gmtModify', example='2025-04-27 09:10:31'),
        id?: long(name='id', description='ID。', example='201'),
        productKey?: string(name='productKey', example='nnjNQQv3ZjyYE7H4'),
        productName?: string(name='productName'),
        remark?: string(name='remark'),
        status?: int32(name='status', example='1'),
        tenantId?: string(name='tenantId', example='493303079000577'),
      }
    ](name='data'),
    pageIndex?: int32(name='pageIndex', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: long(name='total', example='100'),
  }(name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='60FD351B-10C4-5C2C-ADA2-524FC39FC174'),
  success?: string(name='success', example='true'),
}

model QueryDevicePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDevicePageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDevicePage  QueryDevicePageRequest
  * @return QueryDevicePageResponse
 */
async function queryDevicePage(request: QueryDevicePageRequest): QueryDevicePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDevicePage', 'POST', '/open/api/device/v1/page', 'json', true, 'form', request);
}

model QueryProductPageRequest {
  modelType?: bytes(name='modelType', example='1', position='Body'),
  pageIndex?: int32(name='pageIndex', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='20', position='Body'),
  productName?: string(name='productName', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='679583000646594', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='359687', position='Body'),
}

model QueryProductPageResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    data?: [ 
      {
        activeLicenseCount?: long(name='activeLicenseCount', example='100'),
        apiKey?: string(name='apiKey', example='zcrzbqrF29pkgXukLaQ+6jGsohQiPhdOuIrUSVSvNO5oDntQdM76mNXj+AJ2i7eP'),
        createTime?: string(name='createTime', example='2024-03-05 06:24:27'),
        description?: string(name='description'),
        licenseCount?: long(name='licenseCount', example='1000'),
        maxQps?: int32(name='maxQps', example='100'),
        productKey?: string(name='productKey', example='nnjNQQv3ZjyYE7H4'),
        productName?: string(name='productName'),
        productSecret?: string(name='productSecret', example='3dc95cac8272b86a5d10de7768d8fc41'),
        tenantId?: string(name='tenantId', example='383756559581697'),
        tokenCount?: long(name='tokenCount', example='100000'),
        updateTime?: string(name='updateTime', example='2024-03-05 06:24:27'),
        usedToken?: long(name='usedToken', example='10000'),
        userId?: string(name='userId', example='359687'),
      }
    ](name='data'),
    pageIndex?: int32(name='pageIndex', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: long(name='total', example='100'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='EA4643D5-5FA8-55BA-A959-F7D3E38E0AE0'),
  success?: string(name='success', example='true'),
}

model QueryProductPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryProductPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryProductPage  QueryProductPageRequest
  * @return QueryProductPageResponse
 */
async function queryProductPage(request: QueryProductPageRequest): QueryProductPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryProductPage', 'POST', '/open/api/v1/product/page', 'json', true, 'form', request);
}

model QueryProductQuotaPageRequest {
  pageIndex?: int32(name='pageIndex', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='20', position='Body'),
  productKey?: string(name='productKey', example='2oImhCz4f8XCviiM', position='Body'),
  productName?: string(name='productName', position='Body'),
  purchaseTimeEnd?: string(name='purchaseTimeEnd', example='2025-04-01 00:00:00', position='Body'),
  purchaseTimeStart?: string(name='purchaseTimeStart', example='2025-03-01 00:00:00', position='Body'),
  purchaseType?: int32(name='purchaseType', example='1', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='628103740287873', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='123456', position='Body'),
}

model QueryProductQuotaPageResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    data?: [ 
      {
        createTime?: string(name='createTime', example='2025-03-23 02:02:03'),
        duration?: int32(name='duration', example='12'),
        durationType?: int32(name='durationType', example='2'),
        expireTime?: string(name='expireTime', example='2025-05-31 00:00:00'),
        id?: long(name='id', description='ID。', example='67241348'),
        ifUnsubscribe?: int32(name='ifUnsubscribe', example='0'),
        ifUsed?: int32(name='ifUsed', example='1'),
        licenseCount?: long(name='licenseCount', example='100'),
        maxQps?: int32(name='maxQps', example='100'),
        orderId?: string(name='orderId', example='g6RD6uvFYNZv44ky'),
        productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
        productName?: string(name='productName'),
        purchaseModel?: int32(name='purchaseModel', example='1'),
        purchaseType?: int32(name='purchaseType', example='1'),
        settlementFee?: double(name='settlementFee', example='100.0'),
        tenantId?: string(name='tenantId', example='217037888563265'),
        tokenNumber?: long(name='tokenNumber', example='10000'),
        unitPrice?: double(name='unitPrice', example='1.0'),
        updateTime?: string(name='updateTime', example='2025-03-23 02:02:03'),
        userId?: string(name='userId', example='123456'),
      }
    ](name='data'),
    pageIndex?: int32(name='pageIndex', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: long(name='total', example='151'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='32B81CD6-D583-5056-A6EB-3C1107AB26C3'),
  success?: string(name='success', example='true'),
}

model QueryProductQuotaPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryProductQuotaPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryProductQuotaPage  QueryProductQuotaPageRequest
  * @return QueryProductQuotaPageResponse
 */
async function queryProductQuotaPage(request: QueryProductQuotaPageRequest): QueryProductQuotaPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryProductQuotaPage', 'POST', '/open/api/v1/product/quotaPage', 'json', true, 'form', request);
}

model QueryTokenUsageRequest {
  endDate: string(name='endDate', description='This parameter is required.', example='2025-04-02 00:00:00', position='Body'),
  productKey?: string(name='productKey', example='2oImhCz4f8XCviiM', position='Body'),
  startDate: string(name='startDate', description='This parameter is required.', example='2025-04-01 00:00:00', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='520539530998273', position='Body'),
}

model QueryTokenUsageResponseBody = {
  code?: string(name='code', example='success'),
  data?: [ 
    {
      apiKey?: string(name='apiKey', example='oqYVtK7DnaVj4JpbFtghJV2CZy7HwhOI0do3mf8twx9TGCMNNXYBptJ0+ULqO3xD'),
      inputToken?: long(name='inputToken', example='1000'),
      outputToken?: long(name='outputToken', example='1000'),
      productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
      productName?: string(name='productName'),
      tenantId?: string(name='tenantId', example='520539530998273'),
      usageTime?: string(name='usageTime', example='2025-04-01'),
    }
  ](name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='B08AAA14-AD93-51F6-82AE-82AFAE9375B6'),
  success?: string(name='success', example='true'),
}

model QueryTokenUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTokenUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTokenUsage  QueryTokenUsageRequest
  * @return QueryTokenUsageResponse
 */
async function queryTokenUsage(request: QueryTokenUsageRequest): QueryTokenUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTokenUsage', 'POST', '/open/api/v1/token/usage/query', 'json', true, 'form', request);
}

model RevokeChannelSignRequest {
}

model RevokeChannelSignResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    channelName?: string(name='channelName'),
    contact?: string(name='contact'),
    createTime?: string(name='createTime', example='2025-05-01 10:43:21'),
    description?: string(name='description'),
    modifyTime?: string(name='modifyTime', example='2025-05-01 10:43:21'),
    phone?: string(name='phone', example='13555555555'),
    remark?: string(name='remark'),
    status?: string(name='status', example='revoke'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='2C17015D-F916-5C2B-8C50-424DA829685E'),
  success?: string(name='success', example='true'),
}

model RevokeChannelSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeChannelSignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeChannelSign  RevokeChannelSignRequest
  * @return RevokeChannelSignResponse
 */
async function revokeChannelSign(request: RevokeChannelSignRequest): RevokeChannelSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokeChannelSign', 'POST', '/open/api/v1/channel/revoke', 'json', false, 'json', request);
}

model UpdateDeviceStatusRequest {
  deviceName: string(name='deviceName', description='This parameter is required.', example='5b504f84b69b9a73d3a21a2cff05e190', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM', position='Body'),
  remark?: string(name='remark', position='Body'),
  status: int32(name='status', description='This parameter is required.', example='2', position='Body'),
}

model UpdateDeviceStatusResponseBody = {
  code?: string(name='code', example='success'),
  data?: boolean(name='data', example='true'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='037E1251-1B9E-5DF5-B787-C3971A79DF89'),
  success?: string(name='success', example='true'),
}

model UpdateDeviceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDeviceStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDeviceStatus  UpdateDeviceStatusRequest
  * @return UpdateDeviceStatusResponse
 */
async function updateDeviceStatus(request: UpdateDeviceStatusRequest): UpdateDeviceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDeviceStatus', 'POST', '/open/api/device/v1/update/status', 'json', true, 'form', request);
}

model UpdateImageQuotaRequest {
  duration?: int32(name='duration', example='1', position='Body'),
  durationType?: int32(name='durationType', example='2', position='Body'),
  imageCount?: int32(name='imageCount', example='100', position='Body'),
  licenseCount?: long(name='licenseCount', example='10', position='Body'),
  packageType?: int32(name='packageType', example='2', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='2oImhCz4f8XCviiM', position='Body'),
  purchaseType: int32(name='purchaseType', description='This parameter is required.', example='1', position='Body'),
  recordId?: int32(name='recordId', example='355', position='Body'),
  settlementAmount: double(name='settlementAmount', description='This parameter is required.', example='10.0', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='520539530998273', position='Body'),
  unitPrice: double(name='unitPrice', description='This parameter is required.', example='1.0', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='123456', position='Body'),
}

model UpdateImageQuotaResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    orderId?: string(name='orderId', example='FlUHDd8ol1yRmA92'),
    productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
    productName?: string(name='productName'),
    tenantId?: string(name='tenantId', example='520539530998273'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='28BD530A-C469-5CF9-9F4E-DA0AF0A1AC73'),
  success?: string(name='success', example='true'),
}

model UpdateImageQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateImageQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateImageQuota  UpdateImageQuotaRequest
  * @return UpdateImageQuotaResponse
 */
async function updateImageQuota(request: UpdateImageQuotaRequest): UpdateImageQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateImageQuota', 'POST', '/open/api/v1/quota/update/image', 'json', true, 'form', request);
}

model UpdateQuotaRequest {
  duration?: int32(name='duration', example='1', position='Body'),
  durationType?: int32(name='durationType', example='2', position='Body'),
  licenseCount?: long(name='licenseCount', example='10', position='Body'),
  maxQps?: int32(name='maxQps', example='100', position='Body'),
  packageType?: int32(name='packageType', example='2', position='Body'),
  productKey: string(name='productKey', description='This parameter is required.', example='nnjNQQv3ZjyYE7H4', position='Body'),
  purchaseType: int32(name='purchaseType', description='This parameter is required.', example='1', position='Body'),
  recordId?: int32(name='recordId', example='421', position='Body'),
  settlementAmount: double(name='settlementAmount', description='This parameter is required.', example='10.0', position='Body'),
  tenantId: string(name='tenantId', description='This parameter is required.', example='520539530998273', position='Body'),
  tokenNumber?: long(name='tokenNumber', example='10000', position='Body'),
  unitPrice: double(name='unitPrice', description='This parameter is required.', example='1.0', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='123456', position='Body'),
}

model UpdateQuotaResponseBody = {
  code?: string(name='code', example='success'),
  data?: {
    orderId?: string(name='orderId', example='g6RD6uvFYNZv44ky'),
    productKey?: string(name='productKey', example='2oImhCz4f8XCviiM'),
    productName?: string(name='productName'),
    tenantId?: string(name='tenantId', example='520539530998273'),
    userId?: string(name='userId', example='123456'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='89946BAA-E4E1-5114-8A5E-A542FEDC9B16'),
  success?: string(name='success', example='true'),
}

model UpdateQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateQuota  UpdateQuotaRequest
  * @return UpdateQuotaResponse
 */
async function updateQuota(request: UpdateQuotaRequest): UpdateQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateQuota', 'POST', '/open/api/v1/quota/update', 'json', true, 'form', request);
}

