/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'viapi';
  @version = '2021-09-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AiStoreApiNode {
  apis?: [
    AiStoreUserTask
  ](name='Apis'),
  product?: string(name='Product'),
  productDesc?: string(name='ProductDesc'),
}

model AiStoreReceiveConfig {
  custom?: string(name='Custom'),
  dingTalk?: {
    address?: string(name='Address'),
    secret?: string(name='Secret'),
  }(name='DingTalk'),
  eventBridge?: {
    eventBus?: string(name='EventBus'),
    eventRule?: string(name='EventRule'),
  }(name='EventBridge'),
  http?: {
    url?: string(name='Url'),
  }(name='Http'),
  https?: {
    url?: string(name='Url'),
  }(name='Https'),
  mns?: {
    queue?: string(name='Queue'),
  }(name='Mns'),
  rocketMQ?: {
    instanceId?: string(name='InstanceId'),
    topicName?: string(name='TopicName'),
  }(name='RocketMQ'),
}

model AiStoreTemplate {
  templateContext?: string(name='TemplateContext'),
  templateVariable?: string(name='TemplateVariable'),
}

model AiStoreUserTask {
  apiDesc?: string(name='ApiDesc'),
  apiName?: string(name='ApiName'),
  bucketKeyPrefix?: string(name='BucketKeyPrefix'),
  bucketName?: string(name='BucketName'),
  disableTime?: string(name='DisableTime'),
  enableTime?: string(name='EnableTime'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  id?: long(name='Id'),
  name?: string(name='Name'),
  paramInfo?: string(name='ParamInfo'),
  product?: string(name='Product'),
  productDesc?: string(name='ProductDesc'),
  receiveConfig?: string(name='ReceiveConfig'),
  region?: string(name='Region'),
  regionDesc?: string(name='RegionDesc'),
  remark?: string(name='Remark'),
  status?: string(name='Status'),
  taskVersion?: string(name='TaskVersion'),
  version?: string(name='Version'),
}

model CheckServiceLinkedRoleForDeletingRequest {
  accountId?: string(name='AccountId', position='Query'),
  deletionTaskId?: string(name='DeletionTaskId', position='Query'),
  roleArn?: string(name='RoleArn', position='Query'),
  SPIRegionId?: string(name='SPIRegionId', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
}

model CheckServiceLinkedRoleForDeletingResponseBody = {
  deletable?: boolean(name='Deletable'),
  requestId?: string(name='RequestId'),
  roleUsages?: [ 
    {
      region?: string(name='Region'),
      resources?: [ bytes ](name='Resources'),
    }
  ](name='RoleUsages'),
}

model CheckServiceLinkedRoleForDeletingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckServiceLinkedRoleForDeletingResponseBody(name='body'),
}

async function checkServiceLinkedRoleForDeleting(request: CheckServiceLinkedRoleForDeletingRequest): CheckServiceLinkedRoleForDeletingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceLinkedRoleForDeleting', 'POST', '/', 'json', false, 'json', request);
}

model CreateAiStoreBucketRequest {
  bucketName?: string(name='BucketName', position='Body'),
}

model CreateAiStoreBucketResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateAiStoreBucketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAiStoreBucketResponseBody(name='body'),
}

async function createAiStoreBucket(request: CreateAiStoreBucketRequest): CreateAiStoreBucketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAiStoreBucket', 'POST', '/', 'json', true, 'form', request);
}

model CreateAiStoreReceiveConfigRequest {
  apiName?: string(name='ApiName', position='Body'),
  product?: string(name='Product', position='Body'),
}

model CreateAiStoreReceiveConfigResponseBody = {
  data?: AiStoreReceiveConfig(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateAiStoreReceiveConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAiStoreReceiveConfigResponseBody(name='body'),
}

async function createAiStoreReceiveConfig(request: CreateAiStoreReceiveConfigRequest): CreateAiStoreReceiveConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAiStoreReceiveConfig', 'POST', '/', 'json', true, 'form', request);
}

model CreateAiStoreUserTaskRequest {
  apiName?: string(name='ApiName', position='Body'),
  bucketKeyPrefix?: string(name='BucketKeyPrefix', position='Body'),
  bucketName?: string(name='BucketName', position='Body'),
  createConfig?: string(name='CreateConfig', position='Body'),
  name?: string(name='Name', position='Body'),
  paramInfo?: string(name='ParamInfo', position='Body'),
  product?: string(name='Product', position='Body'),
  receiveConfig?: string(name='ReceiveConfig', position='Body'),
  remark?: string(name='Remark', position='Body'),
  status?: string(name='Status', position='Body'),
}

model CreateAiStoreUserTaskResponseBody = {
  data?: long(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateAiStoreUserTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAiStoreUserTaskResponseBody(name='body'),
}

async function createAiStoreUserTask(request: CreateAiStoreUserTaskRequest): CreateAiStoreUserTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAiStoreUserTask', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAiStoreUserTaskRequest {
  aistoreVersion?: string(name='AistoreVersion', position='Body'),
  id: long(name='Id', position='Body'),
}

model DeleteAiStoreUserTaskResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteAiStoreUserTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAiStoreUserTaskResponseBody(name='body'),
}

async function deleteAiStoreUserTask(request: DeleteAiStoreUserTaskRequest): DeleteAiStoreUserTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAiStoreUserTask', 'POST', '/', 'json', true, 'form', request);
}

model DisableAiStoreUserTaskRequest {
  aistoreVersion?: string(name='AistoreVersion', position='Body'),
  id: long(name='Id', position='Body'),
}

model DisableAiStoreUserTaskResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DisableAiStoreUserTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableAiStoreUserTaskResponseBody(name='body'),
}

async function disableAiStoreUserTask(request: DisableAiStoreUserTaskRequest): DisableAiStoreUserTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableAiStoreUserTask', 'POST', '/', 'json', true, 'form', request);
}

model EnableAiStoreUserTaskRequest {
  aistoreVersion?: string(name='AistoreVersion', position='Body'),
  id: long(name='Id', position='Body'),
}

model EnableAiStoreUserTaskResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model EnableAiStoreUserTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableAiStoreUserTaskResponseBody(name='body'),
}

async function enableAiStoreUserTask(request: EnableAiStoreUserTaskRequest): EnableAiStoreUserTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAiStoreUserTask', 'POST', '/', 'json', true, 'form', request);
}

model GetAiStoreReceiveConfigRequest {
  apiName?: string(name='ApiName', position='Body'),
  product?: string(name='Product', position='Body'),
}

model GetAiStoreReceiveConfigResponseBody = {
  data?: AiStoreReceiveConfig(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetAiStoreReceiveConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAiStoreReceiveConfigResponseBody(name='body'),
}

async function getAiStoreReceiveConfig(request: GetAiStoreReceiveConfigRequest): GetAiStoreReceiveConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiStoreReceiveConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetAiStoreUserTaskRequest {
  id: long(name='Id', position='Body'),
}

model GetAiStoreUserTaskResponseBody = {
  data?: AiStoreUserTask(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetAiStoreUserTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAiStoreUserTaskResponseBody(name='body'),
}

async function getAiStoreUserTask(request: GetAiStoreUserTaskRequest): GetAiStoreUserTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiStoreUserTask', 'POST', '/', 'json', true, 'form', request);
}

model GetAiStoreUserTaskByNameRequest {
  name: string(name='Name', position='Body'),
}

model GetAiStoreUserTaskByNameResponseBody = {
  data?: AiStoreUserTask(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetAiStoreUserTaskByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAiStoreUserTaskByNameResponseBody(name='body'),
}

async function getAiStoreUserTaskByName(request: GetAiStoreUserTaskByNameRequest): GetAiStoreUserTaskByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiStoreUserTaskByName', 'POST', '/', 'json', true, 'form', request);
}

model ListAiStoreBucketsRequest {
  apiName?: string(name='ApiName', position='Body'),
  product?: string(name='Product', position='Body'),
}

model ListAiStoreBucketsResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListAiStoreBucketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAiStoreBucketsResponseBody(name='body'),
}

async function listAiStoreBuckets(request: ListAiStoreBucketsRequest): ListAiStoreBucketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAiStoreBuckets', 'POST', '/', 'json', true, 'form', request);
}

model QueryAiStoreApiTreeRequest {
}

model QueryAiStoreApiTreeResponseBody = {
  data?: [
    AiStoreApiNode
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryAiStoreApiTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAiStoreApiTreeResponseBody(name='body'),
}

async function queryAiStoreApiTree(request: QueryAiStoreApiTreeRequest): QueryAiStoreApiTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAiStoreApiTree', 'POST', '/', 'json', false, 'json', request);
}

model QueryAiStoreRegionsRequest {
}

model QueryAiStoreRegionsResponseBody = {
  data?: [
    AiStoreUserTask
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryAiStoreRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAiStoreRegionsResponseBody(name='body'),
}

async function queryAiStoreRegions(request: QueryAiStoreRegionsRequest): QueryAiStoreRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAiStoreRegions', 'POST', '/', 'json', false, 'json', request);
}

model QueryAiStoreUserTaskPageRequest {
  apiName?: string(name='ApiName', position='Query'),
  bucketName?: string(name='BucketName', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  product?: string(name='Product', position='Query'),
  status?: string(name='Status', position='Query'),
}

model QueryAiStoreUserTaskPageResponseBody = {
  data?: {
    taskList?: [
      AiStoreUserTask
    ](name='TaskList'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryAiStoreUserTaskPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAiStoreUserTaskPageResponseBody(name='body'),
}

async function queryAiStoreUserTaskPage(request: QueryAiStoreUserTaskPageRequest): QueryAiStoreUserTaskPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAiStoreUserTaskPage', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAiStoreUserTaskRequest {
  apiName?: string(name='ApiName', position='Body'),
  bucketKeyPrefix?: string(name='BucketKeyPrefix', position='Body'),
  bucketName?: string(name='BucketName', position='Body'),
  id?: long(name='Id', position='Body'),
  name?: string(name='Name', position='Body'),
  paramInfo?: string(name='ParamInfo', position='Body'),
  product?: string(name='Product', position='Body'),
  receiveConfig?: string(name='ReceiveConfig', position='Body'),
  remark?: string(name='Remark', position='Body'),
  status?: string(name='Status', position='Body'),
}

model UpdateAiStoreUserTaskResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpdateAiStoreUserTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAiStoreUserTaskResponseBody(name='body'),
}

async function updateAiStoreUserTask(request: UpdateAiStoreUserTaskRequest): UpdateAiStoreUserTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAiStoreUserTask', 'POST', '/', 'json', true, 'form', request);
}

