/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('viapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AiStoreUserTask {
  id?: long(name='Id', description='ID'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  region?: string(name='Region', description='地域'),
  regionDesc?: string(name='RegionDesc', description='地域描述'),
  name?: string(name='Name', description='任务名称'),
  product?: string(name='Product', description='产品名称'),
  productDesc?: string(name='ProductDesc', description='产品描述'),
  apiName?: string(name='ApiName', description='API名称'),
  apiDesc?: string(name='ApiDesc', description='API描述'),
  version?: string(name='Version', description='API版本'),
  paramInfo?: string(name='ParamInfo', description='参数信息'),
  bucketName?: string(name='BucketName', description='bucket名称'),
  bucketKeyPrefix?: string(name='BucketKeyPrefix', description='bucketKey前缀'),
  remark?: string(name='Remark', description='备注'),
  receiveConfig?: string(name='ReceiveConfig', description='接收消息配置'),
  status?: string(name='Status', description='状态'),
  enableTime?: string(name='EnableTime', description='启用时间'),
  disableTime?: string(name='DisableTime', description='停用时间'),
}

model AiStoreReceiveConfig {
  eventBridge?: {
    eventBus?: string(name='EventBus', description='事件总线'),
    eventRule?: string(name='EventRule', description='事件规则'),
  }(name='EventBridge', description='事件总线'),
  mns?: {
    queue?: string(name='Queue', description='消息队列'),
  }(name='Mns', description='MNS消息'),
}

model AiStoreApiNode {
  product?: string(name='Product', description='产品名称'),
  productDesc?: string(name='ProductDesc', description='产品描述'),
  apis?: [
    AiStoreUserTask
  ](name='Apis', description='API列表'),
}

model GetAiStoreUserTaskRequest {
  id?: long(name='Id'),
}

model GetAiStoreUserTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: AiStoreUserTask(name='Data'),
}

model GetAiStoreUserTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiStoreUserTaskResponseBody(name='body'),
}

async function getAiStoreUserTaskWithOptions(request: GetAiStoreUserTaskRequest, runtime: Util.RuntimeOptions): GetAiStoreUserTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAiStoreUserTask', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAiStoreUserTask(request: GetAiStoreUserTaskRequest): GetAiStoreUserTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAiStoreUserTaskWithOptions(request, runtime);
}

model QueryAiStoreUserTaskPageRequest {
  product?: string(name='Product'),
  apiName?: string(name='ApiName'),
  status?: string(name='Status'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  name?: string(name='Name'),
  bucketName?: string(name='BucketName'),
}

model QueryAiStoreUserTaskPageResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    taskList?: [
      AiStoreUserTask
    ](name='TaskList'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
}

model QueryAiStoreUserTaskPageResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAiStoreUserTaskPageResponseBody(name='body'),
}

async function queryAiStoreUserTaskPageWithOptions(request: QueryAiStoreUserTaskPageRequest, runtime: Util.RuntimeOptions): QueryAiStoreUserTaskPageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAiStoreUserTaskPage', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAiStoreUserTaskPage(request: QueryAiStoreUserTaskPageRequest): QueryAiStoreUserTaskPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAiStoreUserTaskPageWithOptions(request, runtime);
}

model QueryAiStoreRegionsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: [
    AiStoreUserTask
  ](name='Data'),
}

model QueryAiStoreRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAiStoreRegionsResponseBody(name='body'),
}

async function queryAiStoreRegionsWithOptions(runtime: Util.RuntimeOptions): QueryAiStoreRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('QueryAiStoreRegions', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAiStoreRegions(): QueryAiStoreRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAiStoreRegionsWithOptions(runtime);
}

model ListAiStoreBucketsRequest {
  product?: string(name='Product'),
  apiName?: string(name='ApiName'),
}

model ListAiStoreBucketsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: [ string ](name='Data'),
}

model ListAiStoreBucketsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAiStoreBucketsResponseBody(name='body'),
}

async function listAiStoreBucketsWithOptions(request: ListAiStoreBucketsRequest, runtime: Util.RuntimeOptions): ListAiStoreBucketsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAiStoreBuckets', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAiStoreBuckets(request: ListAiStoreBucketsRequest): ListAiStoreBucketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAiStoreBucketsWithOptions(request, runtime);
}

model GetAiStoreUserTaskByNameRequest {
  name?: string(name='Name'),
}

model GetAiStoreUserTaskByNameResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: AiStoreUserTask(name='Data'),
}

model GetAiStoreUserTaskByNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiStoreUserTaskByNameResponseBody(name='body'),
}

async function getAiStoreUserTaskByNameWithOptions(request: GetAiStoreUserTaskByNameRequest, runtime: Util.RuntimeOptions): GetAiStoreUserTaskByNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAiStoreUserTaskByName', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAiStoreUserTaskByName(request: GetAiStoreUserTaskByNameRequest): GetAiStoreUserTaskByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAiStoreUserTaskByNameWithOptions(request, runtime);
}

model UpdateAiStoreUserTaskRequest {
  product?: string(name='Product'),
  apiName?: string(name='ApiName'),
  bucketName?: string(name='BucketName'),
  bucketKeyPrefix?: string(name='BucketKeyPrefix'),
  name?: string(name='Name'),
  paramInfo?: string(name='ParamInfo'),
  remark?: string(name='Remark'),
  receiveConfig?: string(name='ReceiveConfig'),
  status?: string(name='Status'),
  id?: long(name='Id'),
}

model UpdateAiStoreUserTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: boolean(name='Data'),
}

model UpdateAiStoreUserTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAiStoreUserTaskResponseBody(name='body'),
}

async function updateAiStoreUserTaskWithOptions(request: UpdateAiStoreUserTaskRequest, runtime: Util.RuntimeOptions): UpdateAiStoreUserTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAiStoreUserTask', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAiStoreUserTask(request: UpdateAiStoreUserTaskRequest): UpdateAiStoreUserTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAiStoreUserTaskWithOptions(request, runtime);
}

model DisableAiStoreUserTaskRequest {
  id?: long(name='Id'),
}

model DisableAiStoreUserTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: boolean(name='Data'),
}

model DisableAiStoreUserTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DisableAiStoreUserTaskResponseBody(name='body'),
}

async function disableAiStoreUserTaskWithOptions(request: DisableAiStoreUserTaskRequest, runtime: Util.RuntimeOptions): DisableAiStoreUserTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableAiStoreUserTask', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableAiStoreUserTask(request: DisableAiStoreUserTaskRequest): DisableAiStoreUserTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAiStoreUserTaskWithOptions(request, runtime);
}

model QueryAiStoreApiTreeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: [
    AiStoreApiNode
  ](name='Data'),
}

model QueryAiStoreApiTreeResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAiStoreApiTreeResponseBody(name='body'),
}

async function queryAiStoreApiTreeWithOptions(runtime: Util.RuntimeOptions): QueryAiStoreApiTreeResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('QueryAiStoreApiTree', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAiStoreApiTree(): QueryAiStoreApiTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAiStoreApiTreeWithOptions(runtime);
}

model DeleteAiStoreUserTaskRequest {
  id?: long(name='Id'),
}

model DeleteAiStoreUserTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: boolean(name='Data'),
}

model DeleteAiStoreUserTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAiStoreUserTaskResponseBody(name='body'),
}

async function deleteAiStoreUserTaskWithOptions(request: DeleteAiStoreUserTaskRequest, runtime: Util.RuntimeOptions): DeleteAiStoreUserTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAiStoreUserTask', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAiStoreUserTask(request: DeleteAiStoreUserTaskRequest): DeleteAiStoreUserTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAiStoreUserTaskWithOptions(request, runtime);
}

model CreateAiStoreUserTaskRequest {
  product?: string(name='Product'),
  apiName?: string(name='ApiName'),
  bucketName?: string(name='BucketName'),
  bucketKeyPrefix?: string(name='BucketKeyPrefix'),
  name?: string(name='Name'),
  paramInfo?: string(name='ParamInfo'),
  remark?: string(name='Remark'),
  receiveConfig?: string(name='ReceiveConfig'),
  status?: string(name='Status'),
}

model CreateAiStoreUserTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: long(name='Data'),
}

model CreateAiStoreUserTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAiStoreUserTaskResponseBody(name='body'),
}

async function createAiStoreUserTaskWithOptions(request: CreateAiStoreUserTaskRequest, runtime: Util.RuntimeOptions): CreateAiStoreUserTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAiStoreUserTask', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAiStoreUserTask(request: CreateAiStoreUserTaskRequest): CreateAiStoreUserTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAiStoreUserTaskWithOptions(request, runtime);
}

model CreateAiStoreReceiveConfigRequest {
  product?: string(name='Product'),
  apiName?: string(name='ApiName'),
}

model CreateAiStoreReceiveConfigResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: AiStoreReceiveConfig(name='Data'),
}

model CreateAiStoreReceiveConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAiStoreReceiveConfigResponseBody(name='body'),
}

async function createAiStoreReceiveConfigWithOptions(request: CreateAiStoreReceiveConfigRequest, runtime: Util.RuntimeOptions): CreateAiStoreReceiveConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAiStoreReceiveConfig', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAiStoreReceiveConfig(request: CreateAiStoreReceiveConfigRequest): CreateAiStoreReceiveConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAiStoreReceiveConfigWithOptions(request, runtime);
}

model GetAiStoreReceiveConfigRequest {
  product?: string(name='Product'),
  apiName?: string(name='ApiName'),
}

model GetAiStoreReceiveConfigResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: AiStoreReceiveConfig(name='Data'),
}

model GetAiStoreReceiveConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiStoreReceiveConfigResponseBody(name='body'),
}

async function getAiStoreReceiveConfigWithOptions(request: GetAiStoreReceiveConfigRequest, runtime: Util.RuntimeOptions): GetAiStoreReceiveConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAiStoreReceiveConfig', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAiStoreReceiveConfig(request: GetAiStoreReceiveConfigRequest): GetAiStoreReceiveConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAiStoreReceiveConfigWithOptions(request, runtime);
}

model EnableAiStoreUserTaskRequest {
  id?: long(name='Id'),
}

model EnableAiStoreUserTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: string(name='Data'),
}

model EnableAiStoreUserTaskResponse = {
  headers: map[string]string(name='headers'),
  body: EnableAiStoreUserTaskResponseBody(name='body'),
}

async function enableAiStoreUserTaskWithOptions(request: EnableAiStoreUserTaskRequest, runtime: Util.RuntimeOptions): EnableAiStoreUserTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableAiStoreUserTask', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableAiStoreUserTask(request: EnableAiStoreUserTaskRequest): EnableAiStoreUserTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAiStoreUserTaskWithOptions(request, runtime);
}

model CreateAiStoreBucketRequest {
  bucketName?: string(name='BucketName'),
}

model CreateAiStoreBucketResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: string(name='Data'),
}

model CreateAiStoreBucketResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAiStoreBucketResponseBody(name='body'),
}

async function createAiStoreBucketWithOptions(request: CreateAiStoreBucketRequest, runtime: Util.RuntimeOptions): CreateAiStoreBucketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAiStoreBucket', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAiStoreBucket(request: CreateAiStoreBucketRequest): CreateAiStoreBucketResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAiStoreBucketWithOptions(request, runtime);
}

model CheckServiceLinkedRoleForDeletingRequest {
  roleArn?: string(name='RoleArn'),
  serviceName?: string(name='ServiceName'),
  SPIRegionId?: string(name='SPIRegionId'),
  deletionTaskId?: string(name='DeletionTaskId'),
  accountId?: string(name='AccountId'),
}

model CheckServiceLinkedRoleForDeletingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deletable?: boolean(name='Deletable'),
  roleUsages?: [ 
    {
      region?: string(name='Region'),
      resources?: [ bytes ](name='Resources'),
    }
  ](name='RoleUsages'),
}

model CheckServiceLinkedRoleForDeletingResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceLinkedRoleForDeletingResponseBody(name='body'),
}

async function checkServiceLinkedRoleForDeletingWithOptions(request: CheckServiceLinkedRoleForDeletingRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleForDeletingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckServiceLinkedRoleForDeleting', '2021-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkServiceLinkedRoleForDeleting(request: CheckServiceLinkedRoleForDeletingRequest): CheckServiceLinkedRoleForDeletingResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleForDeletingWithOptions(request, runtime);
}

