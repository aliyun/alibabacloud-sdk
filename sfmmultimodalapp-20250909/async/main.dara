/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'SfmMultiModalApp';
  @version = '2025-09-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateCommandRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_axaxaaa', position='Query'),
  domainCode?: string(name='DomainCode', example='659864545', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='shopping_t', position='Query'),
  toolDescription: string(name='ToolDescription', description='This parameter is required.', example='xxxx', position='Query'),
  toolExamples?: [ 
    {
      query?: string(name='Query', example='给我xxx'),
    }
  ](name='ToolExamples', shrink='json', position='Query'),
  toolName: string(name='ToolName', description='This parameter is required.', example='open_bx', position='Query'),
  toolParams?: [ 
    {
      paramDesc?: string(name='ParamDesc', example='xxx'),
      paramExample?: string(name='ParamExample', example='xxx'),
      paramName?: string(name='ParamName', example='xxxx'),
    }
  ](name='ToolParams', shrink='json', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx', position='Query'),
}

model CreateCommandResponseBody = {
  domainCode?: string(name='DomainCode', example='72893434'),
  requestId?: string(name='RequestId', example='xxx'),
  toolId?: string(name='ToolId', example='3435676586'),
}

model CreateCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCommand  CreateCommandRequest
  * @return CreateCommandResponse
 */
async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCommand', 'POST', '/', 'json', false, 'json', request);
}

model CreateMmAppRequest {
  appName: string(name='AppName', description='This parameter is required.', example='多模态xxx', position='Query'),
  bindingConfig?: {
    commands?: [ 
      {
        domainCode: string(name='DomainCode', description='This parameter is required.', example='3686786786'),
        tools?: [ 
          {
            toolId: string(name='ToolId', description='This parameter is required.', example='54645646'),
          }
        ](name='Tools'),
        type: string(name='Type', description='This parameter is required.', example='CUSTOM'),
      }
    ](name='Commands'),
  }(name='BindingConfig', shrink='json', position='Query'),
  conversationConfig?: {
    asrModel?: string(name='AsrModel', example='xxx'),
    openAsr?: boolean(name='OpenAsr'),
    openTts?: boolean(name='OpenTts'),
    ttsModel?: string(name='TtsModel', example='xxx'),
  }(name='ConversationConfig', shrink='json', position='Query'),
  modelConfig?: {
    historyLimit?: int32(name='HistoryLimit', example='5'),
    modelType?: string(name='ModelType', example='MMH'),
    openWebSearch?: boolean(name='OpenWebSearch'),
    textModal?: string(name='TextModal', example='xxxx'),
  }(name='ModelConfig', shrink='json', position='Query'),
  prompt?: string(name='Prompt', example='提示词', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx', position='Query'),
}

model CreateMmAppResponseBody = {
  appId?: string(name='AppId', example='mm-xxxx'),
  requestId?: string(name='RequestId', example='xxxx'),
}

model CreateMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMmAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMmApp  CreateMmAppRequest
  * @return CreateMmAppResponse
 */
async function createMmApp(request: CreateMmAppRequest): CreateMmAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMmApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCommandRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_xxxxx', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', example='7533545', position='Query'),
  toolId: string(name='ToolId', description='This parameter is required.', example='564646456', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxxx', position='Query'),
}

model DeleteCommandResponseBody = {
  requestId?: string(name='RequestId', example='xxxx-xx'),
  success?: boolean(name='Success'),
}

model DeleteCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCommand  DeleteCommandRequest
  * @return DeleteCommandResponse
 */
async function deleteCommand(request: DeleteCommandRequest): DeleteCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCommand', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMmAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_xxxx', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx', position='Query'),
}

model DeleteMmAppResponseBody = {
  requestId?: string(name='RequestId', example='xxxxx'),
  success?: boolean(name='Success'),
}

model DeleteMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMmAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMmApp  DeleteMmAppRequest
  * @return DeleteMmAppResponse
 */
async function deleteMmApp(request: DeleteMmAppRequest): DeleteMmAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMmApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommandRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm-xxxxx', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', example='343894343', position='Query'),
  toolId: string(name='ToolId', description='This parameter is required.', example='4864343453445', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx', position='Query'),
}

model DescribeCommandResponseBody = {
  appId?: string(name='AppId', example='mm_xxxx'),
  createUserId?: string(name='CreateUserId', example='232423'),
  createUserName?: string(name='CreateUserName', example='sdsd'),
  description?: string(name='Description', example='xxxx'),
  domainCode?: string(name='DomainCode', example='56632343'),
  domainName?: string(name='DomainName', example='xccvsd'),
  gmtCreate?: string(name='GmtCreate', example='xxx'),
  gmtModified?: string(name='GmtModified', example='xxx'),
  modifyUserId?: string(name='ModifyUserId', example='57967'),
  modifyUserName?: string(name='ModifyUserName', example='xxx'),
  requestId?: string(name='RequestId', example='xxxx'),
  toolExamples?: [ 
    {
      query?: string(name='Query', example='xxx'),
    }
  ](name='ToolExamples'),
  toolId?: string(name='ToolId', example='65655'),
  toolName?: string(name='ToolName', example='dsf34'),
  toolParams?: [ 
    {
      paramDesc?: string(name='ParamDesc', example='xxx'),
      paramExample?: string(name='ParamExample', example='xxx'),
      paramName?: string(name='ParamName', example='xxx'),
    }
  ](name='ToolParams'),
}

model DescribeCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCommand  DescribeCommandRequest
  * @return DescribeCommandResponse
 */
async function describeCommand(request: DescribeCommandRequest): DescribeCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommand', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMmAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_xxxxx', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxx', position='Query'),
}

model DescribeMmAppResponseBody = {
  appId?: string(name='AppId', example='mm_xxxx'),
  appName?: string(name='AppName', example='多模态应用xxxx'),
  conversationConfig?: {
    asrModel?: string(name='AsrModel', example='xxxx'),
    openAsr?: boolean(name='OpenAsr'),
    openTts?: boolean(name='OpenTts'),
    ttsModel?: string(name='TtsModel', example='xxxx'),
  }(name='ConversationConfig'),
  createUserId?: string(name='CreateUserId', example='243433'),
  createUserName?: string(name='CreateUserName', example='xxxx'),
  gmtCreate?: string(name='GmtCreate', example='xxx'),
  gmtModified?: string(name='GmtModified', example='xxx'),
  modelConfig?: {
    historyLimit?: int32(name='HistoryLimit', example='5'),
    modelType?: string(name='ModelType', example='MMH'),
    openWebSearch?: boolean(name='OpenWebSearch'),
    textModal?: string(name='TextModal', example='xxxx'),
  }(name='ModelConfig'),
  modifyUserId?: string(name='ModifyUserId', example='56673435'),
  modifyUserName?: string(name='ModifyUserName', example='xxxx'),
  prompt?: string(name='Prompt', example='提示词xxxx'),
  publishVersion?: long(name='PublishVersion', example='1'),
  requestId?: string(name='RequestId', example='xxxx'),
  status?: string(name='Status', example='1'),
}

model DescribeMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMmAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMmApp  DescribeMmAppRequest
  * @return DescribeMmAppResponse
 */
async function describeMmApp(request: DescribeMmAppRequest): DescribeMmAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMmApp', 'POST', '/', 'json', false, 'json', request);
}

model ListCommandRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_xxxx', position='Query'),
  domainCode: string(name='DomainCode', description='This parameter is required.', example='8453564564', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  toolName?: string(name='ToolName', example='xl-sxx', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxx', position='Query'),
}

model ListCommandResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='xxx'),
  toolInfoList?: [ 
    {
      appId?: string(name='AppId', example='mm-xxx'),
      createUserId?: string(name='CreateUserId', example='676776778678'),
      createUserName?: string(name='CreateUserName', example='xxx'),
      description?: string(name='Description', example='xxx'),
      domainCode?: string(name='DomainCode', example='44574578797'),
      domainName?: string(name='DomainName', example='xxh_xx'),
      gmtCreate?: string(name='GmtCreate', example='xxx'),
      gmtModified?: string(name='GmtModified', example='xxxx'),
      modifyUserId?: string(name='ModifyUserId', example='2334346345'),
      modifyUserName?: string(name='ModifyUserName', example='xxx'),
      toolExamples?: [ 
        {
          query?: string(name='Query', example='xxx'),
        }
      ](name='ToolExamples'),
      toolId?: string(name='ToolId', example='6734396796'),
      toolName?: string(name='ToolName', example='sxxxx'),
      toolParams?: [ 
        {
          paramDesc?: string(name='ParamDesc', example='xxx'),
          paramExample?: string(name='ParamExample', example='xx'),
          paramName?: string(name='ParamName', example='xxxx'),
        }
      ](name='ToolParams'),
    }
  ](name='ToolInfoList'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCommand  ListCommandRequest
  * @return ListCommandResponse
 */
async function listCommand(request: ListCommandRequest): ListCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCommand', 'POST', '/', 'json', false, 'json', request);
}

model ListMmAppRequest {
  keyword?: string(name='Keyword', example='多模态', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx', position='Query'),
}

model ListMmAppResponseBody = {
  appInfoList?: [ 
    {
      appId?: string(name='AppId', example='mm_xxxx'),
      appName?: string(name='AppName', example='多模态'),
      conversationConfig?: {
        asrModel?: string(name='AsrModel', example='xxx'),
        openAsr?: boolean(name='OpenAsr'),
        openTts?: boolean(name='OpenTts'),
        ttsModel?: string(name='TtsModel', example='xxx'),
      }(name='ConversationConfig'),
      createUserId?: string(name='CreateUserId', example='454564'),
      createUserName?: string(name='CreateUserName', example='xxx'),
      gmtCreate?: string(name='GmtCreate', example='xxx'),
      gmtModified?: string(name='GmtModified', example='xxx'),
      modelConfig?: {
        historyLimit?: string(name='HistoryLimit', example='5'),
        modelType?: string(name='ModelType', example='MMH'),
        openWebSearch?: boolean(name='OpenWebSearch'),
        textModal?: string(name='TextModal', example='xxx'),
      }(name='ModelConfig'),
      modifyUserId?: string(name='ModifyUserId', example='56445'),
      modifyUserName?: string(name='ModifyUserName', example='xxx'),
      prompt?: string(name='Prompt', example='提示词'),
      publishVersion?: long(name='PublishVersion', example='1'),
      status?: int32(name='Status', example='1'),
    }
  ](name='AppInfoList'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=100),
  pageSize?: int32(name='PageSize', example='1', minimum=1, maximum=100),
  requestId?: string(name='RequestId', example='xxxx'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMmApp  ListMmAppRequest
  * @return ListMmAppResponse
 */
async function listMmApp(request: ListMmAppRequest): ListMmAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMmApp', 'POST', '/', 'json', false, 'json', request);
}

model ListPublishedMmAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_xxx', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx', position='Query'),
}

model ListPublishedMmAppResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  publishedVersionInfoList?: [ 
    {
      appId?: string(name='AppId', example='mm_xxx'),
      appName?: string(name='AppName', example='多模态应用xxx'),
      createUserId?: string(name='CreateUserId', example='234343'),
      createUserName?: string(name='CreateUserName', example='ccccc'),
      description?: string(name='Description', example='xxxx'),
      gmtCreate?: string(name='GmtCreate', example='xxxx'),
      publishTime?: string(name='PublishTime', example='xxxx'),
      version?: long(name='Version', example='1'),
    }
  ](name='PublishedVersionInfoList'),
  requestId?: string(name='RequestId', example='xxxxxx'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListPublishedMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublishedMmAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublishedMmApp  ListPublishedMmAppRequest
  * @return ListPublishedMmAppResponse
 */
async function listPublishedMmApp(request: ListPublishedMmAppRequest): ListPublishedMmAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublishedMmApp', 'POST', '/', 'json', false, 'json', request);
}

model PublishMmAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_xxxx', position='Query'),
  description?: string(name='Description', example='xxxxx', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx', position='Query'),
}

model PublishMmAppResponseBody = {
  requestId?: string(name='RequestId', example='xxxxx'),
  success?: boolean(name='Success'),
}

model PublishMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishMmAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishMmApp  PublishMmAppRequest
  * @return PublishMmAppResponse
 */
async function publishMmApp(request: PublishMmAppRequest): PublishMmAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishMmApp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCommandRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_axaxaaa', position='Query'),
  domainCode?: string(name='DomainCode', example='659864545', position='Query'),
  domainName?: string(name='DomainName', example='shopping_t', position='Query'),
  toolDescription: string(name='ToolDescription', description='This parameter is required.', example='xxxx', position='Query'),
  toolExamples?: [ 
    {
      query?: string(name='Query', example='给我xxx'),
    }
  ](name='ToolExamples', shrink='json', position='Query'),
  toolId: string(name='ToolId', description='This parameter is required.', example='8293382932xxx', position='Query'),
  toolName: string(name='ToolName', description='This parameter is required.', example='open_bx', position='Query'),
  toolParams?: [ 
    {
      paramDesc?: string(name='ParamDesc', example='xxx'),
      paramExample?: string(name='ParamExample', example='xxx'),
      paramName?: string(name='ParamName', example='xxxx'),
    }
  ](name='ToolParams', shrink='json', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx', position='Query'),
}

model UpdateCommandResponseBody = {
  requestId?: string(name='RequestId', example='xxx'),
  success?: boolean(name='Success'),
}

model UpdateCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCommandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCommand  UpdateCommandRequest
  * @return UpdateCommandResponse
 */
async function updateCommand(request: UpdateCommandRequest): UpdateCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCommand', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMmAppRequest {
  appId: string(name='AppId', description='This parameter is required.', example='mm_xxx', position='Query'),
  appName: string(name='AppName', description='This parameter is required.', example='多模态应用xxxxx', position='Query'),
  bindingConfig?: {
    commands?: [ 
      {
        domainCode: string(name='DomainCode', description='This parameter is required.', example='724366858658'),
        tools?: [ 
          {
            toolId: string(name='ToolId', description='This parameter is required.', example='7293782043943'),
          }
        ](name='Tools'),
        type: string(name='Type', description='This parameter is required.', example='CUSTOM'),
      }
    ](name='Commands'),
  }(name='BindingConfig', shrink='json', position='Query'),
  conversationConfig?: {
    asrModel?: string(name='AsrModel', example='Paraformer'),
    openAsr?: boolean(name='OpenAsr'),
    openTts?: boolean(name='OpenTts'),
    ttsModel?: string(name='TtsModel', example='cosyvoice-v2'),
  }(name='ConversationConfig', shrink='json', position='Query'),
  modelConfig?: {
    historyLimit?: int32(name='HistoryLimit', example='5'),
    modelType?: string(name='ModelType', example='MMH'),
    openWebSearch?: boolean(name='OpenWebSearch'),
    textModal?: string(name='TextModal', example='qwen-mmh-high-speed'),
  }(name='ModelConfig', shrink='json', position='Query'),
  prompt?: string(name='Prompt', example='提示词，不超过8000字符', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxx', position='Query'),
}

model UpdateMmAppResponseBody = {
  requestId?: string(name='RequestId', example='xxxx'),
  success?: boolean(name='Success'),
}

model UpdateMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMmAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMmApp  UpdateMmAppRequest
  * @return UpdateMmAppResponse
 */
async function updateMmApp(request: UpdateMmAppRequest): UpdateMmAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMmApp', 'POST', '/', 'json', false, 'json', request);
}

