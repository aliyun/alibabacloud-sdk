/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('sfmmultimodalapp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateCommandRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_axaxaaa'),
  domainCode?: string(name='DomainCode', example='659864545'),
  domainName?: string(name='DomainName', description='This parameter is required.', example='shopping_t'),
  toolDescription?: string(name='ToolDescription', description='This parameter is required.', example='xxxx'),
  toolExamples?: [ 
    {
      query?: string(name='Query', example='给我xxx'),
    }
  ](name='ToolExamples'),
  toolName?: string(name='ToolName', description='This parameter is required.', example='open_bx'),
  toolParams?: [ 
    {
      paramDesc?: string(name='ParamDesc', example='xxx'),
      paramExample?: string(name='ParamExample', example='xxx'),
      paramName?: string(name='ParamName', example='xxxx'),
    }
  ](name='ToolParams'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model CreateCommandShrinkRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_axaxaaa'),
  domainCode?: string(name='DomainCode', example='659864545'),
  domainName?: string(name='DomainName', description='This parameter is required.', example='shopping_t'),
  toolDescription?: string(name='ToolDescription', description='This parameter is required.', example='xxxx'),
  toolExamplesShrink?: string(name='ToolExamples'),
  toolName?: string(name='ToolName', description='This parameter is required.', example='open_bx'),
  toolParamsShrink?: string(name='ToolParams'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model CreateCommandResponseBody = {
  domainCode?: string(name='DomainCode', example='72893434'),
  requestId?: string(name='RequestId', example='xxx'),
  toolId?: string(name='ToolId', example='3435676586'),
}

model CreateCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCommandResponseBody(name='body'),
}

/**
 * @summary 指令创建
 *
 * @param tmpReq CreateCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCommandResponse
 */
async function createCommandWithOptions(tmpReq: CreateCommandRequest, runtime: Util.RuntimeOptions): CreateCommandResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.toolExamples)) {
    request.toolExamplesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toolExamples, 'ToolExamples', 'json');
  }
  if (!Util.isUnset(tmpReq.toolParams)) {
    request.toolParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toolParams, 'ToolParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.toolDescription)) {
    query['ToolDescription'] = request.toolDescription;
  }
  if (!Util.isUnset(request.toolExamplesShrink)) {
    query['ToolExamples'] = request.toolExamplesShrink;
  }
  if (!Util.isUnset(request.toolName)) {
    query['ToolName'] = request.toolName;
  }
  if (!Util.isUnset(request.toolParamsShrink)) {
    query['ToolParams'] = request.toolParamsShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCommand',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 指令创建
 *
 * @param request CreateCommandRequest
 * @return CreateCommandResponse
 */
async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCommandWithOptions(request, runtime);
}

model CreateMmAppRequest {
  appName?: string(name='AppName', description='This parameter is required.', example='多模态xxx'),
  bindingConfig?: {
    commands?: [ 
      {
        domainCode?: string(name='DomainCode', description='This parameter is required.', example='3686786786'),
        tools?: [ 
          {
            toolId?: string(name='ToolId', description='This parameter is required.', example='54645646'),
          }
        ](name='Tools'),
        type?: string(name='Type', description='This parameter is required.', example='CUSTOM'),
      }
    ](name='Commands'),
  }(name='BindingConfig'),
  conversationConfig?: {
    asrModel?: string(name='AsrModel', example='xxx'),
    openAsr?: boolean(name='OpenAsr'),
    openTts?: boolean(name='OpenTts'),
    ttsModel?: string(name='TtsModel', example='xxx'),
  }(name='ConversationConfig'),
  modelConfig?: {
    historyLimit?: int32(name='HistoryLimit', example='5'),
    modelType?: string(name='ModelType', example='MMH'),
    openWebSearch?: boolean(name='OpenWebSearch'),
    textModal?: string(name='TextModal', example='xxxx'),
  }(name='ModelConfig'),
  prompt?: string(name='Prompt', example='提示词'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model CreateMmAppShrinkRequest {
  appName?: string(name='AppName', description='This parameter is required.', example='多模态xxx'),
  bindingConfigShrink?: string(name='BindingConfig'),
  conversationConfigShrink?: string(name='ConversationConfig'),
  modelConfigShrink?: string(name='ModelConfig'),
  prompt?: string(name='Prompt', example='提示词'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model CreateMmAppResponseBody = {
  appId?: string(name='AppId', example='mm-xxxx'),
  requestId?: string(name='RequestId', example='xxxx'),
}

model CreateMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMmAppResponseBody(name='body'),
}

/**
 * @summary 创建多模态应用
 *
 * @param tmpReq CreateMmAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMmAppResponse
 */
async function createMmAppWithOptions(tmpReq: CreateMmAppRequest, runtime: Util.RuntimeOptions): CreateMmAppResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMmAppShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bindingConfig)) {
    request.bindingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bindingConfig, 'BindingConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.conversationConfig)) {
    request.conversationConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.conversationConfig, 'ConversationConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.modelConfig)) {
    request.modelConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.modelConfig, 'ModelConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bindingConfigShrink)) {
    query['BindingConfig'] = request.bindingConfigShrink;
  }
  if (!Util.isUnset(request.conversationConfigShrink)) {
    query['ConversationConfig'] = request.conversationConfigShrink;
  }
  if (!Util.isUnset(request.modelConfigShrink)) {
    query['ModelConfig'] = request.modelConfigShrink;
  }
  if (!Util.isUnset(request.prompt)) {
    query['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMmApp',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建多模态应用
 *
 * @param request CreateMmAppRequest
 * @return CreateMmAppResponse
 */
async function createMmApp(request: CreateMmAppRequest): CreateMmAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMmAppWithOptions(request, runtime);
}

model DeleteCommandRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_xxxxx'),
  domainCode?: string(name='DomainCode', description='This parameter is required.', example='7533545'),
  toolId?: string(name='ToolId', description='This parameter is required.', example='564646456'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxxx'),
}

model DeleteCommandResponseBody = {
  requestId?: string(name='RequestId', example='xxxx-xx'),
  success?: boolean(name='Success'),
}

model DeleteCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCommandResponseBody(name='body'),
}

/**
 * @summary 删除指令
 *
 * @param request DeleteCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCommandResponse
 */
async function deleteCommandWithOptions(request: DeleteCommandRequest, runtime: Util.RuntimeOptions): DeleteCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!Util.isUnset(request.toolId)) {
    query['ToolId'] = request.toolId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCommand',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指令
 *
 * @param request DeleteCommandRequest
 * @return DeleteCommandResponse
 */
async function deleteCommand(request: DeleteCommandRequest): DeleteCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCommandWithOptions(request, runtime);
}

model DeleteMmAppRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_xxxx'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model DeleteMmAppResponseBody = {
  requestId?: string(name='RequestId', example='xxxxx'),
  success?: boolean(name='Success'),
}

model DeleteMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMmAppResponseBody(name='body'),
}

/**
 * @summary 删除多模态应用
 *
 * @param request DeleteMmAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMmAppResponse
 */
async function deleteMmAppWithOptions(request: DeleteMmAppRequest, runtime: Util.RuntimeOptions): DeleteMmAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMmApp',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除多模态应用
 *
 * @param request DeleteMmAppRequest
 * @return DeleteMmAppResponse
 */
async function deleteMmApp(request: DeleteMmAppRequest): DeleteMmAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMmAppWithOptions(request, runtime);
}

model DescribeCommandRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm-xxxxx'),
  domainCode?: string(name='DomainCode', description='This parameter is required.', example='343894343'),
  toolId?: string(name='ToolId', description='This parameter is required.', example='4864343453445'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model DescribeCommandResponseBody = {
  appId?: string(name='AppId', example='mm_xxxx'),
  createUserId?: string(name='CreateUserId', example='232423'),
  createUserName?: string(name='CreateUserName', example='sdsd'),
  description?: string(name='Description', example='xxxx'),
  domainCode?: string(name='DomainCode', example='56632343'),
  domainName?: string(name='DomainName', example='xccvsd'),
  gmtCreate?: string(name='GmtCreate', example='xxx'),
  gmtModified?: string(name='GmtModified', example='xxx'),
  modifyUserId?: string(name='ModifyUserId', example='57967'),
  modifyUserName?: string(name='ModifyUserName', example='xxx'),
  requestId?: string(name='RequestId', example='xxxx'),
  toolExamples?: [ 
    {
      query?: string(name='Query', example='xxx'),
    }
  ](name='ToolExamples'),
  toolId?: string(name='ToolId', example='65655'),
  toolName?: string(name='ToolName', example='dsf34'),
  toolParams?: [ 
    {
      paramDesc?: string(name='ParamDesc', example='xxx'),
      paramExample?: string(name='ParamExample', example='xxx'),
      paramName?: string(name='ParamName', example='xxx'),
    }
  ](name='ToolParams'),
}

model DescribeCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCommandResponseBody(name='body'),
}

/**
 * @summary 指令详情
 *
 * @param request DescribeCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCommandResponse
 */
async function describeCommandWithOptions(request: DescribeCommandRequest, runtime: Util.RuntimeOptions): DescribeCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!Util.isUnset(request.toolId)) {
    query['ToolId'] = request.toolId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommand',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 指令详情
 *
 * @param request DescribeCommandRequest
 * @return DescribeCommandResponse
 */
async function describeCommand(request: DescribeCommandRequest): DescribeCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommandWithOptions(request, runtime);
}

model DescribeMmAppRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_xxxxx'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxx'),
}

model DescribeMmAppResponseBody = {
  appId?: string(name='AppId', example='mm_xxxx'),
  appName?: string(name='AppName', example='多模态应用xxxx'),
  conversationConfig?: {
    asrModel?: string(name='AsrModel', example='xxxx'),
    openAsr?: boolean(name='OpenAsr'),
    openTts?: boolean(name='OpenTts'),
    ttsModel?: string(name='TtsModel', example='xxxx'),
  }(name='ConversationConfig'),
  createUserId?: string(name='CreateUserId', example='243433'),
  createUserName?: string(name='CreateUserName', example='xxxx'),
  gmtCreate?: string(name='GmtCreate', example='xxx'),
  gmtModified?: string(name='GmtModified', example='xxx'),
  modelConfig?: {
    historyLimit?: int32(name='HistoryLimit', example='5'),
    modelType?: string(name='ModelType', example='MMH'),
    openWebSearch?: boolean(name='OpenWebSearch'),
    textModal?: string(name='TextModal', example='xxxx'),
  }(name='ModelConfig'),
  modifyUserId?: string(name='ModifyUserId', example='56673435'),
  modifyUserName?: string(name='ModifyUserName', example='xxxx'),
  prompt?: string(name='Prompt', example='提示词xxxx'),
  publishVersion?: long(name='PublishVersion', example='1'),
  requestId?: string(name='RequestId', example='xxxx'),
  status?: string(name='Status', example='1'),
}

model DescribeMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMmAppResponseBody(name='body'),
}

/**
 * @summary 多模态应用详情
 *
 * @param request DescribeMmAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMmAppResponse
 */
async function describeMmAppWithOptions(request: DescribeMmAppRequest, runtime: Util.RuntimeOptions): DescribeMmAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMmApp',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 多模态应用详情
 *
 * @param request DescribeMmAppRequest
 * @return DescribeMmAppResponse
 */
async function describeMmApp(request: DescribeMmAppRequest): DescribeMmAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMmAppWithOptions(request, runtime);
}

model ListCommandRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_xxxx'),
  domainCode?: string(name='DomainCode', description='This parameter is required.', example='8453564564'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  toolName?: string(name='ToolName', example='xl-sxx'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxx'),
}

model ListCommandResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='xxx'),
  toolInfoList?: [ 
    {
      appId?: string(name='AppId', example='mm-xxx'),
      createUserId?: string(name='CreateUserId', example='676776778678'),
      createUserName?: string(name='CreateUserName', example='xxx'),
      description?: string(name='Description', example='xxx'),
      domainCode?: string(name='DomainCode', example='44574578797'),
      domainName?: string(name='DomainName', example='xxh_xx'),
      gmtCreate?: string(name='GmtCreate', example='xxx'),
      gmtModified?: string(name='GmtModified', example='xxxx'),
      modifyUserId?: string(name='ModifyUserId', example='2334346345'),
      modifyUserName?: string(name='ModifyUserName', example='xxx'),
      toolExamples?: [ 
        {
          query?: string(name='Query', example='xxx'),
        }
      ](name='ToolExamples'),
      toolId?: string(name='ToolId', example='6734396796'),
      toolName?: string(name='ToolName', example='sxxxx'),
      toolParams?: [ 
        {
          paramDesc?: string(name='ParamDesc', example='xxx'),
          paramExample?: string(name='ParamExample', example='xx'),
          paramName?: string(name='ParamName', example='xxxx'),
        }
      ](name='ToolParams'),
    }
  ](name='ToolInfoList'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCommandResponseBody(name='body'),
}

/**
 * @summary 指令列表
 *
 * @param request ListCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCommandResponse
 */
async function listCommandWithOptions(request: ListCommandRequest, runtime: Util.RuntimeOptions): ListCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.toolName)) {
    query['ToolName'] = request.toolName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCommand',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 指令列表
 *
 * @param request ListCommandRequest
 * @return ListCommandResponse
 */
async function listCommand(request: ListCommandRequest): ListCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCommandWithOptions(request, runtime);
}

model ListMmAppRequest {
  keyword?: string(name='Keyword', example='多模态'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  status?: int32(name='Status', example='1'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model ListMmAppResponseBody = {
  appInfoList?: [ 
    {
      appId?: string(name='AppId', example='mm_xxxx'),
      appName?: string(name='AppName', example='多模态'),
      conversationConfig?: {
        asrModel?: string(name='AsrModel', example='xxx'),
        openAsr?: boolean(name='OpenAsr'),
        openTts?: boolean(name='OpenTts'),
        ttsModel?: string(name='TtsModel', example='xxx'),
      }(name='ConversationConfig'),
      createUserId?: string(name='CreateUserId', example='454564'),
      createUserName?: string(name='CreateUserName', example='xxx'),
      gmtCreate?: string(name='GmtCreate', example='xxx'),
      gmtModified?: string(name='GmtModified', example='xxx'),
      modelConfig?: {
        historyLimit?: string(name='HistoryLimit', example='5'),
        modelType?: string(name='ModelType', example='MMH'),
        openWebSearch?: boolean(name='OpenWebSearch'),
        textModal?: string(name='TextModal', example='xxx'),
      }(name='ModelConfig'),
      modifyUserId?: string(name='ModifyUserId', example='56445'),
      modifyUserName?: string(name='ModifyUserName', example='xxx'),
      prompt?: string(name='Prompt', example='提示词'),
      publishVersion?: long(name='PublishVersion', example='1'),
      status?: int32(name='Status', example='1'),
    }
  ](name='AppInfoList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='xxxx'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmAppResponseBody(name='body'),
}

/**
 * @summary 获取多模态应用列表
 *
 * @param request ListMmAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMmAppResponse
 */
async function listMmAppWithOptions(request: ListMmAppRequest, runtime: Util.RuntimeOptions): ListMmAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMmApp',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取多模态应用列表
 *
 * @param request ListMmAppRequest
 * @return ListMmAppResponse
 */
async function listMmApp(request: ListMmAppRequest): ListMmAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMmAppWithOptions(request, runtime);
}

model ListPublishedMmAppRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_xxx'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model ListPublishedMmAppResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  publishedVersionInfoList?: [ 
    {
      appId?: string(name='AppId', example='mm_xxx'),
      appName?: string(name='AppName', example='多模态应用xxx'),
      createUserId?: string(name='CreateUserId', example='234343'),
      createUserName?: string(name='CreateUserName', example='ccccc'),
      description?: string(name='Description', example='xxxx'),
      gmtCreate?: string(name='GmtCreate', example='xxxx'),
      publishTime?: string(name='PublishTime', example='xxxx'),
      version?: long(name='Version', example='1'),
    }
  ](name='PublishedVersionInfoList'),
  requestId?: string(name='RequestId', example='xxxxxx'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListPublishedMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublishedMmAppResponseBody(name='body'),
}

/**
 * @summary 应用发布列表
 *
 * @param request ListPublishedMmAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPublishedMmAppResponse
 */
async function listPublishedMmAppWithOptions(request: ListPublishedMmAppRequest, runtime: Util.RuntimeOptions): ListPublishedMmAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPublishedMmApp',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 应用发布列表
 *
 * @param request ListPublishedMmAppRequest
 * @return ListPublishedMmAppResponse
 */
async function listPublishedMmApp(request: ListPublishedMmAppRequest): ListPublishedMmAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublishedMmAppWithOptions(request, runtime);
}

model PublishMmAppRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_xxxx'),
  description?: string(name='Description', example='xxxxx'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model PublishMmAppResponseBody = {
  requestId?: string(name='RequestId', example='xxxxx'),
  success?: boolean(name='Success'),
}

model PublishMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishMmAppResponseBody(name='body'),
}

/**
 * @summary 多模态应用发布
 *
 * @param request PublishMmAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishMmAppResponse
 */
async function publishMmAppWithOptions(request: PublishMmAppRequest, runtime: Util.RuntimeOptions): PublishMmAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishMmApp',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 多模态应用发布
 *
 * @param request PublishMmAppRequest
 * @return PublishMmAppResponse
 */
async function publishMmApp(request: PublishMmAppRequest): PublishMmAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishMmAppWithOptions(request, runtime);
}

model UpdateCommandRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_axaxaaa'),
  domainCode?: string(name='DomainCode', example='659864545'),
  domainName?: string(name='DomainName', example='shopping_t'),
  toolDescription?: string(name='ToolDescription', description='This parameter is required.', example='xxxx'),
  toolExamples?: [ 
    {
      query?: string(name='Query', example='给我xxx'),
    }
  ](name='ToolExamples'),
  toolId?: string(name='ToolId', description='This parameter is required.', example='8293382932xxx'),
  toolName?: string(name='ToolName', description='This parameter is required.', example='open_bx'),
  toolParams?: [ 
    {
      paramDesc?: string(name='ParamDesc', example='xxx'),
      paramExample?: string(name='ParamExample', example='xxx'),
      paramName?: string(name='ParamName', example='xxxx'),
    }
  ](name='ToolParams'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model UpdateCommandShrinkRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_axaxaaa'),
  domainCode?: string(name='DomainCode', example='659864545'),
  domainName?: string(name='DomainName', example='shopping_t'),
  toolDescription?: string(name='ToolDescription', description='This parameter is required.', example='xxxx'),
  toolExamplesShrink?: string(name='ToolExamples'),
  toolId?: string(name='ToolId', description='This parameter is required.', example='8293382932xxx'),
  toolName?: string(name='ToolName', description='This parameter is required.', example='open_bx'),
  toolParamsShrink?: string(name='ToolParams'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxx'),
}

model UpdateCommandResponseBody = {
  requestId?: string(name='RequestId', example='xxx'),
  success?: boolean(name='Success'),
}

model UpdateCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCommandResponseBody(name='body'),
}

/**
 * @summary 指令更新
 *
 * @param tmpReq UpdateCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCommandResponse
 */
async function updateCommandWithOptions(tmpReq: UpdateCommandRequest, runtime: Util.RuntimeOptions): UpdateCommandResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.toolExamples)) {
    request.toolExamplesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toolExamples, 'ToolExamples', 'json');
  }
  if (!Util.isUnset(tmpReq.toolParams)) {
    request.toolParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toolParams, 'ToolParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.toolDescription)) {
    query['ToolDescription'] = request.toolDescription;
  }
  if (!Util.isUnset(request.toolExamplesShrink)) {
    query['ToolExamples'] = request.toolExamplesShrink;
  }
  if (!Util.isUnset(request.toolId)) {
    query['ToolId'] = request.toolId;
  }
  if (!Util.isUnset(request.toolName)) {
    query['ToolName'] = request.toolName;
  }
  if (!Util.isUnset(request.toolParamsShrink)) {
    query['ToolParams'] = request.toolParamsShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCommand',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 指令更新
 *
 * @param request UpdateCommandRequest
 * @return UpdateCommandResponse
 */
async function updateCommand(request: UpdateCommandRequest): UpdateCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCommandWithOptions(request, runtime);
}

model UpdateMmAppRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_xxx'),
  appName?: string(name='AppName', description='This parameter is required.', example='多模态应用xxxxx'),
  bindingConfig?: {
    commands?: [ 
      {
        domainCode?: string(name='DomainCode', description='This parameter is required.', example='724366858658'),
        tools?: [ 
          {
            toolId?: string(name='ToolId', description='This parameter is required.', example='7293782043943'),
          }
        ](name='Tools'),
        type?: string(name='Type', description='This parameter is required.', example='CUSTOM'),
      }
    ](name='Commands'),
  }(name='BindingConfig'),
  conversationConfig?: {
    asrModel?: string(name='AsrModel', example='Paraformer'),
    openAsr?: boolean(name='OpenAsr'),
    openTts?: boolean(name='OpenTts'),
    ttsModel?: string(name='TtsModel', example='cosyvoice-v2'),
  }(name='ConversationConfig'),
  modelConfig?: {
    historyLimit?: int32(name='HistoryLimit', example='5'),
    modelType?: string(name='ModelType', example='MMH'),
    openWebSearch?: boolean(name='OpenWebSearch'),
    textModal?: string(name='TextModal', example='qwen-mmh-high-speed'),
  }(name='ModelConfig'),
  prompt?: string(name='Prompt', example='提示词，不超过8000字符'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxx'),
}

model UpdateMmAppShrinkRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='mm_xxx'),
  appName?: string(name='AppName', description='This parameter is required.', example='多模态应用xxxxx'),
  bindingConfigShrink?: string(name='BindingConfig'),
  conversationConfigShrink?: string(name='ConversationConfig'),
  modelConfigShrink?: string(name='ModelConfig'),
  prompt?: string(name='Prompt', example='提示词，不超过8000字符'),
  workspaceId?: string(name='WorkspaceId', example='llm-xxxx'),
}

model UpdateMmAppResponseBody = {
  requestId?: string(name='RequestId', example='xxxx'),
  success?: boolean(name='Success'),
}

model UpdateMmAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMmAppResponseBody(name='body'),
}

/**
 * @summary 多模态应用更新
 *
 * @param tmpReq UpdateMmAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMmAppResponse
 */
async function updateMmAppWithOptions(tmpReq: UpdateMmAppRequest, runtime: Util.RuntimeOptions): UpdateMmAppResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMmAppShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bindingConfig)) {
    request.bindingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bindingConfig, 'BindingConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.conversationConfig)) {
    request.conversationConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.conversationConfig, 'ConversationConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.modelConfig)) {
    request.modelConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.modelConfig, 'ModelConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bindingConfigShrink)) {
    query['BindingConfig'] = request.bindingConfigShrink;
  }
  if (!Util.isUnset(request.conversationConfigShrink)) {
    query['ConversationConfig'] = request.conversationConfigShrink;
  }
  if (!Util.isUnset(request.modelConfigShrink)) {
    query['ModelConfig'] = request.modelConfigShrink;
  }
  if (!Util.isUnset(request.prompt)) {
    query['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMmApp',
    version = '2025-09-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 多模态应用更新
 *
 * @param request UpdateMmAppRequest
 * @return UpdateMmAppResponse
 */
async function updateMmApp(request: UpdateMmAppRequest): UpdateMmAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMmAppWithOptions(request, runtime);
}

