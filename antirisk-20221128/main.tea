/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('antirisk', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetZidTagByAtokenRequest {
  atoken?: string(name='atoken'),
  channel?: string(name='channel'),
  dataSourceId?: string(name='dataSourceId'),
}

model GetZidTagByAtokenResponseBody = {
  msg?: string(name='Msg'),
  code?: long(name='code'),
  data?: {
    aHook?: string(name='aHook'),
    debug?: string(name='debug'),
    doubleOpen?: string(name='doubleOpen'),
    javaHook?: string(name='javaHook'),
    javaHookCount?: string(name='javaHookCount'),
    nativeHook?: string(name='nativeHook'),
    nativeHookCount?: string(name='nativeHookCount'),
    root?: string(name='root'),
    simulator?: string(name='simulator'),
    version?: string(name='version'),
    vpnProxy?: string(name='vpnProxy'),
    wifiProxy?: string(name='wifiProxy'),
    zid?: string(name='zid'),
  }(name='data'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GetZidTagByAtokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetZidTagByAtokenResponseBody(name='body'),
}

async function getZidTagByAtoken(request: GetZidTagByAtokenRequest): GetZidTagByAtokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getZidTagByAtokenWithOptions(request, headers, runtime);
}

async function getZidTagByAtokenWithOptions(request: GetZidTagByAtokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetZidTagByAtokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.atoken)) {
    query['atoken'] = request.atoken;
  }
  if (!Util.isUnset(request.channel)) {
    query['channel'] = request.channel;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    query['dataSourceId'] = request.dataSourceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetZidTagByAtoken',
    version = '2022-11-28',
    protocol = 'HTTPS',
    pathname = `/anti/getZidTagByAtoken`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

