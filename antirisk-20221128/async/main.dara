/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'antirisk';
  @version = '2022-11-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetRealTimeRiskInfoRequest {
  atoken: string(name='atoken', example='Ab63aqUKx9TmYRhPV7LnRLybLRQOEG6GQsr-oGlT8bo6-_z_oYxTqqutBz6R0dBognMN1DBvZImDadsKb8k_Hfcj8A8nrXtxch_nKVg5xARkRmMU2SU=', position='Query'),
  dataSourceId: string(name='dataSourceId', example='62c792d188ccdf4b7ec1aa38', position='Query'),
  extra?: string(name='extra', example='360risk', position='Query'),
}

model GetRealTimeRiskInfoResponseBody = {
  msg?: string(name='Msg'),
  code?: long(name='code', example='200'),
  data?: {
    appChannel?: string(name='appChannel', example='360market'),
    fakeDevice?: string(name='fakeDevice', example='1'),
    idfa?: string(name='idfa', example='00000000-0000-0000-0000-000000000000'),
    oaid?: string(name='oaid', example='sf58rw7erdfdgdgseeg2434'),
    proxyDevice?: string(name='proxyDevice', example='0'),
    riskLevel?: string(name='riskLevel', example='RISK'),
    riskScore?: string(name='riskScore', example='60'),
    zid?: string(name='zid', example='815E045B-4A9E-AA76-BEFF-048C9B9F651A'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId', example='2343535353DF8984565'),
  success?: boolean(name='success', example='true'),
}

model GetRealTimeRiskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealTimeRiskInfoResponseBody(name='body'),
}

async function getRealTimeRiskInfo(request: GetRealTimeRiskInfoRequest): GetRealTimeRiskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRealTimeRiskInfo', 'GET', '/anti/getRealTimeRiskInfo', 'json', false, 'json', request);
}

model GetZidTagByAtokenRequest {
  atoken: string(name='atoken', description='atoken', example='AcNh1pZFEJ9wEO1RkqK2S9Qt0DHxZR6riGmx4CpGrxCpf3_LxvQNQQGaLjGWRg_-Un1yC47qfEiwRysoCJgQrBSa7b274rzhuIW4QDer7J41X18PiHI=', position='Query'),
  dataSourceId: string(name='dataSourceId', example='59892ebcaed179694b000104', position='Query'),
}

model GetZidTagByAtokenResponseBody = {
  msg?: string(name='Msg'),
  code?: long(name='code', description='code', example='200'),
  data?: {
    aHook?: string(name='aHook', description='aHook', example='1'),
    debug?: string(name='debug', example='1'),
    doubleOpen?: string(name='doubleOpen', example='0'),
    javaHook?: string(name='javaHook', description='javaHook', example='1'),
    nativeHook?: string(name='nativeHook', example='1'),
    root?: string(name='root', example='1'),
    simulator?: string(name='simulator', example='1'),
    vpnProxy?: string(name='vpnProxy', example='0'),
    wifiProxy?: string(name='wifiProxy', example='1'),
    zid?: string(name='zid', example='F6DD4AD2-B7B8-AA3A-34B8-EDE55FC82FC6'),
  }(name='data'),
  requestId?: string(name='requestId', example='2343535353DF8984565'),
  success?: boolean(name='success', description='success', example='true'),
}

model GetZidTagByAtokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetZidTagByAtokenResponseBody(name='body'),
}

async function getZidTagByAtoken(request: GetZidTagByAtokenRequest): GetZidTagByAtokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetZidTagByAtoken', 'GET', '/anti/getZidTagByAtoken', 'json', false, 'json', request);
}

model GetZidTagScoreByAtokenRequest {
  atoken: string(name='atoken', description='atoken', example='AcNh1pZFEJ9wEO1RkqK2S9Qt0DHxZR6riGmx4CpGrxCpf3_LxvQNQQGaLjGWRg_-Un1yC47qfEiwRysoCJgQrBSa7b274rzhuIW4QDer7J41X18PiHI=', position='Query'),
  dataSourceId: string(name='dataSourceId', example='59892ebcaed179694b000104', position='Query'),
}

model GetZidTagScoreByAtokenResponseBody = {
  code?: long(name='Code', description='code', example='OK'),
  msg?: string(name='Msg'),
  data?: {
    aHook?: string(name='aHook', description='aHook', example='0'),
    debug?: string(name='debug', example='1'),
    doubleOpen?: string(name='doubleOpen', example='1'),
    javaHook?: string(name='javaHook', description='javaHook', example='0'),
    nativeHook?: string(name='nativeHook', example='0'),
    riskLevel?: string(name='riskLevel', example='RISK'),
    riskScore?: string(name='riskScore', example='60'),
    root?: string(name='root', example='0'),
    simulator?: string(name='simulator', example='1'),
    vpnProxy?: string(name='vpnProxy', example='0'),
    wifiProxy?: string(name='wifiProxy', example='0'),
    zid?: string(name='zid', example='F6DD4AD2-B7B8-AA3A-34B8-EDE55FC82FC6'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId', example='2343535353DF8984565'),
  success?: boolean(name='success', description='success', example='true'),
}

model GetZidTagScoreByAtokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetZidTagScoreByAtokenResponseBody(name='body'),
}

async function getZidTagScoreByAtoken(request: GetZidTagScoreByAtokenRequest): GetZidTagScoreByAtokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetZidTagScoreByAtoken', 'GET', '/anti/getZidTagScoreByAtoken', 'json', false, 'json', request);
}

model ListChannelRiskDetailsRequest {
  channel?: string(name='channel', example='360market', position='Query'),
  dataSourceId: string(name='dataSourceId', example='59892ebcaed179694b000104', position='Query'),
  end: string(name='end', example='20230418', position='Query'),
  isAllChannel?: string(name='isAllChannel', example='1', position='Query'),
  start: string(name='start', example='20230418', position='Query'),
}

model ListChannelRiskDetailsResponseBody = {
  msg?: string(name='Msg'),
  code?: long(name='code', example='200'),
  data?: {
    riskDetails?: [ 
      {
        an?: string(name='an', example='0'),
        av?: string(name='av', example='v1.1.0'),
        bn?: string(name='bn', example='1'),
        c?: string(name='c', example='360market'),
        date?: string(name='date', example='20230410'),
        fd?: string(name='fd', example='1'),
        idfa?: string(name='idfa', example='0000-0000-0000000'),
        jb?: string(name='jb', example='0'),
        oaid?: string(name='oaid', example='343rUFD834343KJDDFS'),
        py?: string(name='py', example='1'),
        rl?: string(name='rl', example='RISK'),
        rs?: string(name='rs', example='60'),
        zid?: string(name='zid', example='815E045B-4A9E-AA76-BEFF-048C9B9F651A'),
      }
    ](name='riskDetails'),
    riskSumary?: [ 
      {
        date?: string(name='date', example='20230418'),
        riskZidEmuDistinctNew?: string(name='riskZidEmuDistinctNew', example='2'),
      }
    ](name='riskSumary'),
  }(name='data'),
  requestId?: string(name='requestId', example='2343535353DF8984565'),
  success?: boolean(name='success', example='true'),
}

model ListChannelRiskDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChannelRiskDetailsResponseBody(name='body'),
}

async function listChannelRiskDetails(request: ListChannelRiskDetailsRequest): ListChannelRiskDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListChannelRiskDetails', 'GET', '/anti/listChannelRiskDetails', 'json', false, 'json', request);
}

model ListUninstallDetailRequest {
  dataSourceId: string(name='dataSourceId', example='62c792d188ccdf4b7ec1aa38', position='Query'),
  endDs: string(name='endDs', example='20231120', position='Query'),
  startDs: string(name='startDs', example='20231120', position='Query'),
}

model ListUninstallDetailResponseBody = {
  msg?: string(name='Msg', description='msg'),
  success?: boolean(name='Success', description='success', example='True'),
  code?: long(name='code', description='code', example='200'),
  data?: {
    details?: [ 
      {
        activeDatetime?: string(name='activeDatetime', example='1700278078773'),
        city?: string(name='city', example='阳江市'),
        deviceBrand?: string(name='deviceBrand', description='deviceBrand', example='HONOR'),
        deviceModel?: string(name='deviceModel', description='deviceModel', example='KOZ-AL00'),
        firstActiveDatetime?: string(name='firstActiveDatetime', description='firstActiveDatetime', example='2023-11-12 22:41:46'),
        idfa?: string(name='idfa', description='idfa', example='5ce253a8-2917-44da-a1fe-9d21051f9015'),
        imei?: string(name='imei', description='imei', example='None'),
        installAppVersion?: string(name='installAppVersion', description='installAppVersion', example='23.05.06'),
        installChannel?: string(name='installChannel', description='installChannel', example='umeng'),
        oaid?: string(name='oaid', description='oaid', example='ai357e2b5358797ddc'),
        osVersion?: string(name='osVersion', description='osVersion', example='10'),
        puid?: string(name='puid', description='puid', example='zhangfei'),
        umid?: string(name='umid', example='ai357e2b5358797ddc1857a66deb6b5d14'),
        uninstallCount?: int32(name='uninstallCount', example='3'),
        uninstallDatetime?: string(name='uninstallDatetime', example='20231118'),
        zid?: string(name='zid', description='zid', example='ddc1857a66deb6b5'),
      }
    ](name='details'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId', example='8797ddc1857a66deb6b5d14'),
}

model ListUninstallDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUninstallDetailResponseBody(name='body'),
}

async function listUninstallDetail(request: ListUninstallDetailRequest): ListUninstallDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUninstallDetail', 'GET', '/uninstall/listUninstallDetail', 'json', false, 'json', request);
}

