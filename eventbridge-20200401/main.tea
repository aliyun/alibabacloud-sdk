/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eventbridge', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateApiDestinationRequest {
  apiDestinationName?: string(name='ApiDestinationName', example='api-destination-name'),
  connectionName?: string(name='ConnectionName', example='connection-name'),
  description?: string(name='Description'),
  httpApiParameters?: {
    endpoint?: string(name='Endpoint', example='http://127.0.0.1:8001/api'),
    method?: string(name='Method', example='POST'),
  }(name='HttpApiParameters'),
  invocationRateLimitPerSecond?: long(name='InvocationRateLimitPerSecond', example='7'),
}

model CreateApiDestinationShrinkRequest {
  apiDestinationName?: string(name='ApiDestinationName', example='api-destination-name'),
  connectionName?: string(name='ConnectionName', example='connection-name'),
  description?: string(name='Description'),
  httpApiParametersShrink?: string(name='HttpApiParameters'),
  invocationRateLimitPerSecond?: long(name='InvocationRateLimitPerSecond', example='7'),
}

model CreateApiDestinationResponseBody = {
  code?: string(name='Code', example='Success'),
  date?: {
    apiDestinationName?: string(name='ApiDestinationName', example='ApiDestinationName'),
  }(name='Date'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5DAF96FB-A4B6-548C-B999-0BFDCB2261B9'),
}

model CreateApiDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApiDestinationResponseBody(name='body'),
}

async function createApiDestinationWithOptions(tmpReq: CreateApiDestinationRequest, runtime: Util.RuntimeOptions): CreateApiDestinationResponse {
  Util.validateModel(tmpReq);
  var request = new CreateApiDestinationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.httpApiParameters)) {
    request.httpApiParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.httpApiParameters, 'HttpApiParameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.apiDestinationName)) {
    query['ApiDestinationName'] = request.apiDestinationName;
  }
  if (!Util.isUnset(request.connectionName)) {
    query['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.httpApiParametersShrink)) {
    query['HttpApiParameters'] = request.httpApiParametersShrink;
  }
  if (!Util.isUnset(request.invocationRateLimitPerSecond)) {
    query['InvocationRateLimitPerSecond'] = request.invocationRateLimitPerSecond;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApiDestination',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApiDestination(request: CreateApiDestinationRequest): CreateApiDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiDestinationWithOptions(request, runtime);
}

model CreateConnectionRequest {
  authParameters?: {
    apiKeyAuthParameters?: {
      apiKeyName?: string(name='ApiKeyName', example='Token'),
      apiKeyValue?: string(name='ApiKeyValue', example='adkjnakddhdkad'),
    }(name='ApiKeyAuthParameters'),
    authorizationType?: string(name='AuthorizationType', example='BASIC_AUTH'),
    basicAuthParameters?: {
      password?: string(name='Password', example='*******'),
      username?: string(name='Username', example='admin'),
    }(name='BasicAuthParameters'),
    invocationHttpParameters?: {
      bodyParameters?: [ 
        {
          key?: string(name='Key', example='keyDemo'),
          value?: string(name='Value', example='valueDemo'),
        }
      ](name='BodyParameters'),
      headerParameters?: [ 
        {
          key?: string(name='Key', example='keyDemo'),
          value?: string(name='Value', example='valueDemo'),
        }
      ](name='HeaderParameters'),
      queryStringParameters?: [ 
        {
          key?: string(name='Key', example='keyDemo'),
          value?: string(name='Value', example='keyValue'),
        }
      ](name='QueryStringParameters'),
    }(name='InvocationHttpParameters'),
    OAuthParameters?: {
      authorizationEndpoint?: string(name='AuthorizationEndpoint', example='http://localhost:8080/oauth/token'),
      clientParameters?: {
        clientID?: string(name='ClientID', example='ClientID'),
        clientSecret?: string(name='ClientSecret', example='Qo57Q~F249~S74GmNPA36pZJoJK4f4LYPI~SS'),
      }(name='ClientParameters'),
      httpMethod?: string(name='HttpMethod', example='POST'),
      OAuthHttpParameters?: {
        bodyParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', example='false'),
            key?: string(name='Key', example='keyDemo'),
            value?: string(name='Value', example='keyValue'),
          }
        ](name='BodyParameters'),
        headerParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', example='false'),
            key?: string(name='Key', example='keyDemo'),
            value?: string(name='Value', example='keyValue'),
          }
        ](name='HeaderParameters'),
        queryStringParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', example='false'),
            key?: string(name='Key', example='keyDemo'),
            value?: string(name='Value', example='valueDemo'),
          }
        ](name='QueryStringParameters'),
      }(name='OAuthHttpParameters'),
    }(name='OAuthParameters'),
  }(name='AuthParameters'),
  connectionName?: string(name='ConnectionName', example='connection-name'),
  description?: string(name='Description', example='demo'),
  networkParameters?: {
    networkType?: string(name='NetworkType', example='PublicNetwork'),
    securityGroupId?: string(name='SecurityGroupId', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9rtyb'),
    vpcId?: string(name='VpcId', example='eb-test/vpc-bp1symadadwnwgmqud'),
    vswitcheId?: string(name='VswitcheId', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeqbt2c'),
  }(name='NetworkParameters'),
}

model CreateConnectionShrinkRequest {
  authParametersShrink?: string(name='AuthParameters'),
  connectionName?: string(name='ConnectionName', example='connection-name'),
  description?: string(name='Description', example='demo'),
  networkParametersShrink?: string(name='NetworkParameters'),
}

model CreateConnectionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    connectionName?: string(name='ConnectionName', example='connection-demo'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='7DA60DED-CD36-5837-B848-C01A23D2FAD4'),
}

model CreateConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConnectionResponseBody(name='body'),
}

async function createConnectionWithOptions(tmpReq: CreateConnectionRequest, runtime: Util.RuntimeOptions): CreateConnectionResponse {
  Util.validateModel(tmpReq);
  var request = new CreateConnectionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.authParameters)) {
    request.authParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authParameters, 'AuthParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.networkParameters)) {
    request.networkParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.networkParameters, 'NetworkParameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.authParametersShrink)) {
    query['AuthParameters'] = request.authParametersShrink;
  }
  if (!Util.isUnset(request.connectionName)) {
    query['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.networkParametersShrink)) {
    query['NetworkParameters'] = request.networkParametersShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnection',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnectionWithOptions(request, runtime);
}

model CreateEventBusRequest {
  description?: string(name='Description', example='demo'),
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
}

model CreateEventBusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    eventBusARN?: string(name='EventBusARN', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/MyEventBus'),
  }(name='Data'),
  message?: string(name='Message', example='The event bus [xxxx] not existed!'),
  requestId?: string(name='RequestId', example='A995F07C-E503-5881-9962-9CECA8566876'),
  success?: boolean(name='Success', example='true'),
}

model CreateEventBusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEventBusResponseBody(name='body'),
}

async function createEventBusWithOptions(request: CreateEventBusRequest, runtime: Util.RuntimeOptions): CreateEventBusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEventBus',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEventBus(request: CreateEventBusRequest): CreateEventBusResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventBusWithOptions(request, runtime);
}

model CreateEventSourceRequest {
  description?: bytes(name='Description', description='事件源描述详情'),
  eventBusName?: bytes(name='EventBusName', example='my-event-bus'),
  eventSourceName?: bytes(name='EventSourceName', description='事件源英文Code', example='myrabbitmq.sourc'),
  sourceHttpEventParameters?: {
    ip?: [ string ](name='Ip'),
    method?: [ string ](name='Method'),
    referer?: [ string ](name='Referer'),
    securityConfig?: string(name='SecurityConfig', example='none'),
    type?: string(name='Type', example='HTTPS'),
  }(name='SourceHttpEventParameters'),
  sourceMNSParameters?: {
    isBase64Decode?: string(name='IsBase64Decode', example='true'),
    queueName?: string(name='QueueName', example='MyQueue'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
  }(name='SourceMNSParameters'),
  sourceRabbitMQParameters?: {
    instanceId?: string(name='InstanceId', example='amqp-cn-nif22u74****'),
    queueName?: string(name='QueueName', example='demo'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    virtualHostName?: string(name='VirtualHostName', example='eb-connect'),
  }(name='SourceRabbitMQParameters'),
  sourceRocketMQParameters?: {
    groupId?: string(name='GroupId', example='GID_group1'),
    instanceId?: string(name='InstanceId', example='MQ_INST_164901546557****_BAAN****'),
    offset?: string(name='Offset', example='CONSUME_FROM_LAST_OFFSET'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    tag?: string(name='Tag', example='test'),
    timestamp?: float(name='Timestamp', example='1636597951964'),
    topic?: string(name='Topic', example='mytopic'),
  }(name='SourceRocketMQParameters'),
  sourceSLSParameters?: {
    consumePosition?: string(name='ConsumePosition', example='end'),
    logStore?: string(name='LogStore', example='test-logstore'),
    project?: string(name='Project', example='test-project'),
    roleName?: string(name='RoleName', example='testRole'),
  }(name='SourceSLSParameters', description='SourceSLSParameters'),
}

model CreateEventSourceShrinkRequest {
  description?: bytes(name='Description', description='事件源描述详情'),
  eventBusName?: bytes(name='EventBusName', example='my-event-bus'),
  eventSourceName?: bytes(name='EventSourceName', description='事件源英文Code', example='myrabbitmq.sourc'),
  sourceHttpEventParametersShrink?: string(name='SourceHttpEventParameters'),
  sourceMNSParametersShrink?: string(name='SourceMNSParameters'),
  sourceRabbitMQParametersShrink?: string(name='SourceRabbitMQParameters'),
  sourceRocketMQParametersShrink?: string(name='SourceRocketMQParameters'),
  sourceSLSParametersShrink?: string(name='SourceSLSParameters', description='SourceSLSParameters'),
}

model CreateEventSourceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    eventSourceARN?: string(name='EventSourceARN', example='acs:eventbridge:cn-hangzhou:164901546557****:eventbus/my-event-bus/eventsource/mymns.source'),
  }(name='Data'),
  message?: string(name='Message', example='Remote error. requestId: [A8EFABD2-95B9-1C46-9E01-xxxx], error code: [CreateRelatedResourceFailed], message: [Create related resource failed, EntityNotExist.Role : The role not exists: xxxx. \\r\\nRequestId : xxxx-168C-54ED-8FEB-BF11CB70AEB7]'),
  requestId?: string(name='RequestId', example='2922208e-e1c6-43ee-bfd1-aca50263bc8a'),
  success?: boolean(name='Success', example='true'),
}

model CreateEventSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEventSourceResponseBody(name='body'),
}

async function createEventSourceWithOptions(tmpReq: CreateEventSourceRequest, runtime: Util.RuntimeOptions): CreateEventSourceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEventSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sourceHttpEventParameters)) {
    request.sourceHttpEventParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceHttpEventParameters, 'SourceHttpEventParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceMNSParameters)) {
    request.sourceMNSParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceMNSParameters, 'SourceMNSParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceRabbitMQParameters)) {
    request.sourceRabbitMQParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceRabbitMQParameters, 'SourceRabbitMQParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceRocketMQParameters)) {
    request.sourceRocketMQParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceRocketMQParameters, 'SourceRocketMQParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceSLSParameters)) {
    request.sourceSLSParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceSLSParameters, 'SourceSLSParameters', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.eventBusName)) {
    body['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.eventSourceName)) {
    body['EventSourceName'] = request.eventSourceName;
  }
  if (!Util.isUnset(request.sourceHttpEventParametersShrink)) {
    body['SourceHttpEventParameters'] = request.sourceHttpEventParametersShrink;
  }
  if (!Util.isUnset(request.sourceMNSParametersShrink)) {
    body['SourceMNSParameters'] = request.sourceMNSParametersShrink;
  }
  if (!Util.isUnset(request.sourceRabbitMQParametersShrink)) {
    body['SourceRabbitMQParameters'] = request.sourceRabbitMQParametersShrink;
  }
  if (!Util.isUnset(request.sourceRocketMQParametersShrink)) {
    body['SourceRocketMQParameters'] = request.sourceRocketMQParametersShrink;
  }
  if (!Util.isUnset(request.sourceSLSParametersShrink)) {
    body['SourceSLSParameters'] = request.sourceSLSParametersShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEventSource',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEventSource(request: CreateEventSourceRequest): CreateEventSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventSourceWithOptions(request, runtime);
}

model CreateEventStreamingRequest {
  description?: string(name='Description', example='rocketmq2mns'),
  eventStreamingName?: string(name='EventStreamingName', example='myeventstreaming'),
  filterPattern?: string(name='FilterPattern'),
  runOptions?: {
    batchWindow?: {
      countBasedWindow?: int32(name='CountBasedWindow', example='100'),
      timeBasedWindow?: int32(name='TimeBasedWindow', example='10'),
    }(name='BatchWindow'),
    deadLetterQueue?: {
      arn?: string(name='Arn', example='acs:ram::1317334647812936:role/rdstoecsassumekms'),
    }(name='DeadLetterQueue'),
    errorsTolerance?: string(name='ErrorsTolerance', example='ALL'),
    maximumTasks?: long(name='MaximumTasks', example='2'),
    retryStrategy?: {
      maximumEventAgeInSeconds?: long(name='MaximumEventAgeInSeconds', example='512'),
      maximumRetryAttempts?: long(name='MaximumRetryAttempts', example='2'),
      pushRetryStrategy?: string(name='PushRetryStrategy', example='BACKOFFRETRY'),
    }(name='RetryStrategy'),
  }(name='RunOptions'),
  sink?: {
    sinkDataHubParameters?: {
      body?: {
        form?: string(name='Form', example='ORIGINAL'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Body'),
      project?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='demo-project'),
      }(name='Project'),
      roleName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='test-role'),
      }(name='RoleName'),
      topic?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='demo-topic'),
      }(name='Topic'),
      topicSchema?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='{"k1":"${k1}","k2":"${k2}"}'),
        value?: string(name='Value', example='{"k1":"value1","k2":"value2"}'),
      }(name='TopicSchema'),
      topicType?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='TUPLE'),
      }(name='TopicType'),
    }(name='SinkDataHubParameters'),
    sinkFcParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Body'),
      functionName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='myFunction'),
      }(name='FunctionName'),
      invocationType?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='Async'),
      }(name='InvocationType'),
      qualifier?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='LATEST'),
      }(name='Qualifier'),
      serviceName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='myService'),
      }(name='ServiceName'),
    }(name='SinkFcParameters'),
    sinkKafkaParameters?: {
      acks?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='1'),
      }(name='Acks'),
      instanceId?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='Defaut_1283278472_sadkj'),
      }(name='InstanceId'),
      key?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='key'),
      }(name='Key'),
      topic?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='test'),
      }(name='Topic'),
      value?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Value'),
    }(name='SinkKafkaParameters'),
    sinkMNSParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
  "key": "value"
}'),
      }(name='Body'),
      isBase64Encode?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='true'),
      }(name='IsBase64Encode'),
      queueName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='MyQueue'),
      }(name='QueueName'),
    }(name='SinkMNSParameters'),
    sinkRabbitMQParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
  "key": "value"
}'),
      }(name='Body'),
      exchange?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='a_exchange'),
      }(name='Exchange'),
      instanceId?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='a5ff91ad4f3f24947887fe184fc20d07'),
      }(name='InstanceId'),
      messageId?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
  "key": "value"
}'),
      }(name='MessageId'),
      properties?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
  "key": "value"
}'),
      }(name='Properties'),
      queueName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='MyQueue'),
      }(name='QueueName'),
      routingKey?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='housekeeping'),
      }(name='RoutingKey'),
      targetType?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='Exchange/Queue'),
      }(name='TargetType'),
      virtualHostName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='rabbit-host'),
      }(name='VirtualHostName'),
    }(name='SinkRabbitMQParameters'),
    sinkRocketMQParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
  "key": "value"
}'),
      }(name='Body'),
      instanceEndpoint?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='vbr-8vbsvkkbpf3vb0zefs7ex'),
      }(name='InstanceEndpoint'),
      instanceId?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='MQ_INST_164901546557****_BAAN****'),
      }(name='InstanceId'),
      instancePassword?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='admin'),
      }(name='InstancePassword'),
      instanceType?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='2'),
      }(name='InstanceType'),
      instanceUsername?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='admin'),
      }(name='InstanceUsername'),
      keys?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
  "key": "value"
}'),
      }(name='Keys'),
      network?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='PublicNetwork'),
      }(name='Network'),
      properties?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
  "key": "value"
}'),
      }(name='Properties'),
      securityGroupId?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='b4bf375515f6440f942e3a20c33d5b9c'),
      }(name='SecurityGroupId'),
      tags?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
  "key": "value"
}'),
      }(name='Tags'),
      topic?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='Mytopic'),
      }(name='Topic'),
      vSwitchIds?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='vbr-8vb835n3zf9shwlvbwlmp'),
      }(name='VSwitchIds'),
      vpcId?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='vbr-8vb835n3zf9shwlvbwlmp'),
      }(name='VpcId'),
    }(name='SinkRocketMQParameters', description='Sink RocketMQ Parameters'),
    sinkSLSParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Body'),
      logStore?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='test-logstore'),
      }(name='LogStore'),
      project?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='test-project'),
      }(name='Project'),
      roleName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='testRole'),
      }(name='RoleName'),
      topic?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='testTopic'),
      }(name='Topic'),
    }(name='SinkSLSParameters', description='Sink SLS Parameters'),
  }(name='Sink'),
  source?: {
    sourceDTSParameters?: {
      brokerUrl?: string(name='BrokerUrl'),
      initCheckPoint?: long(name='InitCheckPoint', example='1620962769'),
      password?: string(name='Password', example='admin'),
      sid?: string(name='Sid', example='HD3'),
      taskId?: string(name='TaskId', example='f86e5814-b223-482c-b768-3b873297dade'),
      topic?: string(name='Topic', example='LTC_CACHE_PRD'),
      username?: string(name='Username', example='admin'),
    }(name='SourceDTSParameters'),
    sourceKafkaParameters?: {
      consumerGroup?: string(name='ConsumerGroup', example='DEFAULT_GROUP'),
      instanceId?: string(name='InstanceId', example='r-8vb64581862cd814'),
      network?: string(name='Network', example='Default'),
      offsetReset?: string(name='OffsetReset', example='latest'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp1iv19sp1msc7zot4wr'),
      topic?: string(name='Topic', example='popvip_center_robot_order'),
      vSwitchIds?: string(name='VSwitchIds', example='vsw-bp179l3llg3jjxwrq72hh'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-8vblalsi0vbhizr77cbhu'),
    }(name='SourceKafkaParameters'),
    sourceMNSParameters?: {
      isBase64Decode?: boolean(name='IsBase64Decode', example='true'),
      queueName?: string(name='QueueName', example='queue_api_1642474203601'),
      regionId?: string(name='RegionId', example='cn-beijing'),
    }(name='SourceMNSParameters'),
    sourceMQTTParameters?: {
      instanceId?: string(name='InstanceId', example='r-bp1b5ncun5lqerzg4r'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      topic?: string(name='Topic', example='CANAL_VICUTU_UAT'),
    }(name='SourceMQTTParameters'),
    sourceRabbitMQParameters?: {
      instanceId?: string(name='InstanceId', example='gtm-cn-k2c2yfgzt02'),
      queueName?: string(name='QueueName', example='demo'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      virtualHostName?: string(name='VirtualHostName', example='eb-connect'),
    }(name='SourceRabbitMQParameters'),
    sourceRocketMQParameters?: {
      authType?: string(name='AuthType', example='ACL'),
      filterSql?: string(name='FilterSql', example='index > 10'),
      filterType?: string(name='FilterType', example='Tag'),
      groupID?: string(name='GroupID', example='GID_group1'),
      instanceEndpoint?: string(name='InstanceEndpoint', example='registry-vpc.cn-zhangjiakou.aliyuncs.com'),
      instanceId?: string(name='InstanceId', example='default_C56C360261515'),
      instanceNetwork?: string(name='InstanceNetwork', example='PublicNetwork'),
      instancePassword?: string(name='InstancePassword', example='admin'),
      instanceSecurityGroupId?: string(name='InstanceSecurityGroupId', example='sg-m5edtu24f123456789'),
      instanceType?: string(name='InstanceType', example='2'),
      instanceUsername?: string(name='InstanceUsername', example='admin'),
      instanceVSwitchIds?: string(name='InstanceVSwitchIds', example='vsw-m5ev8asdc6h123456789'),
      instanceVpcId?: string(name='InstanceVpcId', example='vpc-m5e3sv4b123456789'),
      network?: string(name='Network', example='PrivateNetwork'),
      offset?: string(name='Offset', example='CONSUMEFROMLAST_OFFSET'),
      regionId?: string(name='RegionId', example='cn-qingdao'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-m5edtu24f123456789'),
      tag?: string(name='Tag', example='test'),
      timestamp?: long(name='Timestamp', example='1670656652009'),
      topic?: string(name='Topic', example='Topic_publicRule_api_1667273421288'),
      vSwitchIds?: string(name='VSwitchIds', example='vsw-m5ev8asdc6h123456789'),
      vpcId?: string(name='VpcId', example='vpc-m5e3sv4b123456789'),
    }(name='SourceRocketMQParameters'),
    sourceSLSParameters?: {
      consumePosition?: string(name='ConsumePosition', example='end'),
      logStore?: string(name='LogStore', example='sas-log'),
      project?: string(name='Project', example='test'),
      roleName?: string(name='RoleName', example='testRole'),
    }(name='SourceSLSParameters'),
  }(name='Source'),
}

model CreateEventStreamingShrinkRequest {
  description?: string(name='Description', example='rocketmq2mns'),
  eventStreamingName?: string(name='EventStreamingName', example='myeventstreaming'),
  filterPattern?: string(name='FilterPattern'),
  runOptionsShrink?: string(name='RunOptions'),
  sinkShrink?: string(name='Sink'),
  sourceShrink?: string(name='Source'),
}

model CreateEventStreamingResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    eventStreamingARN?: string(name='EventStreamingARN', example='acs:eventbridge:cn-hangzhou:164901546557****:eventstreaming/myeventstreaming'),
  }(name='Data'),
  message?: string(name='Message', example='The name [xxxx] of event streaming in request is already exist!'),
  requestId?: string(name='RequestId', example='B896B484-F16D-59DE-9E23-DD0E5C361108'),
  success?: boolean(name='Success', example='true'),
}

model CreateEventStreamingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEventStreamingResponseBody(name='body'),
}

async function createEventStreamingWithOptions(tmpReq: CreateEventStreamingRequest, runtime: Util.RuntimeOptions): CreateEventStreamingResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEventStreamingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.runOptions)) {
    request.runOptionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runOptions, 'RunOptions', 'json');
  }
  if (!Util.isUnset(tmpReq.sink)) {
    request.sinkShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sink, 'Sink', 'json');
  }
  if (!Util.isUnset(tmpReq.source)) {
    request.sourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.source, 'Source', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.eventStreamingName)) {
    body['EventStreamingName'] = request.eventStreamingName;
  }
  if (!Util.isUnset(request.filterPattern)) {
    body['FilterPattern'] = request.filterPattern;
  }
  if (!Util.isUnset(request.runOptionsShrink)) {
    body['RunOptions'] = request.runOptionsShrink;
  }
  if (!Util.isUnset(request.sinkShrink)) {
    body['Sink'] = request.sinkShrink;
  }
  if (!Util.isUnset(request.sourceShrink)) {
    body['Source'] = request.sourceShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEventStreaming',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEventStreaming(request: CreateEventStreamingRequest): CreateEventStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventStreamingWithOptions(request, runtime);
}

model CreateRuleRequest {
  description?: string(name='Description'),
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
  eventTargets?: [ 
    {
      deadLetterQueue?: {
        arn?: string(name='Arn', example='acs:mns:cn-hangzhou:123456789098****:/queues/rule-deadletterqueue'),
      }(name='DeadLetterQueue'),
      endpoint?: string(name='Endpoint', example='acs:mns:cn-hangzhou:123456789098****:queues/myqueue'),
      errorsTolerance?: string(name='ErrorsTolerance'),
      id?: string(name='Id', example='12021'),
      paramList?: [ 
        {
          form?: string(name='Form', example='TEMPLATE'),
          resourceKey?: string(name='ResourceKey', example='body'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{\\"key\\"=\\"value\\"}'),
        }
      ](name='ParamList'),
      pushRetryStrategy?: string(name='PushRetryStrategy', example='BACKOFF_RETRY'),
      type?: string(name='Type', example='acs.mns.queue'),
    }
  ](name='EventTargets'),
  filterPattern?: string(name='FilterPattern', example='{\\"source\\": [{\\"prefix\\": \\"acs.\\"}],\\"type\\": [{\\"prefix\\":\\"oss:ObjectReplication\\"}],\\"subject\\":[{\\"prefix\\":\\"acs:oss:cn-hangzhou:123456789098****:my-movie-bucket/\\", \\"suffix\\":\\".txt\\"}]}'),
  ruleName?: string(name='RuleName', example='MNSRule'),
  status?: string(name='Status', example='ENABLE'),
}

model CreateRuleShrinkRequest {
  description?: string(name='Description'),
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
  eventTargetsShrink?: string(name='EventTargets'),
  filterPattern?: string(name='FilterPattern', example='{\\"source\\": [{\\"prefix\\": \\"acs.\\"}],\\"type\\": [{\\"prefix\\":\\"oss:ObjectReplication\\"}],\\"subject\\":[{\\"prefix\\":\\"acs:oss:cn-hangzhou:123456789098****:my-movie-bucket/\\", \\"suffix\\":\\".txt\\"}]}'),
  ruleName?: string(name='RuleName', example='MNSRule'),
  status?: string(name='Status', example='ENABLE'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    ruleARN?: string(name='RuleARN', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/default/rule/MNSRule'),
  }(name='Data'),
  message?: string(name='Message', example='Remote error. requestId: [xxxx], error code: [xxx], message: [The target in event rule is invalid! Endpoint is xxx'),
  requestId?: string(name='RequestId', example='1AD6D598-7506-5D2C-81EA-30E3241A903A'),
  success?: boolean(name='Success', example='true'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(tmpReq: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.eventTargets)) {
    request.eventTargetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.eventTargets, 'EventTargets', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.eventTargetsShrink)) {
    query['EventTargets'] = request.eventTargetsShrink;
  }
  if (!Util.isUnset(request.filterPattern)) {
    query['FilterPattern'] = request.filterPattern;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRule',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateServiceLinkedRoleForProductRequest {
  productName?: string(name='ProductName', example='AliyunServiceRoleForEventBridgeSendToMNS'),
}

model CreateServiceLinkedRoleForProductResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='C36345A1-75F3-5A1A-BFCF-33B8271971FA'),
  success?: boolean(name='Success', example='true'),
}

model CreateServiceLinkedRoleForProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleForProductResponseBody(name='body'),
}

async function createServiceLinkedRoleForProductWithOptions(request: CreateServiceLinkedRoleForProductRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleForProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productName)) {
    query['ProductName'] = request.productName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceLinkedRoleForProduct',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceLinkedRoleForProduct(request: CreateServiceLinkedRoleForProductRequest): CreateServiceLinkedRoleForProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleForProductWithOptions(request, runtime);
}

model CreateTargetsRequest {
  eventBusName?: string(name='EventBusName', example='eventTest'),
  ruleName?: string(name='RuleName', example='ssr-send-to-vendor-test01'),
  targets?: [ 
    {
      deadLetterQueue?: {
        arn?: string(name='Arn'),
      }(name='DeadLetterQueue'),
      endpoint?: string(name='Endpoint', example='acs:fc:cn-hangzhou:123456789098****:services/guide.LATEST/functions/HelloFC'),
      errorsTolerance?: string(name='ErrorsTolerance'),
      id?: string(name='Id', example='target5'),
      paramList?: [ 
        {
          form?: string(name='Form', example='TEMPLATE'),
          resourceKey?: string(name='ResourceKey', example='body'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{\\"key\\"=\\"value\\"}'),
        }
      ](name='ParamList'),
      pushRetryStrategy?: string(name='PushRetryStrategy', example='BACKOFFRETRY'),
      type?: string(name='Type', example='acs.fc.function'),
    }
  ](name='Targets'),
}

model CreateTargetsShrinkRequest {
  eventBusName?: string(name='EventBusName', example='eventTest'),
  ruleName?: string(name='RuleName', example='ssr-send-to-vendor-test01'),
  targetsShrink?: string(name='Targets'),
}

model CreateTargetsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    errorEntries?: [ 
      {
        entryId?: string(name='EntryId', example='target5'),
        errorCode?: string(name='ErrorCode', example='EventRuleTargetIdDuplicate'),
        errorMessage?: string(name='ErrorMessage', example='The id of event target is duplicate!'),
      }
    ](name='ErrorEntries'),
    errorEntriesCount?: int32(name='ErrorEntriesCount', example='0'),
  }(name='Data'),
  message?: string(name='Message', example='The event rule not existed!'),
  requestId?: string(name='RequestId', example='6FB52207-7621-5292-BDF2-A17E2E984160'),
  success?: boolean(name='Success', example='true'),
}

model CreateTargetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTargetsResponseBody(name='body'),
}

async function createTargetsWithOptions(tmpReq: CreateTargetsRequest, runtime: Util.RuntimeOptions): CreateTargetsResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTargetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.targets)) {
    request.targetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targets, 'Targets', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.targetsShrink)) {
    query['Targets'] = request.targetsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTargets',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTargets(request: CreateTargetsRequest): CreateTargetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTargetsWithOptions(request, runtime);
}

model DeleteApiDestinationRequest {
  apiDestinationName?: string(name='ApiDestinationName', example='ApiDestinationName'),
  clientToken?: string(name='ClientToken', example='TF-UpdateTargets-1652249330-02e00fee-cc48-4bf3-9e27-2762a25844c5'),
}

model DeleteApiDestinationResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='382E6272-8E9C-5681-AC96-A8AF0BFAC1A5'),
}

model DeleteApiDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApiDestinationResponseBody(name='body'),
}

async function deleteApiDestinationWithOptions(request: DeleteApiDestinationRequest, runtime: Util.RuntimeOptions): DeleteApiDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiDestinationName)) {
    query['ApiDestinationName'] = request.apiDestinationName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApiDestination',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApiDestination(request: DeleteApiDestinationRequest): DeleteApiDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiDestinationWithOptions(request, runtime);
}

model DeleteConnectionRequest {
  connectionName?: string(name='ConnectionName', example='connection-name'),
}

model DeleteConnectionResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='8EF25E37-1750-5D7A-BA56-F8AE081A69C8'),
}

model DeleteConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConnectionResponseBody(name='body'),
}

async function deleteConnectionWithOptions(request: DeleteConnectionRequest, runtime: Util.RuntimeOptions): DeleteConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionName)) {
    query['ConnectionName'] = request.connectionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnection',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnectionWithOptions(request, runtime);
}

model DeleteEventBusRequest {
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
}

model DeleteEventBusResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='EventBusNotExist'),
  requestId?: string(name='RequestId', example='C229E140-1A5C-5D55-8904-CFC5BA4CAA98'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEventBusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEventBusResponseBody(name='body'),
}

async function deleteEventBusWithOptions(request: DeleteEventBusRequest, runtime: Util.RuntimeOptions): DeleteEventBusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventBus',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEventBus(request: DeleteEventBusRequest): DeleteEventBusResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventBusWithOptions(request, runtime);
}

model DeleteEventSourceRequest {
  eventSourceName?: string(name='EventSourceName', description='事件源ID', example='myrabbitmq.source'),
}

model DeleteEventSourceResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='Remote error. requestId: [78B66E68-E778-1F33-84BD-xxxx], error code: [EventSourceNotExist], message: [The event source in request is not exist! ]'),
  requestId?: string(name='RequestId', example='5f80e9b3-98d5-4f51-8412-c758818a03e4'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEventSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEventSourceResponseBody(name='body'),
}

async function deleteEventSourceWithOptions(request: DeleteEventSourceRequest, runtime: Util.RuntimeOptions): DeleteEventSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventSourceName)) {
    body['EventSourceName'] = request.eventSourceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventSource',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEventSource(request: DeleteEventSourceRequest): DeleteEventSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventSourceWithOptions(request, runtime);
}

model DeleteEventStreamingRequest {
  eventStreamingName?: string(name='EventStreamingName', example='rocketmq-sync'),
}

model DeleteEventStreamingResponseBody = {
  code?: boolean(name='Code', example='Success'),
  message?: string(name='Message', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', example='499A9ACF-70CD-5D43-87F3-1B60529EE446'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEventStreamingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEventStreamingResponseBody(name='body'),
}

async function deleteEventStreamingWithOptions(request: DeleteEventStreamingRequest, runtime: Util.RuntimeOptions): DeleteEventStreamingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventStreamingName)) {
    body['EventStreamingName'] = request.eventStreamingName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventStreaming',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEventStreaming(request: DeleteEventStreamingRequest): DeleteEventStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventStreamingWithOptions(request, runtime);
}

model DeleteRuleRequest {
  eventBusName?: string(name='EventBusName', example='tf-testacc-event-bus'),
  ruleName?: string(name='RuleName', example='ramrolechange-mns'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='The event rule not existed!'),
  requestId?: string(name='RequestId', example='FF942675-F937-549C-A942-EB94FFE28DD3'),
  success?: boolean(name='Success', example='true'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRule',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DeleteTargetsRequest {
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
  ruleName?: string(name='RuleName', example='ramrolechange-mns'),
  targetIds?: [ string ](name='TargetIds'),
}

model DeleteTargetsShrinkRequest {
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
  ruleName?: string(name='RuleName', example='ramrolechange-mns'),
  targetIdsShrink?: string(name='TargetIds'),
}

model DeleteTargetsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    errorEntries?: [ 
      {
        entryId?: string(name='EntryId', example='target5'),
        errorCode?: string(name='ErrorCode', example='EventRuleTargetIdDuplicate'),
        errorMessage?: string(name='ErrorMessage', example='The id of event target is duplicate!'),
      }
    ](name='ErrorEntries'),
    errorEntriesCount?: int32(name='ErrorEntriesCount', example='0'),
  }(name='Data'),
  message?: string(name='Message', example='EventBusNotExist'),
  requestId?: string(name='RequestId', example='78FA9EAC-F0C0-58B0-871E-9F9756CE1D29'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTargetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTargetsResponseBody(name='body'),
}

async function deleteTargetsWithOptions(tmpReq: DeleteTargetsRequest, runtime: Util.RuntimeOptions): DeleteTargetsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteTargetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.targetIds)) {
    request.targetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targetIds, 'TargetIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.targetIdsShrink)) {
    query['TargetIds'] = request.targetIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTargets',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTargets(request: DeleteTargetsRequest): DeleteTargetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTargetsWithOptions(request, runtime);
}

model DisableRuleRequest {
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
  ruleName?: string(name='RuleName', example='tf-testacc-rule'),
}

model DisableRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='EventRuleNotExisted'),
  requestId?: string(name='RequestId', example='C36345A1-75F3-5A1A-BFCF-33B8271971FA'),
  success?: boolean(name='Success', example='true'),
}

model DisableRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableRuleResponseBody(name='body'),
}

async function disableRuleWithOptions(request: DisableRuleRequest, runtime: Util.RuntimeOptions): DisableRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableRule',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableRule(request: DisableRuleRequest): DisableRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableRuleWithOptions(request, runtime);
}

model EnableRuleRequest {
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
  ruleName?: string(name='RuleName', example='ramrolechange'),
}

model EnableRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='EventRuleNotExisted'),
  requestId?: string(name='RequestId', example='580A938B-6107-586C-8EC7-F22EEBEDA9E6'),
  success?: boolean(name='Success', example='true'),
}

model EnableRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableRuleResponseBody(name='body'),
}

async function enableRuleWithOptions(request: EnableRuleRequest, runtime: Util.RuntimeOptions): EnableRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableRule',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableRule(request: EnableRuleRequest): EnableRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRuleWithOptions(request, runtime);
}

model GetApiDestinationRequest {
  apiDestinationName?: string(name='ApiDestinationName', example='api-destination-name'),
  clientToken?: string(name='ClientToken', example='TF-CreateRule-1652253755-aa33f762-7e99-4aee-bd27-d3370afa5625'),
}

model GetApiDestinationResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiDestinationName?: string(name='ApiDestinationName', example='demo'),
    connectionName?: string(name='ConnectionName', example='test-basic'),
    description?: string(name='Description', example='demo'),
    gmtCreate?: long(name='GmtCreate', example='1649055710565'),
    httpApiParameters?: {
      endpoint?: string(name='Endpoint', example='http://127.0.0.1:8001/api'),
      method?: string(name='Method', example='POST'),
    }(name='HttpApiParameters'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B896B484-F16D-59DE-9E23-DD0E5C361108'),
}

model GetApiDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApiDestinationResponseBody(name='body'),
}

async function getApiDestinationWithOptions(request: GetApiDestinationRequest, runtime: Util.RuntimeOptions): GetApiDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiDestinationName)) {
    query['ApiDestinationName'] = request.apiDestinationName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApiDestination',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApiDestination(request: GetApiDestinationRequest): GetApiDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApiDestinationWithOptions(request, runtime);
}

model GetConnectionRequest {
  connectionName?: string(name='ConnectionName', example='connection-name'),
}

model GetConnectionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    connections?: [ 
      {
        apiDestinationName?: string(name='ApiDestinationName', example='test-webhook-api'),
        authParameters?: {
          apiKeyAuthParameters?: {
            apiKeyName?: string(name='ApiKeyName', example='key'),
            apiKeyValue?: string(name='ApiKeyValue', example='value'),
          }(name='ApiKeyAuthParameters'),
          authorizationType?: string(name='AuthorizationType', example='BASIC_AUTH'),
          basicAuthParameters?: {
            password?: string(name='Password', example='********'),
            username?: string(name='Username', example='admin'),
          }(name='BasicAuthParameters'),
          invocationHttpParameters?: {
            bodyParameters?: [ 
              {
                key?: string(name='Key', example='KeyTest'),
                valuValuee?: string(name='ValuValuee', example='valueTest'),
              }
            ](name='BodyParameters'),
            headerParameters?: [ 
              {
                key?: string(name='Key', example='keyDemo'),
                value?: string(name='Value', example='valueDemo'),
              }
            ](name='HeaderParameters'),
            queryStringParameters?: [ 
              {
                key?: string(name='Key', example='keyDemo'),
                value?: string(name='Value', example='valueDemo'),
              }
            ](name='QueryStringParameters'),
          }(name='InvocationHttpParameters'),
          OAuthParameters?: {
            authorizationEndpoint?: string(name='AuthorizationEndpoint', example='http://localhost:8080/oauth/token'),
            clientParameters?: {
              clientID?: string(name='ClientID', example='ClientID'),
              clientSecret?: string(name='ClientSecret', example='Qo57Q~F249~S74GmNPA36pZJoJK4f4LYPI~SS'),
            }(name='ClientParameters'),
            httpMethod?: string(name='HttpMethod', example='POST'),
            OAuthHttpParameters?: {
              bodyParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', example='false'),
                  key?: string(name='Key', example='keyDemo'),
                  value?: string(name='Value', example='valueDemo'),
                }
              ](name='BodyParameters'),
              headerParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', example='false'),
                  key?: string(name='Key', example='keyDemo'),
                  value?: string(name='Value', example='keyDemo'),
                }
              ](name='HeaderParameters'),
              queryStringParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', example='false'),
                  key?: string(name='Key', example='keyDemo'),
                  value?: string(name='Value', example='valueDemo'),
                }
              ](name='QueryStringParameters'),
            }(name='OAuthHttpParameters'),
          }(name='OAuthParameters'),
        }(name='AuthParameters'),
        connectionName?: string(name='ConnectionName', example='demo'),
        description?: string(name='Description', example='demo'),
        gmtCreate?: long(name='GmtCreate', example='1669648905'),
        id?: long(name='Id', example='5668'),
        networkParameters?: {
          networkType?: string(name='NetworkType', example='PublicNetwork'),
          securityGroupId?: string(name='SecurityGroupId', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9rtyb'),
          vpcId?: string(name='VpcId', example='eb-test/vpc-bp1symadadwnwgmqud'),
          vswitcheId?: string(name='VswitcheId', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeqbt2c'),
        }(name='NetworkParameters'),
      }
    ](name='Connections'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='34AD682D-5B91-5773-8132-AA38C130AC8E'),
}

model GetConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConnectionResponseBody(name='body'),
}

async function getConnectionWithOptions(request: GetConnectionRequest, runtime: Util.RuntimeOptions): GetConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionName)) {
    query['ConnectionName'] = request.connectionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConnection',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConnection(request: GetConnectionRequest): GetConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionWithOptions(request, runtime);
}

model GetEventBusRequest {
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
}

model GetEventBusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    createTimestamp?: long(name='CreateTimestamp', example='1641781825000'),
    description?: string(name='Description', example='demo'),
    eventBusARN?: string(name='EventBusARN', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/MyEventBus'),
    eventBusName?: string(name='EventBusName', example='MyEventBus'),
  }(name='Data'),
  message?: string(name='Message', example='EventBusNotExist'),
  requestId?: string(name='RequestId', example='d5bfc188-4452-4ba7-b73a-a9005e522439'),
  success?: boolean(name='Success', example='true'),
}

model GetEventBusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEventBusResponseBody(name='body'),
}

async function getEventBusWithOptions(request: GetEventBusRequest, runtime: Util.RuntimeOptions): GetEventBusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEventBus',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEventBus(request: GetEventBusRequest): GetEventBusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventBusWithOptions(request, runtime);
}

model GetEventStreamingRequest {
  eventStreamingName?: string(name='EventStreamingName', example='myeventstreaming'),
}

model GetEventStreamingResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    description?: string(name='Description', example='RocketMQ-to-RocketMQ'),
    eventStreamingName?: string(name='EventStreamingName', example='rocketmq-sync'),
    filterPattern?: string(name='FilterPattern'),
    runOptions?: {
      batchWindow?: {
        countBasedWindow?: int32(name='CountBasedWindow', example='100'),
        timeBasedWindow?: int32(name='TimeBasedWindow', example='10'),
      }(name='BatchWindow'),
      deadLetterQueue?: {
        arn?: string(name='Arn', example='acs:ram::1550203943326350:role/edskmstoecs'),
      }(name='DeadLetterQueue'),
      errorsTolerance?: string(name='ErrorsTolerance', example='ALL'),
      maximumTasks?: int32(name='MaximumTasks', example='2'),
      retryStrategy?: {
        maximumEventAgeInSeconds?: float(name='MaximumEventAgeInSeconds', example='512'),
        maximumRetryAttempts?: float(name='MaximumRetryAttempts', example='2'),
        pushRetryStrategy?: string(name='PushRetryStrategy', example='BACKOFFRETRY'),
      }(name='RetryStrategy'),
    }(name='RunOptions'),
    sink?: {
      sinkFcParameters?: {
        body?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Body'),
        functionName?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='mFunction'),
        }(name='FunctionName'),
        invocationType?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='Async'),
        }(name='InvocationType'),
        qualifier?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='LATEST'),
        }(name='Qualifier'),
        serviceName?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='myService'),
        }(name='ServiceName'),
      }(name='SinkFcParameters'),
      sinkKafkaParameters?: {
        acks?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='1'),
        }(name='Acks'),
        instanceId?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='Defaut_1283278472_sadkj'),
        }(name='InstanceId'),
        key?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='key'),
        }(name='Key'),
        topic?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='topic-test'),
        }(name='Topic'),
        value?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Value'),
      }(name='SinkKafkaParameters'),
      sinkMNSParameters?: {
        body?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Body'),
        isBase64Encode?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='true'),
        }(name='IsBase64Encode'),
        queueName?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='MyQueue'),
        }(name='QueueName'),
      }(name='SinkMNSParameters'),
      sinkRabbitMQParameters?: {
        body?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Body'),
        exchange?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='a_exchange'),
        }(name='Exchange'),
        instanceId?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='e5c9b727-e06c-4d7e-84d5-f8ce644e00bf'),
        }(name='InstanceId'),
        messageId?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='MessageId'),
        properties?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Properties'),
        queueName?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='MyQueue'),
        }(name='QueueName'),
        routingKey?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='housekeeping'),
        }(name='RoutingKey'),
        targetType?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='Exchange/Queue'),
        }(name='TargetType'),
        virtualHostName?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='rabbit-host'),
        }(name='VirtualHostName'),
      }(name='SinkRabbitMQParameters'),
      sinkRocketMQParameters?: {
        body?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Body'),
        instanceId?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='MQ_INST_164901546557****_BAAN****'),
        }(name='InstanceId'),
        keys?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Keys'),
        properties?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Properties'),
        tags?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Tags'),
        topic?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='Mytopic'),
        }(name='Topic'),
      }(name='SinkRocketMQParameters', description='Sink RocketMQ Parameters'),
      sinkSLSParameters?: {
        body?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Body'),
        logStore?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='test-logstore'),
        }(name='LogStore'),
        project?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='test-project'),
        }(name='Project'),
        roleName?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='testRole'),
        }(name='RoleName'),
        topic?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='testTopic'),
        }(name='Topic'),
      }(name='SinkSLSParameters', description='Sink SLS Parameters'),
    }(name='Sink'),
    source?: {
      sourceDTSParameters?: {
        brokerUrl?: string(name='BrokerUrl'),
        initCheckPoint?: string(name='InitCheckPoint', example='1620962769'),
        password?: string(name='Password', example='admin'),
        sid?: string(name='Sid', example='HD1'),
        taskId?: string(name='TaskId', example='f86e5814-b223-482c-b768-3b873297dade'),
        topic?: string(name='Topic', example='TP_TEST_UNDERWRITE_ISSUE'),
        username?: string(name='Username', example='admin'),
      }(name='SourceDTSParameters'),
      sourceKafkaParameters?: {
        consumerGroup?: string(name='ConsumerGroup', example='GID_TEST'),
        instanceId?: string(name='InstanceId', example='i-bp1fbtrnqmjvgq66ajdw'),
        network?: string(name='Network', example='Default'),
        offsetReset?: string(name='OffsetReset', example='latest'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-2vcgdxz7o1n9zappuimt'),
        topic?: string(name='Topic', example='topic_empower_1642473600414'),
        vSwitchIds?: string(name='VSwitchIds', example='vsw-wz9qqeovkwjxlu9uc8rst'),
        vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-2zehizpoendb3nwwu9w5o'),
      }(name='SourceKafkaParameters', description='Source Kafka Parameters'),
      sourceMNSParameters?: {
        isBase64Decode?: boolean(name='IsBase64Decode', example='true'),
        queueName?: string(name='QueueName', example='demo'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
      }(name='SourceMNSParameters', description='Source MNS Parameters'),
      sourceMQTTParameters?: {
        instanceId?: string(name='InstanceId', example='i-2ze06wqdwk0uq14krrzv'),
        regionId?: string(name='RegionId', example='cn-shanghai'),
        topic?: string(name='Topic', example='TOPIC-cainiao-pcs-wms-instock-noPrealertPrintLabel'),
      }(name='SourceMQTTParameters'),
      sourceRabbitMQParameters?: {
        instanceId?: string(name='InstanceId', example='i-f8z9a9mcgwri1c1idd0z'),
        queueName?: string(name='QueueName', example='comp'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        virtualHostName?: string(name='VirtualHostName', example='eb-connect'),
      }(name='SourceRabbitMQParameters', description='Source RabbitMQ Parameters'),
      sourceRocketMQParameters?: {
        groupID?: string(name='GroupID', example='GID_group1'),
        instanceId?: string(name='InstanceId', example='i-f8zbher64dlm58plyfte'),
        offset?: string(name='Offset', example='CONSUMEFROMLASTOFFSET'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        tag?: string(name='Tag', example='v1'),
        timestamp?: long(name='Timestamp', example='1636597951964'),
        topic?: string(name='Topic', example='topic_add_anima'),
      }(name='SourceRocketMQParameters', description='Source RocketMQ Parameters'),
      sourceSLSParameters?: {
        consumePosition?: string(name='ConsumePosition', example='begin'),
        consumerGroup?: string(name='ConsumerGroup'),
        logStore?: string(name='LogStore', example='waf-logstore'),
        project?: string(name='Project', example='dmmzk'),
        roleName?: string(name='RoleName', example='testRole'),
      }(name='SourceSLSParameters'),
    }(name='Source'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  message?: string(name='Message', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', example='7892F480-58C9-5067-AB35-8A7BEF0F726A'),
  success?: boolean(name='Success', example='true'),
}

model GetEventStreamingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEventStreamingResponseBody(name='body'),
}

async function getEventStreamingWithOptions(request: GetEventStreamingRequest, runtime: Util.RuntimeOptions): GetEventStreamingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventStreamingName)) {
    body['EventStreamingName'] = request.eventStreamingName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEventStreaming',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEventStreaming(request: GetEventStreamingRequest): GetEventStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventStreamingWithOptions(request, runtime);
}

model GetRuleRequest {
  eventBusName?: string(name='EventBusName', example='default'),
  ruleName?: string(name='RuleName', example='ram-changes'),
}

model GetRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    createdTimestamp?: long(name='CreatedTimestamp', example='1607071602000'),
    description?: string(name='Description', example='test'),
    eventBusName?: string(name='EventBusName', example='Housekeeping-Bus'),
    filterPattern?: string(name='FilterPattern', example='{\\"source\\":[\\"acs.oss\\"],\\"type\\":[\\"oss:BucketQueried:GetBucketStat\\"]}'),
    ruleARN?: string(name='RuleARN', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/default/rule/myRule3'),
    ruleName?: string(name='RuleName', example='ramrolechange-fc'),
    status?: string(name='Status', example='ENABLE'),
    targets?: [ 
      {
        deadLetterQueue?: {
          arn?: string(name='Arn', example='acs:eventbridge:cn-hangzhou:164901546557****:eventbus/my-event-bus/eventsource/myRocketMQ.source'),
        }(name='DeadLetterQueue'),
        detailMap?: map[string]any(name='DetailMap'),
        endpoint?: string(name='Endpoint', example='acs:mns:cn-hangzhou:123456789098****:queues/myqueue'),
        id?: string(name='Id', example='1'),
        paramList?: [ 
          {
            form?: string(name='Form', description='TEMPLATE', example='TEMPLATE'),
            resourceKey?: string(name='ResourceKey', example='body'),
            template?: string(name='Template', example='The value of ${key} is ${value}!'),
            value?: string(name='Value', example='{\\"key\\"=\\"value\\"}'),
          }
        ](name='ParamList'),
        pushRetryStrategy?: string(name='PushRetryStrategy', example='BACKOFF_RETRY'),
        pushSelector?: string(name='PushSelector', example='MATCHED_EVENT'),
        type?: string(name='Type', example='acs.mns.queue'),
      }
    ](name='Targets'),
  }(name='Data'),
  message?: string(name='Message', example='The event rule not existed!'),
  requestId?: string(name='RequestId', example='2BC1857D-E633-5E79-B2C2-43EF5F7730D8'),
  success?: boolean(name='Success', example='true'),
}

model GetRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRuleResponseBody(name='body'),
}

async function getRuleWithOptions(request: GetRuleRequest, runtime: Util.RuntimeOptions): GetRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRule',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleWithOptions(request, runtime);
}

model ListAliyunOfficialEventSourcesResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    eventSourceList?: [ 
      {
        arn?: string(name='Arn', example='acs:eventbridge:cn-hangzhou:SYSTEM:eventsource/acs.aliyuncvc'),
        ctime?: float(name='Ctime', example='1607071602000'),
        description?: string(name='Description'),
        eventBusName?: string(name='EventBusName', example='acs.aliyuncvc'),
        eventTypes?: [ 
          {
            eventSourceName?: string(name='EventSourceName', example='name'),
            groupName?: string(name='GroupName', example='aliyuncvc:MeetingEvent'),
            name?: string(name='Name', example='aliyuncvc:MeetingEvent:MeetingStateEvent'),
            shortName?: string(name='ShortName', example='MeetingStateEvent'),
          }
        ](name='EventTypes'),
        name?: string(name='Name', example='acs.aliyuncvc'),
        status?: string(name='Status', example='Activated'),
        type?: string(name='Type', example='1'),
      }
    ](name='EventSourceList'),
  }(name='Data'),
  message?: string(name='Message', example='InvalidArgument'),
  requestId?: string(name='RequestId', example='5f80e9b3-98d5-4f51-8412-c758818a03e4'),
  success?: boolean(name='Success', example='true'),
}

model ListAliyunOfficialEventSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAliyunOfficialEventSourcesResponseBody(name='body'),
}

async function listAliyunOfficialEventSourcesWithOptions(runtime: Util.RuntimeOptions): ListAliyunOfficialEventSourcesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListAliyunOfficialEventSources',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAliyunOfficialEventSources(): ListAliyunOfficialEventSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAliyunOfficialEventSourcesWithOptions(runtime);
}

model ListApiDestinationsRequest {
  apiDestinationNamePrefix?: string(name='ApiDestinationNamePrefix', example='api-demo'),
  clientToken?: string(name='ClientToken', example='TF-CreateRule-1649830065-95fc5e14-2207-4544-b7ed-ed12f6f25ac8'),
  description?: string(name='Description', example='demo'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='0'),
}

model ListApiDestinationsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiDestinations?: [ 
      {
        apiDestinationName?: string(name='ApiDestinationName', example='api-destination-2'),
        connectionName?: string(name='ConnectionName', example='connection-name'),
        description?: string(name='Description', example='demo'),
        gmtCreate?: long(name='GmtCreate', example='1665223213000'),
        httpApiParameters?: {
          endpoint?: string(name='Endpoint', example='http://127.0.0.1:8001/api'),
          method?: string(name='Method', example='POST'),
        }(name='HttpApiParameters'),
      }
    ](name='ApiDestinations'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='96D7C0AB-DCE5-5E82-96B8-4725E1706BB1'),
}

model ListApiDestinationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApiDestinationsResponseBody(name='body'),
}

async function listApiDestinationsWithOptions(request: ListApiDestinationsRequest, runtime: Util.RuntimeOptions): ListApiDestinationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiDestinationNamePrefix)) {
    query['ApiDestinationNamePrefix'] = request.apiDestinationNamePrefix;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApiDestinations',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApiDestinations(request: ListApiDestinationsRequest): ListApiDestinationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApiDestinationsWithOptions(request, runtime);
}

model ListConnectionsRequest {
  connectionNamePrefix?: string(name='ConnectionNamePrefix', example='connection-name'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='0'),
}

model ListConnectionsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    connections?: [ 
      {
        apiDestinationName?: string(name='ApiDestinationName', example='api-destination-name'),
        authParameters?: {
          apiKeyAuthParameters?: {
            apiKeyName?: string(name='ApiKeyName', example='Token'),
            apiKeyValue?: string(name='ApiKeyValue', example='asdkjnqkwejooa'),
          }(name='ApiKeyAuthParameters'),
          authorizationType?: string(name='AuthorizationType', example='BASIC_AUTH'),
          basicAuthParameters?: {
            password?: string(name='Password', example='admin'),
            username?: string(name='Username', example='admin'),
          }(name='BasicAuthParameters'),
          invocationHttpParameters?: {
            bodyParameters?: [ 
              {
                key?: string(name='Key', example='name'),
                value?: string(name='Value', example='demo'),
              }
            ](name='BodyParameters'),
            headerParameters?: [ 
              {
                key?: string(name='Key', example='name'),
                value?: string(name='Value', example='demo'),
              }
            ](name='HeaderParameters'),
            queryStringParameters?: [ 
              {
                key?: string(name='Key', example='name'),
                value?: string(name='Value', example='demo'),
              }
            ](name='QueryStringParameters'),
          }(name='InvocationHttpParameters'),
          OAuthParameters?: {
            authorizationEndpoint?: string(name='AuthorizationEndpoint', example='http://localhost:8080/oauth/token'),
            clientParameters?: {
              clientID?: string(name='ClientID', example='ClientID'),
              clientSecret?: string(name='ClientSecret', example='ClientSecret'),
            }(name='ClientParameters'),
            httpMethod?: string(name='HttpMethod', example='POST'),
            OAuthHttpParameters?: {
              bodyParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', example='false'),
                  key?: string(name='Key', example='name'),
                  value?: string(name='Value', example='demo'),
                }
              ](name='BodyParameters'),
              headerParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', example='false'),
                  key?: string(name='Key', example='name'),
                  value?: string(name='Value', example='demo'),
                }
              ](name='HeaderParameters'),
              queryStringParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', example='false'),
                  key?: string(name='Key', example='name'),
                  value?: string(name='Value', example='demo'),
                }
              ](name='QueryStringParameters'),
            }(name='OAuthHttpParameters'),
          }(name='OAuthParameters'),
        }(name='AuthParameters'),
        connectionName?: string(name='ConnectionName', example='connection-name'),
        description?: string(name='Description'),
        gmtCreate?: long(name='GmtCreate', example='1592838994234'),
        id?: long(name='Id', example='1141093'),
        networkParameters?: {
          networkType?: string(name='NetworkType', example='PublicNetwork'),
          securityGroupId?: string(name='SecurityGroupId', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9rtyb'),
          vpcId?: string(name='VpcId', example='eb-test/vpc-bp1symadadwnwgmqud'),
          vswitcheId?: string(name='VswitcheId', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeqbt2c'),
        }(name='NetworkParameters'),
      }
    ](name='Connections'),
    maxResults?: float(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='0'),
    total?: float(name='Total', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='E3619976-8714-5D88-BBA2-6983D798A8BB'),
}

model ListConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConnectionsResponseBody(name='body'),
}

async function listConnectionsWithOptions(request: ListConnectionsRequest, runtime: Util.RuntimeOptions): ListConnectionsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.connectionNamePrefix)) {
    body['ConnectionNamePrefix'] = request.connectionNamePrefix;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListConnections',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionsWithOptions(request, runtime);
}

model ListEventBusesRequest {
  limit?: int32(name='Limit', example='10'),
  namePrefix?: string(name='NamePrefix', example='My'),
  nextToken?: string(name='NextToken', example='10'),
}

model ListEventBusesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    eventBuses?: [ 
      {
        createTimestamp?: long(name='CreateTimestamp', example='1607071602000'),
        description?: string(name='Description', example='bus_description'),
        eventBusARN?: string(name='EventBusARN', example='acs:eventbridge:cn-hangzhou:123456789098***:eventbus/default'),
        eventBusName?: string(name='EventBusName', example='default'),
      }
    ](name='EventBuses'),
    nextToken?: string(name='NextToken', example='10'),
    total?: int32(name='Total', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='InvalidArgument'),
  requestId?: string(name='RequestId', example='D1DCF64A-3F2C-5323-ADCB-3F4DF30FAD2D'),
  success?: boolean(name='Success', example='true'),
}

model ListEventBusesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEventBusesResponseBody(name='body'),
}

async function listEventBusesWithOptions(request: ListEventBusesRequest, runtime: Util.RuntimeOptions): ListEventBusesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.namePrefix)) {
    query['NamePrefix'] = request.namePrefix;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEventBuses',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEventBuses(request: ListEventBusesRequest): ListEventBusesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventBusesWithOptions(request, runtime);
}

model ListEventStreamingsRequest {
  limit?: long(name='Limit', example='10'),
  namePrefix?: string(name='NamePrefix', example='name'),
  nextToken?: string(name='NextToken', example='10'),
}

model ListEventStreamingsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    eventStreamings?: [ 
      {
        description?: string(name='Description', example='demo'),
        eventStreamingName?: string(name='EventStreamingName', example='name'),
        filterPattern?: string(name='FilterPattern'),
        runOptions?: {
          batchWindow?: {
            countBasedWindow?: int32(name='CountBasedWindow', example='100'),
            timeBasedWindow?: int32(name='TimeBasedWindow', example='10'),
          }(name='BatchWindow'),
          deadLetterQueue?: {
            arn?: string(name='Arn', example='acs:ram::1597871211794192:role/aliyunsaedefaultrole'),
          }(name='DeadLetterQueue'),
          errorsTolerance?: string(name='ErrorsTolerance', example='ALL'),
          maximumTasks?: int32(name='MaximumTasks', example='2'),
          retryStrategy?: {
            maximumEventAgeInSeconds?: float(name='MaximumEventAgeInSeconds', example='512'),
            maximumRetryAttempts?: float(name='MaximumRetryAttempts', example='2'),
            pushRetryStrategy?: string(name='PushRetryStrategy', example='EXPONENTIALDECAY_RETRY'),
          }(name='RetryStrategy'),
        }(name='RunOptions'),
        sink?: {
          sinkFcParameters?: {
            body?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Body'),
            functionName?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='mFunction'),
            }(name='FunctionName'),
            invocationType?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='Async'),
            }(name='InvocationType'),
            qualifier?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='LATEST'),
            }(name='Qualifier'),
            serviceName?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='myService'),
            }(name='ServiceName'),
          }(name='SinkFcParameters'),
          sinkKafkaParameters?: {
            acks?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='1'),
            }(name='Acks'),
            instanceId?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='Defaut_1283278472_sadkj'),
            }(name='InstanceId'),
            key?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='key'),
            }(name='Key'),
            topic?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='topic'),
            }(name='Topic'),
            value?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Value'),
          }(name='SinkKafkaParameters'),
          sinkMNSParameters?: {
            body?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Body'),
            isBase64Encode?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='true'),
            }(name='IsBase64Encode'),
            queueName?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='MyQueue'),
            }(name='QueueName'),
          }(name='SinkMNSParameters'),
          sinkRabbitMQParameters?: {
            body?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Body'),
            exchange?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='a_exchange'),
            }(name='Exchange'),
            instanceId?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='si-296cd57939a1421b94ec'),
            }(name='InstanceId'),
            messageId?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='MessageId'),
            properties?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Properties'),
            queueName?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='MyQueue'),
            }(name='QueueName'),
            routingKey?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='housekeeping'),
            }(name='RoutingKey'),
            targetType?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='Queue'),
            }(name='TargetType'),
            virtualHostName?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='rabbit-host'),
            }(name='VirtualHostName'),
          }(name='SinkRabbitMQParameters'),
          sinkRocketMQParameters?: {
            body?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Body'),
            instanceId?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='MQ_INST_164901546557****_BAAN****'),
            }(name='InstanceId'),
            keys?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Keys'),
            properties?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Properties'),
            tags?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Tags'),
            topic?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='topic'),
            }(name='Topic'),
          }(name='SinkRocketMQParameters', description='Sink RocketMQ Parameters'),
          sinkSLSParameters?: {
            body?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Body'),
            logStore?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='test-logstore'),
            }(name='LogStore'),
            project?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='test-project'),
            }(name='Project'),
            roleName?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='test-role'),
            }(name='RoleName'),
            topic?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='topic'),
            }(name='Topic'),
          }(name='SinkSLSParameters', description='Sink SLS Parameters'),
        }(name='Sink'),
        source?: {
          sourceDTSParameters?: {
            brokerUrl?: string(name='BrokerUrl'),
            initCheckPoint?: string(name='InitCheckPoint', example='1620962769'),
            password?: string(name='Password', example='123456'),
            sid?: string(name='Sid', example='HG9'),
            taskId?: string(name='TaskId', example='1611b337285f44e2936a2c4170bbbb7f'),
            topic?: string(name='Topic', example='TP_TEST_UNDERWRITE_ISSUE'),
            username?: string(name='Username', example='admin'),
          }(name='SourceDTSParameters'),
          sourceKafkaParameters?: {
            consumerGroup?: string(name='ConsumerGroup', example='GID_TEST'),
            instanceId?: string(name='InstanceId', example='bastionhost-cn-i7m2gwt7z1n'),
            network?: string(name='Network', example='Default'),
            offsetReset?: string(name='OffsetReset', example='latest'),
            regionId?: string(name='RegionId', example='cn-chengdu'),
            securityGroupId?: string(name='SecurityGroupId', example='sg-5ud5f3p0rqqis69tpp8eho7cp'),
            topic?: string(name='Topic', example='topic_empower_1642473600414'),
            vSwitchIds?: string(name='VSwitchIds', example='vsw-bp1rmi8rind7eo50cbied'),
            vpcId?: string(name='VpcId', example='vpc-wz9ki1qdlx3cx5cbbhowf'),
          }(name='SourceKafkaParameters', description='Source Kafka Parameters'),
          sourceMNSParameters?: {
            isBase64Decode?: boolean(name='IsBase64Decode', example='true'),
            queueName?: string(name='QueueName', example='work4'),
            regionId?: string(name='RegionId', example='cn-zhangjiakou'),
          }(name='SourceMNSParameters', description='Source MNS Parameters'),
          sourceMQTTParameters?: {
            instanceId?: string(name='InstanceId', example='bastionhost-cn-zvp27kcha1r'),
            regionId?: string(name='RegionId', example='cn-qingdao'),
            topic?: string(name='Topic', example='migration_instance'),
          }(name='SourceMQTTParameters'),
          sourceRabbitMQParameters?: {
            instanceId?: string(name='InstanceId', example='dbaudit-cn-7mz2hqolc06'),
            queueName?: string(name='QueueName', example='liuyang'),
            regionId?: string(name='RegionId', example='cn-zhangjiakou'),
            virtualHostName?: string(name='VirtualHostName', example='eb-connect'),
          }(name='SourceRabbitMQParameters', description='Source RabbitMQ Parameters'),
          sourceRocketMQParameters?: {
            groupID?: string(name='GroupID', example='GID_group1'),
            instanceId?: string(name='InstanceId', example='i-f8zbher64dlm58plyfte'),
            offset?: string(name='Offset', example='CONSUMEFROMTIMESTAMP'),
            regionId?: string(name='RegionId', example='cn-chengdu'),
            tag?: string(name='Tag', example='v1'),
            timestamp?: long(name='Timestamp', example='1670742074043'),
            topic?: string(name='Topic', example='topic_add_anima'),
          }(name='SourceRocketMQParameters', description='Source RocketMQ Parameters'),
          sourceSLSParameters?: {
            consumePosition?: string(name='ConsumePosition', example='begin'),
            consumerGroup?: string(name='ConsumerGroup', example='go-dts-shelf-group'),
            logStore?: string(name='LogStore', example='waf-logstore'),
            project?: string(name='Project', example='dmmzk'),
            roleName?: string(name='RoleName', example='testRole'),
          }(name='SourceSLSParameters'),
        }(name='Source'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='EventStreamings'),
    nextToken?: string(name='NextToken', example='177'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', example='283FF852-C4B8-58C9-9777-F88A5A16A79F'),
  success?: boolean(name='Success', example='true'),
}

model ListEventStreamingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEventStreamingsResponseBody(name='body'),
}

async function listEventStreamingsWithOptions(request: ListEventStreamingsRequest, runtime: Util.RuntimeOptions): ListEventStreamingsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.namePrefix)) {
    body['NamePrefix'] = request.namePrefix;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEventStreamings',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEventStreamings(request: ListEventStreamingsRequest): ListEventStreamingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventStreamingsWithOptions(request, runtime);
}

model ListRulesRequest {
  eventBusName?: string(name='EventBusName', example='default'),
  limit?: int32(name='Limit', example='50'),
  nextToken?: string(name='NextToken', example='1000'),
  ruleNamePrefix?: string(name='RuleNamePrefix', example='test'),
}

model ListRulesResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    nextToken?: string(name='NextToken', example='1000'),
    rules?: [ 
      {
        createdTimestamp?: long(name='CreatedTimestamp', example='1607071602000'),
        description?: string(name='Description', example='demo'),
        detailMap?: map[string]any(name='DetailMap'),
        eventBusName?: string(name='EventBusName', example='demo'),
        filterPattern?: string(name='FilterPattern', example='{\\"source\\":[\\"acs.oss\\"],\\"type\\":[\\"oss:BucketQueried:GetBucketStat\\"]}'),
        ruleARN?: string(name='RuleARN', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/default/rule/myRule3'),
        ruleName?: string(name='RuleName', example='tf-testacc-rule'),
        status?: string(name='Status', example='ENABLE'),
        targets?: [ 
          {
            endpoint?: string(name='Endpoint', example='acs:mns:cn-hangzhou:123456789098****:queues/myqueue'),
            id?: string(name='Id', example='177'),
            pushSelector?: string(name='PushSelector', example='MATCHED_EVENT'),
            type?: string(name='Type', example='acs.mns.queue'),
          }
        ](name='Targets'),
      }
    ](name='Rules'),
    total?: int32(name='Total', example='6'),
  }(name='Data'),
  message?: string(name='Message', example='Specified parameter Limit is not valid.'),
  requestId?: string(name='RequestId', example='C7043799-F4DA-5290-9249-97C359876D97'),
  success?: boolean(name='Success', example='true'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRulesResponseBody(name='body'),
}

async function listRulesWithOptions(request: ListRulesRequest, runtime: Util.RuntimeOptions): ListRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ruleNamePrefix)) {
    query['RuleNamePrefix'] = request.ruleNamePrefix;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRules',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRulesWithOptions(request, runtime);
}

model ListUserDefinedEventSourcesResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    eventSourceList?: [ 
      {
        arn?: string(name='Arn', example='acs:eventbridge:cn-hangzhou:164901546557****:eventbus/my-event-bus/eventsource/myRocketMQ.source'),
        ctime?: float(name='Ctime', example='1607071602000'),
        eventBusName?: string(name='EventBusName', example='test-custom-bus'),
        externalSourceType?: string(name='ExternalSourceType', example='RabbitMQ'),
        name?: string(name='Name', example='rocketmq.source'),
        sourceHttpEventParameters?: {
          ip?: [ string ](name='Ip'),
          method?: [ string ](name='Method'),
          referer?: [ string ](name='Referer'),
          securityConfig?: string(name='SecurityConfig', example='none'),
          type?: string(name='Type', example='HTTPS'),
        }(name='SourceHttpEventParameters'),
        sourceMNSParameters?: {
          isBase64Decode?: boolean(name='IsBase64Decode', example='true'),
          queueName?: string(name='QueueName', example='queue.openapi-sign-callback'),
          regionId?: string(name='RegionId', example='cn-hangzhou'),
        }(name='SourceMNSParameters'),
        sourceRabbitMQParameters?: {
          instanceId?: string(name='InstanceId', example='bastionhost-cn-0ju2x28fj07'),
          queueName?: string(name='QueueName', example='file-upload-queue'),
          regionId?: string(name='RegionId', example='cn-hangzhou'),
          virtualHostName?: string(name='VirtualHostName', example='eb-connect'),
        }(name='SourceRabbitMQParameters'),
        sourceRocketMQParameters?: {
          groupId?: string(name='GroupId', example='GID-test'),
          instanceId?: string(name='InstanceId', example='bastionhost-cn-7mz293s9d1p'),
          offset?: string(name='Offset', example='CONSUMEFROMLASTOFFSET'),
          regionId?: string(name='RegionId', example='cn-shenzhen'),
          tag?: string(name='Tag', example='dataact'),
          timestamp?: float(name='Timestamp', example='1664591760'),
          topic?: string(name='Topic', example='migration_instance'),
        }(name='SourceRocketMQParameters'),
        sourceSLSParameters?: {
          consumePosition?: string(name='ConsumePosition', example='end'),
          logStore?: string(name='LogStore', example='cloudfirewall-logstore'),
          project?: string(name='Project', example='VideoTestProject'),
          roleName?: string(name='RoleName', example='testRole'),
        }(name='SourceSLSParameters', description='SourceSLSParameters'),
        status?: string(name='Status', example='Activated'),
        type?: string(name='Type', example='UserDefined'),
      }
    ](name='EventSourceList'),
  }(name='Data'),
  message?: string(name='Message', example='InvalidArgument'),
  requestId?: string(name='RequestId', example='5169654A-7059-57E3-BFD9-33C7E012EA1B'),
  success?: boolean(name='Success', example='true'),
}

model ListUserDefinedEventSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserDefinedEventSourcesResponseBody(name='body'),
}

async function listUserDefinedEventSourcesWithOptions(runtime: Util.RuntimeOptions): ListUserDefinedEventSourcesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListUserDefinedEventSources',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserDefinedEventSources(): ListUserDefinedEventSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserDefinedEventSourcesWithOptions(runtime);
}

model PauseEventStreamingRequest {
  eventStreamingName?: string(name='EventStreamingName', example='rocketmq-sync'),
}

model PauseEventStreamingResponseBody = {
  code?: boolean(name='Code', example='Success'),
  message?: string(name='Message', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', example='72ce027c-546a-4231-9cf6-ec58766027f9'),
  success?: boolean(name='Success', example='true'),
}

model PauseEventStreamingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseEventStreamingResponseBody(name='body'),
}

async function pauseEventStreamingWithOptions(request: PauseEventStreamingRequest, runtime: Util.RuntimeOptions): PauseEventStreamingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventStreamingName)) {
    body['EventStreamingName'] = request.eventStreamingName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PauseEventStreaming',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseEventStreaming(request: PauseEventStreamingRequest): PauseEventStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseEventStreamingWithOptions(request, runtime);
}

model PutTargetsRequest {
  eventBusName?: string(name='EventBusName', example='eventTest'),
  ruleName?: string(name='RuleName', example='ssr-send-to-vendor-test01'),
  targets?: [ 
    {
      deadLetterQueue?: {
        arn?: string(name='Arn'),
      }(name='DeadLetterQueue'),
      endpoint?: string(name='Endpoint', example='acs:fc:cn-hangzhou:123456789098****:services/guide.LATEST/functions/HelloFC'),
      errorsTolerance?: string(name='ErrorsTolerance', example='ALL'),
      id?: string(name='Id', example='Mlm123456JHd2RsRoKw'),
      paramList?: [ 
        {
          form?: string(name='Form', example='TEMPLATE'),
          resourceKey?: string(name='ResourceKey', example='body'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{\\"key\\"=\\"value\\"}'),
        }
      ](name='ParamList'),
      pushRetryStrategy?: string(name='PushRetryStrategy', example='BACKOFFRETRY'),
      type?: string(name='Type', example='acs.fc.function'),
    }
  ](name='Targets'),
}

model PutTargetsShrinkRequest {
  eventBusName?: string(name='EventBusName', example='eventTest'),
  ruleName?: string(name='RuleName', example='ssr-send-to-vendor-test01'),
  targetsShrink?: string(name='Targets'),
}

model PutTargetsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    errorEntries?: [ 
      {
        entryId?: string(name='EntryId', example='Mlm123456JHd2RsRoKw'),
        errorCode?: string(name='ErrorCode', example='EventRuleTargetIdDuplicate'),
        errorMessage?: string(name='ErrorMessage', example='The id of event target is duplicate!'),
      }
    ](name='ErrorEntries'),
    errorEntriesCount?: int32(name='ErrorEntriesCount', example='0'),
  }(name='Data'),
  message?: string(name='Message', example='The event rule not existed!'),
  requestId?: string(name='RequestId', example='6FB52207-7621-5292-BDF2-A17E2E984160'),
  success?: boolean(name='Success', example='true'),
}

model PutTargetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutTargetsResponseBody(name='body'),
}

async function putTargetsWithOptions(tmpReq: PutTargetsRequest, runtime: Util.RuntimeOptions): PutTargetsResponse {
  Util.validateModel(tmpReq);
  var request = new PutTargetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.targets)) {
    request.targetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targets, 'Targets', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.targetsShrink)) {
    query['Targets'] = request.targetsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutTargets',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function putTargets(request: PutTargetsRequest): PutTargetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return putTargetsWithOptions(request, runtime);
}

model QueryEventRequest {
  eventBusName?: string(name='EventBusName', example='demo'),
  eventId?: string(name='EventId', example='1935debf-ddac-49dc-a090-d4f2857a046d'),
}

model QueryEventResponseBody = {
  code?: string(name='Code', example='200'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='EventBusNotExist'),
  requestId?: string(name='RequestId', example='580A938B-6107-586C-8EC7-F22EEBEDA9E6'),
  success?: boolean(name='Success', example='true'),
}

model QueryEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEventResponseBody(name='body'),
}

async function queryEventWithOptions(request: QueryEventRequest, runtime: Util.RuntimeOptions): QueryEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEvent',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEvent(request: QueryEventRequest): QueryEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventWithOptions(request, runtime);
}

model QueryEventTracesRequest {
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
  eventId?: string(name='EventId', example='1935debf-ddac-49dc-a090-d4f2857a046d'),
}

model QueryEventTracesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      action?: string(name='Action', example='PutEvent'),
      actionTime?: long(name='ActionTime', example='1659495343896'),
      endpoint?: string(name='Endpoint', example='acs:mns:cn-zhangjiakou:123456789098****:queues/testQueue'),
      eventBusName?: string(name='EventBusName', example='demo'),
      eventId?: string(name='EventId', example='a5747e4f-2af2-40b6-b262-d0140e995bf7'),
      eventSource?: string(name='EventSource', example='cert-api'),
      notifyLatency?: string(name='NotifyLatency', example='80'),
      notifyStatus?: string(name='NotifyStatus', example='[200]Ok'),
      notifyTime?: long(name='NotifyTime', example='1659495343896'),
      receivedTime?: long(name='ReceivedTime', example='1659495343896'),
      ruleMatchingTime?: string(name='RuleMatchingTime', example='1659495343896'),
      ruleName?: string(name='RuleName', example='ramrolechange-mns'),
    }
  ](name='Data'),
  message?: string(name='Message', example='EventBusNotExist'),
  requestId?: string(name='RequestId', example='BB934571-1F5A-5E17-91DD-E2BC3E1BFBFF'),
  success?: boolean(name='Success', example='true'),
}

model QueryEventTracesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEventTracesResponseBody(name='body'),
}

async function queryEventTracesWithOptions(request: QueryEventTracesRequest, runtime: Util.RuntimeOptions): QueryEventTracesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEventTraces',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEventTraces(request: QueryEventTracesRequest): QueryEventTracesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventTracesWithOptions(request, runtime);
}

model QueryTracedEventByEventIdRequest {
  eventBusName?: string(name='EventBusName', example='demo'),
  eventId?: string(name='EventId', example='1935debf-ddac-49dc-a090-d4f2857a046d'),
  eventSource?: string(name='EventSource', example='mse'),
}

model QueryTracedEventByEventIdResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      events?: [ 
        {
          eventBusName?: string(name='EventBusName', example='default'),
          eventId?: string(name='EventId', example='37C-1P6Yn6EM7TcH37Vod8w7rbSeimJ'),
          eventReceivedTime?: long(name='EventReceivedTime', example='1661773573100'),
          eventSource?: string(name='EventSource', example='cert-api'),
          eventType?: string(name='EventType', example='eventbridge:Events:HTTPEvent'),
        }
      ](name='Events'),
      nextToken?: string(name='NextToken', example='1000'),
      total?: int32(name='Total', example='18'),
    }
  ](name='Data'),
  message?: string(name='Message', example='EventBusNotExist'),
  requestId?: string(name='RequestId', example='A5D7B9F4-BF96-51A9-90B1-928955FABB5B'),
  success?: boolean(name='Success', example='true'),
}

model QueryTracedEventByEventIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTracedEventByEventIdResponseBody(name='body'),
}

async function queryTracedEventByEventIdWithOptions(request: QueryTracedEventByEventIdRequest, runtime: Util.RuntimeOptions): QueryTracedEventByEventIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.eventSource)) {
    query['EventSource'] = request.eventSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTracedEventByEventId',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTracedEventByEventId(request: QueryTracedEventByEventIdRequest): QueryTracedEventByEventIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTracedEventByEventIdWithOptions(request, runtime);
}

model QueryTracedEventsRequest {
  endTime?: long(name='EndTime', example='1661773509000'),
  eventBusName?: string(name='EventBusName', example='MyEventBus'),
  eventSource?: string(name='EventSource', example='mse'),
  eventType?: string(name='EventType', example='eventbridge:Events:HTTPEvent'),
  limit?: int32(name='Limit', example='50'),
  matchedRule?: string(name='MatchedRule', example='test-mnsrule'),
  nextToken?: string(name='NextToken', example='1000'),
  startTime?: long(name='StartTime', example='1661773509000'),
}

model QueryTracedEventsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    events?: [ 
      {
        eventBusName?: string(name='EventBusName', example='test-custom-bus'),
        eventId?: string(name='EventId', example='07E-1OCckaVzNB92BIFFh4xgydOF1wd'),
        eventReceivedTime?: long(name='EventReceivedTime', example='1661773573100'),
        eventSource?: string(name='EventSource', example='acs.resourcemanager'),
        eventType?: string(name='EventType', example='eventbridge:Events:HTTPEvent'),
      }
    ](name='Events'),
    nextToken?: string(name='NextToken', example='1000'),
    total?: int32(name='Total', example='6'),
  }(name='Data'),
  message?: string(name='Message', example='EventBusNotExist'),
  requestId?: string(name='RequestId', example='d9e4628b-8b34-4f33-82be-5aac50aac0ba'),
  success?: boolean(name='Success', example='true'),
}

model QueryTracedEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTracedEventsResponseBody(name='body'),
}

async function queryTracedEventsWithOptions(request: QueryTracedEventsRequest, runtime: Util.RuntimeOptions): QueryTracedEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.eventSource)) {
    query['EventSource'] = request.eventSource;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.matchedRule)) {
    query['MatchedRule'] = request.matchedRule;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTracedEvents',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTracedEvents(request: QueryTracedEventsRequest): QueryTracedEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTracedEventsWithOptions(request, runtime);
}

model StartEventStreamingRequest {
  eventStreamingName?: string(name='EventStreamingName', example='rocketmq-sync'),
}

model StartEventStreamingResponseBody = {
  code?: boolean(name='Code', example='Success'),
  message?: string(name='Message', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', example='8CEAD24D-328D-5539-9D30-FD2D33204FBB'),
  success?: boolean(name='Success', example='true'),
}

model StartEventStreamingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartEventStreamingResponseBody(name='body'),
}

async function startEventStreamingWithOptions(request: StartEventStreamingRequest, runtime: Util.RuntimeOptions): StartEventStreamingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventStreamingName)) {
    body['EventStreamingName'] = request.eventStreamingName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartEventStreaming',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startEventStreaming(request: StartEventStreamingRequest): StartEventStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return startEventStreamingWithOptions(request, runtime);
}

model UpdateApiDestinationRequest {
  apiDestinationName?: string(name='ApiDestinationName', example='api-destination-name'),
  clientToken?: string(name='ClientToken', example='TF-UpdateTargets-1652940309-ab520f80-bd16-4143-afdd-d66a597bb3d8'),
  connectionName?: string(name='ConnectionName', example='connection-name'),
  description?: string(name='Description', example='demo'),
  httpApiParameters?: {
    endpoint?: string(name='Endpoint', example='http://127.0.0.1:8001/api'),
    method?: string(name='Method', example='POST'),
  }(name='HttpApiParameters'),
}

model UpdateApiDestinationShrinkRequest {
  apiDestinationName?: string(name='ApiDestinationName', example='api-destination-name'),
  clientToken?: string(name='ClientToken', example='TF-UpdateTargets-1652940309-ab520f80-bd16-4143-afdd-d66a597bb3d8'),
  connectionName?: string(name='ConnectionName', example='connection-name'),
  description?: string(name='Description', example='demo'),
  httpApiParametersShrink?: string(name='HttpApiParameters'),
}

model UpdateApiDestinationResponseBody = {
  apiDestinationName?: string(name='ApiDestinationName', description='api-destination-name', example='api-destination-name'),
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='382E6272-8E9C-5681-AC96-A8AF0BFAC1A5'),
}

model UpdateApiDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApiDestinationResponseBody(name='body'),
}

async function updateApiDestinationWithOptions(tmpReq: UpdateApiDestinationRequest, runtime: Util.RuntimeOptions): UpdateApiDestinationResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateApiDestinationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.httpApiParameters)) {
    request.httpApiParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.httpApiParameters, 'HttpApiParameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.apiDestinationName)) {
    query['ApiDestinationName'] = request.apiDestinationName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionName)) {
    query['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.httpApiParametersShrink)) {
    query['HttpApiParameters'] = request.httpApiParametersShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApiDestination',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateApiDestination(request: UpdateApiDestinationRequest): UpdateApiDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApiDestinationWithOptions(request, runtime);
}

model UpdateConnectionRequest {
  authParameters?: {
    apiKeyAuthParameters?: {
      apiKeyName?: string(name='ApiKeyName', example='name'),
      apiKeyValue?: string(name='ApiKeyValue', example='demo'),
    }(name='ApiKeyAuthParameters'),
    authorizationType?: string(name='AuthorizationType', example='BASIC_AUTH'),
    basicAuthParameters?: {
      password?: string(name='Password', example='admin'),
      username?: string(name='Username', example='admin'),
    }(name='BasicAuthParameters'),
    invocationHttpParameters?: {
      bodyParameters?: [ 
        {
          key?: string(name='Key', example='name'),
          value?: string(name='Value', example='demo'),
        }
      ](name='BodyParameters'),
      headerParameters?: [ 
        {
          key?: string(name='Key', example='name'),
          value?: string(name='Value', example='demo'),
        }
      ](name='HeaderParameters'),
      queryStringParameters?: [ 
        {
          key?: string(name='Key', example='name'),
          value?: string(name='Value', example='demo'),
        }
      ](name='QueryStringParameters'),
    }(name='InvocationHttpParameters'),
    OAuthParameters?: {
      authorizationEndpoint?: string(name='AuthorizationEndpoint', example='http://localhost:8080/oauth/token'),
      clientParameters?: {
        clientID?: string(name='ClientID', example='ClientID'),
        clientSecret?: string(name='ClientSecret', example='ClientSecret'),
      }(name='ClientParameters'),
      httpMethod?: string(name='HttpMethod', example='POST'),
      OAuthHttpParameters?: {
        bodyParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', example='false'),
            key?: string(name='Key', example='name'),
            value?: string(name='Value', example='demo'),
          }
        ](name='BodyParameters'),
        headerParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', example='false'),
            key?: string(name='Key', example='name'),
            value?: string(name='Value', example='demo'),
          }
        ](name='HeaderParameters'),
        queryStringParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', example='false'),
            key?: string(name='Key', example='name'),
            value?: string(name='Value', example='demo'),
          }
        ](name='QueryStringParameters'),
      }(name='OAuthHttpParameters'),
    }(name='OAuthParameters'),
  }(name='AuthParameters'),
  connectionName?: string(name='ConnectionName', example='connection-name'),
  description?: string(name='Description'),
  networkParameters?: {
    networkType?: string(name='NetworkType', example='PublicNetwork'),
    securityGroupId?: string(name='SecurityGroupId', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9rtyb'),
    vpcId?: string(name='VpcId', example='eb-test/vpc-bp1symadadwnwgmqud'),
    vswitcheId?: string(name='VswitcheId', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeqbt2c'),
  }(name='NetworkParameters'),
}

model UpdateConnectionShrinkRequest {
  authParametersShrink?: string(name='AuthParameters'),
  connectionName?: string(name='ConnectionName', example='connection-name'),
  description?: string(name='Description'),
  networkParametersShrink?: string(name='NetworkParameters'),
}

model UpdateConnectionResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='8346BE8F-40F3-533D-A0B8-1359C31BD5BA'),
}

model UpdateConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConnectionResponseBody(name='body'),
}

async function updateConnectionWithOptions(tmpReq: UpdateConnectionRequest, runtime: Util.RuntimeOptions): UpdateConnectionResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateConnectionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.authParameters)) {
    request.authParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authParameters, 'AuthParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.networkParameters)) {
    request.networkParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.networkParameters, 'NetworkParameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.authParametersShrink)) {
    query['AuthParameters'] = request.authParametersShrink;
  }
  if (!Util.isUnset(request.connectionName)) {
    query['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.networkParametersShrink)) {
    query['NetworkParameters'] = request.networkParametersShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConnection',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConnection(request: UpdateConnectionRequest): UpdateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnectionWithOptions(request, runtime);
}

model UpdateEventBusRequest {
  description?: string(name='Description', example='test'),
  eventBusName?: string(name='EventBusName', example='eventTest'),
}

model UpdateEventBusResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='The event bus [xxxx] not existed!'),
  requestId?: string(name='RequestId', example='f2099962-1628-45f1-9782-2bf6daad823f'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEventBusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEventBusResponseBody(name='body'),
}

async function updateEventBusWithOptions(request: UpdateEventBusRequest, runtime: Util.RuntimeOptions): UpdateEventBusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEventBus',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEventBus(request: UpdateEventBusRequest): UpdateEventBusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEventBusWithOptions(request, runtime);
}

model UpdateEventSourceRequest {
  description?: bytes(name='Description', description='事件源描述详情'),
  eventBusName?: bytes(name='EventBusName', example='my-event-bus'),
  eventSourceName?: bytes(name='EventSourceName', description='事件源英文Code', example='myrabbitmq.source'),
  sourceHttpEventParameters?: {
    ip?: [ string ](name='Ip'),
    method?: [ string ](name='Method'),
    referer?: [ string ](name='Referer'),
    securityConfig?: string(name='SecurityConfig', example='none'),
    type?: string(name='Type', example='HTTPS'),
  }(name='SourceHttpEventParameters'),
  sourceMNSParameters?: {
    isBase64Decode?: string(name='IsBase64Decode', example='true'),
    queueName?: string(name='QueueName', example='queue_api_bind_1672194645178'),
    regionId?: string(name='RegionId', example='cn-beijing'),
  }(name='SourceMNSParameters'),
  sourceRabbitMQParameters?: {
    instanceId?: string(name='InstanceId', example='bastionhost-cn-7mz2zkyff09'),
    queueName?: string(name='QueueName', example='eb-connect'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    virtualHostName?: string(name='VirtualHostName', example='amqp-cn-nif22u74****'),
  }(name='SourceRabbitMQParameters'),
  sourceRocketMQParameters?: {
    groupId?: string(name='GroupId', example='GID-test'),
    instanceId?: string(name='InstanceId', example='dbaudit-cn-i7m2nx2or01'),
    offset?: string(name='Offset', example='CONSUMEFROMLASTOFFSET'),
    regionId?: string(name='RegionId', example='cn-zhangjiakou'),
    tag?: string(name='Tag', example='KEY2'),
    timestamp?: float(name='Timestamp', example='1663555399032'),
    topic?: string(name='Topic', example='topic_default_195820716552192'),
  }(name='SourceRocketMQParameters'),
  sourceSLSParameters?: {
    consumePosition?: string(name='ConsumePosition', example='end'),
    logStore?: string(name='LogStore', example='waf-logstore'),
    project?: string(name='Project', example='VideoTestProject'),
    roleName?: string(name='RoleName', example='testRole'),
  }(name='SourceSLSParameters', description='SourceSLSParameters'),
}

model UpdateEventSourceShrinkRequest {
  description?: bytes(name='Description', description='事件源描述详情'),
  eventBusName?: bytes(name='EventBusName', example='my-event-bus'),
  eventSourceName?: bytes(name='EventSourceName', description='事件源英文Code', example='myrabbitmq.source'),
  sourceHttpEventParametersShrink?: string(name='SourceHttpEventParameters'),
  sourceMNSParametersShrink?: string(name='SourceMNSParameters'),
  sourceRabbitMQParametersShrink?: string(name='SourceRabbitMQParameters'),
  sourceRocketMQParametersShrink?: string(name='SourceRocketMQParameters'),
  sourceSLSParametersShrink?: string(name='SourceSLSParameters', description='SourceSLSParameters'),
}

model UpdateEventSourceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Remote error. requestId: [xxxx-9D10-65DFDFA3A75D], error code: [EventSourceNotExist], message: [The event source in request is not exist! ]'),
  requestId?: string(name='RequestId', example='c057d379-ea65-41ec-a8a8-90627a968204'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEventSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEventSourceResponseBody(name='body'),
}

async function updateEventSourceWithOptions(tmpReq: UpdateEventSourceRequest, runtime: Util.RuntimeOptions): UpdateEventSourceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateEventSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sourceHttpEventParameters)) {
    request.sourceHttpEventParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceHttpEventParameters, 'SourceHttpEventParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceMNSParameters)) {
    request.sourceMNSParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceMNSParameters, 'SourceMNSParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceRabbitMQParameters)) {
    request.sourceRabbitMQParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceRabbitMQParameters, 'SourceRabbitMQParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceRocketMQParameters)) {
    request.sourceRocketMQParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceRocketMQParameters, 'SourceRocketMQParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceSLSParameters)) {
    request.sourceSLSParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceSLSParameters, 'SourceSLSParameters', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.eventBusName)) {
    body['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.eventSourceName)) {
    body['EventSourceName'] = request.eventSourceName;
  }
  if (!Util.isUnset(request.sourceHttpEventParametersShrink)) {
    body['SourceHttpEventParameters'] = request.sourceHttpEventParametersShrink;
  }
  if (!Util.isUnset(request.sourceMNSParametersShrink)) {
    body['SourceMNSParameters'] = request.sourceMNSParametersShrink;
  }
  if (!Util.isUnset(request.sourceRabbitMQParametersShrink)) {
    body['SourceRabbitMQParameters'] = request.sourceRabbitMQParametersShrink;
  }
  if (!Util.isUnset(request.sourceRocketMQParametersShrink)) {
    body['SourceRocketMQParameters'] = request.sourceRocketMQParametersShrink;
  }
  if (!Util.isUnset(request.sourceSLSParametersShrink)) {
    body['SourceSLSParameters'] = request.sourceSLSParametersShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEventSource',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEventSource(request: UpdateEventSourceRequest): UpdateEventSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEventSourceWithOptions(request, runtime);
}

model UpdateEventStreamingRequest {
  description?: string(name='Description', example='rocketmq2mns'),
  eventStreamingName?: string(name='EventStreamingName', example='myeventstreaming'),
  filterPattern?: string(name='FilterPattern'),
  runOptions?: {
    batchWindow?: {
      countBasedWindow?: int32(name='CountBasedWindow', example='100'),
      timeBasedWindow?: int32(name='TimeBasedWindow', example='10'),
    }(name='BatchWindow'),
    deadLetterQueue?: {
      arn?: string(name='Arn', example='acs:ram::1317334647812936:role/rdstoecsassumekms'),
    }(name='DeadLetterQueue'),
    errorsTolerance?: string(name='ErrorsTolerance', example='ALL'),
    maximumTasks?: long(name='MaximumTasks', example='2'),
    retryStrategy?: {
      maximumEventAgeInSeconds?: long(name='MaximumEventAgeInSeconds', example='512'),
      maximumRetryAttempts?: long(name='MaximumRetryAttempts', example='2'),
      pushRetryStrategy?: string(name='PushRetryStrategy', example='BACKOFFRETRY'),
    }(name='RetryStrategy'),
  }(name='RunOptions'),
  sink?: {
    sinkFcParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Body'),
      functionName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='mFunction'),
      }(name='FunctionName'),
      invocationType?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='Async'),
      }(name='InvocationType'),
      qualifier?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='LATEST'),
      }(name='Qualifier'),
      serviceName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='myService'),
      }(name='ServiceName'),
    }(name='SinkFcParameters'),
    sinkKafkaParameters?: {
      acks?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='1'),
      }(name='Acks'),
      instanceId?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='Defaut_1283278472_sadkj'),
      }(name='InstanceId'),
      key?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='key'),
      }(name='Key'),
      topic?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='test'),
      }(name='Topic'),
      value?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Value'),
    }(name='SinkKafkaParameters'),
    sinkMNSParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Body'),
      isBase64Encode?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='true'),
      }(name='IsBase64Encode'),
      queueName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='MyQueue'),
      }(name='QueueName'),
    }(name='SinkMNSParameters'),
    sinkRabbitMQParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Body'),
      exchange?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='a_exchange'),
      }(name='Exchange'),
      instanceId?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='amqp-cn-2r42e73o****'),
      }(name='InstanceId'),
      messageId?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='MessageId'),
      properties?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Properties'),
      queueName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='MyQueue'),
      }(name='QueueName'),
      routingKey?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='housekeeping'),
      }(name='RoutingKey'),
      targetType?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='Exchange/Queue'),
      }(name='TargetType'),
      virtualHostName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='rabbit-host'),
      }(name='VirtualHostName'),
    }(name='SinkRabbitMQParameters'),
    sinkRocketMQParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Body'),
      instanceId?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='MQ_INST_164901546557****_BAAN****'),
      }(name='InstanceId'),
      keys?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Keys'),
      properties?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Properties'),
      tags?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Tags'),
      topic?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='Mytopic'),
      }(name='Topic'),
    }(name='SinkRocketMQParameters', description='Sink RocketMQ Parameters'),
    sinkSLSParameters?: {
      body?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', example='{
      "key": "value"
}'),
      }(name='Body'),
      logStore?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='test-logstore'),
      }(name='LogStore'),
      project?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='test-project'),
      }(name='Project'),
      roleName?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='testRole'),
      }(name='RoleName'),
      topic?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='testTopic'),
      }(name='Topic'),
    }(name='SinkSLSParameters', description='Sink SLS Parameters'),
  }(name='Sink'),
  source?: {
    sourceDTSParameters?: {
      brokerUrl?: string(name='BrokerUrl'),
      initCheckPoint?: long(name='InitCheckPoint', example='1620962769'),
      password?: string(name='Password', example='admin'),
      sid?: string(name='Sid', example='hkprdb'),
      taskId?: string(name='TaskId', example='f86e5814-b223-482c-b768-3b873297dade'),
      topic?: string(name='Topic', example='LTC_CACHE_PRD'),
      username?: string(name='Username', example='admin'),
    }(name='SourceDTSParameters'),
    sourceKafkaParameters?: {
      consumerGroup?: string(name='ConsumerGroup', example='DEFAULT_GROUP'),
      instanceId?: string(name='InstanceId', example='i-8vbh4a5b9yfhgkkzm98f'),
      network?: string(name='Network', example='Default'),
      offsetReset?: string(name='OffsetReset', example='latest'),
      regionId?: string(name='RegionId', example='cn-zhangjiakou'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-uf6jcm3y5hcs7hklytxh'),
      topic?: string(name='Topic', example='topic_empower_1641539400786'),
      vSwitchIds?: string(name='VSwitchIds', example='vsw-wz9t1l1e8eu2omwjazmtm'),
      vpcId?: string(name='VpcId', example='vpc-2ze6p0o345nykmekxtuop'),
    }(name='SourceKafkaParameters'),
    sourceMNSParameters?: {
      isBase64Decode?: boolean(name='IsBase64Decode', example='true'),
      queueName?: string(name='QueueName', example='queue_api_1642474203601'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }(name='SourceMNSParameters'),
    sourceMQTTParameters?: {
      instanceId?: string(name='InstanceId', example='i-bp1dsudbecqwt61jqswt'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      topic?: string(name='Topic', example='topic_empower_1642400400779'),
    }(name='SourceMQTTParameters'),
    sourceRabbitMQParameters?: {
      instanceId?: string(name='InstanceId', example='i-f8z9lqkldlb4oxsxwwub'),
      queueName?: string(name='QueueName', example='demo'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      virtualHostName?: string(name='VirtualHostName', example='eb-connect'),
    }(name='SourceRabbitMQParameters'),
    sourceRocketMQParameters?: {
      groupID?: string(name='GroupID', example='GID_test'),
      instanceId?: string(name='InstanceId', example='i-f8z9a9mcgwri1c1idd0e'),
      offset?: string(name='Offset', example='CONSUMEFROMLASTOFFSET'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      tag?: string(name='Tag', example='test'),
      timestamp?: long(name='Timestamp', example='1670656652009'),
      topic?: string(name='Topic', example='TOPIC-cainiao-pcs-order-process-inBoundConditionCheck'),
    }(name='SourceRocketMQParameters'),
    sourceSLSParameters?: {
      roleName?: string(name='RoleName', example='testRole'),
    }(name='SourceSLSParameters'),
  }(name='Source'),
}

model UpdateEventStreamingShrinkRequest {
  description?: string(name='Description', example='rocketmq2mns'),
  eventStreamingName?: string(name='EventStreamingName', example='myeventstreaming'),
  filterPattern?: string(name='FilterPattern'),
  runOptionsShrink?: string(name='RunOptions'),
  sinkShrink?: string(name='Sink'),
  sourceShrink?: string(name='Source'),
}

model UpdateEventStreamingResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='The name [xxxx] of event streaming in request is already exist!'),
  requestId?: string(name='RequestId', example='0FDD73AA-7A2D-5BD4-B4C0-88AFEBF5F0F5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEventStreamingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEventStreamingResponseBody(name='body'),
}

async function updateEventStreamingWithOptions(tmpReq: UpdateEventStreamingRequest, runtime: Util.RuntimeOptions): UpdateEventStreamingResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateEventStreamingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.runOptions)) {
    request.runOptionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runOptions, 'RunOptions', 'json');
  }
  if (!Util.isUnset(tmpReq.sink)) {
    request.sinkShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sink, 'Sink', 'json');
  }
  if (!Util.isUnset(tmpReq.source)) {
    request.sourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.source, 'Source', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.eventStreamingName)) {
    body['EventStreamingName'] = request.eventStreamingName;
  }
  if (!Util.isUnset(request.filterPattern)) {
    body['FilterPattern'] = request.filterPattern;
  }
  if (!Util.isUnset(request.runOptionsShrink)) {
    body['RunOptions'] = request.runOptionsShrink;
  }
  if (!Util.isUnset(request.sinkShrink)) {
    body['Sink'] = request.sinkShrink;
  }
  if (!Util.isUnset(request.sourceShrink)) {
    body['Source'] = request.sourceShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEventStreaming',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEventStreaming(request: UpdateEventStreamingRequest): UpdateEventStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEventStreamingWithOptions(request, runtime);
}

model UpdateRuleRequest {
  description?: string(name='Description', example='demo'),
  eventBusName?: string(name='EventBusName', example='hw-test'),
  filterPattern?: string(name='FilterPattern', example='{\\"source\\":[\\"acs.oss\\"],\\"type\\":[\\"oss:BucketQueried:GetBucketStat\\"]}'),
  ruleName?: string(name='RuleName', example='tf-testacc-rule'),
  status?: string(name='Status', example='ENABLE'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='EventRuleFilterPatternSchemaError'),
  requestId?: string(name='RequestId', example='7439944D-D9FC-5614-B65E-07A468988924'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRuleResponseBody(name='body'),
}

async function updateRuleWithOptions(request: UpdateRuleRequest, runtime: Util.RuntimeOptions): UpdateRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eventBusName)) {
    query['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.filterPattern)) {
    query['FilterPattern'] = request.filterPattern;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRule',
    version = '2020-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleWithOptions(request, runtime);
}

