/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eventbridge';
  @version = '2020-04-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model SinkBaiLianParameters {
  after?: {
    form?: string(name='Form'),
    template?: string(name='Template'),
    value?: string(name='Value'),
  }(name='After'),
  applicationType?: string(name='ApplicationType'),
  before?: {
    form?: string(name='Form'),
    template?: string(name='Template'),
    value?: string(name='Value'),
  }(name='Before'),
  context?: any(name='Context'),
  extend?: any(name='Extend'),
  offset?: {
    form?: string(name='Form'),
    template?: string(name='Template'),
    value?: string(name='Value'),
  }(name='Offset'),
  op?: {
    form?: string(name='Form'),
    template?: string(name='Template'),
    value?: string(name='Value'),
  }(name='Op'),
  partition?: {
    form?: string(name='Form'),
    template?: string(name='Template'),
    value?: string(name='Value'),
  }(name='Partition'),
  workspaceId?: string(name='WorkspaceId'),
}

model SourceMySQLParameters {
  databaseName?: string(name='DatabaseName'),
  hostName?: string(name='HostName'),
  includeSchemaChanges?: string(name='IncludeSchemaChanges'),
  networkType?: string(name='NetworkType'),
  password?: string(name='Password'),
  port?: int32(name='Port'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  snapshotMode?: string(name='SnapshotMode'),
  tableNames?: string(name='TableNames'),
  user?: string(name='User'),
  vSwitchIds?: string(name='VSwitchIds'),
  vpcId?: string(name='VpcId'),
}

model CheckServiceLinkedRoleForProductRequest {
  productName?: string(name='ProductName', example='AliyunServiceRoleForEventBridgeConnectVPC', position='Query'),
}

model CheckServiceLinkedRoleForProductResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    checkPass?: boolean(name='CheckPass', description='Indicates whether the service-linked role exists.', example='true'),
    stsRoleName?: string(name='StsRoleName', description='The name of the service-linked role.', example='AliyunServiceRoleForEventBridgeConnectVPC'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='34AD682D-5B91-5773-8132-AA38C130****'),
  success?: boolean(name='Success', example='true'),
}

model CheckServiceLinkedRoleForProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckServiceLinkedRoleForProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckServiceLinkedRoleForProduct  CheckServiceLinkedRoleForProductRequest
  * @return CheckServiceLinkedRoleForProductResponse
 */
async function checkServiceLinkedRoleForProduct(request: CheckServiceLinkedRoleForProductRequest): CheckServiceLinkedRoleForProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceLinkedRoleForProduct', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiDestinationRequest {
  apiDestinationName: string(name='ApiDestinationName', description='The name of the API destination. The name must be 2 to 127 characters in length.

This parameter is required.', example='api-destination-name', minLength=2, maxLength=127, position='Query'),
  connectionName: string(name='ConnectionName', description='The name of the connection. The name must be 2 to 127 characters in length.

> 
>  Before you configure this parameter, you must call the CreateConnection operation to create a connection. Then, set this parameter to the name of the connection that you created.

This parameter is required.', example='connection-name', minLength=2, maxLength=127, position='Query'),
  description?: string(name='Description', description='The description of the API destination. The description can be up to 255 characters in length.', maxLength=255, position='Query'),
  httpApiParameters: {
    endpoint: string(name='Endpoint', description='The endpoint of the API destination. The endpoint can be up to 127 characters in length.

This parameter is required.', example='http://127.0.0.1:8001/api', maxLength=127),
    method: string(name='Method', description='The HTTP request method. Valid values:

*   GET
*   POST
*   HEAD
*   DELETE
*   PUT
*   PATCH

This parameter is required.', example='POST'),
  }(name='HttpApiParameters', description='The parameters that are configured for the API destination.

This parameter is required.', shrink='json', position='Query'),
}

model CreateApiDestinationResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  date?: {
    apiDestinationName?: string(name='ApiDestinationName', description='The name of the API destination.', example='ApiDestinationName'),
  }(name='Date', description='The data returned if the API destination is created.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='5DAF96FB-A4B6-548C-B999-0BFDCB2261B9'),
}

model CreateApiDestinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiDestinationResponseBody(name='body'),
}

/**
  * @description You can call this API operation to create an API destination.
  * @param request  the request parameters of CreateApiDestination  CreateApiDestinationRequest
  * @return CreateApiDestinationResponse
 */
async function createApiDestination(request: CreateApiDestinationRequest): CreateApiDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiDestination', 'POST', '/', 'json', false, 'json', request);
}

model CreateConnectionRequest {
  authParameters?: {
    apiKeyAuthParameters?: {
      apiKeyName?: string(name='ApiKeyName', description='The key of the API key.', example='Token', maxLength=127),
      apiKeyValue?: string(name='ApiKeyValue', description='The value of the API key.', example='adkjnakddh****', maxLength=127),
    }(name='ApiKeyAuthParameters', description='The parameters that are configured for API key authentication.'),
    authorizationType?: string(name='AuthorizationType', description='The authentication type. Valid values:

*   BASIC: basic authentication. Basic authentication is a simple authentication scheme built into the HTTP protocol. When you use the HTTP protocol for communications, the authentication method that the HTTP server uses to authenticate user identities on the client is defined in the protocol. The request header is in the Authorization: Basic Base64-encoded string (`Username:Password`) format. If you use this authentication method, you must configure Username and Password.
*   API_KEY_AUTH: API key authentication. The request header is in the Token: Token value format. If you use this authentication method, you must configure ApiKeyName and ApiKeyValue.
*   OAUTH_AUTH: OAuth authentication. OAuth2.0 is an authentication mechanism. In normal cases, a system that does not use OAuth2.0 can access the resources of the server from the client. To ensure access security, access tokens are used to authenticate users in OAuth 2.0. The client must use an access token to access protected resources. This way, OAuth 2.0 protects resources from being accessed from malicious clients and improves system security. If you use this authentication method, you must configure AuthorizationEndpoint, OAuthHttpParameters, and HttpMethod.', example='BASIC_AUTH'),
    basicAuthParameters?: {
      password?: string(name='Password', description='The password for basic authentication.', example='*******', maxLength=127),
      username?: string(name='Username', description='The username for basic authentication.', example='admin', maxLength=127),
    }(name='BasicAuthParameters', description='The parameters that are configured for basic authentication.'),
    oAuthParameters?: {
      authorizationEndpoint?: string(name='AuthorizationEndpoint', description='The endpoint of the authorized client. The endpoint can be up to 127 characters in length.', example='http://localhost:8080/oauth/token', maxLength=127),
      clientParameters?: {
        clientID?: string(name='ClientID', description='The client ID.', example='ClientID', maxLength=127),
        clientSecret?: string(name='ClientSecret', description='The AccessKey secret of the client.', example='Qo57Q~F249~S74GmNPA36pZJoJK4f4LY****', maxLength=127),
      }(name='ClientParameters', description='The parameters that are configured for the client.'),
      httpMethod?: string(name='HttpMethod', description='The HTTP request method. Valid values:

*   GET
*   POST
*   HEAD
*   DELETE
*   PUT
*   PATCH', example='POST'),
      oAuthHttpParameters?: {
        bodyParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', description='Specifies whether to enable authentication.', example='false'),
            key?: string(name='Key', description='The key of the request body.', example='keyDemo'),
            value?: string(name='Value', description='The value of the request body.', example='keyValue'),
          }
        ](name='BodyParameters', description='The parameters that are configured for the request body.'),
        headerParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', description='Specifies whether to enable authentication.', example='false'),
            key?: string(name='Key', description='The key of the request header.', example='keyDemo'),
            value?: string(name='Value', description='The value of the request header.', example='keyValue'),
          }
        ](name='HeaderParameters', description='The parameters that are configured for the request header.'),
        queryStringParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', description='Specifies whether to enable authentication.', example='false'),
            key?: string(name='Key', description='The key of the request path.', example='keyDemo'),
            value?: string(name='Value', description='The value of the request path.', example='valueDemo'),
          }
        ](name='QueryStringParameters', description='The parameters that are configured for the request path.'),
      }(name='OAuthHttpParameters', description='The request parameters of OAuth authentication.'),
    }(name='OAuthParameters', description='The parameters that are configured for OAuth authentication.'),
  }(name='AuthParameters', description='The parameters that are configured for authentication.', shrink='json', position='Query'),
  connectionName: string(name='ConnectionName', description='The name of the connection. The name must be 2 to 127 characters in length.

This parameter is required.', example='connection-name', minLength=2, maxLength=127, position='Query'),
  description?: string(name='Description', description='The description of the connection. The description can be up to 255 characters in length.', example='demo', maxLength=255, position='Query'),
  networkParameters: {
    networkType: string(name='NetworkType', description='*   PublicNetwork: the Internet.
*   PrivateNetwork: virtual private cloud (VPC).

>  If you set this parameter to PrivateNetwork, you must also configure VpcId, VswitchId, and SecurityGroupId.

This parameter is required.', example='PublicNetwork'),
    securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9****'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='eb-test/vpc-bp1symadadwnwg****'),
    vswitcheId?: string(name='VswitcheId', description='The vSwitch ID.', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeq****'),
  }(name='NetworkParameters', description='The parameters that are configured for the network.

This parameter is required.', shrink='json', position='Query'),
}

model CreateConnectionResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  data?: {
    connectionName?: string(name='ConnectionName', description='The connection name.', example='connection-demo'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='7DA60DED-CD36-5837-B848-C01A23D2****'),
}

model CreateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConnectionResponseBody(name='body'),
}

/**
  * @description You can call this API operation to create a connection.
  * @param request  the request parameters of CreateConnection  CreateConnectionRequest
  * @return CreateConnectionResponse
 */
async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateEventBusRequest {
  description?: string(name='Description', description='The description of the event bus.', example='demo', maxLength=255, position='Query'),
  eventBusName: string(name='EventBusName', description='Indicates whether the request is successful. The value true indicates that the request is successful.

This parameter is required.', example='MyEventBus', minLength=2, maxLength=127, position='Query'),
}

model CreateEventBusResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    eventBusARN?: string(name='EventBusARN', description='The Alibaba Cloud Resource Name (ARN) of the event bus.', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/MyEventBus'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='The event bus [xxxx] not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='A995F07C-E503-5881-9962-9CECA8566876'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. The value true indicates that the request is successful.', example='true'),
}

model CreateEventBusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventBusResponseBody(name='body'),
}

/**
  * @description Creates an event bus.
  * @param request  the request parameters of CreateEventBus  CreateEventBusRequest
  * @return CreateEventBusResponse
 */
async function createEventBus(request: CreateEventBusRequest): CreateEventBusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEventBus', 'POST', '/', 'json', false, 'json', request);
}

model CreateEventSourceRequest {
  description?: string(name='Description', description='The description of the event source.', position='Body'),
  eventBusName: string(name='EventBusName', description='The name of the event bus with which the event source is associated.

This parameter is required.', example='my-event-bus', position='Body'),
  eventSourceName: string(name='EventSourceName', description='The name of the event source.

This parameter is required.', example='myrabbitmq.sourc', position='Body'),
  externalSourceConfig?: map[string]any(name='ExternalSourceConfig', description='The configurations of the external data source.', shrink='json', position='Body'),
  externalSourceType?: bytes(name='ExternalSourceType', description='The type of the external data source.', example='RabbitMQ', position='Body'),
  linkedExternalSource?: boolean(name='LinkedExternalSource', description='Specify whether to connect to an external data source.', example='true', position='Body'),
  sourceHttpEventParameters?: {
    ip?: [ string ](name='Ip', description='The CIDR block that is used for security settings. This parameter is required only if you set SecurityConfig to ip. You can enter a CIDR block or an IP address.'),
    method?: [ string ](name='Method', description='The HTTP request method supported by the generated webhook URL. You can select multiple values. Valid values:

*   GET
*   POST
*   PUT
*   PATCH
*   DELETE
*   HEAD
*   OPTIONS
*   TRACE
*   CONNECT'),
    referer?: [ string ](name='Referer', description='The security domain name. This parameter is required only if you set SecurityConfig to referer. You can enter a domain name.'),
    securityConfig?: string(name='SecurityConfig', description='The type of security settings. Valid values:

*   none: No configuration is required.
*   ip: CIDR block.
*   referer: security domain name.', example='none'),
    type?: string(name='Type', description='The protocol type that is supported by the generated webhook URL. Valid values:

*   HTTP
*   HTTPS
*   HTTP\\&HTTPS', example='HTTPS'),
  }(name='SourceHttpEventParameters', description='The parameters that are configured if the event source is HTTP events.', shrink='json', position='Body'),
  sourceKafkaParameters?: {
    consumerGroup?: string(name='ConsumerGroup', description='The ID of the consumer group that subscribes to the topic.', example='wechat_peer_prod'),
    instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache Kafka instance.', example='pc-2zehmg67txzuyuuwlxv4f'),
    maximumTasks?: int32(name='MaximumTasks', description='The maximum number of consumers.', example='1'),
    network?: string(name='Network', description='The network. Valid values: Default and PublicNetwork. Default value: Default. The value PublicNetwork indicates a self-managed network.', example='Default'),
    offsetReset?: string(name='OffsetReset', description='The consumer offset.', example='latest'),
    regionId?: string(name='RegionId', description='The ID of the region where the Message Queue for Apache Kafka instance resides.', example='cn-hangzhou'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the Message Queue for Apache Kafka instance belongs. This parameter is required only if you set Network to PublicNetwork.', example='sg-8vbf66aoyp0wfzrzxlmy'),
    topic?: string(name='Topic', description='The name of the topic on the Message Queue for Apache Kafka instance.', example='prod_ma_dispatch_center_call_record'),
    vSwitchIds?: string(name='VSwitchIds', description='The ID of the vSwitch with which the Message Queue for Apache Kafka instance is associated. This parameter is required only if you set Network to PublicNetwork.', example='vsw-bp127azpeirmwu4q9ttqi'),
    vpcId?: string(name='VpcId', description='The ID of the VPC in which the Message Queue for Apache Kafka instance resides. This parameter is required only if you set Network to PublicNetwork.', example='vpc-2ze5ejm986a73qq3vshlk'),
  }(name='SourceKafkaParameters', description='The parameters that are configured if the event source is Message Queue for Apache Kafka.', shrink='json', position='Body'),
  sourceMNSParameters?: {
    isBase64Decode?: boolean(name='IsBase64Decode', description='Specify whether to enable Base64 decoding. Valid values: true and false. If you set this parameter to true, Base64 decoding is enabled.', example='true'),
    queueName?: string(name='QueueName', description='The name of the SMQ queue.', example='MyQueue'),
    regionId?: string(name='RegionId', description='The ID of the region where the SMQ queue resides. Valid values: cn-qingdao, cn-beijing, cn-zhangjiakou, cn-huhehaote, cn-wulanchabu, cn-hangzhou, cn-shanghai, cn-shenzhen, cn-guangzhou, cn-chengdu, cn-hongkong, ap-southeast-1, ap-southeast-2, ap-southeast-3, ap-southeast-5, ap-northeast-1, eu-central-1, us-west-1, us-east-1, ap-south-1, me-east-1, and cn-north-2-gov-1.', example='cn-hangzhou'),
  }(name='SourceMNSParameters', description='The parameters that are configured if you specify Simple Message Queue (formerly MNS) (SMQ) as the event source. If you specify SMQ as the event source, you must configure RegionId, IsBase64Decode, and QueueName.', shrink='json', position='Body'),
  sourceRabbitMQParameters?: {
    instanceId?: string(name='InstanceId', description='The ID of the Message Queue for RabbitMQ instance. For more information, see Limits.', example='amqp-cn-nif22u74****'),
    queueName?: string(name='QueueName', description='The name of the queue on the Message Queue for RabbitMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='demo'),
    regionId?: string(name='RegionId', description='The ID of the region where the Message Queue for RabbitMQ instance resides.', example='cn-hangzhou'),
    virtualHostName?: string(name='VirtualHostName', description='The name of the vhost of the Message Queue for RabbitMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='eb-connect'),
  }(name='SourceRabbitMQParameters', description='The parameters that are configured if the event source is Message Queue for RabbitMQ.', shrink='json', position='Body'),
  sourceRocketMQParameters?: {
    authType?: string(name='AuthType', description='The authentication type. You can set this parameter to ACL or leave this parameter empty.', example='ACL'),
    groupID?: string(name='GroupID', description='The ID of the consumer group on the Message Queue for Apache RocketMQ instance.', example='GID-test'),
    instanceEndpoint?: string(name='InstanceEndpoint', description='The endpoint that is used to access the Message Queue for Apache RocketMQ instance.', example='registry-vpc****.aliyuncs.com'),
    instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache RocketMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='MQ_INST_164901546557****_BAAN****'),
    instanceNetwork?: string(name='InstanceNetwork', description='None.', example='None'),
    instancePassword?: string(name='InstancePassword', description='The password that is used to access the Message Queue for Apache RocketMQ instance.', example='******'),
    instanceSecurityGroupId?: string(name='InstanceSecurityGroupId', description='The ID of the security group to which the Message Queue for Apache RocketMQ instance belongs.', example='sg-catalog-eventlistener'),
    instanceType?: string(name='InstanceType', description='The type of the Message Queue for Apache RocketMQ instance. Valid values:

*   Cloud_4: Message Queue for Apache RocketMQ 4.0 instance.
*   Cloud_5: Message Queue for Apache RocketMQ 5.0 instance.', example='Cloud_4'),
    instanceUsername?: string(name='InstanceUsername', description='The username that is used to access the Message Queue for Apache RocketMQ instance.', example='root'),
    instanceVSwitchIds?: string(name='InstanceVSwitchIds', description='The ID of the vSwitch with which the Message Queue for Apache RocketMQ instance is associated.', example='vsw-bp10rbrt6rb6vrd89****'),
    instanceVpcId?: string(name='InstanceVpcId', description='The ID of the virtual private cloud (VPC) in which the Message Queue for Apache RocketMQ instance resides.', example='vpc-bp1a4gmlk31hyg6ptl3ss'),
    offset?: string(name='Offset', description='The offset from which message consumption starts. Valid values: CONSUME_FROM_LAST_OFFSET: Start message consumption from the latest offset. CONSUME_FROM_FIRST_OFFSET: Start message consumption from the earliest offset. CONSUME_FROM_TIMESTAMP: Start message consumption from the offset at the specified point in time. Default value: CONSUME_FROM_LAST_OFFSET.', example='CONSUME_FROM_LAST_OFFSET'),
    regionId?: string(name='RegionId', description='The region where the Message Queue for Apache RocketMQ instance resides.', example='cn-hangzhou'),
    tag?: string(name='Tag', description='The tag that is used to filter messages.', example='test'),
    timestamp?: long(name='Timestamp', description='The timestamp that specifies the time from which messages are consumed. This parameter is valid only if you set Offset to CONSUME_FROM_TIMESTAMP.', example='1636597951964'),
    topic?: string(name='Topic', description='The name of the topic on the Message Queue for Apache RocketMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='mytopic'),
  }(name='SourceRocketMQParameters', description='The parameters that are configured if the event source is Message Queue for Apache RocketMQ.', shrink='json', position='Body'),
  sourceSLSParameters?: {
    consumePosition?: string(name='ConsumePosition', description='The starting consumer offset. The value begin specifies the earliest offset, and the value end specifies the latest offset. You can also specify a time in seconds to start consumption.', example='end'),
    logStore?: string(name='LogStore', description='The Log Service Logstore.', example='test-logstore'),
    project?: string(name='Project', description='The Log Service project.', example='test-project'),
    roleName?: string(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the Resource Access Management (RAM) console. For information about the permission policy of this role, see Create a custom event source of the Log Service type.', example='testRole'),
  }(name='SourceSLSParameters', description='The parameters that are configured if the event source is Log Service.', shrink='json', position='Body'),
  sourceScheduledEventParameters?: {
    schedule?: string(name='Schedule', description='The cron expression.', example='10 * * * * *'),
    timeZone?: string(name='TimeZone', description='The time zone in which the cron expression is executed.', example='GMT+0:00'),
    userData?: string(name='UserData', example='{"a": "b"}'),
  }(name='SourceScheduledEventParameters', description='The parameters that are configured if you specify scheduled events as the event source.', shrink='json', position='Body'),
}

model CreateEventSourceResponseBody = {
  code?: string(name='Code', description='The returned response code. Valid values:

*   Success: The request is successful.
*   Other codes: The request failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    eventSourceARN?: string(name='EventSourceARN', description='The Alibaba Cloud Resource Name (ARN) of the resource.', example='acs:eventbridge:cn-hangzhou:164901546557****:eventbus/my-event-bus/eventsource/mymns.source'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='Remote error. requestId: [A8EFABD2-95B9-1C46-9E01-xxxx], error code: [CreateRelatedResourceFailed], message: [Create related resource failed, EntityNotExist.Role : The role not exists: xxxx. \\r\\nRequestId : xxxx-168C-54ED-8FEB-BF11CB70AEB7]'),
  requestId?: string(name='RequestId', description='The request ID.', example='2922208e-e1c6-43ee-bfd1-aca50263bc8a'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. The value true indicates that the operation is successful.', example='true'),
}

model CreateEventSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventSourceResponseBody(name='body'),
}

/**
  * @description You can call this operation to create an event source.
  * @param request  the request parameters of CreateEventSource  CreateEventSourceRequest
  * @return CreateEventSourceResponse
 */
async function createEventSource(request: CreateEventSourceRequest): CreateEventSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEventSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateEventStreamingRequest {
  description?: string(name='Description', description='The description of the event stream.', example='rocketmq2mns', position='Body'),
  eventStreamingName: string(name='EventStreamingName', description='The name of the event stream.

This parameter is required.', example='myeventstreaming', minLength=2, maxLength=255, position='Body'),
  filterPattern: string(name='FilterPattern', description='The rule that is used to filter events. If you leave this parameter empty, all events are matched.

This parameter is required.', position='Body'),
  runOptions?: {
    batchWindow?: {
      countBasedWindow?: int32(name='CountBasedWindow', description='The maximum number of events that are allowed in the batch window. When this threshold is reached, data in the window is pushed to the downstream service. If multiple batch windows exist, data is pushed if the triggering conditions are met in one of the windows.', example='100'),
      timeBasedWindow?: int32(name='TimeBasedWindow', description='The maximum period of time during which events are allowed in the batch window. Unit: seconds. When this threshold is reached, data in the window is pushed to the downstream service. If multiple batch windows exist, data is pushed if the triggering conditions are met in one of the windows.', example='10'),
    }(name='BatchWindow', description='The batch window.'),
    businessOption?: {
      businessMode?: string(name='BusinessMode'),
      maxCapacityUnitCount?: long(name='MaxCapacityUnitCount'),
      minCapacityUnitCount?: long(name='MinCapacityUnitCount'),
    }(name='BusinessOption'),
    deadLetterQueue?: {
      arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the dead-letter queue.', example='acs:ram::1317334647812936:role/rdstoecsassumekms'),
      network?: string(name='Network'),
      securityGroupId?: string(name='SecurityGroupId'),
      vSwitchIds?: string(name='VSwitchIds'),
      vpcId?: string(name='VpcId'),
    }(name='DeadLetterQueue', description='Specifies whether to enable dead-letter queues. By default, dead-letter queues are disabled. Messages that fail to be pushed after the allowed retries as specified by the retry policy are discarded.'),
    errorsTolerance?: string(name='ErrorsTolerance', description='The exception tolerance policy. Valid values:

*   NONE: does not tolerate exceptions.
*   ALL: tolerates all exceptions.', example='ALL'),
    maximumTasks?: long(name='MaximumTasks', description='The maximum number of concurrent tasks.', example='2'),
    retryStrategy?: {
      maximumEventAgeInSeconds?: long(name='MaximumEventAgeInSeconds', description='The maximum timeout period for a retry.', example='512'),
      maximumRetryAttempts?: long(name='MaximumRetryAttempts', description='The maximum number of retries.', example='2'),
      pushRetryStrategy?: string(name='PushRetryStrategy', description='The retry policy. Valid values:

*   BACKOFF_RETRY
*   EXPONENTIAL_DECAY_RETRY', example='BACKOFFRETRY'),
    }(name='RetryStrategy', description='The retry policy that you want to use if events fail to be pushed.'),
    throttling?: int32(name='Throttling'),
  }(name='RunOptions', description='The parameters that are configured for the runtime environment.', shrink='json', position='Body'),
  sink: {
    sinkApacheKafkaParameters?: {
      acks?: string(name='Acks'),
      bootstraps?: string(name='Bootstraps'),
      headers?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Headers'),
      key?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Key'),
      networkType?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='NetworkType'),
      saslMechanism?: string(name='SaslMechanism'),
      saslPassword?: string(name='SaslPassword'),
      saslUser?: string(name='SaslUser'),
      securityGroupId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='SecurityGroupId'),
      securityProtocol?: string(name='SecurityProtocol'),
      topic?: string(name='Topic'),
      vSwitchIds?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='VSwitchIds'),
      value?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Value'),
      vpcId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='VpcId'),
    }(name='SinkApacheKafkaParameters'),
    sinkApacheRocketMQCheckpointParameters?: {
      consumeTimestamp?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='ConsumeTimestamp'),
      group?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Group'),
      instanceEndpoint?: string(name='InstanceEndpoint'),
      instancePassword?: string(name='InstancePassword'),
      instanceUsername?: string(name='InstanceUsername'),
      networkType?: string(name='NetworkType'),
      securityGroupId?: string(name='SecurityGroupId'),
      topic?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Topic'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }(name='SinkApacheRocketMQCheckpointParameters'),
    sinkBaiLianParameters?: SinkBaiLianParameters(name='SinkBaiLianParameters'),
    sinkCustomizedKafkaConnectorParameters?: {
      connectorPackageUrl?: string(name='ConnectorPackageUrl', example='"https://examplebucket.oss-cn-hangzhou.aliyuncs.com/testDoc/Old_Homebrew/2024-06-26%2022%3A34%3A08/opt/homebrew/homebrew/Library/Homebrew/test/support/fixtures/cask/AppWithBinary.zip?OSSAccessKeyId=ri&Expires=1725539627&Signature=rb8q3OpV2i3gZJ"'),
      connectorParameters?: {
        config?: map[string]any(name='Config', example='{
          "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "tasks.max": "1",
          "topics": "sourceA,sourceB"
        }'),
        name?: string(name='Name', example='mongo-sink'),
      }(name='ConnectorParameters'),
      workerParameters?: map[string]any(name='WorkerParameters', example='{
        "group.id": "connect-eb-cluster-KAFKA_CONNECTORC",
        "offset.storage.topic": "connect-eb-offset-KAFKA_CONNECTOR_yjqC8K5ewC",
        "config.storage.topic": "connect-eb-config-KAFKA_CONNECTOR_yjqC8K5ewC",
        "status.storage.topic": "connect-eb-status-KAFKA_CONNECTOR_yjqC8K5ewC",
        "consumer.group.id": "connector-eb-cluster-KAFKA_CONNECTOR_yjqC8K5ewC-mongo-sink",
        "bootstrap.servers": "alikafka-post:9092"
      }'),
    }(name='SinkCustomizedKafkaConnectorParameters'),
    sinkCustomizedKafkaParameters?: {
      instanceId?: string(name='InstanceId', example='90be1f96-4229-4535-bb76-34b4f6fb2b71'),
    }(name='SinkCustomizedKafkaParameters'),
    sinkDashVectorParameters?: {
      apiKey?: string(name='ApiKey', example='Q34nExQH7sQ****'),
      collection?: string(name='Collection', example='collection1'),
      dashVectorSchemaParameters?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='[
  {
    "name": "schema1",
    "type": "INT",
    "value": "${value1}"
  },
  {
    "name": "schema2",
    "type": "FLOAT",
    "value": "${value2}"
  }
]'),
        value?: string(name='Value', example='{
  "value1":"v1",
  "value2":"v2"
}'),
      }(name='DashVectorSchemaParameters'),
      instanceId?: string(name='InstanceId', example='vrs-cn-lbj3ru1***'),
      network?: string(name='Network', example='PublicNetwork'),
      operation?: string(name='Operation', example='Upsert'),
      partition?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='default'),
      }(name='Partition'),
      primaryKeyId?: {
        form?: string(name='Form', example='JSONPATH'),
        template?: string(name='Template', example='${ID}'),
        value?: string(name='Value', example='$.data.requestId'),
      }(name='PrimaryKeyId'),
      vector?: {
        form?: string(name='Form', example='JSONPATH'),
        template?: string(name='Template'),
        value?: string(name='Value', example='$.data.messageBody'),
      }(name='Vector'),
    }(name='SinkDashVectorParameters'),
    sinkDataHubParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='ORIGINAL'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The BLOB topic.'),
      }(name='Body', description='The BLOB topic.'),
      project?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the DataHub project.', example='demo-project'),
      }(name='Project', description='The name of the DataHub project.'),
      roleName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The role name.', example='test-role'),
      }(name='RoleName', description='The role name.'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the DataHub topic.', example='demo-topic'),
      }(name='Topic', description='The name of the DataHub topic.'),
      topicSchema?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='{"k1":"${k1}","k2":"${k2}"}'),
        value?: string(name='Value', description='The TUBLE topic.', example='{"k1":"value1","k2":"value2"}'),
      }(name='TopicSchema', description='The TUBLE topic.'),
      topicType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The topic type. Valid values:

*   TUPLE
*   BLOB', example='TUPLE'),
      }(name='TopicType', description='The topic type. Valid values:

*   TUPLE
*   BLOB'),
    }(name='SinkDataHubParameters', description='The parameters that are configured if you specify DataHub as the event target.'),
    sinkDorisParameters?: {
      beHttpEndpoint?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='BeHttpEndpoint'),
      body?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Body'),
      database?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Database'),
      feHttpEndpoint?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='FeHttpEndpoint'),
      networkType?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='NetworkType'),
      password?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Password'),
      queryEndpoint?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='QueryEndpoint'),
      securityGroupId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='SecurityGroupId'),
      table?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Table'),
      userName?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='UserName'),
      vSwitchIds?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='VSwitchIds'),
      vpcId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='VpcId'),
    }(name='SinkDorisParameters'),
    sinkFcParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
      }(name='Body', description='The message body that you want to deliver to Function Compute.'),
      concurrency?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='None'),
        value?: string(name='Value', description='The delivery concurrency. Minimum value: 1.', example='1'),
      }(name='Concurrency', description='The delivery concurrency. Minimum value: 1.'),
      dataFormat?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='DataFormat'),
      functionName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The function name.', example='myFunction'),
      }(name='FunctionName', description='The function name.'),
      invocationType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The invocation mode. Valid values: Sync and Async.', example='Async'),
      }(name='InvocationType', description='The invocation mode. Valid values: Sync and Async.'),
      qualifier?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The service version.', example='LATEST'),
      }(name='Qualifier', description='The service version.'),
      serviceName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The service name.', example='myService'),
      }(name='ServiceName', description='The service name.'),
    }(name='SinkFcParameters', description='The parameters that are configured if you specify Function Compute as the event target.'),
    sinkFnfParameters?: {
      executionName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.'),
        value?: string(name='Value', description='The execution name.', example='123'),
      }(name='ExecutionName', description='The execution name.'),
      flowName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.'),
        value?: string(name='Value', description='The flow name.', example='test-streaming-fnf'),
      }(name='FlowName', description='The flow name.'),
      input?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.'),
        value?: string(name='Value', description='The input information of the execution.', example='123'),
      }(name='Input', description='The input information of the execution.'),
      roleName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.'),
        value?: string(name='Value', description='The role name.', example='Al****FNF-x****'),
      }(name='RoleName', description='The role name.'),
    }(name='SinkFnfParameters', description='The parameters that are configured if you specify CloudFlow as the event target.'),
    sinkKafkaParameters?: {
      acks?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The ACK mode.

*   If you set this parameter to 0, no response is returned from the broker. In this mode, the performance is high, but the risk of data loss is also high.
*   If you set this parameter to 1, a response is returned when data is written to the leader. In this mode, the performance and the risk of data loss are moderate. Data loss may occur if a failure occurs on the leader.
*   If you set this parameter to all, a response is returned when data is written to the leader and synchronized to the followers. In this mode, the performance is low, but the risk of data loss is also low. Data loss occurs if the leader and the followers fail at the same time.', example='1'),
      }(name='Acks', description='The acknowledgment (ACK) mode.

*   If you set this parameter to 0, no response is returned from the broker. In this mode, the performance is high, but the risk of data loss is also high.
*   If you set this parameter to 1, a response is returned when data is written to the leader. In this mode, the performance and the risk of data loss are moderate. Data loss may occur if a failure occurs on the leader.
*   If you set this parameter to all, a response is returned when data is written to the leader and synchronized to the followers. In this mode, the performance is low, but the risk of data loss is also low. Data loss occurs if the leader and the followers fail at the same time.'),
      headers?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Headers'),
      instanceId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The ID of the ApsaraMQ for Kafka instance.', example='Defaut_1283278472_sadkj'),
      }(name='InstanceId', description='The ID of the ApsaraMQ for Kafka instance.'),
      key?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The message key.', example='key'),
      }(name='Key', description='The message key.'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The name of the topic on the ApsaraMQ for Kafka instance.', example='test'),
      }(name='Topic', description='The name of the topic on the ApsaraMQ for Kafka instance.'),
      value?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
      }(name='Value', description='The message body.'),
    }(name='SinkKafkaParameters', description='The parameters that are configured if you specify ApsaraMQ for Kafka as the event target.'),
    sinkMNSParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
  "key": "value"
}'),
      }(name='Body', description='The message content.'),
      isBase64Encode?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='Specifies whether to enable Base64 encoding.', example='true'),
      }(name='IsBase64Encode', description='Specifies whether to enable Base64 encoding.'),
      queueName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The name of the MNS queue.', example='MyQueue'),
      }(name='QueueName', description='The name of the MNS queue.'),
    }(name='SinkMNSParameters', description='The parameters that are configured if you specify MNS as the event target.'),
    sinkOpenSourceRabbitMQParameters?: {
      authType?: string(name='AuthType'),
      body?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Body'),
      endpoint?: string(name='Endpoint'),
      exchange?: string(name='Exchange'),
      messageId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='MessageId'),
      networkType?: string(name='NetworkType'),
      password?: string(name='Password'),
      properties?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Properties'),
      queueName?: string(name='QueueName'),
      routingKey?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='RoutingKey'),
      securityGroupId?: string(name='SecurityGroupId'),
      targetType?: string(name='TargetType'),
      username?: string(name='Username'),
      vSwitchIds?: string(name='VSwitchIds'),
      virtualHostName?: string(name='VirtualHostName'),
      vpcId?: string(name='VpcId'),
    }(name='SinkOpenSourceRabbitMQParameters'),
    sinkPrometheusParameters?: {
      authorizationType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The authentication method.', example='BASIC_AUTH'),
      }(name='AuthorizationType', description='The authentication method.'),
      data?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: JSAONPATH.', example='JSAONPATH'),
        template?: string(name='Template', description='The template based on which you want to transform events.'),
        value?: string(name='Value', description='The metric data.', example='$.data'),
      }(name='Data', description='The metric data.'),
      headerParameters?: {
        form?: string(name='Form', example='TEMPLATE'),
        template?: string(name='Template', example='{
    "user_name":"${name}"
}'),
        value?: string(name='Value'),
      }(name='HeaderParameters'),
      networkType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The network type.', example='PrivateNetwork'),
      }(name='NetworkType', description='The network type.'),
      password?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The password.', example='*****'),
      }(name='Password', description='The password.'),
      securityGroupId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the security group to which the Managed Service for Prometheus instance belongs.', example='sg-mw43*****'),
      }(name='SecurityGroupId', description='The ID of the security group to which the Managed Service for Prometheus instance belongs.'),
      URL?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The URL for the remote write configuration item of the Managed Service for Prometheus instance.'),
      }(name='URL', description='The URL for the remote write configuration item of the Managed Service for Prometheus instance.'),
      username?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The username.', example='****admin'),
      }(name='Username', description='The username.'),
      vSwitchId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the vSwitch with which the Managed Service for Prometheus instance is associated.', example='vsw-dwaafds****'),
      }(name='VSwitchId', description='The ID of the vSwitch with which the Managed Service for Prometheus instance is associated.'),
      vpcId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the VPC to which the Managed Service for Prometheus instance belongs.', example='i-2ze7u5i17mbqtx1p****'),
      }(name='VpcId', description='The ID of the VPC to which the Managed Service for Prometheus instance belongs.'),
    }(name='SinkPrometheusParameters', description='The parameters that are configured if you specify Managed Service for Prometheus as the event target.'),
    sinkRabbitMQParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
  "key": "value"
}'),
      }(name='Body', description='The message content.'),
      exchange?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The name of the exchange on the ApsaraMQ for RabbitMQ instance.', example='a_exchange'),
      }(name='Exchange', description='The exchange mode. This parameter is required only if you set TargetType to Exchange.'),
      instanceId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The ID of the ApsaraMQ for RabbitMQ instance.', example='a5ff91ad4f3f24947887fe184fc20d07'),
      }(name='InstanceId', description='The ID of the ApsaraMQ for RabbitMQ instance.'),
      messageId?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
  "key": "value"
}'),
      }(name='MessageId', description='The message ID.'),
      properties?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
  "key": "value"
}'),
      }(name='Properties', description='The properties that you want to use to filter messages.'),
      queueName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The name of the queue on the ApsaraMQ for RabbitMQ instance.', example='MyQueue'),
      }(name='QueueName', description='The queue mode. This parameter is required only if you set TargetType to Queue.'),
      routingKey?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The rule that you want to use to route messages.', example='housekeeping'),
      }(name='RoutingKey', description='The rule that you want to use to route messages. This parameter is required only if you set TargetType to Exchange.'),
      targetType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The type of the resource to which you want to deliver events. Valid values:

*   Exchange
*   Queue', example='Exchange/Queue'),
      }(name='TargetType', description='The type of the resource to which you want to deliver events.'),
      virtualHostName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The name of the vhost to which the ApsaraMQ for RabbitMQ instance belongs.', example='rabbit-host'),
      }(name='VirtualHostName', description='The name of the vhost to which the ApsaraMQ for RabbitMQ instance belongs.'),
    }(name='SinkRabbitMQParameters', description='The parameters that are configured if you specify ApsaraMQ for RabbitMQ as the event target.'),
    sinkRocketMQCheckpointParameters?: {
      consumeTimestamp?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='ConsumeTimestamp'),
      group?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Group'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      topic?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Topic'),
    }(name='SinkRocketMQCheckpointParameters'),
    sinkRocketMQParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
  "key": "value"
}'),
      }(name='Body', description='The message content.'),
      deliveryOrderType?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='DeliveryOrderType'),
      instanceEndpoint?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The endpoint that you want to use to access the ApsaraMQ for RocketMQ instance.', example='vbr-8vbsvkkbpf3vb0zefs7ex'),
      }(name='InstanceEndpoint', description='The endpoint that you want to use to access the ApsaraMQ for RocketMQ instance.'),
      instanceId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The ID of the ApsaraMQ for RocketMQ instance.', example='MQ_INST_164901546557****_BAAN****'),
      }(name='InstanceId', description='The ID of the ApsaraMQ for RocketMQ instance.'),
      instancePassword?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The password that you want to use to access the ApsaraMQ for RocketMQ instance.', example='admin'),
      }(name='InstancePassword', description='The password that you want to use to access the ApsaraMQ for RocketMQ instance.'),
      instanceType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The type of the ApsaraMQ for RocketMQ instance.', example='2'),
      }(name='InstanceType', description='The type of the ApsaraMQ for RocketMQ instance.'),
      instanceUsername?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The username that you want to use to access the ApsaraMQ for RocketMQ instance.', example='admin'),
      }(name='InstanceUsername', description='The username that you want to use to access the ApsaraMQ for RocketMQ instance.'),
      keys?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
  "key": "value"
}'),
      }(name='Keys', description='The keys that you want to use to filter messages.'),
      network?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The network type.

*   PublicNetwork
*   PrivateNetwork', example='PublicNetwork'),
      }(name='Network', description='The network type.

*   PublicNetwork
*   PrivateNetwork'),
      properties?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
  "key": "value"
}'),
      }(name='Properties', description='The properties that you want to use to filter messages.'),
      securityGroupId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the security group to which the ApsaraMQ for RocketMQ instance belongs.', example='b4bf375515f6440f942e3a20c33d5b9c'),
      }(name='SecurityGroupId', description='The ID of the security group to which the ApsaraMQ for RocketMQ instance belongs.'),
      shardingKey?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='ShardingKey'),
      tags?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
  "key": "value"
}'),
      }(name='Tags', description='The tags that you want to use to filter messages.'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The name of the topic on the ApsaraMQ for RocketMQ instance.', example='Mytopic'),
      }(name='Topic', description='The name of the topic on the ApsaraMQ for RocketMQ instance.'),
      vSwitchIds?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the vSwitch with which the ApsaraMQ for RocketMQ instance is associated.', example='vbr-8vb835n3zf9shwlvbwlmp'),
      }(name='VSwitchIds', description='The ID of the vSwitch with which the ApsaraMQ for RocketMQ instance is associated.'),
      vpcId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the VPC to which the ApsaraMQ for RocketMQ instance belongs.', example='vbr-8vb835n3zf9shwlvbwlmp'),
      }(name='VpcId', description='The ID of the VPC to which the ApsaraMQ for RocketMQ instance belongs.'),
    }(name='SinkRocketMQParameters', description='The parameters that are configured if you specify ApsaraMQ for RocketMQ as the event target.'),
    sinkSLSParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want to transform events.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
      }(name='Body', description='The message body that you want to deliver to Simple Log Service.'),
      contentSchema?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='{"Key_1":{"form":"CONSTANT","value":"demoKey"},"Value_1":{"form":"JSONPATH","value":"$.data.value"}}'),
      }(name='ContentSchema'),
      contentType?: {
        form?: string(name='Form', example='CONSTANT'),
        template?: string(name='Template'),
        value?: string(name='Value', example='JSON'),
      }(name='ContentType'),
      logStore?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The Simple Log Service Logstore.', example='test-logstore'),
      }(name='LogStore', description='The Simple Log Service Logstore.'),
      project?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The Simple Log Service project.', example='test-project'),
      }(name='Project', description='The Simple Log Service project.'),
      roleName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the RAM console.', example='testRole'),
      }(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the RAM console.'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The topic that you want to use to store logs. This parameter corresponds to the reserved field **topic** in Simple Log Service.', example='testTopic'),
      }(name='Topic', description='The topic that you want to use to store logs. This parameter corresponds to the reserved field **topic** in Simple Log Service.'),
    }(name='SinkSLSParameters', description='The parameters that are configured if you specify Simple Log Service as the event target.'),
  }(name='Sink', description='The event target. You must and can specify only one event target.

This parameter is required.', shrink='json', position='Body'),
  source: {
    sourceApacheKafkaParameters?: {
      bootstraps?: string(name='Bootstraps'),
      consumerGroup?: string(name='ConsumerGroup'),
      networkType?: string(name='NetworkType'),
      offsetReset?: string(name='OffsetReset'),
      saslMechanism?: string(name='SaslMechanism'),
      saslPassword?: string(name='SaslPassword'),
      saslUser?: string(name='SaslUser'),
      securityGroupId?: string(name='SecurityGroupId'),
      securityProtocol?: string(name='SecurityProtocol'),
      topic?: string(name='Topic'),
      vSwitchIds?: string(name='VSwitchIds'),
      valueDataType?: string(name='ValueDataType'),
      vpcId?: string(name='VpcId'),
    }(name='SourceApacheKafkaParameters'),
    sourceApacheRocketMQCheckpointParameters?: {
      instanceEndpoint?: string(name='InstanceEndpoint'),
      instancePassword?: string(name='InstancePassword'),
      instanceUsername?: string(name='InstanceUsername'),
      networkType?: string(name='NetworkType'),
      regionId?: string(name='RegionId'),
      securityGroupId?: string(name='SecurityGroupId'),
      topics?: [ string ](name='Topics'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }(name='SourceApacheRocketMQCheckpointParameters'),
    sourceCustomizedKafkaConnectorParameters?: {
      connectorPackageUrl?: string(name='ConnectorPackageUrl', example='"https://examplebucket.oss-cn-hangzhou.aliyuncs.com/testDoc/Old_Homebrew/2024-06-26%2022%3A34%3A08/opt/homebrew/homebrew/Library/Homebrew/test/support/fixtures/cask/AppWithBinary.zip?OSSAccessKeyId=ri&Expires=1725539627&Signature=rb8q3OpV2i3gZJ"'),
      connectorParameters?: {
        config?: map[string]any(name='Config', example='{
          "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "tasks.max": "1",
          "topics": "sourceA,sourceB"
        }'),
        name?: string(name='Name', example='test-name'),
      }(name='ConnectorParameters'),
      workerParameters?: map[string]any(name='WorkerParameters', example='{
        "group.id": "connect-eb-cluster-KAFKA_CONNECTORC",
        "offset.storage.topic": "connect-eb-offset-KAFKA_CONNECTOR_yjqC8K5ewC",
        "config.storage.topic": "connect-eb-config-KAFKA_CONNECTOR_yjqC8K5ewC",
        "status.storage.topic": "connect-eb-status-KAFKA_CONNECTOR_yjqC8K5ewC",
        "consumer.group.id": "connector-eb-cluster-KAFKA_CONNECTOR_yjqC8K5ewC-mongo-sink",
        "bootstrap.servers": "alikafka-post:9092"
      }'),
    }(name='SourceCustomizedKafkaConnectorParameters'),
    sourceCustomizedKafkaParameters?: {
      instanceId?: string(name='InstanceId', example='r-8vb64581862c****'),
    }(name='SourceCustomizedKafkaParameters'),
    sourceDTSParameters?: {
      brokerUrl?: string(name='BrokerUrl', description='The URL and port number of the change tracking instance.'),
      initCheckPoint?: long(name='InitCheckPoint', description='The UNIX timestamp that is generated when the SDK client consumes the first data record.', example='1620962769'),
      password?: string(name='Password', description='The consumer group password.', example='admin'),
      sid?: string(name='Sid', description='The consumer group ID.', example='HD3'),
      taskId?: string(name='TaskId', description='The task ID.', example='f86e5814-b223-482c-b768-3b873297dade'),
      topic?: string(name='Topic', description='The name of the tracked topic of the change tracking instance.', example='LTC_CACHE_PRD'),
      username?: string(name='Username', description='The consumer group username.', example='admin'),
    }(name='SourceDTSParameters', description='The parameters that are configured if you specify Data Transmission Service (DTS) as the event source.'),
    sourceEventBusParameters?: {
      eventBusName?: string(name='EventBusName'),
      eventRuleName?: string(name='EventRuleName'),
    }(name='SourceEventBusParameters'),
    sourceKafkaParameters?: {
      consumerGroup?: string(name='ConsumerGroup', description='The group ID of the consumer that subscribes to the topic.', example='DEFAULT_GROUP'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for Kafka instance.', example='r-8vb64581862cd814'),
      network?: string(name='Network', description='The network type. Default value: Default. The value PublicNetwork specifies a virtual private cloud (VPC).', example='Default'),
      offsetReset?: string(name='OffsetReset', description='The offset from which messages are consumed.', example='latest'),
      regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for Kafka instance resides.', example='cn-hangzhou'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the ApsaraMQ for Kafka instance belongs.', example='sg-bp1iv19sp1msc7zot4wr'),
      topic?: string(name='Topic', description='The name of the topic on the ApsaraMQ for Kafka instance.', example='popvip_center_robot_order'),
      vSwitchIds?: string(name='VSwitchIds', description='The ID of the vSwitch with which the ApsaraMQ for Kafka instance is associated.', example='vsw-bp179l3llg3jjxwrq72hh'),
      valueDataType?: string(name='ValueDataType', example='JSON'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the ApsaraMQ for Kafka instance belongs.', example='vpc-8vblalsi0vbhizr77cbhu'),
    }(name='SourceKafkaParameters', description='The parameters that are configured if you specify ApsaraMQ for Kafka as the event source.'),
    sourceMNSParameters?: {
      isBase64Decode?: boolean(name='IsBase64Decode', description='Specifies whether to enable Base64 encoding. Default value: true.', example='true'),
      queueName?: string(name='QueueName', description='The queue name.', example='queue_api_1642474203601'),
      regionId?: string(name='RegionId', description='The ID of the region where the MNS queue resides.', example='cn-beijing'),
    }(name='SourceMNSParameters', description='The parameters that are configured if you specify Message Service (MNS) as the event source.'),
    sourceMQTTParameters?: {
      bodyDataType?: string(name='BodyDataType', example='JSON'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='r-bp1b5ncun5lqerzg4r'),
      regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides.', example='cn-shenzhen'),
      topic?: string(name='Topic', description='The topic from which messages are sent.', example='CANAL_VICUTU_UAT'),
    }(name='SourceMQTTParameters', description='The parameters that are configured if you specify ApsaraMQ for MQTT as the event source.'),
    sourceMySQLParameters?: SourceMySQLParameters(name='SourceMySQLParameters'),
    sourceOSSParameters?: {
      bucketName?: string(name='BucketName', example='bucket_abc'),
      delimiter?: string(name='Delimiter', example='\\n'),
      loadFormat?: string(name='LoadFormat', example='TextLoader'),
      loadMode?: string(name='LoadMode', example='single'),
      prefix?: string(name='Prefix', example='fun/document/'),
      roleName?: string(name='RoleName', example='eventbridge_oss_role'),
    }(name='SourceOSSParameters'),
    sourceOpenSourceRabbitMQParameters?: {
      authType?: string(name='AuthType'),
      bodyDataType?: string(name='BodyDataType'),
      endpoint?: string(name='Endpoint'),
      networkType?: string(name='NetworkType'),
      password?: string(name='Password'),
      queueName?: string(name='QueueName'),
      securityGroupId?: string(name='SecurityGroupId'),
      username?: string(name='Username'),
      vSwitchIds?: string(name='VSwitchIds'),
      virtualHostName?: string(name='VirtualHostName'),
      vpcId?: string(name='VpcId'),
    }(name='SourceOpenSourceRabbitMQParameters'),
    sourcePrometheusParameters?: {
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c83555068b6******ad213f565f209'),
      dataType?: string(name='DataType', description='The data type.', example='json'),
      externalLabels?: string(name='ExternalLabels'),
      labels?: string(name='Labels', description='The labels.', example='__name__=.*'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      roleName?: string(name='RoleName'),
    }(name='SourcePrometheusParameters', description='Parameters that are configured if you specify Managed Service for Prometheus as the event source.'),
    sourceRabbitMQParameters?: {
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for RabbitMQ instance.', example='gtm-cn-k2c2yfgzt02'),
      queueName?: string(name='QueueName', description='The name of the queue on the ApsaraMQ for RabbitMQ instance.', example='demo'),
      regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for RabbitMQ instance resides. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/62010.html) operation to query the most recent region list.', example='cn-hangzhou'),
      virtualHostName?: string(name='VirtualHostName', description='The name of the vhost to which the ApsaraMQ for RabbitMQ instance belongs.', example='eb-connect'),
    }(name='SourceRabbitMQParameters', description='The parameters that are configured if you specify ApsaraMQ for RabbitMQ as the event source.'),
    sourceRocketMQCheckpointParameters?: {
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
      topics?: [ string ](name='Topics'),
    }(name='SourceRocketMQCheckpointParameters'),
    sourceRocketMQParameters?: {
      authType?: string(name='AuthType', description='The authentication method.', example='ACL'),
      bodyDataType?: string(name='BodyDataType', example='JSON'),
      filterSql?: string(name='FilterSql', description='The SQL statement that you want to use to filter messages.', example='index > 10'),
      filterType?: string(name='FilterType', description='The method that you want to use to filter messages.', example='Tag'),
      groupID?: string(name='GroupID', description='The ID of the consumer group on the ApsaraMQ for RocketMQ instance.', example='GID_group1'),
      instanceEndpoint?: string(name='InstanceEndpoint', description='The endpoint that you want to use to access the ApsaraMQ for RocketMQ instance.', example='registry-vpc.cn-zhangjiakou.aliyuncs.com'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for RocketMQ instance.', example='default_C56C360261515'),
      instanceNetwork?: string(name='InstanceNetwork', description='The network type. Valid values:

*   PublicNetwork
*   PrivateNetwork', example='PublicNetwork'),
      instancePassword?: string(name='InstancePassword', description='The password that you want to use to access the ApsaraMQ for RocketMQ instance.', example='admin'),
      instanceSecurityGroupId?: string(name='InstanceSecurityGroupId', description='The ID of the security group to which the ApsaraMQ for RocketMQ instance belongs.', example='sg-m5edtu24f123456789'),
      instanceType?: string(name='InstanceType', description='The type of the ApsaraMQ for RocketMQ instance.', example='2'),
      instanceUsername?: string(name='InstanceUsername', description='The username that you want to use to access the ApsaraMQ for RocketMQ instance.', example='admin'),
      instanceVSwitchIds?: string(name='InstanceVSwitchIds', description='The ID of the vSwitch with which the ApsaraMQ for RocketMQ instance is associated.', example='vsw-m5ev8asdc6h123456789'),
      instanceVpcId?: string(name='InstanceVpcId', description='The ID of the VPC to which the ApsaraMQ for RocketMQ instance belongs.', example='vpc-m5e3sv4b123456789'),
      network?: string(name='Network', description='The network type. Valid values: PublicNetwork and PrivateNetwork.', example='PrivateNetwork'),
      offset?: string(name='Offset', description='The offset from which messages are consumed. Valid values:

*   CONSUME_FROM_LAST_OFFSET: Messages are consumed from the latest offset.
*   CONSUME_FROM_FIRST_OFFSET: Messages are consumed from the earliest offset.
*   CONSUME_FROM_TIMESTAMP: Messages are consumed from the offset at the specified point in time.

Default value: CONSUME_FROM_LAST_OFFSET.', example='CONSUMEFROMLAST_OFFSET'),
      regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for RocketMQ instance resides.', example='cn-qingdao'),
      securityGroupId?: string(name='SecurityGroupId', description='The security group ID of the cross-border task.', example='sg-m5edtu24f123456789'),
      tag?: string(name='Tag', description='The tag that you want to use to filter messages.', example='test'),
      timestamp?: long(name='Timestamp', description='The timestamp that indicates the time from which messages are consumed. This parameter is valid only if you set Offset to CONSUME_FROM_TIMESTAMP.', example='1670656652009'),
      topic?: string(name='Topic', description='The name of the topic on the ApsaraMQ for RocketMQ instance.', example='Topic_publicRule_api_1667273421288'),
      vSwitchIds?: string(name='VSwitchIds', description='The vSwitch ID of the cross-border task.', example='vsw-m5ev8asdc6h123456789'),
      vpcId?: string(name='VpcId', description='The VPC ID of the cross-border task.', example='vpc-m5e3sv4b123456789'),
    }(name='SourceRocketMQParameters', description='The parameters that are configured if you specify ApsaraMQ for RocketMQ as the event source.'),
    sourceSLSParameters?: {
      consumePosition?: string(name='ConsumePosition', description='The consumer offset. The value begin specifies the earliest offset. The value end specifies the latest offset. You can also specify a time in seconds to start consumption.', example='end'),
      logStore?: string(name='LogStore', description='The Simple Log Service Logstore.', example='sas-log'),
      project?: string(name='Project', description='The Simple Log Service project.', example='test'),
      roleName?: string(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the Resource Access Management (RAM) console.', example='testRole'),
    }(name='SourceSLSParameters', description='The parameters that are configured if you specify Simple Log Service as the event source.'),
  }(name='Source', description='The event provider, which is also known as the event source. You must and can specify only one event source.

This parameter is required.', shrink='json', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Body'),
  transforms?: [ 
    {
      arn?: string(name='Arn', example='acs:fc:cn-hangzhou:*****:services/demo-service.LATEST/functions/demo-func'),
    }
  ](name='Transforms', shrink='json', position='Body'),
}

model CreateEventStreamingResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   Success: The request is successful.
*   Other codes: The request failed. For more information about error codes, see Error codes.', example='200'),
  data?: {
    eventStreamingARN?: string(name='EventStreamingARN', description='The ARN of the event stream.', example='acs:eventbridge:cn-hangzhou:164901546557****:eventstreaming/myeventstreaming'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='The name [xxxx] of event streaming in request is already exist!'),
  requestId?: string(name='RequestId', description='The request ID.', example='B896B484-F16D-59DE-9E23-DD0E5C361108'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. The value true indicates that the operation is successful.', example='true'),
}

model CreateEventStreamingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventStreamingResponseBody(name='body'),
}

/**
  * @description You can call this API operation to create an event stream.
  * @param request  the request parameters of CreateEventStreaming  CreateEventStreamingRequest
  * @return CreateEventStreamingResponse
 */
async function createEventStreaming(request: CreateEventStreamingRequest): CreateEventStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEventStreaming', 'POST', '/', 'json', true, 'form', request);
}

model CreateRuleRequest {
  description?: string(name='Description', description='The description of the event bus.', position='Query'),
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='MyEventBus', position='Query'),
  eventTargets?: [ 
    {
      concurrentConfig?: {
        concurrency?: long(name='Concurrency', description='The concurrency.', example='2'),
      }(name='ConcurrentConfig', description='The concurrency configuration.'),
      deadLetterQueue?: {
        arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the dead-letter queue. Events that are not processed or whose maximum number of retries is exceeded are written to the dead-letter queue. Queues in SMQ and ApsaraMQ for RocketMQ can be used as dead-letter queues.', example='acs:mns:cn-hangzhou:123456789098****:/queues/rule-deadletterqueue'),
        network?: string(name='Network'),
        securityGroupId?: string(name='SecurityGroupId'),
        vSwitchIds?: string(name='VSwitchIds'),
        vpcId?: string(name='VpcId'),
      }(name='DeadLetterQueue', description='The dead-letter queue. Events that are not processed or whose maximum number of retries is exceeded are written to the dead-letter queue. You can use queues in ApsaraMQ for RocketMQ, Simple Message Queue (SMQ, formerly MNS), and ApsaraMQ for Kafka as dead-letter queues. You can also use event buses in EventBridge as dead-letter queues.'),
      endpoint?: string(name='Endpoint', description='The endpoint of the event target.', example='acs:mns:cn-hangzhou:123456789098****:queues/myqueue'),
      errorsTolerance?: string(name='ErrorsTolerance', description='The fault tolerance policy. Valid values: ALL and NONE. The value ALL specifies that fault tolerance is allowed. If an error occurs in an event, event processing is not blocked. If the event fails to be sent after the maximum number of retries specified by the retry policy is reached, the event is delivered to the dead-letter queue or discarded based on your configurations. The value NONE specifies that fault tolerance is not allowed. If an error occurs in an event and the event fails to be sent after the maximum number of retries specified by the retry policy is reached, event processing is blocked.', example='ALL'),
      id: string(name='Id', description='The ID of the event target.

This parameter is required.', example='12021'),
      paramList?: [ 
        {
          form?: string(name='Form', description='The format of input parameters for the event target. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='TEMPLATE'),
          resourceKey?: string(name='ResourceKey', description='The resource key of the event target. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='body'),
          template?: string(name='Template', description='The structure of the template for the event target.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value of the event target parameter.', example='{\\"key\\"=\\"value\\"}'),
        }
      ](name='ParamList', description='The parameters that are configured for the event target.'),
      pushRetryStrategy?: string(name='PushRetryStrategy', description='The retry policy that you want to use to push failed events. Valid values: BACKOFF_RETRY and EXPONENTIAL_DECAY_RETRY. BACKOFF_RETRY: A failed event can be retried up to three times. The interval between two consecutive retries is a random value from 10 seconds to 20 seconds. EXPONENTIAL_DECAY_RETRY: A failed event can be retried up to 176 times. The interval between two consecutive retries exponentially increases to a maximum of 512 seconds. The total retry time is 1 day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, and 512 seconds. The interval of 512 seconds is used for 167 retries.', example='BACKOFF_RETRY'),
      type: string(name='Type', description='The type of the event target. For more information, see [Event target parameters](https://help.aliyun.com/document_detail/185887.html).

This parameter is required.', example='acs.mns.queue'),
    }
  ](name='EventTargets', description='The event targets.', shrink='json', position='Query'),
  filterPattern: string(name='FilterPattern', description='The event pattern, in JSON format. Valid values: stringEqual and stringExpression. You can specify up to five expressions in the map data structure in each field.

You can specify up to five expressions in the map data structure in each field.

This parameter is required.', example='{\\"source\\": [{\\"prefix\\": \\"acs.\\"}],\\"type\\": [{\\"prefix\\":\\"oss:ObjectReplication\\"}],\\"subject\\":[{\\"prefix\\":\\"acs:oss:cn-hangzhou:123456789098****:my-movie-bucket/\\", \\"suffix\\":\\".txt\\"}]}', position='Query'),
  ruleName: string(name='RuleName', description='The name of the event rule.

This parameter is required.', example='MNSRule', position='Query'),
  status?: string(name='Status', description='The status of the event rule. Valid values: ENABLE: enables the event rule. It is the default status of the event rule. DISABLE: disables the event rule.', example='ENABLE', position='Query'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code', description='The returned HTTP status code. The HTTP status code 200 indicates that the request is successful.', example='200'),
  data?: {
    ruleARN?: string(name='RuleARN', description='The ARN of the event rule. The ARN is used for authorization.', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/default/rule/MNSRule'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='Remote error. requestId: [xxxx], error code: [xxx], message: [The target in event rule is invalid! Endpoint is xxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AD6D598-7506-5D2C-81EA-30E3241A903A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
}

model CreateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRuleResponseBody(name='body'),
}

/**
  * @description You can call this API operation to create an event rule.
  * @param request  the request parameters of CreateRule  CreateRuleRequest
  * @return CreateRuleResponse
 */
async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleForProductRequest {
  productName: string(name='ProductName', description='The name of the cloud service or the name of the service-linked role with which the cloud service is associated. Valid values:

*   AliyunServiceRoleForEventBridgeSendToFC: allows EventBridge to deliver events to Function Compute.
*   AliyunServiceRoleForEventBridgeSendToSMS: allows EventBridge to deliver events to Short Message Service (SMS).
*   AliyunServiceRoleForEventBridgeSendToDirectMail: allows EventBridge to deliver events to Direct Mail.
*   AliyunServiceRoleForEventBridgeSourceRocketMQ: allows EventBridge to integrate with ApsaraMQ for RocketMQ.
*   AliyunServiceRoleForEventBridgeSourceMNS: allows EventBridge to integrate with Simple Message Queue (SMQ, formerly MNS).
*   AliyunServiceRoleForEventBridgeConnectVPC: allows EventBridge to access virtual private clouds (VPCs).
*   AliyunServiceRoleForEventBridgeSourceActionTrail: allows EventBridge to integrate with ActionTrail.
*   AliyunServiceRoleForEventBridgeSourceRabbitMQ: allows EventBridge to integrate with ApsaraMQ for RabbitMQ.
*   AliyunServiceRoleForEventBridgeSendToRabbitMQ: allows EventBridge to deliver events to ApsaraMQ for RabbitMQ.
*   AliyunServiceRoleForEventBridgeSendToRocketMQ: allows EventBridge to deliver events to ApsaraMQ for RocketMQ.
*   AliyunServiceRoleForEventBridgeSourceCMS: allow EventBridge to integrate with CloudMonitor.
*   AliyunServiceRoleForEventBridgeSendToKafka: allows EventBridge to deliver events to ApsaraMQ for Kafka.
*   AliyunServiceRoleForEventBridgeSourceKafka: allows EventBridge to integrate with ApsaraMQ for Kafka.
*   AliyunServiceRoleForEventBridgeSendToRDS: allows EventBridge to deliver events to ApsaraDB RDS.
*   AliyunServiceRoleForEventBridgeSendToSAE: allows EventBridge to deliver events to Serverless App Engine (SAE).
*   AliyunServiceRoleForEventBridgeSourceMqtt: allows EventBridge to integrate with ApsaraMQ for MQTT.
*   AliyunServiceRoleForEventBridgeSourceSLS: allows EventBridge to integrate with Simple Log Service.

This parameter is required.', example='AliyunServiceRoleForEventBridgeSendToMNS', position='Query'),
}

model CreateServiceLinkedRoleForProductResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  httpCode?: int32(name='HttpCode', example='200'),
  message?: string(name='Message', description='The returned message. If the request is successful, success is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='C36345A1-75F3-5A1A-BFCF-33B8271971FA'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. If the operation was successful, the value true is returned.', example='true'),
}

model CreateServiceLinkedRoleForProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceLinkedRoleForProductResponseBody(name='body'),
}

/**
  * @description You can call this API operation to create a service-linked role for your cloud service.
  * @param request  the request parameters of CreateServiceLinkedRoleForProduct  CreateServiceLinkedRoleForProductRequest
  * @return CreateServiceLinkedRoleForProductResponse
 */
async function createServiceLinkedRoleForProduct(request: CreateServiceLinkedRoleForProductRequest): CreateServiceLinkedRoleForProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRoleForProduct', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiDestinationRequest {
  apiDestinationName: string(name='ApiDestinationName', description='The name of the API destination.

This parameter is required.', example='ApiDestinationName', position='Query'),
}

model DeleteApiDestinationResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='Message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='382E6272-8E9C-5681-AC96-A8AF0BFAC1A5'),
}

model DeleteApiDestinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiDestinationResponseBody(name='body'),
}

/**
  * @description You can call this API operation to delete an API destination.
  * @param request  the request parameters of DeleteApiDestination  DeleteApiDestinationRequest
  * @return DeleteApiDestinationResponse
 */
async function deleteApiDestination(request: DeleteApiDestinationRequest): DeleteApiDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiDestination', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConnectionRequest {
  connectionName: string(name='ConnectionName', description='The name of the connection that you want to delete.

This parameter is required.', example='connection-name', position='Query'),
}

model DeleteConnectionResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='Message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='8EF25E37-1750-5D7A-BA56-F8AE081A69C8'),
}

model DeleteConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConnectionResponseBody(name='body'),
}

/**
  * @description You can call this API operation to delete a connection.
  * @param request  the request parameters of DeleteConnection  DeleteConnectionRequest
  * @return DeleteConnectionResponse
 */
async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConnection', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventBusRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='MyEventBus', position='Query'),
}

model DeleteEventBusResponseBody = {
  code?: string(name='Code', description='The response code. The code 200 indicates that the request was successful. Other codes indicate that the request failed. For information about error codes, see Error codes.', example='200'),
  data?: boolean(name='Data'),
  message?: string(name='Message', description='The returned error message.', example='EventBusNotExist'),
  requestId?: string(name='RequestId', description='The request ID.', example='C229E140-1A5C-5D55-8904-CFC5BA4CAA98'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values: true and false.', example='true'),
}

model DeleteEventBusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventBusResponseBody(name='body'),
}

/**
  * @description You can call this API operation to delete an event bus.
  * @param request  the request parameters of DeleteEventBus  DeleteEventBusRequest
  * @return DeleteEventBusResponse
 */
async function deleteEventBus(request: DeleteEventBusRequest): DeleteEventBusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventBus', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventSourceRequest {
  eventBusName?: string(name='EventBusName', position='Body'),
  eventSourceName: string(name='EventSourceName', description='The name of the event source.

This parameter is required.', example='myrabbitmq.source', position='Body'),
}

model DeleteEventSourceResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  message?: string(name='Message', description='The returned error message.', example='Remote error. requestId: [78B66E68-E778-1F33-84BD-xxxx], error code: [EventSourceNotExist], message: [The event source in request is not exist! ]'),
  requestId?: string(name='RequestId', description='The request ID.', example='5f80e9b3-98d5-4f51-8412-c758818a03e4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
}

model DeleteEventSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventSourceResponseBody(name='body'),
}

/**
  * @description You can call this API operation to delete an event source.
  * @param request  the request parameters of DeleteEventSource  DeleteEventSourceRequest
  * @return DeleteEventSourceResponse
 */
async function deleteEventSource(request: DeleteEventSourceRequest): DeleteEventSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventSource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteEventStreamingRequest {
  regionId?: string(name='RegionId', position='Host'),
  eventStreamingName: string(name='EventStreamingName', description='The name of the event stream that you want to delete.

This parameter is required.', example='rocketmq-sync', minLength=2, maxLength=255, position='Body'),
}

model DeleteEventStreamingResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='Message', description='The returned error message.', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='499A9ACF-70CD-5D43-87F3-1B60529EE446'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values: true and false.', example='true'),
}

model DeleteEventStreamingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventStreamingResponseBody(name='body'),
}

/**
  * @description You can call this API operation to delete an event stream.
  * @param request  the request parameters of DeleteEventStreaming  DeleteEventStreamingRequest
  * @return DeleteEventStreamingResponse
 */
async function deleteEventStreaming(request: DeleteEventStreamingRequest): DeleteEventStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventStreaming', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRuleRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='tf-testacc-event-bus', position='Query'),
  ruleName: string(name='RuleName', description='The name of the event rule that you want to delete.

This parameter is required.', example='ramrolechange-mns', position='Query'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='Message', description='The returned error message.', example='The event rule not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='FF942675-F937-549C-A942-EB94FFE28DD3'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
}

model DeleteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRuleResponseBody(name='body'),
}

/**
  * @description You can call this API operation to delete an event rule.
  * @param request  the request parameters of DeleteRule  DeleteRuleRequest
  * @return DeleteRuleResponse
 */
async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTargetsRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='MyEventBus', position='Query'),
  ruleName: string(name='RuleName', description='The name of the event rule.

This parameter is required.', example='ramrolechange-mns', position='Query'),
  targetIds?: [ string ](name='TargetIds', description='The IDs of the event targets that you want to delete.', shrink='json', position='Query'),
}

model DeleteTargetsResponseBody = {
  code?: string(name='Code', description='The response code. The code 200 indicates that the request was successful. Other codes indicate that the request failed. For information about error codes, see Error codes.', example='200'),
  data?: {
    errorEntries?: [ 
      {
        entryId?: string(name='EntryId', description='The ID of the event body that failed to be processed.', example='target5'),
        errorCode?: string(name='ErrorCode', description='The error code.', example='EventRuleTargetIdDuplicate'),
        errorMessage?: string(name='ErrorMessage', description='The error message.', example='The id of event target is duplicate!'),
      }
    ](name='ErrorEntries', description='The information about the event body that failed to be processed.'),
    errorEntriesCount?: int32(name='ErrorEntriesCount', description='The number of event bodies that failed to be processed. Valid values: 0: No event bodies failed to be processed. An integer other than 0: the number of event bodies that failed to be processed.', example='0'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='EventBusNotExist'),
  requestId?: string(name='RequestId', description='The request ID.', example='78FA9EAC-F0C0-58B0-871E-9F9756CE1D29'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values: true and false.', example='true'),
}

model DeleteTargetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTargetsResponseBody(name='body'),
}

/**
  * @description You can call this API operation to delete one or more event targets of an event rule.
  * @param request  the request parameters of DeleteTargets  DeleteTargetsRequest
  * @return DeleteTargetsResponse
 */
async function deleteTargets(request: DeleteTargetsRequest): DeleteTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTargets', 'POST', '/', 'json', false, 'json', request);
}

model DisableRuleRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='MyEventBus', position='Query'),
  ruleName: string(name='RuleName', description='The name of the event rule.

This parameter is required.', example='tf-testacc-rule', position='Query'),
}

model DisableRuleResponseBody = {
  code?: string(name='Code', description='The error code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='Message', description='The returned error message.', example='EventRuleNotExisted'),
  requestId?: string(name='RequestId', description='The request ID.', example='C36345A1-75F3-5A1A-BFCF-33B8271971FA'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values: true and false.', example='true'),
}

model DisableRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableRuleResponseBody(name='body'),
}

/**
  * @description You can call this API operation to disable an event rule.
  * @param request  the request parameters of DisableRule  DisableRuleRequest
  * @return DisableRuleResponse
 */
async function disableRule(request: DisableRuleRequest): DisableRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableRule', 'POST', '/', 'json', false, 'json', request);
}

model DiscoverEventSourceRequest {
  sourceMySQLParameters?: {
    databaseName?: string(name='DatabaseName', example='database1'),
    hostName?: string(name='HostName', example='rm-xxx.mysql.rds.aliyuncs.com'),
    limit?: string(name='Limit', example='20'),
    networkType?: string(name='NetworkType', example='PrivateNetwork'),
    offset?: string(name='Offset', example='30'),
    password?: string(name='Password', example='1234xxx'),
    port?: int32(name='Port', example='80'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-bp1ic0vsbwyv176e9inx'),
    tableName?: string(name='TableName', example='database1.table1'),
    user?: string(name='User', example='user1'),
    vSwitchIds?: string(name='VSwitchIds', example='vsw-gw824tpaptxtlo256lqub'),
    vpcId?: string(name='VpcId', example='vpc-uf6hwiei8u5uil3bfahc1'),
  }(name='SourceMySQLParameters', shrink='json', position='Body'),
}

model DiscoverEventSourceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    sourceMySQLDiscovery?: {
      databaseNames?: [ string ](name='DatabaseNames'),
      estimatedRows?: long(name='EstimatedRows'),
      expireLogsDays?: int32(name='ExpireLogsDays'),
      simpleData?: string(name='SimpleData', example='[{\\"is_active\\":\\"1\\",\\"name\\":\\"0c0c5d1a-e844-44a8-902d-4f62cbcb0479\\",\\"id\\":\\"21\\"},{\\"is_active\\":\\"1\\",\\"name\\":\\"18ef033e-70bb-4795-8222-6cfb54f38f26\\",\\"id\\":\\"22\\"}]'),
      tableNames?: [ string ](name='TableNames'),
      tableSchema?: {
        columns?: [ 
          {
            extra?: string(name='Extra', example='auto_increment'),
            field?: string(name='Field', example='id'),
            isNull?: string(name='IsNull', example='NO'),
            key?: string(name='Key', example='PRI'),
            type?: string(name='Type', example='int'),
          }
        ](name='Columns'),
        tableName?: string(name='TableName', example='map'),
      }(name='TableSchema'),
      waitTimeout?: int32(name='WaitTimeout'),
    }(name='SourceMySQLDiscovery'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='C7043799-F4DA-5290-9249-97C35987****'),
  success?: boolean(name='Success', example='true'),
}

model DiscoverEventSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DiscoverEventSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DiscoverEventSource  DiscoverEventSourceRequest
  * @return DiscoverEventSourceResponse
 */
async function discoverEventSource(request: DiscoverEventSourceRequest): DiscoverEventSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DiscoverEventSource', 'POST', '/', 'json', true, 'form', request);
}

model EnableRuleRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='MyEventBus', position='Query'),
  ruleName: string(name='RuleName', description='The name of the event rule.

This parameter is required.', example='ramrolechange', position='Query'),
}

model EnableRuleResponseBody = {
  code?: string(name='Code', description='The error code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='EventRuleNotExisted'),
  requestId?: string(name='RequestId', description='The request ID.', example='580A938B-6107-586C-8EC7-F22EEBEDA9E6'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values: true and false.', example='true'),
}

model EnableRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableRuleResponseBody(name='body'),
}

/**
  * @description You can call this API operation to enable an event rule.
  * @param request  the request parameters of EnableRule  EnableRuleRequest
  * @return EnableRuleResponse
 */
async function enableRule(request: EnableRuleRequest): EnableRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableRule', 'POST', '/', 'json', false, 'json', request);
}

model EventCenterQueryEventsRequest {
  body: {
    parameters: {
      breakdowns?: [ string ](name='Breakdowns', description='Specifies whether to further split the dataset based on the column name.'),
      calculations?: [ 
        {
          column?: string(name='Column', description='The column name.', example='source'),
          op?: string(name='Op', description='The operator.', example='COUNT_DISTINCT'),
        }
      ](name='Calculations', description='The operator that is used to calculate the specified column.'),
      endTime?: long(name='EndTime', description='The timestamp that specifies the end of the time range to query. Unit: milliseconds.', example='1687861201814', minimum=946684800000),
      filterCombination?: string(name='FilterCombination', description='The logic used to filter the combination of conditions.', example='AND'),
      filters?: [ 
        {
          column?: string(name='Column', description='The column name.', example='source'),
          nestedFilterCombination?: string(name='NestedFilterCombination', example='AND'),
          nestedFilters?: [ 
            {
              column?: string(name='Column'),
              op?: string(name='Op'),
              values?: [ string ](name='Values'),
            }
          ](name='NestedFilters'),
          op?: string(name='Op', description='The operator.', example='='),
          values?: [ string ](name='Values', description='The values that are used together with the operator.'),
        }
      ](name='Filters', description='The filter conditions.'),
      granularity?: integer(name='Granularity', description='The minimum time unit for querying time series data. Minimum value: 1. Unit: seconds. The value of this parameter is a recommended value. The actual value returned shall prevail.', example='30'),
      limit?: integer(name='Limit', description='The maximum number of events to query. Valid values: 1 to 10000.', example='100'),
      offset?: integer(name='Offset', description='The offset of the start position for this query. The offset starts from 0.', example='0'),
      orders?: [ 
        {
          column?: string(name='Column', description='The column name.', example='source'),
          desc?: boolean(name='Desc', description='Specifies whether to sort the query results in descending order.', example='true'),
          op?: string(name='Op', description='The operator.', example='AVG'),
        }
      ](name='Orders', description='The order of the query results. This parameter is valid only if you set QueryType to table.'),
      startTime?: long(name='StartTime', description='The timestamp that specifies the beginning of the time range to query. Unit: milliseconds.', example='1687860901814', minimum=946684800000),
      timeRange?: long(name='TimeRange', description='The time range during which events are queried. Minimum value: 1000. Unit: milliseconds.', example='1000000'),
    }(name='Parameters', description='The query parameters.

This parameter is required.'),
    queryType: string(name='QueryType', description='The query type. Valid values:

*   **timeseries**: queries time series data.
*   **table**: queries table data.
*   **timeseries_and_table**: queries time series data and table data at the same time.

This parameter is required.', example='timeseries_and_table'),
    schemaId: string(name='SchemaId', description='The schema ID.

This parameter is required.', example='ecs:GeneralSchema'),
  }(name='Body', description='The request body.

This parameter is required.', shrink='json', position='Body'),
  busName?: string(name='BusName', description='The name of the event bus.', example='default', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 0 to 10000. Default value: 100.', example='100', minimum=0, maximum=10000, position='Query'),
  nextToken?: string(name='NextToken', description='用来标记当前开始读取的位置。置空表示从头开始。', example='100', position='Query'),
}

model EventCenterQueryEventsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='100'),
    table?: [ 
      {
        rowData?: map[string]any(name='RowData', example='{
  "id":"xxx",
  "source":"acs.ecs"
}'),
      }
    ](name='Table'),
    timeSeries?: [ 
      {
        rowData?: map[string]any(name='RowData', example='{
  "id":"xxx",
  "source":"acs.ecs"
}'),
        time?: string(name='Time', example='1683561600000'),
      }
    ](name='TimeSeries'),
    totalCount?: int32(name='TotalCount', example='76'),
  }(name='Data'),
  message?: string(name='Message', example='Specified parameter Limit is not valid.'),
  requestId?: string(name='RequestId', example='5DAF96FB-A4B6-548C-B999-XXXXXXXX'),
  success?: boolean(name='Success', example='true'),
}

model EventCenterQueryEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EventCenterQueryEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EventCenterQueryEvents  EventCenterQueryEventsRequest
  * @return EventCenterQueryEventsResponse
 */
async function eventCenterQueryEvents(request: EventCenterQueryEventsRequest): EventCenterQueryEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EventCenterQueryEvents', 'POST', '/', 'json', true, 'form', request);
}

model GetApiDestinationRequest {
  apiDestinationName: string(name='ApiDestinationName', description='The name of the API destination.

This parameter is required.', example='api-destination-name', position='Query'),
}

model GetApiDestinationResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  data?: {
    apiDestinationName?: string(name='ApiDestinationName', description='The name of the API destination.', example='demo'),
    connectionName?: string(name='ConnectionName', description='The connection name.', example='test-basic'),
    description?: string(name='Description', description='The description of the API destination.', example='demo'),
    gmtCreate?: long(name='GmtCreate', description='The time when the API destination was created.', example='1649055710565'),
    httpApiParameters?: {
      endpoint?: string(name='Endpoint', description='The endpoint of the API destination.', example='http://127.0.0.1:8001/api'),
      method?: string(name='Method', description='The HTTP request method. Valid values:

*   POST
*   GET
*   DELETE
*   PUT
*   HEAD
*   TRACE
*   PATCH', example='POST'),
    }(name='HttpApiParameters', description='The request parameters that are configured for the API destination.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='B896B484-F16D-59DE-9E23-DD0E5C361108'),
}

model GetApiDestinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApiDestinationResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query the information about an API destination.
  * @param request  the request parameters of GetApiDestination  GetApiDestinationRequest
  * @return GetApiDestinationResponse
 */
async function getApiDestination(request: GetApiDestinationRequest): GetApiDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApiDestination', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectionRequest {
  connectionName: string(name='ConnectionName', description='The connection name.

This parameter is required.', example='connection-name', position='Query'),
}

model GetConnectionResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  data?: {
    connections?: [ 
      {
        authParameters?: {
          apiKeyAuthParameters?: {
            apiKeyName?: string(name='ApiKeyName', description='The key of the API key.', example='key'),
            apiKeyValue?: string(name='ApiKeyValue', description='The value of the API key.', example='value'),
          }(name='ApiKeyAuthParameters', description='The information about API key authentication.'),
          authorizationType?: string(name='AuthorizationType', description='The authentication method. Valid values:

*   BASIC_AUTH: basic authentication.
*   API_KEY_AUTH: API key authentication.
*   OAUTH_AUTH: OAuth authentication.', example='BASIC_AUTH'),
          basicAuthParameters?: {
            password?: string(name='Password', description='The password of basic authentication.', example='********'),
            username?: string(name='Username', description='The username of basic authentication.', example='admin'),
          }(name='BasicAuthParameters', description='The information about basic authentication.'),
          oAuthParameters?: {
            authorizationEndpoint?: string(name='AuthorizationEndpoint', description='The endpoint that is used to obtain the OAuth token.', example='http://localhost:8080/oauth/token'),
            clientParameters?: {
              clientID?: string(name='ClientID', description='The client ID.', example='ClientID'),
              clientSecret?: string(name='ClientSecret', description='The AccessKey secret of the client.', example='Qo57Q~F249~S74GmNPA36pZJoJK4f****'),
            }(name='ClientParameters', description='The information about the client.'),
            httpMethod?: string(name='HttpMethod', description='The HTTP request method. Valid values:

*   GET
*   POST
*   HEAD', example='POST'),
            oAuthHttpParameters?: {
              bodyParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                  key?: string(name='Key', description='The key of the request body.', example='keyDemo'),
                  value?: string(name='Value', description='The value of the request body.', example='valueDemo'),
                }
              ](name='BodyParameters', description='The information about the request body.'),
              headerParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                  key?: string(name='Key', description='The key of the request header.', example='keyDemo'),
                  value?: string(name='Value', description='The value of the request header.', example='keyDemo'),
                }
              ](name='HeaderParameters', description='The information about the request header.'),
              queryStringParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                  key?: string(name='Key', description='The key of the request path.', example='keyDemo'),
                  value?: string(name='Value', description='The value of the request path.', example='valueDemo'),
                }
              ](name='QueryStringParameters', description='The information about the request path.'),
            }(name='OAuthHttpParameters', description='The request parameters of OAuth authentication.'),
          }(name='OAuthParameters', description='The information about OAuth authentication.'),
        }(name='AuthParameters', description='The authentication methods.'),
        connectionName?: string(name='ConnectionName', description='The connection name.', example='demo'),
        description?: string(name='Description', description='The connection description.', example='demo'),
        gmtCreate?: long(name='GmtCreate', description='The time when the connection was created.', example='1669648905'),
        id?: long(name='Id', description='The data source ID.', example='5668'),
        networkParameters?: {
          networkType?: string(name='NetworkType', description='*   PublicNetwork: the Internet.
*   PrivateNetwork: virtual private cloud (VPC).', example='PublicNetwork'),
          securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9****'),
          vpcId?: string(name='VpcId', description='The VPC ID.', example='eb-test/vpc-bp1symadadwnwg****'),
          vswitcheId?: string(name='VswitcheId', description='The vSwitch ID.', example='vsw-bp1iu4x7aeradadown****,vsw-bp193sqmadadlaszpeq****'),
        }(name='NetworkParameters', description='The information about the network.'),
      }
    ](name='Connections', description='The queried connections.'),
  }(name='Data', description='The returned data.'),
  httpCode?: int32(name='HttpCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The returned request ID.', example='34AD682D-5B91-5773-8132-AA38C130****'),
}

model GetConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectionResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query the configurations of a connection.
  * @param request  the request parameters of GetConnection  GetConnectionRequest
  * @return GetConnectionResponse
 */
async function getConnection(request: GetConnectionRequest): GetConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnection', 'POST', '/', 'json', false, 'json', request);
}

model GetEventBusRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='MyEventBus', position='Query'),
}

model GetEventBusResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the request was successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    createTimestamp?: long(name='CreateTimestamp', description='The timestamp that indicates when the event bus was created.', example='1641781825000'),
    description?: string(name='Description', description='The description of the event bus.', example='demo'),
    eventBusARN?: string(name='EventBusARN', description='The Alibaba Cloud Resource Name (ARN) of the event bus.', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/MyEventBus'),
    eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='MyEventBus'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='EventBusNotExist'),
  requestId?: string(name='RequestId', description='The request ID.', example='d5bfc188-4452-4ba7-b73a-a9005e522439'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. If the operation was successful, the value true is returned.', example='true'),
}

model GetEventBusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventBusResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query the detailed information about an event bus.
  * @param request  the request parameters of GetEventBus  GetEventBusRequest
  * @return GetEventBusResponse
 */
async function getEventBus(request: GetEventBusRequest): GetEventBusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventBus', 'POST', '/', 'json', false, 'json', request);
}

model GetEventStreamingRequest {
  regionId?: string(name='RegionId', position='Host'),
  eventStreamingName: string(name='EventStreamingName', description='The name of the event stream whose details you want to query.

This parameter is required.', example='myeventstreaming', minLength=2, maxLength=255, position='Body'),
}

model GetEventStreamingResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For a list of error codes, see Error codes.', example='Success'),
  data?: {
    description?: string(name='Description', description='The description of the event stream that is returned.', example='RocketMQ-to-RocketMQ'),
    detailedStatus?: {
      delayTime?: long(name='DelayTime', example='3'),
      diffOffset?: long(name='DiffOffset', example='0'),
      extensions?: map[string]any(name='Extensions', example='{
        "test": "test",
        "test2": 1
      }'),
      TPS?: double(name='TPS', example='5'),
    }(name='DetailedStatus'),
    eventStreamingName?: string(name='EventStreamingName', description='The name of the event stream that is returned.', example='rocketmq-sync'),
    filterPattern?: string(name='FilterPattern', description='The rule that is used to filter events. If you leave this parameter empty, all events are matched.'),
    runOptions?: {
      batchWindow?: {
        countBasedWindow?: int32(name='CountBasedWindow', description='The maximum number of events that are allowed in the batch window. If this threshold is reached, data in the window is pushed downstream. When multiple batch windows exist, data is pushed if triggering conditions are met in one of the windows.', example='100'),
        timeBasedWindow?: int32(name='TimeBasedWindow', description='The maximum period of time during which events are allowed in the batch window. Unit: seconds. If this threshold is reached, data in the window is pushed downstream. When multiple batch windows exist, data is pushed if triggering conditions are met in one of the windows.', example='10'),
      }(name='BatchWindow', description='The batch window.'),
      businessOption?: {
        businessMode?: string(name='BusinessMode'),
        maxCapacityUnitCount?: long(name='MaxCapacityUnitCount'),
        minCapacityUnitCount?: long(name='MinCapacityUnitCount'),
      }(name='BusinessOption'),
      deadLetterQueue?: {
        arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the dead-letter queue.', example='acs:ram::1550203943326350:role/edskmstoecs'),
        network?: string(name='Network', example='PrivateNetwork'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-2vcgdxz7o1n9zapp****'),
        vSwitchIds?: string(name='VSwitchIds', example='vsw-m5ev8asdc6h12345****'),
        vpcId?: string(name='VpcId', example='vpc-2zehizpoendb3****'),
      }(name='DeadLetterQueue', description='Indicates whether dead-letter queues are enabled. By default, dead-letter queues are disabled. Messages that fail to be pushed after allowed retries as specified by the retry policy are discarded.'),
      errorsTolerance?: string(name='ErrorsTolerance', description='The fault tolerance policy. The value NONE specifies that faults are not tolerated, and the value All specifies that all faults are tolerated.', example='ALL'),
      maximumTasks?: int32(name='MaximumTasks', description='The concurrency level.', example='2'),
      retryStrategy?: {
        maximumEventAgeInSeconds?: float(name='MaximumEventAgeInSeconds', description='The maximum period of time during which retries are performed.', example='512'),
        maximumRetryAttempts?: float(name='MaximumRetryAttempts', description='The maximum number of retries.', example='2'),
        pushRetryStrategy?: string(name='PushRetryStrategy', description='The retry policy. Valid values: BACKOFFRETRY and EXPONENTIALDECAY_RETRY.', example='BACKOFFRETRY'),
      }(name='RetryStrategy', description='The information about the retry policy that is used if the event fails to be pushed.'),
      throttling?: int32(name='Throttling'),
    }(name='RunOptions', description='The runtime environment-related configurations.'),
    sink?: {
      sinkApacheKafkaParameters?: {
        acks?: string(name='Acks'),
        bootstraps?: string(name='Bootstraps'),
        headers?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='Headers'),
        key?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='Key'),
        networkType?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='NetworkType'),
        saslMechanism?: string(name='SaslMechanism'),
        saslPassword?: string(name='SaslPassword'),
        saslUser?: string(name='SaslUser'),
        securityGroupId?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='SecurityGroupId'),
        securityProtocol?: string(name='SecurityProtocol'),
        topic?: string(name='Topic'),
        vSwitchIds?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='VSwitchIds'),
        value?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='Value'),
        vpcId?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='VpcId'),
      }(name='SinkApacheKafkaParameters'),
      sinkApacheRocketMQCheckpointParameters?: {
        consumeTimestamp?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='1570761026400'),
        }(name='ConsumeTimestamp'),
        group?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', description='Group ID', example='GID_EVENTBRIDGE_1736234******'),
        }(name='Group'),
        instanceEndpoint?: string(name='InstanceEndpoint', example='192.168.1.1:9876'),
        instancePassword?: string(name='InstancePassword', example='****'),
        instanceUsername?: string(name='InstanceUsername', example='admin'),
        networkType?: string(name='NetworkType', example='PrivateNetwork'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-2ze5bmpw6adn0q******'),
        topic?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='Mytopic'),
        }(name='Topic'),
        vSwitchId?: string(name='VSwitchId', example='vsw-uf62oqt1twuevrt******'),
        vpcId?: string(name='VpcId', example='vpc-2zeccak5pb0j3ay******'),
      }(name='SinkApacheRocketMQCheckpointParameters', description='Sink Apache RocketMQ Checkpoint Parameters'),
      sinkBaiLianParameters?: SinkBaiLianParameters(name='SinkBaiLianParameters', description='Sink BaiLian Parameters'),
      sinkCustomizedKafkaConnectorParameters?: {
        connectorPackageUrl?: string(name='ConnectorPackageUrl', example='"https://examplebucket.oss-cn-hangzhou.aliyuncs.com/testDoc/Old_Homebrew/2024-06-26%2022%3A34%3A08/opt/homebrew/homebrew/Library/Homebrew/test/support/fixtures/cask/AppWithBinary.zip?OSSAccessKeyId=ri&Expires=1725539627&Signature=rb8q3OpV******"'),
        connectorParameters?: {
          config?: map[string]any(name='Config', example='{
          "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "tasks.max": "1",
          "topics": "sourceA,sourceB"
        }'),
          name?: string(name='Name', example='mongo-sink'),
        }(name='ConnectorParameters'),
        workerParameters?: map[string]any(name='WorkerParameters', example='{
        "group.id": "connect-eb-cluster-KAFKA_CONNECTORC",
        "offset.storage.topic": "connect-eb-offset-KAFKA_CONNECTOR_yjqC8K5ewC",
        "config.storage.topic": "connect-eb-config-KAFKA_CONNECTOR_yjqC8K5ewC",
        "status.storage.topic": "connect-eb-status-KAFKA_CONNECTOR_yjqC8K5ewC",
        "consumer.group.id": "connector-eb-cluster-KAFKA_CONNECTOR_yjqC8K5ewC-mongo-sink",
        "bootstrap.servers": "alikafka-post:9092"
      }'),
      }(name='SinkCustomizedKafkaConnectorParameters'),
      sinkCustomizedKafkaParameters?: {
        instanceId?: string(name='InstanceId', example='90be1f96-4229-4535-bb76-34b4f6fb****'),
      }(name='SinkCustomizedKafkaParameters'),
      sinkDashVectorParameters?: {
        apiKey?: string(name='ApiKey', example='Q34nExQH7sQ****'),
        collection?: string(name='Collection', example='collection1'),
        dashVectorSchemaParameters?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='[
  {
    "name": "schema1",
    "type": "INT",
    "value": "${value1}"
  },
  {
    "name": "schema2",
    "type": "FLOAT",
    "value": "${value2}"
  }
]'),
          value?: string(name='Value', example='{
  "value1":"v1",
  "value2":"v2"
}'),
        }(name='DashVectorSchemaParameters'),
        instanceId?: string(name='InstanceId', example='vrs-cn-lbj3ru1***'),
        network?: string(name='Network', example='PublicNetwork'),
        operation?: string(name='Operation', example='Upsert'),
        partition?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='default'),
        }(name='Partition'),
        primaryKeyId?: {
          form?: string(name='Form', example='JSONPATH'),
          template?: string(name='Template', example='${ID}'),
          value?: string(name='Value', example='$.data.requestId'),
        }(name='PrimaryKeyId'),
        vector?: {
          form?: string(name='Form', example='JSONPATH'),
          template?: string(name='Template'),
          value?: string(name='Value', example='$.data.messageBody'),
        }(name='Vector'),
      }(name='SinkDashVectorParameters'),
      sinkDataHubParameters?: {
        body?: {
          form?: string(name='Form', example='ORIGINAL'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='Body'),
        project?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='demo-project'),
        }(name='Project'),
        roleName?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='test-role'),
        }(name='RoleName'),
        topic?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='demo-topic'),
        }(name='Topic'),
        topicSchema?: {
          form?: string(name='Form', example='TEMPLATE'),
          template?: string(name='Template', example='{"k1":"${k1}","k2":"${k2}"}'),
          value?: string(name='Value', example='{"k1":"value1","k2":"value2"}'),
        }(name='TopicSchema'),
        topicType?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='TUPLE'),
        }(name='TopicType'),
      }(name='SinkDataHubParameters'),
      sinkDorisParameters?: {
        beHttpEndpoint?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='BeHttpEndpoint'),
        body?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='Body'),
        database?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='Database'),
        feHttpEndpoint?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='FeHttpEndpoint'),
        networkType?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='NetworkType'),
        password?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='Password'),
        queryEndpoint?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='QueryEndpoint'),
        securityGroupId?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='SecurityGroupId'),
        table?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='Table'),
        userName?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='UserName'),
        vSwitchIds?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='VSwitchIds'),
        vpcId?: {
          form?: string(name='Form'),
          template?: string(name='Template'),
          value?: string(name='Value'),
        }(name='VpcId'),
      }(name='SinkDorisParameters'),
      sinkFcParameters?: {
        body?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Body', description='The message body that is sent to the function.'),
        concurrency?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='None'),
          value?: string(name='Value', description='The delivery concurrency. Minimum value: 1.', example='1'),
        }(name='Concurrency', description='The delivery concurrency. Minimum value: 1.'),
        dataFormat?: {
          form?: string(name='Form', example='JSONPATH'),
          template?: string(name='Template', example='$.data.key'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='DataFormat'),
        functionName?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The function name.', example='mFunction'),
        }(name='FunctionName', description='The function name.'),
        invocationType?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The invocation type.', example='Async'),
        }(name='InvocationType', description='The invocation type. Valid values: Sync: synchronous Async: asynchronous'),
        qualifier?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The alias of the service to which the function belongs.', example='LATEST'),
        }(name='Qualifier', description='The alias of the service to which the function belongs.'),
        serviceName?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The name of the service.', example='myService'),
        }(name='ServiceName', description='The service name.'),
      }(name='SinkFcParameters', description='The parameters that are returned if the event target is Function Compute.'),
      sinkFnfParameters?: {
        executionName?: {
          form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='None'),
          value?: string(name='Value', description='The execution name.', example='123'),
        }(name='ExecutionName', description='The execution name.'),
        flowName?: {
          form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='None'),
          value?: string(name='Value', description='The flow name.', example='test-streaming-fnf'),
        }(name='FlowName', description='The flow name.'),
        input?: {
          form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='None'),
          value?: string(name='Value', description='The execution input information.', example='123'),
        }(name='Input', description='The execution input information.'),
        roleName?: {
          form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='None'),
          value?: string(name='Value', description='The role configuration.', example='Al****FNF-x****'),
        }(name='RoleName', description='The role name.'),
      }(name='SinkFnfParameters', description='The Sink Fnf parameters.'),
      sinkKafkaParameters?: {
        acks?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The acknowledgment information.', example='1'),
        }(name='Acks', description='The acknowledgment information.'),
        headers?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{
      "key": "value"
}'),
        }(name='Headers'),
        instanceId?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The instance ID.', example='Defaut_1283278472_sadkj'),
        }(name='InstanceId', description='The target service type is Message Queue for Apache Kafka.'),
        key?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The message key.', example='key'),
        }(name='Key', description='The message key.'),
        topic?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The topic name.', example='topic-test'),
        }(name='Topic', description='The topic name.'),
        value?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Value', description='The message content.'),
      }(name='SinkKafkaParameters', description='The parameters that are returned if the event target is Message Queue for Apache Kafka.'),
      sinkMNSParameters?: {
        body?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Body', description='The message content.'),
        isBase64Encode?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.'),
          value?: string(name='Value', description='Specifies that Base64 encoding is enabled.', example='true'),
        }(name='IsBase64Encode', description='Indicates whether Base64 encoding is enabled.'),
        queueName?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.'),
          value?: string(name='Value', description='The name of the MNS queue.', example='MyQueue'),
        }(name='QueueName', description='The target service type is MNS.'),
      }(name='SinkMNSParameters', description='The parameters that are returned if the event target is Message Service (MNS).'),
      sinkOpenSourceRabbitMQParameters?: {
        authType?: string(name='AuthType', example='ACL'),
        body?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{"key": "value"}'),
        }(name='Body'),
        endpoint?: string(name='Endpoint', example='192.168.1.1:9876'),
        exchange?: string(name='Exchange', example='my-exchange'),
        messageId?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='12345'),
        }(name='MessageId'),
        networkType?: string(name='NetworkType', example='PublicNetwork'),
        password?: string(name='Password', example='****'),
        properties?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{"env": "prod"}'),
        }(name='Properties'),
        queueName?: string(name='QueueName', example='my-queue'),
        routingKey?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', example='{"Form": "CONSTANT", "Value": "my-routing-key"}'),
        }(name='RoutingKey'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-uf6of9452b2pba82c ****'),
        targetType?: string(name='TargetType', example='Exchange'),
        username?: string(name='Username', example='admin'),
        vSwitchIds?: string(name='VSwitchIds', example='vsw-uf6of9452b2pba82c ****'),
        virtualHostName?: string(name='VirtualHostName', example='vhost1'),
        vpcId?: string(name='VpcId', example='vpc-uf6of9452b2pba82c ****'),
      }(name='SinkOpenSourceRabbitMQParameters', description='Sink Open Source RabbitMQ Parameters'),
      sinkRabbitMQParameters?: {
        body?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Body', description='The message content.'),
        exchange?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The name of the exchange in the Message Queue for RabbitMQ instance.', example='a_exchange'),
        }(name='Exchange', description='The exchange mode. This parameter is available only if TargetType is set to Exchange.'),
        instanceId?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The ID of the Message Queue for RabbitMQ instance.', example='e5c9b727-e06c-4d7e-84d5-f8ce644e00bf'),
        }(name='InstanceId', description='The target service type is Message Queue for RabbitMQ instance.'),
        messageId?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='MessageId', description='The message ID.'),
        properties?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Properties', description='The tags that are used to filter messages.'),
        queueName?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The name of the queue in the Message Queue for RabbitMQ instance.', example='MyQueue'),
        }(name='QueueName', description='The queue mode. This parameter is available only if TargetType is set to Queue.'),
        routingKey?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The routing rule for the message.', example='housekeeping'),
        }(name='RoutingKey', description='The routing rule for the message. This parameter is available only if TargetType is set to Exchange.'),
        targetType?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The type of the resource to which the event is delivered. Valid values: Exchange: exchanges. Queue: queues.', example='Exchange/Queue'),
        }(name='TargetType', description='The target type.'),
        virtualHostName?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.'),
          value?: string(name='Value', description='The vhost name of the Message Queue for RabbitMQ instance.', example='rabbit-host'),
        }(name='VirtualHostName', description='The name of the vhost of the Message Queue for RabbitMQ instance.'),
      }(name='SinkRabbitMQParameters', description='The parameters that are returned if the event target is Message Queue for RabbitMQ.'),
      sinkRocketMQCheckpointParameters?: {
        consumeTimestamp?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='1570761026400'),
        }(name='ConsumeTimestamp'),
        group?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', description='Group ID', example='GID_EVENTBRIDGE_1736234******'),
        }(name='Group'),
        instanceId?: string(name='InstanceId', example='MQ_INST_164901546557****_BAAN****'),
        instanceType?: string(name='InstanceType', example='Cloud_4'),
        topic?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='Mytopic'),
        }(name='Topic'),
      }(name='SinkRocketMQCheckpointParameters', description='Sink RocketMQ Checkpoint Parameters'),
      sinkRocketMQParameters?: {
        body?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Body', description='The message content.'),
        deliveryOrderType?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='Concurrently'),
        }(name='DeliveryOrderType'),
        instanceEndpoint?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='vbr-8vbsvkkbpf3vb0zef****'),
        }(name='InstanceEndpoint'),
        instanceId?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The ID of the Message Queue for Apache RocketMQ instance.', example='MQ_INST_164901546557****_BAAN****'),
        }(name='InstanceId', description='The target service type is Message Queue for Apache RocketMQ.'),
        instancePassword?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='admin****'),
        }(name='InstancePassword'),
        instanceType?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='Cloud_4'),
        }(name='InstanceType'),
        instanceUsername?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='admin'),
        }(name='InstanceUsername'),
        keys?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Keys', description='The tags that are used to filter messages.'),
        network?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='PublicNetwork'),
        }(name='Network'),
        properties?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Properties', description='The tags that are used to filter messages.'),
        securityGroupId?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='b4bf375515f6440f942e3a20c33d****'),
        }(name='SecurityGroupId'),
        shardingKey?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='order_id'),
        }(name='ShardingKey'),
        tags?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Tags', description='The tags that are used to filter messages.'),
        topic?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The name of the topic in the Message Queue for Apache RocketMQ instance.', example='Mytopic'),
        }(name='Topic', description='The name of the topic in the Message Queue for Apache RocketMQ instance.'),
        vSwitchIds?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='vbr-8vb835n3zf9shwl****mp'),
        }(name='VSwitchIds'),
        vpcId?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='vbr-8vb835n3zf9shwlvb****'),
        }(name='VpcId'),
      }(name='SinkRocketMQParameters', description='The parameters that are returned if ApsaraMQ for RocketMQ is specified as the event target.'),
      sinkSLSParameters?: {
        body?: {
          form?: string(name='Form', description='The method that is used to transform the event.', example='TEMPLATE'),
          template?: string(name='Template', description='The template based on which the event is transformed.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The value before the transformation.', example='{
      "key": "value"
}'),
        }(name='Body', description='The message content.'),
        contentSchema?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='{"Key_1":{"form":"CONSTANT","value":"demoKey"},"Value_1":{"form":"JSONPATH","value":"$.data.value"}}'),
        }(name='ContentSchema'),
        contentType?: {
          form?: string(name='Form', example='CONSTANT'),
          template?: string(name='Template'),
          value?: string(name='Value', example='JSON'),
        }(name='ContentType'),
        logStore?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.'),
          value?: string(name='Value', description='The Log Service Logstore.', example='test-logstore'),
        }(name='LogStore', description='The Simple Log Service Logstore.'),
        project?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.'),
          value?: string(name='Value', description='The Log Service project.', example='test-project'),
        }(name='Project', description='The Simple Log Service project.'),
        roleName?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.'),
          value?: string(name='Value', description='The role name. If you want to authorize EventBridge to use this role to read logs in Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the RAM console.', example='testRole'),
        }(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the Resource Access Management (RAM) console.'),
        topic?: {
          form?: string(name='Form', description='The method that is used to transform the event. Default value: CONSTANT.', example='CONSTANT'),
          template?: string(name='Template', description='The template style.'),
          value?: string(name='Value', description='The name of the topic in which logs are stored. The topic corresponds to the topic reserved field in Log Service.', example='testTopic'),
        }(name='Topic', description='The name of the topic in which logs are stored. The topic corresponds to the topic reserved field in Simple Log Service.'),
      }(name='SinkSLSParameters', description='The parameters that are returned if Simple Log Service is specified as the event target.'),
    }(name='Sink', description='The event target.'),
    source?: {
      sourceApacheKafkaParameters?: {
        bootstraps?: string(name='Bootstraps'),
        consumerGroup?: string(name='ConsumerGroup'),
        networkType?: string(name='NetworkType'),
        offsetReset?: string(name='OffsetReset'),
        saslMechanism?: string(name='SaslMechanism'),
        saslPassword?: string(name='SaslPassword'),
        saslUser?: string(name='SaslUser'),
        securityGroupId?: string(name='SecurityGroupId'),
        securityProtocol?: string(name='SecurityProtocol'),
        topic?: string(name='Topic'),
        vSwitchIds?: string(name='VSwitchIds'),
        valueDataType?: string(name='ValueDataType'),
        vpcId?: string(name='VpcId'),
      }(name='SourceApacheKafkaParameters'),
      sourceApacheRocketMQCheckpointParameters?: {
        instanceEndpoint?: string(name='InstanceEndpoint', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
        instanceId?: string(name='InstanceId', description='The ID of the Apache RocketMQ instance.', example='MQ_INST_164901546557****_BAAN****'),
        instancePassword?: string(name='InstancePassword', example='123456'),
        instanceUsername?: string(name='InstanceUsername', example='admin'),
        networkType?: string(name='NetworkType', example='PrivateNetwork'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-mw43*****'),
        topics?: [ string ](name='Topics'),
        vSwitchId?: string(name='VSwitchId', example='vsw-dwaafds****'),
        vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-adw1awdw*****'),
      }(name='SourceApacheRocketMQCheckpointParameters', description='The parameters that are returned if Apache RocketMQ (Offset Data) is specified as the event source.'),
      sourceCustomizedKafkaConnectorParameters?: {
        connectorPackageUrl?: string(name='ConnectorPackageUrl', example='"https://examplebucket.oss-cn-hangzhou.aliyuncs.com/testDoc/Old_Homebrew/2024-06-26%2022%3A34%3A08/opt/homebrew/homebrew/Library/Homebrew/test/support/fixtures/cask/AppWithBinary.zip?OSSAccessKeyId=ri&Expires=1725539627&Signature=rb8q3OpV2i3gZJ"'),
        connectorParameters?: {
          config?: map[string]any(name='Config', example='{
          "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "tasks.max": "1",
          "topics": "sourceA,sourceB"
        }'),
          name?: string(name='Name', example='test-name'),
        }(name='ConnectorParameters'),
        workerParameters?: map[string]any(name='WorkerParameters', example='{
        "group.id": "connect-eb-cluster-KAFKA_CONNECTORC",
        "offset.storage.topic": "connect-eb-offset-KAFKA_CONNECTOR_yjqC8K5ewC",
        "config.storage.topic": "connect-eb-config-KAFKA_CONNECTOR_yjqC8K5ewC",
        "status.storage.topic": "connect-eb-status-KAFKA_CONNECTOR_yjqC8K5ewC",
        "consumer.group.id": "connector-eb-cluster-KAFKA_CONNECTOR_yjqC8K5ewC-mongo-sink",
        "bootstrap.servers": "alikafka-post:9092"
      }'),
      }(name='SourceCustomizedKafkaConnectorParameters'),
      sourceCustomizedKafkaParameters?: {
        instanceId?: string(name='InstanceId', example='r-8vb64581862c****'),
      }(name='SourceCustomizedKafkaParameters'),
      sourceDTSParameters?: {
        brokerUrl?: string(name='BrokerUrl', description='The URL and port number of the data subscription channel.'),
        initCheckPoint?: string(name='InitCheckPoint', description='The consumer offset. A consumer offset is a timestamp that indicates when the SDK client consumes the first data record. The value is a UNIX timestamp.', example='1620962769'),
        password?: string(name='Password', description='The password of the consumer group.', example='admin'),
        sid?: string(name='Sid', description='The ID of the consumer group.', example='HD1'),
        taskId?: string(name='TaskId', description='The task ID.', example='f86e5814-b223-482c-b768-3b873297dade'),
        topic?: string(name='Topic', description='The topic to which you want to subscribe by using the data subscription channel.', example='TP_TEST_UNDERWRITE_ISSUE'),
        username?: string(name='Username', description='The account of the consumer group.', example='admin'),
      }(name='SourceDTSParameters', description='The parameters that are returned if the event source is Data Transmission Service (DTS).'),
      sourceEventBusParameters?: {
        eventBusName?: string(name='EventBusName', example='demo'),
        eventRuleName?: string(name='EventRuleName', example='test'),
      }(name='SourceEventBusParameters'),
      sourceKafkaParameters?: {
        consumerGroup?: string(name='ConsumerGroup', description='The ID of the consumer group that subscribes to the topic.', example='GID_TEST'),
        instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1fbtrnqmjvgq66ajdw'),
        network?: string(name='Network', description='The network. Default value: Default. The value PublicNetwork specifies a virtual private cloud (VPC).', example='Default'),
        offsetReset?: string(name='OffsetReset', description='The offset.', example='latest'),
        regionId?: string(name='RegionId', description='The region ID of the Message Queue for Apache Kafka instance.', example='cn-hangzhou'),
        securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-2vcgdxz7o1n9zappuimt'),
        topic?: string(name='Topic', description='The name of the topic.', example='topic_empower_1642473600414'),
        vSwitchIds?: string(name='VSwitchIds', description='The vSwitch ID.', example='vsw-wz9qqeovkwjxlu9uc8rst'),
        valueDataType?: string(name='ValueDataType', description='The encoding or decoding format. Valid values: Json, Text, and Binary. The value Json indicates that bytes are decoded into UTF-8 strings and then parsed into JSON format. The value Text indicates that bytes are decoded into UTF-8 strings and then put into the payload. The value Binary indicates that bytes are encoded into Base64 strings and put into the payload.', example='Text'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-2zehizpoendb3nwwu9w5o'),
      }(name='SourceKafkaParameters', description='The parameters that are returned if ApsaraMQ for Kafka is specified as the event source.'),
      sourceMNSParameters?: {
        isBase64Decode?: boolean(name='IsBase64Decode', description='Indicates whether Base64 encoding is enabled.', example='true'),
        queueName?: string(name='QueueName', description='The name of the MNS queue.', example='demo'),
        regionId?: string(name='RegionId', description='The region ID of the MNS queue.', example='cn-hangzhou'),
      }(name='SourceMNSParameters', description='Source MNS Parameters'),
      sourceMQTTParameters?: {
        bodyDataType?: string(name='BodyDataType', example='JSON'),
        instanceId?: string(name='InstanceId', description='The instance ID.', example='i-2ze06wqdwk0uq14krrzv'),
        regionId?: string(name='RegionId', description='The region ID of the Message Queue for MQTT instance.', example='cn-shanghai'),
        topic?: string(name='Topic', description='The name of the topic in the Message Queue for MQTT instance.', example='TOPIC-cainiao-pcs-wms-instock-noPrealertPrintLabel'),
      }(name='SourceMQTTParameters', description='The parameters that are returned if ApsaraMQ for MQTT is specified as the event source.'),
      sourceMySQLParameters?: SourceMySQLParameters(name='SourceMySQLParameters'),
      sourceOSSParameters?: {
        bucketName?: string(name='BucketName', example='bucket_abc'),
        delimiter?: string(name='Delimiter', example='\\n'),
        loadFormat?: string(name='LoadFormat', example='TextLoader'),
        loadMode?: string(name='LoadMode', example='single'),
        prefix?: string(name='Prefix', example='fun/document/'),
        roleName?: string(name='RoleName', example='eventbridge_oss_role'),
      }(name='SourceOSSParameters'),
      sourceOpenSourceRabbitMQParameters?: {
        authType?: string(name='AuthType', example='ACL'),
        bodyDataType?: string(name='BodyDataType', example='Json'),
        endpoint?: string(name='Endpoint', example='192.168.1.100:5672'),
        networkType?: string(name='NetworkType', example='PrivateNetwork'),
        password?: string(name='Password', example='******'),
        queueName?: string(name='QueueName', example='demo'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-2ze65razphjfz3******'),
        username?: string(name='Username', example='admin'),
        vSwitchIds?: string(name='VSwitchIds', example='vsw-uf65zhil5oukof5******'),
        virtualHostName?: string(name='VirtualHostName', example='eb-connect'),
        vpcId?: string(name='VpcId', example='vpc-bp1vllc1lnw1v657******'),
      }(name='SourceOpenSourceRabbitMQParameters'),
      sourcePrometheusParameters?: {
        clusterId?: string(name='ClusterId', example='c83555068b6******ad213f565f209'),
        dataType?: string(name='DataType', example='json'),
        externalLabels?: string(name='ExternalLabels', example='{"env":"test"}'),
        labels?: string(name='Labels', example='__name__=.*'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        roleName?: string(name='RoleName', example='test-role'),
      }(name='SourcePrometheusParameters'),
      sourceRabbitMQParameters?: {
        instanceId?: string(name='InstanceId', description='The ID of the Message Queue for RabbitMQ instance.', example='i-f8z9a9mcgwri1c1idd0z'),
        queueName?: string(name='QueueName', description='The name of the queue in the Message Queue for RabbitMQ instance.', example='comp'),
        regionId?: string(name='RegionId', description='The region ID of the Message Queue for RabbitMQ instance.', example='cn-hangzhou'),
        virtualHostName?: string(name='VirtualHostName', description='The vhost name of the Message Queue for RabbitMQ instance.', example='eb-connect'),
      }(name='SourceRabbitMQParameters', description='Source RabbitMQ Parameters'),
      sourceRocketMQCheckpointParameters?: {
        instanceId?: string(name='InstanceId', example='rmp-cn-jte3w******'),
        instanceType?: string(name='InstanceType', example='Cloud_4'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        topics?: [ string ](name='Topics'),
      }(name='SourceRocketMQCheckpointParameters'),
      sourceRocketMQParameters?: {
        authType?: string(name='AuthType', example='ACL'),
        bodyDataType?: string(name='BodyDataType', example='Json'),
        filterSql?: string(name='FilterSql', example='index > 10'),
        filterType?: string(name='FilterType', example='Tag'),
        groupID?: string(name='GroupID', description='The ID of the consumer group in the Message Queue for Apache RocketMQ instance.', example='GID_group1'),
        instanceEndpoint?: string(name='InstanceEndpoint', example='reg****-vpc.cn-zhangjiakou.aliyuncs.com'),
        instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache RocketMQ instance.', example='i-f8zbher64dlm58plyfte'),
        instanceNetwork?: string(name='InstanceNetwork', example='PublicNetwork'),
        instancePassword?: string(name='InstancePassword', example='xxxa'),
        instanceSecurityGroupId?: string(name='InstanceSecurityGroupId', example='sg-m5edtu24f12345****'),
        instanceType?: string(name='InstanceType', example='2'),
        instanceUsername?: string(name='InstanceUsername', example='xxxa'),
        instanceVSwitchIds?: string(name='InstanceVSwitchIds', example='vsw-m5ev8asdc6h12****'),
        instanceVpcId?: string(name='InstanceVpcId', example='vpc-m5e3sv4b12345****'),
        network?: string(name='Network', example='PublicNetwork'),
        offset?: string(name='Offset', description='The consumer offset of messages. Valid values: CONSUME_FROM_LAST_OFFSET: Start consumption from the latest offset. CONSUME_FROM_FIRST_OFFSET: Start consumption from the earliest offset. CONSUME_FROM_TIMESTAMP: Start consumption from the offset at the specified point in time.', example='CONSUMEFROMLASTOFFSET'),
        regionId?: string(name='RegionId', description='The region ID of the Message Queue for Apache RocketMQ instance.', example='cn-hangzhou'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-m5edtu24f12345****'),
        tag?: string(name='Tag', description='The tags that are used to filter messages.', example='v1'),
        timestamp?: long(name='Timestamp', description='The timestamp of the offset from which consumption starts. This parameter is valid only if you set the Offset parameter to CONSUME_FROM_TIMESTAMP.', example='1636597951964'),
        topic?: string(name='Topic', description='The topic to which the message belongs.', example='topic_add_anima'),
        vSwitchIds?: string(name='VSwitchIds', example='vsw-m5ev8asdc6h12345****'),
        vpcId?: string(name='VpcId', example='vpc-m5e3sv4b12345****'),
      }(name='SourceRocketMQParameters', description='The parameters that are returned if ApsaraMQ for RocketMQ is specified as the event source.'),
      sourceSLSParameters?: {
        consumePosition?: string(name='ConsumePosition', description='The starting consumer offset. The value begin indicates the earliest offset, and the value end indicates the latest offset. You can also specify a time in seconds to start consumption.', example='begin'),
        consumerGroup?: string(name='ConsumerGroup', description='The consumer group.'),
        logStore?: string(name='LogStore', description='The Log Service Logstore.', example='waf-logstore'),
        project?: string(name='Project', description='The Log Service project.', example='dmmzk'),
        roleName?: string(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the RAM console.', example='testRole'),
      }(name='SourceSLSParameters', description='The parameters that are returned if the event provider is Simple Log Service.'),
    }(name='Source', description='The event source.'),
    status?: string(name='Status', description='The status of the event stream that is returned.', example='RUNNING'),
    transforms?: [ 
      {
        arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the cloud service, such as the ARN of a Function Compute function.', example='acs:fc:cn-hangzhou:*****:services/demo-service.LATEST/functions/demo-func'),
      }
    ](name='Transforms'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='7892F480-58C9-5067-AB35-8A7BEF0F726A'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. The value true indicates that the operation is successful.', example='true'),
}

model GetEventStreamingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventStreamingResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query the details of an event stream.
  * @param request  the request parameters of GetEventStreaming  GetEventStreamingRequest
  * @return GetEventStreamingResponse
 */
async function getEventStreaming(request: GetEventStreamingRequest): GetEventStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventStreaming', 'POST', '/', 'json', true, 'form', request);
}

model GetRuleRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='default', position='Query'),
  ruleName: string(name='RuleName', description='The name of the event rule.

This parameter is required.', example='ram-changes', position='Query'),
}

model GetRuleResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For a list of error codes, see Error codes.', example='Success'),
  data?: {
    createdTimestamp?: long(name='CreatedTimestamp', description='The timestamp that indicates when the event rule was created.', example='1607071602000'),
    description?: string(name='Description', description='The description of the event rule.', example='test'),
    eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='Housekeeping-Bus'),
    filterPattern?: string(name='FilterPattern', description='The event pattern, in JSON format. Valid values: stringEqual and stringExpression. You can specify up to five expressions in the map data structure in each field.

You can specify up to five expressions in the map data structure in each field.', example='{\\"source\\":[\\"acs.oss\\"],\\"type\\":[\\"oss:BucketQueried:GetBucketStat\\"]}'),
    ruleARN?: string(name='RuleARN', description='The Alibaba Cloud Resource Name (ARN) of the event rule.', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/default/rule/myRule3'),
    ruleName?: string(name='RuleName', description='The name of the event rule.', example='ramrolechange-fc'),
    status?: string(name='Status', description='The status of the event rule. Valid values: ENABLE (default): The event rule is enabled. DISABLE: The event rule is disabled.', example='ENABLE'),
    targets?: [ 
      {
        concurrentConfig?: {
          concurrency?: long(name='Concurrency'),
        }(name='ConcurrentConfig'),
        deadLetterQueue?: {
          arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the dead-letter queue.', example='acs:eventbridge:cn-hangzhou:164901546557****:eventbus/my-event-bus/eventsource/myRocketMQ.source'),
          network?: string(name='Network'),
          securityGroupId?: string(name='SecurityGroupId'),
          vSwitchIds?: string(name='VSwitchIds'),
          vpcId?: string(name='VpcId'),
        }(name='DeadLetterQueue', description='The dead-letter queue.'),
        detailMap?: map[string]any(name='DetailMap', description='The information about the event target.'),
        endpoint?: string(name='Endpoint', description='The endpoint of the event target.', example='acs:mns:cn-hangzhou:123456789098****:queues/myqueue'),
        errorsTolerance?: string(name='ErrorsTolerance', description='The fault tolerance policy. Valid values: ALL and NONE. ALL: Fault tolerance is allowed. If an error occurs in an event, event processing is not blocked. If the event fails to be sent after the maximum number of retries specified by the retry policy is reached, the event is delivered to the dead-letter queue or discarded based on your configurations. NONE: Fault tolerance is not allowed. If an error occurs in an event and the event fails to be sent after the maximum number of retries specified by the retry policy is reached, event processing is blocked.', example='ALL'),
        id?: string(name='Id', description='The ID of the event target.', example='1'),
        paramList?: [ 
          {
            form?: string(name='Form', description='The format that is used by the event target parameter. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='TEMPLATE'),
            resourceKey?: string(name='ResourceKey', description='The resource key of the event target. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='body'),
            template?: string(name='Template', description='The template based on which events are delivered to the event target.', example='The value of ${key} is ${value}!'),
            value?: string(name='Value', description='The event target.', example='{\\"key\\"=\\"value\\"}'),
          }
        ](name='ParamList', description='The parameters that are configured for the event target.'),
        pushRetryStrategy?: string(name='PushRetryStrategy', description='The retry policy that is used to push failed events. Valid values: BACKOFF_RETRY and EXPONENTIAL_DECAY_RETRY. BACKOFF_RETRY: backoff retry. A failed event can be retried up to three times. The interval between two consecutive retries is a random value between 10 seconds and 20 seconds. EXPONENTIAL_DECAY_RETRY: exponential decay retry. A failed event can be retried up to 176 times. The interval between two consecutive retries exponentially increases to a maximum of 512 seconds. The total retry time is 1 day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, and 512 seconds. The interval of 512 seconds is used for 167 retries.', example='BACKOFF_RETRY'),
        pushSelector?: string(name='PushSelector', description='The transformer that is used to push events.', example='MATCHED_EVENT'),
        type?: string(name='Type', description='The type of the event target. For more information, see [Event target parameters](https://help.aliyun.com/document_detail/185887.html).', example='acs.mns.queue'),
      }
    ](name='Targets', description='The event targets.'),
  }(name='Data', description='The returned parameters.'),
  message?: string(name='Message', description='The returned error message.', example='The event rule not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='2BC1857D-E633-5E79-B2C2-43EF5F7730D8'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. If the operation is successful, the value true is returned.', example='true'),
}

model GetRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRuleResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query the details of an event rule.
  * @param request  the request parameters of GetRule  GetRuleRequest
  * @return GetRuleResponse
 */
async function getRule(request: GetRuleRequest): GetRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRule', 'POST', '/', 'json', false, 'json', request);
}

model ListAliyunOfficialEventSourcesRequest {
}

model ListAliyunOfficialEventSourcesResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For a list of error codes, see Error codes.', example='Success'),
  data?: {
    eventSourceList?: [ 
      {
        arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the event bus.', example='acs:eventbridge:cn-hangzhou:SYSTEM:eventsource/acs.aliyuncvc'),
        ctime?: float(name='Ctime', description='The time when the event source was created. Unit: milliseconds.', example='1607071602000'),
        description?: string(name='Description', description='The description of the event source.'),
        eventBusName?: string(name='EventBusName', description='The name of the event source to which the event type belongs.', example='acs.aliyuncvc'),
        eventTypes?: [ 
          {
            eventSourceName?: string(name='EventSourceName', description='The name of the event source.', example='name'),
            groupName?: string(name='GroupName', description='The name of the group to which the event type belongs.', example='aliyuncvc:MeetingEvent'),
            name?: string(name='Name', description='The full name of the event type.', example='aliyuncvc:MeetingEvent:MeetingStateEvent'),
            shortName?: string(name='ShortName', description='The short name of the event type.', example='MeetingStateEvent'),
          }
        ](name='EventTypes', description='The event types.'),
        fullName?: string(name='FullName', description='The full name of the event source.', example='E-MapReduce'),
        name?: string(name='Name', description='The name of the event source.', example='acs.aliyuncvc'),
        status?: string(name='Status', description='The status of the event source. Valid value: Activated.', example='Activated'),
        type?: string(name='Type', description='The type of the event source.', example='1'),
      }
    ](name='EventSourceList', description='The event sources.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned error message.', example='InvalidArgument'),
  requestId?: string(name='RequestId', description='The request ID.', example='5f80e9b3-98d5-4f51-8412-c758818a03e4'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. If the operation is successful, the value true is returned.', example='true'),
}

model ListAliyunOfficialEventSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAliyunOfficialEventSourcesResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query all Alibaba Cloud service event sources.
  * @param request  the request parameters of ListAliyunOfficialEventSources  ListAliyunOfficialEventSourcesRequest
  * @return ListAliyunOfficialEventSourcesResponse
 */
async function listAliyunOfficialEventSources(request: ListAliyunOfficialEventSourcesRequest): ListAliyunOfficialEventSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAliyunOfficialEventSources', 'POST', '/', 'json', false, 'json', request);
}

model ListApiDestinationsRequest {
  apiDestinationNamePrefix?: string(name='ApiDestinationNamePrefix', description='The prefix of the API destination name.', example='api-demo', position='Query'),
  connectionName?: string(name='ConnectionName', description='The connection name.', example='connection-name', position='Query'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries to be returned in a call. You can use this parameter and NextToken to implement paging.

*   Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='If you set Limit and excess return values exist, this parameter is returned.

*   Default value: 0.', example='0', position='Query'),
}

model ListApiDestinationsResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  data?: {
    apiDestinations?: [ 
      {
        apiDestinationName?: string(name='ApiDestinationName', description='The name of the API destination.', example='api-destination-2'),
        connectionName?: string(name='ConnectionName', description='The connection name.', example='connection-name'),
        description?: string(name='Description', description='The description of the connection.', example='demo'),
        gmtCreate?: long(name='GmtCreate', description='The time when the API destination was created.', example='1665223213000'),
        httpApiParameters?: {
          endpoint?: string(name='Endpoint', description='The endpoint of the API destination.', example='http://127.0.0.1:8001/api'),
          method?: string(name='Method', description='The HTTP request method. Valid values:

- POST

- GET

- DELETE

- PUT

- HEAD

- TRACE

- PATCH', example='POST'),
        }(name='HttpApiParameters', description='The request parameters that are configured for the API destination.'),
      }
    ](name='ApiDestinations', description='The API destinations.'),
    maxResults?: float(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='1'),
    total?: float(name='Total', description='The total number of entries returned.', example='2'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='96D7C0AB-DCE5-5E82-96B8-4725E1706BB1'),
}

model ListApiDestinationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApiDestinationsResponseBody(name='body'),
}

/**
  * @description You can use this API operation to query a list of API destinations.
  * @param request  the request parameters of ListApiDestinations  ListApiDestinationsRequest
  * @return ListApiDestinationsResponse
 */
async function listApiDestinations(request: ListApiDestinationsRequest): ListApiDestinationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApiDestinations', 'POST', '/', 'json', false, 'json', request);
}

model ListConnectionsRequest {
  connectionNamePrefix?: string(name='ConnectionNamePrefix', description='The key word that you specify to query connections. Connections can be queried by prefixes.', example='connection-name', position='Body'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries to be returned in a single call. You can use this parameter and the NextToken parameter to implement paging.

*   Default value: 10.', example='10', position='Body'),
  nextToken?: string(name='NextToken', description='If you set the Limit parameter and excess return values exist, this parameter is returned.

*   Default value: 0.', example='0', position='Body'),
}

model ListConnectionsResponseBody = {
  code?: string(name='Code', description='The HTTP status code. The value Success indicates that the request is successful.', example='Success'),
  data?: {
    connections?: [ 
      {
        authParameters?: {
          apiKeyAuthParameters?: {
            apiKeyName?: string(name='ApiKeyName', description='The key of the API key.', example='Token'),
            apiKeyValue?: string(name='ApiKeyValue', description='The value of the API key.', example='asdkjnqkwejooa'),
          }(name='ApiKeyAuthParameters', description='The parameters that are returned for API key authentication.'),
          authorizationType?: string(name='AuthorizationType', description='The authentication method. Valid values:

*   BASIC_AUTH: basic authentication.
*   API_KEY_AUTH: API key authentication.
*   OAUTH_AUTH: OAuth authentication.', example='BASIC_AUTH'),
          basicAuthParameters?: {
            password?: string(name='Password', description='The password for basic authentication.', example='admin'),
            username?: string(name='Username', description='The username for basic authentication.', example='admin'),
          }(name='BasicAuthParameters', description='The parameters that are returned for basic authentication.'),
          oAuthParameters?: {
            authorizationEndpoint?: string(name='AuthorizationEndpoint', description='The endpoint that is used to obtain the OAuth token.', example='http://localhost:8080/oauth/token'),
            clientParameters?: {
              clientID?: string(name='ClientID', description='The client ID.', example='ClientID'),
              clientSecret?: string(name='ClientSecret', description='The AccessKey secret of the client.', example='ClientSecret'),
            }(name='ClientParameters', description='The parameters that are returned for the client.'),
            httpMethod?: string(name='HttpMethod', description='The HTTP request method. Valid values:

*   GET
*   POST
*   HEAD', example='POST'),
            oAuthHttpParameters?: {
              bodyParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                  key?: string(name='Key', description='The key of the request body.', example='name'),
                  value?: string(name='Value', description='The value of the request body.', example='demo'),
                }
              ](name='BodyParameters', description='The parameters that are configured for the request.'),
              headerParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                  key?: string(name='Key', description='The key of the request header.', example='name'),
                  value?: string(name='Value', description='The value of the request header.', example='demo'),
                }
              ](name='HeaderParameters', description='The parameters that are returned for the request header.'),
              queryStringParameters?: [ 
                {
                  isValueSecret?: string(name='IsValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                  key?: string(name='Key', description='The key of the request path.', example='name'),
                  value?: string(name='Value', description='The value of the request path.', example='demo'),
                }
              ](name='QueryStringParameters', description='The parameters that are returned for the request path.'),
            }(name='OAuthHttpParameters', description='The request parameters of OAuth authentication.'),
          }(name='OAuthParameters', description='The parameters that are returned for OAuth authentication.'),
        }(name='AuthParameters', description='The parameters that are returned for authentication.'),
        connectionName?: string(name='ConnectionName', description='The connection name.', example='connection-name'),
        description?: string(name='Description', description='The connection description.', example='The description of the connection.'),
        gmtCreate?: long(name='GmtCreate', description='The time when the connection was created.', example='1592838994234'),
        id?: long(name='Id', description='The ID of the connection.', example='1141093'),
        networkParameters?: {
          networkType?: string(name='NetworkType', description='*   PublicNetwork: the Internet.
*   PrivateNetwork: virtual private cloud (VPC).', example='PublicNetwork'),
          securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9rtyb'),
          vpcId?: string(name='VpcId', description='The VPC ID.', example='eb-test/vpc-bp1symadadwnwgmqud'),
          vswitcheId?: string(name='VswitcheId', description='The vSwitch ID.', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeqbt2c'),
        }(name='NetworkParameters', description='The parameters that are returned for the network.'),
      }
    ](name='Connections', description='The connections.'),
    maxResults?: float(name='MaxResults', description='The number of entries returned per page.', example='10'),
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='0'),
    total?: float(name='Total', description='The total number of entries returned.', example='1'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.', example='E3619976-8714-5D88-BBA2-6983D798A8BB'),
}

model ListConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConnectionsResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query connections.
  * @param request  the request parameters of ListConnections  ListConnectionsRequest
  * @return ListConnectionsResponse
 */
async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnections', 'POST', '/', 'json', true, 'form', request);
}

model ListEventBusesRequest {
  limit?: int32(name='Limit', description='The maximum number of entries to return in a request. You can use this parameter and NextToken to implement paging.

>  A maximum of 100 entries can be returned in a request.', example='10', position='Query'),
  namePrefix?: string(name='NamePrefix', description='The prefix of the names of the event buses that you want to query.', example='My', position='Query'),
  nextToken?: string(name='NextToken', description='If you configure Limit and excess return values exist, this parameter is returned. You can use this parameter and Limit to implement paging.', example='10', position='Query'),
}

model ListEventBusesResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   Success: The request was successful.
*   Other codes: The request failed. For information about error codes, see Error codes.', example='200'),
  data?: {
    eventBuses?: [ 
      {
        createTimestamp?: long(name='CreateTimestamp', description='The timestamp that indicates when the event bus was created.', example='1607071602000'),
        description?: string(name='Description', description='The description.', example='bus_description'),
        eventBusARN?: string(name='EventBusARN', description='The Alibaba Cloud Resource Name (ARN) of the event bus.', example='acs:eventbridge:cn-hangzhou:123456789098***:eventbus/default'),
        eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='default'),
      }
    ](name='EventBuses', description='The event buses.'),
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='10'),
    total?: int32(name='Total', description='The total number of entries.', example='2'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='InvalidArgument'),
  requestId?: string(name='RequestId', description='The request ID.', example='D1DCF64A-3F2C-5323-ADCB-3F4DF30FAD2D'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. If the operation was successful, the value true is returned.', example='true'),
}

model ListEventBusesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventBusesResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query all event buses.
  * @param request  the request parameters of ListEventBuses  ListEventBusesRequest
  * @return ListEventBusesResponse
 */
async function listEventBuses(request: ListEventBusesRequest): ListEventBusesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventBuses', 'POST', '/', 'json', false, 'json', request);
}

model ListEventStreamingsRequest {
  regionId?: string(name='RegionId', position='Host'),
  limit?: int32(name='Limit', description='The maximum number of entries to be returned in a call. You can use this parameter and NextToken to implement paging. A maximum of 100 entries can be returned in a call.', example='10', position='Body'),
  namePrefix?: string(name='NamePrefix', description='The name of the event stream that you want to query.', example='name', position='Body'),
  nextToken?: string(name='NextToken', description='If you configure Limit and excess return values exist, this parameter is returned.', example='10', position='Body'),
  sinkArn?: string(name='SinkArn', description='The ARN of the event target.', example='acs:fc:cn-hangzhou:118609547428****:services/fw1.LATEST/functions/log1', position='Body'),
  sourceArn?: string(name='SourceArn', description='The Alibaba Cloud Resource Name (ARN) of the event source.', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key', example='mns'),
      value?: string(name='Value', example='mnstest'),
    }
  ](name='Tags', position='Body'),
}

model ListEventStreamingsResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

Success: The request is successful.

Other codes: The request failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    eventStreamings?: [ 
      {
        description?: string(name='Description', description='The description of the event stream.', example='demo'),
        eventStreamingName?: string(name='EventStreamingName', description='The name of the event stream.', example='name'),
        filterPattern?: string(name='FilterPattern', description='The rule that is used to filter events. If you leave this parameter empty, all events are matched.'),
        runOptions?: {
          batchWindow?: {
            countBasedWindow?: int32(name='CountBasedWindow', description='The maximum number of events that are allowed in the batch window. When this threshold is reached, data in the window is pushed to the downstream service. When multiple batch windows exist, data is pushed if triggering conditions are met in one of the windows.', example='100'),
            timeBasedWindow?: int32(name='TimeBasedWindow', description='The maximum period of time during which events are allowed in the batch window. Unit: seconds. When this threshold is reached, data in the window is pushed to the downstream service. When multiple batch windows exist, data is pushed if triggering conditions are met in one of the windows.', example='10'),
          }(name='BatchWindow', description='The batch window.'),
          businessOption?: {
            businessMode?: string(name='BusinessMode'),
            maxCapacityUnitCount?: long(name='MaxCapacityUnitCount'),
            minCapacityUnitCount?: long(name='MinCapacityUnitCount'),
          }(name='BusinessOption'),
          deadLetterQueue?: {
            arn?: string(name='Arn', description='The ARN of the dead-letter queue.', example='acs:ram::1597871211794192:role/aliyunsaedefaultrole'),
            network?: string(name='Network', example='PrivateNetwork'),
            securityGroupId?: string(name='SecurityGroupId', example='sg-2vcgdxz7o1n9zapp****'),
            vSwitchIds?: string(name='VSwitchIds', example='vsw-m5ev8asdc6h12345****'),
            vpcId?: string(name='VpcId', example='vpc-2zehizpoendb3****'),
          }(name='DeadLetterQueue', description='Indicates whether dead-letter queues are enabled. By default, dead-letter queues are disabled. Events that fail to be pushed are discarded after the maximum number of retries that is specified by the retry policy is reached.'),
          errorsTolerance?: string(name='ErrorsTolerance', description='The exception tolerance policy. Valid values: NONE and ALL.', example='ALL'),
          maximumTasks?: int32(name='MaximumTasks', description='The maximum number of concurrent tasks.', example='2'),
          retryStrategy?: {
            pushRetryStrategy?: string(name='PushRetryStrategy', description='The retry policy. Valid values: BACKOFF_RETRY and EXPONENTIAL_DECAY_RETRY.', example='EXPONENTIALDECAY_RETRY'),
          }(name='RetryStrategy', description='The retry policy that is used if events fail to be pushed.'),
          throttling?: int32(name='Throttling'),
        }(name='RunOptions', description='The parameters that are returned for the runtime environment.'),
        sink?: {
          sinkApacheKafkaParameters?: {
            acks?: string(name='Acks'),
            bootstraps?: string(name='Bootstraps'),
            key?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='Key'),
            networkType?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='NetworkType'),
            saslMechanism?: string(name='SaslMechanism'),
            saslPassword?: string(name='SaslPassword'),
            saslUser?: string(name='SaslUser'),
            securityGroupId?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='SecurityGroupId'),
            securityProtocol?: string(name='SecurityProtocol'),
            topic?: string(name='Topic'),
            vSwitchIds?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='VSwitchIds'),
            value?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='Value'),
            vpcId?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='VpcId'),
          }(name='SinkApacheKafkaParameters'),
          sinkApacheRocketMQCheckpointParameters?: {
            consumeTimestamp?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='1636597951964'),
            }(name='ConsumeTimestamp'),
            group?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='GID_******'),
            }(name='Group'),
            instanceEndpoint?: string(name='InstanceEndpoint', example='192.168.1.1:9876'),
            instancePassword?: string(name='InstancePassword', example='****'),
            instanceUsername?: string(name='InstanceUsername', example='admin'),
            networkType?: string(name='NetworkType', example='PrivateNetwork'),
            securityGroupId?: string(name='SecurityGroupId', example='sg-2vcgdxz7o1n9zapp****'),
            topic?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='myTopic'),
            }(name='Topic'),
            vSwitchId?: string(name='VSwitchId', example='vsw-wz9qqeovkwjxlu9uc****'),
            vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-2zehizpoendb3****'),
          }(name='SinkApacheRocketMQCheckpointParameters'),
          sinkBaiLianParameters?: SinkBaiLianParameters(name='SinkBaiLianParameters'),
          sinkCustomizedKafkaConnectorParameters?: {
            connectorPackageUrl?: string(name='ConnectorPackageUrl', example='"https://examplebucket.oss-cn-hangzhou.aliyuncs.com/testDoc/Old_Homebrew/2024-06-26%2022%3A34%3A08/opt/homebrew/homebrew/Library/Homebrew/test/support/fixtures/cask/AppWithBinary.zip?OSSAccessKeyId=ri&Expires=1725539627&Signature=rb8q3OpV2i3gZJ"'),
            connectorParameters?: {
              config?: map[string]any(name='Config', example='{
          "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "tasks.max": "1",
          "topics": "sourceA,sourceB"
        }'),
              name?: string(name='Name', example='mongo-sink'),
            }(name='ConnectorParameters'),
            workerParameters?: map[string]any(name='WorkerParameters', example='{
        "group.id": "connect-eb-cluster-KAFKA_CONNECTORC",
        "offset.storage.topic": "connect-eb-offset-KAFKA_CONNECTOR_yjqC8K5ewC",
        "config.storage.topic": "connect-eb-config-KAFKA_CONNECTOR_yjqC8K5ewC",
        "status.storage.topic": "connect-eb-status-KAFKA_CONNECTOR_yjqC8K5ewC",
        "consumer.group.id": "connector-eb-cluster-KAFKA_CONNECTOR_yjqC8K5ewC-mongo-sink",
        "bootstrap.servers": "alikafka-post:9092"
      }'),
          }(name='SinkCustomizedKafkaConnectorParameters'),
          sinkCustomizedKafkaParameters?: {
            instanceId?: string(name='InstanceId', example='90be1f96-4229-4535-bb76-34b4f6fb2b71'),
          }(name='SinkCustomizedKafkaParameters'),
          sinkDashVectorParameters?: {
            apiKey?: string(name='ApiKey', example='Q34nExQH7sQ****'),
            collection?: string(name='Collection', example='collection1'),
            dashVectorSchemaParameters?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='[
  {
    "name": "schema1",
    "type": "INT",
    "value": "${value1}"
  },
  {
    "name": "schema2",
    "type": "FLOAT",
    "value": "${value2}"
  }
]'),
              value?: string(name='Value', example='{
  "value1":"v1",
  "value2":"v2"
}'),
            }(name='DashVectorSchemaParameters'),
            instanceId?: string(name='InstanceId', example='vrs-cn-lbj3ru1***'),
            network?: string(name='Network', example='PublicNetwork'),
            operation?: string(name='Operation', example='Upsert'),
            partition?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='default'),
            }(name='Partition'),
            primaryKeyId?: {
              form?: string(name='Form', example='JSONPATH'),
              template?: string(name='Template', example='${ID}'),
              value?: string(name='Value', example='$.data.requestId'),
            }(name='PrimaryKeyId'),
            vector?: {
              form?: string(name='Form', example='JSONPATH'),
              template?: string(name='Template'),
              value?: string(name='Value', example='$.data.messageBody'),
            }(name='Vector'),
          }(name='SinkDashVectorParameters'),
          sinkDataHubParameters?: {
            body?: {
              form?: string(name='Form', example='ORIGINAL'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='Body'),
            project?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='demo-project'),
            }(name='Project'),
            roleName?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='testRole'),
            }(name='RoleName'),
            topic?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='demo-topic'),
            }(name='Topic'),
            topicSchema?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='{"k1":"value1","k2":"value2"}'),
            }(name='TopicSchema'),
            topicType?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='TUPLE'),
            }(name='TopicType'),
          }(name='SinkDataHubParameters'),
          sinkDorisParameters?: {
            beHttpEndpoint?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='BeHttpEndpoint'),
            body?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='Body'),
            database?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='Database'),
            feHttpEndpoint?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='FeHttpEndpoint'),
            networkType?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='NetworkType'),
            password?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='Password'),
            queryEndpoint?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='QueryEndpoint'),
            securityGroupId?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='SecurityGroupId'),
            table?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='Table'),
            userName?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='UserName'),
            vSwitchIds?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='VSwitchIds'),
            vpcId?: {
              form?: string(name='Form'),
              template?: string(name='Template'),
              value?: string(name='Value'),
            }(name='VpcId'),
          }(name='SinkDorisParameters'),
          sinkFcParameters?: {
            body?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Body', description='The message body that is delivered to Function Compute.'),
            concurrency?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The delivery concurrency. Minimum value: 1.', example='1'),
            }(name='Concurrency', description='The delivery concurrency. Minimum value: 1.'),
            dataFormat?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='DataFormat'),
            functionName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The function name.', example='mFunction'),
            }(name='FunctionName', description='The function name.'),
            invocationType?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The invocation mode. Valid values:

*   Sync
*   Async', example='Async'),
            }(name='InvocationType', description='The invocation mode. Valid values:

*   Sync
*   Async'),
            qualifier?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The alias of the service to which the function belongs.', example='LATEST'),
            }(name='Qualifier', description='The alias of the service to which the function belongs.'),
            serviceName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The service name.', example='myService'),
            }(name='ServiceName', description='The service name.'),
          }(name='SinkFcParameters', description='The parameters that are returned if Function Compute is specified as the event target.'),
          sinkFnfParameters?: {
            executionName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='None'),
              value?: string(name='Value', description='The execution name.', example='123'),
            }(name='ExecutionName', description='The execution name.'),
            flowName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='None'),
              value?: string(name='Value', description='The flow name.', example='test-streaming-fnf'),
            }(name='FlowName', description='The flow name.'),
            input?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='None'),
              value?: string(name='Value', description='The input information of the execution.', example='123'),
            }(name='Input', description='The input information of the execution.'),
            roleName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='None'),
              value?: string(name='Value', description='The role configuration.', example='Al****FNF-x****'),
            }(name='RoleName', description='The role name.'),
          }(name='SinkFnfParameters', description='The parameters that are returned if CloudFlow is specified as the event target.'),
          sinkKafkaParameters?: {
            acks?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The ACK mode.

*   If you set this parameter to 0, no response is returned from the broker. In this mode, the performance is high, but the risk of data loss is also high.
*   If you set this parameter to 1, a response is returned when data is written to the leader. In this mode, the performance and the risk of data loss are moderate. Data loss may occur if a failure occurs on the leader.
*   If you set this parameter to all, a response is returned when data is written to the leader and synchronized to the followers. In this mode, the performance is low, but the risk of data loss is also low. Data loss occurs if the leader and the followers fail at the same time.', example='1'),
            }(name='Acks', description='The acknowledgment (ACK) mode.

*   If you set this parameter to 0, no response is returned from the broker. In this mode, the performance is high, but the risk of data loss is also high.
*   If you set this parameter to 1, a response is returned when data is written to the leader. In this mode, the performance and the risk of data loss are moderate. Data loss may occur if a failure occurs on the leader.
*   If you set this parameter to all, a response is returned when data is written to the leader and synchronized to the followers. In this mode, the performance is low, but the risk of data loss is also low. Data loss occurs if the leader and the followers fail at the same time.'),
            instanceId?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The ID of the ApsaraMQ for Kafka instance.', example='Defaut_1283278472_sadkj'),
            }(name='InstanceId', description='The ID of the ApsaraMQ for Kafka instance.'),
            key?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The message key.', example='key'),
            }(name='Key', description='The message key.'),
            topic?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The name of the topic on the ApsaraMQ for Kafka instance.', example='topic'),
            }(name='Topic', description='The name of the topic on the ApsaraMQ for Kafka instance.'),
            value?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Value', description='The message body.'),
          }(name='SinkKafkaParameters', description='The parameters that are returned if ApsaraMQ for Kafka is specified as the event target.'),
          sinkMNSParameters?: {
            body?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Body', description='The message content.'),
            isBase64Encode?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='Indicates that Base64 encoding is enabled.', example='true'),
            }(name='IsBase64Encode', description='Indicates whether Base64 encoding is enabled.'),
            queueName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The name of the MNS queue.', example='MyQueue'),
            }(name='QueueName', description='The name of the MNS queue.'),
          }(name='SinkMNSParameters', description='The parameters that are returned if MNS is specified as the event target.'),
          sinkOpenSourceRabbitMQParameters?: {
            authType?: string(name='AuthType', example='ACL'),
            body?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Body'),
            endpoint?: string(name='Endpoint', example='192.168.1.1:9876'),
            exchange?: string(name='Exchange', example='my_exchange'),
            messageId?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='MessageId'),
            networkType?: string(name='NetworkType', example='PrivateNetwork'),
            password?: string(name='Password', example='****'),
            properties?: {
              form?: string(name='Form', example='TEMPLATE'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='{
      "key": "value"
}'),
            }(name='Properties'),
            queueName?: string(name='QueueName', example='my_queue'),
            routingKey?: {
              form?: string(name='Form', example='JSONPATH'),
              template?: string(name='Template', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', example='housekeeping'),
            }(name='RoutingKey'),
            securityGroupId?: string(name='SecurityGroupId', example='sg-2vcgdxz7o1n9zapp****'),
            targetType?: string(name='TargetType', example='exchange'),
            username?: string(name='Username', example='admin'),
            vSwitchIds?: string(name='VSwitchIds', example='vsw-wz9qqeovkwjxlu9uc****'),
            virtualHostName?: string(name='VirtualHostName', example='Vhost1'),
            vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-2zehizpoendb3****'),
          }(name='SinkOpenSourceRabbitMQParameters'),
          sinkRabbitMQParameters?: {
            body?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Body', description='The message content.'),
            exchange?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The name of the exchange on the ApsaraMQ for RabbitMQ instance.', example='a_exchange'),
            }(name='Exchange', description='The exchange mode. This parameter is required only if TargetType is set to Exchange.'),
            instanceId?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The ID of the ApsaraMQ for RabbitMQ instance.', example='si-296cd57939a1421b94ec'),
            }(name='InstanceId', description='The ID of the ApsaraMQ for RabbitMQ instance.'),
            messageId?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='MessageId', description='The message ID.'),
            properties?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Properties', description='The properties that are used to filter messages.'),
            queueName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The name of the queue on the ApsaraMQ for RabbitMQ instance.', example='MyQueue'),
            }(name='QueueName', description='The queue mode. This parameter is required only if TargetType is set to Queue.'),
            routingKey?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The rule that is used to route messages.', example='housekeeping'),
            }(name='RoutingKey', description='The rule that is used to route messages. This parameter is required only if TargetType is set to Exchange.'),
            targetType?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The type of the resource to which events are delivered. Valid values: Exchange and Queue.', example='Queue'),
            }(name='TargetType', description='The type of the resource to which events are delivered.'),
            virtualHostName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The name of the vhost to which the ApsaraMQ for RabbitMQ instance belongs.', example='rabbit-host'),
            }(name='VirtualHostName', description='The name of the vhost to which the ApsaraMQ for RabbitMQ instance belongs.'),
          }(name='SinkRabbitMQParameters', description='The parameters that are returned if ApsaraMQ for RabbitMQ is specified as the event target.'),
          sinkRocketMQCheckpointParameters?: {
            consumeTimestamp?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='1636597951964'),
            }(name='ConsumeTimestamp'),
            group?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='GID_******'),
            }(name='Group'),
            instanceId?: string(name='InstanceId', example='MQ_INST_1825725063814405_BZ******'),
            instanceType?: string(name='InstanceType', example='Cloud_5'),
            topic?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='myTopic'),
            }(name='Topic'),
          }(name='SinkRocketMQCheckpointParameters'),
          sinkRocketMQParameters?: {
            body?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Body', description='The message content.'),
            deliveryOrderType?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='Orderly'),
            }(name='DeliveryOrderType'),
            instanceEndpoint?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='vbr-8vbsvkkbpf3vb0zef****'),
            }(name='InstanceEndpoint'),
            instanceId?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The ID of the ApsaraMQ for RocketMQ instance.', example='MQ_INST_164901546557****_BAAN****'),
            }(name='InstanceId', description='The ID of the ApsaraMQ for RocketMQ instance.'),
            instancePassword?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='admin******'),
            }(name='InstancePassword'),
            instanceType?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='Cloud_4'),
            }(name='InstanceType'),
            instanceUsername?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='admin'),
            }(name='InstanceUsername'),
            keys?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Keys', description='The keys that are used to filter messages.'),
            network?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='PublicNetwork'),
            }(name='Network'),
            properties?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Properties', description='The properties that are used to filter messages.'),
            securityGroupId?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='b4bf375515f6440f942e3a20c33d****'),
            }(name='SecurityGroupId'),
            shardingKey?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='order_id'),
            }(name='ShardingKey'),
            tags?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Tags', description='The tags that are used to filter messages.'),
            topic?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The topic on the ApsaraMQ for RocketMQ instance.', example='topic'),
            }(name='Topic', description='The topic on the ApsaraMQ for RocketMQ instance.'),
            vSwitchIds?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='vbr-8vb835n3zf9shwl****mp'),
            }(name='VSwitchIds'),
            vpcId?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='vbr-8vb835n3zf9shwlvb****'),
            }(name='VpcId'),
          }(name='SinkRocketMQParameters', description='The parameters that are returned if ApsaraMQ for RocketMQ is specified as the event target.'),
          sinkSLSParameters?: {
            body?: {
              form?: string(name='Form', description='The method that is used to transform events.', example='TEMPLATE'),
              template?: string(name='Template', description='The template based on which events are transformed.', example='The value of ${key} is ${value}!'),
              value?: string(name='Value', description='The value before transformation.', example='{
      "key": "value"
}'),
            }(name='Body', description='The message body that is sent to Simple Log Service.'),
            contentSchema?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='{"Key_1":{"form":"CONSTANT","value":"demoKey"},"Value_1":{"form":"JSONPATH","value":"$.data.value"}}'),
            }(name='ContentSchema'),
            contentType?: {
              form?: string(name='Form', example='CONSTANT'),
              template?: string(name='Template'),
              value?: string(name='Value', example='JSON'),
            }(name='ContentType'),
            logStore?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The Simple Log Service Logstore.', example='test-logstore'),
            }(name='LogStore', description='The Simple Log Service Logstore.'),
            project?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The Simple Log Service project.', example='test-project'),
            }(name='Project', description='The Simple Log Service project.'),
            roleName?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The role name. If you want to authorize EventBridge to use this role to read logs in Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the RAM console.', example='test-role'),
            }(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the RAM console.'),
            topic?: {
              form?: string(name='Form', description='The method that is used to transform events. Default value: CONSTANT.', example='CONSTANT'),
              template?: string(name='Template', description='None.'),
              value?: string(name='Value', description='The name of the topic in which logs are stored. The topic corresponds to the topic reserved field in Simple Log Service.', example='topic'),
            }(name='Topic', description='The name of the topic in which logs are stored. The topic corresponds to the topic reserved field in Simple Log Service.'),
          }(name='SinkSLSParameters', description='The parameters that are returned if Simple Log Service is specified as the event target.'),
        }(name='Sink', description='The event target.'),
        source?: {
          sourceApacheKafkaParameters?: {
            bootstraps?: string(name='Bootstraps'),
            consumerGroup?: string(name='ConsumerGroup'),
            networkType?: string(name='NetworkType'),
            offsetReset?: string(name='OffsetReset'),
            saslMechanism?: string(name='SaslMechanism'),
            saslPassword?: string(name='SaslPassword'),
            saslUser?: string(name='SaslUser'),
            securityGroupId?: string(name='SecurityGroupId'),
            securityProtocol?: string(name='SecurityProtocol'),
            topic?: string(name='Topic'),
            vSwitchIds?: string(name='VSwitchIds'),
            valueDataType?: string(name='ValueDataType'),
            vpcId?: string(name='VpcId'),
          }(name='SourceApacheKafkaParameters'),
          sourceApacheRocketMQCheckpointParameters?: {
            instanceEndpoint?: string(name='InstanceEndpoint', example='192.168.1.1:9876'),
            instancePassword?: string(name='InstancePassword', example='****'),
            instanceUsername?: string(name='InstanceUsername', example='admin'),
            networkType?: string(name='NetworkType', example='PrivateNetwork'),
            regionId?: string(name='RegionId', example='cn-hangzhou'),
            securityGroupId?: string(name='SecurityGroupId', example='sg-mw43*****'),
            topics?: [ string ](name='Topics'),
            vSwitchId?: string(name='VSwitchId', example='vsw-dwaafds****'),
            vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-adw1awdw*****'),
          }(name='SourceApacheRocketMQCheckpointParameters'),
          sourceCustomizedKafkaConnectorParameters?: {
            connectorPackageUrl?: string(name='ConnectorPackageUrl', example='"https://examplebucket.oss-cn-hangzhou.aliyuncs.com/testDoc/Old_Homebrew/2024-06-26%2022%3A34%3A08/opt/homebrew/homebrew/Library/Homebrew/test/support/fixtures/cask/AppWithBinary.zip?OSSAccessKeyId=ri&Expires=1725539627&Signature=rb8q3OpV2i3gZJ"'),
            connectorParameters?: {
              config?: map[string]any(name='Config', example='{
          "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "tasks.max": "1",
          "topics": "sourceA,sourceB"
        }'),
              name?: string(name='Name', example='test-name'),
            }(name='ConnectorParameters'),
            workerParameters?: map[string]any(name='WorkerParameters', example='{
        "group.id": "connect-eb-cluster-KAFKA_CONNECTORC",
        "offset.storage.topic": "connect-eb-offset-KAFKA_CONNECTOR_yjqC8K5ewC",
        "config.storage.topic": "connect-eb-config-KAFKA_CONNECTOR_yjqC8K5ewC",
        "status.storage.topic": "connect-eb-status-KAFKA_CONNECTOR_yjqC8K5ewC",
        "consumer.group.id": "connector-eb-cluster-KAFKA_CONNECTOR_yjqC8K5ewC-mongo-sink",
        "bootstrap.servers": "alikafka-post:9092"
      }'),
          }(name='SourceCustomizedKafkaConnectorParameters'),
          sourceCustomizedKafkaParameters?: {
            instanceId?: string(name='InstanceId', example='gtm-cn-k2c2yfg****'),
          }(name='SourceCustomizedKafkaParameters'),
          sourceDTSParameters?: {
            brokerUrl?: string(name='BrokerUrl', description='The URL and port number of the change tracking instance.'),
            initCheckPoint?: string(name='InitCheckPoint', description='The UNIX timestamp that is generated when the SDK client consumes the first data record.', example='1620962769'),
            password?: string(name='Password', description='The consumer group password.', example='123456'),
            sid?: string(name='Sid', description='The consumer group ID.', example='HG9'),
            taskId?: string(name='TaskId', description='The task ID.', example='1611b337285f44e2936a2c4170bbbb7f'),
            topic?: string(name='Topic', description='The name of the tracked topic of the change tracking instance.', example='TP_TEST_UNDERWRITE_ISSUE'),
            username?: string(name='Username', description='The consumer group username.', example='admin'),
          }(name='SourceDTSParameters', description='The parameters that are returned if Data Transmission Service (DTS) is specified as the event source.'),
          sourceEventBusParameters?: {
            eventBusName?: string(name='EventBusName', example='my-event-bus'),
            eventRuleName?: string(name='EventRuleName', example='my-event-rule'),
          }(name='SourceEventBusParameters'),
          sourceKafkaParameters?: {
            consumerGroup?: string(name='ConsumerGroup', description='The group ID of the consumer that subscribes to the topic.', example='GID_TEST'),
            instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for Kafka instance.', example='bastionhost-cn-i7m2gwt7z1n'),
            network?: string(name='Network', description='The network type. Default value: Default. The value PublicNetwork indicates a VPC.', example='Default'),
            offsetReset?: string(name='OffsetReset', description='The offset from which messages are consumed.', example='latest'),
            regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for Kafka instance resides.', example='cn-chengdu'),
            securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the ApsaraMQ for Kafka instance belongs.', example='sg-5ud5f3p0rqqis69tpp8eho7cp'),
            topic?: string(name='Topic', description='The name of the topic on the ApsaraMQ for Kafka instance.', example='topic_empower_1642473600414'),
            vSwitchIds?: string(name='VSwitchIds', description='The ID of the vSwitch with which the ApsaraMQ for Kafka instance is associated.', example='vsw-bp1rmi8rind7eo50cbied'),
            valueDataType?: string(name='ValueDataType', example='JSON'),
            vpcId?: string(name='VpcId', description='The ID of the VPC to which the ApsaraMQ for Kafka instance belongs.', example='vpc-wz9ki1qdlx3cx5cbbhowf'),
          }(name='SourceKafkaParameters', description='The parameters that are returned if ApsaraMQ for Kafka is specified as the event source.'),
          sourceMNSParameters?: {
            isBase64Decode?: boolean(name='IsBase64Decode', description='Indicates whether Base64 encoding is enabled.', example='true'),
            queueName?: string(name='QueueName', description='The name of the MNS queue.', example='work4'),
            regionId?: string(name='RegionId', description='The ID of the region where the MNS queue resides.', example='cn-zhangjiakou'),
          }(name='SourceMNSParameters', description='The parameters that are returned if Message Queue (MNS) is specified as the event source.'),
          sourceMQTTParameters?: {
            bodyDataType?: string(name='BodyDataType', example='JSON'),
            instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='bastionhost-cn-zvp27kcha1r'),
            regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides.', example='cn-qingdao'),
            topic?: string(name='Topic', description='The name of the topic on the ApsaraMQ for MQTT instance.', example='migration_instance'),
          }(name='SourceMQTTParameters', description='The parameters that are returned if ApsaraMQ for MQTT is specified as the event source.'),
          sourceMySQLParameters?: SourceMySQLParameters(name='SourceMySQLParameters'),
          sourceOSSParameters?: {
            bucketName?: string(name='BucketName', example='bucket_abc'),
            delimiter?: string(name='Delimiter', example='\\n'),
            loadFormat?: string(name='LoadFormat', example='TextLoader'),
            loadMode?: string(name='LoadMode', example='single'),
            prefix?: string(name='Prefix', example='fun/document/'),
            roleName?: string(name='RoleName', example='eventbridge_oss_role'),
          }(name='SourceOSSParameters'),
          sourceOpenSourceRabbitMQParameters?: {
            authType?: string(name='AuthType', example='ACL'),
            bodyDataType?: string(name='BodyDataType', example='Json'),
            endpoint?: string(name='Endpoint', example='192.168.1.1:9876'),
            networkType?: string(name='NetworkType', example='PrivateNetwork'),
            password?: string(name='Password', example='****'),
            queueName?: string(name='QueueName', example='demo'),
            securityGroupId?: string(name='SecurityGroupId', example='sg-m5edtu24f12345****'),
            username?: string(name='Username', example='admin'),
            vSwitchIds?: string(name='VSwitchIds', example='vsw-m5ev8asdc6h12345****'),
            virtualHostName?: string(name='VirtualHostName', example='Vhost1'),
            vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-m5e3sv4b12345****'),
          }(name='SourceOpenSourceRabbitMQParameters'),
          sourcePrometheusParameters?: {
            clusterId?: string(name='ClusterId', example='c83555068b6******ad213f565f209'),
            dataType?: string(name='DataType', example='JSON'),
            externalLabels?: string(name='ExternalLabels', example='{"source":"prometheus-prod"}'),
            labels?: string(name='Labels', example='__name__=.*'),
            regionId?: string(name='RegionId', example='cn-beijing'),
            roleName?: string(name='RoleName', example='testRole'),
          }(name='SourcePrometheusParameters'),
          sourceRabbitMQParameters?: {
            instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for RabbitMQ instance.', example='dbaudit-cn-7mz2hqolc06'),
            queueName?: string(name='QueueName', description='The name of the queue on the ApsaraMQ for RabbitMQ instance.', example='liuyang'),
            regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for RabbitMQ instance resides.', example='cn-zhangjiakou'),
            virtualHostName?: string(name='VirtualHostName', description='The name of the vhost to which the ApsaraMQ for RabbitMQ instance belongs.', example='eb-connect'),
          }(name='SourceRabbitMQParameters', description='The parameters that are returned if ApsaraMQ for RabbitMQ is specified as the event source.'),
          sourceRocketMQCheckpointParameters?: {
            instanceId?: string(name='InstanceId', example='rmq-cn-jte3w******'),
            instanceType?: string(name='InstanceType', example='Cloud_5'),
            regionId?: string(name='RegionId', example='cn-hangzhou'),
            topics?: [ string ](name='Topics'),
          }(name='SourceRocketMQCheckpointParameters'),
          sourceRocketMQParameters?: {
            authType?: string(name='AuthType', description='The authentication method.', example='ACL'),
            bodyDataType?: string(name='BodyDataType', example='JSON'),
            filterSql?: string(name='FilterSql', example='index > 10'),
            filterType?: string(name='FilterType', example='Tag'),
            groupID?: string(name='GroupID', description='The ID of the consumer group on the ApsaraMQ for RocketMQ instance.', example='GID_group1'),
            instanceEndpoint?: string(name='InstanceEndpoint', description='The endpoint that is used to access the ApsaraMQ for RocketMQ instance.', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
            instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for RocketMQ instance', example='i-f8zbher64dlm58plyfte'),
            instanceNetwork?: string(name='InstanceNetwork', description='The network type of the ApsaraMQ for RocketMQ instance. Valid values:

*   PublicNetwork
*   PrivateNetwork', example='PublicNetwork'),
            instancePassword?: string(name='InstancePassword', description='The password that is used to access the ApsaraMQ for RocketMQ instance.', example='123'),
            instanceSecurityGroupId?: string(name='InstanceSecurityGroupId', description='The ID of the security group to which the ApsaraMQ for RocketMQ instance belongs.', example='sg-m5edtu24f12345****'),
            instanceType?: string(name='InstanceType', description='The type of the ApsaraMQ for RocketMQ instance.', example='2'),
            instanceUsername?: string(name='InstanceUsername', description='The username that is used to access the ApsaraMQ for RocketMQ instance.', example='admin**'),
            instanceVSwitchIds?: string(name='InstanceVSwitchIds', description='The ID of the vSwitch with which the ApsaraMQ for RocketMQ instance is associated.', example='vsw-m5ev8asdc6h123456****'),
            instanceVpcId?: string(name='InstanceVpcId', description='The ID of the virtual private cloud (VPC) to which the ApsaraMQ for RocketMQ instance belongs.', example='vpc-bp1a4gmlk31hy***l3ss'),
            network?: string(name='Network', example='PublicNetwork'),
            offset?: string(name='Offset', description='The offset from which messages are consumed. Valid values: CONSUMEFROMLASTOFFSET: Messages are consumed from the latest offset. CONSUMEFROMFIRSTOFFSET: Messages are consumed from the earliest offset. CONSUME_FROM_TIMESTAMP: Messages are consumed from the offset at the specified point in time.', example='CONSUMEFROMTIMESTAMP'),
            regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for RocketMQ instance resides.', example='cn-chengdu'),
            securityGroupId?: string(name='SecurityGroupId', example='sg-m5edtu24f12345****'),
            tag?: string(name='Tag', description='The tag that is used to filter messages.', example='v1'),
            timestamp?: long(name='Timestamp', description='The timestamp that indicates the time from which messages are consumed. This parameter is valid only if Offset is set to CONSUMEFROMTIMESTAMP.', example='1670742074043'),
            topic?: string(name='Topic', description='The topic from which messages are sent.', example='topic_add_anima'),
            vSwitchIds?: string(name='VSwitchIds', example='vsw-m5ev8asdc6h12345****'),
            vpcId?: string(name='VpcId', example='vpc-m5e3sv4b12345****'),
          }(name='SourceRocketMQParameters', description='The parameters that are returned if ApsaraMQ for RocketMQ is specified as the event source.'),
          sourceSLSParameters?: {
            consumePosition?: string(name='ConsumePosition', description='The consumer offset. The value begin indicates the earliest offset. The value end indicates the latest offset. You can also specify a time in seconds to start message consumption.', example='begin'),
            consumerGroup?: string(name='ConsumerGroup', description='The group ID of the consumer that subscribes to the topic.', example='go-dts-shelf-group'),
            logStore?: string(name='LogStore', description='The Simple Log Service Logstore.', example='waf-logstore'),
            project?: string(name='Project', description='The Simple Log Service project.', example='dmmzk'),
            roleName?: string(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the Resource Access Management (RAM) console.', example='testRole'),
          }(name='SourceSLSParameters', description='The parameters that are returned if Simple Log Service is specified as the event source.'),
        }(name='Source', description='The event provider, which is also known as the event source.'),
        status?: string(name='Status', description='The status of the event stream that is returned.', example='RUNNING'),
        transforms?: [ 
          {
            arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the cloud service, such as the ARN of a Function Compute function.', example='acs:fc:cn-hangzhou:*****:services/demo-service.LATEST/functions/demo-func'),
          }
        ](name='Transforms', description='The transformation-related configurations.'),
      }
    ](name='EventStreamings', description='The event streams.'),
    nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists. You must specify the pagination token in the next request.', example='177'),
    total?: int32(name='Total', description='The total number of records.', example='10'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='283FF852-C4B8-58C9-9777-F88A5A16A79F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. The value true indicates that the request is successful.', example='true'),
}

model ListEventStreamingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventStreamingsResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query event streams.
  * @param request  the request parameters of ListEventStreamings  ListEventStreamingsRequest
  * @return ListEventStreamingsResponse
 */
async function listEventStreamings(request: ListEventStreamingsRequest): ListEventStreamingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventStreamings', 'POST', '/', 'json', true, 'form', request);
}

model ListRulesRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='default', position='Query'),
  limit?: int32(name='Limit', description='The maximum number of entries to be returned in a single call. You can use this parameter and the NextToken parameter to implement paging. A maximum of 100 entries can be returned in a single call.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='If you set the Limit parameter and excess return values exist, this parameter is returned.', example='1000', position='Query'),
  ruleNamePrefix?: string(name='RuleNamePrefix', description='The prefix of the rule name.', example='test', position='Query'),
}

model ListRulesResponseBody = {
  code?: string(name='Code', description='The response code.

*   **Success**: The request was successful.
*   **Other codes**: The request failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='1000'),
    rules?: [ 
      {
        createdTimestamp?: long(name='CreatedTimestamp', description='The creation timestamp.', example='1607071602000'),
        description?: string(name='Description', description='The rule description.', example='demo'),
        detailMap?: map[string]any(name='DetailMap', description='The details of the event rule.'),
        eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='demo'),
        filterPattern?: string(name='FilterPattern', description='The event pattern, in JSON format. Valid values:

*   **stringEqual**: Up to five expressions in the map data structure can be specified in each field.
*   **stringExpression**: Up to five expressions in the map data structure can be specified in each field.', example='{\\"source\\":[\\"acs.oss\\"],\\"type\\":[\\"oss:BucketQueried:GetBucketStat\\"]}'),
        ruleARN?: string(name='RuleARN', description='The Alibaba Cloud Resource Name (ARN) of the rule.', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/default/rule/myRule3'),
        ruleName?: string(name='RuleName', description='The name of the event rule.', example='tf-testacc-rule'),
        status?: string(name='Status', description='The status of the event rule. Valid values:

*   **ENABLE** (default)
*   **DISABLE**', example='ENABLE'),
        targets?: [ 
          {
            endpoint?: string(name='Endpoint', description='The endpoint of the event target.', example='acs:mns:cn-hangzhou:123456789098****:queues/myqueue'),
            errorsTolerance?: string(name='ErrorsTolerance', description='The fault tolerance policy. Valid values:

*   **ALL**: Fault tolerance is allowed. If an error occurs in an event, event processing is not blocked. If the event fails to be sent after the maximum number of retries specified by the retry policy is reached, the event is delivered to the dead-letter queue or discarded based on your configurations.
*   **NONE**: Fault tolerance is prohibited. If an error occurs in an event and the event fails to be sent after the maximum number of retries specified by the retry policy is reached, event processing is blocked.', example='ALL'),
            id?: string(name='Id', description='The ID of the custom event target.', example='177'),
            pushSelector?: string(name='PushSelector', description='The transformer that is used to push events.', example='MATCHED_EVENT'),
            type?: string(name='Type', description='The type of the event target. For more information, see [Event target parameters.](https://www.alibabacloud.com/help/en/eventbridge/latest/event-target-parameters)', example='acs.mns.queue'),
          }
        ](name='Targets', description='The event targets.'),
      }
    ](name='Rules', description='The event rules.'),
    total?: int32(name='Total', description='The total number of entries.', example='6'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='Specified parameter Limit is not valid.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C7043799-F4DA-5290-9249-97C359876D97'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ListRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRulesResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query all rules of an event bus.
  * @param request  the request parameters of ListRules  ListRulesRequest
  * @return ListRulesResponse
 */
async function listRules(request: ListRulesRequest): ListRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRules', 'POST', '/', 'json', false, 'json', request);
}

model ListTargetsRequest {
  arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the event rule.', example='acs:fc:cn-hangzhou:118609547428****:services/fc-connector.a1/functions/event', position='Query'),
  eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='my-event-bus', position='Query'),
  limit?: int32(name='Limit', description='The maximum number of returned entries in a call.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='If you configure Limit and excess return values exist, this parameter is returned.', example='0', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the event rule.', example='tf-testacc-rule', position='Query'),
}

model ListTargetsResponseBody = {
  code?: string(name='Code', description='The returned response code. Valid values:

*   Success: The request is successful.
*   Other codes: The request failed. For a list of error codes, see Error codes.', example='Success'),
  data?: {
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='1'),
    targets?: [ 
      {
        concurrentConfig?: {
          concurrency?: long(name='Concurrency', description='The maximum number of concurrent events allowed in the event target.', example='10'),
        }(name='ConcurrentConfig', description='The concurrency configuration.'),
        endpoint?: string(name='Endpoint', description='The endpoint of the event target.', example='acs:fc:cn-hangzhou:123456789098****:services/guide.LATEST/functions/HelloFC'),
        errorsTolerance?: string(name='ErrorsTolerance', description='The fault tolerance policy. Valid values: ALL and NONE. 

- **ALL**: Fault tolerance is allowed. If an error occurs in an event, event processing is not blocked. If the event fails to be sent after the maximum number of retries specified by the retry policy is reached, the event is delivered to the dead-letter queue or discarded based on your configurations. 
- **NONE**: Fault tolerance is not allowed. If an error occurs in an event and the event fails to be sent after the maximum number of retries specified by the retry policy is reached, event processing is blocked.', example='ALL'),
        eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='sls-beijing-one1-tf'),
        id?: string(name='Id', description='The ID of the event target.', example='1453'),
        paramList?: [ 
          {
            form?: string(name='Form', description='The format that is used by the event target parameter.', example='TEMPLATE'),
            resourceKey?: string(name='ResourceKey', description='The resource parameter of the event target.', example='body'),
            template?: string(name='Template', description='The template that is used by the event target parameter.', example='The value of ${key} is ${value}!'),
            value?: string(name='Value', description='The value of the event target parameter.', example='{\\"key\\"=\\"value\\"}'),
          }
        ](name='ParamList', description='The parameters that are configured for the event target.'),
        ruleName?: string(name='RuleName', description='The name of the event rule.', example='rule-uKAK2'),
        type?: string(name='Type', description='The type of the event target. For more information, see [Event target parameters](https://help.aliyun.com/document_detail/183698.html).', example='acs.fc.function'),
      }
    ](name='Targets', description='The event targets.'),
    total?: int32(name='Total', description='The total number of entries.', example='18'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='EventRuleNotExisted'),
  requestId?: string(name='RequestId', description='The request ID.', example='5DAF96FB-A4B6-548C-B999-0BFDCB2261B9'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true
*   false', example='true'),
}

model ListTargetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTargetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTargets  ListTargetsRequest
  * @return ListTargetsResponse
 */
async function listTargets(request: ListTargetsRequest): ListTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTargets', 'POST', '/', 'json', false, 'json', request);
}

model ListUserDefinedEventSourcesRequest {
  eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='testBus', position='Query'),
  limit?: int32(name='Limit', description='The maximum number of entries to be returned in a call. You can use this parameter and NextToken to implement paging. Note: Up to 100 entries can be returned in a call.', example='50', position='Query'),
  namePrefix?: string(name='NamePrefix', description='The name of the event source.', example='testName', position='Query'),
  nextToken?: string(name='NextToken', description='If you configure Limit and excess return values exist, this parameter is returned.', example='100', position='Query'),
}

model ListUserDefinedEventSourcesResponseBody = {
  code?: string(name='Code', description='The returned response code. Valid values:

*   Success: The request is successful.
*   Other codes: The request failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    eventSourceList?: [ 
      {
        arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the queried event source.', example='acs:eventbridge:cn-hangzhou:164901546557****:eventbus/my-event-bus/eventsource/myRocketMQ.source'),
        ctime?: float(name='Ctime', description='The timestamp that indicates when the event source was created.', example='1607071602000'),
        eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='test-custom-bus'),
        externalSourceType?: string(name='ExternalSourceType', description='The type of the event source.', example='RabbitMQ'),
        name?: string(name='Name', description='The name of the queried event source.', example='rocketmq.source'),
        sourceHttpEventParameters?: {
          ip?: [ string ](name='Ip', description='The CIDR block that is used for security settings. This parameter is required only if SecurityConfig is set to ip. You can enter a CIDR block or an IP address.'),
          method?: [ string ](name='Method', description='The HTTP request method that is supported by the generated webhook URL. You can select multiple values. Valid values:

*   GET
*   POST
*   PUT
*   PATCH
*   DELETE
*   HEAD
*   OPTIONS
*   TRACE
*   CONNECT'),
          publicWebHookUrl?: [ string ](name='PublicWebHookUrl', description='The Internet request URL.'),
          referer?: [ string ](name='Referer', description='The security domain name. This parameter is required only if SecurityConfig is set to referer. You can enter a domain name.'),
          securityConfig?: string(name='SecurityConfig', description='The type of security settings. Valid values:

*   none: No configuration is required.
*   ip: CIDR block.
*   referer: security domain name.', example='none'),
          type?: string(name='Type', description='The protocol type that is supported by the generated webhook URL. Valid values:

*   HTTP
*   HTTPS
*   HTTP\\&HTTPS', example='HTTPS'),
          vpcWebHookUrl?: [ string ](name='VpcWebHookUrl', description='The internal request URL.'),
        }(name='SourceHttpEventParameters', description='The parameters that are returned if HTTP events are specified as the event source.'),
        sourceKafkaParameters?: {
          consumerGroup?: string(name='ConsumerGroup', description='The ID of the consumer group that subscribes to the topic on the Message Queue for Apache Kafka instance.', example='test-gid'),
          instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache Kafka instance.', example='i-2ze6kiwzkebf04s5h8ds'),
          maximumTasks?: int32(name='MaximumTasks', description='The maximum number of consumers.', example='2'),
          network?: string(name='Network', description='The network type. Valid values: Default and PublicNetwork. Default value: Default. The value PublicNetwork indicates a self-managed network.', example='Default'),
          offsetReset?: string(name='OffsetReset', description='The consumer offset.', example='earliest'),
          regionId?: string(name='RegionId', description='The ID of the region where the Message Queue for Apache Kafka instance resides.', example='cn-hangzhou'),
          securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the Message Queue for Apache Kafka instance belongs.', example='sg-f8zatts5g97x0j***'),
          topic?: string(name='Topic', description='The topic name.', example='topic_api_1674441611897'),
          vSwitchIds?: string(name='VSwitchIds', description='The ID of the vSwitch with which the Message Queue for Apache Kafka instance is associated.', example='vsw-bp1hcrxq3mkcik***e'),
          vpcId?: string(name='VpcId', description='The ID of the VPC in which the Message Queue for Apache Kafka instance is deployed.', example='vpc-bp1kz3ohhzgrau2***'),
        }(name='SourceKafkaParameters', description='The parameters that are returned if Message Queue for Apache Kafka is specified as the event source.'),
        sourceMNSParameters?: {
          isBase64Decode?: boolean(name='IsBase64Decode', description='Indicates whether Base64 decoding is enabled. By default, Base64 decoding is enabled.', example='true'),
          queueName?: string(name='QueueName', description='The name of the SMQ queue.', example='queue.openapi-sign-callback'),
          regionId?: string(name='RegionId', description='The ID of the region where the SMQ queue resides.', example='cn-hangzhou'),
        }(name='SourceMNSParameters', description='The parameters that are returned if Simple Message Queue (formerly MNS) (SMQ) is specified as the event source.'),
        sourceRabbitMQParameters?: {
          instanceId?: string(name='InstanceId', description='The ID of the Message Queue for RabbitMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='bastionhost-cn-0ju2x28fj07'),
          queueName?: string(name='QueueName', description='The name of the queue on the Message Queue for RabbitMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='file-upload-queue'),
          regionId?: string(name='RegionId', description='The ID of the region where the Message Queue for RabbitMQ instance resides.', example='cn-hangzhou'),
          virtualHostName?: string(name='VirtualHostName', description='The name of the vhost of the Message Queue for RabbitMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='eb-connect'),
        }(name='SourceRabbitMQParameters', description='The parameters that are returned if Message Queue for RabbitMQ is specified as the event source.'),
        sourceRocketMQParameters?: {
          authType?: string(name='AuthType', description='The authentication type. This parameter can be set to ACL or left empty.', example='ACL'),
          groupId?: string(name='GroupId', description='The ID of the consumer group on the Message Queue for Apache RocketMQ instance.', example='GID-test'),
          instanceEndpoint?: string(name='InstanceEndpoint', description='The endpoint that is used to access the Message Queue for Apache RocketMQ instance.', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
          instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache RocketMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='bastionhost-cn-7mz293s9d1p'),
          instanceNetwork?: string(name='InstanceNetwork', description='The type of network over which the Message Queue for Apache RocketMQ instance is accessed.', example='PublicNetwork'),
          instancePassword?: string(name='InstancePassword', description='The password that is used to access the Message Queue for Apache RocketMQ instance.', example='***'),
          instanceSecurityGroupId?: string(name='InstanceSecurityGroupId', description='The ID of the security group to which the Message Queue for Apache RocketMQ instance belongs.', example='eb-167adad548***'),
          instanceType?: string(name='InstanceType', description='The instance type. Valid values: CLOUD_4, CLOUD_5, and SELF_BUILT. The value CLOUD_4 indicates that the instance is a Message Queue for Apache RocketMQ 4.0 instance. The value CLOUD_5 indicates that the instance is a Message Queue for Apache RocketMQ 5.0 instance. The value SELF_BUILT indicates that the instance is a self-managed RocketMQ instance.', example='CLOUD_5'),
          instanceUsername?: string(name='InstanceUsername', description='The username that is used to access the Message Queue for Apache RocketMQ instance.', example='root'),
          instanceVSwitchIds?: string(name='InstanceVSwitchIds', description='The ID of the vSwitch with which the Message Queue for Apache RocketMQ instance is associated.', example='vsw-bp1iu***'),
          instanceVpcId?: string(name='InstanceVpcId', description='The ID of the virtual private cloud (VPC) in which the Message Queue for Apache RocketMQ instance is deployed.', example='vpc-***'),
          offset?: string(name='Offset', description='The offset from which messages are consumed. Valid values:

*   CONSUME_FROM_LAST_OFFSET: Messages are consumed from the latest offset.
*   CONSUME_FROM_FIRST_OFFSET: Messages are consumed from the earliest offset.
*   CONSUME_FROM_TIMESTAMP: Messages are consumed from the offset at the specified point in time.

Default value: CONSUME_FROM_LAST_OFFSET.', example='CONSUMEFROMLASTOFFSET'),
          regionId?: string(name='RegionId', description='The ID of the region where the Message Queue for Apache RocketMQ instance resides.', example='cn-shenzhen'),
          tag?: string(name='Tag', description='The tag that is used to filter messages.', example='dataact'),
          timestamp?: float(name='Timestamp', description='The timestamp that indicates the time from which messages are consumed. This parameter is valid only if Offset is set to CONSUME_FROM_TIMESTAMP.', example='1664591760'),
          topic?: string(name='Topic', description='The name of the topic on the Message Queue for Apache RocketMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='migration_instance'),
        }(name='SourceRocketMQParameters', description='The parameters that are returned if Message Queue for Apache RocketMQ is specified as the event source.'),
        sourceSLSParameters?: {
          consumePosition?: string(name='ConsumePosition', description='The consumer offset. The value begin indicates the earliest offset, and the value end indicates the latest offset. You can also specify a time in seconds to start consumption.', example='end'),
          logStore?: string(name='LogStore', description='The Simple Log Service Logstore.', example='cloudfirewall-logstore'),
          project?: string(name='Project', description='The Simple Log Service project.', example='VideoTestProject'),
          roleName?: string(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the Resource Access Management (RAM) console. For information about the permission policy of this role, see Create a custom event source of the Log Service type.', example='testRole'),
        }(name='SourceSLSParameters', description='The parameters that are returned if Simple Log Service is specified as the event source.'),
        sourceScheduledEventParameters?: {
          schedule?: string(name='Schedule', description='The cron expression.', example='0 1 * * * *'),
          timeZone?: string(name='TimeZone', description='The time zone in which the cron expression is executed.', example='GMT+0:00'),
          userData?: string(name='UserData', description='The JSON string.', example='{"a": "b"}'),
        }(name='SourceScheduledEventParameters', description='The parameters that are returned if scheduled events are specified as the event source.'),
        status?: string(name='Status', description='The status of the queried event source. The returned value Activated indicates that the event source is activated.', example='Activated'),
        type?: string(name='Type', description='The type of the queried event source. The returned value UserDefined indicates that the event source is a custom event source.', example='UserDefined'),
      }
    ](name='EventSourceList', description='The event sources.'),
    nextToken?: string(name='NextToken', description='If excess return values exist when you configure Limit, this parameter is returned.', example='100'),
    total?: int32(name='Total', description='The total number of entries returned.', example='18'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned error message.', example='InvalidArgument'),
  requestId?: string(name='RequestId', description='The request ID.', example='5169654A-7059-57E3-BFD9-33C7E012EA1B'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. The value true indicates that the operation is successful.', example='true'),
}

model ListUserDefinedEventSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserDefinedEventSourcesResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query custom event sources.
  * @param request  the request parameters of ListUserDefinedEventSources  ListUserDefinedEventSourcesRequest
  * @return ListUserDefinedEventSourcesResponse
 */
async function listUserDefinedEventSources(request: ListUserDefinedEventSourcesRequest): ListUserDefinedEventSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserDefinedEventSources', 'POST', '/', 'json', false, 'json', request);
}

model PauseEventStreamingRequest {
  eventStreamingName: string(name='EventStreamingName', description='The name of the event stream that you want to stop.

This parameter is required.', example='rocketmq-sync', position='Body'),
}

model PauseEventStreamingResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='72ce027c-546a-4231-9cf6-ec58766027f9'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
}

model PauseEventStreamingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PauseEventStreamingResponseBody(name='body'),
}

/**
  * @description You can call this API operation to stop an event stream that is running.
  * @param request  the request parameters of PauseEventStreaming  PauseEventStreamingRequest
  * @return PauseEventStreamingResponse
 */
async function pauseEventStreaming(request: PauseEventStreamingRequest): PauseEventStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseEventStreaming', 'POST', '/', 'json', true, 'form', request);
}

model PutTargetsRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='eventTest', position='Query'),
  ruleName: string(name='RuleName', description='The name of the event rule.

This parameter is required.', example='ssr-send-to-vendor-test01', position='Query'),
  targets: [ 
    {
      concurrentConfig?: {
        concurrency?: long(name='Concurrency', description='The concurrency.', example='34'),
      }(name='ConcurrentConfig', description='The concurrency configuration.'),
      deadLetterQueue?: {
        arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the dead-letter queue. Events that are not processed or whose maximum retries are exceeded are written to the dead-letter queue.', example='acs:mns:cn-hangzhou:123456789098****:/queues/deadletterqueue or acs:mq:cn-hangzhou:123456789098****:/instances/MQ_INST_123456789098****_BX8QbBPL/topic/deadlettertopic or acs:alikafka:cn-hangzhou:123456789098****:instance/alikafka_post-cn-123456/topic/deadlettertopic or acs:eventbridge:cn-hangzhou:123456789098****:eventbus/deadletterbus'),
        network?: string(name='Network'),
        securityGroupId?: string(name='SecurityGroupId'),
        vSwitchIds?: string(name='VSwitchIds'),
        vpcId?: string(name='VpcId'),
      }(name='DeadLetterQueue', description='The dead-letter queue. Events that are not processed or whose maximum retries are exceeded are written to the dead-letter queue. You can use queues in ApsaraMQ for RocketMQ, Simple Message Queue (SMQ, formerly MNS), and ApsaraMQ for Kafka as dead-letter queues. You can also use event buses in EventBridge as dead-letter queues.'),
      endpoint?: string(name='Endpoint', description='The endpoint of the event target.', example='acs:fc:cn-hangzhou:123456789098****:services/guide.LATEST/functions/HelloFC'),
      errorsTolerance?: string(name='ErrorsTolerance', description='The fault tolerance policy. Valid values:

*   **ALL**: allows fault tolerance. If an error occurs, event processing is not blocked. If the message exceeds the number of retries specified by the retry policy, the message is delivered to a dead-letter queue or discarded based on your configurations.
*   **NONE**: prohibits fault tolerance. If an error occurs and the message exceeds the number of retries specified by the retry policy, event processing is blocked.', example='ALL'),
      id: string(name='Id', description='The ID of the event target.

This parameter is required.', example='Mlm123456JHd2RsRoKw'),
      paramList?: [ 
        {
          form?: string(name='Form', description='The format of input parameters for the event target. For more information, see [Event target parameters](https://help.aliyun.com/document_detail/185887.html).', example='TEMPLATE'),
          resourceKey?: string(name='ResourceKey', description='The resource key of the event target. For more information, see [Event target parameters](https://help.aliyun.com/document_detail/185887.html).', example='body'),
          template?: string(name='Template', description='The structure of the template for the event target.', example='The value of ${key} is ${value}!'),
          value?: string(name='Value', description='The event target.', example='{\\"key\\"=\\"value\\"}'),
        }
      ](name='ParamList', description='The parameters that are configured for the event target.'),
      pushRetryStrategy?: string(name='PushRetryStrategy', description='The retry policy to be used to push events. Valid values:

*   **BACKOFF_RETRY**: backoff retry. A failed event can be retried up to three times. The interval between two consecutive retries is a random value from 10 seconds to 20 seconds.
*   **EXPONENTIAL_DECAY_RETRY**: exponential decay retry. A failed event can be retried up to 176 times. The interval between two consecutive retries exponentially increases to a maximum of 512 seconds. The total retry time is 1 day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, and 512 seconds. The interval of 512 seconds is used for 167 retries.', example='BACKOFFRETRY'),
      type: string(name='Type', description='The type of the event target. For more information, see [Event target parameters](https://help.aliyun.com/document_detail/185887.html).

This parameter is required.', example='acs.fc.function'),
    }
  ](name='Targets', description='The event targets to be created or updated. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).

This parameter is required.', shrink='json', position='Query'),
}

model PutTargetsResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   Success: The call succeeded.
*   Other codes: The call failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    errorEntries?: [ 
      {
        entryId?: string(name='EntryId', description='The ID of the failed event target.', example='Mlm123456JHd2RsRoKw'),
        errorCode?: string(name='ErrorCode', description='The error code returned.', example='EventRuleTargetIdDuplicate'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The id of event target is duplicate!'),
      }
    ](name='ErrorEntries', description='The ID of the failed event target.'),
    errorEntriesCount?: int32(name='ErrorEntriesCount', description='The number of failed event targets. Valid values:

*   0: All event targets succeeded.
*   An integer other than 0: indicates the number of failed event targets.', example='0'),
  }(name='Data', description='The returned result.'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='The event rule not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='6FB52207-7621-5292-BDF2-A17E2E984160'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request failed.', example='true'),
}

model PutTargetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutTargetsResponseBody(name='body'),
}

/**
  * @description You can call this API operation to create or update event targets under a rule.
  * @param request  the request parameters of PutTargets  PutTargetsRequest
  * @return PutTargetsResponse
 */
async function putTargets(request: PutTargetsRequest): PutTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutTargets', 'POST', '/', 'json', false, 'json', request);
}

model QueryEventRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='demo', position='Query'),
  eventId: string(name='EventId', description='The event ID.

This parameter is required.', example='1935debf-ddac-49dc-a090-d4f2857a046d', position='Query'),
  eventSource?: string(name='EventSource', description='The name of the event source.

*   This parameter is required if you query the system event bus.', example='testEventSourceName', position='Query'),
}

model QueryEventResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

200: The request was successful.

Other values indicate that the request failed. For information about error codes, see Error codes.', example='200'),
  data?: map[string]any(name='Data', description='The content of the event.'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='EventBusNotExist'),
  requestId?: string(name='RequestId', description='The request ID.', example='580A938B-6107-586C-8EC7-F22EEBEDA9E6'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
}

model QueryEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryEventResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query the content of an event.
  * @param request  the request parameters of QueryEvent  QueryEventRequest
  * @return QueryEventResponse
 */
async function queryEvent(request: QueryEventRequest): QueryEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEvent', 'POST', '/', 'json', false, 'json', request);
}

model QueryEventTracesRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='MyEventBus', position='Query'),
  eventId: string(name='EventId', description='The event ID.

This parameter is required.', example='1935debf-ddac-49dc-a090-d4f2857a046d', position='Query'),
}

model QueryEventTracesResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

200: The request was successful.

Other codes: The request failed. For information about error codes, see Error codes.', example='200'),
  data?: [ 
    {
      action?: string(name='Action', description='The type of the event trace. Valid values: PutEvent, FilterEvent, and PushEvent. The value PutEvent indicates that the event was delivered. The value FilterEvent indicates that the event was filtered. The value PushEvent indicates that the event was pushed.', example='PutEvent'),
      actionTime?: long(name='ActionTime', description='The execution time of the event trace.', example='1659495343896'),
      endpoint?: string(name='Endpoint', description='The endpoint of the event target. This parameter is returned only if Action is set to PushEvent.', example='acs:mns:cn-zhangjiakou:123456789098****:queues/testQueue'),
      eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='demo'),
      eventId?: string(name='EventId', description='The event ID.', example='a5747e4f-2af2-40b6-b262-d0140e995bf7'),
      eventSource?: string(name='EventSource', description='The name of the event source.', example='cert-api'),
      notifyLatency?: string(name='NotifyLatency', description='The delay period for which the event was delivered to the event target. This parameter is returned only if Action is set to PushEvent.', example='80'),
      notifyStatus?: string(name='NotifyStatus', description='The delivery status.', example='[200]Ok'),
      notifyTime?: long(name='NotifyTime', description='The time when the event was delivered to the event target. This parameter is returned only if Action is set to PushEvent.', example='1659495343896'),
      receivedTime?: long(name='ReceivedTime', description='The time when the event was delivered to the event bus. This parameter is returned only if Action is set to PutEvent.', example='1659495343896'),
      ruleMatchingTime?: string(name='RuleMatchingTime', description='The time when the event rule was matched. This parameter is returned only if Action is set to FilterEvent.', example='1659495343896'),
      ruleName?: string(name='RuleName', description='The name of the event rule.', example='ramrolechange-mns'),
    }
  ](name='Data', description='The name of the event source.'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='EventBusNotExist'),
  requestId?: string(name='RequestId', description='The request ID.', example='BB934571-1F5A-5E17-91DD-E2BC3E1BFBFF'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
}

model QueryEventTracesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryEventTracesResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query event traces.
  * @param request  the request parameters of QueryEventTraces  QueryEventTracesRequest
  * @return QueryEventTracesResponse
 */
async function queryEventTraces(request: QueryEventTracesRequest): QueryEventTracesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEventTraces', 'POST', '/', 'json', false, 'json', request);
}

model QueryTracedEventByEventIdRequest {
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='demo', position='Query'),
  eventId: string(name='EventId', description='The event ID.

This parameter is required.', example='1935debf-ddac-49dc-a090-d4f2857a046d', position='Query'),
  eventSource?: string(name='EventSource', description='The name of the event source.', example='mse', position='Query'),
}

model QueryTracedEventByEventIdResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

Success: The request was successful.

Other codes: The request failed. For information about error codes, see Error codes.', example='200'),
  data?: [ 
    {
      events?: [ 
        {
          eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='default'),
          eventId?: string(name='EventId', description='The event ID.', example='37C-1P6Yn6EM7TcH37Vod8w7rbSeimJ'),
          eventReceivedTime?: long(name='EventReceivedTime', description='The time when the event was delivered to the event bus.', example='1661773573100'),
          eventSource?: string(name='EventSource', description='The name of the event source.', example='cert-api'),
          eventType?: string(name='EventType', description='The event type.', example='eventbridge:Events:HTTPEvent'),
        }
      ](name='Events', description='The events.'),
      nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='1000'),
      total?: int32(name='Total', description='The total number of entries returned.', example='18'),
    }
  ](name='Data', description='The total number of entries returned.'),
  message?: string(name='Message', description='The returned error message.', example='EventBusNotExist'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5D7B9F4-BF96-51A9-90B1-928955FABB5B'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. If the operation was successful, the value true is returned.', example='true'),
}

model QueryTracedEventByEventIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTracedEventByEventIdResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query event traces by event ID.
  * @param request  the request parameters of QueryTracedEventByEventId  QueryTracedEventByEventIdRequest
  * @return QueryTracedEventByEventIdResponse
 */
async function queryTracedEventByEventId(request: QueryTracedEventByEventIdRequest): QueryTracedEventByEventIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTracedEventByEventId', 'POST', '/', 'json', false, 'json', request);
}

model QueryTracedEventsRequest {
  endTime: long(name='EndTime', description='The end of the time range when event traces are queried. Unit: milliseconds.

This parameter is required.', example='1661773509000', position='Query'),
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='MyEventBus', position='Query'),
  eventSource?: string(name='EventSource', description='The name of the event source.', example='mse', position='Query'),
  eventType?: string(name='EventType', description='The event type.', example='eventbridge:Events:HTTPEvent', position='Query'),
  limit?: int32(name='Limit', description='The maximum number of entries to return in a request. You can use this parameter and NextToken to implement paging.

>  A maximum of 100 entries can be returned in a request.', example='50', position='Query'),
  matchedRule?: string(name='MatchedRule', description='The name of the event rule that is matched.', example='test-mnsrule', position='Query'),
  nextToken?: string(name='NextToken', description='If you configure Limit and excess return values exist, this parameter is returned.', example='1000', position='Query'),
  startTime: long(name='StartTime', description='The beginning of the time range to query event traces. Unit: milliseconds.

This parameter is required.', example='1661773509000', position='Query'),
}

model QueryTracedEventsResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   Success: The request was successful.
*   Other codes: The request failed. For information about error codes, see Error codes.', example='200'),
  data?: {
    events?: [ 
      {
        eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='test-custom-bus'),
        eventId?: string(name='EventId', description='The event ID.', example='07E-1OCckaVzNB92BIFFh4xgydOF1wd'),
        eventReceivedTime?: long(name='EventReceivedTime', description='The time when the event was delivered to the event bus.', example='1661773573100'),
        eventSource?: string(name='EventSource', description='The name of the event source.', example='acs.resourcemanager'),
        eventType?: string(name='EventType', description='The event type.', example='eventbridge:Events:HTTPEvent'),
      }
    ](name='Events', description='The events.'),
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='1000'),
    total?: int32(name='Total', description='The total number of entries.', example='6'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned error message.', example='EventBusNotExist'),
  requestId?: string(name='RequestId', description='The request ID.', example='d9e4628b-8b34-4f33-82be-5aac50aac0ba'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. If the operation was successful, the value true is returned.', example='true'),
}

model QueryTracedEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTracedEventsResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query event traces by time range.
  * @param request  the request parameters of QueryTracedEvents  QueryTracedEventsRequest
  * @return QueryTracedEventsResponse
 */
async function queryTracedEvents(request: QueryTracedEventsRequest): QueryTracedEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTracedEvents', 'POST', '/', 'json', false, 'json', request);
}

model StartEventStreamingRequest {
  eventStreamingName: string(name='EventStreamingName', description='The name of the event stream that you want to enable.

This parameter is required.', example='rocketmq-sync', position='Body'),
}

model StartEventStreamingResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='The event streaming [xxxx] not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='8CEAD24D-328D-5539-9D30-FD2D33204FBB'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. The value true indicates that the operation is successful.', example='true'),
}

model StartEventStreamingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartEventStreamingResponseBody(name='body'),
}

/**
  * @description You can call this API operation to enable a created or deactivated event stream.
  * @param request  the request parameters of StartEventStreaming  StartEventStreamingRequest
  * @return StartEventStreamingResponse
 */
async function startEventStreaming(request: StartEventStreamingRequest): StartEventStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartEventStreaming', 'POST', '/', 'json', true, 'form', request);
}

model TestEventPatternRequest {
  event: string(name='Event', description='The event.

This parameter is required.', example='{
    "datacontenttype": "application/json;charset=utf-8",
    "aliyunaccountid": "*****",
    "aliyunpublishtime": "2023-04-****:54:57.939Z",
    "data": {
        "resourceEventType": "****",
        "resourceCreateTime": "****",
        "resourceId": "sls-code-***-debug",
        "captureTime": "***"
    },
    "aliyunoriginalaccountid": "****",
    "specversion": "1.0",
    "aliyuneventbusname": "****",
    "id": "295e6bd2-bb72-4f70-****-204a0680ee41",
    "source": "acs.sls",
    "time": "2023-04-***:37:56Z",
    "aliyunregionid": "cn-***",
    "type": "sls:Config:****"
}', position='Body'),
  eventPattern: string(name='EventPattern', description='The event pattern.

This parameter is required.', example='{"key1": "value1"}', position='Body'),
}

model TestEventPatternResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    result?: boolean(name='Result', description='The value true indicates that the event pattern matches the provided JSON format. The value false indicates that the event pattern does not match the provided JSON format.', example='true'),
  }(name='Data', description='The returned result.'),
  message?: string(name='Message', description='The error message returned if the request failed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='96D7C0AB-DCE5-5E82-96B8-4725E1706BB1'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. If the operation is successful, the value true is returned.', example='true'),
}

model TestEventPatternResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TestEventPatternResponseBody(name='body'),
}

/**
  * @description You can call this API operation to check whether the event pattern matches the provided JSON format.
  * @param request  the request parameters of TestEventPattern  TestEventPatternRequest
  * @return TestEventPatternResponse
 */
async function testEventPattern(request: TestEventPatternRequest): TestEventPatternResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestEventPattern', 'POST', '/', 'json', true, 'form', request);
}

model TestEventSourceConfigRequest {
  sourceMySQLParameters?: {
    databaseName?: string(name='DatabaseName', description='The database name.', example='database1'),
    hostName?: string(name='HostName', description='The endpoint of the database.', example='rm-bp1vxxx.mysql.rds.aliyuncs.com'),
    networkType?: string(name='NetworkType', description='The network type.

Valid values:

*   PrivateNetwork
*   PublicNetwork', example='PrivateNetwork'),
    password?: string(name='Password', description='The password that is used for authentication.', example='1234xxx'),
    port?: int32(name='Port', description='The port that is used to connect to the database.', example='80'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-xxx'),
    tableNames?: string(name='TableNames', description='The table name. The name must be prefixed with the database name. ${DatabaseName}.${TableName}', example='database1.table1'),
    user?: string(name='User', description='The username that is used to log on to the database.', example='user***'),
    vSwitchIds?: string(name='VSwitchIds', description='The vSwitch ID.', example='vsw-bp1gb7xxx'),
    vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-xxx'),
  }(name='SourceMySQLParameters', description='The parameters that are configured if you specify MySQL as the event source.', shrink='json', position='Body'),
}

model TestEventSourceConfigResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   Success: The request was successful.
*   Other codes indicate that the request failed. For information about error codes, see Error codes.', example='Success'),
  data?: [ 
    {
      checkItem?: string(name='CheckItem', description='The name of the check item.', example='CHECK_CONNECTION'),
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='Connection established successfully.'),
      isSucceed?: string(name='IsSucceed', description='Indicates whether the check item is executed.', example='true'),
    }
  ](name='Data', description='The update result.'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='FF942675-F937-549C-A942-EB94FFE28DD3'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. If the operation was successful, the value true is returned.', example='true'),
}

model TestEventSourceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TestEventSourceConfigResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query all custom event sources.
  * @param request  the request parameters of TestEventSourceConfig  TestEventSourceConfigRequest
  * @return TestEventSourceConfigResponse
 */
async function testEventSourceConfig(request: TestEventSourceConfigRequest): TestEventSourceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestEventSourceConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateApiDestinationRequest {
  apiDestinationName: string(name='ApiDestinationName', description='The name of the API destination. The name must be 2 to 127 characters in length.

This parameter is required.', example='api-destination-name', minLength=2, maxLength=127, position='Query'),
  connectionName?: string(name='ConnectionName', description='The name of the connection. The name must be 2 to 127 characters in length.

Note: Before you configure this parameter, you must call the CreateConnection operation to create a connection. Then, set this parameter to the name of the connection that you created.', example='connection-name', minLength=2, maxLength=127, position='Query'),
  description?: string(name='Description', description='The description of the API destination. The description can be up to 255 characters in length.', example='demo', maxLength=255, position='Query'),
  httpApiParameters?: {
    endpoint?: string(name='Endpoint', description='The endpoint of the API destination. The endpoint can be up to 127 characters in length.', example='http://127.0.0.1:8001/api', maxLength=127),
    method?: string(name='Method', description='The HTTP request method. Valid values:

- GET
- POST
- HEAD
- DELETE
- PUT
- PATCH', example='POST'),
  }(name='HttpApiParameters', description='The parameters that are configured for the API destination.', shrink='json', position='Query'),
}

model UpdateApiDestinationResponseBody = {
  apiDestinationName?: string(name='ApiDestinationName', description='api-destination-name', example='api-destination-name'),
  code?: string(name='Code', description='The response code. If the request is successful, Success is returned.', example='Success'),
  message?: string(name='Message', description='The returned message. If the request is successful, success is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='382E6272-8E9C-5681-AC96-A8AF0BFAC1A5'),
}

model UpdateApiDestinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApiDestinationResponseBody(name='body'),
}

/**
  * @description You can call this API operation to update an API destination.
  * @param request  the request parameters of UpdateApiDestination  UpdateApiDestinationRequest
  * @return UpdateApiDestinationResponse
 */
async function updateApiDestination(request: UpdateApiDestinationRequest): UpdateApiDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApiDestination', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConnectionRequest {
  authParameters?: {
    apiKeyAuthParameters?: {
      apiKeyName?: string(name='ApiKeyName', description='The key of the API key.', example='name', maxLength=127),
      apiKeyValue?: string(name='ApiKeyValue', description='The value of the API key.', example='demo', maxLength=127),
    }(name='ApiKeyAuthParameters', description='The parameters configured for API key authentication.'),
    authorizationType?: string(name='AuthorizationType', description='The authentication type. Valid values:

*   BASIC: basic authentication. Basic authentication is a simple authentication scheme built into the HTTP protocol. When you use the HTTP protocol for communications, the authentication method that the HTTP server uses to authenticate user identities on the client is defined in the protocol. The request header is in the Authorization: Basic Base64-encoded string (`Username:Password`) format. If you use this authentication method, you must configure Username and Password.
*   API_KEY_AUTH: API key authentication. The request header is in the Token: Token value format. If you use this authentication method, you must configure ApiKeyName and ApiKeyValue.
*   OAUTH_AUTH: OAuth authentication. OAuth2.0 is an authentication mechanism. In normal cases, a system that does not use OAuth2.0 can access the resources of the server from the client. To ensure access security, access tokens are used to authenticate users in OAuth 2.0. The client must use an access token to access protected resources. This way, OAuth 2.0 protects resources from being accessed from malicious clients and improves system security. If you use this authentication method, you must configure AuthorizationEndpoint, OAuthHttpParameters, and HttpMethod.', example='BASIC_AUTH'),
    basicAuthParameters?: {
      password?: string(name='Password', description='The password for basic authentication.', example='admin', maxLength=127),
      username?: string(name='Username', description='The username for basic authentication.', example='admin', maxLength=127),
    }(name='BasicAuthParameters', description='The parameters that are configured for basic authentication.'),
    oAuthParameters?: {
      authorizationEndpoint?: string(name='AuthorizationEndpoint', description='The endpoint that is used to obtain the OAuth token. The endpoint can be up to 127 characters in length.', example='http://localhost:8080/oauth/token', maxLength=127),
      clientParameters?: {
        clientID?: string(name='ClientID', description='The client ID.', example='ClientID', maxLength=127),
        clientSecret?: string(name='ClientSecret', description='The AccessKey secret of the client.', example='ClientSecret', maxLength=127),
      }(name='ClientParameters', description='The parameters that are configured for the client.'),
      httpMethod?: string(name='HttpMethod', description='The HTTP request method. Valid values:

*   GET
*   POST
*   HEAD
*   DELETE
*   PUT
*   PATCH', example='POST'),
      oAuthHttpParameters?: {
        bodyParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', description='Specifies whether to enable authentication.', example='false'),
            key?: string(name='Key', description='The key of the request body.', example='name'),
            value?: string(name='Value', description='The value of the request body.', example='demo'),
          }
        ](name='BodyParameters', description='The parameters that are configured for the request body.'),
        headerParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', description='Specifies whether to enable authentication.', example='false'),
            key?: string(name='Key', description='The key of the request header.', example='name'),
            value?: string(name='Value', description='The value of the request header.', example='demo'),
          }
        ](name='HeaderParameters', description='The parameters that are configured for the request header.'),
        queryStringParameters?: [ 
          {
            isValueSecret?: string(name='IsValueSecret', description='Specifies whether to enable authentication.', example='false'),
            key?: string(name='Key', description='The key of the request path.', example='name'),
            value?: string(name='Value', description='The value of the request path.', example='demo'),
          }
        ](name='QueryStringParameters', description='The parameters that are configured for the request path.'),
      }(name='OAuthHttpParameters', description='The request parameters of OAuth authentication.'),
    }(name='OAuthParameters', description='The parameters that are configured for OAuth authentication.'),
  }(name='AuthParameters', description='The parameters that are configured for authentication.', shrink='json', position='Query'),
  connectionName: string(name='ConnectionName', description='The name of the connection that you want to update. The name must be 2 to 127 characters in length.

This parameter is required.', example='connection-name', minLength=2, maxLength=127, position='Query'),
  description?: string(name='Description', description='The description of the connection. The description can be up to 255 characters in length.', example='The description of the connection.', maxLength=255, position='Query'),
  networkParameters: {
    networkType: string(name='NetworkType', description='*   PublicNetwork: the Internet.
*   PrivateNetwork: virtual private cloud (VPC).

>  If you set this parameter to PrivateNetwork, you must also configure VpcId, VswitchId, and SecurityGroupId.

This parameter is required.', example='PublicNetwork'),
    securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9rtyb'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='eb-test/vpc-bp1symadadwnwgmqud'),
    vswitcheId?: string(name='VswitcheId', description='The vSwitch ID.', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeqbt2c'),
  }(name='NetworkParameters', description='The parameters that are configured for the network.

This parameter is required.', shrink='json', position='Query'),
}

model UpdateConnectionResponseBody = {
  code?: string(name='Code', description='The response code. Valid value: 200, which indicates that the request was successful.', example='Success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='8346BE8F-40F3-533D-A0B8-1359C31BD5BA'),
}

model UpdateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConnectionResponseBody(name='body'),
}

/**
  * @description You can call this API operation to update a connection.
  * @param request  the request parameters of UpdateConnection  UpdateConnectionRequest
  * @return UpdateConnectionResponse
 */
async function updateConnection(request: UpdateConnectionRequest): UpdateConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConnection', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEventBusRequest {
  description?: string(name='Description', description='The description.', example='test', maxLength=255, position='Query'),
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='eventTest', minLength=2, maxLength=127, position='Query'),
}

model UpdateEventBusResponseBody = {
  code?: string(name='Code', description='The response code. Valid values:

*   Success: The request was successful.
*   Other codes: The request failed. For information about error codes, see Error codes.', example='Success'),
  message?: string(name='Message', description='The error message.', example='The event bus [xxxx] not existed!'),
  requestId?: string(name='RequestId', description='The request ID.', example='f2099962-1628-45f1-9782-2bf6daad823f'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. If the operation was successful, the value true is returned.', example='true'),
}

model UpdateEventBusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEventBusResponseBody(name='body'),
}

/**
  * @description You can call this operation to update an event bus.
  * @param request  the request parameters of UpdateEventBus  UpdateEventBusRequest
  * @return UpdateEventBusResponse
 */
async function updateEventBus(request: UpdateEventBusRequest): UpdateEventBusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEventBus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEventSourceRequest {
  description?: string(name='Description', description='The description of the event source.', position='Body'),
  eventBusName: string(name='EventBusName', description='The event bus with which the event source is associated.

This parameter is required.', example='my-event-bus', position='Body'),
  eventSourceName: string(name='EventSourceName', description='The name of the event source.

This parameter is required.', example='myrabbitmq.source', position='Body'),
  externalSourceConfig?: map[string]any(name='ExternalSourceConfig', description='The configurations of the external data source.', example='{\\"ConsumePosition\\":\\"end\\",\\"LogStore\\":\\"oss_log\\",\\"Project\\":\\"slsaudit-center-5795350335281001-cn-beijing\\",\\"RoleName\\":\\"sls-beijing-tf\\"}', shrink='json', position='Body'),
  externalSourceType?: string(name='ExternalSourceType', description='The type of the external data source.', example='SLS', position='Body'),
  linkedExternalSource?: boolean(name='LinkedExternalSource', description='Specifies whether to connect to an external data source.', example='true', position='Body'),
  sourceHttpEventParameters?: {
    ip?: [ string ](name='Ip', description='The CIDR block that is used for security settings. This parameter is required only if SecurityConfig is set to ip. You can enter a CIDR block or an IP address.'),
    method?: [ string ](name='Method', description='The HTTP request method supported by the generated webhook URL. You can select multiple values. Valid values:

*   GET
*   POST
*   PUT
*   PATCH
*   DELETE
*   HEAD
*   OPTIONS
*   TRACE
*   CONNECT'),
    referer?: [ string ](name='Referer', description='The security domain name. This parameter is required only if SecurityConfig is set to referer. You can enter a domain name.'),
    securityConfig?: string(name='SecurityConfig', description='The type of security settings. Valid values:

*   none: No configuration is required.
*   ip: CIDR block.
*   referer: security domain name.', example='none'),
    type?: string(name='Type', description='The protocol type that is supported by the generated webhook URL. Valid values:

*   HTTP
*   HTTPS
*   HTTP\\&HTTPS', example='HTTPS'),
  }(name='SourceHttpEventParameters', description='The parameters that are configured if the event source is HTTP events.', shrink='json', position='Body'),
  sourceKafkaParameters?: {
    consumerGroup?: string(name='ConsumerGroup', description='The ID of the consumer group that subscribes to the topic.', example='dsp_online_ml_request'),
    instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache Kafka instance.', example='cbwp-bp1o3m66wcjgbkssm3k5m'),
    maximumTasks?: int32(name='MaximumTasks', description='The maximum number of consumers.', example='1'),
    network?: string(name='Network', description='The network. Valid values: Default and PublicNetwork. Default value: Default. The value PublicNetwork indicates a self-managed network.', example='Default'),
    offsetReset?: string(name='OffsetReset', description='The consumer offset.', example='latest'),
    regionId?: string(name='RegionId', description='The ID of the region where the Message Queue for Apache Kafka instance resides.', example='cn-shanghai'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the Message Queue for Apache Kafka instance belongs. This parameter is required only if you set Network to PublicNetwork.', example='sg-5wz3mjgo9wpvdnwpwnhkjdjwn'),
    topic?: string(name='Topic', description='The name of the topic on the Message Queue for Apache Kafka instance.', example='billing_notify'),
    vSwitchIds?: string(name='VSwitchIds', description='The ID of the vSwitch with which the Message Queue for Apache Kafka instance is associated. This parameter is required only if you set Network to PublicNetwork.', example='vsw-bp1xyntcxiwplhqxjybuk'),
    vpcId?: string(name='VpcId', description='The ID of the VPC in which the Message Queue for Apache Kafka instance resides. This parameter is required only if you set Network to PublicNetwork.', example='vpc-2zefu4vfmx6siogujmo0b'),
  }(name='SourceKafkaParameters', description='The parameters that are configured if the event source is Message Queue for Apache Kafka.', shrink='json', position='Body'),
  sourceMNSParameters?: {
    isBase64Decode?: boolean(name='IsBase64Decode', description='Indicates whether Base64 decoding is enabled. By default, Base64 decoding is enabled.', example='true'),
    queueName?: string(name='QueueName', description='The name of the MNS queue.', example='queue_api_bind_1672194645178'),
    regionId?: string(name='RegionId', description='The region where the MNS queue resides.', example='cn-beijing'),
  }(name='SourceMNSParameters', description='The parameters that are configured if the event source is Message Service (MNS).', shrink='json', position='Body'),
  sourceRabbitMQParameters?: {
    instanceId?: string(name='InstanceId', description='The ID of the Message Queue for RabbitMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='bastionhost-cn-7mz2zkyff09'),
    queueName?: string(name='QueueName', description='The name of the queue on the Message Queue for RabbitMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='eb-connect'),
    regionId?: string(name='RegionId', description='The ID of the region where the Message Queue for RabbitMQ instance resides.', example='cn-hangzhou'),
    virtualHostName?: string(name='VirtualHostName', description='The name of the vhost of the Message Queue for RabbitMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='amqp-cn-nif22u74****'),
  }(name='SourceRabbitMQParameters', description='The parameters that are configured if the event source is Message Queue for RabbitMQ.', shrink='json', position='Body'),
  sourceRocketMQParameters?: {
    authType?: string(name='AuthType', description='The authentication type. You can set this parameter to ACL or leave this parameter empty.', example='ACL'),
    groupID?: string(name='GroupID', description='The ID of the consumer group on the Message Queue for Apache RocketMQ instance.', example='GID-test'),
    instanceEndpoint?: string(name='InstanceEndpoint', description='The endpoint that is used to access the Message Queue for Apache RocketMQ instance.', example='registry-vpc****.aliyuncs.com'),
    instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache RocketMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='dbaudit-cn-i7m2nx2or01'),
    instanceNetwork?: string(name='InstanceNetwork', description='None.', example='None'),
    instancePassword?: string(name='InstancePassword', description='The password that is used to access the Message Queue for Apache RocketMQ instance.', example='******'),
    instanceSecurityGroupId?: string(name='InstanceSecurityGroupId', description='The ID of the security group to which the Message Queue for Apache RocketMQ instance belongs.', example='sg-catalog-eventlistener'),
    instanceType?: string(name='InstanceType', description='The type of the Message Queue for Apache RocketMQ instance. Valid values:

*   Cloud_4: Message Queue for Apache RocketMQ 4.0 instance.
*   Cloud_5: Message Queue for Apache RocketMQ 5.0 instance.', example='Cloud_4'),
    instanceUsername?: string(name='InstanceUsername', description='The username that is used to access the Message Queue for Apache RocketMQ instance.', example='root'),
    instanceVSwitchIds?: string(name='InstanceVSwitchIds', description='The ID of the vSwitch with which the Message Queue for Apache RocketMQ instance is associated.', example='vsw-bp10rbrt6rb6vrd89****'),
    instanceVpcId?: string(name='InstanceVpcId', description='The ID of the virtual private cloud (VPC) in which the Message Queue for Apache RocketMQ instance resides.', example='vpc-bp1a4gmlk31hyg6ptl3ss'),
    offset?: string(name='Offset', description='The offset from which message consumption starts. Valid values:

*   CONSUME_FROM_LAST_OFFSET: Start message consumption from the latest offset.
*   CONSUME_FROM_FIRST_OFFSET: Start message consumption from the earliest offset.
*   CONSUME_FROM_TIMESTAMP: Start message consumption from the offset at the specified point in time.

Default value: CONSUME_FROM_LAST_OFFSET.', example='CONSUMEFROMLASTOFFSET'),
    regionId?: string(name='RegionId', description='The region where the Message Queue for Apache RocketMQ instance resides.', example='cn-zhangjiakou'),
    tag?: string(name='Tag', description='The tag that is used to filter messages.', example='KEY2'),
    timestamp?: long(name='Timestamp', description='The timestamp that specifies the time from which messages are consumed. This parameter is valid only if you set Offset to CONSUME_FROM_TIMESTAMP.', example='1663555399032'),
    topic?: string(name='Topic', description='The name of the topic on the Message Queue for Apache RocketMQ instance. For more information, see [Limits](https://help.aliyun.com/document_detail/163289.html).', example='topic_default_195820716552192'),
  }(name='SourceRocketMQParameters', description='The parameters that are configured if the event source is Message Queue for Apache RocketMQ.', shrink='json', position='Body'),
  sourceSLSParameters?: {
    consumePosition?: string(name='ConsumePosition', description='The starting consumer offset. The value begin indicates the earliest offset, and the value end indicates the latest offset. You can also specify a time in seconds to start consumption.', example='end'),
    logStore?: string(name='LogStore', description='The Log Service Logstore.', example='waf-logstore'),
    project?: string(name='Project', description='The Log Service project.', example='VideoTestProject'),
    roleName?: string(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the RAM console. For information about the permission policy of this role, see Create a custom event source of the Log Service type.', example='testRole'),
  }(name='SourceSLSParameters', description='SourceSLSParameters', shrink='json', position='Body'),
  sourceScheduledEventParameters?: {
    schedule?: string(name='Schedule', description='The cron expression.', example='10 * * * * *'),
    timeZone?: string(name='TimeZone', description='The time zone in which the cron expression is executed.', example='GMT+0:00'),
    userData?: string(name='UserData', description='The user data that is displayed in a JSON string.', example='{"a": "b"}'),
  }(name='SourceScheduledEventParameters', description='The parameters that are configured if you specify scheduled events as the event source.', shrink='json', position='Body'),
}

model UpdateEventSourceResponseBody = {
  code?: string(name='Code', description='The returned response code. Valid values:

*   Success: The request is successful.
*   Other codes: The request failed. For more information about error codes, see Error codes.', example='200'),
  data?: boolean(name='Data', description='The result of the operation.', example='true'),
  message?: string(name='Message', description='The returned error message.', example='Remote error. requestId: [xxxx-9D10-65DFDFA3A75D], error code: [EventSourceNotExist], message: [The event source in request is not exist! ]'),
  requestId?: string(name='RequestId', description='The request ID.', example='c057d379-ea65-41ec-a8a8-90627a968204'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. The value true indicates that the operation is successful.', example='true'),
}

model UpdateEventSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEventSourceResponseBody(name='body'),
}

/**
  * @description You can call this API operation to update an event source.
  * @param request  the request parameters of UpdateEventSource  UpdateEventSourceRequest
  * @return UpdateEventSourceResponse
 */
async function updateEventSource(request: UpdateEventSourceRequest): UpdateEventSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEventSource', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEventStreamingRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the event stream.', example='rocketmq2mns', position='Body'),
  eventStreamingName: string(name='EventStreamingName', description='The name of the event stream.

This parameter is required.', example='myeventstreaming', minLength=2, maxLength=255, position='Body'),
  filterPattern: string(name='FilterPattern', description='The rule that is used to filter events. If you leave this parameter empty, all events are matched.

This parameter is required.', example='{
    "source": [
        {
            "prefix": "acs:mns"
        }
    ],
    "type": [
        {
            "prefix": "mns:Queue"
        }
    ],
    "subject": [
        {
            "prefix": "acs:mns:cn-hangzhou:123456789098****:queues/zeus"
        }
    ]
}', position='Body'),
  runOptions?: {
    batchWindow?: {
      countBasedWindow?: int32(name='CountBasedWindow', description='The maximum number of events that are allowed in the batch window. When this threshold is reached, data in the window is pushed to the downstream service. If multiple batch windows exist, data is pushed if the triggering conditions are met in one of the windows.', example='100'),
      timeBasedWindow?: int32(name='TimeBasedWindow', description='The maximum period of time during which events are allowed in the batch window. Unit: seconds. When this threshold is reached, data in the window is pushed to the downstream service. If multiple batch windows exist, data is pushed if the triggering conditions are met in one of the windows.', example='10'),
    }(name='BatchWindow', description='The batch window.'),
    businessOption?: {
      businessMode?: string(name='BusinessMode'),
      maxCapacityUnitCount?: long(name='MaxCapacityUnitCount'),
      minCapacityUnitCount?: long(name='MinCapacityUnitCount'),
    }(name='BusinessOption'),
    deadLetterQueue?: {
      arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the dead-letter queue.', example='acs:ram::1317334647812936:role/rdstoecsassumekms'),
      network?: string(name='Network', description='The network type of the dead-letter queue. Valid values:

*   PrivateNetwork
*   PublicNetwork', example='PrivateNetwork'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-2vcgdxz7o1n9zapp****'),
      vSwitchIds?: string(name='VSwitchIds', description='The vSwitch ID.', example='vsw-m5ev8asdc6h12345****'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-2zehizpoendb3****'),
    }(name='DeadLetterQueue', description='Specifies whether to enable dead-letter queues. By default, dead-letter queues are disabled. Events that fail to be pushed are discarded after the maximum number of retries that is specified by the retry policy is reached.'),
    errorsTolerance?: string(name='ErrorsTolerance', description='The exception tolerance policy. Valid values: NONE and ALL.', example='ALL'),
    maximumTasks?: long(name='MaximumTasks', description='The maximum number of concurrent tasks.', example='2'),
    retryStrategy?: {
      maximumEventAgeInSeconds?: long(name='MaximumEventAgeInSeconds', description='The maximum timeout period for a retry.', example='512'),
      maximumRetryAttempts?: long(name='MaximumRetryAttempts', description='The maximum number of retries.', example='2'),
      pushRetryStrategy?: string(name='PushRetryStrategy', description='The retry policy. Valid values: BACKOFF_RETRY and EXPONENTIAL_DECAY_RETRY.', example='BACKOFFRETRY'),
    }(name='RetryStrategy', description='The retry policy that you want to use if events fail to be pushed.'),
    throttling?: int32(name='Throttling'),
  }(name='RunOptions', description='The parameters that are configured for the runtime environment.', shrink='json', position='Body'),
  sink: {
    sinkApacheKafkaParameters?: {
      acks?: string(name='Acks'),
      bootstraps?: string(name='Bootstraps'),
      headers?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Headers'),
      key?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Key'),
      networkType?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='NetworkType'),
      saslMechanism?: string(name='SaslMechanism'),
      saslPassword?: string(name='SaslPassword'),
      saslUser?: string(name='SaslUser'),
      securityGroupId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='SecurityGroupId'),
      securityProtocol?: string(name='SecurityProtocol'),
      topic?: string(name='Topic'),
      vSwitchIds?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='VSwitchIds'),
      value?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Value'),
      vpcId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='VpcId'),
    }(name='SinkApacheKafkaParameters'),
    sinkApacheRocketMQCheckpointParameters?: {
      consumeTimestamp?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The timestamp that specifies the time from which messages are consumed.', example='1570761026400'),
      }(name='ConsumeTimestamp', description='The timestamp that specifies the time from which messages are consumed.'),
      group?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The ID of the consumer group.', example='GID_EVENTBRIDGE_1736234******'),
      }(name='Group', description='The ID of the consumer group.'),
      instanceEndpoint?: string(name='InstanceEndpoint', description='The endpoint that is used to access the Apache RocketMQ instance.', example='192.168.1.1:9876'),
      instancePassword?: string(name='InstancePassword', description='The password that is used to access the Apache RocketMQ instance.', example='****'),
      instanceUsername?: string(name='InstanceUsername', description='The username that is used to access the Apache RocketMQ instance.', example='admin'),
      networkType?: string(name='NetworkType', description='The network type.

*   PublicNetwork
*   PrivateNetwork', example='PrivateNetwork'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-2ze5bmpw6adn0q******'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The name of the topic on the Apache RocketMQ instance.', example='Mytopic'),
      }(name='Topic', description='The name of the topic on the Apache RocketMQ instance.'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-uf62oqt1twuevrt******'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-2zeccak5pb0j3ay******'),
    }(name='SinkApacheRocketMQCheckpointParameters', description='The parameters that are configured if you specify Apache RocketMQ (Offset Data) as the event target.'),
    sinkBaiLianParameters?: SinkBaiLianParameters(name='SinkBaiLianParameters', description='The parameters that are configured if you specify BaiLian as the event target.'),
    sinkCustomizedKafkaConnectorParameters?: {
      connectorPackageUrl?: string(name='ConnectorPackageUrl', description='The download link of the ZIP package that includes Object Storage Service (OSS) resources.', example='"https://examplebucket.oss-cn-hangzhou.aliyuncs.com/testDoc/Old_Homebrew/2024-06-26%2022%3A34%3A08/opt/homebrew/homebrew/Library/Homebrew/test/support/fixtures/cask/AppWithBinary.zip?OSSAccessKeyId=ri&Expires=1725539627&Signature=rb8q3OpV2i3gZJ"'),
      connectorParameters?: {
        config?: map[string]any(name='Config', description='The connector configurations.', example='{
          "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "tasks.max": "1",
          "topics": "sourceA,sourceB"
        }'),
        name?: string(name='Name', description='The connector name.', example='mongo-sink'),
      }(name='ConnectorParameters', description='The parameters that are configured for the parsing of the .properties file in the ZIP package.'),
      workerParameters?: map[string]any(name='WorkerParameters', description='The instance configurations.', example='{
        "group.id": "connect-eb-cluster-KAFKA_CONNECTORC",
        "offset.storage.topic": "connect-eb-offset-KAFKA_CONNECTOR_yjqC8K5ewC",
        "config.storage.topic": "connect-eb-config-KAFKA_CONNECTOR_yjqC8K5ewC",
        "status.storage.topic": "connect-eb-status-KAFKA_CONNECTOR_yjqC8K5ewC",
        "consumer.group.id": "connector-eb-cluster-KAFKA_CONNECTOR_yjqC8K5ewC-mongo-sink",
        "bootstrap.servers": "alikafka-post:9092"
      }'),
    }(name='SinkCustomizedKafkaConnectorParameters', description='The parameters that are configured if you specify Kafka Sink Connect as the event target.'),
    sinkCustomizedKafkaParameters?: {
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for Kafka instance.', example='90be1f96-4229-4535-bb76-34b4f6fb2b71'),
    }(name='SinkCustomizedKafkaParameters', description='The parameters that are configured if you specify Kafka Source Connect as the event target.'),
    sinkDashVectorParameters?: {
      apiKey?: string(name='ApiKey', description='The API key that you want to create in the DashVector console.', example='Q34nExQH7sQ****'),
      collection?: string(name='Collection', description='The collection name.', example='collection1'),
      dashVectorSchemaParameters?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Valid values:

*   JSONPATH
*   CONSTANT
*   TEMPLATE', example='TEMPLATE'),
        template?: string(name='Template', description='The schema template. This parameter is required only if you set Form to TEMPLATE. After the event content is transformed, the data must be an array in the JSON format. Each schema corresponds to a JSON object. The properties include only the name, type, and value fields. The value of the type field can be only of the INT, FLOAT, STRING, or BOOL type.', example='[
  {
    "name": "schema1",
    "type": "INT",
    "value": "${value1}"
  },
  {
    "name": "schema2",
    "type": "FLOAT",
    "value": "${value2}"
  }
]'),
        value?: string(name='Value', description='*   If you set Form to CONSTANT, specify a constant.
*   If you set Form to JSONPATH, specify a JSONPath rule.
*   If you set Form to TEMPLATE, specify variables for the template.

>  The value of this parameter cannot exceed 10,240 characters in length.', example='{
  "value1":"v1",
  "value2":"v2"
}'),
      }(name='DashVectorSchemaParameters', description='The parameters in the Schema field of the table when data is inserted into DashVector. After the event content is transformed, the data must be in JSON format.'),
      instanceId?: string(name='InstanceId', description='The ID of the DashVector instance.', example='vrs-cn-lbj3ru1***'),
      network?: string(name='Network', description='The network type. Valid values:

*   PrivateNetwork
*   PublicNetwork', example='PublicNetwork'),
      operation?: string(name='Operation', description='The type of operation that you want to perform on the DashVector database. Valid values:

*   Delete
*   Upsert', example='Upsert'),
      partition?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Valid values:

*   JSONPATH
*   CONSTANT', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='*   If you set Form to CONSTANT, specify a constant.
*   If you set Form to JSONPATH, specify a JSONPath rule.

>  The value of this parameter cannot exceed 10,240 characters in length.', example='default'),
      }(name='Partition', description='The partition. Default value: default.'),
      primaryKeyId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Valid values:

*   JSONPATH
*   TEMPLATE', example='JSONPATH'),
        template?: string(name='Template', description='The template that you want to use to specify primary key IDs. This parameter is required only if you set Form to TEMPLATE.', example='${ID}'),
        value?: string(name='Value', description='If you set Form to JSONPATH, specify a JSONPath rule. If you set Form to TEMPLATE, specify variables for the template.

>  The value of this parameter cannot exceed 10,240 characters in length.', example='$.data.requestId'),
      }(name='PrimaryKeyId', description='The ID of the primary key that you want to use when you insert or delete records. If you do not specify this parameter, a random primary key ID is returned.'),
      vector?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='JSONPATH'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The JSONPath rule that you want to use to extract content.

>  The value of this parameter cannot exceed 10,240 characters in length.', example='$.data.messageBody'),
      }(name='Vector', description='The vector that is recorded when data is inserted into DashVector.'),
    }(name='SinkDashVectorParameters', description='The parameters that are configured if you specify DashVector as the event target.'),
    sinkDataHubParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='ORIGINAL'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The data is of the BLOB type, and a template is defined for the record.'),
      }(name='Body', description='The data is of the BLOB type, and a template is defined for the record.'),
      contentSchema?: {
        form?: string(name='Form', description='The template based on which you want events to be transformed.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.'),
        value?: string(name='Value', description='The value before event transformation.', example='{"Key_1":{"form":"CONSTANT","value":"demoKey"},"Value_1":{"form":"JSONPATH","value":"$.data.value"}}'),
      }(name='ContentSchema', description='The key-value pair of custom logs. This parameter takes effect only if you set ContentType to KeyValue. Each key-value pair is in the Key_n, Value_n format.'),
      contentType?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.'),
        value?: string(name='Value', description='The value before event transformation.', example='JSON'),
      }(name='ContentType', description='The data format. Valid values:

*   JSON
*   KeyValue'),
      project?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the DataHub project.', example='demo-project'),
      }(name='Project', description='The name of the DataHub project.'),
      roleName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The role name.', example='test-role'),
      }(name='RoleName', description='The role name.'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the DataHub topic.', example='demo-topic'),
      }(name='Topic', description='The name of the DataHub topic.'),
      topicSchema?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='{"k1":"${k1}","k2":"${k2}"}'),
        value?: string(name='Value', description='The data is of the TUBLE type, and a schema is defined for the DataHub topic.', example='{"k1":"value1","k2":"value2"}'),
      }(name='TopicSchema', description='The data is of the TUBLE type, and a schema is defined for the DataHub topic.'),
      topicType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The data type of the DataHub topic. Valid values:

*   TUPLE
*   BLOB', example='TUPLE'),
      }(name='TopicType', description='The data type of the DataHub topic. Valid values:

*   TUPLE
*   BLOB'),
    }(name='SinkDataHubParameters', description='The parameters that are configured if you specify DataHub as the event target.'),
    sinkDorisParameters?: {
      beHttpEndpoint?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='BeHttpEndpoint'),
      body?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Body'),
      database?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Database'),
      feHttpEndpoint?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='FeHttpEndpoint'),
      networkType?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='NetworkType'),
      password?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Password'),
      queryEndpoint?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='QueryEndpoint'),
      securityGroupId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='SecurityGroupId'),
      table?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='Table'),
      userName?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='UserName'),
      vSwitchIds?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='VSwitchIds'),
      vpcId?: {
        form?: string(name='Form'),
        template?: string(name='Template'),
        value?: string(name='Value'),
      }(name='VpcId'),
    }(name='SinkDorisParameters', description='The type of the event source.'),
    sinkFcParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Body', description='The message body that you want to deliver to Function Compute.'),
      concurrency?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.', example='None'),
        value?: string(name='Value', description='The delivery concurrency. Minimum value: 1.', example='1'),
      }(name='Concurrency', description='The delivery concurrency. Minimum value: 1.'),
      dataFormat?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Valid values:

*   ORIGINAL: complete event
*   JSONPATH: partial event
*   CONSTANT: constant
*   TEMPLATE: template', example='JSONPATH'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='$.data.key'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='DataFormat', description='The rule that you want to use to transform the format of event content.'),
      functionName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The function name.', example='mFunction'),
      }(name='FunctionName', description='The function name.'),
      invocationType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The invocation mode.', example='Async'),
      }(name='InvocationType', description='The invocation mode. Valid values: Sync and Async.'),
      qualifier?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The alias of the service to which the function belongs.', example='LATEST'),
      }(name='Qualifier', description='The alias of the service to which the function belongs.'),
      serviceName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The service name.', example='myService'),
      }(name='ServiceName', description='The service name.'),
    }(name='SinkFcParameters', description='The parameters that are configured if you specify Function Compute as the event target.'),
    sinkFnfParameters?: {
      executionName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.'),
        value?: string(name='Value', description='The execution name.', example='123'),
      }(name='ExecutionName', description='The execution name.'),
      flowName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.'),
        value?: string(name='Value', description='The flow name.', example='test-streaming-fnf'),
      }(name='FlowName', description='The flow name.'),
      input?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.'),
        value?: string(name='Value', description='The input information of the execution.', example='123'),
      }(name='Input', description='The input information of the execution.'),
      roleName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.'),
        value?: string(name='Value', description='The role name.', example='Al****FNF-x****'),
      }(name='RoleName', description='The role name.'),
    }(name='SinkFnfParameters', description='The parameters that are configured if you specify CloudFlow as the event target.'),
    sinkKafkaParameters?: {
      acks?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ACK mode.

*   If you set this parameter to 0, no response is returned from the broker. In this mode, the performance is high, but the risk of data loss is also high.
*   If you set this parameter to 1, a response is returned when data is written to the leader. In this mode, the performance and the risk of data loss are moderate. Data loss may occur if a failure occurs on the leader.
*   If you set this parameter to all, a response is returned when data is written to the leader and synchronized to the followers. In this mode, the performance is low, but the risk of data loss is also low. Data loss occurs if the leader and the followers fail at the same time.', example='1'),
      }(name='Acks', description='The acknowledgment (ACK) mode.

*   If you set this parameter to 0, no response is returned from the broker. In this mode, the performance is high, but the risk of data loss is also high.
*   If you set this parameter to 1, a response is returned when data is written to the leader. In this mode, the performance and the risk of data loss are moderate. Data loss may occur if a failure occurs on the leader.
*   If you set this parameter to all, a response is returned when data is written to the leader and synchronized to the followers. In this mode, the performance is low, but the risk of data loss is also low. Data loss occurs if the leader and the followers fail at the same time.'),
      headers?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Valid values:

*   ORIGINAL: complete event
*   JSONPATH: partial event
*   CONSTANT: constant
*   TEMPLATE: template', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Headers', description='The metadata added to messages in the ApsaraMQ for Kafka instance.'),
      instanceId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the ApsaraMQ for Kafka instance.', example='Defaut_1283278472_sadkj'),
      }(name='InstanceId', description='The ID of the ApsaraMQ for Kafka instance.'),
      key?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The message key.', example='key'),
      }(name='Key', description='The message key.'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the topic on the ApsaraMQ for Kafka instance.', example='test'),
      }(name='Topic', description='The name of the topic on the ApsaraMQ for Kafka instance.'),
      value?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Value', description='The message body.'),
    }(name='SinkKafkaParameters', description='The parameters that are configured if you specify ApsaraMQ for Kafka as the event target.'),
    sinkMNSParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Body', description='The message body.'),
      isBase64Encode?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='Specifies whether to enable Base64 encoding.', example='true'),
      }(name='IsBase64Encode', description='Specifies whether to enable Base64 encoding.'),
      queueName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the SMQ queue.', example='MyQueue'),
      }(name='QueueName', description='The name of the SMQ queue.'),
    }(name='SinkMNSParameters', description='The parameters that are configured if you specify Simple Message Queue (SMQ, formerly MNS) as the event target.'),
    sinkOpenSourceRabbitMQParameters?: {
      authType?: string(name='AuthType', description='The authentication type. Valid values:

*   ACL
*   N/A', example='ACL'),
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value of the raw data.', example='{"key": "value"}'),
      }(name='Body', description='The message body.'),
      endpoint?: string(name='Endpoint', description='The endpoint used to access the open source RabbitMQ instance.', example='192.168.1.1:9876'),
      exchange?: string(name='Exchange', description='The name of the exchange on the open source RabbitMQ instance. This parameter is valid only if you set TargetType to Exchange.', example='my-exchange'),
      messageId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The value of the message ID.', example='12345'),
      }(name='MessageId', description='The message ID.'),
      networkType?: string(name='NetworkType', description='The network type. Valid values:

*   PrivateNetwork
*   PublicNetwork', example='PublicNetwork'),
      password?: string(name='Password', description='The password that is used to access the open source RabbitMQ instance.', example='****'),
      properties?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The attribute value.', example='{"env": "prod"}'),
      }(name='Properties', description='The attributes of the message.'),
      queueName?: string(name='QueueName', description='The name of the queue on the open source RabbitMQ instance. This parameter is valid only if you set TargetType to Queue.', example='my-queue'),
      routingKey?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The routing key.', example='{"Form": "CONSTANT", "Value": "my-routing-key"}'),
      }(name='RoutingKey', description='The routing key.'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-uf6of9452b2pba82c ****'),
      targetType?: string(name='TargetType', description='The type of the resource to which you want to deliver messages. Valid values:

*   **Exchange**: Messages are routed to the event target using an exchange.
*   **Queue**: Messages are delivered to a specific queue.', example='Exchange'),
      username?: string(name='Username', description='The username that is used to access the open source RabbitMQ instance.', example='admin'),
      vSwitchIds?: string(name='VSwitchIds', description='The vSwitch ID.', example='vsw-uf6of9452b2pba82c ****'),
      virtualHostName?: string(name='VirtualHostName', description='The name of the virtual host of the open source RabbitMQ instance.', example='Vhost1'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-uf6of9452b2pba82c ****'),
    }(name='SinkOpenSourceRabbitMQParameters', description='The parameters that are configured if you specify open source RabbitMQ as the event target.'),
    sinkPrometheusParameters?: {
      authorizationType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The authentication method.', example='BASIC_AUTH'),
      }(name='AuthorizationType', description='The authentication method.'),
      data?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: JSONPATH.', example='JSONPATH'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The metric data.', example='$.data'),
      }(name='Data', description='The metric data.'),
      headerParameters?: {
        form?: string(name='Form', description='The method that you want to use to transform events.

**Valid values:**

*   JSONPATH
*   CONSTANT
*   TEMPLATE', example='TEMPLATE'),
        template?: string(name='Template', description='The template that you want to use for HTTP request headers. This parameter is required only if you set Form to TEMPLATE. After the event content is transformed, the data must be in JSON format.', example='{
    "user_name":"${name}"
}'),
        value?: string(name='Value', description='*   If you set Form to CONSTANT, specify a constant.
*   If you set Form to JSONPATH, specify a JSONPath rule.
*   If you set Form to TEMPLATE, specify variables for the template.

Note: The value of this parameter cannot exceed 10,240 characters in length.'),
      }(name='HeaderParameters', description='The parameters that are configured for the request header.'),
      networkType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The network type. Valid values:

*   PublicNetwork
*   PrivateNetwork', example='PrivateNetwork'),
      }(name='NetworkType', description='The network type.'),
      password?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The password.', example='abc'),
      }(name='Password', description='The password.'),
      securityGroupId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the security group.', example='sg-mw43*****'),
      }(name='SecurityGroupId', description='The ID of the security group.'),
      URL?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The URL for the remote write configuration item of the Managed Service for Prometheus instance.'),
      }(name='URL', description='The URL for the remote write configuration item of the Managed Service for Prometheus instance.'),
      username?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The username.', example='***admin'),
      }(name='Username', description='The username.'),
      vSwitchId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The vSwitch ID.', example='vsw-dwaafds****'),
      }(name='VSwitchId', description='The vSwitch ID.'),
      vpcId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The VPC ID.', example='vpc-adw1awdw*****'),
      }(name='VpcId', description='The VPC ID.'),
    }(name='SinkPrometheusParameters', description='The parameters that are configured if you specify Managed Service for Prometheus as the event target.'),
    sinkRabbitMQParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Body', description='The message body.'),
      exchange?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the exchange on the ApsaraMQ for RabbitMQ instance.', example='a_exchange'),
      }(name='Exchange', description='The exchange mode. This parameter is required only if you set TargetType to Exchange.'),
      instanceId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the ApsaraMQ for RabbitMQ instance.', example='amqp-cn-2r42e73o****'),
      }(name='InstanceId', description='The ID of the ApsaraMQ for RabbitMQ instance.'),
      messageId?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='MessageId', description='The message ID.'),
      properties?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Properties', description='The attributes that you want to use to filter messages.'),
      queueName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the queue on the ApsaraMQ for RabbitMQ instance.', example='MyQueue'),
      }(name='QueueName', description='The queue mode. This parameter is required only if you set TargetType to Queue.'),
      routingKey?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The rule that you want to use to route messages.', example='housekeeping'),
      }(name='RoutingKey', description='The rule that you want to use to route messages. This parameter is required only if you set TargetType to Exchange.'),
      targetType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The type of the resource to which you want to deliver events. Valid values:

*   Exchange
*   Queue', example='Exchange/Queue'),
      }(name='TargetType', description='The type of the resource to which you want to deliver events.'),
      virtualHostName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the vhost of the ApsaraMQ for RabbitMQ instance.', example='rabbit-host'),
      }(name='VirtualHostName', description='The name of the vhost of the ApsaraMQ for RabbitMQ instance.'),
    }(name='SinkRabbitMQParameters', description='The parameters that are configured if you specify ApsaraMQ for RabbitMQ as the event target.'),
    sinkRocketMQCheckpointParameters?: {
      consumeTimestamp?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The timestamp that specifies the time from which messages are consumed.', example='1570761026400'),
      }(name='ConsumeTimestamp', description='The timestamp that specifies the time from which messages are consumed.'),
      group?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The ID of the consumer group.', example='GID_EVENTBRIDGE_1736234******'),
      }(name='Group', description='The ID of the consumer group.'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for RocketMQ instance.', example='MQ_INST_164901546557****_BAAN****'),
      instanceType?: string(name='InstanceType', description='The instance type. Valid values:

*   Cloud_4: ApsaraMQ for RocketMQ 4.0 instance
*   Cloud_5: ApsaraMQ for RocketMQ 5.0 instance', example='Cloud_4'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The name of the topic on the ApsaraMQ for RocketMQ instance.', example='Mytopic'),
      }(name='Topic', description='The name of the topic on the ApsaraMQ for RocketMQ instance.'),
    }(name='SinkRocketMQCheckpointParameters', description='The parameters that are configured if you specify ApsaraMQ for RocketMQ (Offset Data) as the event target.'),
    sinkRocketMQParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Body', description='The message body.'),
      deliveryOrderType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The type of the message delivery order. Valid values:

*   **Orderly**
*   **Concurrently**', example='Concurrently'),
      }(name='DeliveryOrderType', description='The type of the message delivery order. This parameter is optional. Default value: Concurrently.'),
      instanceEndpoint?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The endpoint that is used to access the instance.', example='vbr-8vbsvkkbpf3vb0zef****'),
      }(name='InstanceEndpoint', description='The endpoint that is used to access the instance.'),
      instanceId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the ApsaraMQ for RocketMQ instance.', example='MQ_INST_164901546557****_BAAN****'),
      }(name='InstanceId', description='The ID of the ApsaraMQ for RocketMQ instance.'),
      instancePassword?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The password that is used to access the instance.', example='admin****'),
      }(name='InstancePassword', description='The password that is used to access the instance.'),
      instanceType?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The instance type. Valid values:

*   Cloud_4 (default): ApsaraMQ for RocketMQ 4.0 instance
*   Cloud_5: ApsaraMQ for RocketMQ 5.0 instance
*   SelfBuilt: self-managed Apache RocketMQ cluster', example='Cloud_4'),
      }(name='InstanceType', description='The instance type.'),
      instanceUsername?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The username that is used to access the instance.', example='admin'),
      }(name='InstanceUsername', description='The username that is used to access the instance.'),
      keys?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Keys', description='The keys that you want to use to filter messages.'),
      network?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The network type. Valid values:

*   PublicNetwork
*   PrivateNetwork', example='PublicNetwork'),
      }(name='Network', description='The network type. Valid values:

*   PublicNetwork
*   PrivateNetwork'),
      properties?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Properties', description='The attributes that you want to use to filter messages.'),
      securityGroupId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The ID of the security group.', example='b4bf375515f6440f942e3a20c33d****'),
      }(name='SecurityGroupId', description='The ID of the security group.'),
      shardingKey?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The value of the sharding key.', example='order_id'),
      }(name='ShardingKey', description='The sharding key.

>  If you set DeliveryOrderType to Orderly, this parameter is required. If you specify ApsaraMQ for RocketMQ as the event source, you can leave this parameter empty. In this case, the combined value of BrokerName and QueueId is used as the sharding key.'),
      tags?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Tags', description='The tags that you want to use to filter messages.'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The name of the topic on the ApsaraMQ for RocketMQ instance.', example='Mytopic'),
      }(name='Topic', description='The name of the topic on the ApsaraMQ for RocketMQ instance.'),
      vSwitchIds?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The vSwitch ID.', example='vbr-8vb835n3zf9shwl****mp'),
      }(name='VSwitchIds', description='The vSwitch ID.'),
      vpcId?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The VPC ID.', example='vbr-8vb835n3zf9shwlvb****'),
      }(name='VpcId', description='The virtual private cloud (VPC) ID.'),
    }(name='SinkRocketMQParameters', description='The parameters that are configured if you specify ApsaraMQ for RocketMQ as the event target.'),
    sinkSLSParameters?: {
      body?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='TEMPLATE'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='The value of ${key} is ${value}!'),
        value?: string(name='Value', description='The value before event transformation.', example='{
      "key": "value"
}'),
      }(name='Body', description='The message body that you want to deliver to Simple Log Service.'),
      contentSchema?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The key-value pair of custom logs.', example='{"Key_1":{"form":"CONSTANT","value":"demoKey"},"Value_1":{"form":"JSONPATH","value":"$.data.value"}}'),
      }(name='ContentSchema', description='The key-value pair of custom logs. This parameter takes effect only if you set ContentType to KeyValue. Each key-value pair is in the Key_n, Value_n format.'),
      contentType?: {
        form?: string(name='Form', description='The method that you want to use to transform events.', example='CONSTANT'),
        template?: string(name='Template', description='The template based on which you want events to be transformed.', example='None'),
        value?: string(name='Value', description='The format of the Simple Log Service data.', example='JSON'),
      }(name='ContentType', description='The format of the Simple Log Service data. Valid values:

*   JSON
*   KeyValue'),
      logStore?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The Simple Log Service Logstore.', example='test-logstore'),
      }(name='LogStore', description='The Simple Log Service Logstore.'),
      project?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The Simple Log Service project.', example='test-project'),
      }(name='Project', description='The Simple Log Service project.'),
      roleName?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the RAM console.', example='testRole'),
      }(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the Resource Access Management (RAM) console.'),
      topic?: {
        form?: string(name='Form', description='The method that you want to use to transform events. Default value: CONSTANT.', example='CONSTANT'),
        template?: string(name='Template', description='None.'),
        value?: string(name='Value', description='The topic that you want to use to store logs. This parameter corresponds to the reserved field topic in Simple Log Service.', example='testTopic'),
      }(name='Topic', description='The topic that you want to use to store logs. This parameter corresponds to the reserved field topic in Simple Log Service.'),
    }(name='SinkSLSParameters', description='The parameters that are configured if you specify Simple Log Service as the event target.'),
  }(name='Sink', description='The event target. You must and can specify only one event target.

This parameter is required.', shrink='json', position='Body'),
  source: {
    sourceApacheKafkaParameters?: {
      bootstraps?: string(name='Bootstraps'),
      consumerGroup?: string(name='ConsumerGroup'),
      networkType?: string(name='NetworkType'),
      offsetReset?: string(name='OffsetReset'),
      saslMechanism?: string(name='SaslMechanism'),
      saslPassword?: string(name='SaslPassword'),
      saslUser?: string(name='SaslUser'),
      securityGroupId?: string(name='SecurityGroupId'),
      securityProtocol?: string(name='SecurityProtocol'),
      topic?: string(name='Topic'),
      vSwitchIds?: string(name='VSwitchIds'),
      valueDataType?: string(name='ValueDataType'),
      vpcId?: string(name='VpcId'),
    }(name='SourceApacheKafkaParameters'),
    sourceApacheRocketMQCheckpointParameters?: {
      instanceEndpoint?: string(name='InstanceEndpoint', example='192.168.1.1:9876'),
      instancePassword?: string(name='InstancePassword', example='****'),
      instanceUsername?: string(name='InstanceUsername', example='admin'),
      networkType?: string(name='NetworkType', example='PrivateNetwork'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-mw43*****'),
      topics?: [ string ](name='Topics'),
      vSwitchId?: string(name='VSwitchId', example='vsw-dwaafds****'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-adw1awdw*****'),
    }(name='SourceApacheRocketMQCheckpointParameters'),
    sourceCustomizedKafkaConnectorParameters?: {
      connectorPackageUrl?: string(name='ConnectorPackageUrl', example='"https://examplebucket.oss-cn-hangzhou.aliyuncs.com/testDoc/Old_Homebrew/2024-06-26%2022%3A34%3A08/opt/homebrew/homebrew/Library/Homebrew/test/support/fixtures/cask/AppWithBinary.zip?OSSAccessKeyId=ri&Expires=1725539627&Signature=rb8q3OpV2i3gZJ"'),
      connectorParameters?: {
        config?: map[string]any(name='Config', example='{
          "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "tasks.max": "1",
          "topics": "sourceA,sourceB"
        }'),
        name?: string(name='Name', example='test-name'),
      }(name='ConnectorParameters'),
      workerParameters?: map[string]any(name='WorkerParameters', example='{
        "group.id": "connect-eb-cluster-KAFKA_CONNECTORC",
        "offset.storage.topic": "connect-eb-offset-KAFKA_CONNECTOR_yjqC8K5ewC",
        "config.storage.topic": "connect-eb-config-KAFKA_CONNECTOR_yjqC8K5ewC",
        "status.storage.topic": "connect-eb-status-KAFKA_CONNECTOR_yjqC8K5ewC",
        "consumer.group.id": "connector-eb-cluster-KAFKA_CONNECTOR_yjqC8K5ewC-mongo-sink",
        "bootstrap.servers": "alikafka-post:9092"
      }'),
    }(name='SourceCustomizedKafkaConnectorParameters'),
    sourceCustomizedKafkaParameters?: {
      instanceId?: string(name='InstanceId', example='r-8vb64581862c****'),
    }(name='SourceCustomizedKafkaParameters'),
    sourceDTSParameters?: {
      brokerUrl?: string(name='BrokerUrl', description='The URL and port number of the change tracking instance.'),
      initCheckPoint?: long(name='InitCheckPoint', description='The UNIX timestamp that is generated when the SDK client consumes the first data record.', example='1620962769'),
      password?: string(name='Password', description='The consumer group password.', example='admin'),
      sid?: string(name='Sid', description='The consumer group ID.', example='hkprdb'),
      taskId?: string(name='TaskId', description='The task ID.', example='f86e5814-b223-482c-b768-3b873297dade'),
      topic?: string(name='Topic', description='The name of the tracked topic of the change tracking instance.', example='LTC_CACHE_PRD'),
      username?: string(name='Username', description='The consumer group username.', example='admin'),
    }(name='SourceDTSParameters', description='The parameters that are configured if you specify Data Transmission Service (DTS) as the event source.'),
    sourceEventBusParameters?: {
      eventBusName?: string(name='EventBusName', example='my-event-bus'),
      eventRuleName?: string(name='EventRuleName', example='my-event-rule'),
    }(name='SourceEventBusParameters'),
    sourceKafkaParameters?: {
      consumerGroup?: string(name='ConsumerGroup', description='The group ID of the consumer that subscribes to the topic.', example='DEFAULT_GROUP'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for Kafka instance.', example='i-8vbh4a5b9yfhgkkzm98f'),
      network?: string(name='Network', description='The network setting. Default value: Default. The value PublicNetwork specifies a virtual private cloud (VPC).', example='Default'),
      offsetReset?: string(name='OffsetReset', description='The offset from which messages are consumed.', example='latest'),
      regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for Kafka instance resides.', example='cn-zhangjiakou'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the ApsaraMQ for Kafka instance belongs.', example='sg-uf6jcm3y5hcs7hklytxh'),
      topic?: string(name='Topic', description='The name of the topic on the ApsaraMQ for Kafka instance.', example='topic_empower_1641539400786'),
      vSwitchIds?: string(name='VSwitchIds', description='The ID of the vSwitch with which the ApsaraMQ for Kafka instance is associated.', example='vsw-wz9t1l1e8eu2omwjazmtm'),
      valueDataType?: string(name='ValueDataType', description='The encoding or decoding method. Valid values: Json, Text, and Binary. The value Json specifies that binary data is decoded into strings based on UTF-8 encoding and then parsed into the JSON format. The value Text specifies that binary data is decoded into strings based on UTF-8 encoding and then put into the payload. The value Binary specifies that binary data is encoded into strings based on Base64 encoding and then put into the payload.', example='Text'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the ApsaraMQ for Kafka instance belongs.', example='vpc-2ze6p0o345nykmekxtuop'),
    }(name='SourceKafkaParameters', description='The parameters that are configured if you specify ApsaraMQ for Kafka as the event source.'),
    sourceMNSParameters?: {
      isBase64Decode?: boolean(name='IsBase64Decode', description='Specifies whether to enable Base64 encoding. Default value: true.', example='true'),
      queueName?: string(name='QueueName', description='The name of the MNS queue.', example='queue_api_1642474203601'),
      regionId?: string(name='RegionId', description='The ID of the region where the MNS queue resides.', example='cn-hangzhou'),
    }(name='SourceMNSParameters', description='The parameters that are configured if you specify Message Service (MNS) as the event source.'),
    sourceMQTTParameters?: {
      bodyDataType?: string(name='BodyDataType', example='JSON'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='i-bp1dsudbecqwt61jqswt'),
      regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides.', example='cn-shanghai'),
      topic?: string(name='Topic', description='The name of the topic on the ApsaraMQ for MQTT instance.', example='topic_empower_1642400400779'),
    }(name='SourceMQTTParameters', description='The parameters that are configured if you specify ApsaraMQ for MQTT as the event source.'),
    sourceMySQLParameters?: SourceMySQLParameters(name='SourceMySQLParameters'),
    sourceOSSParameters?: {
      bucketName?: string(name='BucketName', example='bucket_abc'),
      delimiter?: string(name='Delimiter', example='\\n'),
      loadFormat?: string(name='LoadFormat', example='TextLoader'),
      loadMode?: string(name='LoadMode', example='single'),
      prefix?: string(name='Prefix', example='fun/document/'),
      roleName?: string(name='RoleName', example='eventbridge_oss_role'),
    }(name='SourceOSSParameters'),
    sourceOpenSourceRabbitMQParameters?: {
      authType?: string(name='AuthType', example='ACL'),
      bodyDataType?: string(name='BodyDataType', example='Json'),
      endpoint?: string(name='Endpoint', example='192.168.1.1:9876'),
      networkType?: string(name='NetworkType', example='PrivateNetwork'),
      password?: string(name='Password', example='****'),
      queueName?: string(name='QueueName', example='demo'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-m5edtu24f12345****'),
      username?: string(name='Username', example='admin'),
      vSwitchIds?: string(name='VSwitchIds', example='vsw-m5ev8asdc6h12345****'),
      virtualHostName?: string(name='VirtualHostName', example='Vhost1'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-m5e3sv4b12345****'),
    }(name='SourceOpenSourceRabbitMQParameters'),
    sourcePrometheusParameters?: {
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c83555068b6******ad213f565f209'),
      dataType?: string(name='DataType', description='The data type.', example='json'),
      externalLabels?: string(name='ExternalLabels', example='{"env":"test"}'),
      labels?: string(name='Labels', description='The labels.', example='__name__=.*'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      roleName?: string(name='RoleName', example='test-role'),
    }(name='SourcePrometheusParameters', description='The parameters that are configured if you specify Managed Service for Prometheus as the event source.'),
    sourceRabbitMQParameters?: {
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for RabbitMQ instance.', example='i-f8z9lqkldlb4oxsxwwub'),
      queueName?: string(name='QueueName', description='The name of the queue on the ApsaraMQ for RabbitMQ instance.', example='demo'),
      regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for RabbitMQ instance resides.', example='cn-hangzhou'),
      virtualHostName?: string(name='VirtualHostName', description='The name of the vhost of the ApsaraMQ for RabbitMQ instance.', example='eb-connect'),
    }(name='SourceRabbitMQParameters', description='The parameters that are configured if you specify ApsaraMQ for RabbitMQ as the event source.'),
    sourceRocketMQCheckpointParameters?: {
      instanceId?: string(name='InstanceId', example='rmq-cn-jte3w******'),
      instanceType?: string(name='InstanceType', example='Cloud_5'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      topics?: [ string ](name='Topics'),
    }(name='SourceRocketMQCheckpointParameters'),
    sourceRocketMQParameters?: {
      authType?: string(name='AuthType', description='The authentication method.', example='ACL'),
      bodyDataType?: string(name='BodyDataType', example='Json'),
      filterSql?: string(name='FilterSql', example='index > 10'),
      filterType?: string(name='FilterType', example='Tag'),
      groupID?: string(name='GroupID', description='The ID of the consumer group on the ApsaraMQ for RocketMQ instance.', example='GID_test'),
      instanceEndpoint?: string(name='InstanceEndpoint', description='The endpoint that you want to use to access the ApsaraMQ for RocketMQ instance.', example='reg****-vpc.cn-zhangjiakou.aliyuncs.com'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for RocketMQ instance.', example='i-f8z9a9mcgwri1c1idd0e'),
      instanceNetwork?: string(name='InstanceNetwork', description='The network type of the ApsaraMQ for RocketMQ instance. Valid values:

PublicNetwork and PrivateNetwork.', example='PublicNetwork'),
      instancePassword?: string(name='InstancePassword', description='The password that you want to use to access the ApsaraMQ for RocketMQ instance.', example='admin'),
      instanceSecurityGroupId?: string(name='InstanceSecurityGroupId', description='The ID of the security group to which the ApsaraMQ for RocketMQ instance belongs.', example='sg-m5edtu24f12345****'),
      instanceType?: string(name='InstanceType', description='The type of the ApsaraMQ for RocketMQ instance.', example='2'),
      instanceUsername?: string(name='InstanceUsername', description='The username that you want to use to access the ApsaraMQ for RocketMQ instance.', example='admin'),
      instanceVSwitchIds?: string(name='InstanceVSwitchIds', description='The ID of the vSwitch with which the ApsaraMQ for RocketMQ instance is associated.', example='vsw-m5ev8asdc6h12****'),
      instanceVpcId?: string(name='InstanceVpcId', description='The ID of the VPC in which the ApsaraMQ for RocketMQ instance is deployed.', example='vpc-m5e3sv4b12345****'),
      network?: string(name='Network', example='PublicNetwork'),
      offset?: string(name='Offset', description='The offset from which messages are consumed. Valid values:

*   CONSUMEFROMLASTOFFSET: Messages are consumed from the latest offset.
*   CONSUMEFROMFIRSTOFFSET: Messages are consumed from the earliest offset.
*   CONSUMEFROMTIMESTAMP: Messages are consumed from the offset at the specified point in time.

Default value: CONSUMEFROMLASTOFFSET.', example='CONSUMEFROMLASTOFFSET'),
      regionId?: string(name='RegionId', description='The ID of the region where the ApsaraMQ for RocketMQ instance resides.', example='cn-shanghai'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-m5edtu24f12345****'),
      tag?: string(name='Tag', description='The tag that you want to use to filter messages.', example='test'),
      timestamp?: long(name='Timestamp', description='The timestamp that specifies the time from which messages are consumed. This parameter is valid only if you set Offset to CONSUMEFROMTIMESTAMP.', example='1670656652009'),
      topic?: string(name='Topic', description='The name of the topic on the ApsaraMQ for RocketMQ instance.', example='TOPIC-cainiao-pcs-order-process-inBoundConditionCheck'),
      vSwitchIds?: string(name='VSwitchIds', example='vsw-m5ev8asdc6h12345****'),
      vpcId?: string(name='VpcId', example='vpc-m5e3sv4b12345****'),
    }(name='SourceRocketMQParameters', description='The parameters that are configured if you specify ApsaraMQ for RocketMQ as the event source.'),
    sourceSLSParameters?: {
      roleName?: string(name='RoleName', description='The role name. If you want to authorize EventBridge to use this role to read logs in Simple Log Service, you must select Alibaba Cloud Service for Selected Trusted Entity and EventBridge for Select Trusted Service when you create the role in the Resource Access Management (RAM) console.', example='testRole'),
    }(name='SourceSLSParameters', description='The parameters that are configured if you specify Simple Log Service as the event source.'),
  }(name='Source', description='The event provider, which is also known as the event source. You must and can specify only one event source.

This parameter is required.', shrink='json', position='Body'),
  transforms?: [ 
    {
      arn?: string(name='Arn', example='acs:fc:cn-hangzhou:*****:services/demo-service.LATEST/functions/demo-func'),
    }
  ](name='Transforms', shrink='json', position='Body'),
}

model UpdateEventStreamingResponseBody = {
  code?: string(name='Code', description='The returned response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  message?: string(name='Message', description='The returned error message.', example='The name [xxxx] of event streaming in request is already exist!'),
  requestId?: string(name='RequestId', description='The request ID.', example='0FDD73AA-7A2D-5BD4-B4C0-88AFEBF5F0F5'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
}

model UpdateEventStreamingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEventStreamingResponseBody(name='body'),
}

/**
  * @description You can call this API operation to modify the information about an event stream, such as the basic information and the information about the event source, event filtering rule, and event target.
  * @param request  the request parameters of UpdateEventStreaming  UpdateEventStreamingRequest
  * @return UpdateEventStreamingResponse
 */
async function updateEventStreaming(request: UpdateEventStreamingRequest): UpdateEventStreamingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEventStreaming', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEventStreamingBusinessOptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  businessMode: string(name='BusinessMode', description='This parameter is required.', position='Body'),
  eventStreamingName: string(name='EventStreamingName', description='This parameter is required.', example='rocketmq-sync', minLength=2, maxLength=255, position='Body'),
  maxCapacityUnitCount?: long(name='MaxCapacityUnitCount', example='2', position='Body'),
  minCapacityUnitCount?: long(name='MinCapacityUnitCount', example='1', position='Body'),
}

model UpdateEventStreamingBusinessOptionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='34AD682D-5B91-5773-8132-AA38C130****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEventStreamingBusinessOptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEventStreamingBusinessOptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEventStreamingBusinessOption  UpdateEventStreamingBusinessOptionRequest
  * @return UpdateEventStreamingBusinessOptionResponse
 */
async function updateEventStreamingBusinessOption(request: UpdateEventStreamingBusinessOptionRequest): UpdateEventStreamingBusinessOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEventStreamingBusinessOption', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRuleRequest {
  description?: string(name='Description', description='The description of the event bus.', example='demo', position='Query'),
  eventBusName: string(name='EventBusName', description='The name of the event bus.

This parameter is required.', example='hw-test', position='Query'),
  filterPattern: string(name='FilterPattern', description='The event pattern, in JSON format. Valid values: stringEqual stringExpression Each field can have a maximum of five expressions in the map data structure.

Each field can have a maximum of five expressions in the map data structure.

This parameter is required.', example='{\\"source\\":[\\"acs.oss\\"],\\"type\\":[\\"oss:BucketQueried:GetBucketStat\\"]}', position='Query'),
  ruleName: string(name='RuleName', description='The name of the event rule.

This parameter is required.', example='tf-testacc-rule', position='Query'),
  status?: string(name='Status', description='The status of the event rule. Valid values: ENABLE: The event rule is enabled. It is the default state of the event rule. DISABLE: The event rule is disabled.', example='ENABLE', position='Query'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the request was successful. Other values indicate that the request failed. For information about error codes, see Error codes.', example='200'),
  data?: boolean(name='Data', description='The result of the operation.', example='true'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='EventRuleFilterPatternSchemaError'),
  requestId?: string(name='RequestId', description='The request ID.', example='7439944D-D9FC-5614-B65E-07A468988924'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. If the operation was successful, the value true is returned.', example='true'),
}

model UpdateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRuleResponseBody(name='body'),
}

/**
  * @description You can call this API operation to update the configurations of an event rule.
  * @param request  the request parameters of UpdateRule  UpdateRuleRequest
  * @return UpdateRuleResponse
 */
async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRule', 'POST', '/', 'json', false, 'json', request);
}

