/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'cas.aliyuncs.com',
    ap-northeast-2-pop = 'cas.aliyuncs.com',
    ap-southeast-1 = 'cas.aliyuncs.com',
    ap-southeast-3 = 'cas.aliyuncs.com',
    ap-southeast-5 = 'cas.aliyuncs.com',
    cn-beijing = 'cas.aliyuncs.com',
    cn-beijing-finance-1 = 'cas.aliyuncs.com',
    cn-beijing-finance-pop = 'cas.aliyuncs.com',
    cn-beijing-gov-1 = 'cas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cas.aliyuncs.com',
    cn-chengdu = 'cas.aliyuncs.com',
    cn-edge-1 = 'cas.aliyuncs.com',
    cn-fujian = 'cas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cas.aliyuncs.com',
    cn-hangzhou-finance = 'cas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cas.aliyuncs.com',
    cn-hangzhou-test-306 = 'cas.aliyuncs.com',
    cn-hongkong = 'cas.aliyuncs.com',
    cn-hongkong-finance-pop = 'cas.aliyuncs.com',
    cn-huhehaote = 'cas.aliyuncs.com',
    cn-north-2-gov-1 = 'cas.aliyuncs.com',
    cn-qingdao = 'cas.aliyuncs.com',
    cn-qingdao-nebula = 'cas.aliyuncs.com',
    cn-shanghai = 'cas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cas.aliyuncs.com',
    cn-shanghai-finance-1 = 'cas.aliyuncs.com',
    cn-shanghai-inner = 'cas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cas.aliyuncs.com',
    cn-shenzhen = 'cas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cas.aliyuncs.com',
    cn-shenzhen-inner = 'cas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cas.aliyuncs.com',
    cn-wuhan = 'cas.aliyuncs.com',
    cn-yushanfang = 'cas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cas.aliyuncs.com',
    cn-zhangjiakou = 'cas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cas.aliyuncs.com',
    eu-west-1 = 'cas.aliyuncs.com',
    eu-west-1-oxs = 'cas.aliyuncs.com',
    rus-west-1-pop = 'cas.aliyuncs.com',
    us-east-1 = 'cas.aliyuncs.com',
    us-west-1 = 'cas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateSSLCertificateRequest {
  certificate?: string(name='Certificate'),
  privateKey?: string(name='PrivateKey'),
}

model CreateSSLCertificateResponseBody = {
  certIdentifier?: string(name='CertIdentifier'),
  requestId?: string(name='RequestId'),
}

model CreateSSLCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSSLCertificateResponseBody(name='body'),
}

async function createSSLCertificateWithOptions(request: CreateSSLCertificateRequest, runtime: Util.RuntimeOptions): CreateSSLCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificate)) {
    query['Certificate'] = request.certificate;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSSLCertificate',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSSLCertificate(request: CreateSSLCertificateRequest): CreateSSLCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSSLCertificateWithOptions(request, runtime);
}

model CreateSSLCertificateWithNameRequest {
  certName?: string(name='CertName'),
  certificate?: string(name='Certificate'),
  privateKey?: string(name='PrivateKey'),
}

model CreateSSLCertificateWithNameResponseBody = {
  certIdentifier?: string(name='CertIdentifier'),
  requestId?: string(name='RequestId'),
}

model CreateSSLCertificateWithNameResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSSLCertificateWithNameResponseBody(name='body'),
}

async function createSSLCertificateWithNameWithOptions(request: CreateSSLCertificateWithNameRequest, runtime: Util.RuntimeOptions): CreateSSLCertificateWithNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certificate)) {
    query['Certificate'] = request.certificate;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSSLCertificateWithName',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSSLCertificateWithName(request: CreateSSLCertificateWithNameRequest): CreateSSLCertificateWithNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSSLCertificateWithNameWithOptions(request, runtime);
}

model DeleteSSLCertificateRequest {
  certIdentifier?: string(name='CertIdentifier'),
}

model DeleteSSLCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSSLCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSSLCertificateResponseBody(name='body'),
}

async function deleteSSLCertificateWithOptions(request: DeleteSSLCertificateRequest, runtime: Util.RuntimeOptions): DeleteSSLCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSSLCertificate',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSSLCertificate(request: DeleteSSLCertificateRequest): DeleteSSLCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSSLCertificateWithOptions(request, runtime);
}

model DescribeSSLCertificateCountRequest {
  searchValue?: string(name='SearchValue'),
}

model DescribeSSLCertificateCountResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSSLCertificateCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSSLCertificateCountResponseBody(name='body'),
}

async function describeSSLCertificateCountWithOptions(request: DescribeSSLCertificateCountRequest, runtime: Util.RuntimeOptions): DescribeSSLCertificateCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.searchValue)) {
    query['SearchValue'] = request.searchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSSLCertificateCount',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSSLCertificateCount(request: DescribeSSLCertificateCountRequest): DescribeSSLCertificateCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSSLCertificateCountWithOptions(request, runtime);
}

model DescribeSSLCertificateListRequest {
  currentPage?: int32(name='CurrentPage'),
  searchValue?: string(name='SearchValue'),
  showSize?: int32(name='ShowSize'),
}

model DescribeSSLCertificateListResponseBody = {
  certMetaList?: [ 
    {
      afterDate?: long(name='AfterDate'),
      algorithm?: string(name='Algorithm'),
      beforeDate?: long(name='BeforeDate'),
      certIdentifier?: string(name='CertIdentifier'),
      certName?: string(name='CertName'),
      commonName?: string(name='CommonName'),
      issuer?: string(name='Issuer'),
      keySize?: int32(name='KeySize'),
      md5?: string(name='Md5'),
      sans?: string(name='Sans'),
      serialNo?: string(name='SerialNo'),
      sha2?: string(name='Sha2'),
      signAlgorithm?: string(name='SignAlgorithm'),
    }
  ](name='CertMetaList'),
  currentPage?: int32(name='CurrentPage'),
  pageCount?: int32(name='PageCount'),
  requestId?: string(name='RequestId'),
  showSize?: int32(name='ShowSize'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSSLCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSSLCertificateListResponseBody(name='body'),
}

async function describeSSLCertificateListWithOptions(request: DescribeSSLCertificateListRequest, runtime: Util.RuntimeOptions): DescribeSSLCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.searchValue)) {
    query['SearchValue'] = request.searchValue;
  }
  if (!Util.isUnset(request.showSize)) {
    query['ShowSize'] = request.showSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSSLCertificateList',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSSLCertificateList(request: DescribeSSLCertificateListRequest): DescribeSSLCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSSLCertificateListWithOptions(request, runtime);
}

model DescribeSSLCertificateMatchDomainListRequest {
  algorithm?: string(name='Algorithm'),
  currentPage?: int32(name='CurrentPage'),
  domain?: string(name='Domain'),
  matchType?: string(name='MatchType'),
  showSize?: int32(name='ShowSize'),
}

model DescribeSSLCertificateMatchDomainListResponseBody = {
  certMetaList?: [ 
    {
      afterDate?: long(name='AfterDate'),
      algorithm?: string(name='Algorithm'),
      beforeDate?: long(name='BeforeDate'),
      certIdentifier?: string(name='CertIdentifier'),
      certName?: string(name='CertName'),
      commonName?: string(name='CommonName'),
      domainMatchCert?: boolean(name='DomainMatchCert'),
      issuer?: string(name='Issuer'),
      keySize?: int32(name='KeySize'),
      md5?: string(name='Md5'),
      sans?: string(name='Sans'),
      serialNo?: string(name='SerialNo'),
      sha2?: string(name='Sha2'),
      signAlgorithm?: string(name='SignAlgorithm'),
    }
  ](name='CertMetaList'),
  currentPage?: int32(name='CurrentPage'),
  pageCount?: int32(name='PageCount'),
  requestId?: string(name='RequestId'),
  showSize?: int32(name='ShowSize'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSSLCertificateMatchDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSSLCertificateMatchDomainListResponseBody(name='body'),
}

async function describeSSLCertificateMatchDomainListWithOptions(request: DescribeSSLCertificateMatchDomainListRequest, runtime: Util.RuntimeOptions): DescribeSSLCertificateMatchDomainListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.showSize)) {
    query['ShowSize'] = request.showSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSSLCertificateMatchDomainList',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSSLCertificateMatchDomainList(request: DescribeSSLCertificateMatchDomainListRequest): DescribeSSLCertificateMatchDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSSLCertificateMatchDomainListWithOptions(request, runtime);
}

model DescribeSSLCertificatePrivateKeyRequest {
  certIdentifier?: string(name='CertIdentifier'),
  encryptedCode?: string(name='EncryptedCode'),
}

model DescribeSSLCertificatePrivateKeyResponseBody = {
  encryptPrivateKey?: string(name='EncryptPrivateKey'),
  requestId?: string(name='RequestId'),
  signPrivateKey?: string(name='SignPrivateKey'),
  x509PrivateKey?: string(name='X509PrivateKey'),
}

model DescribeSSLCertificatePrivateKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSSLCertificatePrivateKeyResponseBody(name='body'),
}

async function describeSSLCertificatePrivateKeyWithOptions(request: DescribeSSLCertificatePrivateKeyRequest, runtime: Util.RuntimeOptions): DescribeSSLCertificatePrivateKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.encryptedCode)) {
    query['EncryptedCode'] = request.encryptedCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSSLCertificatePrivateKey',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSSLCertificatePrivateKey(request: DescribeSSLCertificatePrivateKeyRequest): DescribeSSLCertificatePrivateKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSSLCertificatePrivateKeyWithOptions(request, runtime);
}

model DescribeSSLCertificatePublicKeyDetailRequest {
  certIdentifier?: string(name='CertIdentifier'),
}

model DescribeSSLCertificatePublicKeyDetailResponseBody = {
  certificateInfo?: {
    afterDate?: long(name='AfterDate'),
    algorithm?: string(name='Algorithm'),
    beforeDate?: long(name='BeforeDate'),
    certIdentifier?: string(name='CertIdentifier'),
    certName?: string(name='CertName'),
    commonName?: string(name='CommonName'),
    issuer?: string(name='Issuer'),
    keySize?: int32(name='KeySize'),
    md5?: string(name='Md5'),
    sans?: string(name='Sans'),
    serialNo?: string(name='SerialNo'),
    sha2?: string(name='Sha2'),
    signAlgorithm?: string(name='SignAlgorithm'),
  }(name='CertificateInfo'),
  encryptCertificate?: string(name='EncryptCertificate'),
  requestId?: string(name='RequestId'),
  signCertificate?: string(name='SignCertificate'),
  x509Certificate?: string(name='X509Certificate'),
}

model DescribeSSLCertificatePublicKeyDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSSLCertificatePublicKeyDetailResponseBody(name='body'),
}

async function describeSSLCertificatePublicKeyDetailWithOptions(request: DescribeSSLCertificatePublicKeyDetailRequest, runtime: Util.RuntimeOptions): DescribeSSLCertificatePublicKeyDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSSLCertificatePublicKeyDetail',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSSLCertificatePublicKeyDetail(request: DescribeSSLCertificatePublicKeyDetailRequest): DescribeSSLCertificatePublicKeyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSSLCertificatePublicKeyDetailWithOptions(request, runtime);
}

model UploadSSLCertificateRequest {
  certName?: string(name='CertName'),
  certificate?: string(name='Certificate'),
  encryptCertificate?: string(name='EncryptCertificate'),
  encryptPrivateKey?: string(name='EncryptPrivateKey'),
  privateKey?: string(name='PrivateKey'),
  signCertificate?: string(name='SignCertificate'),
  signPrivateKey?: string(name='SignPrivateKey'),
}

model UploadSSLCertificateResponseBody = {
  certIdentifier?: string(name='CertIdentifier'),
  requestId?: string(name='RequestId'),
}

model UploadSSLCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: UploadSSLCertificateResponseBody(name='body'),
}

async function uploadSSLCertificateWithOptions(request: UploadSSLCertificateRequest, runtime: Util.RuntimeOptions): UploadSSLCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certificate)) {
    query['Certificate'] = request.certificate;
  }
  if (!Util.isUnset(request.encryptCertificate)) {
    query['EncryptCertificate'] = request.encryptCertificate;
  }
  if (!Util.isUnset(request.encryptPrivateKey)) {
    query['EncryptPrivateKey'] = request.encryptPrivateKey;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  if (!Util.isUnset(request.signCertificate)) {
    query['SignCertificate'] = request.signCertificate;
  }
  if (!Util.isUnset(request.signPrivateKey)) {
    query['SignPrivateKey'] = request.signPrivateKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadSSLCertificate',
    version = '2020-06-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadSSLCertificate(request: UploadSSLCertificateRequest): UploadSSLCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadSSLCertificateWithOptions(request, runtime);
}

