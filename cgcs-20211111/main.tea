/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cgcs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAppSessionRequest {
  appId?: string(name='AppId', description='应用ID'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  clientIp?: string(name='ClientIp', description='客户端ip'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  customUserId?: string(name='CustomUserId', description='自定义用户id'),
  enablePostpaid?: boolean(name='EnablePostpaid'),
  startParameters?: [ 
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='StartParameters', description='启动参数'),
  systemInfo?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='SystemInfo', description='系统信息：如端侧机型等信息'),
  timeout?: long(name='Timeout'),
}

model CreateAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model CreateAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppSessionResponseBody(name='body'),
}

async function createAppSessionWithOptions(request: CreateAppSessionRequest, runtime: Util.RuntimeOptions): CreateAppSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appVersion)) {
    query['AppVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.customUserId)) {
    query['CustomUserId'] = request.customUserId;
  }
  if (!Util.isUnset(request.enablePostpaid)) {
    query['EnablePostpaid'] = request.enablePostpaid;
  }
  if (!Util.isUnset(request.startParameters)) {
    query['StartParameters'] = request.startParameters;
  }
  if (!Util.isUnset(request.systemInfo)) {
    query['SystemInfo'] = request.systemInfo;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppSession(request: CreateAppSessionRequest): CreateAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppSessionWithOptions(request, runtime);
}

model GetAppSessionRequest {
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
}

model GetAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
  status?: string(name='Status', description='状态'),
}

model GetAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppSessionResponseBody(name='body'),
}

async function getAppSessionWithOptions(request: GetAppSessionRequest, runtime: Util.RuntimeOptions): GetAppSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.platformSessionId)) {
    query['PlatformSessionId'] = request.platformSessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppSession(request: GetAppSessionRequest): GetAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppSessionWithOptions(request, runtime);
}

model ListAppSessionsRequest {
  appId?: string(name='AppId'),
  customSessionIds?: [ string ](name='CustomSessionIds', description='自定义会话id'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  platformSessionIds?: [ string ](name='PlatformSessionIds', description='自定义用户id'),
}

model ListAppSessionsResponseBody = {
  appSessions?: [ 
    {
      appId?: string(name='AppId', description='应用id'),
      appVersion?: string(name='AppVersion', description='应用版本'),
      customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
      platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
      status?: string(name='Status', description='状态'),
    }
  ](name='AppSessions'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='请求id'),
}

model ListAppSessionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppSessionsResponseBody(name='body'),
}

async function listAppSessionsWithOptions(request: ListAppSessionsRequest, runtime: Util.RuntimeOptions): ListAppSessionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.customSessionIds)) {
    query['CustomSessionIds'] = request.customSessionIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.platformSessionIds)) {
    query['PlatformSessionIds'] = request.platformSessionIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAppSessions',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppSessions(request: ListAppSessionsRequest): ListAppSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppSessionsWithOptions(request, runtime);
}

model StopAppSessionRequest {
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='自定义用户id'),
}

model StopAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model StopAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopAppSessionResponseBody(name='body'),
}

async function stopAppSessionWithOptions(request: StopAppSessionRequest, runtime: Util.RuntimeOptions): StopAppSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.platformSessionId)) {
    query['PlatformSessionId'] = request.platformSessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopAppSession(request: StopAppSessionRequest): StopAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAppSessionWithOptions(request, runtime);
}

