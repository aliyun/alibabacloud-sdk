/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cgcs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AdaptCreateServiceRequest {
  adaptTarget?: {
    bitRate?: int32(name='BitRate'),
    frameRate?: int32(name='FrameRate'),
    resolution?: string(name='Resolution'),
    startProgram?: string(name='StartProgram'),
  }(name='AdaptTarget'),
  appVersionId?: string(name='AppVersionId'),
  appVersionName?: string(name='AppVersionName'),
  requestApp?: string(name='RequestApp'),
}

model AdaptCreateServiceShrinkRequest {
  adaptTargetShrink?: string(name='AdaptTarget'),
  appVersionId?: string(name='AppVersionId'),
  appVersionName?: string(name='AppVersionName'),
  requestApp?: string(name='RequestApp'),
}

model AdaptCreateServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    adaptApplyId?: long(name='AdaptApplyId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AdaptCreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AdaptCreateServiceResponseBody(name='body'),
}

async function adaptCreateServiceWithOptions(tmpReq: AdaptCreateServiceRequest, runtime: Util.RuntimeOptions): AdaptCreateServiceResponse {
  Util.validateModel(tmpReq);
  var request = new AdaptCreateServiceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adaptTarget)) {
    request.adaptTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adaptTarget, 'AdaptTarget', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.adaptTargetShrink)) {
    body['AdaptTarget'] = request.adaptTargetShrink;
  }
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  if (!Util.isUnset(request.appVersionName)) {
    body['AppVersionName'] = request.appVersionName;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AdaptCreateService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function adaptCreateService(request: AdaptCreateServiceRequest): AdaptCreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return adaptCreateServiceWithOptions(request, runtime);
}

model AdaptGetServiceRequest {
  appVersionId?: string(name='AppVersionId'),
  requestApp?: string(name='RequestApp'),
}

model AdaptGetServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    adaptStatus?: string(name='AdaptStatus'),
    adaptTarget?: {
      bitRate?: int32(name='BitRate'),
      frameRate?: int32(name='FrameRate'),
      resolution?: string(name='Resolution'),
      startProgram?: string(name='StartProgram'),
    }(name='AdaptTarget'),
    appId?: string(name='AppId'),
    appVersionId?: string(name='AppVersionId'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    id?: long(name='Id'),
    tenantId?: long(name='TenantId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AdaptGetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AdaptGetServiceResponseBody(name='body'),
}

async function adaptGetServiceWithOptions(request: AdaptGetServiceRequest, runtime: Util.RuntimeOptions): AdaptGetServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AdaptGetService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function adaptGetService(request: AdaptGetServiceRequest): AdaptGetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return adaptGetServiceWithOptions(request, runtime);
}

model AppCreateServiceRequest {
  appName?: string(name='AppName'),
  appType?: string(name='AppType'),
  requestApp?: string(name='RequestApp'),
}

model AppCreateServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='AppId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppCreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppCreateServiceResponseBody(name='body'),
}

async function appCreateServiceWithOptions(request: AppCreateServiceRequest, runtime: Util.RuntimeOptions): AppCreateServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppCreateService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appCreateService(request: AppCreateServiceRequest): AppCreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appCreateServiceWithOptions(request, runtime);
}

model AppDeleteServiceRequest {
  appId?: string(name='AppId'),
  requestApp?: string(name='RequestApp'),
}

model AppDeleteServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='AppId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppDeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppDeleteServiceResponseBody(name='body'),
}

async function appDeleteServiceWithOptions(request: AppDeleteServiceRequest, runtime: Util.RuntimeOptions): AppDeleteServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppDeleteService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appDeleteService(request: AppDeleteServiceRequest): AppDeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appDeleteServiceWithOptions(request, runtime);
}

model AppGetServiceRequest {
  appId?: string(name='AppId'),
  requestApp?: string(name='RequestApp'),
}

model AppGetServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    appType?: string(name='AppType'),
    bizType?: string(name='BizType'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    tenantId?: long(name='TenantId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppGetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppGetServiceResponseBody(name='body'),
}

async function appGetServiceWithOptions(request: AppGetServiceRequest, runtime: Util.RuntimeOptions): AppGetServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppGetService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appGetService(request: AppGetServiceRequest): AppGetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appGetServiceWithOptions(request, runtime);
}

model AppListServiceRequest {
  keySearch?: string(name='KeySearch'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestApp?: string(name='RequestApp'),
}

model AppListServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    apps?: [ 
      {
        appId?: string(name='AppId'),
        appName?: string(name='AppName'),
        appType?: string(name='AppType'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        tenantId?: long(name='TenantId'),
        versionAdaptNum?: long(name='VersionAdaptNum'),
        versionTotalNum?: long(name='VersionTotalNum'),
      }
    ](name='Apps'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppListServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppListServiceResponseBody(name='body'),
}

async function appListServiceWithOptions(request: AppListServiceRequest, runtime: Util.RuntimeOptions): AppListServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.keySearch)) {
    body['KeySearch'] = request.keySearch;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppListService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appListService(request: AppListServiceRequest): AppListServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appListServiceWithOptions(request, runtime);
}

model AppModifyServiceRequest {
  appId?: string(name='AppId'),
  appName?: string(name='AppName'),
  requestApp?: string(name='RequestApp'),
}

model AppModifyServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='AppId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppModifyServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppModifyServiceResponseBody(name='body'),
}

async function appModifyServiceWithOptions(request: AppModifyServiceRequest, runtime: Util.RuntimeOptions): AppModifyServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppModifyService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appModifyService(request: AppModifyServiceRequest): AppModifyServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appModifyServiceWithOptions(request, runtime);
}

model AppVersionCreateServiceRequest {
  appId?: string(name='AppId'),
  appVersionName?: string(name='AppVersionName'),
  fileAddress?: string(name='FileAddress'),
  fileSize?: long(name='FileSize'),
  fileUploadType?: string(name='FileUploadType'),
  requestApp?: string(name='RequestApp'),
}

model AppVersionCreateServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appVersionId?: string(name='AppVersionId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppVersionCreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppVersionCreateServiceResponseBody(name='body'),
}

async function appVersionCreateServiceWithOptions(request: AppVersionCreateServiceRequest, runtime: Util.RuntimeOptions): AppVersionCreateServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appVersionName)) {
    body['AppVersionName'] = request.appVersionName;
  }
  if (!Util.isUnset(request.fileAddress)) {
    body['FileAddress'] = request.fileAddress;
  }
  if (!Util.isUnset(request.fileSize)) {
    body['FileSize'] = request.fileSize;
  }
  if (!Util.isUnset(request.fileUploadType)) {
    body['FileUploadType'] = request.fileUploadType;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppVersionCreateService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appVersionCreateService(request: AppVersionCreateServiceRequest): AppVersionCreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appVersionCreateServiceWithOptions(request, runtime);
}

model AppVersionDeleteServiceRequest {
  appVersionId?: string(name='AppVersionId'),
  requestApp?: string(name='RequestApp'),
}

model AppVersionDeleteServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appVersionId?: string(name='AppVersionId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppVersionDeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppVersionDeleteServiceResponseBody(name='body'),
}

async function appVersionDeleteServiceWithOptions(request: AppVersionDeleteServiceRequest, runtime: Util.RuntimeOptions): AppVersionDeleteServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppVersionDeleteService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appVersionDeleteService(request: AppVersionDeleteServiceRequest): AppVersionDeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appVersionDeleteServiceWithOptions(request, runtime);
}

model AppVersionGetServiceRequest {
  appVersionId?: string(name='AppVersionId'),
  requestApp?: string(name='RequestApp'),
}

model AppVersionGetServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='AppId'),
    appVersionId?: string(name='AppVersionId'),
    appVersionName?: string(name='AppVersionName'),
    appVersionStatus?: string(name='AppVersionStatus'),
    appVersionStatusMemo?: string(name='AppVersionStatusMemo'),
    consumeCu?: double(name='ConsumeCu'),
    fileAddress?: string(name='FileAddress'),
    fileSize?: long(name='FileSize'),
    fileUploadFinishTime?: string(name='FileUploadFinishTime'),
    fileUploadType?: string(name='FileUploadType'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    sourceVersionId?: string(name='SourceVersionId'),
    tenantId?: long(name='TenantId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppVersionGetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppVersionGetServiceResponseBody(name='body'),
}

async function appVersionGetServiceWithOptions(request: AppVersionGetServiceRequest, runtime: Util.RuntimeOptions): AppVersionGetServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppVersionGetService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appVersionGetService(request: AppVersionGetServiceRequest): AppVersionGetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appVersionGetServiceWithOptions(request, runtime);
}

model AppVersionListServiceRequest {
  appId?: string(name='AppId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestApp?: string(name='RequestApp'),
}

model AppVersionListServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    total?: long(name='Total'),
    versions?: [ 
      {
        appId?: string(name='AppId'),
        appVersionId?: string(name='AppVersionId'),
        appVersionName?: string(name='AppVersionName'),
        appVersionStatus?: string(name='AppVersionStatus'),
        appVersionStatusMemo?: string(name='AppVersionStatusMemo'),
        consumeCu?: double(name='ConsumeCu'),
        fileAddress?: string(name='FileAddress'),
        fileSize?: long(name='FileSize'),
        fileUploadFinishTime?: string(name='FileUploadFinishTime'),
        fileUploadType?: string(name='FileUploadType'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        tenantId?: long(name='TenantId'),
      }
    ](name='Versions'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppVersionListServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppVersionListServiceResponseBody(name='body'),
}

async function appVersionListServiceWithOptions(request: AppVersionListServiceRequest, runtime: Util.RuntimeOptions): AppVersionListServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppVersionListService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appVersionListService(request: AppVersionListServiceRequest): AppVersionListServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appVersionListServiceWithOptions(request, runtime);
}

model AppVersionModifyServiceRequest {
  appVersionId?: string(name='AppVersionId'),
  appVersionName?: string(name='AppVersionName'),
  requestApp?: string(name='RequestApp'),
}

model AppVersionModifyServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appVersionId?: string(name='AppVersionId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppVersionModifyServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppVersionModifyServiceResponseBody(name='body'),
}

async function appVersionModifyServiceWithOptions(request: AppVersionModifyServiceRequest, runtime: Util.RuntimeOptions): AppVersionModifyServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  if (!Util.isUnset(request.appVersionName)) {
    body['AppVersionName'] = request.appVersionName;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppVersionModifyService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appVersionModifyService(request: AppVersionModifyServiceRequest): AppVersionModifyServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appVersionModifyServiceWithOptions(request, runtime);
}

model AppVersionQueryServiceRequest {
  keySearch?: string(name='KeySearch'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestApp?: string(name='RequestApp'),
}

model AppVersionQueryServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    total?: long(name='Total'),
    versions?: [ 
      {
        appId?: string(name='AppId'),
        appName?: string(name='AppName'),
        appVersionId?: string(name='AppVersionId'),
        appVersionName?: string(name='AppVersionName'),
        tenantId?: long(name='TenantId'),
      }
    ](name='Versions'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AppVersionQueryServiceResponse = {
  headers: map[string]string(name='headers'),
  body: AppVersionQueryServiceResponseBody(name='body'),
}

async function appVersionQueryServiceWithOptions(request: AppVersionQueryServiceRequest, runtime: Util.RuntimeOptions): AppVersionQueryServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.keySearch)) {
    body['KeySearch'] = request.keySearch;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppVersionQueryService',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appVersionQueryService(request: AppVersionQueryServiceRequest): AppVersionQueryServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return appVersionQueryServiceWithOptions(request, runtime);
}

model AppliedConsumStatRequest {
  appliedId?: [ string ](name='AppliedId'),
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  packageType?: string(name='PackageType', description='资源类型,PackageType[CU(cu),code,cssResourceType,desc]'),
  queryEndDate?: string(name='QueryEndDate', description='查询结束时间'),
  queryStartDate?: string(name='QueryStartDate', description='查询开始时间'),
}

model AppliedConsumStatShrinkRequest {
  appliedIdShrink?: string(name='AppliedId'),
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  packageType?: string(name='PackageType', description='资源类型,PackageType[CU(cu),code,cssResourceType,desc]'),
  queryEndDate?: string(name='QueryEndDate', description='查询结束时间'),
  queryStartDate?: string(name='QueryStartDate', description='查询开始时间'),
}

model AppliedConsumStatResponseBody = {
  code?: string(name='Code', description='业务处理结果Code'),
  data?: {
    appliedConsumptionMap?: map[string][ DataAppliedConsumptionMapValue     ](name='AppliedConsumptionMap', description='应用消耗Cu统计'),
  }(name='Data', description='业务对象'),
  message?: string(name='Message', description='业务处理消息摘要'),
  requestId?: string(name='RequestId', description='操作请求ID'),
  success?: boolean(name='Success', description='业务处理是否成功'),
}

model AppliedConsumStatResponse = {
  headers: map[string]string(name='headers'),
  body: AppliedConsumStatResponseBody(name='body'),
}

async function appliedConsumStatWithOptions(tmpReq: AppliedConsumStatRequest, runtime: Util.RuntimeOptions): AppliedConsumStatResponse {
  Util.validateModel(tmpReq);
  var request = new AppliedConsumStatShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.appliedId)) {
    request.appliedIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.appliedId, 'AppliedId', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appliedIdShrink)) {
    body['AppliedId'] = request.appliedIdShrink;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.operatorType)) {
    body['OperatorType'] = request.operatorType;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.queryEndDate)) {
    body['QueryEndDate'] = request.queryEndDate;
  }
  if (!Util.isUnset(request.queryStartDate)) {
    body['QueryStartDate'] = request.queryStartDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppliedConsumStat',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appliedConsumStat(request: AppliedConsumStatRequest): AppliedConsumStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return appliedConsumStatWithOptions(request, runtime);
}

model AppliedNearRealStatRequest {
  appliedVersionId?: [ string ](name='AppliedVersionId'),
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  orderBy?: string(name='OrderBy', description='排序类型。默认：AppliedConcurrency_Desc,AppliedNearRealOrderConditionType[AppliedConcurrency_Desc(AppliedConcurrency_Desc,根据实时并发路数降序排列),AppliedConcurrency_Asc(AppliedConcurrency_Asc,根据实时并发路数升序排列),AppliedConsumptionCu_Desc(AppliedConsumptionCu_Desc,根据实时CU消耗降序排列),AppliedConsumptionCu_Asc(AppliedConsumptionCu_Asc,根据实时CU消耗升序排列),orderByType,desc]'),
  packageType?: string(name='PackageType', description='资源类型,PackageType[CU(cu),code,cssResourceType,desc]'),
  pageNumber?: int32(name='PageNumber', description='当前页码，默认1'),
  pageSize?: int32(name='PageSize', description='每页项数，默认20,最大100'),
}

model AppliedNearRealStatShrinkRequest {
  appliedVersionIdShrink?: string(name='AppliedVersionId'),
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  orderBy?: string(name='OrderBy', description='排序类型。默认：AppliedConcurrency_Desc,AppliedNearRealOrderConditionType[AppliedConcurrency_Desc(AppliedConcurrency_Desc,根据实时并发路数降序排列),AppliedConcurrency_Asc(AppliedConcurrency_Asc,根据实时并发路数升序排列),AppliedConsumptionCu_Desc(AppliedConsumptionCu_Desc,根据实时CU消耗降序排列),AppliedConsumptionCu_Asc(AppliedConsumptionCu_Asc,根据实时CU消耗升序排列),orderByType,desc]'),
  packageType?: string(name='PackageType', description='资源类型,PackageType[CU(cu),code,cssResourceType,desc]'),
  pageNumber?: int32(name='PageNumber', description='当前页码，默认1'),
  pageSize?: int32(name='PageSize', description='每页项数，默认20,最大100'),
}

model AppliedNearRealStatResponseBody = {
  code?: string(name='Code', description='业务处理结果Code'),
  data?: {
    pageNumber?: long(name='PageNumber', description='当前页码，默认1'),
    pageSize?: long(name='PageSize', description='每页项数，默认20,最大100'),
    pages?: long(name='Pages', description='总页数'),
    records?: [ 
      {
        appliedId?: string(name='AppliedId', description='应用ID'),
        appliedName?: string(name='AppliedName', description='应用名称'),
        appliedVersionId?: string(name='AppliedVersionId', description='应用版本ID'),
        appliedVersionName?: string(name='AppliedVersionName', description='应用版本名称'),
        concurrency?: long(name='Concurrency', description='实时消耗并发'),
        consumptionCu?: double(name='ConsumptionCu', description='实时消耗CU'),
      }
    ](name='Records', description='结果集'),
    totalCount?: long(name='TotalCount', description='总共项数'),
  }(name='Data', description='业务对象'),
  message?: string(name='Message', description='业务处理消息摘要'),
  requestId?: string(name='RequestId', description='操作请求ID'),
  success?: boolean(name='Success', description='业务处理是否成功'),
}

model AppliedNearRealStatResponse = {
  headers: map[string]string(name='headers'),
  body: AppliedNearRealStatResponseBody(name='body'),
}

async function appliedNearRealStatWithOptions(tmpReq: AppliedNearRealStatRequest, runtime: Util.RuntimeOptions): AppliedNearRealStatResponse {
  Util.validateModel(tmpReq);
  var request = new AppliedNearRealStatShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.appliedVersionId)) {
    request.appliedVersionIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.appliedVersionId, 'AppliedVersionId', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appliedVersionIdShrink)) {
    body['AppliedVersionId'] = request.appliedVersionIdShrink;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.operatorType)) {
    body['OperatorType'] = request.operatorType;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppliedNearRealStat',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appliedNearRealStat(request: AppliedNearRealStatRequest): AppliedNearRealStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return appliedNearRealStatWithOptions(request, runtime);
}

model AppliedStatRequest {
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  queryEndDate?: string(name='QueryEndDate', description='查询结束时间'),
  queryStartDate?: string(name='QueryStartDate', description='查询开始时间'),
}

model AppliedStatResponseBody = {
  code?: string(name='Code', description='业务处理结果Code'),
  data?: {
    activeApplications?: long(name='ActiveApplications', description='活跃应用个数'),
    averageDailyRuntime?: long(name='AverageDailyRuntime', description='日均应用运行时长'),
    peakConcurrency?: long(name='PeakConcurrency', description='应用并发数量峰值'),
    secondaryAverageTime?: long(name='SecondaryAverageTime', description='次均应用时长'),
  }(name='Data', description='业务对象'),
  message?: string(name='Message', description='业务处理消息摘要'),
  requestId?: string(name='RequestId', description='操作请求ID'),
  success?: boolean(name='Success', description='业务处理是否成功'),
}

model AppliedStatResponse = {
  headers: map[string]string(name='headers'),
  body: AppliedStatResponseBody(name='body'),
}

async function appliedStatWithOptions(request: AppliedStatRequest, runtime: Util.RuntimeOptions): AppliedStatResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.operatorType)) {
    body['OperatorType'] = request.operatorType;
  }
  if (!Util.isUnset(request.queryEndDate)) {
    body['QueryEndDate'] = request.queryEndDate;
  }
  if (!Util.isUnset(request.queryStartDate)) {
    body['QueryStartDate'] = request.queryStartDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppliedStat',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appliedStat(request: AppliedStatRequest): AppliedStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return appliedStatWithOptions(request, runtime);
}

model CreateAppSessionRequest {
  appId?: string(name='AppId', description='应用ID'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  clientIp?: string(name='ClientIp', description='客户端ip'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  customUserId?: string(name='CustomUserId', description='自定义用户id'),
  startParameters?: [ 
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='StartParameters', description='启动参数'),
  systemInfo?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='SystemInfo', description='系统信息：如端侧机型等信息'),
}

model CreateAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model CreateAppSessionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppSessionResponseBody(name='body'),
}

async function createAppSessionWithOptions(request: CreateAppSessionRequest, runtime: Util.RuntimeOptions): CreateAppSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appVersion)) {
    query['AppVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.customUserId)) {
    query['CustomUserId'] = request.customUserId;
  }
  if (!Util.isUnset(request.startParameters)) {
    query['StartParameters'] = request.startParameters;
  }
  if (!Util.isUnset(request.systemInfo)) {
    query['SystemInfo'] = request.systemInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppSession(request: CreateAppSessionRequest): CreateAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppSessionWithOptions(request, runtime);
}

model CreateAppSessionBatchRequest {
  appInfos?: [ 
    {
      appId?: string(name='AppId'),
      appVersion?: string(name='AppVersion'),
      clientIp?: string(name='ClientIp'),
      customUserId?: string(name='CustomUserId'),
      customerSessionId?: string(name='CustomerSessionId'),
      startParameters?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='StartParameters'),
      systemInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='SystemInfo'),
    }
  ](name='AppInfos'),
  customTaskId?: string(name='CustomTaskId'),
  timeout?: int32(name='Timeout'),
}

model CreateAppSessionBatchShrinkRequest {
  appInfosShrink?: string(name='AppInfos'),
  customTaskId?: string(name='CustomTaskId'),
  timeout?: int32(name='Timeout'),
}

model CreateAppSessionBatchResponseBody = {
  customTaskId?: string(name='CustomTaskId', description='自定义会话id'),
  platformTaskId?: string(name='PlatformTaskId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model CreateAppSessionBatchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppSessionBatchResponseBody(name='body'),
}

async function createAppSessionBatchWithOptions(tmpReq: CreateAppSessionBatchRequest, runtime: Util.RuntimeOptions): CreateAppSessionBatchResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAppSessionBatchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.appInfos)) {
    request.appInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.appInfos, 'AppInfos', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appInfosShrink)) {
    query['AppInfos'] = request.appInfosShrink;
  }
  if (!Util.isUnset(request.customTaskId)) {
    query['CustomTaskId'] = request.customTaskId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppSessionBatch',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppSessionBatch(request: CreateAppSessionBatchRequest): CreateAppSessionBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppSessionBatchWithOptions(request, runtime);
}

model CreateUploadTaskRequest {
  appId?: string(name='AppId', description='应用ID'),
  appType?: string(name='AppType', description='应用类型'),
  bucketName?: string(name='BucketName', description='上传的bucket名称'),
  env?: string(name='Env', description='环境'),
  fileAddress?: string(name='FileAddress', description='游戏链接'),
  fileSize?: long(name='FileSize', description='文件大小'),
  fileType?: string(name='FileType', description='上传文件类型'),
  progress?: double(name='Progress', description='上传进度'),
  region?: string(name='Region', description='上传的bucket所在region'),
  status?: string(name='Status', description='上传状态'),
  uploadToolVersion?: string(name='UploadToolVersion', description='上传工具版本'),
  uploadType?: string(name='UploadType', description='上传任务类型'),
  versionId?: string(name='VersionId', description='版本ID'),
}

model CreateUploadTaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateUploadTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadTaskResponseBody(name='body'),
}

async function createUploadTaskWithOptions(request: CreateUploadTaskRequest, runtime: Util.RuntimeOptions): CreateUploadTaskResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.bucketName)) {
    body['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.fileAddress)) {
    body['FileAddress'] = request.fileAddress;
  }
  if (!Util.isUnset(request.fileSize)) {
    body['FileSize'] = request.fileSize;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.progress)) {
    body['Progress'] = request.progress;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.uploadToolVersion)) {
    body['UploadToolVersion'] = request.uploadToolVersion;
  }
  if (!Util.isUnset(request.uploadType)) {
    body['UploadType'] = request.uploadType;
  }
  if (!Util.isUnset(request.versionId)) {
    body['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUploadTask',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUploadTask(request: CreateUploadTaskRequest): CreateUploadTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadTaskWithOptions(request, runtime);
}

model GetAppListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appId?: string(name='AppId', description='应用ID'),
      appName?: string(name='AppName', description='应用名称'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetAppListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppListResponseBody(name='body'),
}

async function getAppListWithOptions(runtime: Util.RuntimeOptions): GetAppListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetAppList',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppList(): GetAppListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppListWithOptions(runtime);
}

model GetAppSessionRequest {
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
}

model GetAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
  scheduleInfo?: [ 
    {
      key?: string(name='Key', description='key数值，枚举有多个数值，例如： RegionId 大区id ServerIp 服务端 IP ServerPort 端口'),
      value?: string(name='Value'),
    }
  ](name='ScheduleInfo'),
  status?: string(name='Status', description='状态'),
}

model GetAppSessionResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppSessionResponseBody(name='body'),
}

async function getAppSessionWithOptions(request: GetAppSessionRequest, runtime: Util.RuntimeOptions): GetAppSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.platformSessionId)) {
    query['PlatformSessionId'] = request.platformSessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppSession(request: GetAppSessionRequest): GetAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppSessionWithOptions(request, runtime);
}

model GetNeedUploadFileListRequest {
  appId?: string(name='AppId', description='应用ID'),
  env?: string(name='Env', description='环境'),
  hashList?: [ string ](name='HashList'),
  versionId?: string(name='VersionId', description='版本ID'),
}

model GetNeedUploadFileListResponseBody = {
  code?: string(name='Code'),
  data?: {
    err?: string(name='Err', description='错误信息'),
    needUploadFileList?: [ string ](name='NeedUploadFileList', description='待上传文件列表'),
    success?: boolean(name='Success', description='请求结果'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetNeedUploadFileListResponse = {
  headers: map[string]string(name='headers'),
  body: GetNeedUploadFileListResponseBody(name='body'),
}

async function getNeedUploadFileListWithOptions(request: GetNeedUploadFileListRequest, runtime: Util.RuntimeOptions): GetNeedUploadFileListResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.hashList)) {
    body['HashList'] = request.hashList;
  }
  if (!Util.isUnset(request.versionId)) {
    body['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNeedUploadFileList',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNeedUploadFileList(request: GetNeedUploadFileListRequest): GetNeedUploadFileListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNeedUploadFileListWithOptions(request, runtime);
}

model GetOssInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    first?: string(name='First'),
    second?: string(name='Second'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetOssInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetOssInfoResponseBody(name='body'),
}

async function getOssInfoWithOptions(runtime: Util.RuntimeOptions): GetOssInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetOssInfo',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOssInfo(): GetOssInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOssInfoWithOptions(runtime);
}

model GetTenantIdResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTenantIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetTenantIdResponseBody(name='body'),
}

async function getTenantIdWithOptions(runtime: Util.RuntimeOptions): GetTenantIdResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetTenantId',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTenantId(): GetTenantIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTenantIdWithOptions(runtime);
}

model GetTokenRequest {
  appId?: string(name='AppId', description='应用ID'),
  bucket?: string(name='Bucket', description='存储桶'),
  env?: string(name='Env', description='环境'),
  region?: string(name='Region', description='区域ID'),
  versionId?: string(name='VersionId', description='版本ID'),
}

model GetTokenResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    endpoint?: string(name='Endpoint'),
    expiration?: string(name='Expiration'),
    internalEndpoint?: string(name='InternalEndpoint'),
    securityToken?: string(name='SecurityToken'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenResponseBody(name='body'),
}

async function getTokenWithOptions(request: GetTokenRequest, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.bucket)) {
    body['Bucket'] = request.bucket;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.versionId)) {
    body['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetToken',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTokenWithOptions(request, runtime);
}

model GetUploadToolUrlResponseBody = {
  code?: string(name='Code'),
  data?: map[string]string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetUploadToolUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetUploadToolUrlResponseBody(name='body'),
}

async function getUploadToolUrlWithOptions(runtime: Util.RuntimeOptions): GetUploadToolUrlResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetUploadToolUrl',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUploadToolUrl(): GetUploadToolUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUploadToolUrlWithOptions(runtime);
}

model HasActivateResponseBody = {
  code?: string(name='Code', description='业务处理结果Code'),
  data?: {
    success?: boolean(name='Success'),
  }(name='Data', description='业务对象'),
  message?: string(name='Message', description='业务处理消息摘要'),
  requestId?: string(name='RequestId', description='操作请求ID'),
  success?: boolean(name='Success', description='业务处理是否成功'),
}

model HasActivateResponse = {
  headers: map[string]string(name='headers'),
  body: HasActivateResponseBody(name='body'),
}

async function hasActivateWithOptions(runtime: Util.RuntimeOptions): HasActivateResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'HasActivate',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hasActivate(): HasActivateResponse {
  var runtime = new Util.RuntimeOptions{};
  return hasActivateWithOptions(runtime);
}

model ListAppSessionsRequest {
  appId?: string(name='AppId'),
  customSessionIds?: [ string ](name='CustomSessionIds', description='自定义会话id'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  platformSessionIds?: [ string ](name='PlatformSessionIds', description='自定义用户id'),
}

model ListAppSessionsResponseBody = {
  appSessions?: [ 
    {
      appId?: string(name='AppId', description='应用id'),
      appVersion?: string(name='AppVersion', description='应用版本'),
      customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
      platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
      status?: string(name='Status', description='状态'),
    }
  ](name='AppSessions'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='请求id'),
}

model ListAppSessionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppSessionsResponseBody(name='body'),
}

async function listAppSessionsWithOptions(request: ListAppSessionsRequest, runtime: Util.RuntimeOptions): ListAppSessionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.customSessionIds)) {
    query['CustomSessionIds'] = request.customSessionIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.platformSessionIds)) {
    query['PlatformSessionIds'] = request.platformSessionIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAppSessions',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppSessions(request: ListAppSessionsRequest): ListAppSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppSessionsWithOptions(request, runtime);
}

model PageQueryResourcePackageListRequest {
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  packageType?: string(name='PackageType', description='资源包类型,PackageType[CU(cu),code,cssResourceType,desc]'),
  pageNumber?: int32(name='PageNumber', description='当前页码，默认1'),
  pageSize?: int32(name='PageSize', description='每页项数，默认20,最大100'),
  queryValidType?: string(name='QueryValidType', description='查询过期的资源包类型,ResourcePackageValidQueryConditionType[All(查询所有资源包),CurrentlyValid(查询当前有效的资源包(已开始，未结束)),PendingValid(未开始,即将生效的资源包),AllValid(已开始未结束 + 即将开始 的资源包),PendingInvalid5m(5min内即将到期的资源包),HasInvalid(已经过期的资源包),queryType,desc]'),
}

model PageQueryResourcePackageListResponseBody = {
  code?: string(name='Code', description='业务处理结果Code'),
  data?: {
    pageNumber?: long(name='PageNumber', description='当前页码，默认1'),
    pageSize?: long(name='PageSize', description='每页项数，默认20,最大100'),
    pages?: long(name='Pages', description='总页数'),
    records?: [ 
      {
        currentAmount?: long(name='CurrentAmount', description='当前资源包剩余总量'),
        gmtValidBegin?: string(name='GmtValidBegin', description='资源包有效开始时间'),
        gmtValidEnd?: string(name='GmtValidEnd', description='资源包有效结束时间'),
        initAmount?: long(name='InitAmount', description='当前资源包购买总量'),
        packageInstanceId?: string(name='PackageInstanceId', description='资源包实例ID'),
        packageType?: string(name='PackageType', description='资源包类型'),
      }
    ](name='Records', description='结果集'),
    totalCount?: long(name='TotalCount', description='总共项数'),
  }(name='Data', description='业务对象'),
  message?: string(name='Message', description='业务处理消息摘要'),
  requestId?: string(name='RequestId', description='操作请求ID'),
  success?: boolean(name='Success', description='业务处理是否成功'),
}

model PageQueryResourcePackageListResponse = {
  headers: map[string]string(name='headers'),
  body: PageQueryResourcePackageListResponseBody(name='body'),
}

async function pageQueryResourcePackageListWithOptions(request: PageQueryResourcePackageListRequest, runtime: Util.RuntimeOptions): PageQueryResourcePackageListResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.operatorType)) {
    body['OperatorType'] = request.operatorType;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryValidType)) {
    body['QueryValidType'] = request.queryValidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageQueryResourcePackageList',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageQueryResourcePackageList(request: PageQueryResourcePackageListRequest): PageQueryResourcePackageListResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageQueryResourcePackageListWithOptions(request, runtime);
}

model QueryAdaptRecordsRequest {
  appVersionId?: string(name='AppVersionId'),
  requestApp?: string(name='RequestApp'),
}

model QueryAdaptRecordsResponseBody = {
  code?: string(name='Code'),
  data?: {
    adaptApplyId?: long(name='AdaptApplyId'),
    adaptRecords?: [ 
      {
        adaptApplyId?: long(name='AdaptApplyId'),
        adaptRecordId?: long(name='AdaptRecordId'),
        adaptStatus?: string(name='AdaptStatus'),
        adaptTarget?: {
          bitRate?: int32(name='BitRate'),
          frameRate?: int32(name='FrameRate'),
          resolution?: string(name='Resolution'),
          startProgram?: string(name='StartProgram'),
        }(name='AdaptTarget'),
        appId?: string(name='AppId'),
        appVersionId?: string(name='AppVersionId'),
        calculationEvaluationInfo?: {
          cpu?: {
            average?: double(name='Average'),
            maximum?: double(name='Maximum'),
            minimum?: double(name='Minimum'),
            numberOfCores?: double(name='NumberOfCores'),
            quantile80?: double(name='Quantile80'),
          }(name='Cpu'),
          gpu?: {
            gpuUsedutilization?: {
              average?: double(name='Average'),
              maximum?: double(name='Maximum'),
              minimum?: double(name='Minimum'),
              numberOfCores?: double(name='NumberOfCores'),
              quantile80?: double(name='Quantile80'),
            }(name='GpuUsedutilization'),
            memUsedutilization?: {
              average?: double(name='Average'),
              maximum?: double(name='Maximum'),
              minimum?: double(name='Minimum'),
              quantile80?: double(name='Quantile80'),
              total?: double(name='Total'),
            }(name='MemUsedutilization'),
          }(name='Gpu'),
          mem?: {
            average?: double(name='Average'),
            maximum?: double(name='Maximum'),
            minimum?: double(name='Minimum'),
            quantile80?: double(name='Quantile80'),
            total?: double(name='Total'),
          }(name='Mem'),
        }(name='CalculationEvaluationInfo'),
        consumeCu?: double(name='ConsumeCu'),
        containerType?: string(name='ContainerType', description='蔚领：1 独占虚机，2 支持多开 (EXCLUSIVE: 独占虚机, SHARED: 支持多开)'),
        fileDownloadPath?: string(name='FileDownloadPath'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        imageType?: string(name='ImageType'),
        isMustSelect?: boolean(name='IsMustSelect'),
        isv?: string(name='Isv'),
        maxConcurrency?: int32(name='MaxConcurrency'),
        memo?: string(name='Memo'),
        priority?: int32(name='Priority'),
        serverInfo?: {
          cpuType?: string(name='CpuType'),
          gpuType?: string(name='GpuType'),
          name?: string(name='Name'),
        }(name='ServerInfo'),
        tenantId?: long(name='TenantId'),
        vmType?: string(name='VmType'),
      }
    ](name='AdaptRecords'),
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    appType?: string(name='AppType'),
    appVersionId?: string(name='AppVersionId'),
    appVersionName?: string(name='AppVersionName'),
    appVersionServiceype?: string(name='AppVersionServiceype'),
    tenantId?: long(name='TenantId'),
    tenantName?: string(name='TenantName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryAdaptRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAdaptRecordsResponseBody(name='body'),
}

async function queryAdaptRecordsWithOptions(request: QueryAdaptRecordsRequest, runtime: Util.RuntimeOptions): QueryAdaptRecordsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  if (!Util.isUnset(request.requestApp)) {
    body['RequestApp'] = request.requestApp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryAdaptRecords',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAdaptRecords(request: QueryAdaptRecordsRequest): QueryAdaptRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAdaptRecordsWithOptions(request, runtime);
}

model QueryUploadProgressRequest {
  queryUploadProgressRequests?: string(name='QueryUploadProgressRequests'),
}

model QueryUploadProgressResponseBody = {
  code?: string(name='Code'),
  data?: {
    code?: string(name='Code', description='查询结果'),
    content?: {
      versions?: [ 
        {
          appId?: string(name='AppId'),
          progress?: double(name='Progress'),
          tenantId?: long(name='TenantId'),
          versionId?: string(name='VersionId'),
        }
      ](name='Versions'),
    }(name='Content', description='进度信息'),
    message?: string(name='Message', description='查询信息'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryUploadProgressResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUploadProgressResponseBody(name='body'),
}

async function queryUploadProgressWithOptions(request: QueryUploadProgressRequest, runtime: Util.RuntimeOptions): QueryUploadProgressResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.queryUploadProgressRequests)) {
    body['QueryUploadProgressRequests'] = request.queryUploadProgressRequests;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryUploadProgress',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUploadProgress(request: QueryUploadProgressRequest): QueryUploadProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUploadProgressWithOptions(request, runtime);
}

model RecordFinishedFileRequest {
  appId?: string(name='AppId', description='应用ID'),
  bucketName?: string(name='BucketName', description='上传的bucket名称'),
  env?: string(name='Env', description='环境'),
  fileFingerprintDTOList?: [ 
    {
      fileHash?: string(name='FileHash', description='文件hash'),
      fileSize?: long(name='FileSize', description='文件大小'),
    }
  ](name='FileFingerprintDTOList', description='用于pop传入的文件指纹信息'),
  fileSize?: long(name='FileSize', description='文件大小'),
  fileType?: string(name='FileType', description='上传文件类型'),
  region?: string(name='Region', description='上传的bucket所在region'),
  toolVersion?: string(name='ToolVersion', description='上传工具版本'),
  versionId?: string(name='VersionId', description='版本ID'),
}

model RecordFinishedFileResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecordFinishedFileResponse = {
  headers: map[string]string(name='headers'),
  body: RecordFinishedFileResponseBody(name='body'),
}

async function recordFinishedFileWithOptions(request: RecordFinishedFileRequest, runtime: Util.RuntimeOptions): RecordFinishedFileResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.bucketName)) {
    body['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.fileFingerprintDTOList)) {
    body['FileFingerprintDTOList'] = request.fileFingerprintDTOList;
  }
  if (!Util.isUnset(request.fileSize)) {
    body['FileSize'] = request.fileSize;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.toolVersion)) {
    body['ToolVersion'] = request.toolVersion;
  }
  if (!Util.isUnset(request.versionId)) {
    body['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecordFinishedFile',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recordFinishedFile(request: RecordFinishedFileRequest): RecordFinishedFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return recordFinishedFileWithOptions(request, runtime);
}

model ReplicateVersionRequest {
  appId?: string(name='AppId', description='应用Id'),
  sourceVersionId?: string(name='SourceVersionId', description='源头版本Id'),
  targetVersionId?: string(name='TargetVersionId', description='复制目标版本Id'),
  tenantId?: long(name='TenantId', description='租户Id'),
}

model ReplicateVersionResponseBody = {
  code?: string(name='Code'),
  data?: {
    code?: string(name='Code', description='复制结果'),
    message?: string(name='Message', description='复制结果信息'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReplicateVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ReplicateVersionResponseBody(name='body'),
}

async function replicateVersionWithOptions(request: ReplicateVersionRequest, runtime: Util.RuntimeOptions): ReplicateVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.sourceVersionId)) {
    body['SourceVersionId'] = request.sourceVersionId;
  }
  if (!Util.isUnset(request.targetVersionId)) {
    body['TargetVersionId'] = request.targetVersionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReplicateVersion',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function replicateVersion(request: ReplicateVersionRequest): ReplicateVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return replicateVersionWithOptions(request, runtime);
}

model ReportUploadProgressRequest {
  appId?: string(name='AppId', description='应用ID'),
  env?: string(name='Env', description='环境'),
  progress?: double(name='Progress', description='上传进度'),
  versionId?: string(name='VersionId', description='版本ID'),
}

model ReportUploadProgressResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReportUploadProgressResponse = {
  headers: map[string]string(name='headers'),
  body: ReportUploadProgressResponseBody(name='body'),
}

async function reportUploadProgressWithOptions(request: ReportUploadProgressRequest, runtime: Util.RuntimeOptions): ReportUploadProgressResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.progress)) {
    body['Progress'] = request.progress;
  }
  if (!Util.isUnset(request.versionId)) {
    body['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReportUploadProgress',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportUploadProgress(request: ReportUploadProgressRequest): ReportUploadProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportUploadProgressWithOptions(request, runtime);
}

model ReportUploadResultRequest {
  appId?: string(name='AppId', description='应用ID'),
  bucketName?: string(name='BucketName', description='上传的bucket名称'),
  env?: string(name='Env', description='环境'),
  fileFingerprintDTOList?: [ 
    {
      fileHash?: string(name='FileHash', description='文件hash'),
      fileSize?: long(name='FileSize', description='文件大小'),
    }
  ](name='FileFingerprintDTOList', description='用于pop传入的文件指纹信息'),
  fileSize?: long(name='FileSize', description='文件大小'),
  fileType?: string(name='FileType', description='上传文件类型'),
  region?: string(name='Region', description='上传的bucket所在region'),
  toolVersion?: string(name='ToolVersion', description='上传工具版本'),
  versionId?: string(name='VersionId', description='版本ID'),
}

model ReportUploadResultResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReportUploadResultResponse = {
  headers: map[string]string(name='headers'),
  body: ReportUploadResultResponseBody(name='body'),
}

async function reportUploadResultWithOptions(request: ReportUploadResultRequest, runtime: Util.RuntimeOptions): ReportUploadResultResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.bucketName)) {
    body['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.fileFingerprintDTOList)) {
    body['FileFingerprintDTOList'] = request.fileFingerprintDTOList;
  }
  if (!Util.isUnset(request.fileSize)) {
    body['FileSize'] = request.fileSize;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.toolVersion)) {
    body['ToolVersion'] = request.toolVersion;
  }
  if (!Util.isUnset(request.versionId)) {
    body['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReportUploadResult',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportUploadResult(request: ReportUploadResultRequest): ReportUploadResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportUploadResultWithOptions(request, runtime);
}

model ReportUploadStatusRequest {
  appId?: string(name='AppId', description='应用ID'),
  env?: string(name='Env', description='环境'),
  memo?: string(name='Memo', description='备注信息'),
  status?: string(name='Status', description='上传状态'),
  versionId?: string(name='VersionId', description='版本ID'),
}

model ReportUploadStatusResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReportUploadStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportUploadStatusResponseBody(name='body'),
}

async function reportUploadStatusWithOptions(request: ReportUploadStatusRequest, runtime: Util.RuntimeOptions): ReportUploadStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.memo)) {
    body['Memo'] = request.memo;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.versionId)) {
    body['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReportUploadStatus',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportUploadStatus(request: ReportUploadStatusRequest): ReportUploadStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportUploadStatusWithOptions(request, runtime);
}

model StopAppSessionRequest {
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='自定义用户id'),
}

model StopAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model StopAppSessionResponse = {
  headers: map[string]string(name='headers'),
  body: StopAppSessionResponseBody(name='body'),
}

async function stopAppSessionWithOptions(request: StopAppSessionRequest, runtime: Util.RuntimeOptions): StopAppSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.platformSessionId)) {
    query['PlatformSessionId'] = request.platformSessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopAppSession(request: StopAppSessionRequest): StopAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAppSessionWithOptions(request, runtime);
}

model TotalAppliedConsumStatRequest {
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  packageType?: string(name='PackageType', description='资源类型,PackageType[CU(cu),code,cssResourceType,desc]'),
  queryEndDate?: string(name='QueryEndDate', description='查询结束时间'),
  queryStartDate?: string(name='QueryStartDate', description='查询开始时间'),
}

model TotalAppliedConsumStatResponseBody = {
  code?: string(name='Code', description='业务处理结果Code'),
  data?: [ 
    {
      appliedId?: string(name='AppliedId', description='应用ID'),
      consumptionCu?: long(name='ConsumptionCu', description='分钟级消耗CU'),
      statDate?: string(name='StatDate', description='统计日期'),
    }
  ](name='Data', description='业务对象'),
  message?: string(name='Message', description='业务处理消息摘要'),
  requestId?: string(name='RequestId', description='操作请求ID'),
  success?: boolean(name='Success', description='业务处理是否成功'),
}

model TotalAppliedConsumStatResponse = {
  headers: map[string]string(name='headers'),
  body: TotalAppliedConsumStatResponseBody(name='body'),
}

async function totalAppliedConsumStatWithOptions(request: TotalAppliedConsumStatRequest, runtime: Util.RuntimeOptions): TotalAppliedConsumStatResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.operatorType)) {
    body['OperatorType'] = request.operatorType;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.queryEndDate)) {
    body['QueryEndDate'] = request.queryEndDate;
  }
  if (!Util.isUnset(request.queryStartDate)) {
    body['QueryStartDate'] = request.queryStartDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TotalAppliedConsumStat',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function totalAppliedConsumStat(request: TotalAppliedConsumStatRequest): TotalAppliedConsumStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return totalAppliedConsumStatWithOptions(request, runtime);
}

model TotalAppliedNearRealStatRequest {
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  orderBy?: string(name='OrderBy', description='排序类型。默认：AppliedConcurrency_Desc,AppliedNearRealOrderConditionType[AppliedConcurrency_Desc(AppliedConcurrency_Desc,根据实时并发路数降序排列),AppliedConcurrency_Asc(AppliedConcurrency_Asc,根据实时并发路数升序排列),AppliedConsumptionCu_Desc(AppliedConsumptionCu_Desc,根据实时CU消耗降序排列),AppliedConsumptionCu_Asc(AppliedConsumptionCu_Asc,根据实时CU消耗升序排列),orderByType,desc]'),
  packageType?: string(name='PackageType', description='资源类型,PackageType[CU(cu),code,cssResourceType,desc]'),
  pageNumber?: int32(name='PageNumber', description='当前页码，默认1'),
  pageSize?: int32(name='PageSize', description='每页项数，默认20,最大100'),
}

model TotalAppliedNearRealStatResponseBody = {
  code?: string(name='Code', description='业务处理结果Code'),
  data?: {
    totalConcurrency?: long(name='TotalConcurrency', description='实时消耗并发'),
    totalConsumptionCu?: double(name='TotalConsumptionCu', description='实时消耗CU'),
  }(name='Data', description='业务对象'),
  message?: string(name='Message', description='业务处理消息摘要'),
  requestId?: string(name='RequestId', description='操作请求ID'),
  success?: boolean(name='Success', description='业务处理是否成功'),
}

model TotalAppliedNearRealStatResponse = {
  headers: map[string]string(name='headers'),
  body: TotalAppliedNearRealStatResponseBody(name='body'),
}

async function totalAppliedNearRealStatWithOptions(request: TotalAppliedNearRealStatRequest, runtime: Util.RuntimeOptions): TotalAppliedNearRealStatResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.operatorType)) {
    body['OperatorType'] = request.operatorType;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TotalAppliedNearRealStat',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function totalAppliedNearRealStat(request: TotalAppliedNearRealStatRequest): TotalAppliedNearRealStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return totalAppliedNearRealStatWithOptions(request, runtime);
}

model TotalQueryResourcePackageRequest {
  operatorId?: string(name='OperatorId', description='请求操作人Id'),
  operatorType?: string(name='OperatorType', description='请求操作人类型'),
  packageType?: string(name='PackageType', description='资源包类型,PackageType[CU(cu),code,cssResourceType,desc]'),
}

model TotalQueryResourcePackageResponseBody = {
  code?: string(name='Code', description='业务处理结果Code'),
  data?: {
    tenantUid?: string(name='TenantUid', description='租户UserId'),
    totalAmount?: long(name='TotalAmount', description='当前所有有效资源包总量'),
    totalDate?: string(name='TotalDate', description='计算时间'),
  }(name='Data', description='业务对象'),
  message?: string(name='Message', description='业务处理消息摘要'),
  requestId?: string(name='RequestId', description='操作请求ID'),
  success?: boolean(name='Success', description='业务处理是否成功'),
}

model TotalQueryResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: TotalQueryResourcePackageResponseBody(name='body'),
}

async function totalQueryResourcePackageWithOptions(request: TotalQueryResourcePackageRequest, runtime: Util.RuntimeOptions): TotalQueryResourcePackageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.operatorType)) {
    body['OperatorType'] = request.operatorType;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TotalQueryResourcePackage',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function totalQueryResourcePackage(request: TotalQueryResourcePackageRequest): TotalQueryResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return totalQueryResourcePackageWithOptions(request, runtime);
}

model DataAppliedConsumptionMapValue = {
  appliedId?: string(name='AppliedId', description='应用ID'),
  statDate?: string(name='StatDate', description='统计日期'),
  consumptionCu?: long(name='ConsumptionCu', description='分钟级消耗CU'),
}

