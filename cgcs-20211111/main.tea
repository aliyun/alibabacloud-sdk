/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cgcs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAdaptationRequest {
  adaptTarget?: {
    bitRate?: int32(name='BitRate'),
    frameRate?: int32(name='FrameRate'),
    resolution?: string(name='Resolution'),
    startProgram?: string(name='StartProgram'),
  }(name='AdaptTarget'),
  appVersionId?: string(name='AppVersionId'),
}

model CreateAdaptationShrinkRequest {
  adaptTargetShrink?: string(name='AdaptTarget'),
  appVersionId?: string(name='AppVersionId'),
}

model CreateAdaptationResponseBody = {
  adaptApplyId?: long(name='AdaptApplyId'),
  requestId?: string(name='RequestId'),
}

model CreateAdaptationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAdaptationResponseBody(name='body'),
}

async function createAdaptationWithOptions(tmpReq: CreateAdaptationRequest, runtime: Util.RuntimeOptions): CreateAdaptationResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAdaptationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adaptTarget)) {
    request.adaptTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adaptTarget, 'AdaptTarget', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.adaptTargetShrink)) {
    body['AdaptTarget'] = request.adaptTargetShrink;
  }
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAdaptation',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAdaptation(request: CreateAdaptationRequest): CreateAdaptationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAdaptationWithOptions(request, runtime);
}

model CreateAppRequest {
  appName?: string(name='AppName'),
  appType?: string(name='AppType'),
}

model CreateAppResponseBody = {
  appId?: string(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateAppSessionRequest {
  appId?: string(name='AppId', description='应用ID'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  clientIp?: string(name='ClientIp', description='客户端ip'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  customUserId?: string(name='CustomUserId', description='自定义用户id'),
  datasetId?: string(name='DatasetId'),
  enablePostpaid?: boolean(name='EnablePostpaid'),
  resultStore?: {
    need?: boolean(name='Need'),
    storeInfo?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='StoreInfo'),
    type?: string(name='Type'),
  }(name='ResultStore'),
  startParameters?: [ 
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value'),
    }
  ](name='StartParameters', description='启动参数'),
  startParametersV2?: [ 
    {
      key?: string(name='Key'),
      value?: any(name='Value'),
    }
  ](name='StartParametersV2'),
  systemInfo?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='SystemInfo', description='系统信息：如端侧机型等信息'),
  timeout?: long(name='Timeout'),
}

model CreateAppSessionShrinkRequest {
  appId?: string(name='AppId', description='应用ID'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  clientIp?: string(name='ClientIp', description='客户端ip'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  customUserId?: string(name='CustomUserId', description='自定义用户id'),
  datasetId?: string(name='DatasetId'),
  enablePostpaid?: boolean(name='EnablePostpaid'),
  resultStoreShrink?: string(name='ResultStore'),
  startParameters?: [ 
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value'),
    }
  ](name='StartParameters', description='启动参数'),
  startParametersV2Shrink?: string(name='StartParametersV2'),
  systemInfo?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='SystemInfo', description='系统信息：如端侧机型等信息'),
  timeout?: long(name='Timeout'),
}

model CreateAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model CreateAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppSessionResponseBody(name='body'),
}

async function createAppSessionWithOptions(tmpReq: CreateAppSessionRequest, runtime: Util.RuntimeOptions): CreateAppSessionResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAppSessionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resultStore)) {
    request.resultStoreShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resultStore, 'ResultStore', 'json');
  }
  if (!Util.isUnset(tmpReq.startParametersV2)) {
    request.startParametersV2Shrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.startParametersV2, 'StartParametersV2', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appVersion)) {
    query['AppVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.customUserId)) {
    query['CustomUserId'] = request.customUserId;
  }
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.enablePostpaid)) {
    query['EnablePostpaid'] = request.enablePostpaid;
  }
  if (!Util.isUnset(request.resultStoreShrink)) {
    query['ResultStore'] = request.resultStoreShrink;
  }
  if (!Util.isUnset(request.startParameters)) {
    query['StartParameters'] = request.startParameters;
  }
  if (!Util.isUnset(request.startParametersV2Shrink)) {
    query['StartParametersV2'] = request.startParametersV2Shrink;
  }
  if (!Util.isUnset(request.systemInfo)) {
    query['SystemInfo'] = request.systemInfo;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppSession(request: CreateAppSessionRequest): CreateAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppSessionWithOptions(request, runtime);
}

model CreateAppVersionRequest {
  appId?: string(name='AppId'),
  appVersionName?: string(name='AppVersionName'),
}

model CreateAppVersionResponseBody = {
  appVersionId?: string(name='AppVersionId'),
  requestId?: string(name='RequestId'),
}

model CreateAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppVersionResponseBody(name='body'),
}

async function createAppVersionWithOptions(request: CreateAppVersionRequest, runtime: Util.RuntimeOptions): CreateAppVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appVersionName)) {
    body['AppVersionName'] = request.appVersionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppVersion',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppVersion(request: CreateAppVersionRequest): CreateAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppVersionWithOptions(request, runtime);
}

model CreateDatasetDeployTaskRequest {
  clientToken?: string(name='ClientToken'),
  customParam?: string(name='CustomParam'),
  needUnzip?: boolean(name='NeedUnzip'),
  ossBucket?: string(name='OssBucket'),
  ossFilePath?: string(name='OssFilePath'),
  ossRegionId?: string(name='OssRegionId'),
  sourceType?: string(name='SourceType'),
}

model CreateDatasetDeployTaskResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  taskId?: string(name='TaskId', description='应用版本'),
}

model CreateDatasetDeployTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDatasetDeployTaskResponseBody(name='body'),
}

async function createDatasetDeployTaskWithOptions(request: CreateDatasetDeployTaskRequest, runtime: Util.RuntimeOptions): CreateDatasetDeployTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.customParam)) {
    query['CustomParam'] = request.customParam;
  }
  if (!Util.isUnset(request.needUnzip)) {
    query['NeedUnzip'] = request.needUnzip;
  }
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossFilePath)) {
    query['OssFilePath'] = request.ossFilePath;
  }
  if (!Util.isUnset(request.ossRegionId)) {
    query['OssRegionId'] = request.ossRegionId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDatasetDeployTask',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDatasetDeployTask(request: CreateDatasetDeployTaskRequest): CreateDatasetDeployTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatasetDeployTaskWithOptions(request, runtime);
}

model DeleteAppRequest {
  appId?: string(name='AppId'),
}

model DeleteAppResponseBody = {
  appId?: string(name='AppId'),
  requestId?: string(name='RequestId'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApp',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DeleteAppVersionRequest {
  appVersionId?: string(name='AppVersionId'),
}

model DeleteAppVersionResponseBody = {
  appVersionId?: string(name='AppVersionId'),
  requestId?: string(name='RequestId'),
}

model DeleteAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppVersionResponseBody(name='body'),
}

async function deleteAppVersionWithOptions(request: DeleteAppVersionRequest, runtime: Util.RuntimeOptions): DeleteAppVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAppVersion',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAppVersion(request: DeleteAppVersionRequest): DeleteAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppVersionWithOptions(request, runtime);
}

model GetAdaptationRequest {
  adaptApplyId?: long(name='AdaptApplyId'),
  appVersionId?: string(name='AppVersionId'),
}

model GetAdaptationResponseBody = {
  adaptApplyId?: long(name='AdaptApplyId'),
  adaptTarget?: {
    bitRate?: int32(name='BitRate'),
    frameRate?: int32(name='FrameRate'),
    resolution?: string(name='Resolution'),
    startProgram?: string(name='StartProgram'),
  }(name='AdaptTarget'),
  appId?: string(name='AppId'),
  appVersionId?: string(name='AppVersionId'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  requestId?: string(name='RequestId'),
}

model GetAdaptationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAdaptationResponseBody(name='body'),
}

async function getAdaptationWithOptions(request: GetAdaptationRequest, runtime: Util.RuntimeOptions): GetAdaptationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.adaptApplyId)) {
    body['AdaptApplyId'] = request.adaptApplyId;
  }
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAdaptation',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAdaptation(request: GetAdaptationRequest): GetAdaptationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAdaptationWithOptions(request, runtime);
}

model GetAppRequest {
  appId?: string(name='AppId'),
}

model GetAppResponseBody = {
  appId?: string(name='AppId'),
  appName?: string(name='AppName'),
  appType?: string(name='AppType'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  requestId?: string(name='RequestId'),
  versionAdaptNum?: long(name='VersionAdaptNum'),
  versionTotalNum?: long(name='VersionTotalNum'),
}

model GetAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppResponseBody(name='body'),
}

async function getAppWithOptions(request: GetAppRequest, runtime: Util.RuntimeOptions): GetAppResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetApp',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApp(request: GetAppRequest): GetAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppWithOptions(request, runtime);
}

model GetAppSessionRequest {
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
}

model GetAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
  status?: string(name='Status', description='状态'),
}

model GetAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppSessionResponseBody(name='body'),
}

async function getAppSessionWithOptions(request: GetAppSessionRequest, runtime: Util.RuntimeOptions): GetAppSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.platformSessionId)) {
    query['PlatformSessionId'] = request.platformSessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppSession(request: GetAppSessionRequest): GetAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppSessionWithOptions(request, runtime);
}

model GetAppVersionRequest {
  appVersionId?: string(name='AppVersionId'),
}

model GetAppVersionResponseBody = {
  appId?: string(name='AppId'),
  appVersionId?: string(name='AppVersionId'),
  appVersionName?: string(name='AppVersionName'),
  appVersionStatus?: string(name='AppVersionStatus'),
  appVersionStatusMemo?: string(name='AppVersionStatusMemo'),
  consumeCu?: double(name='ConsumeCu'),
  fileAddress?: string(name='FileAddress'),
  fileSize?: long(name='FileSize'),
  fileUploadFinishTime?: string(name='FileUploadFinishTime'),
  fileUploadType?: string(name='FileUploadType'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  requestId?: string(name='RequestId'),
}

model GetAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppVersionResponseBody(name='body'),
}

async function getAppVersionWithOptions(request: GetAppVersionRequest, runtime: Util.RuntimeOptions): GetAppVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAppVersion',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppVersion(request: GetAppVersionRequest): GetAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppVersionWithOptions(request, runtime);
}

model GetDatasetRequest {
  datasetId?: string(name='DatasetId'),
}

model GetDatasetResponseBody = {
  customParam?: string(name='CustomParam', description='应用id'),
  datasetId?: string(name='DatasetId', description='自定义会话id'),
  datasetSize?: long(name='DatasetSize'),
  requestId?: string(name='RequestId', description='请求id'),
}

model GetDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDatasetResponseBody(name='body'),
}

async function getDatasetWithOptions(request: GetDatasetRequest, runtime: Util.RuntimeOptions): GetDatasetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataset',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDatasetWithOptions(request, runtime);
}

model ListAppRequest {
  keySearch?: string(name='KeySearch'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListAppResponseBody = {
  apps?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      appType?: string(name='AppType'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      versionAdaptNum?: long(name='VersionAdaptNum'),
      versionTotalNum?: long(name='VersionTotalNum'),
    }
  ](name='Apps'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppResponseBody(name='body'),
}

async function listAppWithOptions(request: ListAppRequest, runtime: Util.RuntimeOptions): ListAppResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.keySearch)) {
    body['KeySearch'] = request.keySearch;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListApp',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApp(request: ListAppRequest): ListAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppWithOptions(request, runtime);
}

model ListAppSessionsRequest {
  appId?: string(name='AppId'),
  customSessionIds?: [ string ](name='CustomSessionIds', description='自定义会话id'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  platformSessionIds?: [ string ](name='PlatformSessionIds', description='自定义用户id'),
}

model ListAppSessionsResponseBody = {
  appSessions?: [ 
    {
      appId?: string(name='AppId', description='应用id'),
      appVersion?: string(name='AppVersion', description='应用版本'),
      customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
      platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
      status?: string(name='Status', description='状态'),
    }
  ](name='AppSessions'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='请求id'),
  totalCount?: int32(name='TotalCount'),
}

model ListAppSessionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppSessionsResponseBody(name='body'),
}

async function listAppSessionsWithOptions(request: ListAppSessionsRequest, runtime: Util.RuntimeOptions): ListAppSessionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.customSessionIds)) {
    query['CustomSessionIds'] = request.customSessionIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.platformSessionIds)) {
    query['PlatformSessionIds'] = request.platformSessionIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAppSessions',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppSessions(request: ListAppSessionsRequest): ListAppSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppSessionsWithOptions(request, runtime);
}

model ListAppVersionRequest {
  appId?: string(name='AppId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListAppVersionResponseBody = {
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  versions?: [ 
    {
      appId?: string(name='AppId'),
      appVersionId?: string(name='AppVersionId'),
      appVersionName?: string(name='AppVersionName'),
      appVersionStatus?: string(name='AppVersionStatus'),
      appVersionStatusMemo?: string(name='AppVersionStatusMemo'),
      consumeCu?: double(name='ConsumeCu'),
      fileAddress?: string(name='FileAddress'),
      fileSize?: long(name='FileSize'),
      fileUploadFinishTime?: string(name='FileUploadFinishTime'),
      fileUploadType?: string(name='FileUploadType'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
    }
  ](name='Versions'),
}

model ListAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppVersionResponseBody(name='body'),
}

async function listAppVersionWithOptions(request: ListAppVersionRequest, runtime: Util.RuntimeOptions): ListAppVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAppVersion',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppVersion(request: ListAppVersionRequest): ListAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppVersionWithOptions(request, runtime);
}

model ModifyAppRequest {
  appId?: string(name='AppId'),
  appName?: string(name='AppName'),
}

model ModifyAppResponseBody = {
  appId?: string(name='AppId'),
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApp',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyAppVersionRequest {
  appVersionId?: string(name='AppVersionId'),
  appVersionName?: string(name='AppVersionName'),
}

model ModifyAppVersionResponseBody = {
  appVersionId?: string(name='AppVersionId'),
  requestId?: string(name='RequestId'),
}

model ModifyAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppVersionResponseBody(name='body'),
}

async function modifyAppVersionWithOptions(request: ModifyAppVersionRequest, runtime: Util.RuntimeOptions): ModifyAppVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appVersionId)) {
    body['AppVersionId'] = request.appVersionId;
  }
  if (!Util.isUnset(request.appVersionName)) {
    body['AppVersionName'] = request.appVersionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppVersion',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAppVersion(request: ModifyAppVersionRequest): ModifyAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppVersionWithOptions(request, runtime);
}

model StopAppSessionRequest {
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='自定义用户id'),
}

model StopAppSessionResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  customSessionId?: string(name='CustomSessionId', description='自定义会话id'),
  platformSessionId?: string(name='PlatformSessionId', description='平台会话id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model StopAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopAppSessionResponseBody(name='body'),
}

async function stopAppSessionWithOptions(request: StopAppSessionRequest, runtime: Util.RuntimeOptions): StopAppSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customSessionId)) {
    query['CustomSessionId'] = request.customSessionId;
  }
  if (!Util.isUnset(request.platformSessionId)) {
    query['PlatformSessionId'] = request.platformSessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopAppSession',
    version = '2021-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopAppSession(request: StopAppSessionRequest): StopAppSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAppSessionWithOptions(request, runtime);
}

