/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CGCS';
  @version = '2021-11-11';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchCheckSessionRequest {
  records: [ 
    {
      customSessionId?: string(name='CustomSessionId'),
      platformSessionId?: string(name='PlatformSessionId'),
      referenceInfo?: map[string]any(name='ReferenceInfo'),
      type: string(name='Type'),
    }
  ](name='Records', shrink='json', position='Query'),
}

model BatchCheckSessionResponseBody = {
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model BatchCheckSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCheckSessionResponseBody(name='body'),
}

async function batchCheckSession(request: BatchCheckSessionRequest): BatchCheckSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCheckSession', 'POST', '/', 'json', false, 'json', request);
}

model CancelReserveTaskRequest {
  clientToken?: string(name='ClientToken', example='2YEF0****', position='Body'),
  taskId: string(name='TaskId', example='b354****', position='Body'),
}

model CancelReserveTaskResponseBody = {
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  taskId?: string(name='TaskId', example='b354****'),
}

model CancelReserveTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelReserveTaskResponseBody(name='body'),
}

async function cancelReserveTask(request: CancelReserveTaskRequest): CancelReserveTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelReserveTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateAdaptationRequest {
  adaptTarget?: {
    bitRate?: int32(name='BitRate', example='30'),
    frameRate?: int32(name='FrameRate', example='30'),
    resolution?: string(name='Resolution', example='1080p'),
    startProgram?: string(name='StartProgram', example='/example/example.exe'),
  }(name='AdaptTarget', shrink='json', position='Body'),
  appVersionId: string(name='AppVersionId', example='1432****', position='Body'),
}

model CreateAdaptationResponseBody = {
  adaptApplyId?: long(name='AdaptApplyId', example='5435****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model CreateAdaptationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAdaptationResponseBody(name='body'),
}

async function createAdaptation(request: CreateAdaptationRequest): CreateAdaptationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAdaptation', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppRequest {
  appName: string(name='AppName', example='example', position='Body'),
  appType: string(name='AppType', example='end_game', position='Body'),
  streamingAppId?: string(name='StreamingAppId', example='47d0bd4d-8815-48a2-b783-6cbba89d****', position='Body'),
  streamingSolution?: string(name='StreamingSolution', example='self-have-streaming', position='Body'),
}

model CreateAppResponseBody = {
  appId?: string(name='AppId', example='4384****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppSessionRequest {
  adapterFileId?: string(name='AdapterFileId', description='适配文件ID。此功能灰度开放，如未约定使用请勿传入。', example='501716211209548966XXXX', position='Query'),
  appId: string(name='AppId', example='13027XXXX', position='Query'),
  appVersion?: string(name='AppVersion', example='35067XXXX', position='Query'),
  clientIp?: string(name='ClientIp', example='192.168.XXX.XXX', position='Query'),
  customSessionId: string(name='CustomSessionId', example='1ADE0XXXX', maxLength=64, position='Query'),
  customUserId?: string(name='CustomUserId', example='2YEF0XXXX', maxLength=64, position='Query'),
  districtId?: string(name='DistrictId', example='huadong', position='Query'),
  enablePostpaid?: boolean(name='EnablePostpaid', example='false', position='Query'),
  projectId?: string(name='ProjectId', description='项目ID。如果已将应用关联到项目，创建会话时需填写正确的项目ID。', example='d9a8****', position='Query'),
  startParameters?: [ 
    {
      key?: string(name='Key', example='startArgument'),
      value?: string(name='Value', example='exampleValue'),
    }
  ](name='StartParameters', position='Query'),
  systemInfo?: [ 
    {
      key?: string(name='Key', example='utdid'),
      value?: string(name='Value', example='OE0usD+APXXXX'),
    }
  ](name='SystemInfo', position='Query'),
  timeout?: long(name='Timeout', example='1800', position='Query'),
}

model CreateAppSessionResponseBody = {
  appId?: string(name='AppId', example='13027XXXX'),
  appVersion?: string(name='AppVersion', example='35067XXXX'),
  customSessionId?: string(name='CustomSessionId', example='1ADE0XXXX'),
  platformSessionId?: string(name='PlatformSessionId', example='100XXXX'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model CreateAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppSessionResponseBody(name='body'),
}

async function createAppSession(request: CreateAppSessionRequest): CreateAppSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppSession', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppSessionBatchRequest {
  appInfos: [ 
    {
      adapterFileId?: string(name='AdapterFileId'),
      appId: string(name='AppId', minLength=1, maxLength=64),
      appVersion?: string(name='AppVersion'),
      clientIp?: string(name='ClientIp'),
      customUserId?: string(name='CustomUserId'),
      customerSessionId: string(name='CustomerSessionId', minLength=1, maxLength=64),
      datasetId?: string(name='DatasetId'),
      districtId?: string(name='DistrictId'),
      projectId?: string(name='ProjectId'),
      resultStore?: {
        need?: boolean(name='Need'),
        storeInfo?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='StoreInfo'),
        type?: string(name='Type'),
      }(name='ResultStore'),
      startParameters?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='StartParameters'),
      systemInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='SystemInfo'),
    }
  ](name='AppInfos', shrink='json', position='Query'),
  customTaskId: string(name='CustomTaskId', minLength=1, maxLength=64, position='Query'),
  timeout: int32(name='Timeout', minimum=1, maximum=4320, position='Query'),
}

model CreateAppSessionBatchResponseBody = {
  customTaskId?: string(name='CustomTaskId'),
  platformTaskId?: string(name='PlatformTaskId'),
  requestId?: string(name='RequestId'),
}

model CreateAppSessionBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppSessionBatchResponseBody(name='body'),
}

async function createAppSessionBatch(request: CreateAppSessionBatchRequest): CreateAppSessionBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppSessionBatch', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppSessionBatchSyncRequest {
  appInfos: [ 
    {
      adapterFileId?: string(name='AdapterFileId', example='501716211209548966XXXX'),
      appId: string(name='AppId', example='13027****', minLength=1, maxLength=64),
      appVersion?: string(name='AppVersion', example='35067****'),
      clientIp?: string(name='ClientIp', example='192.168.XX.XX'),
      customUserId?: string(name='CustomUserId', example='2YEF0****'),
      customerSessionId: string(name='CustomerSessionId', example='1ADE0****', minLength=1, maxLength=64),
      districtId?: string(name='DistrictId', example='huadong'),
      matchRules?: [ 
        {
          key?: string(name='Key', example='component'),
          type?: string(name='Type', example='in'),
          values?: [ string ](name='Values'),
        }
      ](name='MatchRules'),
      projectId?: string(name='ProjectId', example='d9a8****'),
      startParameters?: [ 
        {
          key?: string(name='Key', example='startArgument'),
          value?: string(name='Value', example='exampleValue'),
        }
      ](name='StartParameters'),
      systemInfo?: [ 
        {
          key?: string(name='Key', example='utdid'),
          value?: string(name='Value', example='OE0usD+AP****'),
        }
      ](name='SystemInfo'),
      tags?: [ 
        {
          key?: string(name='Key', example='exampleTag'),
          value?: string(name='Value', example='exampleValue'),
        }
      ](name='Tags'),
    }
  ](name='AppInfos', shrink='json', position='Query'),
  batchId: string(name='BatchId', example='6d4d****', minLength=1, maxLength=64, position='Query'),
}

model CreateAppSessionBatchSyncResponseBody = {
  batchId?: string(name='BatchId', example='6d4d****'),
  failedList?: [ 
    {
      appId?: string(name='AppId', example='100****'),
      customSessionId?: string(name='CustomSessionId', example='1ADE0****'),
      failedInfo?: {
        errorCode?: string(name='ErrorCode', example='App type not support.'),
        errorMessage?: string(name='ErrorMessage', example='400'),
      }(name='FailedInfo'),
    }
  ](name='FailedList'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  resultList?: [ 
    {
      appId?: string(name='AppId', example='13027****'),
      appVersion?: string(name='AppVersion', example='35067****'),
      bizInfo?: {
        biz?: map[string]any(name='Biz', example='authToken'),
        endpoints?: [ 
          {
            accessHost?: string(name='AccessHost', example='127.0.X.X'),
            accessPort?: string(name='AccessPort', example='8080'),
            districtId?: string(name='DistrictId', example='huadong'),
            isp?: string(name='Isp', example='bgp'),
            name?: string(name='Name', example='exampleName'),
            type?: string(name='Type', example='Native'),
          }
        ](name='Endpoints'),
      }(name='BizInfo'),
      customSessionId?: string(name='CustomSessionId', example='1ADE0****'),
      platformSessionId?: string(name='PlatformSessionId', example='100****'),
    }
  ](name='ResultList'),
}

model CreateAppSessionBatchSyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppSessionBatchSyncResponseBody(name='body'),
}

async function createAppSessionBatchSync(request: CreateAppSessionBatchSyncRequest): CreateAppSessionBatchSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppSessionBatchSync', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppSessionSyncRequest {
  adapterFileId?: string(name='AdapterFileId', example='501716211209548966XXXX', position='Query'),
  appId: string(name='AppId', example='13027****', position='Query'),
  appVersion?: string(name='AppVersion', example='35067****', position='Query'),
  clientIp?: string(name='ClientIp', example='192.168.XX.XX', position='Query'),
  customSessionId: string(name='CustomSessionId', example='1ADE0****', maxLength=64, position='Query'),
  customUserId?: string(name='CustomUserId', example='2YEF0****', maxLength=64, position='Query'),
  districtId?: string(name='DistrictId', example='huadong', position='Query'),
  matchRules?: [ 
    {
      key?: string(name='Key', example='component'),
      type?: string(name='Type', example='in'),
      values?: [ string ](name='Values'),
    }
  ](name='MatchRules', position='Query'),
  projectId?: string(name='ProjectId', example='d9a8****', position='Query'),
  startParameters?: [ 
    {
      key?: string(name='Key', example='startArgument'),
      value?: string(name='Value', example='exampleValue'),
    }
  ](name='StartParameters', position='Query'),
  systemInfo?: [ 
    {
      key?: string(name='Key', example='utdid'),
      value?: string(name='Value', example='OE0usD+AP****'),
    }
  ](name='SystemInfo', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='exampleTag'),
      value?: string(name='Value', example='exampleValue'),
    }
  ](name='Tags', position='Query'),
}

model CreateAppSessionSyncResponseBody = {
  appId?: string(name='AppId', example='13027****'),
  appVersion?: string(name='AppVersion', example='35067****'),
  bizInfo?: {
    biz?: map[string]any(name='Biz', example='authToken'),
    endpoints?: [ 
      {
        accessHost?: string(name='AccessHost', example='127.0.X.X'),
        accessPort?: string(name='AccessPort', example='8080'),
        districtId?: string(name='DistrictId', example='huabei'),
        isp?: string(name='Isp', example='BGP'),
        name?: string(name='Name', example='exampleName'),
        type?: string(name='Type', example='Native'),
      }
    ](name='Endpoints'),
  }(name='BizInfo'),
  customSessionId?: string(name='CustomSessionId', example='1ADE0****'),
  platformSessionId?: string(name='PlatformSessionId', example='100****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model CreateAppSessionSyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppSessionSyncResponseBody(name='body'),
}

async function createAppSessionSync(request: CreateAppSessionSyncRequest): CreateAppSessionSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppSessionSync', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppVersionRequest {
  appId: string(name='AppId', example='4384****', position='Body'),
  appVersionName: string(name='AppVersionName', example='exampleVersion', position='Body'),
}

model CreateAppVersionResponseBody = {
  appVersionId?: string(name='AppVersionId', example='1432****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model CreateAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppVersionResponseBody(name='body'),
}

async function createAppVersion(request: CreateAppVersionRequest): CreateAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppVersion', 'POST', '/', 'json', true, 'form', request);
}

model CreateCapacityReservationRequest {
  appId: string(name='AppId', example='13027****', position='Body'),
  appVersion?: string(name='AppVersion', example='35067****', position='Body'),
  clientToken?: string(name='ClientToken', example='2YEF0****', position='Body'),
  districtId: string(name='DistrictId', example='huadong', position='Body'),
  expectResourceReadyTime?: string(name='ExpectResourceReadyTime', example='2022-02-02 22:22:22', deprecated='true', position='Body'),
  expectSessionCapacity: int32(name='ExpectSessionCapacity', example='100', position='Body'),
  projectId: string(name='ProjectId', example='d9a8****', position='Body'),
}

model CreateCapacityReservationResponseBody = {
  currMaxAllocatableSessionCapacity?: int32(name='CurrMaxAllocatableSessionCapacity', example='10000'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  taskId?: string(name='TaskId', example='b354****'),
}

model CreateCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCapacityReservationResponseBody(name='body'),
}

async function createCapacityReservation(request: CreateCapacityReservationRequest): CreateCapacityReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCapacityReservation', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppRequest {
  appId: string(name='AppId', example='4384****', position='Body'),
}

model DeleteAppResponseBody = {
  appId?: string(name='AppId', example='4384****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppVersionRequest {
  appVersionId: string(name='AppVersionId', example='1432****', position='Body'),
}

model DeleteAppVersionResponseBody = {
  appVersionId?: string(name='AppVersionId', example='1432****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model DeleteAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppVersionResponseBody(name='body'),
}

async function deleteAppVersion(request: DeleteAppVersionRequest): DeleteAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppVersion', 'POST', '/', 'json', true, 'form', request);
}

model GetAdaptationRequest {
  adaptApplyId?: long(name='AdaptApplyId', example='1432****', position='Body'),
  appVersionId?: string(name='AppVersionId', example='5435****', position='Body'),
}

model GetAdaptationResponseBody = {
  adaptApplyId?: long(name='AdaptApplyId', example='5435****'),
  adaptTarget?: {
    bitRate?: int32(name='BitRate', example='30'),
    frameRate?: int32(name='FrameRate', example='30'),
    resolution?: string(name='Resolution', example='1080p'),
    startProgram?: string(name='StartProgram', example='/example/example.exe'),
  }(name='AdaptTarget'),
  appId?: string(name='AppId', example='4384****'),
  appVersionId?: string(name='AppVersionId', example='1432****'),
  gmtCreate?: string(name='GmtCreate', example='2022-04-06 02:00:00'),
  gmtModified?: string(name='GmtModified', example='2022-04-06 02:00:00'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model GetAdaptationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAdaptationResponseBody(name='body'),
}

async function getAdaptation(request: GetAdaptationRequest): GetAdaptationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAdaptation', 'POST', '/', 'json', true, 'form', request);
}

model GetAppRequest {
  appId: string(name='AppId', example='4384****', position='Body'),
}

model GetAppResponseBody = {
  appId?: string(name='AppId', example='4384****'),
  appName?: string(name='AppName', example='example'),
  appType?: string(name='AppType', example='end_game'),
  gmtCreate?: string(name='GmtCreate', example='2022-04-06 02:00:00'),
  gmtModified?: string(name='GmtModified', example='2022-04-06 02:00:00'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  streamingAppId?: string(name='StreamingAppId', example='47d0bd4d-8815-48a2-b783-6cbba89d****'),
  streamingSolution?: string(name='StreamingSolution', example='self-have-streaming'),
  versionAdaptNum?: long(name='VersionAdaptNum', example='10'),
  versionTotalNum?: long(name='VersionTotalNum', example='28'),
}

model GetAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppResponseBody(name='body'),
}

async function getApp(request: GetAppRequest): GetAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApp', 'POST', '/', 'json', true, 'form', request);
}

model GetAppCcuRequest {
  appId?: string(name='AppId', example='13027****', position='Query'),
  appVersion?: string(name='AppVersion', example='35067****', position='Query'),
  projectId?: string(name='ProjectId', example='d9a8****', position='Query'),
}

model GetAppCcuResponseBody = {
  detailList?: [ 
    {
      appId?: string(name='AppId', example='13027****'),
      appVersion?: string(name='AppVersion', example='35067****'),
      ccu?: string(name='Ccu', example='100'),
      districtId?: string(name='DistrictId', example='huadong'),
      projectId?: string(name='ProjectId', example='d9a8****'),
    }
  ](name='DetailList'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  timestamp?: string(name='Timestamp'),
}

model GetAppCcuResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppCcuResponseBody(name='body'),
}

async function getAppCcu(request: GetAppCcuRequest): GetAppCcuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppCcu', 'GET', '/', 'json', false, 'json', request);
}

model GetAppSessionRequest {
  customSessionId?: string(name='CustomSessionId', example='1ADE0XXXX', position='Query'),
  platformSessionId?: string(name='PlatformSessionId', example='100XXXX', position='Query'),
}

model GetAppSessionResponseBody = {
  appId?: string(name='AppId', example='13027XXXX'),
  appVersion?: string(name='AppVersion', example='35067XXXX'),
  bizInfo?: {
    startTime?: string(name='StartTime', description='会话启动时间', example='2022-07-20 17:58:51'),
    stopTime?: string(name='StopTime', description='会话停止时间', example='2022-07-20 17:58:57'),
  }(name='BizInfo', description='业务特定的信息，如会话启动/停止时间。'),
  customSessionId?: string(name='CustomSessionId', example='1ADE0XXXX'),
  platformSessionId?: string(name='PlatformSessionId', example='100XXXX'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  status?: string(name='Status', example='running'),
}

model GetAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppSessionResponseBody(name='body'),
}

async function getAppSession(request: GetAppSessionRequest): GetAppSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppSession', 'POST', '/', 'json', false, 'json', request);
}

model GetAppVersionRequest {
  appVersionId: string(name='AppVersionId', example='1432****', position='Body'),
}

model GetAppVersionResponseBody = {
  appId?: string(name='AppId', example='4384****'),
  appVersionId?: string(name='AppVersionId', example='1432****'),
  appVersionName?: string(name='AppVersionName', example='exampleVersion'),
  appVersionStatus?: string(name='AppVersionStatus', example='file_uploading'),
  appVersionStatusMemo?: string(name='AppVersionStatusMemo'),
  consumeCu?: double(name='ConsumeCu', example='0.31'),
  fileAddress?: string(name='FileAddress', example='https://www.example.com/exampleFile.tar'),
  fileSize?: long(name='FileSize', example='1024'),
  fileUploadFinishTime?: string(name='FileUploadFinishTime', example='2022-04-06 02:00:00'),
  fileUploadType?: string(name='FileUploadType', example='local_file_upload'),
  gmtCreate?: string(name='GmtCreate', example='2022-04-06 02:00:00'),
  gmtModified?: string(name='GmtModified', example='2022-04-06 02:00:00'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model GetAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppVersionResponseBody(name='body'),
}

async function getAppVersion(request: GetAppVersionRequest): GetAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppVersion', 'POST', '/', 'json', true, 'form', request);
}

model GetCapacityRequest {
  appId?: string(name='AppId', example='13027****', position='Body'),
  appVersion?: string(name='AppVersion', example='35067****', position='Body'),
  districtId?: string(name='DistrictId', example='huadong', position='Body'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=100, position='Body'),
  projectId?: string(name='ProjectId', example='d9a8****', position='Body'),
}

model GetCapacityResponseBody = {
  capacities?: [ 
    {
      appId?: string(name='AppId', example='13027****'),
      appVersion?: string(name='AppVersion', example='35067****'),
      districtId?: string(name='DistrictId', example='huadong'),
      projectId?: string(name='ProjectId', example='d9a8****'),
      sessionCapacity?: int32(name='SessionCapacity', example='2'),
    }
  ](name='Capacities'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  total?: int32(name='Total', example='100'),
}

model GetCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCapacityResponseBody(name='body'),
}

async function getCapacity(request: GetCapacityRequest): GetCapacityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCapacity', 'POST', '/', 'json', true, 'form', request);
}

model GetReserveTaskDetailRequest {
  taskId: string(name='TaskId', example='b354****', position='Body'),
}

model GetReserveTaskDetailResponseBody = {
  appId?: string(name='AppId', example='13027****'),
  appVersion?: string(name='AppVersion', example='35067****'),
  currCompletedSessionCapacity?: int32(name='CurrCompletedSessionCapacity', example='100'),
  districtId?: string(name='DistrictId', example='huadong'),
  expectResourceReadyTime?: string(name='ExpectResourceReadyTime', example='2022-02-02 22:22:22'),
  expectSessionCapacity?: int32(name='ExpectSessionCapacity', example='100'),
  projectId?: string(name='ProjectId', example='d9a8****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  resBatchList?: [ 
    {
      resBatchId?: string(name='ResBatchId', example='726573XXXX'),
      resBatchTagName?: string(name='ResBatchTagName', example='resBatchId'),
    }
  ](name='ResBatchList'),
  taskId?: string(name='TaskId', example='b354****'),
  taskStatus?: string(name='TaskStatus', example='created'),
}

model GetReserveTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetReserveTaskDetailResponseBody(name='body'),
}

async function getReserveTaskDetail(request: GetReserveTaskDetailRequest): GetReserveTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetReserveTaskDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetResourcePublicIPsRequest {
  pageNum?: int32(name='PageNum', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=100, position='Body'),
  projectId?: string(name='ProjectId', example='d9a8****', position='Body'),
}

model GetResourcePublicIPsResponseBody = {
  ipList?: [ 
    {
      ip?: string(name='Ip', example='127.0.X.X'),
      projectId?: string(name='ProjectId', example='d9a8****'),
    }
  ](name='IpList'),
  pageNum?: int32(name='PageNum', example='20'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  total?: int32(name='Total', example='100'),
}

model GetResourcePublicIPsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourcePublicIPsResponseBody(name='body'),
}

async function getResourcePublicIPs(request: GetResourcePublicIPsRequest): GetResourcePublicIPsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourcePublicIPs', 'POST', '/', 'json', true, 'form', request);
}

model ListAppRequest {
  keySearch?: string(name='KeySearch', example='example', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListAppResponseBody = {
  apps?: [ 
    {
      appId?: string(name='AppId', example='4384****'),
      appName?: string(name='AppName', example='example'),
      appType?: string(name='AppType', example='end_game'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-06 02:00:00'),
      gmtModified?: string(name='GmtModified', example='2022-04-06 02:00:00'),
      versionAdaptNum?: long(name='VersionAdaptNum', example='10'),
      versionTotalNum?: long(name='VersionTotalNum', example='28'),
    }
  ](name='Apps'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  total?: long(name='Total', example='12'),
}

model ListAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppResponseBody(name='body'),
}

async function listApp(request: ListAppRequest): ListAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApp', 'POST', '/', 'json', true, 'form', request);
}

model ListAppSessionsRequest {
  appId?: string(name='AppId', example='13027XXXX', position='Query'),
  customSessionIds?: [ string ](name='CustomSessionIds', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  platformSessionIds?: [ string ](name='PlatformSessionIds', position='Query'),
  projectId?: string(name='ProjectId', example='d9a8****', position='Query'),
}

model ListAppSessionsResponseBody = {
  appSessions?: [ 
    {
      appId?: string(name='AppId', example='13027XXXX'),
      appVersion?: string(name='AppVersion', example='35067XXXX'),
      bizInfo?: {
        startTime?: string(name='StartTime', description='会话启动时间', example='2022-07-20 17:58:51'),
        stopTime?: string(name='StopTime', description='会话停止时间', example='2022-07-20 17:58:57'),
      }(name='BizInfo', description='业务特定的信息，如会话启动/停止时间。'),
      customSessionId?: string(name='CustomSessionId', example='1ADE0XXXX'),
      platformSessionId?: string(name='PlatformSessionId', example='100XXXX'),
      projectId?: string(name='ProjectId', example='d9a8****'),
      status?: string(name='Status', example='running'),
    }
  ](name='AppSessions'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListAppSessionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppSessionsResponseBody(name='body'),
}

async function listAppSessions(request: ListAppSessionsRequest): ListAppSessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppSessions', 'POST', '/', 'json', false, 'json', request);
}

model ListAppVersionRequest {
  appId: string(name='AppId', example='4384****', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListAppVersionResponseBody = {
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  total?: long(name='Total', example='16'),
  versions?: [ 
    {
      appId?: string(name='AppId', example='4384****'),
      appVersionId?: string(name='AppVersionId', example='1432****'),
      appVersionName?: string(name='AppVersionName', example='exampleVersion'),
      appVersionStatus?: string(name='AppVersionStatus', example='file_uploading'),
      appVersionStatusMemo?: string(name='AppVersionStatusMemo'),
      consumeCu?: double(name='ConsumeCu', example='0.31'),
      fileAddress?: string(name='FileAddress', example='https://www.example.com/exampleFile.tar'),
      fileSize?: long(name='FileSize', example='1024'),
      fileUploadFinishTime?: string(name='FileUploadFinishTime', example='2022-04-06 02:00:00'),
      fileUploadType?: string(name='FileUploadType', example='cloud_file_download'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-06 02:00:00'),
      gmtModified?: string(name='GmtModified', example='2022-04-06 02:00:00'),
    }
  ](name='Versions'),
}

model ListAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppVersionResponseBody(name='body'),
}

async function listAppVersion(request: ListAppVersionRequest): ListAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppVersion', 'POST', '/', 'json', true, 'form', request);
}

model ListInstancesRequest {
  districtId?: string(name='DistrictId', example='huadong', position='Query'),
  instanceId?: [ string ](name='InstanceId', position='Query'),
  instanceType?: string(name='InstanceType', example='gcs.r1c1m1.1xlarge', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='BEXZPF01W23U46598WVf', position='Query'),
  projectId?: string(name='ProjectId', example='4820372607851300489003', position='Query'),
  status?: string(name='Status', example='CREATING', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      creationTime?: string(name='CreationTime', example='2023-12-13T11:12:11Z'),
      districtId?: string(name='DistrictId', example='huadong'),
      instanceId?: string(name='InstanceId', example='gcs-bmt0kbn7e013aedg9'),
      instanceType?: string(name='InstanceType', example='gcs.r1c1m1.1xlarge'),
      projectId?: string(name='ProjectId', example='4820372607851300489003'),
      status?: string(name='Status', example='CREATING'),
    }
  ](name='Instances'),
  maxResults?: string(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='BEXZPF01W23U46598WVf'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'GET', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appId: string(name='AppId', example='4384****', position='Body'),
  appName: string(name='AppName', example='example', position='Body'),
}

model ModifyAppResponseBody = {
  appId?: string(name='AppId', example='4384****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', true, 'form', request);
}

model ModifyAppVersionRequest {
  appVersionId: string(name='AppVersionId', example='1432****', position='Body'),
  appVersionName: string(name='AppVersionName', example='exampleVersion', position='Body'),
}

model ModifyAppVersionResponseBody = {
  appVersionId?: string(name='AppVersionId', example='1432****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model ModifyAppVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppVersionResponseBody(name='body'),
}

async function modifyAppVersion(request: ModifyAppVersionRequest): ModifyAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppVersion', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseCapacityRequest {
  appId: string(name='AppId', example='13027****', position='Body'),
  appVersion?: string(name='AppVersion', example='35067****', position='Body'),
  districtId: string(name='DistrictId', example='huadong', position='Body'),
  expectReleaseSessionCapacity: int32(name='ExpectReleaseSessionCapacity', example='100', position='Body'),
  projectId: string(name='ProjectId', example='d9a8****', position='Body'),
}

model ReleaseCapacityResponseBody = {
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
  taskId?: string(name='TaskId', example='b354****'),
}

model ReleaseCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseCapacityResponseBody(name='body'),
}

async function releaseCapacity(request: ReleaseCapacityRequest): ReleaseCapacityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseCapacity', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseCapacityByBatchRequest {
  resBatchId: string(name='ResBatchId', example='726573XXXX', position='Body'),
}

model ReleaseCapacityByBatchResponseBody = {
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model ReleaseCapacityByBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseCapacityByBatchResponseBody(name='body'),
}

async function releaseCapacityByBatch(request: ReleaseCapacityByBatchRequest): ReleaseCapacityByBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseCapacityByBatch', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseInstancesRequest {
  amount: int32(name='Amount', example='1', position='Body'),
  districtId: string(name='DistrictId', example='huadong', position='Body'),
  instanceType: string(name='InstanceType', example='gcs.r1c1m1.1xlarge', position='Body'),
  projectId: string(name='ProjectId', example='4820372607851300489003', position='Body'),
}

model ReleaseInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model ReleaseInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancesResponseBody(name='body'),
}

async function releaseInstances(request: ReleaseInstancesRequest): ReleaseInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstances', 'POST', '/', 'json', true, 'form', request);
}

model ReserveInstancesRequest {
  amount: int32(name='Amount', example='1', position='Body'),
  districtId: string(name='DistrictId', example='huadong', position='Body'),
  instanceType: string(name='InstanceType', example='gcs.r1c1m1.1xlarge', position='Body'),
  projectId: string(name='ProjectId', example='5469588382860444937003', position='Body'),
}

model ReserveInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model ReserveInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReserveInstancesResponseBody(name='body'),
}

async function reserveInstances(request: ReserveInstancesRequest): ReserveInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReserveInstances', 'POST', '/', 'json', true, 'form', request);
}

model SendBizCocChangeCallbackRequest {
  platformSessionId?: string(name='PlatformSessionId', position='Query'),
  result?: boolean(name='Result', position='Query'),
}

model SendBizCocChangeCallbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model SendBizCocChangeCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendBizCocChangeCallbackResponseBody(name='body'),
}

async function sendBizCocChangeCallback(request: SendBizCocChangeCallbackRequest): SendBizCocChangeCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendBizCocChangeCallback', 'POST', '/', 'json', false, 'json', request);
}

model StopAppSessionRequest {
  customSessionId?: string(name='CustomSessionId', example='1ADE0XXXX', position='Query'),
  platformSessionId?: string(name='PlatformSessionId', example='100XXXX', position='Query'),
  stopParam?: [ 
    {
      key?: string(name='Key', description='目前支持的枚举值包括：
- reason：停止原因。', example='reason'),
      value?: any(name='Value', description='key对应的取值。', example='exampleValue'),
    }
  ](name='StopParam', description='停止容器参数。此参数将透传到Agent。', shrink='json', position='Query'),
}

model StopAppSessionResponseBody = {
  appId?: string(name='AppId', example='13027XXXX'),
  appVersion?: string(name='AppVersion', example='35067XXXX'),
  customSessionId?: string(name='CustomSessionId', example='1ADE0XXXX'),
  platformSessionId?: string(name='PlatformSessionId', example='100XXXX'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model StopAppSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopAppSessionResponseBody(name='body'),
}

async function stopAppSession(request: StopAppSessionRequest): StopAppSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAppSession', 'POST', '/', 'json', false, 'json', request);
}

model StopAppSessionBatchRequest {
  appId?: string(name='AppId', example='13027****', position='Query'),
  appVersion?: string(name='AppVersion', example='35067****', position='Query'),
  batchId: string(name='BatchId', example='6d4d****', position='Query'),
  projectId?: string(name='ProjectId', example='d9a8****', position='Query'),
  stopParam?: [ 
    {
      key?: string(name='Key', example='reason'),
      value?: any(name='Value', example='exampleValue'),
    }
  ](name='StopParam', shrink='json', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='exampleTag'),
      value?: string(name='Value', example='exampleValue'),
    }
  ](name='Tags', position='Query'),
}

model StopAppSessionBatchResponseBody = {
  appId?: string(name='AppId', example='13027****'),
  batchId?: string(name='BatchId', example='6d4d****'),
  projectId?: string(name='ProjectId', example='d9a8****'),
  requestId?: string(name='RequestId', example='46329898-489C-4E63-9BA1-C1DA5C5D0986'),
}

model StopAppSessionBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopAppSessionBatchResponseBody(name='body'),
}

async function stopAppSessionBatch(request: StopAppSessionBatchRequest): StopAppSessionBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAppSessionBatch', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSessionBizStatusRequest {
  bizStatus?: string(name='BizStatus', position='Query'),
  platformSessionId: string(name='PlatformSessionId', position='Query'),
}

model UpdateSessionBizStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    customSessionId?: string(name='CustomSessionId'),
    platformSessionId?: string(name='PlatformSessionId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSessionBizStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSessionBizStatusResponseBody(name='body'),
}

async function updateSessionBizStatus(request: UpdateSessionBizStatusRequest): UpdateSessionBizStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSessionBizStatus', 'POST', '/', 'json', false, 'json', request);
}

