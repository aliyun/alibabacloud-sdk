/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ddi';
  @version = '2020-06-17';
  @endpointRule = 'central';
  @endpointMap = {
    cn-qingdao = 'ddi.cn-qingdao.aliyuncs.com',
    cn-chengdu = 'ddi.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'ddi.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'ddi.cn-huhehaote.aliyuncs.com',
    cn-hongkong = 'ddi.cn-hongkong.aliyuncs.com',
    ap-southeast-2 = 'ddi.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'ddi.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'ddi.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'ddi.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'ddi.eu-west-1.aliyuncs.com',
    us-east-1 = 'ddi.us-east-1.aliyuncs.com',
    eu-central-1 = 'ddi.eu-central-1.aliyuncs.com',
    me-east-1 = 'ddi.me-east-1.aliyuncs.com',
    ap-south-1 = 'ddi.ap-south-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CloneFlowJobRequest {
  id: string(name='Id', description='克隆的目标作业ID。您可以调用ListFlowJob查看。', position='Query'),
  name?: string(name='Name', description='克隆的目标作业名称。', position='Query'),
  projectId: string(name='ProjectId', description='克隆的目标作业所属项目。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
}

model CloneFlowJobResponseBody = {
  id?: string(name='Id', description='新产生的作业ID。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CloneFlowJobResponse = {
  headers: map[string]string(name='headers'),
  body: CloneFlowJobResponseBody(name='body'),
}

async function cloneFlowJob(request: CloneFlowJobRequest): CloneFlowJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneFlowJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterV2Request {
  authorizeContent?: string(name='AuthorizeContent', position='Query'),
  auto?: boolean(name='Auto', position='Query'),
  autoPayOrder?: boolean(name='AutoPayOrder', position='Query'),
  bootstrapAction?: [ 
    {
      arg?: string(name='Arg'),
      name: string(name='Name'),
      path: string(name='Path'),
    }
  ](name='BootstrapAction', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clickHouseConf?: string(name='ClickHouseConf', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clusterType: string(name='ClusterType', position='Query'),
  config?: [ 
    {
      configKey: string(name='ConfigKey'),
      configValue: string(name='ConfigValue'),
      encrypt?: string(name='Encrypt'),
      fileName: string(name='FileName'),
      replace?: string(name='Replace'),
      serviceName: string(name='ServiceName'),
    }
  ](name='Config', position='Query'),
  configurations?: string(name='Configurations', position='Query'),
  depositType?: string(name='DepositType', position='Query'),
  emrVer: string(name='EmrVer', position='Query'),
  enableEas?: boolean(name='EnableEas', position='Query'),
  enableHighAvailability?: boolean(name='EnableHighAvailability', position='Query'),
  enableSsh?: boolean(name='EnableSsh', position='Query'),
  extraAttributes?: string(name='ExtraAttributes', position='Query'),
  hostComponentInfo?: [ 
    {
      componentNameList?: [ string ](name='ComponentNameList'),
      hostName?: string(name='HostName'),
      serviceName?: string(name='ServiceName'),
    }
  ](name='HostComponentInfo', position='Query'),
  hostGroup: [ 
    {
      autoRenew?: boolean(name='AutoRenew'),
      chargeType?: string(name='ChargeType'),
      clusterId?: string(name='ClusterId'),
      comment?: string(name='Comment'),
      createType?: string(name='CreateType'),
      diskCapacity: int32(name='DiskCapacity', minimum=40, maximum=20000),
      diskCount: int32(name='DiskCount', minimum=1, maximum=4),
      diskType: string(name='DiskType'),
      gpuDriver?: string(name='GpuDriver'),
      hostGroupId?: string(name='HostGroupId'),
      hostGroupName: string(name='HostGroupName'),
      hostGroupType: string(name='HostGroupType'),
      instanceType: string(name='InstanceType'),
      nodeCount: int32(name='NodeCount', minimum=2, maximum=1000),
      period?: int32(name='Period'),
      sysDiskCapacity: int32(name='SysDiskCapacity', minimum=40, maximum=500),
      sysDiskType: string(name='SysDiskType'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='HostGroup', position='Query'),
  initCustomHiveMetaDB?: boolean(name='InitCustomHiveMetaDB', position='Query'),
  instanceGeneration?: string(name='InstanceGeneration', position='Query'),
  isOpenPublicIp?: boolean(name='IsOpenPublicIp', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  logPath?: string(name='LogPath', position='Query'),
  machineType?: string(name='MachineType', position='Query'),
  masterPwd?: string(name='MasterPwd', position='Query'),
  metaStoreConf?: string(name='MetaStoreConf', position='Query'),
  metaStoreType?: string(name='MetaStoreType', position='Query'),
  name: string(name='Name', position='Query'),
  netType?: string(name='NetType', position='Query'),
  period?: int32(name='Period', minimum=1, maximum=36, position='Query'),
  promotionInfo?: [ 
    {
      productCode?: string(name='ProductCode'),
      promotionOptionCode?: string(name='PromotionOptionCode'),
      promotionOptionNo?: string(name='PromotionOptionNo'),
    }
  ](name='PromotionInfo', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  relatedClusterId?: string(name='RelatedClusterId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', position='Query'),
  serviceInfo?: [ 
    {
      serviceName?: string(name='ServiceName'),
      serviceVersion?: string(name='ServiceVersion'),
    }
  ](name='ServiceInfo', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  useCustomHiveMetaDB?: boolean(name='UseCustomHiveMetaDB', position='Query'),
  useLocalMetaDb?: boolean(name='UseLocalMetaDb', position='Query'),
  userDefinedEmrEcsRole?: string(name='UserDefinedEmrEcsRole', position='Query'),
  userInfo?: [ 
    {
      password: string(name='Password'),
      userId: string(name='UserId'),
      userName: string(name='UserName'),
    }
  ](name='UserInfo', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  whiteListType?: string(name='WhiteListType', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model CreateClusterV2ResponseBody = {
  clusterId?: string(name='ClusterId'),
  coreOrderId?: string(name='CoreOrderId'),
  emrOrderId?: string(name='EmrOrderId'),
  masterOrderId?: string(name='MasterOrderId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterV2Response = {
  headers: map[string]string(name='headers'),
  body: CreateClusterV2ResponseBody(name='body'),
}

async function createClusterV2(request: CreateClusterV2Request): CreateClusterV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateClusterV2', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowRequest {
  alertConf?: string(name='AlertConf', position='Query'),
  alertDingDingGroupBizId?: string(name='AlertDingDingGroupBizId', position='Query'),
  alertUserGroupBizId?: string(name='AlertUserGroupBizId', position='Query'),
  application?: string(name='Application', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  createCluster?: boolean(name='CreateCluster', position='Query'),
  cronExpression?: string(name='CronExpression', position='Query'),
  description: string(name='Description', position='Query'),
  endSchedule?: long(name='EndSchedule', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  name: string(name='Name', position='Query'),
  namespace?: string(name='Namespace', position='Query'),
  parentCategory?: string(name='ParentCategory', position='Query'),
  parentFlowList?: string(name='ParentFlowList', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startSchedule?: long(name='StartSchedule', position='Query'),
}

model CreateFlowResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowResponseBody(name='body'),
}

async function createFlow(request: CreateFlowRequest): CreateFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlow', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowCategoryRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  name: string(name='Name', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  type: string(name='Type', position='Query'),
}

model CreateFlowCategoryResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateFlowCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowCategoryResponseBody(name='body'),
}

async function createFlowCategory(request: CreateFlowCategoryRequest): CreateFlowCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowCategory', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowJobRequest {
  adhoc?: boolean(name='Adhoc', description='是否临时查询。', position='Query'),
  alertConf?: string(name='AlertConf', description='保留参数。', position='Query'),
  clientToken?: string(name='ClientToken', description='保留参数。', position='Query'),
  clusterId?: string(name='ClusterId', description='集群ID。您可以调用ListClusters查看集群的ID。', position='Query'),
  customVariables?: string(name='CustomVariables', description='自定义变量。', position='Query'),
  description: string(name='Description', description='作业的描述。', position='Query'),
  envConf?: string(name='EnvConf', description='环境变量设置。', position='Query'),
  failAct?: string(name='FailAct', description='失败策略，可能的取值：CONTINUE（提过本次作业），STOP（停止作业）', position='Query'),
  mode?: string(name='Mode', description='模型模式，取值如下：  YARN：将作业包装成一个Launcher提交至YARN中执行，LOCAL：作业直接在机器上以进程方式运行。', position='Query'),
  monitorConf?: string(name='MonitorConf', description='监控配置，仅SPARK_STREAMING类型作业支持监控配置。', position='Query'),
  name: string(name='Name', description='作业的名称。', position='Query'),
  paramConf?: string(name='ParamConf', description='参数设置。', position='Query'),
  params?: string(name='Params', description='作业内容。', position='Query'),
  parentCategory?: string(name='ParentCategory', description='父目录ID。您可以调用DescribeFlowCategory查看。', position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
  resourceList?: [ 
    {
      alias?: string(name='Alias', description='保留参数。'),
      path: string(name='Path', description='保留参数。'),
    }
  ](name='ResourceList', description='保留参数。', position='Query'),
  retryPolicy?: string(name='RetryPolicy', description='重试策略，保留参数。', position='Query'),
  runConf?: string(name='RunConf', description='运行配置，取值如下：priority（优先级），userName（任务的Linux提交用户），memory（内存，单位为MB），cores（核数）', position='Query'),
  type: string(name='Type', description='作业的类型，可能的取值有：SPARK，SPARK_STREAMING，ZEPPELIN', position='Query'),
}

model CreateFlowJobResponseBody = {
  id?: string(name='Id', description='作业ID。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateFlowJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowJobResponseBody(name='body'),
}

async function createFlowJob(request: CreateFlowJobRequest): CreateFlowJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowProjectRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description: string(name='Description', description='项目描述', position='Query'),
  name: string(name='Name', description='项目名称', position='Query'),
  productType?: string(name='ProductType', description='产品类型，固定值DATABRICKS_DATAINSIGHT', position='Query'),
  regionId: string(name='RegionId', description='地域ID', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', position='Query'),
}

model CreateFlowProjectResponseBody = {
  id?: string(name='Id', description='项目ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateFlowProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowProjectResponseBody(name='body'),
}

async function createFlowProject(request: CreateFlowProjectRequest): CreateFlowProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowProject', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowProjectUserRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  user: [ 
    {
      userId: string(name='UserId'),
      userName: string(name='UserName'),
    }
  ](name='User', position='Query'),
}

model CreateFlowProjectUserResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateFlowProjectUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowProjectUserResponseBody(name='body'),
}

async function createFlowProjectUser(request: CreateFlowProjectUserRequest): CreateFlowProjectUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowProjectUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateLibraryRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  libraryVersion?: string(name='LibraryVersion', position='Query'),
  name?: string(name='Name', position='Query'),
  properties?: string(name='Properties', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  sourceLocation?: string(name='SourceLocation', position='Query'),
  sourceType?: string(name='SourceType', position='Query'),
  type?: string(name='Type', position='Query'),
}

model CreateLibraryResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateLibraryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLibraryResponseBody(name='body'),
}

async function createLibrary(request: CreateLibraryRequest): CreateLibraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLibrary', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteFlowResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowResponseBody(name='body'),
}

async function deleteFlow(request: DeleteFlowRequest): DeleteFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlow', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowCategoryRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteFlowCategoryResponseBody = {
  flowId?: string(name='FlowId'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteFlowCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowCategoryResponseBody(name='body'),
}

async function deleteFlowCategory(request: DeleteFlowCategoryRequest): DeleteFlowCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowCategory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowProjectRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteFlowProjectResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteFlowProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowProjectResponseBody(name='body'),
}

async function deleteFlowProject(request: DeleteFlowProjectRequest): DeleteFlowProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowProject', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowProjectUserRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  userName: string(name='UserName', position='Query'),
}

model DeleteFlowProjectUserResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteFlowProjectUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowProjectUserResponseBody(name='body'),
}

async function deleteFlowProjectUser(request: DeleteFlowProjectUserRequest): DeleteFlowProjectUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowProjectUser', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterV2Request {
  id: string(name='Id', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeClusterV2ResponseBody = {
  clusterInfo?: {
    accessInfo?: {
      ZKLinks?: {
        ZKLink?: [ 
        {
          link?: string(name='Link'),
          port?: string(name='Port'),
        }
      ](name='ZKLink')
      }(name='ZKLinks'),
    }(name='AccessInfo'),
    autoScalingAllowed?: boolean(name='AutoScalingAllowed'),
    autoScalingByLoadAllowed?: boolean(name='AutoScalingByLoadAllowed'),
    autoScalingEnable?: boolean(name='AutoScalingEnable'),
    autoScalingSpotWithLimitAllowed?: boolean(name='AutoScalingSpotWithLimitAllowed'),
    autoScalingVersion?: string(name='AutoScalingVersion'),
    autoScalingWithGraceAllowed?: boolean(name='AutoScalingWithGraceAllowed'),
    bootstrapActionList?: {
      bootstrapAction?: [ 
      {
        arg?: string(name='Arg'),
        name?: string(name='Name'),
        path?: string(name='Path'),
      }
    ](name='BootstrapAction')
    }(name='BootstrapActionList'),
    bootstrapFailed?: boolean(name='BootstrapFailed'),
    chargeType?: string(name='ChargeType'),
    configurations?: string(name='Configurations'),
    coreNodeInService?: int32(name='CoreNodeInService'),
    coreNodeTotal?: int32(name='CoreNodeTotal'),
    createResource?: string(name='CreateResource'),
    createType?: string(name='CreateType'),
    depositType?: string(name='DepositType'),
    easEnable?: boolean(name='EasEnable'),
    expiredTime?: long(name='ExpiredTime'),
    extraInfo?: string(name='ExtraInfo'),
    failReason?: {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      requestId?: string(name='RequestId'),
    }(name='FailReason'),
    gatewayClusterIds?: string(name='GatewayClusterIds'),
    gatewayClusterInfoList?: {
      gatewayClusterInfo?: [ 
      {
        clusterId?: string(name='ClusterId'),
        clusterName?: string(name='ClusterName'),
        status?: string(name='Status'),
      }
    ](name='GatewayClusterInfo')
    }(name='GatewayClusterInfoList'),
    highAvailabilityEnable?: boolean(name='HighAvailabilityEnable'),
    hostGroupList?: {
      hostGroup?: [ 
      {
        bandWidth?: string(name='BandWidth'),
        chargeType?: string(name='ChargeType'),
        cpuCore?: int32(name='CpuCore'),
        diskCapacity?: int32(name='DiskCapacity'),
        diskCount?: int32(name='DiskCount'),
        diskType?: string(name='DiskType'),
        hostGroupChangeStatus?: string(name='HostGroupChangeStatus'),
        hostGroupChangeType?: string(name='HostGroupChangeType'),
        hostGroupId?: string(name='HostGroupId'),
        hostGroupName?: string(name='HostGroupName'),
        hostGroupSubType?: string(name='HostGroupSubType'),
        hostGroupType?: string(name='HostGroupType'),
        instanceType?: string(name='InstanceType'),
        lockReason?: string(name='LockReason'),
        lockType?: string(name='LockType'),
        memoryCapacity?: int32(name='MemoryCapacity'),
        nodeCount?: int32(name='NodeCount'),
        nodes?: {
          node?: [ 
          {
            createTime?: string(name='CreateTime'),
            daemonInfos?: {
              daemonInfo?: [ 
              {
                name?: string(name='Name'),
              }
            ](name='DaemonInfo')
            }(name='DaemonInfos'),
            diskInfos?: {
              diskInfo?: [ 
              {
                device?: string(name='Device'),
                diskId?: string(name='DiskId'),
                diskName?: string(name='DiskName'),
                size?: int32(name='Size'),
                type?: string(name='Type'),
              }
            ](name='DiskInfo')
            }(name='DiskInfos'),
            emrExpiredTime?: string(name='EmrExpiredTime'),
            expiredTime?: string(name='ExpiredTime'),
            innerIp?: string(name='InnerIp'),
            instanceId?: string(name='InstanceId'),
            pubIp?: string(name='PubIp'),
            status?: string(name='Status'),
            supportIpV6?: boolean(name='SupportIpV6'),
            zoneId?: string(name='ZoneId'),
          }
        ](name='Node')
        }(name='Nodes'),
        period?: string(name='Period'),
      }
    ](name='HostGroup')
    }(name='HostGroupList'),
    hostPoolInfo?: {
      hpBizId?: string(name='HpBizId'),
      hpName?: string(name='HpName'),
    }(name='HostPoolInfo'),
    id?: string(name='Id'),
    imageId?: string(name='ImageId'),
    instanceGeneration?: string(name='InstanceGeneration'),
    ioOptimized?: boolean(name='IoOptimized'),
    k8sClusterId?: string(name='K8sClusterId'),
    localMetaDb?: boolean(name='LocalMetaDb'),
    logEnable?: boolean(name='LogEnable'),
    logPath?: string(name='LogPath'),
    machineType?: string(name='MachineType'),
    masterNodeInService?: int32(name='MasterNodeInService'),
    masterNodeTotal?: int32(name='MasterNodeTotal'),
    metaStoreType?: string(name='MetaStoreType'),
    name?: string(name='Name'),
    netType?: string(name='NetType'),
    period?: int32(name='Period'),
    regionId?: string(name='RegionId'),
    relateClusterId?: string(name='RelateClusterId'),
    relateClusterInfo?: {
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      status?: string(name='Status'),
    }(name='RelateClusterInfo'),
    resizeDiskEnable?: boolean(name='ResizeDiskEnable'),
    runningTime?: int32(name='RunningTime'),
    securityGroupId?: string(name='SecurityGroupId'),
    securityGroupName?: string(name='SecurityGroupName'),
    showSoftwareInterface?: boolean(name='ShowSoftwareInterface'),
    softwareInfo?: {
      clusterType?: string(name='ClusterType'),
      emrVer?: string(name='EmrVer'),
      softwares?: {
        software?: [ 
        {
          displayName?: string(name='DisplayName'),
          name?: string(name='Name'),
          onlyDisplay?: boolean(name='OnlyDisplay'),
          startTpe?: int32(name='StartTpe'),
          version?: string(name='Version'),
        }
      ](name='Software')
      }(name='Softwares'),
    }(name='SoftwareInfo'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
    stopTime?: long(name='StopTime'),
    taskNodeInService?: int32(name='TaskNodeInService'),
    taskNodeTotal?: int32(name='TaskNodeTotal'),
    userDefinedEmrEcsRole?: string(name='UserDefinedEmrEcsRole'),
    userId?: string(name='UserId'),
    vSwitchId?: string(name='VSwitchId'),
    vpcId?: string(name='VpcId'),
    zoneId?: string(name='ZoneId'),
  }(name='ClusterInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterV2ResponseBody(name='body'),
}

async function describeClusterV2(request: DescribeClusterV2Request): DescribeClusterV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterV2', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeFlowResponseBody = {
  alertConf?: string(name='AlertConf'),
  alertDingDingGroupBizId?: string(name='AlertDingDingGroupBizId'),
  alertUserGroupBizId?: string(name='AlertUserGroupBizId'),
  application?: string(name='Application'),
  categoryId?: string(name='CategoryId'),
  clusterId?: string(name='ClusterId'),
  createCluster?: boolean(name='CreateCluster'),
  cronExpr?: string(name='CronExpr'),
  description?: string(name='Description'),
  editLockDetail?: string(name='EditLockDetail'),
  endSchedule?: long(name='EndSchedule'),
  gmtCreate?: long(name='GmtCreate'),
  gmtModified?: long(name='GmtModified'),
  graph?: string(name='Graph'),
  hostName?: string(name='HostName'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  namespace?: string(name='Namespace'),
  parentFlowList?: {
    parentFlow?: [ 
    {
      parentFlowId?: string(name='ParentFlowId'),
      parentFlowName?: string(name='ParentFlowName'),
      projectId?: string(name='ProjectId'),
      projectName?: string(name='ProjectName'),
    }
  ](name='ParentFlow')
  }(name='ParentFlowList'),
  periodic?: boolean(name='Periodic'),
  requestId?: string(name='RequestId'),
  startSchedule?: long(name='StartSchedule'),
  status?: string(name='Status'),
  type?: string(name='Type'),
}

model DescribeFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowResponseBody(name='body'),
}

async function describeFlow(request: DescribeFlowRequest): DescribeFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowCategoryTreeRequest {
  categoryId?: string(name='CategoryId', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  mode?: string(name='Mode', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeFlowCategoryTreeResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeFlowCategoryTreeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowCategoryTreeResponseBody(name='body'),
}

async function describeFlowCategoryTree(request: DescribeFlowCategoryTreeRequest): DescribeFlowCategoryTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowCategoryTree', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowJobRequest {
  id: string(name='Id', description='作业ID。您可以调用ListFlowJob查看作业ID。', position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
}

model DescribeFlowJobResponseBody = {
  adhoc?: string(name='Adhoc', description='是否临时查询。'),
  alertConf?: string(name='AlertConf', description='报警配置。'),
  categoryId?: string(name='CategoryId', description='作业所在目录ID。'),
  customVariables?: string(name='CustomVariables', description='自定义变量。'),
  description?: string(name='Description', description='作业的描述。'),
  editLockDetail?: string(name='EditLockDetail', description='保留参数。'),
  envConf?: string(name='EnvConf', description='环境变量设置。'),
  failAct?: string(name='FailAct', description='失败策略，可能的取值：CONTINUE（提过本次作业），STOP（停止作业）'),
  gmtCreate?: long(name='GmtCreate', description='创建时间。'),
  gmtModified?: long(name='GmtModified', description='最后修改时间。'),
  id?: string(name='Id', description='作业ID。'),
  knoxPassword?: string(name='KnoxPassword', description='Knox的用户密码，执行Zeppelin Notebook时必须提供。'),
  knoxUser?: string(name='KnoxUser', description='Knox的用户名，执行Zeppelin Notebook时必须提供。'),
  lastInstanceId?: string(name='LastInstanceId', description='最后一次执行的实例ID。'),
  maxRetry?: int32(name='MaxRetry', description='最大重试次数。'),
  maxRunningTimeSec?: long(name='MaxRunningTimeSec', description='保留参数。'),
  mode?: string(name='Mode', description='模型模式，取值如下：  YARN：将作业包装成一个Launcher提交至YARN中执行，LOCAL：作业直接在机器上以进程方式运行。'),
  monitorConf?: string(name='MonitorConf', description='监控配置，仅SPARK_STREAMING类型作业支持监控配置。'),
  name?: string(name='Name', description='作业名称。'),
  paramConf?: string(name='ParamConf', description='参数设置。'),
  params?: string(name='Params', description='作业内容。'),
  requestId?: string(name='RequestId', description='请求ID。'),
  resourceList?: {
    resource?: [ 
    {
      alias?: string(name='Alias', description='保留参数。'),
      path?: string(name='Path', description='保留参数。'),
    }
  ](name='Resource')
  }(name='ResourceList'),
  retryInterval?: long(name='RetryInterval', description='重试间隔 0~300（秒）。'),
  retryPolicy?: string(name='RetryPolicy', description='重试策略，保留参数。'),
  runConf?: string(name='RunConf', description='运行配置，取值如下：priority（优先级），userName（任务的Linux提交用户），memory（内存，单位为MB），cores（核数）'),
  type?: string(name='Type', description='作业的类型，可能的取值有：SPARK，SPARK_STREAMING，ZEPPELIN'),
}

model DescribeFlowJobResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowJobResponseBody(name='body'),
}

async function describeFlowJob(request: DescribeFlowJobRequest): DescribeFlowJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowJob', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowNodeInstanceRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeFlowNodeInstanceResponseBody = {
  adhoc?: boolean(name='Adhoc'),
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  duration?: long(name='Duration'),
  endTime?: long(name='EndTime'),
  envConf?: string(name='EnvConf'),
  externalChildIds?: string(name='ExternalChildIds'),
  externalId?: string(name='ExternalId'),
  externalInfo?: string(name='ExternalInfo'),
  externalStatus?: string(name='ExternalStatus'),
  externalSubId?: string(name='ExternalSubId'),
  failAct?: string(name='FailAct'),
  flowId?: string(name='FlowId'),
  flowInstanceId?: string(name='FlowInstanceId'),
  gmtCreate?: long(name='GmtCreate'),
  gmtModified?: long(name='GmtModified'),
  hostName?: string(name='HostName'),
  id?: string(name='Id'),
  jobId?: string(name='JobId'),
  jobName?: string(name='JobName'),
  jobParams?: string(name='JobParams'),
  jobType?: string(name='JobType'),
  maxRetry?: string(name='MaxRetry'),
  mode?: string(name='Mode'),
  monitorConf?: string(name='MonitorConf'),
  nodeName?: string(name='NodeName'),
  paramConf?: string(name='ParamConf'),
  pending?: boolean(name='Pending'),
  projectId?: string(name='ProjectId'),
  requestId?: string(name='RequestId'),
  retries?: int32(name='Retries'),
  retryInterval?: string(name='RetryInterval'),
  retryPolicy?: string(name='RetryPolicy'),
  runConf?: string(name='RunConf'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
  type?: string(name='Type'),
}

model DescribeFlowNodeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowNodeInstanceResponseBody(name='body'),
}

async function describeFlowNodeInstance(request: DescribeFlowNodeInstanceRequest): DescribeFlowNodeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowNodeInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowProjectRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeFlowProjectResponseBody = {
  description?: string(name='Description'),
  gmtCreate?: long(name='GmtCreate'),
  gmtModified?: long(name='GmtModified'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  userId?: string(name='UserId'),
}

model DescribeFlowProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowProjectResponseBody(name='body'),
}

async function describeFlowProject(request: DescribeFlowProjectRequest): DescribeFlowProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowProject', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLibraryDetailRequest {
  libraryBizId?: string(name='LibraryBizId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLibraryDetailResponseBody = {
  bizId?: string(name='BizId'),
  createTime?: long(name='CreateTime'),
  libraryVersion?: string(name='LibraryVersion'),
  name?: string(name='Name'),
  properties?: string(name='Properties'),
  requestId?: string(name='RequestId'),
  scope?: string(name='Scope'),
  sourceLocation?: string(name='SourceLocation'),
  sourceType?: string(name='SourceType'),
  type?: string(name='Type'),
  userId?: string(name='UserId'),
}

model DescribeLibraryDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLibraryDetailResponseBody(name='body'),
}

async function describeLibraryDetail(request: DescribeLibraryDetailRequest): DescribeLibraryDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLibraryDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLibraryInstallTaskDetailRequest {
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskBizId?: string(name='TaskBizId', position='Query'),
}

model DescribeLibraryInstallTaskDetailResponseBody = {
  clusterBizId?: string(name='ClusterBizId'),
  detail?: string(name='Detail'),
  endTime?: long(name='EndTime'),
  executeTime?: long(name='ExecuteTime'),
  hostname?: string(name='Hostname'),
  libraryBizId?: string(name='LibraryBizId'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  taskGroupId?: string(name='TaskGroupId'),
  taskId?: string(name='TaskId'),
  taskProcess?: int32(name='TaskProcess'),
  taskStatus?: string(name='TaskStatus'),
  taskType?: string(name='TaskType'),
}

model DescribeLibraryInstallTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLibraryInstallTaskDetailResponseBody(name='body'),
}

async function describeLibraryInstallTaskDetail(request: DescribeLibraryInstallTaskDetailRequest): DescribeLibraryInstallTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLibraryInstallTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model KillFlowJobRequest {
  jobInstanceId: string(name='JobInstanceId', description='作业实例ID。您可以调用DescribeFlowJob查看作业实例ID。', position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
}

model KillFlowJobResponseBody = {
  data?: boolean(name='Data', description='返回执行结果，包含如下：true（执行成功），false（执行失败）'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model KillFlowJobResponse = {
  headers: map[string]string(name='headers'),
  body: KillFlowJobResponseBody(name='body'),
}

async function killFlowJob(request: KillFlowJobRequest): KillFlowJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillFlowJob', 'POST', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  clusterTypeList?: [ string ](name='ClusterTypeList', position='Query'),
  createType?: string(name='CreateType', position='Query'),
  defaultStatus?: boolean(name='DefaultStatus', position='Query'),
  depositType?: string(name='DepositType', position='Query'),
  expiredTagList?: [ string ](name='ExpiredTagList', position='Query'),
  isDesc?: boolean(name='IsDesc', position='Query'),
  machineType?: string(name='MachineType', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=500, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=500, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  statusList?: [ string ](name='StatusList', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListClustersResponseBody = {
  clusters?: {
    clusterInfo?: [ 
    {
      chargeType?: string(name='ChargeType'),
      createResource?: string(name='CreateResource'),
      createTime?: long(name='CreateTime'),
      depositType?: string(name='DepositType'),
      expiredTime?: long(name='ExpiredTime'),
      failReason?: {
        errorCode?: string(name='ErrorCode'),
        errorMsg?: string(name='ErrorMsg'),
        requestId?: string(name='RequestId'),
      }(name='FailReason'),
      hasUncompletedOrder?: boolean(name='HasUncompletedOrder'),
      id?: string(name='Id'),
      k8sClusterId?: string(name='K8sClusterId'),
      machineType?: string(name='MachineType'),
      metaStoreType?: string(name='MetaStoreType'),
      name?: string(name='Name'),
      orderList?: string(name='OrderList'),
      orderTaskInfo?: {
        currentCount?: int32(name='CurrentCount'),
        orderIdList?: string(name='OrderIdList'),
        targetCount?: int32(name='TargetCount'),
      }(name='OrderTaskInfo'),
      period?: int32(name='Period'),
      runningTime?: int32(name='RunningTime'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      type?: string(name='Type'),
    }
  ](name='ClusterInfo')
  }(name='Clusters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowRequest {
  clusterId?: string(name='ClusterId', description='集群ID。您可以调用ListClusters查看集群的ID。', position='Query'),
  id?: string(name='Id', description='工作流ID。您可以调用ListFlowInstance查看工作流ID。', position='Query'),
  jobId?: string(name='JobId', description='作业ID。您可以调用ListFlowJob查看。', position='Query'),
  name?: string(name='Name', description='工作流名称。您可以调用ListFlowInstance查看。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='页码。', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='PageSize', description='每页查询数量。', minimum=1, maximum=1000, position='Query'),
  periodic?: boolean(name='Periodic', description='是否调度。', position='Query'),
  projectId?: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
  status?: string(name='Status', description='状态：  STOP_SCHEDULE（停止调度） UNDER_SCHEDULE（调度中）', position='Query'),
}

model ListFlowResponseBody = {
  flow?: {
    flow?: [ 
    {
      alertConf?: string(name='AlertConf'),
      alertDingDingGroupBizId?: string(name='AlertDingDingGroupBizId'),
      alertUserGroupBizId?: string(name='AlertUserGroupBizId'),
      categoryId?: string(name='CategoryId'),
      clusterId?: string(name='ClusterId'),
      createCluster?: boolean(name='CreateCluster'),
      cronExpr?: string(name='CronExpr'),
      description?: string(name='Description'),
      endSchedule?: long(name='EndSchedule'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      graph?: string(name='Graph'),
      hostName?: string(name='HostName'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      periodic?: boolean(name='Periodic'),
      projectId?: string(name='ProjectId'),
      startSchedule?: long(name='StartSchedule'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Flow')
  }(name='Flow', description='工作流列表'),
  pageNumber?: int32(name='PageNumber', description='页码。'),
  pageSize?: int32(name='PageSize', description='每页数量。'),
  requestId?: string(name='RequestId', description='请求ID。'),
  total?: int32(name='Total', description='总数。'),
}

model ListFlowResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowResponseBody(name='body'),
}

async function listFlow(request: ListFlowRequest): ListFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlow', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowJobHistoryRequest {
  id?: string(name='Id', description='作业ID。您可以调用ListFlowJob查看作业ID。', position='Query'),
  instanceId?: string(name='InstanceId', description='作业实例ID。您可以调用DescribeFlowJob查看作业实例ID。', position='Query'),
  jobType?: string(name='JobType', description='作业的类型，可能的取值有：SPARK，SPARK_STREAMING，ZEPPELIN', position='Query'),
  pageNumber?: int32(name='PageNumber', description='当前页码。', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='PageSize', description='分页查询时每页行数。', minimum=1, maximum=100, position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
  statusList?: [ string ](name='StatusList', description='状态列表。取值如下：SUBMITTED, RUNNING, SUCCESS, FAILED, KILL_FAILED, KILL_SUCCESS', position='Query'),
  timeRange?: string(name='TimeRange', description='查询的时间范围参数，参数列表：type: range，from: 开始时间（long型时间戳），to: 结束时间（long型时间戳）', position='Query'),
}

model ListFlowJobHistoryResponseBody = {
  nodeInstances?: {
    nodeInstance?: [ 
    {
      clusterId?: string(name='ClusterId', description='集群ID。'),
      endTime?: long(name='EndTime', description='运行结束时间。'),
      envConf?: string(name='EnvConf', description='环境变量设置。'),
      externalId?: string(name='ExternalId', description='启动器的application的ID。'),
      externalInfo?: string(name='ExternalInfo', description='外部信息。例如，运行作业的错误诊断信息。'),
      externalStatus?: string(name='ExternalStatus', description='实例对应的Container的状态：SUBMITTED, RUNNING, SUCCESS, FAIL, KILL_FAIL, KILL_SUCCESS'),
      failAct?: string(name='FailAct', description='失败策略，可能的取值：CONTINUE（提过本次作业），STOP（停止作业）'),
      gmtCreate?: long(name='GmtCreate', description='创建时间。'),
      gmtModified?: long(name='GmtModified', description='创建时间。'),
      hostName?: string(name='HostName', description='保留参数。'),
      id?: string(name='Id', description='作业实例ID。'),
      jobId?: string(name='JobId', description='作业ID。'),
      jobName?: string(name='JobName', description='作业名称。'),
      jobParams?: string(name='JobParams', description='作业内容。'),
      jobType?: string(name='JobType', description='作业类型。'),
      maxRetry?: int32(name='MaxRetry', description='最大重试次数。'),
      nodeName?: string(name='NodeName', description='保留参数。'),
      paramConf?: string(name='ParamConf', description='参数设置。'),
      projectId?: string(name='ProjectId', description='项目ID。'),
      retries?: int32(name='Retries', description='重试次数。'),
      retryInterval?: long(name='RetryInterval', description='重试间隔 0-300（秒）。'),
      runConf?: string(name='RunConf', description='运行配置，取值如下：priority（优先级），userName（任务的Linux提交用户），memory（内存，单位为MB），cores（核数）'),
      startTime?: long(name='StartTime', description='运行开始时间。'),
      status?: string(name='Status', description='实例的执行状态：PREP：准备启动，SUBMITTING：提交中，RUNNING：运行中DONE：已完成，OK：执行成功，FAILED：执行失败，KILLED：已终止，KILL_FAILED：终止失败，START_RETRY：开始重试'),
      type?: string(name='Type', description='节点类型：JOB：作业，CLUSTER：集群，START：开始，END：结束'),
      pending?: boolean(name='pending', description='是否结束。'),
    }
  ](name='NodeInstance')
  }(name='NodeInstances', description='作业实例列表。'),
  pageNumber?: int32(name='PageNumber', description='当前页码。'),
  pageSize?: int32(name='PageSize', description='分页查询时设置的每页行数。'),
  requestId?: string(name='RequestId', description='请求ID。'),
  total?: int32(name='Total', description='记录总数。'),
}

model ListFlowJobHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowJobHistoryResponseBody(name='body'),
}

async function listFlowJobHistory(request: ListFlowJobHistoryRequest): ListFlowJobHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowJobHistory', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowJobsRequest {
  adhoc?: boolean(name='Adhoc', description='是否为临时查询。用于过滤作业。', position='Query'),
  exactName?: string(name='ExactName', position='Query'),
  id?: string(name='Id', description='作业ID。您可以调用ListFlowJob查看作业ID。', position='Query'),
  name?: string(name='Name', description='作业名称。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='当前页数。', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='PageSize', description='每页的作业数量。', minimum=1, maximum=10000, position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
  type?: string(name='Type', description='作业类型。用于过滤作业，支持的类型有：SPARK，SPARK_STREAMING，ZEPPELIN。', position='Query'),
}

model ListFlowJobsResponseBody = {
  jobList?: {
    job?: [ 
    {
      adhoc?: string(name='Adhoc', description='是否临时查询。'),
      alertConf?: string(name='AlertConf', description='报警配置。'),
      categoryId?: string(name='CategoryId', description='作业所在目录ID。'),
      customVariables?: string(name='CustomVariables', description='自定义变量。'),
      description?: string(name='Description', description='作业的描述。'),
      envConf?: string(name='EnvConf', description='环境变量设置。'),
      failAct?: string(name='FailAct', description='失败策略，可能的取值：CONTINUE（提过本次作业），STOP（停止作业）'),
      gmtCreate?: long(name='GmtCreate', description='创建时间。'),
      gmtModified?: long(name='GmtModified', description='最后修改时间。'),
      id?: string(name='Id', description='作业ID。'),
      lastInstanceDetail?: string(name='LastInstanceDetail', description='最后一次执行的实例ID。'),
      maxRetry?: int32(name='MaxRetry', description='最大重试次数。'),
      mode?: string(name='Mode', description='模型模式，取值如下：  YARN：将作业包装成一个Launcher提交至YARN中执行，LOCAL：作业直接在机器上以进程方式运行。'),
      monitorConf?: string(name='MonitorConf', description='监控配置，仅SPARK_STREAMING类型作业支持监控配置。'),
      name?: string(name='Name', description='作业名称。'),
      paramConf?: string(name='ParamConf', description='参数设置。'),
      params?: string(name='Params', description='作业内容。'),
      resourceList?: {
        resource?: [ 
        {
          alias?: string(name='Alias', description='保留参数。'),
          path?: string(name='Path', description='保留参数。'),
        }
      ](name='Resource')
      }(name='ResourceList'),
      retryInterval?: long(name='RetryInterval', description='重试间隔 0~300（秒）。'),
      runConf?: string(name='RunConf', description='运行配置，取值如下：priority（优先级），userName（任务的Linux提交用户），memory（内存，单位为MB），cores（核数）'),
      type?: string(name='Type', description='作业的类型，可能的取值有：SPARK，SPARK_STREAMING，ZEPPELIN'),
    }
  ](name='Job')
  }(name='JobList'),
  pageNumber?: int32(name='PageNumber', description='当前页数。'),
  pageSize?: int32(name='PageSize', description='每页的作业数量。'),
  requestId?: string(name='RequestId', description='请求ID。'),
  total?: int32(name='Total', description='作业数量。'),
}

model ListFlowJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowJobsResponseBody(name='body'),
}

async function listFlowJobs(request: ListFlowJobsRequest): ListFlowJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowProjectUserRequest {
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=500, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=500, position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListFlowProjectUserResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  users?: {
    user?: [ 
    {
      accountUserId?: string(name='AccountUserId'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      ownerId?: string(name='OwnerId'),
      projectId?: string(name='ProjectId'),
      userName?: string(name='UserName'),
    }
  ](name='User')
  }(name='Users'),
}

model ListFlowProjectUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowProjectUserResponseBody(name='body'),
}

async function listFlowProjectUser(request: ListFlowProjectUserRequest): ListFlowProjectUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowProjectUser', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowProjectsRequest {
  name?: string(name='Name', description='项目名称，用于过滤项目', position='Query'),
  pageNumber?: int32(name='PageNumber', description='页码，用于分页', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', description='每页数量', minimum=1, maximum=100, position='Query'),
  productType?: string(name='ProductType', description='产品类型。固定值DATABIRCKS_DATAINSIGHT', position='Query'),
  projectId?: string(name='ProjectId', description='项目ID。您可以调用ListFlowProjects查看项目的ID', position='Query'),
  regionId: string(name='RegionId', description='地域ID', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', position='Query'),
}

model ListFlowProjectsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页数量'),
  projects?: {
    project?: [ 
    {
      description?: string(name='Description', description='项目描述'),
      gmtCreate?: long(name='GmtCreate', description='创建时间戳'),
      gmtModified?: long(name='GmtModified', description='修改时间戳'),
      id?: string(name='Id', description='项目ID'),
      name?: string(name='Name', description='项目名称'),
      userId?: string(name='UserId', description='主账号ID'),
    }
  ](name='Project')
  }(name='Projects', description='项目列表'),
  requestId?: string(name='RequestId', description='请求ID'),
  total?: int32(name='Total', description='总数'),
}

model ListFlowProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowProjectsResponseBody(name='body'),
}

async function listFlowProjects(request: ListFlowProjectsRequest): ListFlowProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowProjects', 'POST', '/', 'json', false, 'json', request);
}

model ListLibraryInstallTasksRequest {
  clusterBizId?: string(name='ClusterBizId', position='Query'),
  currentSize?: int32(name='CurrentSize', minimum=1, maximum=500, position='Query'),
  libraryBizId?: string(name='LibraryBizId', position='Query'),
  limit?: int32(name='Limit', minimum=1, maximum=500, position='Query'),
  orderField?: string(name='OrderField', position='Query'),
  orderMode?: string(name='OrderMode', position='Query'),
  pageCount?: int32(name='PageCount', minimum=1, maximum=500, position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=500, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=500, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListLibraryInstallTasksResponseBody = {
  items?: {
    item?: [ 
    {
      clusterBizId?: string(name='ClusterBizId'),
      detail?: string(name='Detail'),
      endTime?: long(name='EndTime'),
      executeTime?: long(name='ExecuteTime'),
      hostname?: string(name='Hostname'),
      libraryBizId?: string(name='LibraryBizId'),
      startTime?: long(name='StartTime'),
      taskGroupId?: string(name='TaskGroupId'),
      taskId?: string(name='TaskId'),
      taskProcess?: int32(name='TaskProcess'),
      taskStatus?: string(name='TaskStatus'),
      taskType?: string(name='TaskType'),
    }
  ](name='Item')
  }(name='Items'),
  nextToken?: string(name='NextToken'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListLibraryInstallTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListLibraryInstallTasksResponseBody(name='body'),
}

async function listLibraryInstallTasks(request: ListLibraryInstallTasksRequest): ListLibraryInstallTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLibraryInstallTasks', 'POST', '/', 'json', false, 'json', request);
}

model ListLibraryStatusRequest {
  clusterBizId?: string(name='ClusterBizId', position='Query'),
  currentSize?: int32(name='CurrentSize', minimum=1, maximum=100, position='Query'),
  libraryBizId?: string(name='LibraryBizId', position='Query'),
  limit?: int32(name='Limit', minimum=1, maximum=100, position='Query'),
  orderField?: string(name='OrderField', position='Query'),
  orderMode?: string(name='OrderMode', position='Query'),
  pageCount?: int32(name='PageCount', minimum=1, maximum=100, position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListLibraryStatusResponseBody = {
  items?: {
    item?: [ 
    {
      clusterBizId?: string(name='ClusterBizId'),
      clusterName?: string(name='ClusterName'),
      libraryBizId?: string(name='LibraryBizId'),
      libraryName?: string(name='LibraryName'),
      status?: string(name='Status'),
    }
  ](name='Item')
  }(name='Items'),
  nextToken?: string(name='NextToken'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListLibraryStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListLibraryStatusResponseBody(name='body'),
}

async function listLibraryStatus(request: ListLibraryStatusRequest): ListLibraryStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLibraryStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='资源组ID', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签', position='Query'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code', description='响应码'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  message?: string(name='Message', description='响应消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='请求是否成功被处理'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源ID'),
      resourceType?: string(name='ResourceType', description='资源类型'),
      tagKey?: string(name='TagKey', description='标签键'),
      tagValue?: string(name='TagValue', description='标签值'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'GET', '/', 'json', false, 'json', request);
}

model ModifyFlowForWebRequest {
  alertConf?: string(name='AlertConf', position='Query'),
  alertDingDingGroupBizId?: string(name='AlertDingDingGroupBizId', position='Query'),
  alertUserGroupBizId?: string(name='AlertUserGroupBizId', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  createCluster: boolean(name='CreateCluster', position='Query'),
  cronExpr?: string(name='CronExpr', position='Query'),
  description?: string(name='Description', position='Query'),
  endSchedule?: long(name='EndSchedule', minimum=1, maximum=9223372036854775807, position='Query'),
  graph: string(name='Graph', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  id: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  namespace?: string(name='Namespace', position='Query'),
  parentCategory?: string(name='ParentCategory', position='Query'),
  parentFlowList?: string(name='ParentFlowList', position='Query'),
  periodic?: boolean(name='Periodic', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startSchedule?: long(name='StartSchedule', minimum=1, maximum=9223372036854775807, position='Query'),
  status?: string(name='Status', position='Query'),
}

model ModifyFlowForWebResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model ModifyFlowForWebResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFlowForWebResponseBody(name='body'),
}

async function modifyFlowForWeb(request: ModifyFlowForWebRequest): ModifyFlowForWebResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFlowForWeb', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFlowJobRequest {
  alertConf?: string(name='AlertConf', description='保留参数。', position='Query'),
  clusterId?: string(name='ClusterId', description='集群ID。您可以调用ListClusters查看集群的ID。', position='Query'),
  customVariables?: string(name='CustomVariables', description='自定义变量。', position='Query'),
  description?: string(name='Description', description='修改后的作业描述。', position='Query'),
  envConf?: string(name='EnvConf', description='环境变量设置。', position='Query'),
  failAct?: string(name='FailAct', description='失败策略，可能的取值：CONTINUE（提过本次作业），STOP（停止作业）', position='Query'),
  id: string(name='Id', description='需要修改的作业的ID。', position='Query'),
  knoxPassword?: string(name='KnoxPassword', description='Knox的用户密码，执行Zeppelin Notebook时必须提供。', position='Query'),
  knoxUser?: string(name='KnoxUser', description='Knox的用户名，执行Zeppelin Notebook时必须提供。', position='Query'),
  mode?: string(name='Mode', description='模型模式，取值如下：  YARN：将作业包装成一个Launcher提交至YARN中执行，LOCAL：作业直接在机器上以进程方式运行。', position='Query'),
  monitorConf?: string(name='MonitorConf', description='监控配置，仅SPARK_STREAMING类型作业支持监控配置。', position='Query'),
  name?: string(name='Name', description='修改后的作业名称。', position='Query'),
  paramConf?: string(name='ParamConf', description='参数设置。', position='Query'),
  params?: string(name='Params', description='作业内容。如果是spark作业，该参数的内容会作为spark-submit的参数。', position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
  resourceList?: [ 
    {
      alias?: string(name='Alias', description='保留参数。'),
      path: string(name='Path', description='保留参数。'),
    }
  ](name='ResourceList', description='保留参数。', position='Query'),
  retryPolicy?: string(name='RetryPolicy', description='重试策略，保留参数。', position='Query'),
  runConf?: string(name='RunConf', description='运行配置，取值如下：priority（优先级），userName（任务的Linux提交用户），memory（内存，单位为MB），cores（核数）', position='Query'),
}

model ModifyFlowJobResponseBody = {
  data?: boolean(name='Data', description='API调用结果：true（修改成功），false（修改失败）'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ModifyFlowJobResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFlowJobResponseBody(name='body'),
}

async function modifyFlowJob(request: ModifyFlowJobRequest): ModifyFlowJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFlowJob', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFlowProjectRequest {
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyFlowProjectResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model ModifyFlowProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFlowProjectResponseBody(name='body'),
}

async function modifyFlowProject(request: ModifyFlowProjectRequest): ModifyFlowProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFlowProject', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseClusterRequest {
  forceRelease?: boolean(name='ForceRelease', position='Query'),
  id: string(name='Id', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseClusterResponseBody(name='body'),
}

async function releaseCluster(request: ReleaseClusterRequest): ReleaseClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseCluster', 'POST', '/', 'json', false, 'json', request);
}

model RerunFlowRequest {
  flowInstanceId: string(name='FlowInstanceId', description='工作流实例ID。您可以调用ListFlowInstance查看工作流实例ID。', position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  reRunFail?: boolean(name='ReRunFail', description='是否只重试失败节点。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
}

model RerunFlowResponseBody = {
  data?: boolean(name='Data', description='返回执行结果，包含如下：true: 重试工作流成功，false: 重试工作流失败。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model RerunFlowResponse = {
  headers: map[string]string(name='headers'),
  body: RerunFlowResponseBody(name='body'),
}

async function rerunFlow(request: RerunFlowRequest): RerunFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RerunFlow', 'POST', '/', 'json', false, 'json', request);
}

model ResumeFlowRequest {
  flowInstanceId: string(name='FlowInstanceId', description='工作流实例ID。您可以调用ListFlowInstance查看工作流ID。', position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='区域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
}

model ResumeFlowResponseBody = {
  data?: boolean(name='Data', description='返回执行结果。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ResumeFlowResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeFlowResponseBody(name='body'),
}

async function resumeFlow(request: ResumeFlowRequest): ResumeFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeFlow', 'POST', '/', 'json', false, 'json', request);
}

model SubmitFlowRequest {
  conf?: string(name='Conf', description='配置信息{"key":"value"}格式。  本示例中cyctime表示实际调度运行的时间（长整型时间戳）。', position='Query'),
  flowId: string(name='FlowId', description='工作流ID。您可以调用ListFlowInstance查看工作流ID。', position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
}

model SubmitFlowResponseBody = {
  data?: string(name='Data', description='过期参数。'),
  id?: string(name='Id', description='工作流实例ID。'),
  instanceId?: string(name='InstanceId', description='过期参数。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model SubmitFlowResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitFlowResponseBody(name='body'),
}

async function submitFlow(request: SubmitFlowRequest): SubmitFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitFlow', 'POST', '/', 'json', false, 'json', request);
}

model SubmitFlowJobRequest {
  clusterId: string(name='ClusterId', description='集群ID。您可以调用ListClusters查看集群的ID。', position='Query'),
  conf?: string(name='Conf', description='配置参数信息：{"key1":"value1"}。key为params的参数值会覆盖实际作业中运行的内容。', position='Query'),
  hostName?: string(name='HostName', description='保留参数。', position='Query'),
  jobId: string(name='JobId', description='作业ID。您可以调用ListFlowJob查看作业ID。', position='Query'),
  projectId: string(name='ProjectId', description='项目ID。您可以调用ListFlowProject查看项目的ID。', position='Query'),
  regionId: string(name='RegionId', description='地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表。', position='Query'),
}

model SubmitFlowJobResponseBody = {
  id?: string(name='Id', description='运行的作业实例ID。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model SubmitFlowJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitFlowJobResponseBody(name='body'),
}

async function submitFlowJob(request: SubmitFlowJobRequest): SubmitFlowJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitFlowJob', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId: [ string ](name='ResourceId', description='资源ID', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', description='标签列表', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code', description='响应码'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  message?: string(name='Message', description='响应消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='请求是否成功被处理'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='是否解绑资源的所有标签', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId: [ string ](name='ResourceId', description='集群ID列表', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tagKey?: [ string ](name='TagKey', description='解绑的标签键列表', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code', description='响应码'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  message?: string(name='Message', description='响应消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='请求是否成功被处理'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLibraryInstallTaskStatusRequest {
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskBizId?: string(name='TaskBizId', position='Query'),
}

model UpdateLibraryInstallTaskStatusResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpdateLibraryInstallTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLibraryInstallTaskStatusResponseBody(name='body'),
}

async function updateLibraryInstallTaskStatus(request: UpdateLibraryInstallTaskStatusRequest): UpdateLibraryInstallTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLibraryInstallTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

