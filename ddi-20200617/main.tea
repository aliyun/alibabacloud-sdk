/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
@endpointMap = {
    cn-qingdao = 'ddi.cn-qingdao.aliyuncs.com',
    cn-chengdu = 'ddi.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'ddi.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'ddi.cn-huhehaote.aliyuncs.com',
    cn-hongkong = 'ddi.cn-hongkong.aliyuncs.com',
    ap-southeast-2 = 'ddi.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'ddi.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'ddi.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'ddi.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'ddi.eu-west-1.aliyuncs.com',
    us-east-1 = 'ddi.us-east-1.aliyuncs.com',
    eu-central-1 = 'ddi.eu-central-1.aliyuncs.com',
    me-east-1 = 'ddi.me-east-1.aliyuncs.com',
    ap-south-1 = 'ddi.ap-south-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ddi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateClusterV2Request {
  authorizeContent?: string(name='AuthorizeContent'),
  auto?: boolean(name='Auto'),
  autoPayOrder?: boolean(name='AutoPayOrder'),
  bootstrapAction?: [ 
    {
      arg?: string(name='Arg'),
      name?: string(name='Name'),
      path?: string(name='Path'),
    }
  ](name='BootstrapAction'),
  chargeType?: string(name='ChargeType'),
  clickHouseConf?: string(name='ClickHouseConf'),
  clientToken?: string(name='ClientToken'),
  clusterType?: string(name='ClusterType'),
  config?: [ 
    {
      configKey?: string(name='ConfigKey'),
      configValue?: string(name='ConfigValue'),
      encrypt?: string(name='Encrypt'),
      fileName?: string(name='FileName'),
      replace?: string(name='Replace'),
      serviceName?: string(name='ServiceName'),
    }
  ](name='Config'),
  configurations?: string(name='Configurations'),
  depositType?: string(name='DepositType'),
  emrVer?: string(name='EmrVer'),
  enableEas?: boolean(name='EnableEas'),
  enableHighAvailability?: boolean(name='EnableHighAvailability'),
  enableSsh?: boolean(name='EnableSsh'),
  extraAttributes?: string(name='ExtraAttributes'),
  hostComponentInfo?: [ 
    {
      componentNameList?: [ string ](name='ComponentNameList'),
      hostName?: string(name='HostName'),
      serviceName?: string(name='ServiceName'),
    }
  ](name='HostComponentInfo'),
  hostGroup?: [ 
    {
      autoRenew?: boolean(name='AutoRenew'),
      chargeType?: string(name='ChargeType'),
      clusterId?: string(name='ClusterId'),
      comment?: string(name='Comment'),
      createType?: string(name='CreateType'),
      diskCapacity?: int32(name='DiskCapacity'),
      diskCount?: int32(name='DiskCount'),
      diskType?: string(name='DiskType'),
      gpuDriver?: string(name='GpuDriver'),
      hostGroupId?: string(name='HostGroupId'),
      hostGroupName?: string(name='HostGroupName'),
      hostGroupType?: string(name='HostGroupType'),
      instanceType?: string(name='InstanceType'),
      nodeCount?: int32(name='NodeCount'),
      period?: int32(name='Period'),
      sysDiskCapacity?: int32(name='SysDiskCapacity'),
      sysDiskType?: string(name='SysDiskType'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='HostGroup'),
  initCustomHiveMetaDB?: boolean(name='InitCustomHiveMetaDB'),
  instanceGeneration?: string(name='InstanceGeneration'),
  isOpenPublicIp?: boolean(name='IsOpenPublicIp'),
  keyPairName?: string(name='KeyPairName'),
  logPath?: string(name='LogPath'),
  machineType?: string(name='MachineType'),
  masterPwd?: string(name='MasterPwd'),
  metaStoreConf?: string(name='MetaStoreConf'),
  metaStoreType?: string(name='MetaStoreType'),
  name?: string(name='Name'),
  netType?: string(name='NetType'),
  period?: int32(name='Period'),
  promotionInfo?: [ 
    {
      productCode?: string(name='ProductCode'),
      promotionOptionCode?: string(name='PromotionOptionCode'),
      promotionOptionNo?: string(name='PromotionOptionNo'),
    }
  ](name='PromotionInfo'),
  regionId?: string(name='RegionId'),
  relatedClusterId?: string(name='RelatedClusterId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId'),
  securityGroupName?: string(name='SecurityGroupName'),
  serviceInfo?: [ 
    {
      serviceName?: string(name='ServiceName'),
      serviceVersion?: string(name='ServiceVersion'),
    }
  ](name='ServiceInfo'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  useCustomHiveMetaDB?: boolean(name='UseCustomHiveMetaDB'),
  useLocalMetaDb?: boolean(name='UseLocalMetaDb'),
  userDefinedEmrEcsRole?: string(name='UserDefinedEmrEcsRole'),
  userInfo?: [ 
    {
      password?: string(name='Password'),
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='UserInfo'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
  whiteListType?: string(name='WhiteListType'),
  zoneId?: string(name='ZoneId'),
}

model CreateClusterV2ResponseBody = {
  clusterId?: string(name='ClusterId'),
  coreOrderId?: string(name='CoreOrderId'),
  emrOrderId?: string(name='EmrOrderId'),
  masterOrderId?: string(name='MasterOrderId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterV2Response = {
  headers: map[string]string(name='headers'),
  body: CreateClusterV2ResponseBody(name='body'),
}

async function createClusterV2WithOptions(request: CreateClusterV2Request, runtime: Util.RuntimeOptions): CreateClusterV2Response {
  Util.validateModel(request);
  var query = {};
  query["AuthorizeContent"] = request.authorizeContent;
  query["Auto"] = request.auto;
  query["AutoPayOrder"] = request.autoPayOrder;
  query["BootstrapAction"] = request.bootstrapAction;
  query["ChargeType"] = request.chargeType;
  query["ClickHouseConf"] = request.clickHouseConf;
  query["ClientToken"] = request.clientToken;
  query["ClusterType"] = request.clusterType;
  query["Config"] = request.config;
  query["Configurations"] = request.configurations;
  query["DepositType"] = request.depositType;
  query["EmrVer"] = request.emrVer;
  query["EnableEas"] = request.enableEas;
  query["EnableHighAvailability"] = request.enableHighAvailability;
  query["EnableSsh"] = request.enableSsh;
  query["ExtraAttributes"] = request.extraAttributes;
  query["HostComponentInfo"] = request.hostComponentInfo;
  query["HostGroup"] = request.hostGroup;
  query["InitCustomHiveMetaDB"] = request.initCustomHiveMetaDB;
  query["InstanceGeneration"] = request.instanceGeneration;
  query["IsOpenPublicIp"] = request.isOpenPublicIp;
  query["KeyPairName"] = request.keyPairName;
  query["LogPath"] = request.logPath;
  query["MachineType"] = request.machineType;
  query["MasterPwd"] = request.masterPwd;
  query["MetaStoreConf"] = request.metaStoreConf;
  query["MetaStoreType"] = request.metaStoreType;
  query["Name"] = request.name;
  query["NetType"] = request.netType;
  query["Period"] = request.period;
  query["PromotionInfo"] = request.promotionInfo;
  query["RegionId"] = request.regionId;
  query["RelatedClusterId"] = request.relatedClusterId;
  query["ResourceGroupId"] = request.resourceGroupId;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecurityGroupId"] = request.securityGroupId;
  query["SecurityGroupName"] = request.securityGroupName;
  query["ServiceInfo"] = request.serviceInfo;
  query["Tag"] = request.tag;
  query["UseCustomHiveMetaDB"] = request.useCustomHiveMetaDB;
  query["UseLocalMetaDb"] = request.useLocalMetaDb;
  query["UserDefinedEmrEcsRole"] = request.userDefinedEmrEcsRole;
  query["UserInfo"] = request.userInfo;
  query["VSwitchId"] = request.vSwitchId;
  query["VpcId"] = request.vpcId;
  query["WhiteListType"] = request.whiteListType;
  query["ZoneId"] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateClusterV2',
    version = '2020-06-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createClusterV2(request: CreateClusterV2Request): CreateClusterV2Response {
  var runtime = new Util.RuntimeOptions{};
  return createClusterV2WithOptions(request, runtime);
}

model DescribeClusterV2Request {
  id?: string(name='Id'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeClusterV2ResponseBody = {
  clusterInfo?: {
    accessInfo?: {
      ZKLinks?: {
        ZKLink?: [ 
        {
          link?: string(name='Link'),
          port?: string(name='Port'),
        }
      ](name='ZKLink')
      }(name='ZKLinks'),
    }(name='AccessInfo'),
    autoScalingAllowed?: boolean(name='AutoScalingAllowed'),
    autoScalingByLoadAllowed?: boolean(name='AutoScalingByLoadAllowed'),
    autoScalingEnable?: boolean(name='AutoScalingEnable'),
    autoScalingSpotWithLimitAllowed?: boolean(name='AutoScalingSpotWithLimitAllowed'),
    autoScalingVersion?: string(name='AutoScalingVersion'),
    autoScalingWithGraceAllowed?: boolean(name='AutoScalingWithGraceAllowed'),
    bootstrapActionList?: {
      bootstrapAction?: [ 
      {
        arg?: string(name='Arg'),
        name?: string(name='Name'),
        path?: string(name='Path'),
      }
    ](name='BootstrapAction')
    }(name='BootstrapActionList'),
    bootstrapFailed?: boolean(name='BootstrapFailed'),
    chargeType?: string(name='ChargeType'),
    configurations?: string(name='Configurations'),
    coreNodeInService?: int32(name='CoreNodeInService'),
    coreNodeTotal?: int32(name='CoreNodeTotal'),
    createResource?: string(name='CreateResource'),
    createType?: string(name='CreateType'),
    depositType?: string(name='DepositType'),
    easEnable?: boolean(name='EasEnable'),
    expiredTime?: long(name='ExpiredTime'),
    extraInfo?: string(name='ExtraInfo'),
    failReason?: {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      requestId?: string(name='RequestId'),
    }(name='FailReason'),
    gatewayClusterIds?: string(name='GatewayClusterIds'),
    gatewayClusterInfoList?: {
      gatewayClusterInfo?: [ 
      {
        clusterId?: string(name='ClusterId'),
        clusterName?: string(name='ClusterName'),
        status?: string(name='Status'),
      }
    ](name='GatewayClusterInfo')
    }(name='GatewayClusterInfoList'),
    highAvailabilityEnable?: boolean(name='HighAvailabilityEnable'),
    hostGroupList?: {
      hostGroup?: [ 
      {
        bandWidth?: string(name='BandWidth'),
        chargeType?: string(name='ChargeType'),
        cpuCore?: int32(name='CpuCore'),
        diskCapacity?: int32(name='DiskCapacity'),
        diskCount?: int32(name='DiskCount'),
        diskType?: string(name='DiskType'),
        hostGroupChangeStatus?: string(name='HostGroupChangeStatus'),
        hostGroupChangeType?: string(name='HostGroupChangeType'),
        hostGroupId?: string(name='HostGroupId'),
        hostGroupName?: string(name='HostGroupName'),
        hostGroupSubType?: string(name='HostGroupSubType'),
        hostGroupType?: string(name='HostGroupType'),
        instanceType?: string(name='InstanceType'),
        lockReason?: string(name='LockReason'),
        lockType?: string(name='LockType'),
        memoryCapacity?: int32(name='MemoryCapacity'),
        nodeCount?: int32(name='NodeCount'),
        nodes?: {
          node?: [ 
          {
            createTime?: string(name='CreateTime'),
            daemonInfos?: {
              daemonInfo?: [ 
              {
                name?: string(name='Name'),
              }
            ](name='DaemonInfo')
            }(name='DaemonInfos'),
            diskInfos?: {
              diskInfo?: [ 
              {
                device?: string(name='Device'),
                diskId?: string(name='DiskId'),
                diskName?: string(name='DiskName'),
                size?: int32(name='Size'),
                type?: string(name='Type'),
              }
            ](name='DiskInfo')
            }(name='DiskInfos'),
            emrExpiredTime?: string(name='EmrExpiredTime'),
            expiredTime?: string(name='ExpiredTime'),
            innerIp?: string(name='InnerIp'),
            instanceId?: string(name='InstanceId'),
            pubIp?: string(name='PubIp'),
            status?: string(name='Status'),
            supportIpV6?: boolean(name='SupportIpV6'),
            zoneId?: string(name='ZoneId'),
          }
        ](name='Node')
        }(name='Nodes'),
        period?: string(name='Period'),
      }
    ](name='HostGroup')
    }(name='HostGroupList'),
    hostPoolInfo?: {
      hpBizId?: string(name='HpBizId'),
      hpName?: string(name='HpName'),
    }(name='HostPoolInfo'),
    id?: string(name='Id'),
    imageId?: string(name='ImageId'),
    instanceGeneration?: string(name='InstanceGeneration'),
    ioOptimized?: boolean(name='IoOptimized'),
    k8sClusterId?: string(name='K8sClusterId'),
    localMetaDb?: boolean(name='LocalMetaDb'),
    logEnable?: boolean(name='LogEnable'),
    logPath?: string(name='LogPath'),
    machineType?: string(name='MachineType'),
    masterNodeInService?: int32(name='MasterNodeInService'),
    masterNodeTotal?: int32(name='MasterNodeTotal'),
    metaStoreType?: string(name='MetaStoreType'),
    name?: string(name='Name'),
    netType?: string(name='NetType'),
    period?: int32(name='Period'),
    regionId?: string(name='RegionId'),
    relateClusterId?: string(name='RelateClusterId'),
    relateClusterInfo?: {
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      status?: string(name='Status'),
    }(name='RelateClusterInfo'),
    resizeDiskEnable?: boolean(name='ResizeDiskEnable'),
    runningTime?: int32(name='RunningTime'),
    securityGroupId?: string(name='SecurityGroupId'),
    securityGroupName?: string(name='SecurityGroupName'),
    showSoftwareInterface?: boolean(name='ShowSoftwareInterface'),
    softwareInfo?: {
      clusterType?: string(name='ClusterType'),
      emrVer?: string(name='EmrVer'),
      softwares?: {
        software?: [ 
        {
          displayName?: string(name='DisplayName'),
          name?: string(name='Name'),
          onlyDisplay?: boolean(name='OnlyDisplay'),
          startTpe?: int32(name='StartTpe'),
          version?: string(name='Version'),
        }
      ](name='Software')
      }(name='Softwares'),
    }(name='SoftwareInfo'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
    stopTime?: long(name='StopTime'),
    taskNodeInService?: int32(name='TaskNodeInService'),
    taskNodeTotal?: int32(name='TaskNodeTotal'),
    userDefinedEmrEcsRole?: string(name='UserDefinedEmrEcsRole'),
    userId?: string(name='UserId'),
    vSwitchId?: string(name='VSwitchId'),
    vpcId?: string(name='VpcId'),
    zoneId?: string(name='ZoneId'),
  }(name='ClusterInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterV2ResponseBody(name='body'),
}

async function describeClusterV2WithOptions(request: DescribeClusterV2Request, runtime: Util.RuntimeOptions): DescribeClusterV2Response {
  Util.validateModel(request);
  var query = {};
  query["Id"] = request.id;
  query["RegionId"] = request.regionId;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterV2',
    version = '2020-06-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterV2(request: DescribeClusterV2Request): DescribeClusterV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterV2WithOptions(request, runtime);
}

model ListClustersRequest {
  clusterTypeList?: [ string ](name='ClusterTypeList'),
  createType?: string(name='CreateType'),
  defaultStatus?: boolean(name='DefaultStatus'),
  depositType?: string(name='DepositType'),
  expiredTagList?: [ string ](name='ExpiredTagList'),
  isDesc?: boolean(name='IsDesc'),
  machineType?: string(name='MachineType'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  statusList?: [ string ](name='StatusList'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListClustersResponseBody = {
  clusters?: {
    clusterInfo?: [ 
    {
      chargeType?: string(name='ChargeType'),
      createResource?: string(name='CreateResource'),
      createTime?: long(name='CreateTime'),
      depositType?: string(name='DepositType'),
      expiredTime?: long(name='ExpiredTime'),
      failReason?: {
        errorCode?: string(name='ErrorCode'),
        errorMsg?: string(name='ErrorMsg'),
        requestId?: string(name='RequestId'),
      }(name='FailReason'),
      hasUncompletedOrder?: boolean(name='HasUncompletedOrder'),
      id?: string(name='Id'),
      k8sClusterId?: string(name='K8sClusterId'),
      machineType?: string(name='MachineType'),
      metaStoreType?: string(name='MetaStoreType'),
      name?: string(name='Name'),
      orderList?: string(name='OrderList'),
      orderTaskInfo?: {
        currentCount?: int32(name='CurrentCount'),
        orderIdList?: string(name='OrderIdList'),
        targetCount?: int32(name='TargetCount'),
      }(name='OrderTaskInfo'),
      period?: int32(name='Period'),
      runningTime?: int32(name='RunningTime'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      type?: string(name='Type'),
    }
  ](name='ClusterInfo')
  }(name='Clusters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListClustersResponseBody(name='body'),
}

async function listClustersWithOptions(request: ListClustersRequest, runtime: Util.RuntimeOptions): ListClustersResponse {
  Util.validateModel(request);
  var query = {};
  query["ClusterTypeList"] = request.clusterTypeList;
  query["CreateType"] = request.createType;
  query["DefaultStatus"] = request.defaultStatus;
  query["DepositType"] = request.depositType;
  query["ExpiredTagList"] = request.expiredTagList;
  query["IsDesc"] = request.isDesc;
  query["MachineType"] = request.machineType;
  query["Name"] = request.name;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["RegionId"] = request.regionId;
  query["ResourceGroupId"] = request.resourceGroupId;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["StatusList"] = request.statusList;
  query["Tag"] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListClusters',
    version = '2020-06-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClustersWithOptions(request, runtime);
}

model ReleaseClusterRequest {
  forceRelease?: boolean(name='ForceRelease'),
  id?: string(name='Id'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReleaseClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseClusterResponseBody(name='body'),
}

async function releaseClusterWithOptions(request: ReleaseClusterRequest, runtime: Util.RuntimeOptions): ReleaseClusterResponse {
  Util.validateModel(request);
  var query = {};
  query["ForceRelease"] = request.forceRelease;
  query["Id"] = request.id;
  query["RegionId"] = request.regionId;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseCluster',
    version = '2020-06-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseCluster(request: ReleaseClusterRequest): ReleaseClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseClusterWithOptions(request, runtime);
}

