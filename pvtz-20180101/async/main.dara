/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'pvtz';
  @version = '2018-01-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddResolverEndpointRequest {
  ipConfig: [ 
    {
      azId: string(name='AzId'),
      cidrBlock: string(name='CidrBlock'),
      ip?: string(name='Ip'),
      vSwitchId: string(name='VSwitchId'),
    }
  ](name='IpConfig', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name: string(name='Name', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  vpcRegionId: string(name='VpcRegionId', position='Query'),
}

model AddResolverEndpointResponseBody = {
  endpointId?: string(name='EndpointId'),
  requestId?: string(name='RequestId'),
}

model AddResolverEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: AddResolverEndpointResponseBody(name='body'),
}

async function addResolverEndpoint(request: AddResolverEndpointRequest): AddResolverEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddResolverEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model AddResolverRuleRequest {
  endpointId: string(name='EndpointId', position='Query'),
  forwardIp: [ 
    {
      ip: string(name='Ip'),
      port: int32(name='Port'),
    }
  ](name='ForwardIp', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name: string(name='Name', position='Query'),
  type?: string(name='Type', position='Query'),
  zoneName: string(name='ZoneName', position='Query'),
}

model AddResolverRuleResponseBody = {
  requestId?: string(name='RequestId'),
  ruleId?: string(name='RuleId'),
}

model AddResolverRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddResolverRuleResponseBody(name='body'),
}

async function addResolverRule(request: AddResolverRuleRequest): AddResolverRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddResolverRule', 'POST', '/', 'json', false, 'json', request);
}

model AddUserVpcAuthorizationRequest {
  authChannel?: string(name='AuthChannel', position='Query'),
  authCode?: string(name='AuthCode', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  authorizedUserId: long(name='AuthorizedUserId', position='Query'),
}

model AddUserVpcAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUserVpcAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserVpcAuthorizationResponseBody(name='body'),
}

async function addUserVpcAuthorization(request: AddUserVpcAuthorizationRequest): AddUserVpcAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserVpcAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model AddZoneRequest {
  lang?: string(name='Lang', position='Query'),
  proxyPattern?: string(name='ProxyPattern', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  zoneName?: string(name='ZoneName', position='Query'),
  zoneTag?: string(name='ZoneTag', position='Query'),
  zoneType?: string(name='ZoneType', position='Query'),
}

model AddZoneResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  zoneId?: string(name='ZoneId'),
  zoneName?: string(name='ZoneName'),
}

model AddZoneResponse = {
  headers: map[string]string(name='headers'),
  body: AddZoneResponseBody(name='body'),
}

async function addZone(request: AddZoneRequest): AddZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddZone', 'POST', '/', 'json', false, 'json', request);
}

model AddZoneRecordRequest {
  lang?: string(name='Lang', position='Query'),
  priority?: int32(name='Priority', minimum=1, maximum=99, position='Query'),
  remark?: string(name='Remark', position='Query'),
  rr: string(name='Rr', position='Query'),
  ttl?: int32(name='Ttl', minimum=5, maximum=86400, position='Query'),
  type: string(name='Type', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  value: string(name='Value', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model AddZoneRecordResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  body: AddZoneRecordResponseBody(name='body'),
}

async function addZoneRecord(request: AddZoneRecordRequest): AddZoneRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddZoneRecord', 'POST', '/', 'json', false, 'json', request);
}

model BindResolverRuleVpcRequest {
  lang?: string(name='Lang', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  vpc?: [ 
    {
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Vpc', position='Query'),
}

model BindResolverRuleVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindResolverRuleVpcResponse = {
  headers: map[string]string(name='headers'),
  body: BindResolverRuleVpcResponseBody(name='body'),
}

async function bindResolverRuleVpc(request: BindResolverRuleVpcRequest): BindResolverRuleVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindResolverRuleVpc', 'POST', '/', 'json', false, 'json', request);
}

model BindZoneVpcRequest {
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  vpcs?: [ 
    {
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Vpcs', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model BindZoneVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindZoneVpcResponse = {
  headers: map[string]string(name='headers'),
  body: BindZoneVpcResponseBody(name='body'),
}

async function bindZoneVpc(request: BindZoneVpcRequest): BindZoneVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindZoneVpc', 'POST', '/', 'json', false, 'json', request);
}

model CheckZoneNameRequest {
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  zoneName?: string(name='ZoneName', position='Query'),
}

model CheckZoneNameResponseBody = {
  check?: boolean(name='Check'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckZoneNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckZoneNameResponseBody(name='body'),
}

async function checkZoneName(request: CheckZoneNameRequest): CheckZoneNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckZoneName', 'POST', '/', 'json', false, 'json', request);
}

model DeleteResolverEndpointRequest {
  endpointId: string(name='EndpointId', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DeleteResolverEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteResolverEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResolverEndpointResponseBody(name='body'),
}

async function deleteResolverEndpoint(request: DeleteResolverEndpointRequest): DeleteResolverEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResolverEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteResolverRuleRequest {
  lang?: string(name='Lang', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model DeleteResolverRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteResolverRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResolverRuleResponseBody(name='body'),
}

async function deleteResolverRule(request: DeleteResolverRuleRequest): DeleteResolverRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResolverRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserVpcAuthorizationRequest {
  authType?: string(name='AuthType', position='Query'),
  authorizedUserId: long(name='AuthorizedUserId', position='Query'),
}

model DeleteUserVpcAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserVpcAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserVpcAuthorizationResponseBody(name='body'),
}

async function deleteUserVpcAuthorization(request: DeleteUserVpcAuthorizationRequest): DeleteUserVpcAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserVpcAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model DeleteZoneRequest {
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model DeleteZoneResponseBody = {
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
}

model DeleteZoneResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteZoneResponseBody(name='body'),
}

async function deleteZone(request: DeleteZoneRequest): DeleteZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteZone', 'POST', '/', 'json', false, 'json', request);
}

model DeleteZoneRecordRequest {
  lang?: string(name='Lang', position='Query'),
  recordId: long(name='RecordId', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model DeleteZoneRecordResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model DeleteZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteZoneRecordResponseBody(name='body'),
}

async function deleteZoneRecord(request: DeleteZoneRecordRequest): DeleteZoneRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteZoneRecord', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChangeLogsRequest {
  endTimestamp?: long(name='EndTimestamp', position='Query'),
  entityType?: string(name='EntityType', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  startTimestamp?: long(name='StartTimestamp', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeChangeLogsResponseBody = {
  changeLogs?: {
    changeLog?: [ 
    {
      content?: string(name='Content'),
      entityId?: string(name='EntityId'),
      entityName?: string(name='EntityName'),
      id?: long(name='Id'),
      operAction?: string(name='OperAction'),
      operIp?: string(name='OperIp'),
      operObject?: string(name='OperObject'),
      operTime?: string(name='OperTime'),
      operTimestamp?: long(name='OperTimestamp'),
    }
  ](name='ChangeLog')
  }(name='ChangeLogs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeChangeLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChangeLogsResponseBody(name='body'),
}

async function describeChangeLogs(request: DescribeChangeLogsRequest): DescribeChangeLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChangeLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  authorizedUserId?: long(name='AuthorizedUserId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRequestGraphRequest {
  bizId?: string(name='BizId', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  endTimestamp: long(name='EndTimestamp', position='Query'),
  lang?: string(name='Lang', position='Query'),
  startTimestamp: long(name='StartTimestamp', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeRequestGraphResponseBody = {
  requestDetails?: {
    zoneRequestTop?: [ 
    {
      requestCount?: long(name='RequestCount'),
      time?: string(name='Time'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='ZoneRequestTop')
  }(name='RequestDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeRequestGraphResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRequestGraphResponseBody(name='body'),
}

async function describeRequestGraph(request: DescribeRequestGraphRequest): DescribeRequestGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRequestGraph', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverAvailableZonesRequest {
  azId?: string(name='AzId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  resolverRegionId: string(name='ResolverRegionId', position='Query'),
}

model DescribeResolverAvailableZonesResponseBody = {
  availableZones?: [ 
    {
      azId?: string(name='AzId'),
      status?: string(name='Status'),
    }
  ](name='AvailableZones'),
  requestId?: string(name='RequestId'),
}

model DescribeResolverAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResolverAvailableZonesResponseBody(name='body'),
}

async function describeResolverAvailableZones(request: DescribeResolverAvailableZonesRequest): DescribeResolverAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverAvailableZones', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverEndpointRequest {
  endpointId: string(name='EndpointId', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DescribeResolverEndpointResponseBody = {
  createTime?: string(name='CreateTime'),
  createTimestamp?: long(name='CreateTimestamp'),
  id?: string(name='Id'),
  ipConfigs?: [ 
    {
      azId?: string(name='AzId'),
      cidrBlock?: string(name='CidrBlock'),
      ip?: string(name='Ip'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='IpConfigs'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  securityGroupId?: string(name='SecurityGroupId'),
  status?: string(name='Status'),
  updateTime?: string(name='UpdateTime'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  vpcId?: string(name='VpcId'),
  vpcName?: string(name='VpcName'),
  vpcRegionId?: string(name='VpcRegionId'),
  vpcRegionName?: string(name='VpcRegionName'),
}

model DescribeResolverEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResolverEndpointResponseBody(name='body'),
}

async function describeResolverEndpoint(request: DescribeResolverEndpointRequest): DescribeResolverEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverEndpointsRequest {
  keyword?: string(name='Keyword', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=9999999, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeResolverEndpointsResponseBody = {
  endpoints?: [ 
    {
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      id?: string(name='Id'),
      ipConfigs?: [ 
        {
          azId?: string(name='AzId'),
          cidrBlock?: string(name='CidrBlock'),
          ip?: string(name='Ip'),
          vSwitchId?: string(name='VSwitchId'),
        }
      ](name='IpConfigs'),
      name?: string(name='Name'),
      securityGroupId?: string(name='SecurityGroupId'),
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vpcRegionId?: string(name='VpcRegionId'),
      vpcRegionName?: string(name='VpcRegionName'),
    }
  ](name='Endpoints'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeResolverEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResolverEndpointsResponseBody(name='body'),
}

async function describeResolverEndpoints(request: DescribeResolverEndpointsRequest): DescribeResolverEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverRuleRequest {
  lang?: string(name='Lang', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model DescribeResolverRuleResponseBody = {
  bindVpcs?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
    }
  ](name='BindVpcs'),
  createTime?: string(name='CreateTime'),
  createTimestamp?: long(name='CreateTimestamp'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  forwardIps?: [ 
    {
      ip?: string(name='Ip'),
      port?: int32(name='Port'),
    }
  ](name='ForwardIps'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type'),
  updateTime?: string(name='UpdateTime'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  zoneName?: string(name='ZoneName'),
}

model DescribeResolverRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResolverRuleResponseBody(name='body'),
}

async function describeResolverRule(request: DescribeResolverRuleRequest): DescribeResolverRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverRulesRequest {
  endpointId?: string(name='EndpointId', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  lang?: string(name='Lang', position='Query'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=9999999, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
}

model DescribeResolverRulesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      bindVpcs?: [ 
        {
          regionId?: string(name='RegionId'),
          regionName?: string(name='RegionName'),
          vpcId?: string(name='VpcId'),
          vpcName?: string(name='VpcName'),
        }
      ](name='BindVpcs'),
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      endpointId?: string(name='EndpointId'),
      endpointName?: string(name='EndpointName'),
      forwardIps?: [ 
        {
          ip?: string(name='Ip'),
          port?: int32(name='Port'),
        }
      ](name='ForwardIps'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      type?: string(name='Type'),
      updateTime?: string(name='UpdateTime'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      zoneName?: string(name='ZoneName'),
    }
  ](name='Rules'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeResolverRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResolverRulesResponseBody(name='body'),
}

async function describeResolverRules(request: DescribeResolverRulesRequest): DescribeResolverRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStatisticSummaryRequest {
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model DescribeStatisticSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  vpcRequestTops?: {
    vpcRequestTop?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      requestCount?: long(name='RequestCount'),
      tunnelId?: string(name='TunnelId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VpcRequestTop')
  }(name='VpcRequestTops'),
  zoneRequestTops?: {
    zoneRequestTop?: [ 
    {
      bizType?: string(name='BizType'),
      requestCount?: long(name='RequestCount'),
      zoneName?: string(name='ZoneName'),
    }
  ](name='ZoneRequestTop')
  }(name='ZoneRequestTops'),
}

model DescribeStatisticSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStatisticSummaryResponseBody(name='body'),
}

async function describeStatisticSummary(request: DescribeStatisticSummaryRequest): DescribeStatisticSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStatisticSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSyncEcsHostTaskRequest {
  lang?: string(name='Lang', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model DescribeSyncEcsHostTaskResponseBody = {
  ecsRegions?: {
    ecsRegion?: [ 
    {
      regionIds?: {
        regionId?: [ string ](name='RegionId')
      }(name='RegionIds'),
      userId?: long(name='UserId'),
    }
  ](name='EcsRegion')
  }(name='EcsRegions'),
  regions?: {
    regionId?: [ string ](name='RegionId')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  zoneId?: string(name='ZoneId'),
}

model DescribeSyncEcsHostTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSyncEcsHostTaskResponseBody(name='body'),
}

async function describeSyncEcsHostTask(request: DescribeSyncEcsHostTaskRequest): DescribeSyncEcsHostTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSyncEcsHostTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  lang?: string(name='Lang', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model DescribeTagsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      values?: [ string ](name='Values'),
    }
  ](name='Tags'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserVpcAuthorizationsRequest {
  authType?: string(name='AuthType', position='Query'),
  authorizedUserId?: long(name='AuthorizedUserId', position='Query'),
  pageNumber?: int32(name='PageNumber', maximum=9999999, position='Query'),
  pageSize?: int32(name='PageSize', maximum=100, position='Query'),
}

model DescribeUserVpcAuthorizationsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
  users?: [ 
    {
      authType?: string(name='AuthType'),
      authorizedAliyunId?: string(name='AuthorizedAliyunId'),
      authorizedUserId?: long(name='AuthorizedUserId'),
    }
  ](name='Users'),
}

model DescribeUserVpcAuthorizationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserVpcAuthorizationsResponseBody(name='body'),
}

async function describeUserVpcAuthorizations(request: DescribeUserVpcAuthorizationsRequest): DescribeUserVpcAuthorizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserVpcAuthorizations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZoneInfoRequest {
  lang?: string(name='Lang', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model DescribeZoneInfoResponseBody = {
  bindVpcs?: {
    vpc?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vpcUserId?: long(name='VpcUserId'),
    }
  ](name='Vpc')
  }(name='BindVpcs'),
  createTime?: string(name='CreateTime'),
  createTimestamp?: long(name='CreateTimestamp'),
  isPtr?: boolean(name='IsPtr'),
  proxyPattern?: string(name='ProxyPattern'),
  recordCount?: int32(name='RecordCount'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  slaveDns?: boolean(name='SlaveDns'),
  updateTime?: string(name='UpdateTime'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  zoneId?: string(name='ZoneId'),
  zoneName?: string(name='ZoneName'),
  zoneTag?: string(name='ZoneTag'),
  zoneType?: string(name='ZoneType'),
}

model DescribeZoneInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZoneInfoResponseBody(name='body'),
}

async function describeZoneInfo(request: DescribeZoneInfoRequest): DescribeZoneInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZoneInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZoneRecordsRequest {
  keyword?: string(name='Keyword', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  searchMode?: string(name='SearchMode', position='Query'),
  tag?: string(name='Tag', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model DescribeZoneRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  records?: {
    record?: [ 
    {
      priority?: int32(name='Priority'),
      recordId?: long(name='RecordId'),
      remark?: string(name='Remark'),
      rr?: string(name='Rr'),
      status?: string(name='Status'),
      ttl?: int32(name='Ttl'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='Record')
  }(name='Records'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeZoneRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZoneRecordsResponseBody(name='body'),
}

async function describeZoneRecords(request: DescribeZoneRecordsRequest): DescribeZoneRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZoneRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZoneVpcTreeRequest {
  lang?: string(name='Lang', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model DescribeZoneVpcTreeResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      isPtr?: boolean(name='IsPtr'),
      recordCount?: int32(name='RecordCount'),
      remark?: string(name='Remark'),
      updateTime?: string(name='UpdateTime'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      vpcs?: {
        vpc?: [ 
        {
          regionId?: string(name='RegionId'),
          regionName?: string(name='RegionName'),
          vpcId?: string(name='VpcId'),
          vpcName?: string(name='VpcName'),
        }
      ](name='Vpc')
      }(name='Vpcs'),
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
      zoneTag?: string(name='ZoneTag'),
      zoneType?: string(name='ZoneType'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZoneVpcTreeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZoneVpcTreeResponseBody(name='body'),
}

async function describeZoneVpcTree(request: DescribeZoneVpcTreeRequest): DescribeZoneVpcTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZoneVpcTree', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  keyword?: string(name='Keyword', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  queryRegionId?: string(name='QueryRegionId', position='Query'),
  queryVpcId?: string(name='QueryVpcId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='ResourceTag', position='Query'),
  searchMode?: string(name='SearchMode', position='Query'),
  zoneTag?: [ string ](name='ZoneTag', position='Query'),
  zoneType?: string(name='ZoneType', position='Query'),
}

model DescribeZonesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
  zones?: {
    zone?: [ 
    {
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      isPtr?: boolean(name='IsPtr'),
      proxyPattern?: string(name='ProxyPattern'),
      recordCount?: int32(name='RecordCount'),
      remark?: string(name='Remark'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceTags?: {
        resourceTag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='ResourceTag')
      }(name='ResourceTags'),
      updateTime?: string(name='UpdateTime'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
      zoneTag?: string(name='ZoneTag'),
      zoneType?: string(name='ZoneType'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  lang?: string(name='Lang', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  size?: int32(name='Size', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  lang?: string(name='Lang', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetProxyPatternRequest {
  lang?: string(name='Lang', position='Query'),
  proxyPattern: string(name='ProxyPattern', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model SetProxyPatternResponseBody = {
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
}

model SetProxyPatternResponse = {
  headers: map[string]string(name='headers'),
  body: SetProxyPatternResponseBody(name='body'),
}

async function setProxyPattern(request: SetProxyPatternRequest): SetProxyPatternResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetProxyPattern', 'POST', '/', 'json', false, 'json', request);
}

model SetZoneRecordStatusRequest {
  lang?: string(name='Lang', position='Query'),
  recordId: long(name='RecordId', position='Query'),
  status: string(name='Status', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
}

model SetZoneRecordStatusResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model SetZoneRecordStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetZoneRecordStatusResponseBody(name='body'),
}

async function setZoneRecordStatus(request: SetZoneRecordStatusRequest): SetZoneRecordStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetZoneRecordStatus', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  lang?: string(name='Lang', position='Query'),
  overWrite?: boolean(name='OverWrite', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  lang?: string(name='Lang', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRecordRemarkRequest {
  lang?: string(name='Lang', position='Query'),
  recordId: long(name='RecordId', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model UpdateRecordRemarkResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model UpdateRecordRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRecordRemarkResponseBody(name='body'),
}

async function updateRecordRemark(request: UpdateRecordRemarkRequest): UpdateRecordRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRecordRemark', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResolverEndpointRequest {
  endpointId: string(name='EndpointId', position='Query'),
  ipConfig?: [ 
    {
      azId?: string(name='AzId'),
      cidrBlock?: string(name='CidrBlock'),
      ip?: string(name='Ip'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='IpConfig', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
}

model UpdateResolverEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResolverEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResolverEndpointResponseBody(name='body'),
}

async function updateResolverEndpoint(request: UpdateResolverEndpointRequest): UpdateResolverEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResolverEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResolverRuleRequest {
  forwardIp?: [ 
    {
      ip?: string(name='Ip'),
      port?: int32(name='Port'),
    }
  ](name='ForwardIp', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model UpdateResolverRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResolverRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResolverRuleResponseBody(name='body'),
}

async function updateResolverRule(request: UpdateResolverRuleRequest): UpdateResolverRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResolverRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSyncEcsHostTaskRequest {
  lang?: string(name='Lang', position='Query'),
  region: [ 
    {
      regionId?: string(name='RegionId'),
      userId?: long(name='UserId'),
    }
  ](name='Region', position='Query'),
  status: string(name='Status', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model UpdateSyncEcsHostTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSyncEcsHostTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSyncEcsHostTaskResponseBody(name='body'),
}

async function updateSyncEcsHostTask(request: UpdateSyncEcsHostTaskRequest): UpdateSyncEcsHostTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSyncEcsHostTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateZoneRecordRequest {
  lang?: string(name='Lang', position='Query'),
  priority?: int32(name='Priority', minimum=1, maximum=99, position='Query'),
  recordId: long(name='RecordId', position='Query'),
  rr: string(name='Rr', position='Query'),
  ttl?: int32(name='Ttl', minimum=5, maximum=86400, position='Query'),
  type: string(name='Type', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  value: string(name='Value', position='Query'),
}

model UpdateZoneRecordResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model UpdateZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateZoneRecordResponseBody(name='body'),
}

async function updateZoneRecord(request: UpdateZoneRecordRequest): UpdateZoneRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateZoneRecord', 'POST', '/', 'json', false, 'json', request);
}

model UpdateZoneRemarkRequest {
  lang?: string(name='Lang', position='Query'),
  remark?: string(name='Remark', position='Query'),
  userClientIp?: string(name='UserClientIp', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model UpdateZoneRemarkResponseBody = {
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
}

model UpdateZoneRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateZoneRemarkResponseBody(name='body'),
}

async function updateZoneRemark(request: UpdateZoneRemarkRequest): UpdateZoneRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateZoneRemark', 'POST', '/', 'json', false, 'json', request);
}

