/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'pvtz';
  @version = '2018-01-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddCustomLineRequest {
  dnsCategory?: string(name='DnsCategory', example='INTRANET', position='Query'),
  ipv4s: [ string ](name='Ipv4s', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  name: string(name='Name', position='Query'),
  shareScope?: string(name='ShareScope', example='GLOBAL', position='Query'),
}

model AddCustomLineResponseBody = {
  lineId?: string(name='LineId', example='1065001'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
}

model AddCustomLineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCustomLineResponseBody(name='body'),
}

async function addCustomLine(request: AddCustomLineRequest): AddCustomLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCustomLine', 'POST', '/', 'json', false, 'json', request);
}

model AddResolverEndpointRequest {
  ipConfig: [ 
    {
      azId: string(name='AzId', description='The zone ID.', example='cn-hangzhou-a'),
      cidrBlock: string(name='CidrBlock', description='The IPv4 CIDR block of the vSwitch.', example='172.16.0.0/24'),
      ip?: string(name='Ip', description='The source IP address of outbound traffic. The IP address must be within the specified CIDR block.', example='172.16.xx.xx'),
      vSwitchId: string(name='VSwitchId', description='The vSwitch ID.', example='sjqkql'),
    }
  ](name='IpConfig', description='The source IP addresses of outbound traffic. You must add two to six source IP addresses to ensure high availability.', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  name: string(name='Name', description='The endpoint name. The name can be up to 20 characters in length. If the upper limit is exceeded, an error message is returned.', example='endpoint-test-name', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The security group ID.', example='kqlqlqjqqkq', position='Query'),
  vpcId: string(name='VpcId', description='The outbound VPC ID.', example='vpc-129343jslslsks', position='Query'),
  vpcRegionId: string(name='VpcRegionId', description='The region ID of the outbound virtual private cloud (VPC).', example='cn-hangzhou', position='Query'),
}

model AddResolverEndpointResponseBody = {
  endpointId?: string(name='EndpointId', description='The outbound endpoint ID.', example='hra0**'),
  requestId?: string(name='RequestId', description='The request ID.', example='32436208-E1AF-4DAB-B3B8-24F5F25B0950'),
}

model AddResolverEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddResolverEndpointResponseBody(name='body'),
}

async function addResolverEndpoint(request: AddResolverEndpointRequest): AddResolverEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddResolverEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model AddResolverRuleRequest {
  endpointId: string(name='EndpointId', description='The endpoint ID.', example='hra0**', position='Query'),
  forwardIp: [ 
    {
      ip: string(name='Ip', description='The destination IP address.', example='172.16.xx.xx'),
      port: int32(name='Port', description='The port number.', example='8080'),
    }
  ](name='ForwardIp', description='The destination IP address and port number.', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  name: string(name='Name', description='The name of the forwarding rule.', example='test', position='Query'),
  type?: string(name='Type', description='The type of the forwarding rule. Valid value:

*   OUTBOUND: forwards Domain Name System (DNS) requests to one or more external IP addresses.', example='OUTBOUND', position='Query'),
  zoneName: string(name='ZoneName', description='The name of the forward zone.', example='example.com', position='Query'),
}

model AddResolverRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='725B8BED-901F-480C-BBAC-FA59A18580C1'),
  ruleId?: string(name='RuleId', description='The forwarding rule ID.', example='hra0**'),
}

model AddResolverRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddResolverRuleResponseBody(name='body'),
}

async function addResolverRule(request: AddResolverRuleRequest): AddResolverRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddResolverRule', 'POST', '/', 'json', false, 'json', request);
}

model AddUserVpcAuthorizationRequest {
  authChannel?: string(name='AuthChannel', description='The authorization method. Valid values:

*   AUTH_CODE: An authorization code is used to associate VPCs across accounts. The system checks whether the value of AuthCode is valid.
*   RESOURCE_DIRECTORY: A resource directory is used to associate VPCs across accounts. The system checks whether the value of AuthorizedUserId and the current account are in the same resource directory.
*   If this parameter is empty, an authorization code is used to associate VPCs across accounts.', example='AUTH_CODE', position='Query'),
  authCode?: string(name='AuthCode', description='The verification code.

This parameter is required when AuthType is set to NORMAL or is left empty and AuthChannel is set to AUTH_CODE or is left empty.', example='123456', position='Query'),
  authType?: string(name='AuthType', description='The authorization scope. Valid values:

*   NORMAL: general authorization.
*   CLOUD_PRODUCT: cloud service-related authorization', example='NORMAL', position='Query'),
  authorizedUserId: long(name='AuthorizedUserId', description='The ID of the Alibaba Cloud account.', example='111222333', position='Query'),
}

model AddUserVpcAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='46973D4C-E3E4-4ABA-9190-9A9DE406C7E'),
}

model AddUserVpcAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserVpcAuthorizationResponseBody(name='body'),
}

async function addUserVpcAuthorization(request: AddUserVpcAuthorizationRequest): AddUserVpcAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserVpcAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model AddZoneRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='21079fa016944979537637959d09bc', position='Query'),
  dnsGroup?: string(name='DnsGroup', description='The logical location of the built-in authoritative module in which the zone is added. Valid values:

*   Normal zone: regular module
*   Fast Zone: acceleration module', example='FAST_ZONE', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  proxyPattern?: string(name='ProxyPattern', description='*   Specifies whether to enable the recursive resolution proxy feature for the zone. Valid values: **ZONE**: disables the recursive resolution proxy feature for the zone.
*   **RECORD**: enables the recursive resolution proxy feature for the zone.', example='ZONE', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-resourcegroupid1', position='Query'),
  zoneName?: string(name='ZoneName', description='The name of the zone.', example='example.com', position='Query'),
  zoneTag?: string(name='ZoneTag', description='This parameter is not available. You can ignore it.', example='BLINK', position='Query'),
  zoneType?: string(name='ZoneType', description='This parameter is not available. You can ignore it.', example='CLOUD_PRODUCT_ZONE', position='Query'),
}

model AddZoneResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='46973D4C-E3E4-4ABA-9190-9A9DE406C7E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  zoneId?: string(name='ZoneId', description='The global ID of the zone.', example='AgIDE1MQ_151'),
  zoneName?: string(name='ZoneName', description='The name of the zone.', example='example.com'),
}

model AddZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddZoneResponseBody(name='body'),
}

async function addZone(request: AddZoneRequest): AddZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddZone', 'POST', '/', 'json', false, 'json', request);
}

model AddZoneRecordRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6447728c8578e66aacf062d2df4446dc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  line?: string(name='Line', description='The resolution line. Default value: **default**.', example='default', position='Query'),
  priority?: int32(name='Priority', description='The priority of the mail exchanger (MX) record. Valid values: **1 to 99**.', example='5', minimum=1, maximum=99, position='Query'),
  remark?: string(name='Remark', description='The language.', example='en', position='Query'),
  rr: string(name='Rr', description='The hostname.

For example, you must set Rr to @ if you want to resolve @.example.com.', example='www', position='Query'),
  ttl?: int32(name='Ttl', description='The time to live (TTL) of the DNS record. Default value: **60**.', example='60', minimum=5, maximum=86400, position='Query'),
  type: string(name='Type', description='The type of the DNS record. Valid values: **A**, **AAAA**, **CNAME**, **TXT**, **MX**, **PTR**, and **SRV**.', example='A', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='2.2.XX.XX', position='Query'),
  value: string(name='Value', description='The record value.', example='1.1.XX.XX', position='Query'),
  weight?: int32(name='Weight', description='The weight of the address. Valid values: **0 to 100**. Default value: 1.', example='1', position='Query'),
  zoneId: string(name='ZoneId', description='The global ID of the zone.', example='CAgICA1OA_58', position='Query'),
}

model AddZoneRecordResponseBody = {
  recordId?: long(name='RecordId', description='The ID of the DNS record.', example='5808'),
  requestId?: string(name='RequestId', description='The request ID.', example='0B7AD377-7E86-44A8-B9A8-53E8666E72FE'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AddZoneRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddZoneRecordResponseBody(name='body'),
}

async function addZoneRecord(request: AddZoneRecordRequest): AddZoneRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddZoneRecord', 'POST', '/', 'json', false, 'json', request);
}

model BindResolverRuleVpcRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  ruleId: string(name='RuleId', description='The forwarding rule ID.', example='hra0**', position='Query'),
  vpc?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-kqk1i2o2ajsksl-vpc-test'),
      vpcType?: string(name='VpcType', description='The VPC type. Valid values:

*   STANDARD: standard VPC
*   EDS: Elastic Desktop Service (EDS) workspace VPC', example='STANDARD'),
    }
  ](name='Vpc', description='The VPCs.', position='Query'),
}

model BindResolverRuleVpcResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='12FE6E98-3885-423E-B18B-88CC17052A31'),
}

model BindResolverRuleVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindResolverRuleVpcResponseBody(name='body'),
}

async function bindResolverRuleVpc(request: BindResolverRuleVpcRequest): BindResolverRuleVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindResolverRuleVpc', 'POST', '/', 'json', false, 'json', request);
}

model BindZoneVpcRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6447728c8578e66aacf062d2df4446dc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='1.1.1.1', position='Query'),
  vpcs?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      vpcId?: string(name='VpcId', description='The VPC ID. If you do not specify this parameter, the VPCs that are bound to the zone are unbound from the zone.', example='daily-vpc-id'),
      vpcType?: string(name='VpcType', description='The type of the VPC. Valid values:

*   **STANDARD**: standard VPC
*   **EDS**: Elastic Desktop Service (EDS) workspace VPC', example='STANDARD'),
    }
  ](name='Vpcs', description='The information about VPCs.', position='Query'),
  zoneId: string(name='ZoneId', description='The global ID of the zone.', example='AgIDE0OQ_149', position='Query'),
}

model BindZoneVpcResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='46973D4C-E3E4-4ABA-9190-9A9DE406C7E'),
}

model BindZoneVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindZoneVpcResponseBody(name='body'),
}

async function bindZoneVpc(request: BindZoneVpcRequest): BindZoneVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindZoneVpc', 'POST', '/', 'json', false, 'json', request);
}

model ChangeZoneDnsGroupRequest {
  clientToken?: string(name='ClientToken', example='85456erer657cfgfg3437', position='Query'),
  dnsGroup: string(name='DnsGroup', example='NORMAL_ZONE', position='Query'),
  zoneId: string(name='ZoneId', example='e0cff188756b1d4579b25e54b66cb830', position='Query'),
}

model ChangeZoneDnsGroupResponseBody = {
  requestId?: string(name='RequestId', example='C6F1D541-E7A6-447A-A2B5-9F7A20B2A8FB'),
  zoneId?: string(name='ZoneId', example='e0cff188756b1d4579b25e54b66cb830'),
}

model ChangeZoneDnsGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeZoneDnsGroupResponseBody(name='body'),
}

async function changeZoneDnsGroup(request: ChangeZoneDnsGroupRequest): ChangeZoneDnsGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeZoneDnsGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckZoneNameRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='192.0.2.0', position='Query'),
  zoneName?: string(name='ZoneName', description='The name of the zone. This parameter is required.', example='example.com', position='Query'),
}

model CheckZoneNameResponseBody = {
  check?: boolean(name='Check', description='Indicates whether the zone name is valid. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='CA29B88F-A571-4123-80D5-768AC2F7F806'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CheckZoneNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckZoneNameResponseBody(name='body'),
}

async function checkZoneName(request: CheckZoneNameRequest): CheckZoneNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckZoneName', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomLineRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  lineId: string(name='LineId', example='1045001', position='Query'),
}

model DeleteCustomLineResponseBody = {
  lineId?: string(name='LineId', example='520002'),
  requestId?: string(name='RequestId', example='A73F3BD0-B1A8-42A9-A9B6-689BBABC4891'),
}

model DeleteCustomLineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomLineResponseBody(name='body'),
}

async function deleteCustomLine(request: DeleteCustomLineRequest): DeleteCustomLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomLine', 'POST', '/', 'json', false, 'json', request);
}

model DeleteResolverEndpointRequest {
  endpointId: string(name='EndpointId', description='The endpoint ID.', example='hra0**', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
}

model DeleteResolverEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='35134B4A-CEC0-43C8-AAD4-BA54AE3268B5'),
}

model DeleteResolverEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResolverEndpointResponseBody(name='body'),
}

async function deleteResolverEndpoint(request: DeleteResolverEndpointRequest): DeleteResolverEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResolverEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteResolverRuleRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  ruleId: string(name='RuleId', description='The forwarding rule ID.', example='hra0**', position='Query'),
}

model DeleteResolverRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0C9959BE-3A6A-4803-8DCE-973B42ACD599'),
}

model DeleteResolverRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResolverRuleResponseBody(name='body'),
}

async function deleteResolverRule(request: DeleteResolverRuleRequest): DeleteResolverRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResolverRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserVpcAuthorizationRequest {
  authType?: string(name='AuthType', description='The authorization scope. Valid values:

*   NORMAL: general authorization
*   NORMAL: cloud service-related authorization', example='NORMAL', position='Query'),
  authorizedUserId: long(name='AuthorizedUserId', description='The ID of the Alibaba Cloud account.', example='11111111', position='Query'),
}

model DeleteUserVpcAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='46973D4C-E3E4-4ABA-9190-9A9DE406C7E'),
}

model DeleteUserVpcAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserVpcAuthorizationResponseBody(name='body'),
}

async function deleteUserVpcAuthorization(request: DeleteUserVpcAuthorizationRequest): DeleteUserVpcAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserVpcAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model DeleteZoneRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='21079fa016944979537637959d09bc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='1.1.XX.XX', position='Query'),
  zoneId: string(name='ZoneId', description='The global ID of the zone.', example='AgIDE1MA_150', position='Query'),
}

model DeleteZoneResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E246E023-F2EB-4034-83F7-B13FCF31459C'),
  zoneId?: string(name='ZoneId', description='The global ID of the zone.', example='AgIDE1MA_150'),
}

model DeleteZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteZoneResponseBody(name='body'),
}

async function deleteZone(request: DeleteZoneRequest): DeleteZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteZone', 'POST', '/', 'json', false, 'json', request);
}

model DeleteZoneRecordRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6447728c8578e66aacf062d2df4446dc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  recordId: long(name='RecordId', description='The ID of the DNS record.', example='5808', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='1.1.XX.XX', position='Query'),
}

model DeleteZoneRecordResponseBody = {
  recordId?: long(name='RecordId', description='The ID of the DNS record.', example='5808'),
  requestId?: string(name='RequestId', description='The request ID.', example='0B7AD377-7E86-44A8-B9A8-53E8666E72FE'),
}

model DeleteZoneRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteZoneRecordResponseBody(name='body'),
}

async function deleteZoneRecord(request: DeleteZoneRecordRequest): DeleteZoneRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteZoneRecord', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChangeLogsRequest {
  endTimestamp?: long(name='EndTimestamp', description='The end of the time range to query. Set the time to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1516779348000', position='Query'),
  entityType?: string(name='EntityType', description='The type of operation logs. Valid values:

*   **PV_ZONE**: the logs that record the operations on zones
*   **PV_RECORD**: the logs that record the operations on DNS records

If you set this parameter to other values, all types of operation logs are queried.', example='PV_ZONE', position='Query'),
  keyword?: string(name='Keyword', description='The keyword for searches in "%KeyWord%" mode. The value is not case-sensitive.', example='test', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **20**.', example='100', minimum=1, maximum=100, position='Query'),
  startTimestamp?: long(name='StartTimestamp', description='The beginning of the time range to query. Set the time to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1516779348000', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='1.1.XX.XX', position='Query'),
  zoneId?: string(name='ZoneId', description='The global ID of the zone.\\
If you specify this parameter, the logs that record the operations on the Domain Name System (DNS) records of the specified zone are queried.\\
If you leave this parameter empty, the logs that record the operations on all zones that belong to the current Alibaba Cloud account and the DNS records of these zones are queried.', example='6726', position='Query'),
}

model DescribeChangeLogsResponseBody = {
  changeLogs?: {
    changeLog?: [ 
    {
      content?: string(name='Content', description='The details of the operation.', example='add test-api.com'),
      creatorId?: string(name='CreatorId', description='The operator ID.', example='13270376'),
      creatorSubType?: string(name='CreatorSubType', description='The subtype of the operator. Valid values:

*   CUSTOMER: Alibaba Cloud account
*   SUB: RAM user
*   STS: assumed role that obtains the Security Token Service (STS) token of a RAM role
*   OTHER: other types', example='SUB'),
      creatorType?: string(name='CreatorType', description='The operator type. No value or **USER** is returned for this parameter.', example='USER'),
      entityId?: string(name='EntityId', description='The ID of the object on which the operation was performed.', example='CAgICA1OA_58'),
      entityName?: string(name='EntityName', description='The name of the object on which the operation was performed.', example='test-api.com'),
      id?: long(name='Id', description='The log ID.', example='6726'),
      operAction?: string(name='OperAction', description='The operation type.', example='add'),
      operIp?: string(name='OperIp', description='The IP address of the client.', example='1.1.1.1'),
      operObject?: string(name='OperObject', description='The type of the object on which the operation is performed.', example='PV_ZONE'),
      operTime?: string(name='OperTime', description='The time when the operation is performed. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2018-01-24T07:35Z'),
      operTimestamp?: long(name='OperTimestamp', description='The time when the operation was performed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1516779348000'),
    }
  ](name='ChangeLog')
  }(name='ChangeLogs', description='The operation logs.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='2'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='F0FCB52A-D512-41A0-8595-40234EDCFD8B'),
  totalItems?: int32(name='TotalItems', description='The total number of entries returned.', example='100'),
  totalPages?: int32(name='TotalPages', description='The total number of pages.', example='100'),
}

model DescribeChangeLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChangeLogsResponseBody(name='body'),
}

async function describeChangeLogs(request: DescribeChangeLogsRequest): DescribeChangeLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChangeLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomLineInfoRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  lineId: string(name='LineId', example='11271', position='Query'),
}

model DescribeCustomLineInfoResponseBody = {
  createTime?: string(name='CreateTime', example='2018-01-23T03:15Z'),
  createTimestamp?: long(name='CreateTimestamp', example='1516775741000'),
  creator?: string(name='Creator', example='260282302749096109'),
  creatorSubType?: string(name='CreatorSubType', example='CUSTOM'),
  creatorType?: string(name='CreatorType', example='USER'),
  ipv4s?: [ string ](name='Ipv4s'),
  lineId?: string(name='LineId', example='100003'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', example='0B7AD377-7E86-44A8-B9A8-53E8666E72FE'),
  updateTime?: string(name='UpdateTime', example='2018-01-24T06:35Z'),
  updateTimestamp?: long(name='UpdateTimestamp', example='1516775741000'),
}

model DescribeCustomLineInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomLineInfoResponseBody(name='body'),
}

async function describeCustomLineInfo(request: DescribeCustomLineInfoRequest): DescribeCustomLineInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomLineInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomLinesRequest {
  lang?: string(name='Lang', example='en', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=9999999, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model DescribeCustomLinesResponseBody = {
  customLines?: {
    customLine?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-03-25T08:07Z'),
      createTimestamp?: long(name='CreateTimestamp', example='1671174074000'),
      creator?: string(name='Creator', example='21312421'),
      creatorSubType?: string(name='CreatorSubType', example='SUB'),
      creatorType?: string(name='CreatorType', example='USER'),
      ipv4s?: {
        ipv4?: [ string ](name='Ipv4')
      }(name='Ipv4s'),
      lineId?: string(name='LineId', example='160002'),
      name?: string(name='Name'),
      updateTime?: string(name='UpdateTime', example='2020-08-24T16:08Z'),
      updateTimestamp?: long(name='UpdateTimestamp', example='1681879029000'),
    }
  ](name='CustomLine')
  }(name='CustomLines'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
  totalItems?: int32(name='TotalItems', example='100'),
  totalPages?: int32(name='TotalPages', example='5'),
}

model DescribeCustomLinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomLinesResponseBody(name='body'),
}

async function describeCustomLines(request: DescribeCustomLinesRequest): DescribeCustomLinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomLines', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The supported language. Valid values:

*   zh-CN: Chinese
*   en-US: English
*   ja: Japanese', example='en-US', position='Query'),
  authorizedUserId?: long(name='AuthorizedUserId', description='The ID of the Alibaba Cloud account to which the permissions on the resources are granted.', example='111222333', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  scene?: string(name='Scene', description='The scenario. Valid values:

*   AUTH: the built-in authoritative module
*   FWD: the forward module
*   RA: the traffic analysis module', example='AUTH', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='192.168.1.1', position='Query'),
  vpcType?: string(name='VpcType', description='The type of the virtual private cloud (VPC). Valid values:

*   STANDARD: standard VPC
*   EDS: Elastic Desktop Service (EDS) workspace VPC', example='STANDARD', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='The display name of the region, which varies based on the current language.', example='China (Beijing)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the service in the region.', example='pvtz.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      regionName?: string(name='RegionName', description='The name of the region.', example='China (Beijing)'),
    }
  ](name='Region')
  }(name='Regions', description='The regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='AF7D4DCE-0776-47F2-A9B2-6FB85A87AA60'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRequestGraphRequest {
  bizId?: string(name='BizId', description='The business ID. BizId is specified together with BizType.

*   If you set BizType to AUTH_ZONE, set BizId to a zone ID.
*   If you set BizType to RESOLVER_RULE, set BizId to the ID of a forwarding rule.', example='b9c93a8954c4098731e863c04302f45a', position='Query'),
  bizType?: string(name='BizType', description='The business type. Valid values:

*   AUTH_ZONE: authoritative zone
*   RESOLVER_RULE: forwarding rule', example='AUTH_ZONE', position='Query'),
  endTimestamp: long(name='EndTimestamp', description='The end of the time range to query. Set the time to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1571673600000', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  startTimestamp: long(name='StartTimestamp', description='The beginning of the time range to query. Set the time to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1571587200000', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='127.0.0.1', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-1111', position='Query'),
  zoneId?: string(name='ZoneId', description='The global ID of the zone. To query the number of DNS requests for a zone, you can specify ZoneId or BizType and BizId.', example='29c752a01cd281a20ddcfaecef', position='Query'),
}

model DescribeRequestGraphResponseBody = {
  requestDetails?: {
    zoneRequestTop?: [ 
    {
      requestCount?: long(name='RequestCount', description='The number of DNS requests.', example='103'),
      time?: string(name='Time', description='The statistical time. The value is a string. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-10-21T10:00Z'),
      timestamp?: long(name='Timestamp', description='The statistical timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1571652000000'),
    }
  ](name='ZoneRequestTop')
  }(name='RequestDetails', description='The information about the DNS requests.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EB71815-A421-4E51-8E8D-667F44ABE633'),
}

model DescribeRequestGraphResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRequestGraphResponseBody(name='body'),
}

async function describeRequestGraph(request: DescribeRequestGraphRequest): DescribeRequestGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRequestGraph', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverAvailableZonesRequest {
  azId?: string(name='AzId', description='The zone ID.', example='cn-zhangjiakou-a', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  resolverRegionId: string(name='ResolverRegionId', description='The region ID.', example='cn-zhangjiakou', position='Query'),
}

model DescribeResolverAvailableZonesResponseBody = {
  availableZones?: [ 
    {
      azId?: string(name='AzId', description='The zone ID.', example='cn-zhangjiakou-a'),
      status?: string(name='Status', description='The state of resources in the zone. Valid values:

*   NORMAL: The resources are in the normal state.
*   SOLD_OUT: The resources are sold out.', example='NORMAL'),
    }
  ](name='AvailableZones', description='The information about the queried zones.'),
  requestId?: string(name='RequestId', description='The request ID.', example='23268E49-0C3E-4A2C-AB70-B4C7D092470B'),
}

model DescribeResolverAvailableZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResolverAvailableZonesResponseBody(name='body'),
}

async function describeResolverAvailableZones(request: DescribeResolverAvailableZonesRequest): DescribeResolverAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverAvailableZones', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverEndpointRequest {
  endpointId: string(name='EndpointId', description='The endpoint ID.', example='hra0**', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
}

model DescribeResolverEndpointResponseBody = {
  createTime?: string(name='CreateTime', description='The time when the endpoint was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2020-07-13 10:45:56'),
  createTimestamp?: long(name='CreateTimestamp', description='The time when the endpoint was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1594608356000'),
  id?: string(name='Id', description='The endpoint ID.', example='hra0**'),
  ipConfigs?: [ 
    {
      azId?: string(name='AzId', description='The ID of the zone where the vSwitch resides.', example='cn-hangzhou-a'),
      cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the vSwitch.', example='172.16.0.0/24'),
      ip?: string(name='Ip', description='The IPv4 address.', example='172.16.xx.xx'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-8vbmks7hzrmk-vswitch-id'),
    }
  ](name='IpConfigs', description='The source IP address of outbound traffic.'),
  name?: string(name='Name', description='The endpoint name.'),
  requestId?: string(name='RequestId', description='The request ID.', example='45020ED9-6319-4CA7-9475-6E8D6446E84F'),
  securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-8vb3sigz86xc-group-test'),
  status?: string(name='Status', description='The state of the endpoint. Valid values:

*   SUCCESS: The endpoint works as expected.
*   INIT: The endpoint is being created.
*   FAILED: The endpoint fails to be created.
*   CHANGE_INIT: The endpoint is being modified.
*   CHANGE_FAILED: The endpoint fails to be modified.
*   EXCEPTION: The endpoint encounters an exception.', example='SUCCESS'),
  updateTime?: string(name='UpdateTime', description='The time when the endpoint was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2020-07-13 10:48:39'),
  updateTimestamp?: long(name='UpdateTimestamp', description='The time when the endpoint was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1594608519000'),
  vpcId?: string(name='VpcId', description='The outbound VPC ID.', example='vpc-8vbl8mpum-vpc-id'),
  vpcName?: string(name='VpcName', description='The outbound VPC name.', example='vpc-name-test'),
  vpcRegionId?: string(name='VpcRegionId', description='The ID of the region where the outbound VPC resides.', example='cn-hangzhou'),
  vpcRegionName?: string(name='VpcRegionName', description='The name of the region where the outbound virtual private cloud (VPC) resides.'),
}

model DescribeResolverEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResolverEndpointResponseBody(name='body'),
}

async function describeResolverEndpoint(request: DescribeResolverEndpointRequest): DescribeResolverEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverEndpointsRequest {
  keyword?: string(name='Keyword', description='The keyword used to filter endpoints in %keyword% mode.', example='test', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', minimum=1, maximum=9999999, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Maximum value: 100.', example='20', minimum=1, maximum=100, position='Query'),
  status?: string(name='Status', description='The state of the endpoint that you want to query. If you do not specify this parameter, all endpoints are returned. Valid values:

*   SUCCESS: The endpoint works as expected.
*   INIT: The endpoint is being created.
*   FAILED: The endpoint fails to be created.
*   CHANGE_INIT: The endpoint is being modified.
*   CHANGE_FAILED: The endpoint fails to be modified.
*   EXCEPTION: The endpoint encounters an exception.', example='SUCCESS', position='Query'),
  vpcRegionId?: string(name='VpcRegionId', position='Query'),
}

model DescribeResolverEndpointsResponseBody = {
  endpoints?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the endpoint was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2020-07-13 10:36:26'),
      createTimestamp?: long(name='CreateTimestamp', description='The time when the endpoint was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1594607786000'),
      id?: string(name='Id', description='The endpoint ID.', example='hra0**'),
      ipConfigs?: [ 
        {
          azId?: string(name='AzId', description='The ID of the zone where the vSwitch resides.', example='cn-zhangjiakou-a'),
          cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the vSwitch.', example='172.16.0.0/24'),
          ip?: string(name='Ip', description='The IPv4 address.', example='172.16.xx.xx'),
          vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-8vbmks7h-test-vswitchId'),
        }
      ](name='IpConfigs', description='The source IP addresses of outbound traffic.'),
      name?: string(name='Name', description='The endpoint name.', example='endpoint-test'),
      securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-8vb3sigz86xc-test-group'),
      status?: string(name='Status', description='The state of the endpoint. Valid values:

*   SUCCESS: The endpoint works as expected.
*   INIT: The endpoint is being created.
*   FAILED: The endpoint fails to be created.
*   CHANGE_INIT: The endpoint is being modified.
*   CHANGE_FAILED: The endpoint fails to be modified.
*   EXCEPTION: The endpoint encounters an exception.', example='SUCCESS'),
      updateTime?: string(name='UpdateTime', description='The time when the endpoint was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2020-07-13 10:38:24'),
      updateTimestamp?: long(name='UpdateTimestamp', description='The time when the endpoint was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1594607904000'),
      vpcId?: string(name='VpcId', description='The ID of the outbound virtual private cloud (VPC).', example='vpc-8vbl8mpum-test-vpc-id'),
      vpcName?: string(name='VpcName', description='The VPC name.', example='vpc-test-name'),
      vpcRegionId?: string(name='VpcRegionId', description='The region ID of the outbound VPC.', example='cn-zhangjiakou'),
      vpcRegionName?: string(name='VpcRegionName', description='The name of the region where the outbound VPC resides.', example='China East 1 (Hangzhou)'),
    }
  ](name='Endpoints', description='The information about endpoints.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='2'),
  requestId?: string(name='RequestId', description='The request ID.', example='83D1682B-B69A-4060-9FA8-2907C2A35600'),
  totalItems?: int32(name='TotalItems', description='The total number of entries returned.', example='1'),
  totalPages?: int32(name='TotalPages', description='The total number of pages returned.', example='1'),
}

model DescribeResolverEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResolverEndpointsResponseBody(name='body'),
}

async function describeResolverEndpoints(request: DescribeResolverEndpointsRequest): DescribeResolverEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverRuleRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  ruleId: string(name='RuleId', description='The forwarding rule ID.', example='hra1**', position='Query'),
}

model DescribeResolverRuleResponseBody = {
  bindVpcs?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      regionName?: string(name='RegionName', description='The region name.', example='hangzhou'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-8vbl8m-vpc-id'),
      vpcName?: string(name='VpcName', description='The VPC name.', example='vpc-name-test'),
      vpcType?: string(name='VpcType', description='The type of the VPC. Valid values:

*   STANDARD: standard VPC
*   EDS: Elastic Desktop Service (EDS) workspace VPC', example='STANDARD'),
      vpcUserId?: string(name='VpcUserId', description='The Alibaba Cloud account to which the VPC belongs.', example='324542413'),
    }
  ](name='BindVpcs', description='The virtual private clouds (VPCs) that are associated with the forwarding rule.'),
  createTime?: string(name='CreateTime', description='The time when the forwarding rule was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2020-07-13 10:51:44'),
  createTimestamp?: long(name='CreateTimestamp', description='The time when the forwarding rule was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1594608704000'),
  endpointId?: string(name='EndpointId', description='The endpoint ID.', example='hra0**'),
  endpointName?: string(name='EndpointName', description='The endpoint name.', example='endpoint-test'),
  forwardIps?: [ 
    {
      ip?: string(name='Ip', description='The IP address.', example='172.16.xx.xx'),
      port?: int32(name='Port', description='The port number.', example='8080'),
    }
  ](name='ForwardIps', description='The destination IP addresses.'),
  id?: string(name='Id', description='The forwarding rule ID.', example='hra1**'),
  name?: string(name='Name', description='The name of the forwarding rule.', example='forward rule-test'),
  requestId?: string(name='RequestId', description='The request ID.', example='13D5113B-7E34-407F-A9C1-D96CD2B04277'),
  type?: string(name='Type', description='The type of the forwarding rule. Valid value:

*   OUTBOUND: forwards Domain Name System (DNS) requests to one or more external IP addresses.', example='OUTBOUND'),
  updateTime?: string(name='UpdateTime', description='The time when the forwarding rule was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2020-07-13 10:51:44'),
  updateTimestamp?: long(name='UpdateTimestamp', description='The time when the forwarding rule was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1594608704000'),
  zoneName?: string(name='ZoneName', description='The name of the forward zone.', example='example.com'),
}

model DescribeResolverRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResolverRuleResponseBody(name='body'),
}

async function describeResolverRule(request: DescribeResolverRuleRequest): DescribeResolverRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResolverRulesRequest {
  endpointId?: string(name='EndpointId', description='The ID of the outbound endpoint.', example='hra2**', position='Query'),
  keyword?: string(name='Keyword', description='The keyword used to filter forwarding rules in %keyword% mode.', example='test', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes', description='Specifies whether to return additional information. Default value: false.

*   If you set this parameter to true, additional information, such as the virtual private clouds (VPCs) that are associated with the queried forwarding rule, is returned.
*   If you set this parameter to false, no additional information is returned.', example='true', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', minimum=1, maximum=9999999, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Maximum value: 100.', example='20', minimum=1, maximum=100, position='Query'),
}

model DescribeResolverRulesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='A10E03D7-808C-422D-9144-F8586C2E2297'),
  rules?: [ 
    {
      bindVpcs?: [ 
        {
          regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
          regionName?: string(name='RegionName', description='The region name.', example='ap-southeast-1'),
          vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-8vbl8mpum-vpc-id'),
          vpcName?: string(name='VpcName', description='The VPC name.', example='vpc-name-test'),
          vpcType?: string(name='VpcType', description='The type of the virtual private cloud (VPC). Valid values:

*   STANDARD: standard VPC
*   EDS: Elastic Desktop Service (EDS) workspace VPC', example='STANDARD'),
          vpcUserId?: string(name='VpcUserId', description='The Alibaba Cloud account to which the VPC belongs.', example='121098702443**'),
        }
      ](name='BindVpcs', description='The VPCs associated with the forwarding rule.'),
      createTime?: string(name='CreateTime', description='The time when the forwarding was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2020-07-13 10:51:44'),
      createTimestamp?: long(name='CreateTimestamp', description='The time when the forwarding rule was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1594608704000'),
      endpointId?: string(name='EndpointId', description='The endpoint ID.', example='hra0**'),
      endpointName?: string(name='EndpointName', description='The endpoint name.', example='endpoint-test'),
      forwardIps?: [ 
        {
          ip?: string(name='Ip', description='The IP address.', example='172.16.xx.xx'),
          port?: int32(name='Port', description='The port number.', example='8080'),
        }
      ](name='ForwardIps', description='The destination IP addresses.'),
      id?: string(name='Id', description='The ID of the forwarding rule.', example='hra1**'),
      name?: string(name='Name', description='The name of the forwarding rule.', example='forward rule-test'),
      type?: string(name='Type', description='The type of the forwarding rule. Valid value:

*   OUTBOUND: Domain Name System (DNS) requests are forwarded to one or more IP addresses.', example='OUTBOUND'),
      updateTime?: string(name='UpdateTime', description='The time when the forwarding rule was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2020-07-13 10:51:44'),
      updateTimestamp?: long(name='UpdateTimestamp', description='The timestamp when the forwarding rule was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1594608704000'),
      zoneName?: string(name='ZoneName', description='The name of the forward zone.', example='example.com'),
    }
  ](name='Rules', description='The forwarding rules.'),
  totalItems?: int32(name='TotalItems', description='The total number of entries returned.', example='1'),
  totalPages?: int32(name='TotalPages', description='The total number of pages returned.', example='1'),
}

model DescribeResolverRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResolverRulesResponseBody(name='body'),
}

async function describeResolverRules(request: DescribeResolverRulesRequest): DescribeResolverRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResolverRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStatisticSummaryRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='127.0.0.1', position='Query'),
}

model DescribeStatisticSummaryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A73F3BD0-B1A8-42A9-A9B6-689BBABC4891'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2254'),
  vpcRequestTops?: {
    vpcRequestTop?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      regionName?: string(name='RegionName', description='The name of the region.', example='China (Beijing)'),
      requestCount?: long(name='RequestCount', description='The number of DNS requests.', example='2254'),
      tunnelId?: string(name='TunnelId', description='The tunnel ID.', example='46574'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-2zeisd8c0j6wk1451jr6o'),
      vpcType?: string(name='VpcType', description='The type of the VPC. Valid values:

*   STANDARD: standard VPC
*   EDS: Elastic Desktop Service (EDS) workspace VPC', example='STANDARD'),
    }
  ](name='VpcRequestTop')
  }(name='VpcRequestTops', description='The top 3 virtual private clouds (VPCs) that initiate the largest number of DNS requests.'),
  zoneRequestTops?: {
    zoneRequestTop?: [ 
    {
      bizType?: string(name='BizType', description='The business type. Valid values:

*   AUTH_ZONE: authoritative zone
*   RESOLVER_RULE: forwarding rule', example='AUTH_ZONE'),
      requestCount?: long(name='RequestCount', description='The number of DNS requests.', example='2251'),
      zoneName?: string(name='ZoneName', description='The name of the zone.', example='host.local'),
    }
  ](name='ZoneRequestTop')
  }(name='ZoneRequestTops', description='The top 3 zones with the largest number of DNS requests.'),
}

model DescribeStatisticSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStatisticSummaryResponseBody(name='body'),
}

async function describeStatisticSummary(request: DescribeStatisticSummaryRequest): DescribeStatisticSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStatisticSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSyncEcsHostTaskRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID.', example='pvtz-test-id-2989149d628c56f00e', position='Query'),
}

model DescribeSyncEcsHostTaskResponseBody = {
  ecsRegions?: {
    ecsRegion?: [ 
    {
      regionIds?: {
        regionId?: [ string ](name='RegionId')
      }(name='RegionIds', description='The region IDs.'),
      userId?: long(name='UserId', description='The Alibaba Cloud account to which the region belongs. This parameter is used in cross-account synchronization scenarios.', example='1234567890'),
    }
  ](name='EcsRegion')
  }(name='EcsRegions', description='The information about regions.'),
  regions?: {
    regionId?: [ string ](name='RegionId')
  }(name='Regions', description='The information about the regions within the current account.'),
  requestId?: string(name='RequestId', description='The request ID.', example='75446CC1-FC9A-4595-8D96-089D73D7A63D'),
  status?: string(name='Status', description='The state of the task. Valid values:

*   ON
*   OFF', example='ON'),
  success?: boolean(name='Success', description='Indicates whether the task was successful. Valid values:

*   True
*   False', example='True'),
  zoneId?: string(name='ZoneId', description='The zone ID.', example='pvtz-test-id-2989149d628c56f00e'),
}

model DescribeSyncEcsHostTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSyncEcsHostTaskResponseBody(name='body'),
}

async function describeSyncEcsHostTask(request: DescribeSyncEcsHostTaskRequest): DescribeSyncEcsHostTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSyncEcsHostTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Maximum value: 200.', example='20', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid value: ZONE.', example='ZONE', position='Query'),
}

model DescribeTagsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='9EA7F720-B7C0-45C1-9CF4-B6A5A1179B68'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the resource.', example='env'),
      values?: [ string ](name='Values', description='The values of tags added to the resources.'),
    }
  ](name='Tags', description='The tags added to the resources.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model DescribeTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsResponseBody(name='body'),
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserVpcAuthorizationsRequest {
  authType?: string(name='AuthType', description='The authorization scope. Valid values:

*   NORMAL: general authorization.
*   CLOUD_PRODUCT: cloud service-related authorization', example='NORMAL', position='Query'),
  authorizedUserId?: long(name='AuthorizedUserId', description='The ID of the Alibaba Cloud account.', example='111222333', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', maximum=9999999, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Maximum value: 100.', example='20', maximum=100, position='Query'),
}

model DescribeUserVpcAuthorizationsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Maximum value: 100.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='46973D4C-E3E4-4ABA-9190-9A9DE406C7E'),
  totalItems?: int32(name='TotalItems', description='The total number of entries returned.', example='100'),
  totalPages?: int32(name='TotalPages', description='The total number of pages returned.', example='5'),
  users?: [ 
    {
      authType?: string(name='AuthType', description='The authorization scope. Valid value:

*   NORMAL: general authorization.', example='NORMAL'),
      authorizedAliyunId?: string(name='AuthorizedAliyunId', description='The name of the Alibaba Cloud account.', example='alidns***@test.com'),
      authorizedUserId?: long(name='AuthorizedUserId', description='The ID of the Alibaba Cloud account.', example='111222333'),
      createTime?: string(name='CreateTime', description='The time when the authorization was performed. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2023-05-08T02:31Z'),
      createTimestamp?: long(name='CreateTimestamp', description='The time when the authorization was performed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1672740294000'),
    }
  ](name='Users', description='The information about the Alibaba Cloud accounts.'),
}

model DescribeUserVpcAuthorizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserVpcAuthorizationsResponseBody(name='body'),
}

async function describeUserVpcAuthorizations(request: DescribeUserVpcAuthorizationsRequest): DescribeUserVpcAuthorizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserVpcAuthorizations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZoneInfoRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  zoneId: string(name='ZoneId', description='The global ID of the zone.', example='AgIDE1MA_149', position='Query'),
}

model DescribeZoneInfoResponseBody = {
  bindVpcs?: {
    vpc?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      regionName?: string(name='RegionName', description='The name of the region.', example='1304'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='daily-vpc-id'),
      vpcName?: string(name='VpcName', description='The name of the VPC.', example='daily-vpc-name'),
      vpcType?: string(name='VpcType', description='The type of the VPC. Valid values:

*   STANDARD: standard VPC
*   EDS: Elastic Desktop Service (EDS) workspace VPC', example='STANDARD'),
      vpcUserId?: long(name='VpcUserId', description='The ID of the user to which the VPC belongs. The value null indicates that the VPC belongs to the current user.', example='vpc-bp1aevy8sofi8mh1q****'),
    }
  ](name='Vpc')
  }(name='BindVpcs', description='The virtual private clouds (VPCs) bound to the zone.'),
  createTime?: string(name='CreateTime', description='The time when the zone was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2018-01-23T03:15Z'),
  createTimestamp?: long(name='CreateTimestamp', description='The time when the zone was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1516775741000'),
  creator?: string(name='Creator', description='The creator of the zone.', example='2312234523451342'),
  creatorType?: string(name='CreatorType', description='The type of the operator.', example='USER'),
  dnsGroup?: string(name='DnsGroup', description='The logical location of the built-in authoritative module in which the zone is added. Valid values:

*   NORMAL_ZONE: regular module
*   FAST_ZONE: acceleration module', example='FAST_ZONE'),
  dnsGroupChanging?: boolean(name='DnsGroupChanging', description='Indicates whether the zone is being removed to another logical location. Valid values:

*   true
*   false', example='false'),
  isPtr?: boolean(name='IsPtr', description='*   Indicates whether the zone is a reverse lookup zone. Valid values: true and false. The value true indicates that the zone is a reverse lookup zone.
*   The value false indicates that the zone is not a reverse lookup zone.', example='false'),
  proxyPattern?: string(name='ProxyPattern', description='*   Indicates whether the recursive resolution proxy feature is enabled for the zone. Valid values: **ZONE**: The recursive resolution proxy feature is disabled for the zone.
*   **RECORD**: The recursive resolution proxy feature is enabled for the zone.', example='ZONE'),
  recordCount?: int32(name='RecordCount', description='The total number of DNS records.', example='2'),
  remark?: string(name='Remark', description='The description of the zone.', example='specialZone'),
  requestId?: string(name='RequestId', description='The request ID.', example='F73F41A3-B6DD-42CA-A793-FFF93277835D'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-xxxxxxxx'),
  slaveDns?: boolean(name='SlaveDns', description='Indicates whether the secondary Domain Name System (DNS) feature is enabled for the zone. Valid values:

*   **true**: The secondary DNS feature is enabled.
*   **false**: The secondary DNS feature is disabled.', example='true'),
  updateTime?: string(name='UpdateTime', description='The time when the zone was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2018-01-24T06:35Z'),
  updateTimestamp?: long(name='UpdateTimestamp', description='The time when the zone was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1516775741000'),
  zoneId?: string(name='ZoneId', description='The global ID of the zone.', example='AgIDE0OQ_149<'),
  zoneName?: string(name='ZoneName', description='The zone name.', example='test.com'),
  zoneTag?: string(name='ZoneTag', description='*   If ZoneType is set to AUTH_ZONE, no value is returned for this parameter.
*   If ZoneType is set to CLOUD_PRODUCT_ZONE, the type of the cloud service is returned.', example='pvtz'),
  zoneType?: string(name='ZoneType', description='The type of the zone. Valid values:

*   AUTH_ZONE: authoritative zone
*   CLOUD_PRODUCT_ZONE: authoritative zone for cloud services', example='CLOUD_PRODUCT_ZONE'),
}

model DescribeZoneInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZoneInfoResponseBody(name='body'),
}

async function describeZoneInfo(request: DescribeZoneInfoRequest): DescribeZoneInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZoneInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZoneRecordRequest {
  recordId: long(name='RecordId', example='5808', position='Query'),
}

model DescribeZoneRecordResponseBody = {
  createTime?: string(name='CreateTime', example='2018-01-23T03:15Z'),
  createTimestamp?: long(name='CreateTimestamp', example='1516775741000'),
  line?: string(name='Line', example='default'),
  priority?: int32(name='Priority', example='5'),
  recordId?: long(name='RecordId', example='5808'),
  remark?: string(name='Remark', example='test record'),
  requestId?: string(name='RequestId', example='0B7AD377-7E86-44A8-B9A8-53E8666E72FE'),
  rr?: string(name='Rr', example='www'),
  status?: string(name='Status', example='ENABLE'),
  ttl?: int32(name='Ttl', example='60'),
  type?: string(name='Type', example='A'),
  updateTime?: string(name='UpdateTime', example='2018-01-24T06:35Z'),
  updateTimestamp?: long(name='UpdateTimestamp', example='1516775741000'),
  value?: string(name='Value', example='127.0.0.1'),
  weight?: int32(name='Weight', example='1'),
  zoneId?: string(name='ZoneId', description='Zone ID。', example='CAgICA1OA_58'),
}

model DescribeZoneRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZoneRecordResponseBody(name='body'),
}

async function describeZoneRecord(request: DescribeZoneRecordRequest): DescribeZoneRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZoneRecord', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZoneRecordsRequest {
  keyword?: string(name='Keyword', description='The hostname keyword based on which the system queries the DNS records.', example='test', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100. Default value: 20.', example='100', minimum=1, maximum=100, position='Query'),
  searchMode?: string(name='SearchMode', description='The search mode. Valid values:

*   **LIKE**: fuzzy search
*   **EXACT (default)**: exact search', example='LIKE', position='Query'),
  tag?: string(name='Tag', description='The tags added to the DNS record.

*   This parameter is left empty by default. In this case, the DNS records of the zone are queried.
*   If you set Tag to ecs, the DNS records added to the hostnames of Elastic Compute Service (ECS) instances in the zone are queried.', example='tag', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='1.1.XX.XX', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID.', example='CAgICA1OA_58', position='Query'),
}

model DescribeZoneRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  records?: {
    record?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the DNS record was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2019-03-14T03:47Z'),
      createTimestamp?: long(name='CreateTimestamp', description='The time when the DNS record was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1672740294000'),
      line?: string(name='Line', description='The resolution line.', example='default'),
      priority?: int32(name='Priority', description='The priority of the mail exchanger (MX) record.', example='60'),
      recordId?: long(name='RecordId', description='The ID of the DNS record.', example='5809'),
      remark?: string(name='Remark', description='The description of the DNS record.', example='xxx'),
      rr?: string(name='Rr', description='The hostname.', example='www'),
      status?: string(name='Status', description='The state of the DNS record. Valid values:

*   ENABLE: The DNS record is enabled.
*   DISABLE: The DNS record is disabled.', example='ENABLE'),
      ttl?: int32(name='Ttl', description='The time-to-live (TTL) of the DNS record.', example='60'),
      type?: string(name='Type', description='The type of the DNS record.', example='A'),
      updateTime?: string(name='UpdateTime', description='The time when the DNS record was updated. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2023-05-08T02:31Z'),
      updateTimestamp?: long(name='UpdateTimestamp', description='The time when the DNS record was updated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1654777678000'),
      value?: string(name='Value', description='The record value.', example='1.1.XX.XX'),
      weight?: int32(name='Weight', description='The weight of the address.', example='1'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='a49f55537f3b0b1e6e43add0bf5f0033'),
    }
  ](name='Record')
  }(name='Records', description='The returned DNS records.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7B07FBC3-3A53-4939-A3C6-2BDFE407BAB2'),
  totalItems?: int32(name='TotalItems', description='The total number of entries returned.', example='100'),
  totalPages?: int32(name='TotalPages', description='The total number of returned pages.', example='100'),
}

model DescribeZoneRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZoneRecordsResponseBody(name='body'),
}

async function describeZoneRecords(request: DescribeZoneRecordsRequest): DescribeZoneRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZoneRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZoneVpcTreeRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='127.0.0.1', position='Query'),
}

model DescribeZoneVpcTreeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7B07FBC3-3A53-4939-A3C6-2BDFE407BAB2'),
  zones?: {
    zone?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the zone was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2019-09-18T08:20Z'),
      createTimestamp?: long(name='CreateTimestamp', description='The time when the zone was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1568794812000'),
      creator?: string(name='Creator', description='The creator of the zone.', example='5463564356'),
      creatorType?: string(name='CreatorType', description='The operator type.', example='USER'),
      dnsGroup?: string(name='DnsGroup', description='The logical location of the built-in authoritative module in which the zone is added. Valid values:

*   NORMAL_ZONE: regular module
*   FAST_ZONE: acceleration module', example='NORMAL_ZONE'),
      dnsGroupChanging?: boolean(name='DnsGroupChanging', description='Indicates whether the zone is being removed to another logical location. Valid values:

*   true
*   false', example='true'),
      isPtr?: boolean(name='IsPtr', description='Indicates whether the zone is a reverse lookup zone. Valid values:

*   true
*   false', example='false'),
      recordCount?: int32(name='RecordCount', description='The number of Domain Name System (DNS) records.', example='1'),
      remark?: string(name='Remark', description='The description of the zone.', example='demo'),
      updateTime?: string(name='UpdateTime', description='The time when the zone was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2019-09-18T08:20Z'),
      updateTimestamp?: long(name='UpdateTimestamp', description='The time when the zone was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1568794834000'),
      vpcs?: {
        vpc?: [ 
        {
          regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
          regionName?: string(name='RegionName', description='The name of the region.', example='China North 2'),
          vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-2z21341ssdadsfzyd49ra'),
          vpcName?: string(name='VpcName', description='The name of the VPC.', example='demo-vpc'),
          vpcType?: string(name='VpcType', description='The type of the VPC. Valid values:

*   STANDARD: standard VPC
*   EDS: Elastic Desktop Service (EDS) workspace VPC', example='STANDARD'),
        }
      ](name='Vpc')
      }(name='Vpcs', description='The VPCs bound to the zones.'),
      zoneId?: string(name='ZoneId', description='The global ID of the zone.', example='6d83e3b31aa60ca4aaa7161f1b6baa95'),
      zoneName?: string(name='ZoneName', description='The name of the zone.', example='localzone.demo'),
      zoneTag?: string(name='ZoneTag', description='The type of the cloud service.

*   If the value of the ZoneType parameter is AUTH_ZONE, no value is returned for this parameter.
*   If the value of the ZoneType parameter is CLOUD_PRODUCT_ZONE, the type of the cloud service is returned.', example='BLINK'),
      zoneType?: string(name='ZoneType', description='The type of the zone. Valid values:

*   AUTH_ZONE: authoritative zone
*   CLOUD_PRODUCT_ZONE: authoritative zone for cloud services', example='AUTH_ZONE'),
    }
  ](name='Zone')
  }(name='Zones', description='The zones.'),
}

model DescribeZoneVpcTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZoneVpcTreeResponseBody(name='body'),
}

/**
  * We recommend that you do not call this API operation due to its poor performance. Instead, you can call the DescribeZones operation to query a list of zones. If you want to query the information about VPCs to which a zone is bound, you can call the DescribeZoneInfo operation based on the zone ID.
  *
 */
async function describeZoneVpcTree(request: DescribeZoneVpcTreeRequest): DescribeZoneVpcTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZoneVpcTree', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  keyword?: string(name='Keyword', description='The keyword of the zone name. The search is performed in the %KeyWord % mode and is not case-sensitive.', example='test', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100. Default value: 20.', example='100', minimum=1, maximum=100, position='Query'),
  queryRegionId?: string(name='QueryRegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  queryVpcId?: string(name='QueryVpcId', description='The virtual private cloud (VPC) ID.', example='vpc-xxxxx', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-xxxxx', position='Query'),
  resourceTag?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the resource.', example='env'),
      value?: string(name='Value', description='The value of tag N added to the resource.', example='daily'),
    }
  ](name='ResourceTag', description='The tag added to the resource.', position='Query'),
  searchMode?: string(name='SearchMode', description='The search mode. Valid values:

*   **LIKE (default)**: fuzzy search
*   **EXACT**: exact search', example='LIKE', position='Query'),
  zoneTag?: [ string ](name='ZoneTag', description='The type of the cloud service.', example='BLINK', position='Query'),
  zoneType?: string(name='ZoneType', description='The type of zones to query. Default value: AUTH_ZONE.

Valid values:

*   **AUTH_ZONE**: authoritative zone
*   **CLOUD_PRODUCT_ZONE**: authoritative zone for cloud services', example='CLOUD_PRODUCT_ZONE', position='Query'),
}

model DescribeZonesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='6856BCF6-11D6-4D7E-AC53-FD579933522B'),
  totalItems?: int32(name='TotalItems', description='The total number of entries returned.', example='3'),
  totalPages?: int32(name='TotalPages', description='The total number of pages.', example='3'),
  zones?: {
    zone?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the zone was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2017-12-28T13:08Z'),
      createTimestamp?: long(name='CreateTimestamp', description='The time when the zone was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1514466483000'),
      creator?: string(name='Creator', description='The creator of the zone.', example='5463564356'),
      creatorSubType?: string(name='CreatorSubType', description='The type of the user account.

*   **CUSTOMER**: Alibaba Cloud account
*   **SUB**: RAM user
*   **STS**: assumed role that obtains the Security Token Service (STS) token of a RAM role
*   **OTHER**: other types', example='SUB'),
      dnsGroup?: string(name='DnsGroup', description='The logical location type of the built-in authoritative module in which the zone is added. Valid values:

*   **NORMAL_ZONE**: regular module
*   **FAST_ZONE**: acceleration module', example='NORMAL_ZONE'),
      dnsGroupChanging?: boolean(name='DnsGroupChanging', description='Indicates whether the zone is being removed to another logical location. Valid values:

*   **true**
*   **false**', example='false'),
      isPtr?: boolean(name='IsPtr', description='Indicates whether the zone is a reverse lookup zone. Valid values:

*   **true**
*   **false**', example='true'),
      proxyPattern?: string(name='ProxyPattern', description='Indicates whether the recursive resolution proxy feature is enabled for the zone. Valid values:

*   **ZONE**: The recursive resolution proxy feature is disabled for the zone.
*   **RECORD**: The recursive resolution proxy feature is enabled for the zone.', example='ZONE'),
      recordCount?: int32(name='RecordCount', description='The number of Domain Name System (DNS) records.', example='2'),
      remark?: string(name='Remark', description='The description of the zone.', example='test'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-xxxxx'),
      resourceTags?: {
        resourceTag?: [ 
        {
          key?: string(name='Key', description='The key of tag N added to the zone.', example='env'),
          value?: string(name='Value', description='The value of tag N added to the zone.', example='daily'),
        }
      ](name='ResourceTag')
      }(name='ResourceTags', description='The tags added to the resources.'),
      updateTime?: string(name='UpdateTime', description='The time when the zone was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2018-01-03T08:57Z'),
      updateTimestamp?: long(name='UpdateTimestamp', description='The time when the DNS record was updated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since 00:00:00 UTC on January 1, 1970.', example='1514969843000'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='6d83e3b31aa60ca4aaa7161f1b6b**95'),
      zoneName?: string(name='ZoneName', description='The name of the zone.', example='test.com'),
      zoneTag?: string(name='ZoneTag', description='The type of the cloud service. Valid values:

*   If ZoneType is set to AUTH_ZONE, no value is returned for this parameter.
*   If ZoneType is set to CLOUD_PRODUCT_ZONE, the type of the cloud service is returned.', example='BLINK'),
      zoneType?: string(name='ZoneType', description='The type of zones. Valid values:

*   **AUTH_ZONE**: authoritative zone
*   **CLOUD_PRODUCT_ZONE**: authoritative zone for cloud services', example='CLOUD_PRODUCT_ZONE'),
    }
  ](name='Zone')
  }(name='Zones', description='The zones.'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  lang?: string(name='Lang', description='The language of the values for specific response parameters. Valid values: en, zh, and ja.', example='en', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='234235354', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs, which are zone IDs. You can specify up to 50 zone IDs.', example='97fe9321a476d0861f624d3f738dcc38', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid value: ZONE.', example='ZONE', position='Query'),
  size?: int32(name='Size', description='The number of entries per page. Valid values: `1 to 200`. Default value: 20.', example='20', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the resource.', example='env'),
      value?: string(name='Value', description='The value of tag N added to the resource.', example='daily'),
    }
  ](name='Tag', description='The tags added to the resources.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='234235354'),
  requestId?: string(name='RequestId', description='The request ID.', example='75446CC1-FC9A-4595-8D96-089D73D7A63D'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID, which is a zone ID.', example='97fe9321a476d0861f624d3f738dcc38'),
      resourceType?: string(name='ResourceType', description='The resource type.', example='ZONE'),
      tagKey?: string(name='TagKey', description='The key of tag N added to the resource.', example='env'),
      tagValue?: string(name='TagValue', description='The value of tag N added to the resource.', example='daily'),
    }
  ](name='TagResources', description='The tags added to the resources.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='21079fa016944979537637959d09bc', position='Query'),
  lang?: string(name='Lang', description='The language of the values for specific response parameters. Default value: en. Valid values: en, zh, and ja.', example='en', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group.', example='rg-aekzzk7hx3glaoq', position='Query'),
  resourceId: string(name='ResourceId', description='The global ID of the zone.', example='AgIDE1MA_149', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D1324D48-1E23-4AEF-9EDE-466120561C6F'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model SearchCustomLinesRequest {
  createTimestampEnd?: long(name='CreateTimestampEnd', example='1672136518234', position='Query'),
  createTimestampStart?: long(name='CreateTimestampStart', example='1672136518123', position='Query'),
  creator?: [ string ](name='Creator', position='Query'),
  ipv4?: string(name='Ipv4', example='1.1.1.1', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=9999999, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  updateTimestampEnd?: long(name='UpdateTimestampEnd', example='1672136518000', position='Query'),
  updateTimestampStart?: long(name='UpdateTimestampStart', example='1672136515000', position='Query'),
}

model SearchCustomLinesResponseBody = {
  customLines?: {
    customLine?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-12-27 18:16:38'),
      createTimestamp?: long(name='CreateTimestamp', example='1671174074000'),
      creator?: string(name='Creator', example='1851321989648462'),
      creatorSubType?: string(name='CreatorSubType', example='SUB'),
      creatorType?: string(name='CreatorType', example='USER'),
      ipv4s?: {
        ipv4?: [ string ](name='Ipv4')
      }(name='Ipv4s'),
      lineId?: string(name='LineId', example='11730'),
      name?: string(name='Name'),
      updateTime?: string(name='UpdateTime', example='2023-06-14 14:04:08'),
      updateTimestamp?: long(name='UpdateTimestamp', example='1672136518000'),
    }
  ](name='CustomLine')
  }(name='CustomLines'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='46973D4C-E3E4-4ABA-9190-9A9DE406C7E'),
  totalItems?: int32(name='TotalItems', example='100'),
  totalPages?: int32(name='TotalPages', example='5'),
}

model SearchCustomLinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchCustomLinesResponseBody(name='body'),
}

async function searchCustomLines(request: SearchCustomLinesRequest): SearchCustomLinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchCustomLines', 'POST', '/', 'json', false, 'json', request);
}

model SetProxyPatternRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='21079fa016944979537637959d09bc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  proxyPattern: string(name='ProxyPattern', description='Specifies whether to enable the recursive resolution proxy feature for the zone. Valid values:

*   **ZONE**: disables the recursive resolution proxy feature for the zone.
*   **RECORD**: enables the recursive resolution proxy feature for the zone.', example='ZONE', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='1.1.1.1', position='Query'),
  zoneId: string(name='ZoneId', description='The global ID of the zone.', example='AgIDE0OQ_149', position='Query'),
}

model SetProxyPatternResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C6F1D541-E7A6-447A-A2B5-9F7A20B2A8FB'),
  zoneId?: string(name='ZoneId', description='The global ID of the zone.', example='AgIDE0OQ_149'),
}

model SetProxyPatternResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetProxyPatternResponseBody(name='body'),
}

async function setProxyPattern(request: SetProxyPatternRequest): SetProxyPatternResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetProxyPattern', 'POST', '/', 'json', false, 'json', request);
}

model SetZoneRecordStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6447728c8578e66aacf062d2df4446dc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  recordId: long(name='RecordId', description='The ID of the DNS record.', example='5809', position='Query'),
  status: string(name='Status', description='The state of the DNS record. Valid values:

*   ENABLE: enables the DNS record.
*   DISABLE: suspends the DNS record.', example='DISABLE', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='1.1.XX.XX', position='Query'),
}

model SetZoneRecordStatusResponseBody = {
  recordId?: long(name='RecordId', description='The ID of the DNS record.', example='5809'),
  requestId?: string(name='RequestId', description='The request ID.', example='39CB16E5-4180-49F2-A060-23C0ECEB80D9'),
  status?: string(name='Status', description='The status of the DNS record.', example='DISABLE'),
}

model SetZoneRecordStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetZoneRecordStatusResponseBody(name='body'),
}

async function setZoneRecordStatus(request: SetZoneRecordStatusRequest): SetZoneRecordStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetZoneRecordStatus', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  overWrite?: boolean(name='OverWrite', description='Specifies whether to replace the original tags added to the resources. Valid values:

*   True: replaces the original tags.
*   False|Null: appends the specified one or more tags to the original tags. If a new tag has the same key but a different value from an original tag, the new tag replaces the original tag.', example='true', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs, which are zone IDs. You can specify **1 to 50** IDs.', example='97fe9321a476d0861f624d3f738dcc38', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type.', example='ZONE', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource.', example='env'),
      value?: string(name='Value', description='The value of tag N to add to the resource.', example='daily'),
    }
  ](name='Tag', description='The tags to add to the resources.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='75446CC1-FC9A-4595-8D96-089D73D7A63D'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified one or more resources. This parameter is valid only if the TagKey parameter is left empty. Default value: false. Valid values:

*   true
*   false', example='true', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs, which are zone IDs. You can specify up to 50 zone IDs.', example='97fe9321a476d0861f624d3f738dcc38', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid value: ZONE.', example='ZONE', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The keys of tags that you want to remove. You can specify up to 20 tag keys.', example='env', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='75446CC1-FC9A-4595-8D96-089D73D7A63D'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomLineRequest {
  ipv4s: [ string ](name='Ipv4s', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  lineId: string(name='LineId', example='100003', position='Query'),
  name?: string(name='Name', position='Query'),
}

model UpdateCustomLineResponseBody = {
  lineId?: string(name='LineId', example='765001'),
  requestId?: string(name='RequestId', example='0B7AD377-7E86-44A8-B9A8-53E8666E72FE'),
}

model UpdateCustomLineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomLineResponseBody(name='body'),
}

async function updateCustomLine(request: UpdateCustomLineRequest): UpdateCustomLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomLine', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRecordRemarkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6447728c8578e66aacf062d2df4446dc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  recordId: long(name='RecordId', description='The ID of the DNS record.', example='18954952', position='Query'),
  remark?: string(name='Remark', description='The description of the DNS record.', example='test record', position='Query'),
}

model UpdateRecordRemarkResponseBody = {
  recordId?: long(name='RecordId', description='The ID of the DNS record.', example='18954952'),
  requestId?: string(name='RequestId', description='The request ID.', example='0B7AD377-7E86-44A8-B9A8-53E8666E72FE'),
}

model UpdateRecordRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRecordRemarkResponseBody(name='body'),
}

async function updateRecordRemark(request: UpdateRecordRemarkRequest): UpdateRecordRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRecordRemark', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResolverEndpointRequest {
  endpointId: string(name='EndpointId', description='The endpoint ID.', example='hra0**', position='Query'),
  ipConfig?: [ 
    {
      azId?: string(name='AzId', description='The zone ID.', example='cn-hangzhou-a'),
      cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the vSwitch.', example='172.16.0.0/24'),
      ip?: string(name='Ip', description='The IP address.', example='172.16.xx.xx'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='sjqkql'),
    }
  ](name='IpConfig', description='The source IP addresses of outbound traffic. You must add two to six source IP addresses to ensure high availability.', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  name?: string(name='Name', description='The endpoint name.', example='endpoint-test-name', position='Query'),
}

model UpdateResolverEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC0BDA3A-A92A-4AC8-B351-322A9C79D5C5'),
}

model UpdateResolverEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResolverEndpointResponseBody(name='body'),
}

async function updateResolverEndpoint(request: UpdateResolverEndpointRequest): UpdateResolverEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResolverEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResolverRuleRequest {
  endpointId?: string(name='EndpointId', position='Query'),
  forwardIp?: [ 
    {
      ip?: string(name='Ip', description='The destination IP address.', example='172.16.xx.xx'),
      port?: int32(name='Port', description='The port number.', example='8080'),
    }
  ](name='ForwardIp', description='The destination IP address and port number.', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  name?: string(name='Name', description='The name of the forwarding rule.', example='forward rule-test', position='Query'),
  ruleId: string(name='RuleId', description='The forwarding rule ID.', example='hra0**', position='Query'),
}

model UpdateResolverRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0C9959BE-3A6A-4803-8DCE-973B42ACD599'),
}

model UpdateResolverRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResolverRuleResponseBody(name='body'),
}

async function updateResolverRule(request: UpdateResolverRuleRequest): UpdateResolverRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResolverRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSyncEcsHostTaskRequest {
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  region: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      userId?: long(name='UserId', description='The Alibaba Cloud account to which the region belongs. This parameter is used in cross-account synchronization scenarios.', example='1234567890'),
    }
  ](name='Region', description='The information about regions to be synchronized.', position='Query'),
  status: string(name='Status', description='The state of the task. Valid values:

*   ON
*   OFF', example='ON', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID.', example='test79afafec***********1d28f7889c', position='Query'),
}

model UpdateSyncEcsHostTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='test-FC9A-4595-8D96-089D73D7A63D'),
  success?: boolean(name='Success', description='Indicates whether the task was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateSyncEcsHostTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSyncEcsHostTaskResponseBody(name='body'),
}

async function updateSyncEcsHostTask(request: UpdateSyncEcsHostTaskRequest): UpdateSyncEcsHostTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSyncEcsHostTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateZoneRecordRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6447728c8578e66aacf062d2df4446dc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  line?: string(name='Line', description='The resolution line.', example='default', position='Query'),
  priority?: int32(name='Priority', description='The priority of the mail exchanger (MX) record. Valid values: **1 to 99**.

This parameter is required if the type of the DNS record is MX.', example='60', minimum=1, maximum=99, position='Query'),
  recordId: long(name='RecordId', description='The ID of the DNS record.', example='5809', position='Query'),
  rr: string(name='Rr', description='The hostname.

For example, you must set this parameter to @ if you want to resolve @.example.com.', example='www', position='Query'),
  ttl?: int32(name='Ttl', description='The time-to-live (TTL) of the DNS record.', example='60', minimum=5, maximum=86400, position='Query'),
  type: string(name='Type', description='The type of the DNS record. Valid values: **A**, **AAAA**, **CNAME**, **TXT**, **MX**, **PTR**, and **SRV**.', example='A', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='2.2.XX.XX', position='Query'),
  value: string(name='Value', description='The record value.', example='1.1.XX.XX', position='Query'),
  weight?: int32(name='Weight', description='The weight of the address. Valid values: **1 to 100**.', example='1', position='Query'),
}

model UpdateZoneRecordResponseBody = {
  recordId?: long(name='RecordId', description='The ID of the DNS record.', example='5809'),
  requestId?: string(name='RequestId', description='The request ID.', example='250E2C38-D0AD-4518-851D-1C1055805F82'),
}

model UpdateZoneRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateZoneRecordResponseBody(name='body'),
}

async function updateZoneRecord(request: UpdateZoneRecordRequest): UpdateZoneRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateZoneRecord', 'POST', '/', 'json', false, 'json', request);
}

model UpdateZoneRemarkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='21079fa016944979537637959d09bc', position='Query'),
  lang?: string(name='Lang', description='The language.', example='en', position='Query'),
  remark?: string(name='Remark', description='The new description.', example='test', position='Query'),
  userClientIp?: string(name='UserClientIp', description='The IP address of the client.', example='1.1.1.1', position='Query'),
  zoneId: string(name='ZoneId', description='The unique ID of the zone.', example='AgIDE1MA_149', position='Query'),
}

model UpdateZoneRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C6F1D541-E7A6-447A-A2B5-9F7A20B2A8FB'),
  zoneId?: string(name='ZoneId', description='The zone ID.', example='AgIDE1MA_149'),
}

model UpdateZoneRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateZoneRemarkResponseBody(name='body'),
}

async function updateZoneRemark(request: UpdateZoneRemarkRequest): UpdateZoneRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateZoneRemark', 'POST', '/', 'json', false, 'json', request);
}

