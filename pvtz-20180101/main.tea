/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('pvtz', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddResolverEndpointRequest {
  ipConfig?: [ 
    {
      azId?: string(name='AzId'),
      cidrBlock?: string(name='CidrBlock'),
      ip?: string(name='Ip'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='IpConfig'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  securityGroupId?: string(name='SecurityGroupId'),
  vpcId?: string(name='VpcId'),
  vpcRegionId?: string(name='VpcRegionId'),
}

model AddResolverEndpointResponseBody = {
  endpointId?: string(name='EndpointId'),
  requestId?: string(name='RequestId'),
}

model AddResolverEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddResolverEndpointResponseBody(name='body'),
}

async function addResolverEndpointWithOptions(request: AddResolverEndpointRequest, runtime: Util.RuntimeOptions): AddResolverEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipConfig)) {
    query['IpConfig'] = request.ipConfig;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcRegionId)) {
    query['VpcRegionId'] = request.vpcRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddResolverEndpoint',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addResolverEndpoint(request: AddResolverEndpointRequest): AddResolverEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return addResolverEndpointWithOptions(request, runtime);
}

model AddResolverRuleRequest {
  endpointId?: string(name='EndpointId'),
  forwardIp?: [ 
    {
      ip?: string(name='Ip'),
      port?: int32(name='Port'),
    }
  ](name='ForwardIp'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  type?: string(name='Type'),
  zoneName?: string(name='ZoneName'),
}

model AddResolverRuleResponseBody = {
  requestId?: string(name='RequestId'),
  ruleId?: string(name='RuleId'),
}

model AddResolverRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddResolverRuleResponseBody(name='body'),
}

async function addResolverRuleWithOptions(request: AddResolverRuleRequest, runtime: Util.RuntimeOptions): AddResolverRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.forwardIp)) {
    query['ForwardIp'] = request.forwardIp;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.zoneName)) {
    query['ZoneName'] = request.zoneName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddResolverRule',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addResolverRule(request: AddResolverRuleRequest): AddResolverRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addResolverRuleWithOptions(request, runtime);
}

model AddUserVpcAuthorizationRequest {
  authChannel?: string(name='AuthChannel'),
  authCode?: string(name='AuthCode'),
  authType?: string(name='AuthType'),
  authorizedUserId?: long(name='AuthorizedUserId'),
}

model AddUserVpcAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUserVpcAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserVpcAuthorizationResponseBody(name='body'),
}

async function addUserVpcAuthorizationWithOptions(request: AddUserVpcAuthorizationRequest, runtime: Util.RuntimeOptions): AddUserVpcAuthorizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authChannel)) {
    query['AuthChannel'] = request.authChannel;
  }
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.authorizedUserId)) {
    query['AuthorizedUserId'] = request.authorizedUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserVpcAuthorization',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUserVpcAuthorization(request: AddUserVpcAuthorizationRequest): AddUserVpcAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserVpcAuthorizationWithOptions(request, runtime);
}

model AddZoneRequest {
  lang?: string(name='Lang'),
  proxyPattern?: string(name='ProxyPattern'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneName?: string(name='ZoneName'),
  zoneTag?: string(name='ZoneTag'),
  zoneType?: string(name='ZoneType'),
}

model AddZoneResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  zoneId?: string(name='ZoneId'),
  zoneName?: string(name='ZoneName'),
}

model AddZoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddZoneResponseBody(name='body'),
}

async function addZoneWithOptions(request: AddZoneRequest, runtime: Util.RuntimeOptions): AddZoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.proxyPattern)) {
    query['ProxyPattern'] = request.proxyPattern;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.zoneName)) {
    query['ZoneName'] = request.zoneName;
  }
  if (!Util.isUnset(request.zoneTag)) {
    query['ZoneTag'] = request.zoneTag;
  }
  if (!Util.isUnset(request.zoneType)) {
    query['ZoneType'] = request.zoneType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddZone',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addZone(request: AddZoneRequest): AddZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return addZoneWithOptions(request, runtime);
}

model AddZoneRecordRequest {
  lang?: string(name='Lang'),
  priority?: int32(name='Priority'),
  remark?: string(name='Remark'),
  rr?: string(name='Rr'),
  ttl?: int32(name='Ttl'),
  type?: string(name='Type'),
  userClientIp?: string(name='UserClientIp'),
  value?: string(name='Value'),
  zoneId?: string(name='ZoneId'),
}

model AddZoneRecordResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddZoneRecordResponseBody(name='body'),
}

async function addZoneRecordWithOptions(request: AddZoneRecordRequest, runtime: Util.RuntimeOptions): AddZoneRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.rr)) {
    query['Rr'] = request.rr;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddZoneRecord',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addZoneRecord(request: AddZoneRecordRequest): AddZoneRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return addZoneRecordWithOptions(request, runtime);
}

model BindResolverRuleVpcRequest {
  lang?: string(name='Lang'),
  ruleId?: string(name='RuleId'),
  vpc?: [ 
    {
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Vpc'),
}

model BindResolverRuleVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindResolverRuleVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindResolverRuleVpcResponseBody(name='body'),
}

async function bindResolverRuleVpcWithOptions(request: BindResolverRuleVpcRequest, runtime: Util.RuntimeOptions): BindResolverRuleVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.vpc)) {
    query['Vpc'] = request.vpc;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindResolverRuleVpc',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindResolverRuleVpc(request: BindResolverRuleVpcRequest): BindResolverRuleVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindResolverRuleVpcWithOptions(request, runtime);
}

model BindZoneVpcRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  vpcs?: [ 
    {
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Vpcs'),
  zoneId?: string(name='ZoneId'),
}

model BindZoneVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindZoneVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindZoneVpcResponseBody(name='body'),
}

async function bindZoneVpcWithOptions(request: BindZoneVpcRequest, runtime: Util.RuntimeOptions): BindZoneVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.vpcs)) {
    query['Vpcs'] = request.vpcs;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindZoneVpc',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindZoneVpc(request: BindZoneVpcRequest): BindZoneVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindZoneVpcWithOptions(request, runtime);
}

model CheckZoneNameRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  zoneName?: string(name='ZoneName'),
}

model CheckZoneNameResponseBody = {
  check?: boolean(name='Check'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckZoneNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckZoneNameResponseBody(name='body'),
}

async function checkZoneNameWithOptions(request: CheckZoneNameRequest, runtime: Util.RuntimeOptions): CheckZoneNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.zoneName)) {
    query['ZoneName'] = request.zoneName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckZoneName',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkZoneName(request: CheckZoneNameRequest): CheckZoneNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkZoneNameWithOptions(request, runtime);
}

model DeleteResolverEndpointRequest {
  endpointId?: string(name='EndpointId'),
  lang?: string(name='Lang'),
}

model DeleteResolverEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteResolverEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResolverEndpointResponseBody(name='body'),
}

async function deleteResolverEndpointWithOptions(request: DeleteResolverEndpointRequest, runtime: Util.RuntimeOptions): DeleteResolverEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResolverEndpoint',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteResolverEndpoint(request: DeleteResolverEndpointRequest): DeleteResolverEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResolverEndpointWithOptions(request, runtime);
}

model DeleteResolverRuleRequest {
  lang?: string(name='Lang'),
  ruleId?: string(name='RuleId'),
}

model DeleteResolverRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteResolverRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResolverRuleResponseBody(name='body'),
}

async function deleteResolverRuleWithOptions(request: DeleteResolverRuleRequest, runtime: Util.RuntimeOptions): DeleteResolverRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResolverRule',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteResolverRule(request: DeleteResolverRuleRequest): DeleteResolverRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResolverRuleWithOptions(request, runtime);
}

model DeleteUserVpcAuthorizationRequest {
  authType?: string(name='AuthType'),
  authorizedUserId?: long(name='AuthorizedUserId'),
}

model DeleteUserVpcAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserVpcAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserVpcAuthorizationResponseBody(name='body'),
}

async function deleteUserVpcAuthorizationWithOptions(request: DeleteUserVpcAuthorizationRequest, runtime: Util.RuntimeOptions): DeleteUserVpcAuthorizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.authorizedUserId)) {
    query['AuthorizedUserId'] = request.authorizedUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserVpcAuthorization',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserVpcAuthorization(request: DeleteUserVpcAuthorizationRequest): DeleteUserVpcAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserVpcAuthorizationWithOptions(request, runtime);
}

model DeleteZoneRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  zoneId?: string(name='ZoneId'),
}

model DeleteZoneResponseBody = {
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
}

model DeleteZoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteZoneResponseBody(name='body'),
}

async function deleteZoneWithOptions(request: DeleteZoneRequest, runtime: Util.RuntimeOptions): DeleteZoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteZone',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteZone(request: DeleteZoneRequest): DeleteZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteZoneWithOptions(request, runtime);
}

model DeleteZoneRecordRequest {
  lang?: string(name='Lang'),
  recordId?: long(name='RecordId'),
  userClientIp?: string(name='UserClientIp'),
}

model DeleteZoneRecordResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model DeleteZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteZoneRecordResponseBody(name='body'),
}

async function deleteZoneRecordWithOptions(request: DeleteZoneRecordRequest, runtime: Util.RuntimeOptions): DeleteZoneRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteZoneRecord',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteZoneRecord(request: DeleteZoneRecordRequest): DeleteZoneRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteZoneRecordWithOptions(request, runtime);
}

model DescribeChangeLogsRequest {
  endTimestamp?: long(name='EndTimestamp'),
  entityType?: string(name='EntityType'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTimestamp?: long(name='StartTimestamp'),
  userClientIp?: string(name='UserClientIp'),
  zoneId?: string(name='ZoneId'),
}

model DescribeChangeLogsResponseBody = {
  changeLogs?: {
    changeLog?: [ 
    {
      content?: string(name='Content'),
      entityId?: string(name='EntityId'),
      entityName?: string(name='EntityName'),
      id?: long(name='Id'),
      operAction?: string(name='OperAction'),
      operIp?: string(name='OperIp'),
      operObject?: string(name='OperObject'),
      operTime?: string(name='OperTime'),
      operTimestamp?: long(name='OperTimestamp'),
    }
  ](name='ChangeLog')
  }(name='ChangeLogs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeChangeLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeChangeLogsResponseBody(name='body'),
}

async function describeChangeLogsWithOptions(request: DescribeChangeLogsRequest, runtime: Util.RuntimeOptions): DescribeChangeLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChangeLogs',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChangeLogs(request: DescribeChangeLogsRequest): DescribeChangeLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChangeLogsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  authorizedUserId?: long(name='AuthorizedUserId'),
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.authorizedUserId)) {
    query['AuthorizedUserId'] = request.authorizedUserId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRequestGraphRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  endTimestamp?: long(name='EndTimestamp'),
  lang?: string(name='Lang'),
  startTimestamp?: long(name='StartTimestamp'),
  userClientIp?: string(name='UserClientIp'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeRequestGraphResponseBody = {
  requestDetails?: {
    zoneRequestTop?: [ 
    {
      requestCount?: long(name='RequestCount'),
      time?: string(name='Time'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='ZoneRequestTop')
  }(name='RequestDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeRequestGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRequestGraphResponseBody(name='body'),
}

async function describeRequestGraphWithOptions(request: DescribeRequestGraphRequest, runtime: Util.RuntimeOptions): DescribeRequestGraphResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRequestGraph',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRequestGraph(request: DescribeRequestGraphRequest): DescribeRequestGraphResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRequestGraphWithOptions(request, runtime);
}

model DescribeResolverAvailableZonesRequest {
  azId?: string(name='AzId'),
  lang?: string(name='Lang'),
  resolverRegionId?: string(name='ResolverRegionId'),
}

model DescribeResolverAvailableZonesResponseBody = {
  availableZones?: [ 
    {
      azId?: string(name='AzId'),
      status?: string(name='Status'),
    }
  ](name='AvailableZones'),
  requestId?: string(name='RequestId'),
}

model DescribeResolverAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResolverAvailableZonesResponseBody(name='body'),
}

async function describeResolverAvailableZonesWithOptions(request: DescribeResolverAvailableZonesRequest, runtime: Util.RuntimeOptions): DescribeResolverAvailableZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.azId)) {
    query['AzId'] = request.azId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resolverRegionId)) {
    query['ResolverRegionId'] = request.resolverRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResolverAvailableZones',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResolverAvailableZones(request: DescribeResolverAvailableZonesRequest): DescribeResolverAvailableZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResolverAvailableZonesWithOptions(request, runtime);
}

model DescribeResolverEndpointRequest {
  endpointId?: string(name='EndpointId'),
  lang?: string(name='Lang'),
}

model DescribeResolverEndpointResponseBody = {
  createTime?: string(name='CreateTime'),
  createTimestamp?: long(name='CreateTimestamp'),
  id?: string(name='Id'),
  ipConfigs?: [ 
    {
      azId?: string(name='AzId'),
      cidrBlock?: string(name='CidrBlock'),
      ip?: string(name='Ip'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='IpConfigs'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  securityGroupId?: string(name='SecurityGroupId'),
  status?: string(name='Status'),
  updateTime?: string(name='UpdateTime'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  vpcId?: string(name='VpcId'),
  vpcName?: string(name='VpcName'),
  vpcRegionId?: string(name='VpcRegionId'),
  vpcRegionName?: string(name='VpcRegionName'),
}

model DescribeResolverEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResolverEndpointResponseBody(name='body'),
}

async function describeResolverEndpointWithOptions(request: DescribeResolverEndpointRequest, runtime: Util.RuntimeOptions): DescribeResolverEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResolverEndpoint',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResolverEndpoint(request: DescribeResolverEndpointRequest): DescribeResolverEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResolverEndpointWithOptions(request, runtime);
}

model DescribeResolverEndpointsRequest {
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model DescribeResolverEndpointsResponseBody = {
  endpoints?: [ 
    {
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      id?: string(name='Id'),
      ipConfigs?: [ 
        {
          azId?: string(name='AzId'),
          cidrBlock?: string(name='CidrBlock'),
          ip?: string(name='Ip'),
          vSwitchId?: string(name='VSwitchId'),
        }
      ](name='IpConfigs'),
      name?: string(name='Name'),
      securityGroupId?: string(name='SecurityGroupId'),
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vpcRegionId?: string(name='VpcRegionId'),
      vpcRegionName?: string(name='VpcRegionName'),
    }
  ](name='Endpoints'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeResolverEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResolverEndpointsResponseBody(name='body'),
}

async function describeResolverEndpointsWithOptions(request: DescribeResolverEndpointsRequest, runtime: Util.RuntimeOptions): DescribeResolverEndpointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResolverEndpoints',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResolverEndpoints(request: DescribeResolverEndpointsRequest): DescribeResolverEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResolverEndpointsWithOptions(request, runtime);
}

model DescribeResolverRuleRequest {
  lang?: string(name='Lang'),
  ruleId?: string(name='RuleId'),
}

model DescribeResolverRuleResponseBody = {
  bindVpcs?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
    }
  ](name='BindVpcs'),
  createTime?: string(name='CreateTime'),
  createTimestamp?: long(name='CreateTimestamp'),
  endpointId?: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  forwardIps?: [ 
    {
      ip?: string(name='Ip'),
      port?: int32(name='Port'),
    }
  ](name='ForwardIps'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type'),
  updateTime?: string(name='UpdateTime'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  zoneName?: string(name='ZoneName'),
}

model DescribeResolverRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResolverRuleResponseBody(name='body'),
}

async function describeResolverRuleWithOptions(request: DescribeResolverRuleRequest, runtime: Util.RuntimeOptions): DescribeResolverRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResolverRule',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResolverRule(request: DescribeResolverRuleRequest): DescribeResolverRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResolverRuleWithOptions(request, runtime);
}

model DescribeResolverRulesRequest {
  endpointId?: string(name='EndpointId'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeResolverRulesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      bindVpcs?: [ 
        {
          regionId?: string(name='RegionId'),
          regionName?: string(name='RegionName'),
          vpcId?: string(name='VpcId'),
          vpcName?: string(name='VpcName'),
        }
      ](name='BindVpcs'),
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      endpointId?: string(name='EndpointId'),
      endpointName?: string(name='EndpointName'),
      forwardIps?: [ 
        {
          ip?: string(name='Ip'),
          port?: int32(name='Port'),
        }
      ](name='ForwardIps'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      type?: string(name='Type'),
      updateTime?: string(name='UpdateTime'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      zoneName?: string(name='ZoneName'),
    }
  ](name='Rules'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeResolverRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResolverRulesResponseBody(name='body'),
}

async function describeResolverRulesWithOptions(request: DescribeResolverRulesRequest, runtime: Util.RuntimeOptions): DescribeResolverRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.needDetailAttributes)) {
    query['NeedDetailAttributes'] = request.needDetailAttributes;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResolverRules',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResolverRules(request: DescribeResolverRulesRequest): DescribeResolverRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResolverRulesWithOptions(request, runtime);
}

model DescribeStatisticSummaryRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeStatisticSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  vpcRequestTops?: {
    vpcRequestTop?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      requestCount?: long(name='RequestCount'),
      tunnelId?: string(name='TunnelId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VpcRequestTop')
  }(name='VpcRequestTops'),
  zoneRequestTops?: {
    zoneRequestTop?: [ 
    {
      bizType?: string(name='BizType'),
      requestCount?: long(name='RequestCount'),
      zoneName?: string(name='ZoneName'),
    }
  ](name='ZoneRequestTop')
  }(name='ZoneRequestTops'),
}

model DescribeStatisticSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStatisticSummaryResponseBody(name='body'),
}

async function describeStatisticSummaryWithOptions(request: DescribeStatisticSummaryRequest, runtime: Util.RuntimeOptions): DescribeStatisticSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStatisticSummary',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStatisticSummary(request: DescribeStatisticSummaryRequest): DescribeStatisticSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStatisticSummaryWithOptions(request, runtime);
}

model DescribeSyncEcsHostTaskRequest {
  lang?: string(name='Lang'),
  zoneId?: string(name='ZoneId'),
}

model DescribeSyncEcsHostTaskResponseBody = {
  ecsRegions?: {
    ecsRegion?: [ 
    {
      regionIds?: {
        regionId?: [ string ](name='RegionId')
      }(name='RegionIds'),
      userId?: long(name='UserId'),
    }
  ](name='EcsRegion')
  }(name='EcsRegions'),
  regions?: {
    regionId?: [ string ](name='RegionId')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  zoneId?: string(name='ZoneId'),
}

model DescribeSyncEcsHostTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSyncEcsHostTaskResponseBody(name='body'),
}

async function describeSyncEcsHostTaskWithOptions(request: DescribeSyncEcsHostTaskRequest, runtime: Util.RuntimeOptions): DescribeSyncEcsHostTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSyncEcsHostTask',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSyncEcsHostTask(request: DescribeSyncEcsHostTaskRequest): DescribeSyncEcsHostTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSyncEcsHostTaskWithOptions(request, runtime);
}

model DescribeTagsRequest {
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceType?: string(name='ResourceType'),
}

model DescribeTagsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      values?: [ string ](name='Values'),
    }
  ](name='Tags'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeUserVpcAuthorizationsRequest {
  authType?: string(name='AuthType'),
  authorizedUserId?: long(name='AuthorizedUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeUserVpcAuthorizationsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
  users?: [ 
    {
      authType?: string(name='AuthType'),
      authorizedAliyunId?: string(name='AuthorizedAliyunId'),
      authorizedUserId?: long(name='AuthorizedUserId'),
    }
  ](name='Users'),
}

model DescribeUserVpcAuthorizationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserVpcAuthorizationsResponseBody(name='body'),
}

async function describeUserVpcAuthorizationsWithOptions(request: DescribeUserVpcAuthorizationsRequest, runtime: Util.RuntimeOptions): DescribeUserVpcAuthorizationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.authorizedUserId)) {
    query['AuthorizedUserId'] = request.authorizedUserId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserVpcAuthorizations',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserVpcAuthorizations(request: DescribeUserVpcAuthorizationsRequest): DescribeUserVpcAuthorizationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserVpcAuthorizationsWithOptions(request, runtime);
}

model DescribeZoneInfoRequest {
  lang?: string(name='Lang'),
  zoneId?: string(name='ZoneId'),
}

model DescribeZoneInfoResponseBody = {
  bindVpcs?: {
    vpc?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vpcUserId?: long(name='VpcUserId'),
    }
  ](name='Vpc')
  }(name='BindVpcs'),
  createTime?: string(name='CreateTime'),
  createTimestamp?: long(name='CreateTimestamp'),
  isPtr?: boolean(name='IsPtr'),
  proxyPattern?: string(name='ProxyPattern'),
  recordCount?: int32(name='RecordCount'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  slaveDns?: boolean(name='SlaveDns'),
  updateTime?: string(name='UpdateTime'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  zoneId?: string(name='ZoneId'),
  zoneName?: string(name='ZoneName'),
  zoneTag?: string(name='ZoneTag'),
  zoneType?: string(name='ZoneType'),
}

model DescribeZoneInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZoneInfoResponseBody(name='body'),
}

async function describeZoneInfoWithOptions(request: DescribeZoneInfoRequest, runtime: Util.RuntimeOptions): DescribeZoneInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZoneInfo',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZoneInfo(request: DescribeZoneInfoRequest): DescribeZoneInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZoneInfoWithOptions(request, runtime);
}

model DescribeZoneRecordsRequest {
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchMode?: string(name='SearchMode'),
  tag?: string(name='Tag'),
  userClientIp?: string(name='UserClientIp'),
  zoneId?: string(name='ZoneId'),
}

model DescribeZoneRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  records?: {
    record?: [ 
    {
      priority?: int32(name='Priority'),
      recordId?: long(name='RecordId'),
      remark?: string(name='Remark'),
      rr?: string(name='Rr'),
      status?: string(name='Status'),
      ttl?: int32(name='Ttl'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='Record')
  }(name='Records'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeZoneRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZoneRecordsResponseBody(name='body'),
}

async function describeZoneRecordsWithOptions(request: DescribeZoneRecordsRequest, runtime: Util.RuntimeOptions): DescribeZoneRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchMode)) {
    query['SearchMode'] = request.searchMode;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZoneRecords',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZoneRecords(request: DescribeZoneRecordsRequest): DescribeZoneRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZoneRecordsWithOptions(request, runtime);
}

model DescribeZoneVpcTreeRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeZoneVpcTreeResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      isPtr?: boolean(name='IsPtr'),
      recordCount?: int32(name='RecordCount'),
      remark?: string(name='Remark'),
      updateTime?: string(name='UpdateTime'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      vpcs?: {
        vpc?: [ 
        {
          regionId?: string(name='RegionId'),
          regionName?: string(name='RegionName'),
          vpcId?: string(name='VpcId'),
          vpcName?: string(name='VpcName'),
        }
      ](name='Vpc')
      }(name='Vpcs'),
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
      zoneTag?: string(name='ZoneTag'),
      zoneType?: string(name='ZoneType'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZoneVpcTreeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZoneVpcTreeResponseBody(name='body'),
}

async function describeZoneVpcTreeWithOptions(request: DescribeZoneVpcTreeRequest, runtime: Util.RuntimeOptions): DescribeZoneVpcTreeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZoneVpcTree',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZoneVpcTree(request: DescribeZoneVpcTreeRequest): DescribeZoneVpcTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZoneVpcTreeWithOptions(request, runtime);
}

model DescribeZonesRequest {
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryRegionId?: string(name='QueryRegionId'),
  queryVpcId?: string(name='QueryVpcId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='ResourceTag'),
  searchMode?: string(name='SearchMode'),
  zoneTag?: [ string ](name='ZoneTag'),
  zoneType?: string(name='ZoneType'),
}

model DescribeZonesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItems?: int32(name='TotalItems'),
  totalPages?: int32(name='TotalPages'),
  zones?: {
    zone?: [ 
    {
      createTime?: string(name='CreateTime'),
      createTimestamp?: long(name='CreateTimestamp'),
      isPtr?: boolean(name='IsPtr'),
      proxyPattern?: string(name='ProxyPattern'),
      recordCount?: int32(name='RecordCount'),
      remark?: string(name='Remark'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceTags?: {
        resourceTag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='ResourceTag')
      }(name='ResourceTags'),
      updateTime?: string(name='UpdateTime'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
      zoneTag?: string(name='ZoneTag'),
      zoneType?: string(name='ZoneType'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryRegionId)) {
    query['QueryRegionId'] = request.queryRegionId;
  }
  if (!Util.isUnset(request.queryVpcId)) {
    query['QueryVpcId'] = request.queryVpcId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceTag)) {
    query['ResourceTag'] = request.resourceTag;
  }
  if (!Util.isUnset(request.searchMode)) {
    query['SearchMode'] = request.searchMode;
  }
  if (!Util.isUnset(request.zoneTag)) {
    query['ZoneTag'] = request.zoneTag;
  }
  if (!Util.isUnset(request.zoneType)) {
    query['ZoneType'] = request.zoneType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  lang?: string(name='Lang'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  size?: int32(name='Size'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  lang?: string(name='Lang'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
  resourceId?: string(name='ResourceId'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model SetProxyPatternRequest {
  lang?: string(name='Lang'),
  proxyPattern?: string(name='ProxyPattern'),
  userClientIp?: string(name='UserClientIp'),
  zoneId?: string(name='ZoneId'),
}

model SetProxyPatternResponseBody = {
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
}

model SetProxyPatternResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetProxyPatternResponseBody(name='body'),
}

async function setProxyPatternWithOptions(request: SetProxyPatternRequest, runtime: Util.RuntimeOptions): SetProxyPatternResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.proxyPattern)) {
    query['ProxyPattern'] = request.proxyPattern;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetProxyPattern',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setProxyPattern(request: SetProxyPatternRequest): SetProxyPatternResponse {
  var runtime = new Util.RuntimeOptions{};
  return setProxyPatternWithOptions(request, runtime);
}

model SetZoneRecordStatusRequest {
  lang?: string(name='Lang'),
  recordId?: long(name='RecordId'),
  status?: string(name='Status'),
  userClientIp?: string(name='UserClientIp'),
}

model SetZoneRecordStatusResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model SetZoneRecordStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetZoneRecordStatusResponseBody(name='body'),
}

async function setZoneRecordStatusWithOptions(request: SetZoneRecordStatusRequest, runtime: Util.RuntimeOptions): SetZoneRecordStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetZoneRecordStatus',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setZoneRecordStatus(request: SetZoneRecordStatusRequest): SetZoneRecordStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setZoneRecordStatusWithOptions(request, runtime);
}

model TagResourcesRequest {
  lang?: string(name='Lang'),
  overWrite?: boolean(name='OverWrite'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.overWrite)) {
    query['OverWrite'] = request.overWrite;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  lang?: string(name='Lang'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateRecordRemarkRequest {
  lang?: string(name='Lang'),
  recordId?: long(name='RecordId'),
  remark?: string(name='Remark'),
}

model UpdateRecordRemarkResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model UpdateRecordRemarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRecordRemarkResponseBody(name='body'),
}

async function updateRecordRemarkWithOptions(request: UpdateRecordRemarkRequest, runtime: Util.RuntimeOptions): UpdateRecordRemarkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecordRemark',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecordRemark(request: UpdateRecordRemarkRequest): UpdateRecordRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordRemarkWithOptions(request, runtime);
}

model UpdateResolverEndpointRequest {
  endpointId?: string(name='EndpointId'),
  ipConfig?: [ 
    {
      azId?: string(name='AzId'),
      cidrBlock?: string(name='CidrBlock'),
      ip?: string(name='Ip'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='IpConfig'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
}

model UpdateResolverEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResolverEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResolverEndpointResponseBody(name='body'),
}

async function updateResolverEndpointWithOptions(request: UpdateResolverEndpointRequest, runtime: Util.RuntimeOptions): UpdateResolverEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpointId)) {
    query['EndpointId'] = request.endpointId;
  }
  if (!Util.isUnset(request.ipConfig)) {
    query['IpConfig'] = request.ipConfig;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResolverEndpoint',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateResolverEndpoint(request: UpdateResolverEndpointRequest): UpdateResolverEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResolverEndpointWithOptions(request, runtime);
}

model UpdateResolverRuleRequest {
  forwardIp?: [ 
    {
      ip?: string(name='Ip'),
      port?: int32(name='Port'),
    }
  ](name='ForwardIp'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  ruleId?: string(name='RuleId'),
}

model UpdateResolverRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResolverRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResolverRuleResponseBody(name='body'),
}

async function updateResolverRuleWithOptions(request: UpdateResolverRuleRequest, runtime: Util.RuntimeOptions): UpdateResolverRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forwardIp)) {
    query['ForwardIp'] = request.forwardIp;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResolverRule',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateResolverRule(request: UpdateResolverRuleRequest): UpdateResolverRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResolverRuleWithOptions(request, runtime);
}

model UpdateSyncEcsHostTaskRequest {
  lang?: string(name='Lang'),
  region?: [ 
    {
      regionId?: string(name='RegionId'),
      userId?: long(name='UserId'),
    }
  ](name='Region'),
  status?: string(name='Status'),
  zoneId?: string(name='ZoneId'),
}

model UpdateSyncEcsHostTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSyncEcsHostTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSyncEcsHostTaskResponseBody(name='body'),
}

async function updateSyncEcsHostTaskWithOptions(request: UpdateSyncEcsHostTaskRequest, runtime: Util.RuntimeOptions): UpdateSyncEcsHostTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSyncEcsHostTask',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSyncEcsHostTask(request: UpdateSyncEcsHostTaskRequest): UpdateSyncEcsHostTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSyncEcsHostTaskWithOptions(request, runtime);
}

model UpdateZoneRecordRequest {
  lang?: string(name='Lang'),
  priority?: int32(name='Priority'),
  recordId?: long(name='RecordId'),
  rr?: string(name='Rr'),
  ttl?: int32(name='Ttl'),
  type?: string(name='Type'),
  userClientIp?: string(name='UserClientIp'),
  value?: string(name='Value'),
}

model UpdateZoneRecordResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model UpdateZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateZoneRecordResponseBody(name='body'),
}

async function updateZoneRecordWithOptions(request: UpdateZoneRecordRequest, runtime: Util.RuntimeOptions): UpdateZoneRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.rr)) {
    query['Rr'] = request.rr;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateZoneRecord',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateZoneRecord(request: UpdateZoneRecordRequest): UpdateZoneRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateZoneRecordWithOptions(request, runtime);
}

model UpdateZoneRemarkRequest {
  lang?: string(name='Lang'),
  remark?: string(name='Remark'),
  userClientIp?: string(name='UserClientIp'),
  zoneId?: string(name='ZoneId'),
}

model UpdateZoneRemarkResponseBody = {
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
}

model UpdateZoneRemarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateZoneRemarkResponseBody(name='body'),
}

async function updateZoneRemarkWithOptions(request: UpdateZoneRemarkRequest, runtime: Util.RuntimeOptions): UpdateZoneRemarkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateZoneRemark',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateZoneRemark(request: UpdateZoneRemarkRequest): UpdateZoneRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateZoneRemarkWithOptions(request, runtime);
}

