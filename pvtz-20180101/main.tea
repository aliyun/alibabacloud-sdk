/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  

  checkConfig(config);
  @endpoint = getEndpoint('pvtz', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddZoneRequest {
  lang?: string(name='Lang'),
  zoneName?: string(name='ZoneName'),
  proxyPattern?: string(name='ProxyPattern'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneType?: string(name='ZoneType'),
  zoneTag?: string(name='ZoneTag'),
}

model AddZoneResponseBody = {
  zoneName?: string(name='ZoneName'),
  zoneId?: string(name='ZoneId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddZoneResponse = {
  headers: map[string]string(name='headers'),
  body: AddZoneResponseBody(name='body'),
}

async function addZoneWithOptions(request: AddZoneRequest, runtime: Util.RuntimeOptions): AddZoneResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ZoneName"] = request.zoneName;
  query["ProxyPattern"] = request.proxyPattern;
  query["ResourceGroupId"] = request.resourceGroupId;
  query["ZoneType"] = request.zoneType;
  query["ZoneTag"] = request.zoneTag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddZone',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addZone(request: AddZoneRequest): AddZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return addZoneWithOptions(request, runtime);
}

model AddZoneRecordRequest {
  zoneId?: string(name='ZoneId'),
  lang?: string(name='Lang'),
  rr?: string(name='Rr'),
  type?: string(name='Type'),
  ttl?: int32(name='Ttl'),
  priority?: int32(name='Priority'),
  value?: string(name='Value'),
  userClientIp?: string(name='UserClientIp'),
}

model AddZoneRecordResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: long(name='RecordId'),
  success?: boolean(name='Success'),
}

model AddZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  body: AddZoneRecordResponseBody(name='body'),
}

async function addZoneRecordWithOptions(request: AddZoneRecordRequest, runtime: Util.RuntimeOptions): AddZoneRecordResponse {
  Util.validateModel(request);
  var query = {};
  query["ZoneId"] = request.zoneId;
  query["Lang"] = request.lang;
  query["Rr"] = request.rr;
  query["Type"] = request.type;
  query["Ttl"] = request.ttl;
  query["Priority"] = request.priority;
  query["Value"] = request.value;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddZoneRecord',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addZoneRecord(request: AddZoneRecordRequest): AddZoneRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return addZoneRecordWithOptions(request, runtime);
}

model BindZoneVpcRequest {
  lang?: string(name='Lang'),
  zoneId?: string(name='ZoneId'),
  userClientIp?: string(name='UserClientIp'),
  vpcs?: [ 
    {
      vpcId?: string(name='VpcId'),
      regionId?: string(name='RegionId'),
    }
  ](name='Vpcs'),
}

model BindZoneVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindZoneVpcResponse = {
  headers: map[string]string(name='headers'),
  body: BindZoneVpcResponseBody(name='body'),
}

async function bindZoneVpcWithOptions(request: BindZoneVpcRequest, runtime: Util.RuntimeOptions): BindZoneVpcResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ZoneId"] = request.zoneId;
  query["UserClientIp"] = request.userClientIp;
  query["Vpcs"] = request.vpcs;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindZoneVpc',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindZoneVpc(request: BindZoneVpcRequest): BindZoneVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindZoneVpcWithOptions(request, runtime);
}

model CheckZoneNameRequest {
  lang?: string(name='Lang'),
  zoneName?: string(name='ZoneName'),
  userClientIp?: string(name='UserClientIp'),
}

model CheckZoneNameResponseBody = {
  requestId?: string(name='RequestId'),
  check?: boolean(name='Check'),
  success?: boolean(name='Success'),
}

model CheckZoneNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckZoneNameResponseBody(name='body'),
}

async function checkZoneNameWithOptions(request: CheckZoneNameRequest, runtime: Util.RuntimeOptions): CheckZoneNameResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ZoneName"] = request.zoneName;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CheckZoneName',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkZoneName(request: CheckZoneNameRequest): CheckZoneNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkZoneNameWithOptions(request, runtime);
}

model DeleteZoneRequest {
  lang?: string(name='Lang'),
  zoneId?: string(name='ZoneId'),
  userClientIp?: string(name='UserClientIp'),
}

model DeleteZoneResponseBody = {
  zoneId?: string(name='ZoneId'),
  requestId?: string(name='RequestId'),
}

model DeleteZoneResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteZoneResponseBody(name='body'),
}

async function deleteZoneWithOptions(request: DeleteZoneRequest, runtime: Util.RuntimeOptions): DeleteZoneResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ZoneId"] = request.zoneId;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteZone',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteZone(request: DeleteZoneRequest): DeleteZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteZoneWithOptions(request, runtime);
}

model DeleteZoneRecordRequest {
  lang?: string(name='Lang'),
  recordId?: long(name='RecordId'),
  userClientIp?: string(name='UserClientIp'),
}

model DeleteZoneRecordResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: long(name='RecordId'),
}

model DeleteZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteZoneRecordResponseBody(name='body'),
}

async function deleteZoneRecordWithOptions(request: DeleteZoneRecordRequest, runtime: Util.RuntimeOptions): DeleteZoneRecordResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["RecordId"] = request.recordId;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteZoneRecord',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteZoneRecord(request: DeleteZoneRecordRequest): DeleteZoneRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteZoneRecordWithOptions(request, runtime);
}

model DescribeChangeLogsRequest {
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  zoneId?: string(name='ZoneId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTimestamp?: long(name='StartTimestamp'),
  endTimestamp?: long(name='EndTimestamp'),
  entityType?: string(name='EntityType'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeChangeLogsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  changeLogs?: {
    changeLog?: [ 
    {
      operTimestamp?: long(name='OperTimestamp'),
      entityId?: string(name='EntityId'),
      operObject?: string(name='OperObject'),
      operTime?: string(name='OperTime'),
      operIp?: string(name='OperIp'),
      operAction?: string(name='OperAction'),
      content?: string(name='Content'),
      entityName?: string(name='EntityName'),
      id?: long(name='Id'),
    }
  ](name='ChangeLog')
  }(name='ChangeLogs'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeChangeLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChangeLogsResponseBody(name='body'),
}

async function describeChangeLogsWithOptions(request: DescribeChangeLogsRequest, runtime: Util.RuntimeOptions): DescribeChangeLogsResponse {
  Util.validateModel(request);
  var query = {};
  query["Keyword"] = request.keyword;
  query["Lang"] = request.lang;
  query["ZoneId"] = request.zoneId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["StartTimestamp"] = request.startTimestamp;
  query["EndTimestamp"] = request.endTimestamp;
  query["EntityType"] = request.entityType;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChangeLogs',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChangeLogs(request: DescribeChangeLogsRequest): DescribeChangeLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChangeLogsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  acceptLanguage?: string(name='AcceptLanguage'),
  authorizedUserId?: long(name='AuthorizedUserId'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionName?: string(name='RegionName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["UserClientIp"] = request.userClientIp;
  query["AcceptLanguage"] = request.acceptLanguage;
  query["AuthorizedUserId"] = request.authorizedUserId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRequestGraphRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  zoneId?: string(name='ZoneId'),
  vpcId?: string(name='VpcId'),
  startTimestamp?: long(name='StartTimestamp'),
  endTimestamp?: long(name='EndTimestamp'),
  bizType?: string(name='BizType'),
  bizId?: string(name='BizId'),
}

model DescribeRequestGraphResponseBody = {
  requestId?: string(name='RequestId'),
  requestDetails?: {
    zoneRequestTop?: [ 
    {
      time?: string(name='Time'),
      requestCount?: long(name='RequestCount'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='ZoneRequestTop')
  }(name='RequestDetails'),
}

model DescribeRequestGraphResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRequestGraphResponseBody(name='body'),
}

async function describeRequestGraphWithOptions(request: DescribeRequestGraphRequest, runtime: Util.RuntimeOptions): DescribeRequestGraphResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["UserClientIp"] = request.userClientIp;
  query["ZoneId"] = request.zoneId;
  query["VpcId"] = request.vpcId;
  query["StartTimestamp"] = request.startTimestamp;
  query["EndTimestamp"] = request.endTimestamp;
  query["BizType"] = request.bizType;
  query["BizId"] = request.bizId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRequestGraph',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRequestGraph(request: DescribeRequestGraphRequest): DescribeRequestGraphResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRequestGraphWithOptions(request, runtime);
}

model DescribeStatisticSummaryRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeStatisticSummaryResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  zoneRequestTops?: {
    zoneRequestTop?: [ 
    {
      requestCount?: long(name='RequestCount'),
      zoneName?: string(name='ZoneName'),
      bizType?: string(name='BizType'),
    }
  ](name='ZoneRequestTop')
  }(name='ZoneRequestTops'),
  vpcRequestTops?: {
    vpcRequestTop?: [ 
    {
      vpcId?: string(name='VpcId'),
      regionName?: string(name='RegionName'),
      tunnelId?: string(name='TunnelId'),
      requestCount?: long(name='RequestCount'),
      regionId?: string(name='RegionId'),
    }
  ](name='VpcRequestTop')
  }(name='VpcRequestTops'),
}

model DescribeStatisticSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStatisticSummaryResponseBody(name='body'),
}

async function describeStatisticSummaryWithOptions(request: DescribeStatisticSummaryRequest, runtime: Util.RuntimeOptions): DescribeStatisticSummaryResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStatisticSummary',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStatisticSummary(request: DescribeStatisticSummaryRequest): DescribeStatisticSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStatisticSummaryWithOptions(request, runtime);
}

model DescribeTagsRequest {
  lang?: string(name='Lang'),
  resourceType?: string(name='ResourceType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeTagsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  tags?: [ 
    {
      key?: string(name='Key'),
      values?: [ string ](name='Values'),
    }
  ](name='Tags'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ResourceType"] = request.resourceType;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeZoneInfoRequest {
  lang?: string(name='Lang'),
  zoneId?: string(name='ZoneId'),
}

model DescribeZoneInfoResponseBody = {
  requestId?: string(name='RequestId'),
  slaveDns?: boolean(name='SlaveDns'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneId?: string(name='ZoneId'),
  proxyPattern?: string(name='ProxyPattern'),
  createTime?: string(name='CreateTime'),
  zoneType?: string(name='ZoneType'),
  remark?: string(name='Remark'),
  zoneName?: string(name='ZoneName'),
  zoneTag?: string(name='ZoneTag'),
  updateTime?: string(name='UpdateTime'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  recordCount?: int32(name='RecordCount'),
  createTimestamp?: long(name='CreateTimestamp'),
  bindVpcs?: {
    vpc?: [ 
    {
      vpcName?: string(name='VpcName'),
      vpcId?: string(name='VpcId'),
      regionName?: string(name='RegionName'),
      vpcUserId?: long(name='VpcUserId'),
      regionId?: string(name='RegionId'),
    }
  ](name='Vpc')
  }(name='BindVpcs'),
  isPtr?: boolean(name='IsPtr'),
}

model DescribeZoneInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZoneInfoResponseBody(name='body'),
}

async function describeZoneInfoWithOptions(request: DescribeZoneInfoRequest, runtime: Util.RuntimeOptions): DescribeZoneInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ZoneId"] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZoneInfo',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZoneInfo(request: DescribeZoneInfoRequest): DescribeZoneInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZoneInfoWithOptions(request, runtime);
}

model DescribeZoneRecordsRequest {
  lang?: string(name='Lang'),
  keyword?: string(name='Keyword'),
  zoneId?: string(name='ZoneId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  userClientIp?: string(name='UserClientIp'),
  tag?: string(name='Tag'),
  searchMode?: string(name='SearchMode'),
}

model DescribeZoneRecordsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
  records?: {
    record?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      value?: string(name='Value'),
      ttl?: int32(name='Ttl'),
      remark?: string(name='Remark'),
      recordId?: long(name='RecordId'),
      rr?: string(name='Rr'),
      priority?: int32(name='Priority'),
    }
  ](name='Record')
  }(name='Records'),
}

model DescribeZoneRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZoneRecordsResponseBody(name='body'),
}

async function describeZoneRecordsWithOptions(request: DescribeZoneRecordsRequest, runtime: Util.RuntimeOptions): DescribeZoneRecordsResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["Keyword"] = request.keyword;
  query["ZoneId"] = request.zoneId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["UserClientIp"] = request.userClientIp;
  query["Tag"] = request.tag;
  query["SearchMode"] = request.searchMode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZoneRecords',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZoneRecords(request: DescribeZoneRecordsRequest): DescribeZoneRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZoneRecordsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  keyword?: string(name='Keyword'),
  searchMode?: string(name='SearchMode'),
  queryRegionId?: string(name='QueryRegionId'),
  queryVpcId?: string(name='QueryVpcId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneType?: string(name='ZoneType'),
  zoneTag?: [ string ](name='ZoneTag'),
  resourceTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='ResourceTag'),
}

model DescribeZonesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
  zones?: {
    zone?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      resourceTags?: {
        resourceTag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='ResourceTag')
      }(name='ResourceTags'),
      zoneType?: string(name='ZoneType'),
      remark?: string(name='Remark'),
      createTime?: string(name='CreateTime'),
      recordCount?: int32(name='RecordCount'),
      zoneName?: string(name='ZoneName'),
      proxyPattern?: string(name='ProxyPattern'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      zoneTag?: string(name='ZoneTag'),
      isPtr?: boolean(name='IsPtr'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["Keyword"] = request.keyword;
  query["SearchMode"] = request.searchMode;
  query["QueryRegionId"] = request.queryRegionId;
  query["QueryVpcId"] = request.queryVpcId;
  query["ResourceGroupId"] = request.resourceGroupId;
  query["ZoneType"] = request.zoneType;
  query["ZoneTag"] = request.zoneTag;
  query["ResourceTag"] = request.resourceTag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DescribeZoneVpcTreeRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeZoneVpcTreeResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      zoneType?: string(name='ZoneType'),
      remark?: string(name='Remark'),
      createTime?: string(name='CreateTime'),
      vpcs?: {
        vpc?: [ 
        {
          vpcName?: string(name='VpcName'),
          vpcId?: string(name='VpcId'),
          regionName?: string(name='RegionName'),
          regionId?: string(name='RegionId'),
        }
      ](name='Vpc')
      }(name='Vpcs'),
      recordCount?: int32(name='RecordCount'),
      zoneName?: string(name='ZoneName'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      zoneId?: string(name='ZoneId'),
      zoneTag?: string(name='ZoneTag'),
      isPtr?: boolean(name='IsPtr'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZoneVpcTreeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZoneVpcTreeResponseBody(name='body'),
}

async function describeZoneVpcTreeWithOptions(request: DescribeZoneVpcTreeRequest, runtime: Util.RuntimeOptions): DescribeZoneVpcTreeResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZoneVpcTree',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZoneVpcTree(request: DescribeZoneVpcTreeRequest): DescribeZoneVpcTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZoneVpcTreeWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  lang?: string(name='Lang'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  size?: int32(name='Size'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ResourceType"] = request.resourceType;
  query["NextToken"] = request.nextToken;
  query["Size"] = request.size;
  query["ResourceId"] = request.resourceId;
  query["Tag"] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  lang?: string(name='Lang'),
  resourceId?: string(name='ResourceId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ResourceId"] = request.resourceId;
  query["NewResourceGroupId"] = request.newResourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model SetProxyPatternRequest {
  lang?: string(name='Lang'),
  zoneId?: string(name='ZoneId'),
  proxyPattern?: string(name='ProxyPattern'),
  userClientIp?: string(name='UserClientIp'),
}

model SetProxyPatternResponseBody = {
  zoneId?: string(name='ZoneId'),
  requestId?: string(name='RequestId'),
}

model SetProxyPatternResponse = {
  headers: map[string]string(name='headers'),
  body: SetProxyPatternResponseBody(name='body'),
}

async function setProxyPatternWithOptions(request: SetProxyPatternRequest, runtime: Util.RuntimeOptions): SetProxyPatternResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ZoneId"] = request.zoneId;
  query["ProxyPattern"] = request.proxyPattern;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetProxyPattern',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setProxyPattern(request: SetProxyPatternRequest): SetProxyPatternResponse {
  var runtime = new Util.RuntimeOptions{};
  return setProxyPatternWithOptions(request, runtime);
}

model SetZoneRecordStatusRequest {
  lang?: string(name='Lang'),
  recordId?: long(name='RecordId'),
  status?: string(name='Status'),
  userClientIp?: string(name='UserClientIp'),
}

model SetZoneRecordStatusResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  recordId?: long(name='RecordId'),
}

model SetZoneRecordStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetZoneRecordStatusResponseBody(name='body'),
}

async function setZoneRecordStatusWithOptions(request: SetZoneRecordStatusRequest, runtime: Util.RuntimeOptions): SetZoneRecordStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["RecordId"] = request.recordId;
  query["Status"] = request.status;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetZoneRecordStatus',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setZoneRecordStatus(request: SetZoneRecordStatusRequest): SetZoneRecordStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setZoneRecordStatusWithOptions(request, runtime);
}

model TagResourcesRequest {
  lang?: string(name='Lang'),
  resourceType?: string(name='ResourceType'),
  overWrite?: boolean(name='OverWrite'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ResourceType"] = request.resourceType;
  query["OverWrite"] = request.overWrite;
  query["ResourceId"] = request.resourceId;
  query["Tag"] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  lang?: string(name='Lang'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ResourceType"] = request.resourceType;
  query["All"] = request.all;
  query["ResourceId"] = request.resourceId;
  query["TagKey"] = request.tagKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateRecordRemarkRequest {
  lang?: string(name='Lang'),
  recordId?: long(name='RecordId'),
  remark?: string(name='Remark'),
}

model UpdateRecordRemarkResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: long(name='RecordId'),
}

model UpdateRecordRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRecordRemarkResponseBody(name='body'),
}

async function updateRecordRemarkWithOptions(request: UpdateRecordRemarkRequest, runtime: Util.RuntimeOptions): UpdateRecordRemarkResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["RecordId"] = request.recordId;
  query["Remark"] = request.remark;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecordRemark',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecordRemark(request: UpdateRecordRemarkRequest): UpdateRecordRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordRemarkWithOptions(request, runtime);
}

model UpdateZoneRecordRequest {
  rr?: string(name='Rr'),
  lang?: string(name='Lang'),
  recordId?: long(name='RecordId'),
  type?: string(name='Type'),
  ttl?: int32(name='Ttl'),
  priority?: int32(name='Priority'),
  value?: string(name='Value'),
  userClientIp?: string(name='UserClientIp'),
}

model UpdateZoneRecordResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: long(name='RecordId'),
}

model UpdateZoneRecordResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateZoneRecordResponseBody(name='body'),
}

async function updateZoneRecordWithOptions(request: UpdateZoneRecordRequest, runtime: Util.RuntimeOptions): UpdateZoneRecordResponse {
  Util.validateModel(request);
  var query = {};
  query["Rr"] = request.rr;
  query["Lang"] = request.lang;
  query["RecordId"] = request.recordId;
  query["Type"] = request.type;
  query["Ttl"] = request.ttl;
  query["Priority"] = request.priority;
  query["Value"] = request.value;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateZoneRecord',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateZoneRecord(request: UpdateZoneRecordRequest): UpdateZoneRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateZoneRecordWithOptions(request, runtime);
}

model UpdateZoneRemarkRequest {
  lang?: string(name='Lang'),
  zoneId?: string(name='ZoneId'),
  remark?: string(name='Remark'),
  userClientIp?: string(name='UserClientIp'),
}

model UpdateZoneRemarkResponseBody = {
  zoneId?: string(name='ZoneId'),
  requestId?: string(name='RequestId'),
}

model UpdateZoneRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateZoneRemarkResponseBody(name='body'),
}

async function updateZoneRemarkWithOptions(request: UpdateZoneRemarkRequest, runtime: Util.RuntimeOptions): UpdateZoneRemarkResponse {
  Util.validateModel(request);
  var query = {};
  query["Lang"] = request.lang;
  query["ZoneId"] = request.zoneId;
  query["Remark"] = request.remark;
  query["UserClientIp"] = request.userClientIp;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateZoneRemark',
    version = '2018-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateZoneRemark(request: UpdateZoneRemarkRequest): UpdateZoneRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateZoneRemarkWithOptions(request, runtime);
}

