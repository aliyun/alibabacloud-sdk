/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ecd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ApproveFotaUpdateRequest {
  appVersion?: string(name='AppVersion', example='0.0.1-D-20220513.14****'),
  clientId?: string(name='ClientId', example='d4452bd7-88df-4b90-a409-806da674****'),
  desktopId?: string(name='DesktopId', example='ecd-138dsptkrt00u****'),
  loginToken?: string(name='LoginToken', example='v18390c954ce59e2915ef16663205371721e0db9a46179ac89249a203320459523cb54ad08efe324784dd0eba25950****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='4771b873-c757-4893-973c-7f5beejh****'),
}

model ApproveFotaUpdateResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveFotaUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApproveFotaUpdateResponseBody(name='body'),
}

async function approveFotaUpdateWithOptions(request: ApproveFotaUpdateRequest, runtime: Util.RuntimeOptions): ApproveFotaUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appVersion)) {
    query['AppVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApproveFotaUpdate',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approveFotaUpdate(request: ApproveFotaUpdateRequest): ApproveFotaUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveFotaUpdateWithOptions(request, runtime);
}

model ChangePasswordRequest {
  clientId?: string(name='ClientId', example='42f6645a-9c3c-4772-be2a-cc5f5732****'),
  endUserId?: string(name='EndUserId', example='liming'),
  loginToken?: string(name='LoginToken', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  newPassword?: string(name='NewPassword', example='67436290'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-shanghai+dir-227468****'),
  oldPassword?: string(name='OldPassword', example='12345678'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='1'),
}

model ChangePasswordResponseBody = {
  loginToken?: string(name='LoginToken', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  requestId?: string(name='RequestId', example='484256DA-D816-44D2-9D86-B6EE4D5B****'),
}

model ChangePasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangePasswordResponseBody(name='body'),
}

async function changePasswordWithOptions(request: ChangePasswordRequest, runtime: Util.RuntimeOptions): ChangePasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.newPassword)) {
    query['NewPassword'] = request.newPassword;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.oldPassword)) {
    query['OldPassword'] = request.oldPassword;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangePassword',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changePassword(request: ChangePasswordRequest): ChangePasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return changePasswordWithOptions(request, runtime);
}

model DeleteFingerPrintTemplateRequest {
  clientId?: string(name='ClientId', example='59e86b39-ccac-4dfa-93d7-1f724052****'),
  clientToken?: string(name='ClientToken', example='40401e62-5caf-4508-8de7-bf98af12****'),
  index?: int32(name='Index', example='1'),
  loginToken?: string(name='LoginToken', example='v1c0436c721786529914f16516396228454fa6284c9b80f9917f25ebbec2aa30c10343e3f6f9aff64500ce13808aef****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='6df06330-3b75-4768-b334-41a73a64****'),
}

model DeleteFingerPrintTemplateResponseBody = {
  requestId?: string(name='RequestId', example='134BD0B2-B848-5743-9CE2-C1FD3D5F****'),
}

model DeleteFingerPrintTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFingerPrintTemplateResponseBody(name='body'),
}

async function deleteFingerPrintTemplateWithOptions(request: DeleteFingerPrintTemplateRequest, runtime: Util.RuntimeOptions): DeleteFingerPrintTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.index)) {
    query['Index'] = request.index;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFingerPrintTemplate',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFingerPrintTemplate(request: DeleteFingerPrintTemplateRequest): DeleteFingerPrintTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFingerPrintTemplateWithOptions(request, runtime);
}

model DescribeDirectoriesRequest {
  clientId?: string(name='ClientId', example='54c17e1d-2d72-4b87-aa33-25f3b3f2****'),
  directoryId?: [ string ](name='DirectoryId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDirectoriesResponseBody = {
  directories?: [ 
    {
      desktopAccessType?: string(name='DesktopAccessType', example='INTERNET'),
      directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
      directoryType?: string(name='DirectoryType', example='AD_CONNECTOR'),
      providerId?: string(name='ProviderId', example='26842'),
      ssoServiceUrl?: string(name='SsoServiceUrl', example='https://eds-cn-shanghai-67726****'),
    }
  ](name='Directories'),
  requestId?: string(name='RequestId', example='F369A091-002F-49C8-AD55-02A77629****'),
}

model DescribeDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDirectoriesResponseBody(name='body'),
}

async function describeDirectoriesWithOptions(request: DescribeDirectoriesRequest, runtime: Util.RuntimeOptions): DescribeDirectoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDirectories',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoriesWithOptions(request, runtime);
}

model DescribeFingerPrintTemplatesRequest {
  clientId?: string(name='ClientId', example='61e39dc6-0450-45f6-a372-2a09e938****'),
  loginToken?: string(name='LoginToken', example='v189646d6f329e4dfcbf51653542202890570fec26e4f9ee26427c5920fcd93871f017d2190199c4c7d0c0bf00f573****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='a5062d68-e550-4d09-8288-67c8ba9e****'),
}

model DescribeFingerPrintTemplatesResponseBody = {
  fingerPrintTemplates?: [ 
    {
      clientId?: string(name='ClientId', example='2258a3d5-b8f8-4d79-a221-eaecf211****'),
      creationTime?: string(name='CreationTime', example='2022-03-13T13:26:29Z'),
      description?: string(name='Description', example='Finger 1'),
      endUserId?: string(name='EndUserId', example='liming'),
      index?: long(name='Index', example='1'),
      loginTime?: string(name='LoginTime', example='2022-03-13T13:26:29Z'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-074949****'),
    }
  ](name='FingerPrintTemplates'),
  requestId?: string(name='RequestId', example='9C1D3FBE-84E1-5ABB-AD98-2003AC71****'),
}

model DescribeFingerPrintTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFingerPrintTemplatesResponseBody(name='body'),
}

async function describeFingerPrintTemplatesWithOptions(request: DescribeFingerPrintTemplatesRequest, runtime: Util.RuntimeOptions): DescribeFingerPrintTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFingerPrintTemplates',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFingerPrintTemplates(request: DescribeFingerPrintTemplatesRequest): DescribeFingerPrintTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFingerPrintTemplatesWithOptions(request, runtime);
}

model DescribeGlobalDesktopsRequest {
  clientId?: string(name='ClientId', example='c213150d-7ac3-432c-b749-6e1e090b****'),
  desktopAccessType?: string(name='DesktopAccessType', example='INTERNET'),
  desktopId?: [ string ](name='DesktopId'),
  desktopName?: string(name='DesktopName', example='DesktopTest'),
  desktopStatus?: string(name='DesktopStatus', example='Running'),
  directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-880841****'),
  keyword?: string(name='Keyword'),
  loginToken?: string(name='LoginToken', example='v147c9114a180489f89691663893169****'),
  maxResults?: int32(name='MaxResults', example='500'),
  nextToken?: string(name='NextToken', example='eyJkZWZhdWx0IjpbIjk2MjEy****'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-880841****'),
  orderBy?: string(name='OrderBy', example='AssignTime'),
  queryFotaUpdate?: boolean(name='QueryFotaUpdate', example='true'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  searchRegionId?: string(name='SearchRegionId', example='cn-shanghai'),
  sessionId?: string(name='SessionId', example='5c456a41-1e65-4e72-ab4d-5dcfff52****'),
  sortType?: string(name='SortType', example='ASC'),
  withoutLatency?: boolean(name='WithoutLatency', example='true'),
}

model DescribeGlobalDesktopsResponseBody = {
  desktops?: [ 
    {
      chargeType?: string(name='ChargeType', example='PostPaid'),
      clients?: [ 
        {
          clientType?: string(name='ClientType'),
          status?: string(name='Status'),
        }
      ](name='Clients'),
      connectionStatus?: string(name='ConnectionStatus', example='Disconnected'),
      cpu?: int32(name='Cpu', example='2'),
      creationTime?: string(name='CreationTime', example='2020-11-06T08:28Z'),
      desktopGroupId?: string(name='DesktopGroupId', example='dg-3uiojcc0j4kh7****'),
      desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
      desktopName?: string(name='DesktopName', example='testDesktopName'),
      desktopStatus?: string(name='DesktopStatus', example='Running'),
      desktopTimers?: [ 
        {
          cronExpression?: string(name='CronExpression'),
          enforce?: boolean(name='Enforce'),
          interval?: int32(name='Interval'),
          resetType?: string(name='ResetType'),
          timerType?: string(name='TimerType'),
        }
      ](name='DesktopTimers'),
      desktopType?: string(name='DesktopType', example='ecd.basic.large'),
      directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
      disks?: [ 
        {
          diskId?: string(name='DiskId', example='d-jedbpr4sl9l37****'),
          diskSize?: int32(name='DiskSize', example='80'),
          diskType?: string(name='DiskType', example='SYSTEM'),
        }
      ](name='Disks'),
      endUserId?: string(name='EndUserId', example='User1'),
      endUserIds?: [ string ](name='EndUserIds'),
      expiredTime?: string(name='ExpiredTime', example='2021-12-31T15:59Z'),
      fotaUpdate?: {
        channel?: string(name='Channel', example='Enterprise'),
        currentAppVersion?: string(name='CurrentAppVersion', example='0.0.0-D-20220102.xxxx'),
        force?: boolean(name='Force', example='false'),
        newAppVersion?: string(name='NewAppVersion', example='0.0.0-R-20220307.xxxx'),
        project?: string(name='Project', example='testProject'),
        releaseNote?: string(name='ReleaseNote'),
        size?: string(name='Size', example='100'),
      }(name='FotaUpdate'),
      gpuMemory?: int32(name='GpuMemory', example='2048'),
      hostName?: string(name='HostName', example='testName'),
      imageId?: string(name='ImageId', example='m-4zfb6zj728hhr****'),
      lastStartTime?: string(name='LastStartTime', example='2021-07-13T15:59Z'),
      localName?: string(name='LocalName'),
      managementFlags?: [ string ](name='ManagementFlags'),
      memory?: long(name='Memory', example='4096'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp', example='192.168.xx.xx'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
      osType?: string(name='OsType', example='Windows'),
      policyGroupId?: string(name='PolicyGroupId', example='pg-9cktlowtxfl6****'),
      protocolType?: string(name='ProtocolType', example='ASP'),
      realDesktopId?: string(name='RealDesktopId', example='ecd-gx2x1dhsm****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sessions?: [ 
        {
          endUserId?: string(name='EndUserId', example='User1'),
          establishmentTime?: string(name='EstablishmentTime', example='2021-03-07T08:23Z'),
        }
      ](name='Sessions'),
      userCustomName?: string(name='UserCustomName', example='testDesktop'),
    }
  ](name='Desktops'),
  nextToken?: string(name='NextToken', example='eyJkZWZhdWx0IjpbIjIwMjItMDgtMTdUM****'),
  requestId?: string(name='RequestId', example='4686A731-D601-548C-83E2-4CB6371E****'),
}

model DescribeGlobalDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGlobalDesktopsResponseBody(name='body'),
}

async function describeGlobalDesktopsWithOptions(request: DescribeGlobalDesktopsRequest, runtime: Util.RuntimeOptions): DescribeGlobalDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.desktopStatus)) {
    query['DesktopStatus'] = request.desktopStatus;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.queryFotaUpdate)) {
    query['QueryFotaUpdate'] = request.queryFotaUpdate;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.searchRegionId)) {
    query['SearchRegionId'] = request.searchRegionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.withoutLatency)) {
    query['WithoutLatency'] = request.withoutLatency;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGlobalDesktops',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGlobalDesktops(request: DescribeGlobalDesktopsRequest): DescribeGlobalDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGlobalDesktopsWithOptions(request, runtime);
}

model DescribeOfficeSitesRequest {
  clientId?: string(name='ClientId', example='42f6645a-9c3c-4772-be2a-cc5f5732****'),
  officeSiteId?: [ string ](name='OfficeSiteId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeOfficeSitesResponseBody = {
  officeSites?: [ 
    {
      desktopAccessType?: string(name='DesktopAccessType', example='VPC'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
      officeSiteType?: string(name='OfficeSiteType', example='SIMPLE'),
      providerId?: string(name='ProviderId', example='268****'),
      ssoServiceUrl?: string(name='SsoServiceUrl'),
    }
  ](name='OfficeSites'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeOfficeSitesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOfficeSitesResponseBody(name='body'),
}

async function describeOfficeSitesWithOptions(request: DescribeOfficeSitesRequest, runtime: Util.RuntimeOptions): DescribeOfficeSitesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOfficeSites',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOfficeSites(request: DescribeOfficeSitesRequest): DescribeOfficeSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOfficeSitesWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  clientId?: string(name='ClientId', example='ac4a73ad-789a-449a-a88f-d18571d6****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint', example='ecd.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  clientId?: string(name='ClientId', example='16dad2b6-3c6d-4e4c-b057-78ecb13c****'),
  desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
  loginToken?: string(name='LoginToken', example='v16abfb945208fc5745061668654680853da4a25202d1a394fcad57bba484e9827ad43ea7d10fb6bf13d44a4adc0e9****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='a99b9aca-bac5-4da2-819e-400ce98f****'),
  snapshotId?: string(name='SnapshotId', example='s-2ze81owrnv9pity4****'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', example='2020-12-20T14:52:28Z'),
      description?: string(name='Description', example='testDescription'),
      desktopId?: string(name='DesktopId', example='ecd-g03l3tlm8djoj****'),
      progress?: string(name='Progress', example='100%'),
      remainTime?: int32(name='RemainTime', example='30'),
      snapshotId?: string(name='SnapshotId', example='s-2zeipxmnhej803x7****'),
      snapshotName?: string(name='SnapshotName', example='testSnapshotName'),
      snapshotType?: string(name='SnapshotType', example='USER'),
      sourceDiskSize?: string(name='SourceDiskSize', example='150'),
      sourceDiskType?: string(name='SourceDiskType', example='SYSTEM'),
      status?: string(name='Status', example='ACCOMPLISHED'),
    }
  ](name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshots',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model EncryptPasswordRequest {
  clientId?: string(name='ClientId', example='1d40776f-e9cb-4e2b-a8da-308d10e8****'),
  directoryId?: string(name='DirectoryId', example='cn-beijing+dir-131196****'),
  loginToken?: string(name='LoginToken', example='v1b16dcff3ab21a6c5ec01652238375511cff5a1db59fd4dc49afb37e2ea7a626af6f38109fd0498b6abd9de1af7743****'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-beijing+dir-131196****'),
  password?: string(name='Password', example='Ab123456'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  sessionId?: string(name='SessionId', example='c78e2e52-23d9-4401-a648-e67ac6ff****'),
}

model EncryptPasswordResponseBody = {
  encryptedPassword?: string(name='EncryptedPassword', example='d34601bc-e6b1-4433-b0cc-8f6c5e52;n4apvGub3OBoj4Grwg==;thhO4UEomJfdvwnwlA=='),
  requestId?: string(name='RequestId', example='AF538DA8-FFC6-52DA-8FF8-7B92579F****'),
}

model EncryptPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EncryptPasswordResponseBody(name='body'),
}

async function encryptPasswordWithOptions(request: EncryptPasswordRequest, runtime: Util.RuntimeOptions): EncryptPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EncryptPassword',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function encryptPassword(request: EncryptPasswordRequest): EncryptPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return encryptPasswordWithOptions(request, runtime);
}

model GetCloudDriveServiceMountTokenRequest {
  clientId?: string(name='ClientId', example='00e122c3-13fb-4fc3-bc7a-5d9acb89****'),
  loginToken?: string(name='LoginToken', example='v1972cd3446f0e523598916520951742474e6624fcdea6652994d47bc6157d27f7cc900c339db67882j3no4nh5bk3b4****'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-7186763****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='14e1fe41-ce9b-491d-aa8c-345jk2n4bk****'),
}

model GetCloudDriveServiceMountTokenResponseBody = {
  requestId?: string(name='RequestId', example='DC27288A-F9E1-5092-9B5B-71C27D15****'),
  token?: {
    domainId?: string(name='DomainId', example='h****'),
    expiredAfter?: string(name='ExpiredAfter', example='2022-10-10T04:41:35Z'),
    status?: string(name='Status', example='enabled'),
    token?: string(name='Token', example='7836fa6eced7dc8d54c775k34iu3h4i2kh534f****'),
    totalSize?: long(name='TotalSize', example='6050416754750'),
    usedSize?: long(name='UsedSize', example='605089'),
  }(name='Token'),
}

model GetCloudDriveServiceMountTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudDriveServiceMountTokenResponseBody(name='body'),
}

async function getCloudDriveServiceMountTokenWithOptions(request: GetCloudDriveServiceMountTokenRequest, runtime: Util.RuntimeOptions): GetCloudDriveServiceMountTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCloudDriveServiceMountToken',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCloudDriveServiceMountToken(request: GetCloudDriveServiceMountTokenRequest): GetCloudDriveServiceMountTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudDriveServiceMountTokenWithOptions(request, runtime);
}

model GetLoginTokenRequest {
  authenticationCode?: string(name='AuthenticationCode', description='The verification code that is generated by the virtual MFA device. This parameter is required if you set `CurrentStage` to `MFAVerify`.', example='47****'),
  clientId?: string(name='ClientId', description='The ID of the Alibaba Cloud Workspace client. The system generates a unique ID for each client.', example='f4a0dc8e-1702-4728-9a60-95b27a35****'),
  clientOS?: string(name='ClientOS', description='The OS that the client runs.', example='Windows_NT 10.0.18363 x64'),
  clientType?: string(name='ClientType', description='The OS type of the Alibaba Cloud Workspace client.', example='WINDOWS'),
  clientVersion?: string(name='ClientVersion', description='The version of the client. When you use an Alibaba Cloud Workspace client, you can view the client version in the **About** dialog box on the client logon page.', example='2.1.0-R-20210731.151756'),
  currentStage?: string(name='CurrentStage', description='The logon authentication stage. Valid values:

*   `ADPassword`: the stage to verify the identity of the Active Directory (AD) user. You must specify the value when the system verifies the identity of a convenience account or an AD account.
*   `MFABind`: the stage to bind a virtual MFA device.
*   `MFAVerify`: the verification code that is generated by the virtual MFA device.
*   `TokenVerify`: the stage to perform two-factor authentication for the client.
*   `ChangePassword`: the stage to change the password of the user.', example='ADPassword'),
  directoryId?: string(name='DirectoryId', description='The ID of the workspace. The parameter is the same as the `OfficeSiteId` parameter. We recommend that you use `OfficeSiteId` instead of `DirectoryId`. You can specify a value for either the `DirectoryId` parameter or the `OfficeSiteId` parameter, but not both.', example='cn-hangzhou+dir-885351****'),
  endUserId?: string(name='EndUserId', description='The name of the convenience user or the AD user. This parameter is required if you set `CurrentStage` to `ADPassword`.', example='alice'),
  keepAlive?: boolean(name='KeepAlive', description='Specifies whether to keep the user logged on to the client. Default value: null.', example='false'),
  keepAliveToken?: string(name='KeepAliveToken', description='The token that is used to keep the user logged on to the client. After the user logs on to the client and KeepAlive is set to true, the `KeepAliveToken` is returned. You can call the `GetLoginToken` operation within the valid duration``, and set `CurrentStage` to `VerifyKeepAlive` to obtain the logon token (LoginToken). This parameter is required if you set `CurrentStage` to `VerifyKeepAlive```.', example='hide'),
  newPassword?: string(name='NewPassword', description='The new password. This parameter is required if you set `CurrentStage` to `ChangePassword`.', example='NewPassword'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-885351****'),
  oldPassword?: string(name='OldPassword', description='The current password. This parameter is required if you set `CurrentStage` to `ChangePassword`.', example='OldPassword'),
  password?: string(name='Password', description='The password of the convenience user or the AD user. This parameter is required if you set `CurrentStage` to `ADPassword`.', example='Password1234'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the DescribeRegions operation to query the most recent region list.', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', description='The ID of the session.

*   If the virtual multi-factor authentication (MFA) device is not bound or two-factor authentication is not enabled for the client, you do not need to specify a value for `SessionId`.
*   If the virtual MFA device is not bound or two-factor authentication is enabled for the client, you must specify a value for `SessionId` to verify the user identity after you specify a value for `ADPassword`. The value of the `SessionId` parameter is returned only if the CurrentStage parameter is set to `ADPassword` when you call the `GetLoginToken` operation.', example='cd45e873-650d-4d70-acb9-f996187a****'),
  tokenCode?: string(name='TokenCode', description='If two-factor authentication is enabled in the Elastic Desktop Service (EDS) console and the system detects that the identity of the logon user may have security risks, the system sends a verification code for two-factor authentication to the email address of the user. This parameter is required if you set `CurrentStage` to `TokenVerify`.', example='63****'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. When you use an Alibaba Cloud Workspace client, you can view the client version in the **About** dialog box on the client logon page.', example='C78CA9E99315687575DD2844C1F3****'),
}

model GetLoginTokenResponseBody = {
  email?: string(name='Email', description='The email address of the user. The system returns the email address in the return value of the LoginToken parameter after the user logs on to the client.

*   For a convenience user, the return value is the email address specified when the administrator creates the convenience user.
*   For an AD user, the return value is in the following format: `Username@Name of the AD domain`.', example='alice'),
  endUserId?: string(name='EndUserId', description='The account of the convenience user or the AD user.', example='alice'),
  industry?: string(name='Industry', description='> This is a parameter only for internal use.', example='edu'),
  keepAliveToken?: string(name='KeepAliveToken', description='The token used to keep the user logged on. After the user logs on to the client and select the Keep Logon option, `KeepAliveToken` is returned when you call the operation. If the user does not select the Keep Logon option, null is returned.', example='006YwvYMsesWWsDBZnVB+Wq9AvJDVIqOY3YCktvtb7+KxMb3ClnNlV8+l/knhZYrXUmeP06IzkjF+IgcZ3vZKOyMprDyFHjCy1r27FRE/U7+geWCl8iQ+yF8GaCRHfJEkC2+ROs93HkT4tfHxyY1J8W7O7ZQGUC/cdCvm+cCP6FIy73IUuPuVR6PcKYXIpEZPW'),
  label?: string(name='Label', description='The attribute of the convenience user. For an AD user, null is returned.', example='test:wuying'),
  loginToken?: string(name='LoginToken', description='The logon token.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  nextStage?: string(name='NextStage', description='The next stage that is expected to enter. For example, if the administrator enables MFA authentication in the EDS console, `MFAVerify` is returned after the username and password pass the authentication (after you set CurrentStage to `ADPassword` stage). This indicates that the MFA authentication is required.

> For more information about each authentication stage, see the parameter description of the request parameter `CurrentStage`.', example='MFAVerify'),
  phone?: string(name='Phone', description='Enter the mobile number of the convenience user. For an AD user, null is returned.', example='1381111****'),
  props?: map[string]string(name='Props', description='> This is a parameter only for internal use.'),
  qrCodePng?: string(name='QrCodePng', description='The QR code that is generated when the virtual MFA device is bound. The value is encoded in Base64. This parameter can be empty. This parameter is required only when the CurrentStage parameter is set to `MFABind`.

> For more information about each authentication stage, see the parameter description of the request parameter `CurrentStage`.', example='5OCLLKKOJU5HPBX66H3QCTWY******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  secret?: string(name='Secret', description='The key that is generated when you bind the virtual MFA device. This parameter is required when the CurrentStage parameter is set to `MFABind`.

> For more information about each authentication stage, see the parameter description of the request parameter `CurrentStage`.', example='5OCLLKKOJU5HPBX66H3QCTWYI7MH****'),
  sessionId?: string(name='SessionId', description='The ID of the session. The ID is returned the first time you call the `GetLoginToken` operation in the session. If MFA is required, you must specify this parameter in subsequent stages.

> For more information about each authentication stage, see the parameter description of the request parameter `CurrentStage`.', example='d6ec166d-ab93-4286-bf7f-a18bb929****'),
  tenantId?: long(name='TenantId', description='The ID of the Alibaba Cloud account. The ID is used for hardware client authentication.', example='166353906220****'),
  windowDisplayMode?: string(name='WindowDisplayMode', description='This is a parameter only for internal use.', example='mode'),
}

model GetLoginTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLoginTokenResponseBody(name='body'),
}

async function getLoginTokenWithOptions(request: GetLoginTokenRequest, runtime: Util.RuntimeOptions): GetLoginTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authenticationCode)) {
    query['AuthenticationCode'] = request.authenticationCode;
  }
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.currentStage)) {
    query['CurrentStage'] = request.currentStage;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.keepAlive)) {
    query['KeepAlive'] = request.keepAlive;
  }
  if (!Util.isUnset(request.keepAliveToken)) {
    query['KeepAliveToken'] = request.keepAliveToken;
  }
  if (!Util.isUnset(request.newPassword)) {
    query['NewPassword'] = request.newPassword;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.oldPassword)) {
    query['OldPassword'] = request.oldPassword;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tokenCode)) {
    query['TokenCode'] = request.tokenCode;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLoginToken',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLoginToken(request: GetLoginTokenRequest): GetLoginTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoginTokenWithOptions(request, runtime);
}

model IsKeepAliveRequest {
  clientId?: string(name='ClientId', example='f4a0dc8e-1702-4728-9a60-95b27a35****'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-885351****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model IsKeepAliveResponseBody = {
  isKeepAlive?: boolean(name='IsKeepAlive', example='True'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-885351****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  tenantId?: string(name='TenantId', example='141631846826****'),
}

model IsKeepAliveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IsKeepAliveResponseBody(name='body'),
}

async function isKeepAliveWithOptions(request: IsKeepAliveRequest, runtime: Util.RuntimeOptions): IsKeepAliveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IsKeepAlive',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function isKeepAlive(request: IsKeepAliveRequest): IsKeepAliveResponse {
  var runtime = new Util.RuntimeOptions{};
  return isKeepAliveWithOptions(request, runtime);
}

model RebootDesktopsRequest {
  clientId?: string(name='ClientId', description='The ID of the client.', example='f4a0dc8e-1702-4728-9a60-95b27a35****'),
  clientOS?: string(name='ClientOS', description='The OS used by the client.', example='Windows_NT 10.0.18363 x64'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but make sure that the value is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure the idempotence of a request](~~25693~~).', example='40401e62-5caf-4508-8de7-bf98af12****'),
  clientVersion?: string(name='ClientVersion', description='The version of the client.', example='2.1.0-R-20210731.151756'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 20 cloud desktop IDs.', example='ecd-7w78ozhjcwa3u****'),
  loginToken?: string(name='LoginToken', description='The logon credential.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', description='The ID of the session.', example='cd45e873-650d-4d70-acb9-f996187a****'),
}

model RebootDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RebootDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootDesktopsResponseBody(name='body'),
}

async function rebootDesktopsWithOptions(request: RebootDesktopsRequest, runtime: Util.RuntimeOptions): RebootDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootDesktops',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootDesktopsWithOptions(request, runtime);
}

model RefreshLoginTokenRequest {
  clientId?: string(name='ClientId', description='The ID of the Alibaba Cloud Workspace client. The ID is unique.', example='f4a0dc8e-1702-4728-9a60-95b27a35****'),
  directoryId?: string(name='DirectoryId', description='> This parameter is not available to the public.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  endUserId?: string(name='EndUserId', description='The name of the end user.', example='alice'),
  loginToken?: string(name='LoginToken', description='The logon token.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-shanghai+dir-238191****'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', description='The ID of the session.', example='cd45e873-650d-4d70-acb9-f996187a****'),
}

model RefreshLoginTokenResponseBody = {
  loginToken?: string(name='LoginToken', description='The logon token.', example='v1c27bab6c205b2fdfac916434306375722776d6aa89e30b7836d18c95ade9137f0f5ac4325260782184e96ee2b3f0****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RefreshLoginTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshLoginTokenResponseBody(name='body'),
}

/**
  * The validity period of a logon token is 15 minutes. If an end user does not exit a client in 15 minutes, the logon token for the client must be refreshed. You can call this operation to refresh the client token.
  *
  * @param request RefreshLoginTokenRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RefreshLoginTokenResponse
 */
async function refreshLoginTokenWithOptions(request: RefreshLoginTokenRequest, runtime: Util.RuntimeOptions): RefreshLoginTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshLoginToken',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The validity period of a logon token is 15 minutes. If an end user does not exit a client in 15 minutes, the logon token for the client must be refreshed. You can call this operation to refresh the client token.
  *
  * @param request RefreshLoginTokenRequest
  * @return RefreshLoginTokenResponse
 */
async function refreshLoginToken(request: RefreshLoginTokenRequest): RefreshLoginTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshLoginTokenWithOptions(request, runtime);
}

model ReportSessionStatusRequest {
  endUserId?: string(name='EndUserId', example='liming'),
  instanceId?: string(name='InstanceId', example='i-bp167fcodoa90ixn****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  sessionChangeTime?: long(name='SessionChangeTime', example='1642909143781'),
  sessionId?: string(name='SessionId', example='2'),
  sessionStatus?: string(name='SessionStatus', example='SessionLogOn'),
}

model ReportSessionStatusResponseBody = {
  requestId?: string(name='RequestId', example='0EE5DE20-25F4-5870-9D56-C259A45B****'),
}

model ReportSessionStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReportSessionStatusResponseBody(name='body'),
}

async function reportSessionStatusWithOptions(request: ReportSessionStatusRequest, runtime: Util.RuntimeOptions): ReportSessionStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionChangeTime)) {
    query['SessionChangeTime'] = request.sessionChangeTime;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.sessionStatus)) {
    query['SessionStatus'] = request.sessionStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportSessionStatus',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportSessionStatus(request: ReportSessionStatusRequest): ReportSessionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportSessionStatusWithOptions(request, runtime);
}

model ResetPasswordRequest {
  clientId?: string(name='ClientId', example='95e41934-383e-4c9f-824f-3b93b19b****'),
  clientToken?: string(name='ClientToken', example='2f00ab32-a473-4c90-9aae-dd8842ae****'),
  email?: string(name='Email', example='a***@example.edu'),
  endUserId?: string(name='EndUserId', example='liming'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-899235****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  phone?: string(name='phone', example='1827912****'),
}

model ResetPasswordResponseBody = {
  requestId?: string(name='RequestId', example='A00477A5-167F-56D2-A315-EA77E4BD****'),
}

model ResetPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetPasswordResponseBody(name='body'),
}

async function resetPasswordWithOptions(request: ResetPasswordRequest, runtime: Util.RuntimeOptions): ResetPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.phone)) {
    query['phone'] = request.phone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetPassword',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetPassword(request: ResetPasswordRequest): ResetPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetPasswordWithOptions(request, runtime);
}

model ResetSnapshotRequest {
  clientId?: string(name='ClientId', example='b9d8ddfd-65d4-4857-9e97-56477d1f****'),
  loginToken?: string(name='LoginToken', example='v1fdef51b727aa91d6c881658978508114d3f5680fa99a66b2a631d17d5bb4860cccf1173be24d77d5ef1423c83aea****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='05182b8c-bb0d-49d3-963c-ee63a507****'),
  snapshotId?: string(name='SnapshotId', example='s-2zeipxmnhej803x7****'),
}

model ResetSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetSnapshotResponseBody(name='body'),
}

async function resetSnapshotWithOptions(request: ResetSnapshotRequest, runtime: Util.RuntimeOptions): ResetSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetSnapshot',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetSnapshot(request: ResetSnapshotRequest): ResetSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSnapshotWithOptions(request, runtime);
}

model SendTokenCodeRequest {
  clientId?: string(name='ClientId', example='f4a0dc8e-1702-4728-9a60-95b27a35****'),
  clientOS?: string(name='ClientOS', example='Windows_NT 10.0.18363 x64'),
  clientVersion?: string(name='ClientVersion', example='2.1.0-R-20210731.151756'),
  endUserId?: string(name='EndUserId', example='alice'),
  loginToken?: string(name='LoginToken', example='v28101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-2925105532'),
  sessionId?: string(name='SessionId', example='cd45e873-650d-4d70-acb9-f996187a****'),
  tokenCode?: string(name='TokenCode', example='63****'),
}

model SendTokenCodeResponseBody = {
  requestId?: string(name='RequestId', example='134BD0B2-B848-5743-9CE2-C1FD3D5F****'),
}

model SendTokenCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendTokenCodeResponseBody(name='body'),
}

async function sendTokenCodeWithOptions(request: SendTokenCodeRequest, runtime: Util.RuntimeOptions): SendTokenCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tokenCode)) {
    query['TokenCode'] = request.tokenCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendTokenCode',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendTokenCode(request: SendTokenCodeRequest): SendTokenCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendTokenCodeWithOptions(request, runtime);
}

model SetFingerPrintTemplateRequest {
  clientId?: string(name='ClientId', example='347431a9-90f6-448e-82c4-42bc84a9****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', example='testDescription'),
  encryptedFingerPrintTemplate?: string(name='EncryptedFingerPrintTemplate', example='AAAAAAAAAAAAAA'),
  encryptedKey?: string(name='EncryptedKey', example='drjfspchj'),
  fingerPrintTemplate?: string(name='FingerPrintTemplate', example='goG3gG8AAABhujtscn'),
  loginToken?: string(name='LoginToken', example='v11c73e7af0cb43ff39301651142485099ffb447085d76c4147519dbaa21c3bd90d53045e327c1f525ee6331c52556****'),
  password?: string(name='Password', example='As53328794'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='8b42538a-246e-45a1-95ea-e5c65b09****'),
}

model SetFingerPrintTemplateResponseBody = {
  encryptedPassword?: string(name='EncryptedPassword', example='0711abb9-4cf8-41b2-9d0e-b51209468631;da4VFPNxwY3CZegFjOrCNw==;iHp2l9/qGcfD4tWx7jZIZQ=='),
  index?: int32(name='Index', example='1'),
  requestId?: string(name='RequestId', example='CDE666EA-4FCD-5024-895C-8698E3D3****'),
}

model SetFingerPrintTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetFingerPrintTemplateResponseBody(name='body'),
}

async function setFingerPrintTemplateWithOptions(request: SetFingerPrintTemplateRequest, runtime: Util.RuntimeOptions): SetFingerPrintTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.encryptedFingerPrintTemplate)) {
    query['EncryptedFingerPrintTemplate'] = request.encryptedFingerPrintTemplate;
  }
  if (!Util.isUnset(request.encryptedKey)) {
    query['EncryptedKey'] = request.encryptedKey;
  }
  if (!Util.isUnset(request.fingerPrintTemplate)) {
    query['FingerPrintTemplate'] = request.fingerPrintTemplate;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetFingerPrintTemplate',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setFingerPrintTemplate(request: SetFingerPrintTemplateRequest): SetFingerPrintTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setFingerPrintTemplateWithOptions(request, runtime);
}

model SetFingerPrintTemplateDescriptionRequest {
  clientId?: string(name='ClientId', example='0764064c-1609-4d3c-8cb7-ab8d3feg****'),
  clientToken?: string(name='ClientToken', example='40401e62-5caf-4508-8de7-bf98af12****'),
  description?: string(name='Description', example='Finger 1'),
  index?: int32(name='Index', example='1'),
  loginToken?: string(name='LoginToken', example='v14e5a2404c495249f7541646535779667ea0b5d87754b5d2d2a3099bda774f3832e24756ef3e66eb574b1f3e99078****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='d28520d4-da0b-4a97-981d-683db865****'),
}

model SetFingerPrintTemplateDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='BBD7DFD1-A5DE-51D9-8FD6-3BF54EF4****'),
}

model SetFingerPrintTemplateDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetFingerPrintTemplateDescriptionResponseBody(name='body'),
}

async function setFingerPrintTemplateDescriptionWithOptions(request: SetFingerPrintTemplateDescriptionRequest, runtime: Util.RuntimeOptions): SetFingerPrintTemplateDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.index)) {
    query['Index'] = request.index;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetFingerPrintTemplateDescription',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setFingerPrintTemplateDescription(request: SetFingerPrintTemplateDescriptionRequest): SetFingerPrintTemplateDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setFingerPrintTemplateDescriptionWithOptions(request, runtime);
}

model StartDesktopsRequest {
  clientId?: string(name='ClientId', description='The ID of the client.', example='f4a0dc8e-1702-4728-9a60-95b27a35****'),
  clientOS?: string(name='ClientOS', description='The OS used by the client.', example='Windows_NT 10.0.18363 x64'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but make sure that the value is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure the idempotence of a request](~~25693~~).', example='21e7be12-aa4f-4389-b3e1-82f4a1b5****'),
  clientVersion?: string(name='ClientVersion', description='The version of the client.', example='2.1.0-R-20210731.151756'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 20 cloud desktop IDs.', example='ecd-cg27ufmapab08****'),
  loginToken?: string(name='LoginToken', description='The logon credential.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', description='The ID of the session.', example='cd45e873-650d-4d70-acb9-f996187a****'),
}

model StartDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StartDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDesktopsResponseBody(name='body'),
}

/**
  * ## Description
  * If the call is successful, the cloud desktops enter the Running state.
  *
  * @param request StartDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartDesktopsResponse
 */
async function startDesktopsWithOptions(request: StartDesktopsRequest, runtime: Util.RuntimeOptions): StartDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDesktops',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * If the call is successful, the cloud desktops enter the Running state.
  *
  * @param request StartDesktopsRequest
  * @return StartDesktopsResponse
 */
async function startDesktops(request: StartDesktopsRequest): StartDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDesktopsWithOptions(request, runtime);
}

model StartRecordContentRequest {
  clientId?: string(name='ClientId'),
  clientOS?: string(name='ClientOS'),
  clientVersion?: string(name='ClientVersion'),
  desktopId?: string(name='DesktopId'),
  loginToken?: string(name='LoginToken'),
  regionId?: string(name='RegionId'),
  sessionId?: string(name='SessionId'),
}

model StartRecordContentResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartRecordContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartRecordContentResponseBody(name='body'),
}

async function startRecordContentWithOptions(request: StartRecordContentRequest, runtime: Util.RuntimeOptions): StartRecordContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRecordContent',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startRecordContent(request: StartRecordContentRequest): StartRecordContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRecordContentWithOptions(request, runtime);
}

model StopDesktopsRequest {
  clientId?: string(name='ClientId', description='The ID of the client.', example='f4a0dc8e-1702-4728-9a60-95b27a35****'),
  clientOS?: string(name='ClientOS', description='The OS used by the client.', example='Windows_NT 10.0.18363 x64'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but make sure that the value is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure the idempotence of a request](~~25693~~).', example='6ce412a8-399f-49f9-9518-66ee028a****'),
  clientVersion?: string(name='ClientVersion', description='The version of the client.', example='2.1.0-R-20210731.151756'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of cloud desktops. You can specify most at 20 IDs of cloud desktops.', example='ecd-7w78ozhjcwa3u****'),
  loginToken?: string(name='LoginToken', description='The logon credential.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', description='The ID of the session.', example='cd45e873-650d-4d70-acb9-f996187a****'),
}

model StopDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StopDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDesktopsResponseBody(name='body'),
}

/**
  * ## Description
  * The cloud desktops that you want to stop by calling this operation must be in the Running state. If the call is successful, the cloud desktops enter the Stopped state.
  *
  * @param request StopDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopDesktopsResponse
 */
async function stopDesktopsWithOptions(request: StopDesktopsRequest, runtime: Util.RuntimeOptions): StopDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDesktops',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * The cloud desktops that you want to stop by calling this operation must be in the Running state. If the call is successful, the cloud desktops enter the Stopped state.
  *
  * @param request StopDesktopsRequest
  * @return StopDesktopsResponse
 */
async function stopDesktops(request: StopDesktopsRequest): StopDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDesktopsWithOptions(request, runtime);
}

model StopRecordContentRequest {
  clientId?: string(name='ClientId'),
  clientOS?: string(name='ClientOS'),
  clientVersion?: string(name='ClientVersion'),
  desktopId?: string(name='DesktopId'),
  loginToken?: string(name='LoginToken'),
  regionId?: string(name='RegionId'),
  sessionId?: string(name='SessionId'),
}

model StopRecordContentResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopRecordContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopRecordContentResponseBody(name='body'),
}

async function stopRecordContentWithOptions(request: StopRecordContentRequest, runtime: Util.RuntimeOptions): StopRecordContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientOS)) {
    query['ClientOS'] = request.clientOS;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopRecordContent',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopRecordContent(request: StopRecordContentRequest): StopRecordContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRecordContentWithOptions(request, runtime);
}

model UnbindUserDesktopRequest {
  clientId?: string(name='ClientId', example='58f96f67-7944-4f97-9342-****'),
  clientType?: string(name='ClientType', example='windows'),
  force?: boolean(name='Force', example='true'),
  loginToken?: string(name='LoginToken', example='v12307f5e0****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sessionId?: string(name='SessionId', example='3b053331-dc98-43d8-b247-****'),
  userDesktopId?: string(name='UserDesktopId', example='ud-sdfs****'),
}

model UnbindUserDesktopResponseBody = {
  requestId?: string(name='RequestId', example='D5B7CF35-E078-5EBF-A010-****'),
}

model UnbindUserDesktopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindUserDesktopResponseBody(name='body'),
}

async function unbindUserDesktopWithOptions(request: UnbindUserDesktopRequest, runtime: Util.RuntimeOptions): UnbindUserDesktopResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.userDesktopId)) {
    query['UserDesktopId'] = request.userDesktopId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindUserDesktop',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindUserDesktop(request: UnbindUserDesktopRequest): UnbindUserDesktopResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindUserDesktopWithOptions(request, runtime);
}

model VerifyCredentialRequest {
  clientId?: string(name='ClientId', example='d0b95762-0541-4b53-a0e4-7ed09f39****'),
  credential?: string(name='Credential', example='123456789cyG'),
  credentialType?: string(name='CredentialType', example='Password'),
  encryptedKey?: string(name='EncryptedKey', example='drjfs****'),
  loginToken?: string(name='LoginToken', example='v1f5772a1c60dbea9fd8e1648567079018086448d234b5bc8e30bec0ba6e80c41c767c4dd0db51e9e5c4e0f111431a****'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-shanghai+dir-227468****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  sessionId?: string(name='SessionId', example='eb17af2e-1dd6-4cc4-a3ee-3a14d0d7****'),
}

model VerifyCredentialResponseBody = {
  requestId?: string(name='RequestId', example='D5F0BDFB-A229-5F1D-B790-33709D43****'),
}

model VerifyCredentialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCredentialResponseBody(name='body'),
}

async function verifyCredentialWithOptions(request: VerifyCredentialRequest, runtime: Util.RuntimeOptions): VerifyCredentialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.credential)) {
    query['Credential'] = request.credential;
  }
  if (!Util.isUnset(request.credentialType)) {
    query['CredentialType'] = request.credentialType;
  }
  if (!Util.isUnset(request.encryptedKey)) {
    query['EncryptedKey'] = request.encryptedKey;
  }
  if (!Util.isUnset(request.loginToken)) {
    query['LoginToken'] = request.loginToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyCredential',
    version = '2020-10-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyCredential(request: VerifyCredentialRequest): VerifyCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCredentialWithOptions(request, runtime);
}

