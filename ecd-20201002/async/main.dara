/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ecd';
  @version = '2020-10-02';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model OssUploadCredential {
  accessKeyId?: string(name='AccessKeyId'),
  endpoint?: string(name='Endpoint'),
  filePath?: string(name='FilePath'),
  ossPolicy?: string(name='OssPolicy'),
  ossSignature?: string(name='OssSignature'),
  stsToken?: string(name='StsToken'),
}

model ApproveFotaUpdateRequest {
  appVersion: string(name='AppVersion', example='0.0.1-D-20220513.14****', position='Query'),
  clientId: string(name='ClientId', example='d4452bd7-88df-4b90-a409-806da674****', position='Query'),
  desktopId?: string(name='DesktopId', example='ecd-138dsptkrt00u****', position='Query'),
  loginToken: string(name='LoginToken', example='v18390c954ce59e2915ef16663205371721e0db9a46179ac89249a203320459523cb54ad08efe324784dd0eba25950****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', example='4771b873-c757-4893-973c-7f5beejh****', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model ApproveFotaUpdateResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveFotaUpdateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveFotaUpdateResponseBody(name='body'),
}

async function approveFotaUpdate(request: ApproveFotaUpdateRequest): ApproveFotaUpdateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveFotaUpdate', 'POST', '/', 'json', false, 'json', request);
}

model ChangePasswordRequest {
  clientId: string(name='ClientId', example='42f6645a-9c3c-4772-be2a-cc5f5732****', position='Query'),
  endUserId: string(name='EndUserId', example='liming', position='Query'),
  loginToken: string(name='LoginToken', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****', position='Query'),
  newPassword: string(name='NewPassword', example='67436290', position='Query'),
  officeSiteId: string(name='OfficeSiteId', example='cn-shanghai+dir-227468****', position='Query'),
  oldPassword: string(name='OldPassword', example='12345678', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', example='1', position='Query'),
}

model ChangePasswordResponseBody = {
  loginToken?: string(name='LoginToken', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  requestId?: string(name='RequestId', example='484256DA-D816-44D2-9D86-B6EE4D5B****'),
}

model ChangePasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangePasswordResponseBody(name='body'),
}

async function changePassword(request: ChangePasswordRequest): ChangePasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangePassword', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFingerPrintTemplateRequest {
  clientId: string(name='ClientId', example='59e86b39-ccac-4dfa-93d7-1f724052****', position='Query'),
  clientToken?: string(name='ClientToken', example='40401e62-5caf-4508-8de7-bf98af12****', position='Query'),
  index: int32(name='Index', example='1', minimum=1, maximum=4, position='Query'),
  loginToken: string(name='LoginToken', example='v1c0436c721786529914f16516396228454fa6284c9b80f9917f25ebbec2aa30c10343e3f6f9aff64500ce13808aef****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId: string(name='SessionId', example='6df06330-3b75-4768-b334-41a73a64****', position='Query'),
}

model DeleteFingerPrintTemplateResponseBody = {
  requestId?: string(name='RequestId', example='134BD0B2-B848-5743-9CE2-C1FD3D5F****'),
}

model DeleteFingerPrintTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFingerPrintTemplateResponseBody(name='body'),
}

async function deleteFingerPrintTemplate(request: DeleteFingerPrintTemplateRequest): DeleteFingerPrintTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFingerPrintTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDirectoriesRequest {
  clientId: string(name='ClientId', example='54c17e1d-2d72-4b87-aa33-25f3b3f2****', position='Query'),
  directoryId?: [ string ](name='DirectoryId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDirectoriesResponseBody = {
  directories?: [ 
    {
      desktopAccessType?: string(name='DesktopAccessType', example='INTERNET'),
      directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
      directoryType?: string(name='DirectoryType', example='AD_CONNECTOR'),
      providerId?: string(name='ProviderId', example='26842'),
      ssoServiceUrl?: string(name='SsoServiceUrl', example='https://eds-cn-shanghai-67726****'),
    }
  ](name='Directories'),
  requestId?: string(name='RequestId', example='F369A091-002F-49C8-AD55-02A77629****'),
}

model DescribeDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDirectoriesResponseBody(name='body'),
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDirectories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFingerPrintTemplatesRequest {
  clientId: string(name='ClientId', example='61e39dc6-0450-45f6-a372-2a09e938****', position='Query'),
  loginToken: string(name='LoginToken', example='v189646d6f329e4dfcbf51653542202890570fec26e4f9ee26427c5920fcd93871f017d2190199c4c7d0c0bf00f573****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId: string(name='SessionId', example='a5062d68-e550-4d09-8288-67c8ba9e****', position='Query'),
}

model DescribeFingerPrintTemplatesResponseBody = {
  fingerPrintTemplates?: [ 
    {
      clientId?: string(name='ClientId', example='2258a3d5-b8f8-4d79-a221-eaecf211****'),
      creationTime?: string(name='CreationTime', example='2022-03-13T13:26:29Z'),
      description?: string(name='Description', example='Finger 1'),
      endUserId?: string(name='EndUserId', example='liming'),
      index?: long(name='Index', example='1'),
      loginTime?: string(name='LoginTime', example='2022-03-13T13:26:29Z'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-074949****'),
    }
  ](name='FingerPrintTemplates'),
  requestId?: string(name='RequestId', example='9C1D3FBE-84E1-5ABB-AD98-2003AC71****'),
}

model DescribeFingerPrintTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFingerPrintTemplatesResponseBody(name='body'),
}

async function describeFingerPrintTemplates(request: DescribeFingerPrintTemplatesRequest): DescribeFingerPrintTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFingerPrintTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGlobalDesktopsRequest {
  clientId: string(name='ClientId', example='c213150d-7ac3-432c-b749-6e1e090b****', position='Query'),
  desktopAccessType?: string(name='DesktopAccessType', example='INTERNET', position='Query'),
  desktopId?: [ string ](name='DesktopId', position='Query'),
  desktopName?: string(name='DesktopName', example='DesktopTest', position='Query'),
  desktopStatus?: string(name='DesktopStatus', example='Running', position='Query'),
  directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-880841****', position='Query'),
  keyword?: string(name='Keyword', description='关键字。支持模糊搜索桌面ID、云桌面名称和终端用户自定义的桌面名称。', example='ecd', position='Query'),
  loginRegionId?: string(name='LoginRegionId', example='cn-hangzhou', position='Query'),
  loginToken: string(name='LoginToken', example='v147c9114a180489f89691663893169****', position='Query'),
  maxResults?: int32(name='MaxResults', example='500', position='Query'),
  nextToken?: string(name='NextToken', example='eyJkZWZhdWx0IjpbIjk2MjEy****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-880841****', position='Query'),
  orderBy?: string(name='OrderBy', example='AssignTime', position='Query'),
  queryFotaUpdate?: boolean(name='QueryFotaUpdate', example='true', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  searchRegionId?: string(name='SearchRegionId', example='cn-shanghai', position='Query'),
  sessionId?: string(name='SessionId', example='5c456a41-1e65-4e72-ab4d-5dcfff52****', position='Query'),
  sortType?: string(name='SortType', example='ASC', position='Query'),
  withoutLatency?: boolean(name='WithoutLatency', example='true', position='Query'),
}

model DescribeGlobalDesktopsResponseBody = {
  desktops?: [ 
    {
      chargeType?: string(name='ChargeType', example='PostPaid'),
      clients?: [ 
        {
          clientType?: string(name='ClientType', description='客户端类型，取值：

- macos：Mac客户端
- ios：IOS客户端
- android：Android客户端
- html5：Web客户端
- windows：Windows客户端
- linux：Linux客户端', example='windows'),
          status?: string(name='Status', description='客户端状态，取值：

- ON：允许登录
- OFF：不允许登录', example='ON'),
        }
      ](name='Clients', description='支持的客户端信息'),
      connectionStatus?: string(name='ConnectionStatus', example='Disconnected'),
      cpu?: int32(name='Cpu', example='2'),
      creationTime?: string(name='CreationTime', example='2020-11-06T08:28Z'),
      desktopGroupId?: string(name='DesktopGroupId', example='dg-3uiojcc0j4kh7****'),
      desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
      desktopName?: string(name='DesktopName', example='testDesktopName'),
      desktopStatus?: string(name='DesktopStatus', example='Running'),
      desktopTimers?: [ 
        {
          allowClientSetting?: boolean(name='AllowClientSetting'),
          cronExpression?: string(name='CronExpression', example='0 0 0 ? * 1'),
          enforce?: boolean(name='Enforce', example='false'),
          executionTime?: string(name='ExecutionTime'),
          interval?: int32(name='Interval', example='60'),
          operationType?: string(name='OperationType'),
          resetType?: string(name='ResetType', example='RESET_TYPE_BOTH'),
          timerType?: string(name='TimerType', example='NoConnectShutdown'),
        }
      ](name='DesktopTimers'),
      desktopType?: string(name='DesktopType', example='ecd.basic.large'),
      directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
      disks?: [ 
        {
          diskId?: string(name='DiskId', example='d-jedbpr4sl9l37****'),
          diskSize?: int32(name='DiskSize', example='80'),
          diskType?: string(name='DiskType', example='SYSTEM'),
        }
      ](name='Disks'),
      endUserId?: string(name='EndUserId', example='User1'),
      endUserIds?: [ string ](name='EndUserIds'),
      expiredTime?: string(name='ExpiredTime', example='2021-12-31T15:59Z'),
      fotaUpdate?: {
        channel?: string(name='Channel', example='Enterprise'),
        currentAppVersion?: string(name='CurrentAppVersion', example='0.0.0-D-20220102.xxxx'),
        force?: boolean(name='Force', example='false'),
        newAppVersion?: string(name='NewAppVersion', example='0.0.0-R-20220307.xxxx'),
        newDcdVersion?: string(name='NewDcdVersion'),
        project?: string(name='Project', example='testProject'),
        releaseNote?: string(name='ReleaseNote'),
        releaseNoteEn?: string(name='ReleaseNoteEn'),
        releaseNoteJp?: string(name='ReleaseNoteJp'),
        size?: string(name='Size', example='100'),
      }(name='FotaUpdate'),
      gpuMemory?: int32(name='GpuMemory', example='2048'),
      hibernationBeta?: boolean(name='HibernationBeta'),
      hostName?: string(name='HostName', example='testName'),
      imageId?: string(name='ImageId', example='m-4zfb6zj728hhr****'),
      lastStartTime?: string(name='LastStartTime', example='2021-07-13T15:59Z'),
      localName?: string(name='LocalName'),
      managementFlags?: [ string ](name='ManagementFlags'),
      memory?: long(name='Memory', example='4096'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp', example='192.168.xx.xx'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
      os?: string(name='Os'),
      osType?: string(name='OsType', example='Windows'),
      platform?: string(name='Platform'),
      policyGroupId?: string(name='PolicyGroupId', example='pg-9cktlowtxfl6****'),
      protocolType?: string(name='ProtocolType', example='ASP'),
      realDesktopId?: string(name='RealDesktopId', example='ecd-gx2x1dhsm****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      regionLocation?: string(name='RegionLocation'),
      sessionType?: string(name='SessionType'),
      sessions?: [ 
        {
          endUserId?: string(name='EndUserId', example='User1'),
          establishmentTime?: string(name='EstablishmentTime', example='2021-03-07T08:23Z'),
        }
      ](name='Sessions'),
      supportHibernation?: boolean(name='SupportHibernation', example='true'),
      userCustomName?: string(name='UserCustomName', example='testDesktop'),
    }
  ](name='Desktops'),
  nextToken?: string(name='NextToken', example='eyJkZWZhdWx0IjpbIjIwMjItMDgtMTdUM****'),
  requestId?: string(name='RequestId', example='4686A731-D601-548C-83E2-4CB6371E****'),
}

model DescribeGlobalDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGlobalDesktopsResponseBody(name='body'),
}

async function describeGlobalDesktops(request: DescribeGlobalDesktopsRequest): DescribeGlobalDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGlobalDesktops', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOfficeSitesRequest {
  clientId: string(name='ClientId', example='42f6645a-9c3c-4772-be2a-cc5f5732****', position='Query'),
  officeSiteId?: [ string ](name='OfficeSiteId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeOfficeSitesResponseBody = {
  officeSites?: [ 
    {
      desktopAccessType?: string(name='DesktopAccessType', example='VPC'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint', example='http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
      officeSiteType?: string(name='OfficeSiteType', example='SIMPLE'),
      providerId?: string(name='ProviderId', example='268****'),
      ssoServiceUrl?: string(name='SsoServiceUrl', example='https://eds-cn-shanghai-67****'),
    }
  ](name='OfficeSites'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeOfficeSitesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOfficeSitesResponseBody(name='body'),
}

async function describeOfficeSites(request: DescribeOfficeSitesRequest): DescribeOfficeSitesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOfficeSites', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  clientId: string(name='ClientId', example='ac4a73ad-789a-449a-a88f-d18571d6****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint', example='ecd.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotsRequest {
  clientId: string(name='ClientId', example='16dad2b6-3c6d-4e4c-b057-78ecb13c****', position='Query'),
  desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****', position='Query'),
  loginToken: string(name='LoginToken', example='v16abfb945208fc5745061668654680853da4a25202d1a394fcad57bba484e9827ad43ea7d10fb6bf13d44a4adc0e9****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', example='a99b9aca-bac5-4da2-819e-400ce98f****', position='Query'),
  snapshotId?: string(name='SnapshotId', example='s-2ze81owrnv9pity4****', position='Query'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', example='2020-12-20T14:52:28Z'),
      description?: string(name='Description', example='testDescription'),
      desktopId?: string(name='DesktopId', example='ecd-g03l3tlm8djoj****'),
      progress?: string(name='Progress', example='100%'),
      remainTime?: int32(name='RemainTime', example='30'),
      snapshotId?: string(name='SnapshotId', example='s-2zeipxmnhej803x7****'),
      snapshotName?: string(name='SnapshotName', example='testSnapshotName'),
      snapshotType?: string(name='SnapshotType', example='USER'),
      sourceDiskSize?: string(name='SourceDiskSize', example='150'),
      sourceDiskType?: string(name='SourceDiskType', example='SYSTEM'),
      status?: string(name='Status', example='ACCOMPLISHED'),
    }
  ](name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model EncryptPasswordRequest {
  clientId: string(name='ClientId', example='1d40776f-e9cb-4e2b-a8da-308d10e8****', position='Query'),
  directoryId?: string(name='DirectoryId', example='cn-beijing+dir-131196****', position='Query'),
  loginToken: string(name='LoginToken', example='v1b16dcff3ab21a6c5ec01652238375511cff5a1db59fd4dc49afb37e2ea7a626af6f38109fd0498b6abd9de1af7743****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-beijing+dir-131196****', position='Query'),
  password: string(name='Password', example='Ab123456', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  sessionId: string(name='SessionId', example='c78e2e52-23d9-4401-a648-e67ac6ff****', position='Query'),
}

model EncryptPasswordResponseBody = {
  encryptedPassword?: string(name='EncryptedPassword', example='d34601bc-e6b1-4433-b0cc-8f6c5e52;n4apvGub3OBoj4Grwg==;thhO4UEomJfdvwnwlA=='),
  requestId?: string(name='RequestId', example='AF538DA8-FFC6-52DA-8FF8-7B92579F****'),
}

model EncryptPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EncryptPasswordResponseBody(name='body'),
}

async function encryptPassword(request: EncryptPasswordRequest): EncryptPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EncryptPassword', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudDriveServiceMountTokenRequest {
  clientId?: string(name='ClientId', example='00e122c3-13fb-4fc3-bc7a-5d9acb89****', position='Query'),
  loginToken?: string(name='LoginToken', example='v1972cd3446f0e523598916520951742474e6624fcdea6652994d47bc6157d27f7cc900c339db67882j3no4nh5bk3b4****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-7186763****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', example='14e1fe41-ce9b-491d-aa8c-345jk2n4bk****', position='Query'),
}

model GetCloudDriveServiceMountTokenResponseBody = {
  requestId?: string(name='RequestId', example='DC27288A-F9E1-5092-9B5B-71C27D15****'),
  token?: {
    domainId?: string(name='DomainId', example='h****'),
    expiredAfter?: string(name='ExpiredAfter', example='2022-10-10T04:41:35Z'),
    status?: string(name='Status', example='enabled'),
    token?: string(name='Token', example='7836fa6eced7dc8d54c775k34iu3h4i2kh534f****'),
    totalSize?: long(name='TotalSize', example='6050416754750'),
    usedSize?: long(name='UsedSize', example='605089'),
  }(name='Token'),
}

model GetCloudDriveServiceMountTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCloudDriveServiceMountTokenResponseBody(name='body'),
}

async function getCloudDriveServiceMountToken(request: GetCloudDriveServiceMountTokenRequest): GetCloudDriveServiceMountTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudDriveServiceMountToken', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectionTicketRequest {
  clientId: string(name='ClientId', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  clientOS?: string(name='ClientOS', example='Windows_NT 10.0.18363 x64', position='Query'),
  clientType?: string(name='ClientType', example='windows', position='Query'),
  clientVersion?: string(name='ClientVersion', example='2.1.0-R-20210731.151756', position='Query'),
  commandContent?: string(name='CommandContent', maxLength=1024000, position='Query'),
  desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****', position='Query'),
  loginToken: string(name='LoginToken', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionId?: string(name='SessionId', example='cd45e873-650d-4d70-acb9-f996187a****', position='Query'),
  taskId?: string(name='TaskId', example='2afbad19-778a-4fc5-9674-1f19c638****', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model GetConnectionTicketResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskCode?: string(name='TaskCode'),
  taskId?: string(name='TaskId', example='2afbad19-778a-4fc5-9674-1f19c63862da'),
  taskMessage?: string(name='TaskMessage'),
  taskStatus?: string(name='TaskStatus', example='FINISHED'),
  ticket?: string(name='Ticket', example='W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********'),
}

model GetConnectionTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectionTicketResponseBody(name='body'),
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectionTicket', 'POST', '/', 'json', false, 'json', request);
}

model GetLoginTokenRequest {
  authenticationCode?: string(name='AuthenticationCode', description='The verification code that is generated by the virtual MFA device. This parameter is required if you set `CurrentStage` to `MFAVerify`.', example='47****', position='Query'),
  clientId: string(name='ClientId', description='The ID of the Alibaba Cloud Workspace client. The system generates a unique ID for each client.', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  clientOS?: string(name='ClientOS', description='The operating system (OS) of the device that runs an Alibaba Cloud Workspace client.', example='Windows_NT 10.0.1**** x64', position='Query'),
  clientType?: string(name='ClientType', description='The type of Alibaba Cloud Workspace clients.

Valid values:

*   HTML5: web client.

*   WINDOWS: Windows client.

*   MACOS: macOS client.

*   IOS: iOS client.

*   ANDROID: Android client.', example='Windows', position='Query'),
  clientVersion?: string(name='ClientVersion', description='The version of the client. When you use an Alibaba Cloud Workspace client, you can view the client version in the **About** dialog box on the client logon page.', example='2.1.0-R-20210731.1****', position='Query'),
  currentStage?: string(name='CurrentStage', description='The logon authentication stage. Valid values:

*   `ADPassword`: the stage to verify the identity of the Active Directory (AD) user. You must specify the value when the system verifies the identity of a convenience account or an AD account.
*   `MFABind: the stage to bind a virtual multi-factor authentication (MFA) device.`
*   `MFAVerify: the stage to verify the verification code that is generated by the virtual MFA device.`
*   `TokenVerify`: the stage to perform two-factor authentication on an Alibaba Cloud Workspace client (hereinafter referred to as the client).
*   `ChangePassword`: the stage to change the password of the user.
*   `KeepAliveVerify`: the stage to obtain LoginToken if KeepAliveToken is valid.', example='ADPassword', position='Query'),
  directoryId?: string(name='DirectoryId', description='The office network ID. This parameter has the same meaning as `OfficeSiteId`. We recommend that you replace `DirectoryId` with `OfficeSiteId`. You can specify a value for `DirectoryId` or `OfficeSiteId`.', example='cn-hangzhou+dir-885351****', position='Query'),
  endUserId?: string(name='EndUserId', description='The name of the convenience user or the AD user. This parameter is required if you set `CurrentStage` to `ADPassword`.', example='alice', position='Query'),
  keepAlive?: boolean(name='KeepAlive', description='Specifies whether to keep the user logged on to the client. 
Valid values:
* null: Default value. Do not keep the user logged on to the client.
* true: Keep the user logged on to the client.
* false:  Do not keep the user logged on to the client.', example='false', position='Query'),
  keepAliveToken?: string(name='KeepAliveToken', description='The token to keep logging on to an Alibaba Cloud Workspace client. When an end user logs on to the Alibaba Cloud Workspace client and select Auto Sign-in, `KeepAliveToken` is returned after you call this operation. Within the valid period of the returned token``, you can call the `GetLoginToken` operation and set `CurrentStage` to `KeepAliveVerify`. Then, you can obtain LoginToken. If you set `CurrentStage` to `KeepAliveVerify`, `KeepAliveToken` is required.', example='hide', position='Query'),
  newPassword?: string(name='NewPassword', description='The new password. This parameter is required if you set `CurrentStage` to `ChangePassword`.', example='NewPassword', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+dir-885351****', position='Query'),
  oldPassword?: string(name='OldPassword', description='The current password. This parameter is required if you set `CurrentStage` to `ChangePassword`.', example='OldPassword', position='Query'),
  password?: string(name='Password', description='The password of the convenience user or the AD user. This parameter is required if you set `CurrentStage` to `ADPassword`.', example='Password1234', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the regions supported by EDS.', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', description='The ID of the session.

*   If the virtual multi-factor authentication (MFA) device is not bound or two-factor authentication is not enabled for the client, you do not need to specify a value for `SessionId`.
*   If the virtual MFA device is not bound or two-factor authentication is enabled for the client, you must specify a value for `SessionId` to verify the user identity after you specify a value for `ADPassword`. The value of the `SessionId` parameter is returned only if the CurrentStage parameter is set to `ADPassword` when you call the `GetLoginToken` operation.', example='cd45e873-650d-4d70-acb9-f996187a****', position='Query'),
  tokenCode?: string(name='TokenCode', description='If two-factor authentication is enabled for Alibaba Cloud Workspace terminals in the EDS console and the system detects that the current logon user is exposed to risks, the system sends a verification code to the email address of the user. This parameter is required if you set `CurrentStage` to `TokenVerify`.', example='63****', position='Query'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. When you use an Alibaba Cloud Workspace client, you can view the client version in the **About** dialog box on the client logon page.', example='C78CA9E99315687575DD2844C1F3****', position='Query'),
}

model GetLoginTokenResponseBody = {
  email?: string(name='Email', description='The email address of the user. The system returns the email address in the return value of the LoginToken parameter after the user logs on to the client.

*   For a convenience user, the return value is the email address specified when the administrator creates the convenience user.
*   For an AD user, the return value is in the following format: `Username@Name of the AD domain`.', example='alice'),
  endUserId?: string(name='EndUserId', description='The account of the convenience user or the AD user.', example='alice'),
  industry?: string(name='Industry', description='> This is a parameter only for internal use.', example='edu'),
  keepAliveToken?: string(name='KeepAliveToken', description='The token used to keep the user logged on. After the user logs on to the client and select the Keep Logon option, `KeepAliveToken` is returned when you call the operation. If the user does not select the Keep Logon option, null is returned.', example='006YwvYMsesWWsDBZnVB+Wq9AvJDVIqOY3YCktvtb7+KxMb3ClnNlV8+l/knhZYrXUmeP06IzkjF+IgcZ3vZKOyMprDyFHjCy1r27FRE/U7+geWCl8iQ+yF8GaCRHfJEkC2+ROs93HkT4tfHxyY1J8W7O7ZQGUC/cdCvm+cCP6FIy73IUuPuVR6PcKYXIpEZPW'),
  label?: string(name='Label', description='The attribute of the convenience user. For an AD user, null is returned.', example='test:sample'),
  loginToken?: string(name='LoginToken', description='The logon token.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****'),
  nextStage?: string(name='NextStage', description='The next stage that is expected to enter. For example, an administrator enables MFA in the EDS console. When an end user enters the password, that is, the end user completes the `ADPassword` stage, this parameter returns `MFAVerify`. This indicates that MFA is required.

>  For more information about the authentication stages, see the `CurrentStage` parameter.', example='MFAVerify'),
  passwordStrategy?: {
    tenantAlternativeChars?: [ string ](name='TenantAlternativeChars', description='> This is a parameter only for internal use.'),
    tenantPasswordLength?: string(name='TenantPasswordLength', description='> This is a parameter only for internal use.', example='null'),
  }(name='PasswordStrategy', description='> This is a parameter only for internal use.'),
  phone?: string(name='Phone', description='Enter the mobile number of the convenience user. For an AD user, null is returned.', example='1381111****'),
  props?: map[string]string(name='Props', description='> This is a parameter only for internal use.'),
  qrCodePng?: string(name='QrCodePng', description='The QR code that is generated when the virtual MFA device is bound. The value is encoded in Base64. This parameter can be empty. This parameter is required only when the CurrentStage parameter is set to `MFABind`.

> For more information about each authentication stage, see the parameter description of the request parameter `CurrentStage`.', example='5OCLLKKOJU5HPBX66H3QCTWY******'),
  reason?: string(name='Reason', description='> This is a parameter only for internal use.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  riskVerifyInfo?: {
    email?: string(name='Email', description='The email used for authentication.', example='user@example.com'),
    lastLockDuration?: long(name='LastLockDuration', description='The duration of the lock.', example='1713749778'),
    locked?: string(name='Locked', description='Whether the account is locked or not.', example='true'),
    phone?: string(name='Phone', description='The mobile number used for authentication.', example='1388888****'),
  }(name='RiskVerifyInfo', description='Risk identification information regarding the signin process.'),
  secret?: string(name='Secret', description='The key that is generated when you bind the virtual MFA device. This parameter is required when the CurrentStage parameter is set to `MFABind`.

> For more information about each authentication stage, see the parameter description of the request parameter `CurrentStage`.', example='5OCLLKKOJU5HPBX66H3QCTWYI7MH****'),
  sessionId?: string(name='SessionId', description='The ID of the session. The ID is returned the first time you call the `GetLoginToken` operation in the session. If MFA is required, you must specify this parameter in subsequent stages.

> For more information about each authentication stage, see the parameter description of the request parameter `CurrentStage`.', example='d6ec166d-ab93-4286-bf7f-a18bb929****'),
  tenantId?: long(name='TenantId', description='The ID of the Alibaba Cloud account. The ID is used for hardware client authentication.', example='166353906220****'),
  windowDisplayMode?: string(name='WindowDisplayMode', description='> This is a parameter only for internal use.', example='mode'),
}

model GetLoginTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoginTokenResponseBody(name='body'),
}

async function getLoginToken(request: GetLoginTokenRequest): GetLoginTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoginToken', 'POST', '/', 'json', false, 'json', request);
}

model IsKeepAliveRequest {
  clientId: string(name='ClientId', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-885351****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model IsKeepAliveResponseBody = {
  isKeepAlive?: boolean(name='IsKeepAlive', example='True'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-885351****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  tenantId?: string(name='TenantId', example='141631846826****'),
}

model IsKeepAliveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsKeepAliveResponseBody(name='body'),
}

async function isKeepAlive(request: IsKeepAliveRequest): IsKeepAliveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IsKeepAlive', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdsAgentReportConfigRequest {
  aliUid?: long(name='AliUid', position='Query'),
  desktopId?: string(name='DesktopId', position='Query'),
  ecsInstanceId?: string(name='EcsInstanceId', position='Query'),
}

model QueryEdsAgentReportConfigResponseBody = {
  data?: {
    config?: string(name='Config'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryEdsAgentReportConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryEdsAgentReportConfigResponseBody(name='body'),
}

async function queryEdsAgentReportConfig(request: QueryEdsAgentReportConfigRequest): QueryEdsAgentReportConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdsAgentReportConfig', 'POST', '/', 'json', false, 'json', request);
}

model RebootDesktopsRequest {
  clientId: string(name='ClientId', description='The client ID. The system generates a unique ID for each client.', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  clientOS?: string(name='ClientOS', description='The operating system (OS) of the device that runs the Alibaba Cloud Workspace client (hereinafter referred to as WUYING client).', example='Windows_NT 10.0.18363 x64', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How do I ensure the idempotence of a request?](~~25693~~)', example='40401e62-5caf-4508-8de7-bf98af12****', position='Query'),
  clientVersion?: string(name='ClientVersion', description='The client version. If you use a WUYING client, you can view the client version in the **About** dialog box on the client logon page.', example='2.1.0-R-20210731.151756', position='Query'),
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify the IDs of 1 to 20 cloud computers.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  loginToken?: string(name='LoginToken', description='The logon token.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the regions supported by WUYING Workspace.', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', description='The session ID.', example='cd45e873-650d-4d70-acb9-f996187a****', position='Query'),
  sessionToken?: string(name='SessionToken', description='The logon token.', example='04b7b80a0b020715c5c1b4175fc4771698****9e2a759557a4624665fd53ae40', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the client.', example='91761ED27169E2FC564F29388E2D****', position='Query'),
}

model RebootDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RebootDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootDesktopsResponseBody(name='body'),
}

async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootDesktops', 'POST', '/', 'json', false, 'json', request);
}

model RefreshLoginTokenRequest {
  clientId: string(name='ClientId', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-jedbpr4sl9l37****', position='Query'),
  endUserId: string(name='EndUserId', example='alice', position='Query'),
  loginToken: string(name='LoginToken', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-shanghai+dir-238191****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', example='cd45e873-650d-4d70-acb9-f996187a****', position='Query'),
}

model RefreshLoginTokenResponseBody = {
  loginToken?: string(name='LoginToken', example='v1c27bab6c205b2fdfac916434306375722776d6aa89e30b7836d18c95ade9137f0f5ac4325260782184e96ee2b3f0****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RefreshLoginTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshLoginTokenResponseBody(name='body'),
}

async function refreshLoginToken(request: RefreshLoginTokenRequest): RefreshLoginTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshLoginToken', 'POST', '/', 'json', false, 'json', request);
}

model ReportEdsAgentInfoRequest {
  aliUid?: long(name='AliUid', position='Query'),
  desktopId?: string(name='DesktopId', position='Query'),
  ecsInstanceId?: string(name='EcsInstanceId', position='Query'),
  edsAgentInfo?: string(name='EdsAgentInfo', position='Query'),
}

model ReportEdsAgentInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReportEdsAgentInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportEdsAgentInfoResponseBody(name='body'),
}

async function reportEdsAgentInfo(request: ReportEdsAgentInfoRequest): ReportEdsAgentInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportEdsAgentInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReportSessionStatusRequest {
  endUserId?: string(name='EndUserId', example='liming', position='Query'),
  instanceId: string(name='InstanceId', example='i-bp167fcodoa90ixn****', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  sessionChangeTime: long(name='SessionChangeTime', example='1642909143781', minimum=0, maximum=9223372036854775807, position='Query'),
  sessionId: string(name='SessionId', example='2', position='Query'),
  sessionStatus: string(name='SessionStatus', example='SessionLogOn', position='Query'),
}

model ReportSessionStatusResponseBody = {
  requestId?: string(name='RequestId', example='0EE5DE20-25F4-5870-9D56-C259A45B****'),
}

model ReportSessionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportSessionStatusResponseBody(name='body'),
}

async function reportSessionStatus(request: ReportSessionStatusRequest): ReportSessionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportSessionStatus', 'POST', '/', 'json', false, 'json', request);
}

model ResetPasswordRequest {
  clientId: string(name='ClientId', example='95e41934-383e-4c9f-824f-3b93b19b****', position='Query'),
  clientToken?: string(name='ClientToken', example='2f00ab32-a473-4c90-9aae-dd8842ae****', position='Query'),
  email?: string(name='Email', example='a***@example.edu', position='Query'),
  endUserId: string(name='EndUserId', example='liming', position='Query'),
  officeSiteId: string(name='OfficeSiteId', example='cn-hangzhou+dir-899235****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  phone?: string(name='phone', example='1827912****', position='Query'),
}

model ResetPasswordResponseBody = {
  requestId?: string(name='RequestId', example='A00477A5-167F-56D2-A315-EA77E4BD****'),
}

model ResetPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetPasswordResponseBody(name='body'),
}

async function resetPassword(request: ResetPasswordRequest): ResetPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetPassword', 'POST', '/', 'json', false, 'json', request);
}

model ResetSnapshotRequest {
  clientId: string(name='ClientId', example='b9d8ddfd-65d4-4857-9e97-56477d1f****', position='Query'),
  loginToken: string(name='LoginToken', example='v1fdef51b727aa91d6c881658978508114d3f5680fa99a66b2a631d17d5bb4860cccf1173be24d77d5ef1423c83aea****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', example='05182b8c-bb0d-49d3-963c-ee63a507****', position='Query'),
  snapshotId: string(name='SnapshotId', example='s-2zeipxmnhej803x7****', position='Query'),
}

model ResetSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetSnapshotResponseBody(name='body'),
}

async function resetSnapshot(request: ResetSnapshotRequest): ResetSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model SendTokenCodeRequest {
  clientId: string(name='ClientId', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  clientOS?: string(name='ClientOS', example='Windows_NT 10.0.18363 x64', position='Query'),
  clientVersion?: string(name='ClientVersion', example='2.1.0-R-20210731.151756', position='Query'),
  endUserId?: string(name='EndUserId', example='alice', position='Query'),
  loginToken?: string(name='LoginToken', example='v28101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-2925105532', position='Query'),
  sessionId?: string(name='SessionId', example='cd45e873-650d-4d70-acb9-f996187a****', position='Query'),
  tokenCode?: string(name='TokenCode', example='63****', position='Query'),
}

model SendTokenCodeResponseBody = {
  requestId?: string(name='RequestId', example='134BD0B2-B848-5743-9CE2-C1FD3D5F****'),
}

model SendTokenCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTokenCodeResponseBody(name='body'),
}

async function sendTokenCode(request: SendTokenCodeRequest): SendTokenCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendTokenCode', 'POST', '/', 'json', false, 'json', request);
}

model SetFingerPrintTemplateRequest {
  clientId: string(name='ClientId', example='347431a9-90f6-448e-82c4-42bc84a9****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', example='testDescription', position='Query'),
  encryptedFingerPrintTemplate?: string(name='EncryptedFingerPrintTemplate', example='AAAAAAAAAAAAAA', position='Query'),
  encryptedKey?: string(name='EncryptedKey', example='drjfspchj', position='Query'),
  fingerPrintTemplate?: string(name='FingerPrintTemplate', example='goG3gG8AAABhujtscn', position='Query'),
  loginToken: string(name='LoginToken', example='v11c73e7af0cb43ff39301651142485099ffb447085d76c4147519dbaa21c3bd90d53045e327c1f525ee6331c52556****', position='Query'),
  password: string(name='Password', example='As53328794', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId: string(name='SessionId', example='8b42538a-246e-45a1-95ea-e5c65b09****', position='Query'),
}

model SetFingerPrintTemplateResponseBody = {
  encryptedPassword?: string(name='EncryptedPassword', example='0711abb9-4cf8-41b2-9d0e-b51209468631;da4VFPNxwY3CZegFjOrCNw==;iHp2l9/qGcfD4tWx7jZIZQ=='),
  index?: int32(name='Index', example='1'),
  requestId?: string(name='RequestId', example='CDE666EA-4FCD-5024-895C-8698E3D3****'),
}

model SetFingerPrintTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetFingerPrintTemplateResponseBody(name='body'),
}

async function setFingerPrintTemplate(request: SetFingerPrintTemplateRequest): SetFingerPrintTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetFingerPrintTemplate', 'POST', '/', 'json', false, 'json', request);
}

model SetFingerPrintTemplateDescriptionRequest {
  clientId: string(name='ClientId', example='0764064c-1609-4d3c-8cb7-ab8d3feg****', position='Query'),
  clientToken?: string(name='ClientToken', example='40401e62-5caf-4508-8de7-bf98af12****', position='Query'),
  description: string(name='Description', example='Finger 1', position='Query'),
  index: int32(name='Index', example='1', position='Query'),
  loginToken: string(name='LoginToken', example='v14e5a2404c495249f7541646535779667ea0b5d87754b5d2d2a3099bda774f3832e24756ef3e66eb574b1f3e99078****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId: string(name='SessionId', example='d28520d4-da0b-4a97-981d-683db865****', position='Query'),
}

model SetFingerPrintTemplateDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='BBD7DFD1-A5DE-51D9-8FD6-3BF54EF4****'),
}

model SetFingerPrintTemplateDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetFingerPrintTemplateDescriptionResponseBody(name='body'),
}

async function setFingerPrintTemplateDescription(request: SetFingerPrintTemplateDescriptionRequest): SetFingerPrintTemplateDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetFingerPrintTemplateDescription', 'POST', '/', 'json', false, 'json', request);
}

model StartDesktopsRequest {
  clientId: string(name='ClientId', description='The ID of the Alibaba Cloud Workspace client (hereinafter referred to as WUYING client). The system generates a unique ID for each client.', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  clientOS?: string(name='ClientOS', description='The operating system (OS) of the device that run the client.', example='Windows_NT 10.0.18363 x64', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='21e7be12-aa4f-4389-b3e1-82f4a1b5****', position='Query'),
  clientVersion?: string(name='ClientVersion', description='The client version. If you use a WUYING client, you can click **About** on the client logon page to view the version of the client.', example='2.1.0-R-20210731.151756', position='Query'),
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify the IDs of 1 to 20 cloud computers.', example='ecd-cg27ufmapab08****', position='Query'),
  loginToken: string(name='LoginToken', description='The logon token.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the regions supported by WUYING Workspace.', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', description='The session ID.', example='cd45e873-650d-4d70-acb9-f996187a****', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the client.', example='71F6A700735E74A61161A53F0C47****', position='Query'),
}

model StartDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StartDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDesktopsResponseBody(name='body'),
}

/**
  * The cloud computers that you want to start must be in the Stopped state. After you call this operation, the cloud computers enter the Running state.
  *
 */
async function startDesktops(request: StartDesktopsRequest): StartDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDesktops', 'POST', '/', 'json', false, 'json', request);
}

model StartRecordContentRequest {
  clientId: string(name='ClientId', position='Query'),
  clientOS?: string(name='ClientOS', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  desktopId: string(name='DesktopId', position='Query'),
  filePath?: string(name='FilePath', position='Query'),
  loginToken: string(name='LoginToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sessionId: string(name='SessionId', position='Query'),
}

model StartRecordContentResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartRecordContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartRecordContentResponseBody(name='body'),
}

async function startRecordContent(request: StartRecordContentRequest): StartRecordContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRecordContent', 'POST', '/', 'json', false, 'json', request);
}

model StopDesktopsRequest {
  clientId: string(name='ClientId', description='The client ID. The system generates a unique ID for each client.', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  clientOS?: string(name='ClientOS', description='The operating system (OS) of the device that runs the Alibaba Cloud Workspace client (hereinafter referred to as WUYING client).', example='Windows_NT 10.0.18363 x64', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How do I ensure the idempotence of a request?](~~25693~~)', example='6ce412a8-399f-49f9-9518-66ee028a****', position='Query'),
  clientVersion?: string(name='ClientVersion', description='The client version. If you use a WUYING client, you can view the client version in the **About** dialog box on the client logon page.', example='2.1.0-R-20210731.151756', position='Query'),
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify the IDs of 1 to 20 cloud computers.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  loginToken?: string(name='LoginToken', description='The logon token.', example='v18101ac6a9e69c66b04a163031680463660b4b216cd758f34b60b9ad6a7c7f7334b83dd8f75eef4209c68f9f1080b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the regions supported by WUYING Workspace.', example='cn-hangzhou', position='Query'),
  sessionId?: string(name='SessionId', description='The session ID.', example='cd45e873-650d-4d70-acb9-f996187a****', position='Query'),
  sessionToken?: string(name='SessionToken', description='The logon token.', example='04b7b80a0b020715c5c1b4175fc4771698****9e2a759557a4624665fd53ae40', position='Query'),
}

model StopDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StopDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDesktopsResponseBody(name='body'),
}

/**
  * The cloud computers that you want to stop must be in the Running state. After you call this operation, the cloud computers enter the Stopped state.
  *
 */
async function stopDesktops(request: StopDesktopsRequest): StopDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDesktops', 'POST', '/', 'json', false, 'json', request);
}

model StopRecordContentRequest {
  clientId: string(name='ClientId', position='Query'),
  clientOS?: string(name='ClientOS', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  desktopId: string(name='DesktopId', position='Query'),
  loginToken: string(name='LoginToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sessionId: string(name='SessionId', position='Query'),
}

model StopRecordContentResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopRecordContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopRecordContentResponseBody(name='body'),
}

async function stopRecordContent(request: StopRecordContentRequest): StopRecordContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRecordContent', 'POST', '/', 'json', false, 'json', request);
}

model UnbindUserDesktopRequest {
  clientId: string(name='ClientId', example='58f96f67-7944-4f97-9342-****', position='Query'),
  clientType?: string(name='ClientType', example='windows', position='Query'),
  force?: boolean(name='Force', example='true', position='Query'),
  loginToken: string(name='LoginToken', example='v12307f5e0****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sessionId: string(name='SessionId', example='3b053331-dc98-43d8-b247-****', position='Query'),
  userDesktopId: string(name='UserDesktopId', example='ud-sdfs****', position='Query'),
}

model UnbindUserDesktopResponseBody = {
  requestId?: string(name='RequestId', example='D5B7CF35-E078-5EBF-A010-****'),
}

model UnbindUserDesktopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindUserDesktopResponseBody(name='body'),
}

async function unbindUserDesktop(request: UnbindUserDesktopRequest): UnbindUserDesktopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindUserDesktop', 'POST', '/', 'json', false, 'json', request);
}

model VerifyCredentialRequest {
  clientId: string(name='ClientId', example='d0b95762-0541-4b53-a0e4-7ed09f39****', position='Query'),
  credential: string(name='Credential', example='123456789cyG', position='Query'),
  credentialType?: string(name='CredentialType', example='Password', position='Query'),
  encryptedKey?: string(name='EncryptedKey', example='drjfs****', position='Query'),
  loginToken: string(name='LoginToken', example='v1f5772a1c60dbea9fd8e1648567079018086448d234b5bc8e30bec0ba6e80c41c767c4dd0db51e9e5c4e0f111431a****', position='Query'),
  officeSiteId: string(name='OfficeSiteId', example='cn-shanghai+dir-227468****', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  sessionId?: string(name='SessionId', example='eb17af2e-1dd6-4cc4-a3ee-3a14d0d7****', position='Query'),
}

model VerifyCredentialResponseBody = {
  requestId?: string(name='RequestId', example='D5F0BDFB-A229-5F1D-B790-33709D43****'),
}

model VerifyCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyCredentialResponseBody(name='body'),
}

async function verifyCredential(request: VerifyCredentialRequest): VerifyCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyCredential', 'POST', '/', 'json', false, 'json', request);
}

