/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'wss';
  @version = '2021-12-21';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeDeliveryAddressRequest {
}

model DescribeDeliveryAddressResponseBody = {
  addresses?: [ 
    {
      area?: {
        areaId?: long(name='AreaId', example='33****'),
        areaName?: string(name='AreaName'),
      }(name='Area'),
      city?: {
        cityId?: long(name='CityId', example='33****'),
        cityName?: string(name='CityName'),
      }(name='City'),
      contacts?: string(name='Contacts', example='Alice'),
      defaultAddress?: boolean(name='DefaultAddress', example='true'),
      detail?: string(name='Detail'),
      mobile?: string(name='Mobile', example='1381111****'),
      postalCode?: string(name='PostalCode', example='03****'),
      province?: {
        provinceId?: long(name='ProvinceId', example='330000'),
        provinceName?: string(name='ProvinceName'),
      }(name='Province'),
      town?: {
        townId?: long(name='TownId', example='3001****'),
        townName?: string(name='TownName'),
      }(name='Town'),
    }
  ](name='Addresses'),
  requestId?: string(name='RequestId', example='72481C12-69AB-5CE1-8A35-A8EFA921****'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model DescribeDeliveryAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeliveryAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDeliveryAddress  DescribeDeliveryAddressRequest
  * @return DescribeDeliveryAddressResponse
 */
async function describeDeliveryAddress(request: DescribeDeliveryAddressRequest): DescribeDeliveryAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeliveryAddress', 'POST', '/', 'json', false, 'json', request);
}

model DescribePackageDeductionsRequest {
  endTime?: long(name='EndTime', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  packageIds?: [ string ](name='PackageIds', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', maximum=100, position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='CorePackage', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribePackageDeductionsResponseBody = {
  deductions?: [ 
    {
      cpu?: int32(name='Cpu', example='4'),
      desktopId?: string(name='DesktopId', example='ecd-6wye9optu0kag****'),
      desktopName?: string(name='DesktopName', example='DemoComputer'),
      desktopType?: string(name='DesktopType', example='eds.enterprise_office.4c8g'),
      endTime?: string(name='EndTime', example='2024-07-31T03:00Z'),
      instanceState?: string(name='InstanceState', example='Deleted'),
      memory?: long(name='Memory', example='8192'),
      osType?: string(name='OsType', example='Windows'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType'),
      staTime?: string(name='StaTime', example='2024-07-31T02:00Z'),
      usedCoreTime?: float(name='UsedCoreTime', example='4.0'),
      usedTime?: long(name='UsedTime', example='3600'),
    }
  ](name='Deductions'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  requestId?: string(name='RequestId', example='833C4D2C-09C7-5CE6-8159-06758B964970'),
  totalCount?: long(name='TotalCount', example='100'),
  totalUsedCoreTime?: float(name='TotalUsedCoreTime'),
  totalUsedTime?: long(name='TotalUsedTime'),
}

model DescribePackageDeductionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePackageDeductionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePackageDeductions  DescribePackageDeductionsRequest
  * @return DescribePackageDeductionsResponse
 */
async function describePackageDeductions(request: DescribePackageDeductionsRequest): DescribePackageDeductionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePackageDeductions', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstancePropertiesRequest {
  instanceId?: string(name='InstanceId', example='mdp-0c62ayep0nk4v****', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  key?: string(name='Key', example='PackageUsedUpStrategy', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='DurationPackage', position='Query'),
  value?: string(name='Value', example='Postpaid', position='Query'),
}

model ModifyInstancePropertiesResponseBody = {
  requestId?: string(name='RequestId', example='833C4D2C-09C7-5CE6-8159-06758B964970'),
}

model ModifyInstancePropertiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstancePropertiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceProperties  ModifyInstancePropertiesRequest
  * @return ModifyInstancePropertiesResponse
 */
async function modifyInstanceProperties(request: ModifyInstancePropertiesRequest): ModifyInstancePropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceProperties', 'POST', '/', 'json', false, 'json', request);
}

