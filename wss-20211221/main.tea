/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('wss', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateOrderRequest {
  aliUid?: long(name='AliUid'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
}

model CreateOrderResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderResponseBody(name='body'),
}

async function createOrderWithOptions(request: CreateOrderRequest, runtime: Util.RuntimeOptions): CreateOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrder',
    version = '2021-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderWithOptions(request, runtime);
}

model DescribePriceRequest {
  amount?: int32(name='Amount'),
  coreType?: string(name='CoreType', description='处理器类型：CPU、GPU'),
  instanceType?: string(name='InstanceType', description='资源对应的实例规格'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected'),
        }
      ](name='Promotions'),
      tradePrice?: float(name='TradePrice'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.coreType)) {
    query['CoreType'] = request.coreType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrice',
    version = '2021-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model StartBillingRequest {
  aliUid?: long(name='AliUid'),
  instanceId?: string(name='InstanceId'),
  module?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Module'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
}

model StartBillingResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartBillingResponse = {
  headers: map[string]string(name='headers'),
  body: StartBillingResponseBody(name='body'),
}

async function startBillingWithOptions(request: StartBillingRequest, runtime: Util.RuntimeOptions): StartBillingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.module)) {
    query['Module'] = request.module;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartBilling',
    version = '2021-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startBilling(request: StartBillingRequest): StartBillingResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBillingWithOptions(request, runtime);
}

model StopBillingRequest {
  aliUid?: long(name='AliUid'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
}

model StopBillingResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopBillingResponse = {
  headers: map[string]string(name='headers'),
  body: StopBillingResponseBody(name='body'),
}

async function stopBillingWithOptions(request: StopBillingRequest, runtime: Util.RuntimeOptions): StopBillingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopBilling',
    version = '2021-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopBilling(request: StopBillingRequest): StopBillingResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopBillingWithOptions(request, runtime);
}

