/**
 *
 */
import Util;
import GatewayClient;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @productId = 'wss';
  var gatewayClient = new GatewayClient();
  @spi = gatewayClient;
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('wss', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeDeliveryAddressResponseBody = {
  addresses?: [ 
    {
      area?: {
        areaId?: long(name='AreaId', example='33****'),
        areaName?: string(name='AreaName'),
      }(name='Area'),
      city?: {
        cityId?: long(name='CityId', example='33****'),
        cityName?: string(name='CityName'),
      }(name='City'),
      contacts?: string(name='Contacts', example='Alice'),
      defaultAddress?: boolean(name='DefaultAddress', example='true'),
      detail?: string(name='Detail'),
      mobile?: string(name='Mobile', example='1381111****'),
      postalCode?: string(name='PostalCode', example='03****'),
      province?: {
        provinceId?: long(name='ProvinceId', example='330000'),
        provinceName?: string(name='ProvinceName'),
      }(name='Province'),
      town?: {
        townId?: long(name='TownId', example='3001****'),
        townName?: string(name='TownName'),
      }(name='Town'),
    }
  ](name='Addresses'),
  requestId?: string(name='RequestId', example='72481C12-69AB-5CE1-8A35-A8EFA921****'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model DescribeDeliveryAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeliveryAddressResponseBody(name='body'),
}

/**
 * @param request DescribeDeliveryAddressRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDeliveryAddressResponse
 */
async function describeDeliveryAddressWithOptions(runtime: Util.RuntimeOptions): DescribeDeliveryAddressResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeDeliveryAddress',
    version = '2021-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @return DescribeDeliveryAddressResponse
 */
async function describeDeliveryAddress(): DescribeDeliveryAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeliveryAddressWithOptions(runtime);
}

model DescribePackageDeductionsRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  packageIds?: [ string ](name='PackageIds'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='CorePackage'),
}

model DescribePackageDeductionsResponseBody = {
  deductions?: [ 
    {
      cpu?: int32(name='Cpu', example='4'),
      desktopId?: string(name='DesktopId', example='ecd-6wye9optu0kag****'),
      desktopName?: string(name='DesktopName', example='DemoComputer'),
      desktopType?: string(name='DesktopType', example='eds.enterprise_office.4c8g'),
      endTime?: string(name='EndTime', example='2024-07-31T03:00Z'),
      instanceState?: string(name='InstanceState', example='Deleted'),
      memory?: long(name='Memory', example='8192'),
      osType?: string(name='OsType', example='Windows'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType'),
      staTime?: string(name='StaTime', example='2024-07-31T02:00Z'),
      usedCoreTime?: float(name='UsedCoreTime', example='4.0'),
      usedTime?: long(name='UsedTime', example='3600'),
    }
  ](name='Deductions'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  requestId?: string(name='RequestId', example='833C4D2C-09C7-5CE6-8159-06758B964970'),
  totalCount?: long(name='TotalCount', example='100'),
}

model DescribePackageDeductionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePackageDeductionsResponseBody(name='body'),
}

/**
 * @summary 查询核时包抵扣明细
 *
 * @param request DescribePackageDeductionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePackageDeductionsResponse
 */
async function describePackageDeductionsWithOptions(request: DescribePackageDeductionsRequest, runtime: Util.RuntimeOptions): DescribePackageDeductionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.packageIds)) {
    query['PackageIds'] = request.packageIds;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePackageDeductions',
    version = '2021-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 查询核时包抵扣明细
 *
 * @param request DescribePackageDeductionsRequest
 * @return DescribePackageDeductionsResponse
 */
async function describePackageDeductions(request: DescribePackageDeductionsRequest): DescribePackageDeductionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackageDeductionsWithOptions(request, runtime);
}

