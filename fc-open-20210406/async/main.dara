/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'FC-Open';
  @version = '2021-04-06';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'account-id.ap-northeast-1.fc.aliyuncs.com',
    ap-south-1 = 'account-id.ap-south-1.fc.aliyuncs.com',
    ap-southeast-1 = 'account-id.ap-southeast-1.fc.aliyuncs.com',
    ap-southeast-2 = 'account-id.ap-southeast-2.fc.aliyuncs.com',
    ap-southeast-3 = 'account-id.ap-southeast-3.fc.aliyuncs.com',
    ap-southeast-5 = 'account-id.ap-southeast-5.fc.aliyuncs.com',
    cn-beijing = 'account-id.cn-beijing.fc.aliyuncs.com',
    cn-chengdu = 'account-id.cn-chengdu.fc.aliyuncs.com',
    cn-hangzhou = 'account-id.cn-hangzhou.fc.aliyuncs.com',
    cn-hangzhou-finance = 'account-id.cn-hangzhou-finance.fc.aliyuncs.com',
    cn-hongkong = 'account-id.cn-hongkong.fc.aliyuncs.com',
    cn-huhehaote = 'account-id.cn-huhehaote.fc.aliyuncs.com',
    cn-north-2-gov-1 = 'account-id.cn-north-2-gov-1.fc.aliyuncs.com',
    cn-qingdao = 'account-id.cn-qingdao.fc.aliyuncs.com',
    cn-shanghai = 'account-id.cn-shanghai.fc.aliyuncs.com',
    cn-shenzhen = 'account-id.cn-shenzhen.fc.aliyuncs.com',
    cn-zhangjiakou = 'account-id.cn-zhangjiakou.fc.aliyuncs.com',
    eu-central-1 = 'account-id.eu-central-1.fc.aliyuncs.com',
    eu-west-1 = 'account-id.eu-west-1.fc.aliyuncs.com',
    us-east-1 = 'account-id.us-east-1.fc.aliyuncs.com',
    us-west-1 = 'account-id.us-west-1.fc.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AccelerationInfo {
  status?: string(name='status', description='镜像加速状态，取值 Preparing 或 Ready', example='Preparing'),
}

model AsyncConfigMeta {
  functionName?: string(name='functionName', description='异步配置所属函数名称。', example='functionName'),
  qualifier?: string(name='qualifier', description='异步配置所属服务版本/别名。', example='LATEST'),
  serviceName?: string(name='serviceName', description='异步配置所属服务名称。', example='serviceName'),
}

model AvailableAZ {
  availableAZs?: string(name='availableAZs', description='az'),
}

model CDNEventsTriggerConfig {
  eventName?: string(name='eventName', description='eventName'),
  eventVersion?: string(name='eventVersion', description='eventVersion'),
  filter?: map[string][ string ](name='filter', description='filter'),
  notes?: string(name='notes', description='notes'),
}

model CertConfig {
  certName?: string(name='certName', description='证书名称'),
  certificate?: string(name='certificate', description='证书，如果是证书链则依次填写多个证书', example='-----BEGIN CERTIFICATE----- xxxxx -----END CERTIFICATE-----'),
  privateKey?: string(name='privateKey', description='私钥', example='-----BEGIN RSA PRIVATE KEY----- xxxxx -----END RSA PRIVATE KEY-----'),
}

model Code {
  ossBucketName?: string(name='ossBucketName', description='函数代码包的OSS bucket name', example='demo-bucket'),
  ossObjectName?: string(name='ossObjectName', description='函数代码包的OSS对象名', example='demo-key'),
  zipFile?: string(name='zipFile', description='直接在request body中上传code zip包的base64编码', example='cHJpbnQoImhlbGxvIHdvcmxkIikK'),
}

model CustomContainerConfig {
  accelerationType?: string(name='accelerationType', description='镜像加速类型，取值Default为开启加速，None为关闭加速，默认开启', example='Default'),
  args?: string(name='args', description='容器启动参数', example='["-arg1", "value1"]'),
  command?: string(name='command', description='容器启动命令，等同于 Docker ENTRYPOINT', example='["/code/myserver"]'),
  image?: string(name='image', description='容器镜像地址，实例值： registry-vpc.cn-hangzhou.aliyuncs.com/fc-demo/helloworld:v1beta1', example='registry-vpc.cn-hangzhou.aliyuncs.com/fc-demo/helloworld:v1beta1'),
  instanceID?: string(name='instanceID', description='ACR企业版镜像仓库ID，使用ACR企业版镜像时须传入', example='cri-xxxxxxxxxx'),
  webServerMode?: boolean(name='webServerMode', description='镜像运行是否为Web Server模式，取值true需要在容器镜像中实现Web Server来监听端口并处理请求，取值false需要容器运行后主动退出进程，并且ExitCode需要为0。默认true', example='true'),
}

model CustomContainerConfigInfo {
  accelerationInfo?: AccelerationInfo(name='accelerationInfo'),
  accelerationType?: string(name='accelerationType', description='镜像加速类型，取值Default为开启加速，None为关闭加速，默认开启', example='Default'),
  args?: string(name='args', description='容器启动参数', example='["-arg1", "value1"]'),
  command?: string(name='command', description='容器启动命令，等同于 Docker ENTRYPOINT', example='["/code/myserver"]'),
  image?: string(name='image', description='容器镜像地址，实例值： registry-vpc.cn-hangzhou.aliyuncs.com/fc-demo/helloworld:v1beta1', example='registry-vpc.cn-hangzhou.aliyuncs.com/fc-demo/helloworld:v1beta1'),
  instanceID?: string(name='instanceID', description='ACR企业版镜像仓库ID，使用ACR企业版镜像时须传入', example='cri-xxxxxxxxxx'),
  webServerMode?: boolean(name='webServerMode', description='镜像运行是否为Web Server模式，取值true需要在容器镜像中实现Web Server来监听端口并处理请求，取值false需要容器运行后主动退出进程，并且ExitCode需要为0。默认true', example='true'),
}

model CustomDNS {
  dnsOptions?: [
    DNSOption
  ](name='dnsOptions', description='DNS resolver 配置参数列表'),
  nameServers?: [ string ](name='nameServers', description='DNS 服务器的 IP 地址列表'),
  searches?: [ string ](name='searches', description='DNS 搜索域的列表'),
}

model CustomHealthCheckConfig {
  failureThreshold?: int32(name='failureThreshold', description='健康检查失败次数阈值，达到该值后系统认为检查失败'),
  httpGetUrl: string(name='httpGetUrl', description='容器自定义健康检查URL地址'),
  initialDelaySeconds?: int32(name='initialDelaySeconds', description='容器启动到发起健康检查的延迟'),
  periodSeconds?: int32(name='periodSeconds', description='健康检查周期'),
  successThreshold?: int32(name='successThreshold', description='健康检查成功次数阈值，达到该值后系统认为检查成功'),
  timeoutSeconds?: int32(name='timeoutSeconds', description='健康检查超时时间'),
}

model CustomRuntimeConfig {
  args?: [ string ](name='args', description='启动入口命令接收的参数'),
  command?: [ string ](name='command', description='启动入口命令'),
}

model DNSOption {
  name: string(name='name', description='DNS option 名称', example='ndots'),
  value?: string(name='value', description='DNS option 值', example='2'),
}

model Destination {
  destination?: string(name='destination', description='destination'),
}

model DestinationConfig {
  onFailure?: Destination(name='onFailure'),
  onSuccess?: Destination(name='onSuccess'),
}

model Error {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息描述'),
}

model ErrorInfo {
  errorMessage?: string(name='errorMessage', description='错误信息'),
  stackTrace?: string(name='stackTrace', description='错误堆栈'),
}

model EventBridgeTriggerConfig {
  asyncInvocationType?: boolean(name='asyncInvocationType', description='asyncInvocationType'),
  eventRuleFilterPattern: string(name='eventRuleFilterPattern', description='eventRuleFilterPattern'),
  eventSourceConfig: EventSourceConfig(name='eventSourceConfig'),
  triggerEnable?: boolean(name='triggerEnable', description='triggerEnable'),
}

model EventSourceConfig {
  eventSourceParameters?: EventSourceParameters(name='eventSourceParameters'),
  eventSourceType: string(name='eventSourceType', description='eventSourceType'),
}

model EventSourceParameters {
  sourceMNSParameters?: SourceMNSParameters(name='sourceMNSParameters'),
  sourceRabbitMQParameters?: SourceRabbitMQParameters(name='sourceRabbitMQParameters'),
  sourceRocketMQParameters?: SourceRocketMQParameters(name='sourceRocketMQParameters'),
}

model HTTPTriggerConfig {
  authType?: string(name='authType', description='认证类型', example='anonymous, function'),
  disableURLInternet?: boolean(name='disableURLInternet', description='禁用默认公网域名访问的开关，设置为true 时，访问函数默认提供的公网URL地址会返回403错误。设置为 false 则不会有任何影响。'),
  methods?: [ string ](name='methods', description='允许的HTTP方法列表'),
}

model InstanceLifecycleConfig {
  preFreeze?: LifecycleHook(name='preFreeze'),
  preStop?: LifecycleHook(name='preStop'),
}

model JaegerConfig {
  endpoint?: string(name='endpoint', description='endpoint'),
}

model JobConfig {
  maxRetryTime?: long(name='maxRetryTime', description='maxRetryTime'),
  triggerInterval?: long(name='triggerInterval', description='triggerInterval'),
}

model JobLogConfig {
  logstore?: string(name='logstore', description='logstore'),
  project?: string(name='project', description='project'),
}

model Layer {
  acl?: int32(name='acl', description='层访问类型'),
  arn?: string(name='arn', description='arn'),
  arnV2?: string(name='arnV2', description='arnV2'),
  code?: LayerCode(name='code', description='层代码'),
  codeChecksum?: string(name='codeChecksum', description='层Checksum'),
  codeSize?: long(name='codeSize', description='层代码大小'),
  compatibleRuntime?: [ string ](name='compatibleRuntime', description='compatibleRuntime'),
  createTime?: string(name='createTime', description='层创建时间'),
  description?: string(name='description', description='层描述'),
  layerName?: string(name='layerName', description='层名称'),
  license?: string(name='license', description='许可协议'),
  version?: int32(name='version', description='层版本'),
}

model LayerCode {
  location?: string(name='location', description='层代码位置', example='仅在查询具体层版本时返回'),
  repositoryType?: string(name='repositoryType', description='层代码类型'),
}

model LifecycleHook {
  handler?: string(name='handler', description='handler name'),
  timeout?: int32(name='timeout', description='timeout in second'),
}

model LogConfig {
  enableInstanceMetrics?: boolean(name='enableInstanceMetrics', description='开启实例级别指标', example='true'),
  enableRequestMetrics?: boolean(name='enableRequestMetrics', description='开启请求级别指标', example='true'),
  logBeginRule?: string(name='logBeginRule', description='日志切分规则', example='DefaultRegex'),
  logstore?: string(name='logstore', description='日志库', example='test-prj'),
  project?: string(name='project', description='日志项目', example='test-logstore'),
}

model LogTriggerConfig {
  enable?: boolean(name='enable', description='enable'),
  functionParameter?: map[string]string(name='functionParameter', description='functionParameter'),
  jobConfig?: JobConfig(name='jobConfig'),
  logConfig?: JobLogConfig(name='logConfig'),
  sourceConfig?: SourceConfig(name='sourceConfig'),
}

model MeteringConfig {
  logConfig?: LogConfig(name='logConfig', description='日志仓库'),
  payerId?: string(name='payerId', description='支付用户'),
  role?: string(name='role', description='权限'),
}

model MnsTopicTriggerConfig {
  filterTag?: string(name='filterTag', description='filterTag'),
  notifyContentFormat?: string(name='notifyContentFormat', description='notifyContentFormat'),
  notifyStrategy?: string(name='notifyStrategy', description='notifyStrategy'),
}

model NASConfig {
  groupId?: int32(name='groupId', description='groupID', example='100'),
  mountPoints?: [ 
    {
      enableTLS?: boolean(name='enableTLS', description='使用传输加密方式挂载', example='false'),
      mountDir?: string(name='mountDir', description='本地挂载目录', example='/home/test'),
      serverAddr?: string(name='serverAddr', description='NAS服务器地址', example='***-uni85.cn-hangzhou.nas.aliyuncs.com:/'),
    }
  ](name='mountPoints', description='挂载点'),
  userId?: int32(name='userId', description='userID', example='100'),
}

model OSSMountConfig {
  mountPoints?: [ 
    {
      bucketName?: string(name='bucketName', description='挂载的OSS bucket', example='my-bucket'),
      bucketPath?: string(name='bucketPath', description='挂载的OSS bucket路径', example='/my-dir'),
      endpoint?: string(name='endpoint', description='OSS访问地址', example='http://oss-cn-shanghai.aliyuncs.com'),
      mountDir?: string(name='mountDir', description='挂载目录', example='/mnt/dir'),
      readOnly?: boolean(name='readOnly', description='是否只读', example='true'),
    }
  ](name='mountPoints', description='OSS挂载点配置'),
}

model OSSTriggerConfig {
  events?: [ string ](name='events', description='events'),
  filter?: OSSTriggerFilter(name='filter'),
}

model OSSTriggerFilter {
  key?: OSSTriggerKey(name='key'),
}

model OSSTriggerKey {
  prefix?: string(name='prefix', description='prefix'),
  suffix?: string(name='suffix', description='suffix'),
}

model OnDemandConfig {
  maximumInstanceCount?: long(name='maximumInstanceCount', description='todo', example='10'),
  resource?: string(name='resource', description='函数详情', example='services/serviceName/function/functionName'),
}

model OpenReservedCapacity {
  createdTime?: string(name='createdTime', description='createdTime'),
  cu?: long(name='cu', description='cu'),
  deadline?: string(name='deadline', description='deadline'),
  instanceId?: string(name='instanceId', description='instanceId'),
  isRefunded?: string(name='isRefunded', description='isRefunded'),
  lastModifiedTime?: string(name='lastModifiedTime', description='lastModifiedTime'),
}

model OutputCodeLocation {
  location?: string(name='location', description='location'),
  repositoryType?: string(name='repositoryType', description='repositoryType'),
}

model PathConfig {
  functionName?: string(name='functionName', description='该路径/方法对应的函数名称', example='f1'),
  methods?: [ string ](name='methods', description='请求方法，不填表示当前路径的所有方法匹配同一函数'),
  path?: string(name='path', description='请求路径', example='/login'),
  qualifier?: string(name='qualifier', description='该路径/方法对应服务的版本/别名', example='prod'),
  rewriteConfig?: RewriteConfig(name='rewriteConfig', description='URI重写配置'),
  serviceName?: string(name='serviceName', description='该路径/方法对应的服务名称', example='s1'),
}

model PolicyItem {
  key: bytes(name='key', description='key指定控制流量灰度的字段名。 例如key为"x-test-uid"，则请求中"x-test-uid" 字段的值将决定请求是否被路由到灰度版本上', example='x-test-uid'),
  operator: bytes(name='operator', description='operator指定运算符。  将请求中由参数key指定的字段的实际值和参数 value 指定的值，按指定的运算符进行比较。  取值：    ● >, <, >=, <=, = 和 != ，大小比较规则遵循字典序；  ● in ：字符串包含关系；  ●  percent: 百分比值（取值范围 (0,100] 的整数)  表示根据请求中指定字段key对应的实际值分布，按百分比灰度。其中字段由参数key指定，百分比值由参数 value 指定 。 例如一条 { type=Header, key=uid, value=20, operator=percent } 的规则，表示根据请求 header 中字段 uid 的值的分布，其中 20% 的请求路由到灰度版本上。', example='='),
  type: bytes(name='type', description='参数类型。可以取HTTP请求中的有关值。', example='Header'),
  value: bytes(name='value', description='value指定控制流量灰度的字段值。 请求中由参数key指定的字段实际值会和参数value字段值，按指定的运算符进行比较，决定请求是否被路由到灰度版本上', example='11111'),
}

model PreFreeze {
  handler?: string(name='handler', description='preFreeze handler name', example='index.preFreeze'),
  timeout?: int32(name='timeout', description='handler timeout', example='10'),
}

model PreStop {
  handler?: string(name='handler', description='PreStop handler', example='index.PreStop'),
  timeout?: int32(name='timeout', description='PreStop hander timeout', example='10'),
}

model RdsTriggerConfig {
  concurrency?: long(name='concurrency', description='concurrency'),
  eventFormat?: string(name='eventFormat', description='eventFormat'),
  retry?: long(name='retry', description='retry'),
  subscriptionObjects?: [ string ](name='subscriptionObjects', description='subscriptionObjects'),
}

model Resource {
  resourceArn?: string(name='resourceArn', description='resourceArn'),
  tags?: map[string]string(name='tags', description='tags'),
}

model RewriteConfig {
  equalRules?: [ 
    {
      match?: string(name='match', description='匹配规则', example='/old'),
      replacement?: string(name='replacement', description='替换规则', example='/new'),
    }
  ](name='equalRules', description='完全匹配规则'),
  regexRules?: [ 
    {
      match?: string(name='match', description='匹配规则', example='^/js/(.*?)$'),
      replacement?: string(name='replacement', description='替换规则', example='/public/javascripts/$1'),
    }
  ](name='regexRules', description='正则匹配规则'),
  wildcardRules?: [ 
    {
      match?: string(name='match', description='匹配规则', example='/api/*'),
      replacement?: string(name='replacement', description='替换规则', example='/$1'),
    }
  ](name='wildcardRules', description='通配符匹配规则'),
}

model RouteConfig {
  routes?: [
    PathConfig
  ](name='routes', description='routes'),
}

model RoutePolicy {
  condition: bytes(name='condition', description='条件模式：灰度规则项的逻辑运算。 枚举值： AND:  全部灰度规则项满足则命中。 OR: 任意一个灰度规则项满足则命中。', example='AND'),
  policyItems: PolicyItem(name='policyItems', description='灰度规则项数组'),
}

model ScheduledActions {
  endTime?: string(name='endTime', description='endTime'),
  name?: string(name='name', description='name'),
  scheduleExpression?: string(name='scheduleExpression', description='scheduleExpression'),
  startTime?: string(name='startTime', description='startTime'),
  target?: long(name='target', description='target'),
}

model SourceConfig {
  logstore?: string(name='logstore', description='logstore'),
}

model SourceMNSParameters {
  isBase64Decode?: boolean(name='IsBase64Decode', description='IsBase64Decode'),
  queueName: string(name='QueueName', description='QueueName'),
  regionId?: string(name='RegionId', description='RegionId'),
}

model SourceRabbitMQParameters {
  instanceId: string(name='InstanceId', description='InstanceId'),
  queueName: string(name='QueueName', description='QueueName'),
  regionId?: string(name='RegionId', description='RegionId'),
  virtualHostName: string(name='VirtualHostName', description='VirtualHostName'),
}

model SourceRocketMQParameters {
  groupID: string(name='GroupID', description='GroupID'),
  instanceId: string(name='InstanceId', description='InstanceId'),
  offset?: string(name='Offset', description='Offset'),
  regionId?: string(name='RegionId', description='RegionId'),
  tag?: string(name='Tag', description='Tag'),
  timestamp?: long(name='Timestamp', description='Timestamp'),
  topic: string(name='Topic', description='Topic'),
}

model StatefulAsyncInvocation {
  alreadyRetriedTimes?: long(name='alreadyRetriedTimes', description='异步任务调用失败后的已重试次数。', example='3'),
  destinationStatus?: string(name='destinationStatus', description='异步任务的目的状态。', example='Succeeded'),
  endTime?: long(name='endTime', description='异步任务的结束时间。', example='1633449599'),
  events?: [
    StatefulAsyncInvocationEvent
  ](name='events', description='异步任务事件列表。'),
  functionName?: string(name='functionName', description='异步任务所属的函数的名称。', example='functionName'),
  instanceId?: string(name='instanceId', description='异步任务的执行实例ID。', example='D4-4BA6-5293-9FD1-882707E'),
  invocationErrorMessage?: string(name='invocationErrorMessage', description='异步任务的错误消息。', example='UnhandledInvocationError'),
  invocationId?: string(name='invocationId', description='异步任务ID。', example='cxxdfd'),
  invocationPayload?: string(name='invocationPayload', description='异步任务的任务触发事件。', example='"body"'),
  qualifier?: string(name='qualifier', description='异步任务所属的服务的别名或版本。', example='LATEST'),
  requestId?: string(name='requestId', description='异步任务的请求ID。', example='ABA740D4-4BA6-5293-9FD1-882707EADC37'),
  serviceName?: string(name='serviceName', description='异步任务所属的服务的名称。', example='serviceName'),
  startedTime?: long(name='startedTime', description='异步任务的开始时间。', example='1633449590'),
  status?: string(name='status', description='异步任务的执行状态。      Enqueued：异步消息已入队，等待处理。      Succeeded：调用执行成功。      Failed：调用执行失败。      Running：调用执行中。      Stopped：调用执行终止。      Stopping：执行停止中。      Invalid：您的执行因函数被删除等原因处于无效状态（任务未被执行）。      Expired：您为任务配置了最长排队等待的期限。该任务因为超期被丢弃（任务未被执行）。      Retrying：异步调用因执行错误重试中。', example='Running'),
}

model StatefulAsyncInvocationEvent {
  eventDetail?: string(name='eventDetail', description='事件详细数据。', example='{"Error":"UnhandledInvocationError"}'),
  eventId?: long(name='eventId', description='事件ID。', example='1'),
  status?: string(name='status', description='事件执行状态。', example='Enqueued'),
  timestamp?: long(name='timestamp', description='事件时间。', example='1647420449721'),
}

model TLSConfig {
  cipherSuites: [ string ](name='cipherSuites', description='TLS加密套件列表'),
  maxVersion?: string(name='maxVersion', description='TLS最大版本号', example='TLSv1.3'),
  minVersion: string(name='minVersion', description='TLS最小版本号', example='TLSv1.0'),
}

model TargetTrackingPolicies {
  endTime?: string(name='endTime', description='endTime'),
  maxCapacity?: long(name='maxCapacity', description='maxCapacity'),
  metricTarget?: double(name='metricTarget', description='metricTarget'),
  metricType?: string(name='metricType', description='metricType'),
  minCapacity?: long(name='minCapacity', description='minCapacity'),
  name?: string(name='name', description='name'),
  startTime?: string(name='startTime', description='startTime'),
}

model TimeTriggerConfig {
  cronExpression?: string(name='cronExpression', description='cronExpression'),
  enable?: boolean(name='enable', description='enable'),
  payload?: string(name='payload', description='payload'),
}

model TracingConfig {
  params: map[string]string(name='params', description='链路追踪参数。当协议类型为 Jaeger 时，参数为 map[string]string，其中 key 为 "endpoint"，value 为您的链路追踪内网接入点。例如 endpoint: http://tracing-analysis-dc-hz.aliyuncs.com/adapt_xxx/api/otlp/traces'),
  type: string(name='type', description='链路追踪协议类型，目前只支持 Jaeger', example='Jaeger'),
}

model Trigger {
  createdTime?: string(name='createdTime', description='created time'),
  domainName?: string(name='domainName', description='domain name'),
  invocationRole?: string(name='invocationRole', description='invocation role'),
  lastModifiedTime?: string(name='lastModifiedTime', description='last modified time'),
  qualifier?: string(name='qualifier', description='qualifier'),
  sourceArn?: string(name='sourceArn', description='source arn'),
  status?: string(name='status', description='status'),
  targetArn?: string(name='targetArn', description='target arn'),
  triggerConfig?: string(name='triggerConfig', description='trigger config'),
  triggerId?: string(name='triggerId', description='trigger Id'),
  triggerName?: string(name='triggerName', description='trigger name', example='abc'),
  triggerType?: string(name='triggerType', description='trigger type'),
  urlInternet?: string(name='urlInternet', description='url Internet'),
  urlIntranet?: string(name='urlIntranet', description='url Intranet'),
}

model VPCConfig {
  role?: string(name='role', description='Role'),
  securityGroupId?: string(name='securityGroupId', description='安全组ID', example='sg-bp18hj1wtxgy3b0***'),
  vSwitchIds?: [ string ](name='vSwitchIds', description='VSwitch ID列表'),
  vpcId?: string(name='vpcId', description='VPC ID', example='vpc-***'),
}

model VendorConfig {
  meteringConfig?: MeteringConfig(name='meteringConfig'),
}

model WAFConfig {
  enableWAF?: boolean(name='enableWAF', description='是否开启Web应用防火墙'),
}

model ClaimGPUInstanceRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='test-trace-id', position='Header'),
  diskPerformanceLevel?: string(name='diskPerformanceLevel', description='The disk performance level of the GPU rendering instance.', example='PL0', position='Body'),
  diskSizeGigabytes?: string(name='diskSizeGigabytes', description='The system disk space of the GPU rendering instance.', example='100', position='Body'),
  imageId: string(name='imageId', description='The image ID of the GPU-rendered instance.', example='m-foobar', position='Body'),
  instanceType: string(name='instanceType', description='The specifications of the GPU rendering instance.', example='ecs.gn7i-c8g1.2xlarge', position='Body'),
  internetBandwidthOut?: string(name='internetBandwidthOut', description='The outbound Internet bandwidth of the GPU rendering instance.', example='100', position='Body'),
  password?: string(name='password', description='The password of the GPU rendering instance.', example='MyPassword', position='Body'),
  role?: string(name='role', description='The role of the user.', example='acs:ram::1234567890:role/fc-test', position='Body'),
  sgId?: string(name='sgId', description='The ID of the security group.', example='sg-xxxx', position='Body'),
  sourceCidrIp: string(name='sourceCidrIp', description='The source IPv4 CIDR block of the GPU rendering instance.', example='0.0.0.0/0', position='Body'),
  tcpPortRange?: [ string ](name='tcpPortRange', description='The range of TCP ports that are open to the security group of the GPU rendering instance.', position='Body'),
  udpPortRange?: [ string ](name='udpPortRange', description='The range of UDP ports that are open to the security group of the GPU rendering instance.', position='Body'),
  vpcId?: string(name='vpcId', description='The ID of the VPC in which the instance resides.', example='v-xxxx', position='Body'),
  vswId?: string(name='vswId', description='The ID of the vSwitch.', example='vsw-xxxx', position='Body'),
}

model ClaimGPUInstanceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the product instance is created.', example='2022-11-11 07:31:04.899465017 +0000 UTC m=+37.671563424'),
  instanceId?: string(name='instanceId', description='The ID of the instance that you query.', example='i-xxx'),
  publicIp?: string(name='publicIp', description='The public IP address of the server.', example='0.0.0.0'),
}

model ClaimGPUInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ClaimGPUInstanceResponseBody(name='body'),
}

async function claimGPUInstance(request: ClaimGPUInstanceRequest): ClaimGPUInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ClaimGPUInstance', 'POST', '/2021-04-06/gpuInstances', 'json', false, 'json', request);
}

model CreateAliasRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='service_name', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r9s89isisi****', position='Header'),
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The canary release version to which the alias points and the weight of the canary release version.

*   The canary release version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.', position='Body'),
  aliasName: string(name='aliasName', description='The name of the alias.  The name contains only letters, digits, hyphens (-), and underscores (\\_). The name must be 1 to 128 characters in length and cannot start with a digit or hyphen (-).  The name cannot be **LATEST**.', example='alias_test', position='Body'),
  description?: string(name='description', description='The description of the alias.', example='test_description', position='Body'),
  resolvePolicy?: string(name='resolvePolicy', description='The canary release mode. Valid values:

*   **Random**: random canary release. This is the default value.
*   **Content**: rule-based canary release.', example='Random', position='Body'),
  routePolicy?: RoutePolicy(name='routePolicy', description='The canary release rule. Traffic that meets the canary release rule is routed to the canary release instance.', position='Body'),
  versionId: string(name='versionId', description='The ID of the version to which the alias points.', example='1', position='Body'),
}

model CreateAliasResponseBody = {
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The canary release version to which the alias points and the weight of the canary release version.

*   The canary release version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.'),
  aliasName?: string(name='aliasName', description='The name of the alias.', example='alias_test'),
  createdTime?: string(name='createdTime', description='The time when the alias was created.', example='2020-04-23T06:32:43Z'),
  description?: string(name='description', description='The description of the alias.', example='test_description'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the alias was last modified.', example='2020-04-23T06:32:43Z'),
  versionId?: string(name='versionId', description='The ID of the version to which the alias points.', example='1'),
}

model CreateAliasResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAliasResponseBody(name='body'),
}

async function createAlias(request: CreateAliasRequest): CreateAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAlias', 'POST', '/2021-04-06/services/{serviceName}/aliases', 'json', false, 'json', request);
}

model CreateCustomDomainRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.', position='Body'),
  domainName: string(name='domainName', description='The domain name.
Enter a custom domain name that has obtained an ICP filing in the Alibaba Cloud ICP Filing system, or a custom domain name whose ICP filing information includes Alibaba Cloud as a service provider.', example='example.com', position='Body'),
  protocol?: string(name='protocol', description='The protocol types supported by the domain name. Valid values:

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP', position='Body'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.', position='Body'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.', position='Body'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.', position='Body'),
}

model CreateCustomDomainResponseBody = {
  accountId?: string(name='accountId', description='The ID of your Alibaba Cloud account.', example='1986114****4305'),
  apiVersion?: string(name='apiVersion', description='The version of the API.', example='2016-08-15'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.'),
  createdTime?: string(name='createdTime', description='The time when the domain name was added.', example='2020-07-27T08:02:19Z'),
  domainName?: string(name='domainName', description='The domain name.', example='example.com'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the domain name was last modified.', example='2020-07-27T08:02:19Z'),
  protocol?: string(name='protocol', description='The protocol types supported by the domain name. Valid values:

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.'),
}

model CreateCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomDomainResponseBody(name='body'),
}

async function createCustomDomain(request: CreateCustomDomainRequest): CreateCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCustomDomain', 'POST', '/2021-04-06/custom-domains', 'json', false, 'json', request);
}

model CreateFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='serviceName', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='The CRC-64 value of the function code package.', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request. The value is the same as that of the requestId parameter in the response.', example='test-trace-id', position='Header'),
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000', position='Body'),
  code?: Code(name='code', description='The code of the function. The code must be packaged into a ZIP file. Choose **code** or **customContainerConfig** for the function.', position='Body'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value must be a multiple of 0.05.', example='1.5', position='Body'),
  customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configurations of the custom container runtime. After you configure the custom container runtime, Function Compute can execute the function in a container created from a custom image. Choose **code** or **customContainerConfig** for the function.', position='Body'),
  customDNS?: CustomDNS(name='customDNS', description='The custom Domain Name System (DNS) configurations of the function.', position='Body'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.', position='Body'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime.', position='Body'),
  description?: string(name='description', description='The description of the function.', example='function-description', position='Body'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512', position='Body'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that you configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Overview](~~69777~~).', position='Body'),
  functionName: string(name='functionName', description='The name of the function. The name can contain letters, digits, underscores (\\_), and hyphens (-) only. The name cannot start with a digit or a hyphen (-). The name must be 1 to 64 characters in length.', example='functionName', position='Body'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='GPU instance memory specifications of the function. Unit: MB. The value is a multiple of 1024.', example='2048', position='Body'),
  handler: string(name='handler', description='The handler of the function. The format varies based on the programming language. For more information, see [Function handlers](~~157704~~).', example='index.handler', position='Body'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the initializer function. Unit: seconds. Default value: 3. Valid values: 1 to 300. When this period expires, the execution of the initializer function is terminated.', example='60', position='Body'),
  initializer?: string(name='initializer', description='The handler of the initializer function. For more information, see [Initializer functions](~~157704~~).', example='index.initializer', position='Body'),
  instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10', position='Body'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.', position='Body'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the number of the soft concurrency, the instance scale-up is triggered. For example, if your instance requires a long term to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of **instanceConcurrency**.', example='5', position='Body'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance', example='e1', position='Body'),
  layers?: [ string ](name='layers', description='An array that consists of the information of layers.

>  Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file with the same name in the layer with a larger subscript.', position='Body'),
  memorySize?: int32(name='memorySize', description='The memory size for the function. Unit: MB. The memory size must be a multiple of 64 MB. The memory size varies based on the function instance type. For more information, see [Instance types](~~179379~~).', example='512', position='Body'),
  runtime: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore2.1**, **custom** and **custom-container**.', example='python3.9', position='Body'),
  timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 3. Minimum value: 1. When this period ends, the execution of the function is terminated.', example='60', position='Body'),
}

model CreateFunctionResponseBody = {
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000'),
  codeChecksum?: string(name='codeChecksum', description='The CRC-64 value of the function code package.', example='5434025278388143772'),
  codeSize?: long(name='codeSize', description='The size of the function code package that is returned by the system. Unit: byte.', example='1024'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value must be a multiple of 0.05.', example='1.5'),
  createdTime?: string(name='createdTime', description='The time when the function was created.', example='2016-08-15T15:00:00.000+0000'),
  customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configurations of the custom container runtime. After you configure the custom container runtime, Function Compute can execute the function in a container created from a custom image.'),
  customDNS?: CustomDNS(name='customDNS', description='The custom DNS configurations of the function.'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime.'),
  description?: string(name='description', description='The description of the function.', example='This is a demo hello world function'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that you configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Overview](~~69777~~).'),
  functionId?: string(name='functionId', description='The unique ID generated by the system for the function.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24
****'),
  functionName?: string(name='functionName', description='The name of the function.', example='demo-function'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='GPU instance memory specifications of the function. Unit: MB. The value is a multiple of 1024.', example='2048'),
  handler?: string(name='handler', description='The handler of the function.', example='index.handler'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the initializer function. Unit: seconds. Default value: 3. Minimum value: 1. When this period ends, the execution of the initializer function is terminated.', example='60'),
  initializer?: string(name='initializer', description='The handler of the initializer function. The format is determined by the programming language.', example='index.handler'),
  instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the number of the soft concurrency, the instance scale-up is triggered. For example, if your instance requires a long term to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of **instanceConcurrency**.', example='5'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance', example='e1'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the function was last modified.', example='2016-08-15T17:00:00.000+0000'),
  layers?: [ string ](name='layers', description='An array that consists of the information of layers.

>  Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file with the same name in the layer with a larger subscript.'),
  memorySize?: int32(name='memorySize', description='The memory size for the function. Unit: MB.', example='512'),
  runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore2.1**, **custom** and **custom-container**.', example='python3.9'),
  timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 60. Valid values: 1 to 600. When this period expires, the execution of the function is terminated.', example='10'),
}

model CreateFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFunctionResponseBody(name='body'),
}

async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFunction', 'POST', '/2021-04-06/services/{serviceName}/functions', 'json', false, 'json', request);
}

model CreateLayerVersionRequest {
  layerName: string(name='layerName', description='The name of the layer.', example='MyLayer', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r4isu4sls****', position='Header'),
  code: Code(name='Code', description='The code of the layer.', position='Body'),
  compatibleRuntime?: [ string ](name='compatibleRuntime', description='The list of runtime environments that are supported by the layer.', position='Body'),
  description?: string(name='description', description='The description of the layer.', example='test', position='Body'),
}

model CreateLayerVersionResponseBody = {
  acl?: int32(name='acl', description='The access mode of the layer.', example='0'),
  arn?: string(name='arn', description='The name of the layer.', example='xxxxxxxx#Layer-name#1'),
  code?: OutputCodeLocation(name='code', description='The information about the layer code package.'),
  codeChecksum?: string(name='codeChecksum', description='The checksum of the layer code package.', example='2825179536350****'),
  codesize?: long(name='codesize', description='The size of the layer code package. Unit: Byte.', example='421'),
  compatibleRuntime?: [ string ](name='compatibleRuntime', description='The list of runtime environments that are supported by the layer.'),
  createTime?: string(name='createTime', description='The time when the layer version was created. The time follows the **yyyy-MM-ddTHH:mm:ssZ** format.', example='2022-01-01T11:08:00Z'),
  description?: string(name='description', description='The description of the layer version.', example='the first layer'),
  layerName?: string(name='layerName', description='The name of the layer.', example='MyLayer'),
  version?: int32(name='version', description='The version of the layer.', example='1'),
}

model CreateLayerVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLayerVersionResponseBody(name='body'),
}

async function createLayerVersion(request: CreateLayerVersionRequest): CreateLayerVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLayerVersion', 'POST', '/2021-04-06/layers/{layerName}/versions', 'json', false, 'json', request);
}

model CreateServiceRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
  description?: string(name='description', description='The description of the service.', example='service_description', position='Body'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

- **true**: allows functions in the specified service to access the Internet. Default value: true.
- **false**: does not allow functions in the specified service to access the Internet.', example='true', position='Body'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration. Function Compute writes function execution logs to the specified Logstore.', position='Body'),
  nasConfig?: NASConfig(name='nasConfig', description='The configuration of the Apsara File Storage NAS (NAS) file system. The configurations allow functions in the specified service to access the NAS file system.', position='Body'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.', position='Body'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::188077086902****:role/fc-test', position='Body'),
  serviceName: string(name='serviceName', description='The name of the service. The name contains only letters, digits, hyphens (-), and underscores (_). The name must be 1 to 128 characters in length and cannot start with a digit or hyphen (-).', example='service_Name', position='Body'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configurations of Tracing Analysis. After Function Compute is integrated with Tracing Analysis, you can record the duration of a request in Function Compute, view the cold start time of a function, and record the execution duration of a function. For more information, see [Tracing Analysis](~~189804~~).', position='Body'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configurations. The configurations allow functions in the specified service to access the specified VPC.', position='Body'),
}

model CreateServiceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the service was created.', example='2016-08-15T16:06:05.000+0000'),
  description?: string(name='description', description='The description of the service.', example='service_description'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions in the specified service to access the Internet.', example='true'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service was last modified.', example='2016-08-15T16:06:05.000+0000'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration. Function Compute writes function execution logs to the specified Logstore.'),
  nasConfig?: NASConfig(name='nasConfig', description='The configuration of the NAS file system. The configurations allow functions in the specified service to access the NAS file system.'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::188077086902****:role/fc-test'),
  serviceId?: string(name='serviceId', description='The unique ID generated by the system for the service.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24e737'),
  serviceName?: string(name='serviceName', description='The name of the service.', example='service_Name'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configuration of Tracing Analysis. After Function Compute is integrated with Tracing Analysis, you can record the duration of a request in Function Compute, view the cold start time of a function, and record the execution duration of a function. For more information, see [Tracing Analysis](~~189804~~).'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configurations. The configurations allow functions in the specified service to access the specified VPC.'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateService', 'POST', '/2021-04-06/services', 'json', false, 'json', request);
}

model CreateTriggerRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test', position='Body'),
  invocationRole?: string(name='invocationRole', description='The role that is used by the event source such as OSS to invoke the function. For more information, see [Overview](~~53102~~).', example='acs:ram::1234567890:role/fc-test', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Body'),
  sourceArn?: string(name='sourceArn', description='The Alibaba Cloud Resource Name (ARN) of the event source for the trigger.', example='acs:oss:cn-shanghai:12345:mybucket', position='Body'),
  triggerConfig: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type. For more information about the format, see the following topics:

*   OSS trigger: [OSSTriggerConfig](javascript:void\\(0\\)).
*   Log Service trigger: [LogTriggerConfig](javascript:void\\(0\\)).
*   Time trigger: [TimeTriggerConfig](javascript:void\\(0\\)).
*   HTTP trigger: [HTTPTriggerConfig](javascript:void\\(0\\)).
*   Tablestore trigger: Specify the **SourceArn** parameter and leave this parameter empty.
*   Alibaba Cloud CDN event trigger: [CDNEventsTriggerConfig](javascript:void\\(0\\)).
*   MNS topic trigger: [MnsTopicTriggerConfig](javascript:void\\(0\\)).', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}', position='Body'),
  triggerName: string(name='triggerName', description='The name of the trigger. The name contains only letters, digits, hyphens (-), and underscores (\\_). The name must be 1 to 128 characters in length and cannot start with a digit or hyphen (-).', example='oss_create_object_demo', position='Body'),
  triggerType: string(name='triggerType', description='The type of the trigger. Valid values:

*   **oss**: OSS event trigger. For more information, see [Overview](~~62922~~).
*   **log**: Log Service trigger. For more information, see [Overview](~~84386~~).
*   **timer**: time trigger. For more information, see [Overview](~~68172~~).
*   **http**: HTTP trigger. For more information, see [Overview](~~71229~~).
*   **tablestore**: Tablestore trigger. For more information, see [Overview](~~100092~~).
*   **cdn_events**: CDN event trigger. For more information, see [Overview](~~73333~~).
*   **mns_topic**: MNS topic trigger. For more information, see [Overview](~~97032~~).', example='oss', position='Body'),
}

model CreateTriggerResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the trigger was created.', example='2016-08-15T15:00:00.000+0000'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test'),
  domainName?: string(name='domainName', description='The domain name used to invoke the function by using HTTP. You can add this domain name as the prefix to the endpoint of Function Compute. This way, you can invoke the function that corresponds to the trigger by using HTTP. For example, `{domainName}.cn-shanghai.fc.aliyuncs.com`.', example='demo-service-demo-function-jkhksh'),
  invocationRole?: string(name='invocationRole', description='The ARN of the RAM role that is used by the event source to invoke the function.', example='acs:ram::1234567890:role/fc-test'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the trigger was last modified.', example='016-08-15T17:00:00.000+0000'),
  qualifier?: string(name='qualifier', description='The version of the service.', example='LATEST'),
  sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:oss:cn-shanghai:12345:mybucket'),
  triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type.', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}'),
  triggerId?: string(name='triggerId', description='The unique ID of the trigger.', example='3e270f2f-cef2-421a-bc86-ff4e8088****'),
  triggerName?: string(name='triggerName', description='The name of the trigger. The name contains only letters, digits, hyphens (-), and underscores (\\_). The name must be 1 to 128 characters in length and cannot start with a digit or hyphen (-).', example='oss_create_object_trigger_demo'),
  triggerType?: string(name='triggerType', description='The trigger type, such as **oss**, **log**, **tablestore**, **timer**, **http**, **cdn_events**, and **mns_topic**.', example='oss'),
  urlInternet?: string(name='urlInternet', description='The public domain address. You can access HTTP triggers over the Internet by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou.fcapp.run'),
  urlIntranet?: string(name='urlIntranet', description='The private endpoint. In a VPC, you can access HTTP triggers by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou-vpc.fcapp.run'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTrigger(request: CreateTriggerRequest): CreateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTrigger', 'POST', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers', 'json', false, 'json', request);
}

model CreateVpcBindingRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
  vpcId: string(name='vpcId', description='The ID of the VPC to be bound.', example='v-xxxx', position='Body'),
}

model CreateVpcBindingResponse = {
  headers: map[string]string(name='headers'),
}

async function createVpcBinding(request: CreateVpcBindingRequest): CreateVpcBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVpcBinding', 'POST', '/2021-04-06/services/{serviceName}/bindings', 'none', false, 'json', request);
}

model DeleteAliasRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  aliasName: string(name='aliasName', description='The name of the alias.', example='test', position='Path'),
  ifMatch?: string(name='If-Match', description='If the ETag specified in the request matches the ETag value of the object, OSS transmits the object and returns 200 OK. If the ETag specified in the request does not match the ETag value of the object, OSS returns 412 Precondition Failed. 
The ETag value of a resource is used to check whether the resource has changed. You can check data integrity by using the ETag value. 
Default value: null', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r9s89isisi****', position='Header'),
}

model DeleteAliasResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteAlias(request: DeleteAliasRequest): DeleteAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlias', 'DELETE', '/2021-04-06/services/{serviceName}/aliases/{aliasName}', 'none', false, 'json', request);
}

model DeleteCustomDomainRequest {
  domainName: string(name='domainName', description='The domain name.', example='example.com', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
}

model DeleteCustomDomainResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteCustomDomain(request: DeleteCustomDomainRequest): DeleteCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCustomDomain', 'DELETE', '/2021-04-06/custom-domains/{domainName}', 'none', false, 'json', request);
}

model DeleteFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  ifMatch?: string(name='If-Match', description='The ETag value of the resource. This value is used to ensure that the modified resource is consistent with the resource to be modified. The ETag value is returned in the responses of the CREATE, GET, and UPDATE operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API. The value is the same as that of the requestId parameter in the response.', example='test-trace-id', position='Header'),
}

model DeleteFunctionResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunction', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}', 'none', false, 'json', request);
}

model DeleteFunctionAsyncInvokeConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='helloworld', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf*****', position='Header'),
  qualifier?: string(name='qualifier', description='The qualifier.', example='test', position='Query'),
}

model DeleteFunctionAsyncInvokeConfigResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteFunctionAsyncInvokeConfig(request: DeleteFunctionAsyncInvokeConfigRequest): DeleteFunctionAsyncInvokeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunctionAsyncInvokeConfig', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}/async-invoke-config', 'none', false, 'json', request);
}

model DeleteFunctionOnDemandConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='service_Name', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  ifMatch?: string(name='If-Match', description='If the ETag specified in the request matches the ETag value of the OndemandConfig, FC returns 200 OK. If the ETag specified in the request does not match the ETag value of the object, FC returns 412 Precondition Failed.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API, which is also the unique ID of the request.', example='r9s89isisi****', position='Header'),
  qualifier: string(name='qualifier', description='The alias of the service or LATEST.', example='prod', position='Query'),
}

model DeleteFunctionOnDemandConfigResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteFunctionOnDemandConfig(request: DeleteFunctionOnDemandConfigRequest): DeleteFunctionOnDemandConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunctionOnDemandConfig', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}/on-demand-config', 'none', false, 'json', request);
}

model DeleteLayerVersionRequest {
  layerName: string(name='layerName', description='The name of the layer.', example='MyLayer', position='Path'),
  version: string(name='version', description='The version of the layer.', example='1', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='asdf****', position='Header'),
}

model DeleteLayerVersionResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteLayerVersion(request: DeleteLayerVersionRequest): DeleteLayerVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLayerVersion', 'DELETE', '/2021-04-06/layers/{layerName}/versions/{version}', 'none', false, 'json', request);
}

model DeleteServiceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  ifMatch?: string(name='If-Match', description='The ETag value of the service. This value is used to ensure that the modified service is consistent with the service to be modified. The ETag value is returned in the responses of the [CreateService](~~175256~~), [UpdateService](~~188167~~), and [GetService](~~189225~~) operations.', example='service_name', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='r9s89isisi****', position='Header'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteService', 'DELETE', '/2021-04-06/services/{serviceName}', 'none', false, 'json', request);
}

model DeleteServiceVersionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  versionId: string(name='versionId', description='The version of the service.', example='1', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
}

model DeleteServiceVersionResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteServiceVersion(request: DeleteServiceVersionRequest): DeleteServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceVersion', 'DELETE', '/2021-04-06/services/{serviceName}/versions/{versionId}', 'none', false, 'json', request);
}

model DeleteTriggerRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  triggerName: string(name='triggerName', description='The name of the trigger.', example='demoTrigger', position='Path'),
  ifMatch?: string(name='If-Match', description='This parameter is used to ensure that the modified resource is consistent with the resource to be modified. You can obtain the parameter value from the responses of [CreateTrigger](~~415729~~), [GetTrigger](~~415732~~), and [UpdateTrigger](~~415731~~) operations.', example='e19d5cd5af0378da05f63f891c74****', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteTrigger(request: DeleteTriggerRequest): DeleteTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTrigger', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers/{triggerName}', 'none', false, 'json', request);
}

model DeleteVpcBindingRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  vpcId: string(name='vpcId', description='The ID of the VPC to be unbound.', example='vpc-xxxx', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
}

model DeleteVpcBindingResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteVpcBinding(request: DeleteVpcBindingRequest): DeleteVpcBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVpcBinding', 'DELETE', '/2021-04-06/services/{serviceName}/bindings/{vpcId}', 'none', false, 'json', request);
}

model DeregisterEventSourceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  sourceArn: string(name='sourceArn', description='The ARN of the event source.', example='acs:eventbridge:cn-shanghai:123456:eventbus/mns-test/rule/fc-test1/target/abc', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Query'),
}

model DeregisterEventSourceResponse = {
  headers: map[string]string(name='headers'),
}

async function deregisterEventSource(request: DeregisterEventSourceRequest): DeregisterEventSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeregisterEventSource', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}/event-sources/{sourceArn}', 'none', false, 'json', request);
}

model GetAccountSettingsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
}

model GetAccountSettingsResponseBody = {
  availableAZs?: [ string ](name='availableAZs', description='The list of zones.'),
  defaultRole?: string(name='defaultRole', description='The default RAM role.', example='acs:ram::1234:role/aliyunfcdefaultrole'),
}

model GetAccountSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountSettingsResponseBody(name='body'),
}

async function getAccountSettings(request: GetAccountSettingsRequest): GetAccountSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAccountSettings', 'GET', '/2021-04-06/account-settings', 'json', false, 'json', request);
}

model GetAliasRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='service_name', position='Path'),
  aliasName: string(name='aliasName', description='The name of the alias.', example='alias_test', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r4isu4sls****', position='Header'),
}

model GetAliasResponseBody = {
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The canary release version to which the alias points and the weight of the canary release version. 

- The canary release version takes effect only when the function is invoked. 
- The value consists of a version number and the corresponding weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.'),
  aliasName?: string(name='aliasName', description='The name of the alias.', example='alias_test'),
  createdTime?: string(name='createdTime', description='The time when the alias was created.', example='2020-07-27T06:37:29Z'),
  description?: string(name='description', description='The description of the alias.', example='test_description'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the alias was last modified.', example='2020-07-27T06:37:29Z'),
  resolvePolicy?: string(name='resolvePolicy', description='The canary release mode. Valid values:

- **Random**: random canary release. This is the default value.
- **Content**: rule-based canary release.', example='Random'),
  routePolicy?: RoutePolicy(name='routePolicy', description='Canary release rule. The traffic that meets the conditions of the canary release rule is diverted to the canary release instances.'),
  versionId?: string(name='versionId', description='The version to which the alias points.', example='2'),
}

model GetAliasResponse = {
  headers: map[string]string(name='headers'),
  body: GetAliasResponseBody(name='body'),
}

async function getAlias(request: GetAliasRequest): GetAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlias', 'GET', '/2021-04-06/services/{serviceName}/aliases/{aliasName}', 'json', false, 'json', request);
}

model GetCustomDomainRequest {
  domainName: string(name='domainName', description='The domain name.', example='example.com', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='r4isu4sls****', position='Header'),
}

model GetCustomDomainResponseBody = {
  accountId?: string(name='accountId', description='The ID of your Alibaba Cloud account.', example='2016-08-15'),
  apiVersion?: string(name='apiVersion', description='The version of the API.', example='2016-08-15'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.'),
  createdTime?: string(name='createdTime', description='The time when the custom domain name was created.', example='2020-07-27T08:02:19Z'),
  domainName?: string(name='domainName', description='The domain name.', example='example.com'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the domain name was last modified.', example='2020-07-27T08:02:19Z'),
  protocol?: string(name='protocol', description='The protocol types supported by the domain name. Valid values:

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.'),
}

model GetCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomDomainResponseBody(name='body'),
}

async function getCustomDomain(request: GetCustomDomainRequest): GetCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCustomDomain', 'GET', '/2021-04-06/custom-domains/{domainName}', 'json', false, 'json', request);
}

model GetFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='service_name', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='function_name', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='demoQualifier', position='Query'),
}

model GetFunctionResponseBody = {
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000'),
  codeChecksum?: string(name='codeChecksum', description='The CRC-64 value of the function code package.', example='2825179536350****'),
  codeSize?: long(name='codeSize', description='The size of the function code package. Unit: byte.', example='421'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value must be a multiple of 0.05.', example='1.5'),
  createdTime?: string(name='createdTime', description='The time when the function was created.', example='2020-04-01T08:15:27Z'),
  customContainerConfig?: CustomContainerConfigInfo(name='customContainerConfig', description='The configurations of the custom container runtime. After you configure the custom container runtime, Function Compute can execute the function in a container created from a custom image.'),
  customDNS?: CustomDNS(name='customDNS', description='The custom Domain Name System (DNS) configurations of the function.'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime.'),
  description?: string(name='description', description='The description of the function.', example='test_description'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that you configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Overview](~~69777~~).'),
  functionId?: string(name='functionId', description='The ID that is generated by the system for the function. Each function ID is unique in Function Compute.', example='aa715851-1c20-4b89-a8fb-***'),
  functionName?: string(name='functionName', description='The name of the function.', example='function_name'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='function的GPU显存规格，单位为MB，为1024MB的倍数', example='2048'),
  handler?: string(name='handler', description='The handler of the function. For more information, see [Function handler](~~157704~~).', example='index.handler'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the initializer function. Unit: seconds. Default value: 3. Valid values: 1 to 300. When this period ends, the execution of the initializer function is terminated.', example='60'),
  initializer?: string(name='initializer', description='The handler of the initializer function. The format of the value is determined by the programming language that you use. For more information, see [Initializer function](~~157704~~).', example='index.handler'),
  instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the number of the soft concurrency, the instance scale-up is triggered. For example, if your instance requires a long term to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of **instanceConcurrency**.', example='5'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance', example='e1'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the function was last modified.', example='2020-04-01T08:15:27Z'),
  layers?: [ string ](name='layers', description='An array that consists of the information of layers.

>  Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file with the same name in the layer with a larger subscript.'),
  layersArnV2?: [ string ](name='layersArnV2'),
  memorySize?: int32(name='memorySize', description='The memory size for the function. Unit: MB. The memory size must be a multiple of 64 MB. The memory size varies based on the function instance type. For more information, see [Instance types](~~179379~~).', example='256'),
  runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore2.1**, **custom** and **custom-container**.', example='python3'),
  timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 60. Valid values: 1 to 600. When this period expires, the execution of the function is terminated.', example='60'),
}

model GetFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionResponseBody(name='body'),
}

async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunction', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}', 'json', false, 'json', request);
}

model GetFunctionAsyncInvokeConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='helloworld', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the Function Compute is called. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The qualifier.', example='test', position='Query'),
}

model GetFunctionAsyncInvokeConfigResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the desktop group was created.', example='2020-09-10T02:45:02Z'),
  destinationConfig?: DestinationConfig(name='destinationConfig', description='The configuration structure of the destination for asynchronous invocations.', example='{"onSuccess": null,"onFailure": {"destination": "acs:mns:cn-shanghai:123:/queues/xxx/messages"}}'),
  function?: string(name='function', description='The name of the function.', example='helloworld'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the configuration was last modified.', example='2020-09-10T02:45:02Z'),
  maxAsyncEventAgeInSeconds?: long(name='maxAsyncEventAgeInSeconds', description='The maximum validity period of a message.', example='300'),
  maxAsyncRetryAttempts?: long(name='maxAsyncRetryAttempts', description='The maximum number of retries allowed after an asynchronous invocation fails.', example='3'),
  qualifier?: string(name='qualifier', description='The version or alias of the service to which the function belongs.', example='test'),
  service?: string(name='service', description='The name of the service.', example='demo-service'),
  statefulInvocation?: boolean(name='statefulInvocation', description='Indicates whether the asynchronous task feature is enabled.

*   **true**: The asynchronous task feature is enabled.
*   **false**: The asynchronous task feature is disabled.', example='true'),
}

model GetFunctionAsyncInvokeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionAsyncInvokeConfigResponseBody(name='body'),
}

/**
  * StatefulAsyncInvocation indicates whether the asynchronous task feature is enabled. If the value of StatefulAsyncInvocation is true, the asynchronous task feature is enabled. All asynchronous invocations change to asynchronous task mode.
  *
 */
async function getFunctionAsyncInvokeConfig(request: GetFunctionAsyncInvokeConfigRequest): GetFunctionAsyncInvokeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionAsyncInvokeConfig', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/async-invoke-config', 'json', false, 'json', request);
}

model GetFunctionCodeRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='demoQualifier', position='Query'),
}

model GetFunctionCodeResponseBody = {
  checksum?: string(name='checksum', description='The CRC-64 value of the function code package.', example='1234567890'),
  url?: string(name='url', description='The URL of the function code package.', example='http://func-code.oss-cn-shanghai.aliyuncs.com/1a2b3c4d5e6f'),
}

model GetFunctionCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionCodeResponseBody(name='body'),
}

async function getFunctionCode(request: GetFunctionCodeRequest): GetFunctionCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionCode', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/code', 'json', false, 'json', request);
}

model GetFunctionOnDemandConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the yyyy-mm-ddhh:mm:ss format.', example='2022-01-01 12:00:00', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API, which is also the unique ID of the request.', example='asdf****', position='Header'),
  qualifier: string(name='qualifier', description='The alias of the service or LATEST.', example='prod', position='Query'),
}

model GetFunctionOnDemandConfigResponseBody = {
  maximumInstanceCount?: long(name='maximumInstanceCount', description='The maximum number of instances.', example='10'),
  resource?: string(name='resource', description='The description of the resource.', example='12345#servierName#qualifier#functionName'),
}

model GetFunctionOnDemandConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionOnDemandConfigResponseBody(name='body'),
}

async function getFunctionOnDemandConfig(request: GetFunctionOnDemandConfigRequest): GetFunctionOnDemandConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionOnDemandConfig', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/on-demand-config', 'json', false, 'json', request);
}

model GetLayerVersionRequest {
  layerName: string(name='layerName', description='The name of the layer.', example='MyLayer', position='Path'),
  version: string(name='version', description='The version of the layer.', example='1', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='asdf****', position='Header'),
}

model GetLayerVersionResponse = {
  headers: map[string]string(name='headers'),
  body: Layer  
}

async function getLayerVersion(request: GetLayerVersionRequest): GetLayerVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLayerVersion', 'GET', '/2021-04-06/layers/{layerName}/versions/{version}', 'json', false, 'json', request);
}

model GetProvisionConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  qualifier: string(name='qualifier', description='The name of the alias.', example='prod', position='Query'),
}

model GetProvisionConfigResponseBody = {
  alwaysAllocateCPU?: boolean(name='alwaysAllocateCPU', description='Specifies whether to always allocate CPU to a function instance.', example='true'),
  current?: long(name='current', description='The actual number of provisioned instances.', example='1'),
  currentError?: string(name='currentError', description='The error message returned if a provisioned instance fails to be created.', example='image not found'),
  resource?: string(name='resource', description='The description of the resource.', example='12345#servierName#qualifier#functionName'),
  scheduledActions?: [
    ScheduledActions
  ](name='scheduledActions', description='The configurations of scheduled auto scaling.'),
  target?: long(name='target', description='The expected number of provisioned instances.', example='5'),
  targetTrackingPolicies?: [
    TargetTrackingPolicies
  ](name='targetTrackingPolicies', description='The configurations of metric-based auto scaling.'),
}

model GetProvisionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetProvisionConfigResponseBody(name='body'),
}

async function getProvisionConfig(request: GetProvisionConfigRequest): GetProvisionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProvisionConfig', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/provision-config', 'json', false, 'json', request);
}

model GetResourceTagsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  resourceArn: string(name='resourceArn', description='The Alibaba Cloud Resource Name (ARN) of the resource. 

> You can use the value of this parameter to query the information about the resource, such as the account, service, and region information of the resource. You can manage tags only for services for top level resources.', example='acs:fc:cn-shanghai:188077086902****:services/demo', position='Query'),
}

model GetResourceTagsResponseBody = {
  resourceArn?: string(name='resourceArn', description='The ARN of the resource. 

> You can use the value of this parameter to query the information about the resource, such as the account, service, and region information of the resource.', example='acs:fc:cn-shanghai:188077086902****:services/demo'),
  tags?: map[string]string(name='tags', description='The tag dictionary.', example='{"k1":"v1"}'),
}

model GetResourceTagsResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceTagsResponseBody(name='body'),
}

async function getResourceTags(request: GetResourceTagsRequest): GetResourceTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceTags', 'GET', '/2021-04-06/tag', 'json', false, 'json', request);
}

model GetServiceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='test', position='Query'),
}

model GetServiceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the service was created.', example='2020-04-03T05:57:28Z'),
  description?: string(name='description', description='The description of the service.', example='demo-service-test'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions in the specified service to access the Internet.', example='true'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service was last modified.', example='2020-04-03T05:57:28Z'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration, which specifies a Logstore to store function execution logs.'),
  nasConfig?: NASConfig(name='nasConfig', description='The configuration of the NAS file system. The configuration allows functions in the specified service in Function Compute to access the NAS file system.'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. Scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::1234567890:role/fc-test'),
  serviceId?: string(name='serviceId', description='The unique ID generated by the system for the service.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24e737'),
  serviceName?: string(name='serviceName', description='The name of the service.', example='demo-service'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configurations of Tracing Analysis. After you configure Tracing Analysis for a service in Function Compute, you can record the execution duration of a request, view the amount of cold start time for a function, and record the execution duration of a function. For more information, see [Overview](~~189804~~).'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configuration. The configuration allows a function to access the specified VPC.'),
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceResponseBody(name='body'),
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetService', 'GET', '/2021-04-06/services/{serviceName}', 'json', false, 'json', request);
}

model GetStatefulAsyncInvocationRequest {
  serviceName: string(name='serviceName', description='The name of the service to which the asynchronous task belongs.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function to which the asynchronous task belongs.', example='demo-function', position='Path'),
  invocationId: string(name='invocationId', description='The ID of the asynchronous task. 
> When you use an SDK to invoke a function, we recommend that you specify a business-related ID to facilitate subsequent operations. For example, a function that processes a video can use the file name of the video as the invocation ID. Then, you can use this ID to check whether the video is processed or terminate the processing of the video. The ID must start with a letter or an underscore (\\_), and can contain letters, digits, underscores (\\_), and hyphens (-). The ID can be up to 128 characters in length. If you do not specify the ID of the asynchronous invocation, Function Compute automatically generates an ID.', example='e026ae92-61e5-472f-b32d-1c9e3c4e****', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='The CRC-64 value of the function code package. This value is used to check data integrity. The value is automatically calculated by the tool.', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcInvocationType?: string(name='X-Fc-Invocation-Type', description='The invocation method. 

- **Sync**: synchronous invocation 
- **Async**: asynchronous invocation', example='Async', position='Header'),
  xFcLogType?: string(name='X-Fc-Log-Type', description='The method used to return logs. Valid values: 

- **Tail**: returns the last 4 KB of logs that are generated for the current request. 
- **None**: does not return logs for the current request. This is the default value.', example='Tail', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service to which the asynchronous task belongs.', example='LATEST', position='Query'),
}

model GetStatefulAsyncInvocationResponse = {
  headers: map[string]string(name='headers'),
  body: StatefulAsyncInvocation  
}

/**
  * StatefulAsyncInvocation: asynchronous task. Asynchronous tasks allow you to manage the states on the basis of common asynchronous invocations, which is more suitable for task scenarios.
  *
 */
async function getStatefulAsyncInvocation(request: GetStatefulAsyncInvocationRequest): GetStatefulAsyncInvocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetStatefulAsyncInvocation', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/stateful-async-invocations/{invocationId}', 'json', false, 'json', request);
}

model GetTriggerRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  triggerName: string(name='triggerName', description='The name of the trigger.', example='demoTrigger', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
}

model GetTriggerResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the trigger was created.', example='2016-08-15T15:00:00.000+0000'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test'),
  domainName?: string(name='domainName', description='The domain name used to invoke the function by using HTTP. You can add this domain name as the prefix to the endpoint of Function Compute. This way, you can invoke the function that corresponds to the trigger by using HTTP. For example, `{domainName}.cn-shanghai.fc.aliyuncs.com`.', example='demo-service-demo-function-jkhksh'),
  invocationRole?: string(name='invocationRole', description='The ARN of the RAM role that is used by the event source to invoke the function.', example='acs:ram::123456xxxx:role/fc-test'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the trigger was last modified.', example='016-08-15T17:00:00.000+0000'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST'),
  sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:oss:cn-shanghai:123456xxxx:mybucket'),
  triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type. For more information about the format, see the following topics:

*   OSS trigger: [OSSTriggerConfig](javascript:void\\(0\\)).
*   Log Service trigger: [LogTriggerConfig](javascript:void\\(0\\)).
*   Time trigger: [TimeTriggerConfig](javascript:void\\(0\\)).
*   HTTP trigger: [HTTPTriggerConfig](javascript:void\\(0\\)).
*   Tablestore trigger: Specify the **SourceArn** parameter and leave this parameter empty.
*   Alibaba Cloud CDN event trigger: [CDNEventsTriggerConfig](javascript:void\\(0\\)).
*   MNS topic trigger: [MnsTopicTriggerConfig](javascript:void\\(0\\)).', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}'),
  triggerId?: string(name='triggerId', description='The unique ID of the trigger.', example='3e270f2f-cef2-421a-bc86-ff4e8088476a'),
  triggerName?: string(name='triggerName', description='The name of the trigger.', example='demoTrigger'),
  triggerType?: string(name='triggerType', description='The trigger type, such as **oss**, **log**, **tablestore**, **timer**, **http**, **cdn_events**, and **mns_topic**.', example='oss'),
  urlInternet?: string(name='urlInternet', description='The public domain address. You can access HTTP triggers over the Internet by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou.fcapp.run'),
  urlIntranet?: string(name='urlIntranet', description='The private endpoint. In a VPC, you can access HTTP triggers by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou-vpc.fcapp.run'),
}

model GetTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: GetTriggerResponseBody(name='body'),
}

async function getTrigger(request: GetTriggerRequest): GetTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrigger', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers/{triggerName}', 'json', false, 'json', request);
}

model InvokeFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcInvocationType?: string(name='X-Fc-Invocation-Type', description='The method used to invoke the function. Valid values:

*   **Sync**: synchronous
*   **Async**: asynchronous', example='Sync', position='Header'),
  xFcLogType?: string(name='X-Fc-Log-Type', description='The method used to return logs. Valid values:

*   **Tail**: returns the last 4 KB of logs that are generated for the current request.
*   **None**: No logs are returned for the current request. Default value: None.', example='None', position='Header'),
  xFcStatefulAsyncInvocationId?: string(name='X-Fc-Stateful-Async-Invocation-Id', description='The ID of the asynchronous task. You must enable the asynchronous task feature in advance.

> When you use an SDK to invoke a function, we recommend that you specify a business-related ID to facilitate subsequent operations. For example, you can use the video name as the invocation ID for a video-processing function. This way, you can use the ID to check whether the video is processed or terminate the processing of the video. The ID must start with a letter or an underscore (\\_) and can contain letters, digits, underscores (\\_), and hyphens (-). The ID can be up to 128 characters in length. If you do not specify the ID of the asynchronous invocation, Function Compute automatically generates an ID.', example='test-invoke-id', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API. The value is the same as that of the **requestId** parameter in the response.', example='test-trace-id', position='Header'),
  body?: bytes(name='body', description='The event to be processed by the function. Set this parameter to a binary string. Function Compute passes the event to the function for processing.', example='{"key":"value"}', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='demoQualifier', position='Query'),
}

model InvokeFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: bytes(name='body'),
}

async function invokeFunction(request: InvokeFunctionRequest): InvokeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvokeFunction', 'POST', '/2021-04-06/services/{serviceName}/functions/{functionName}/invocations', 'byte', false, 'json', request);
}

model ListAliasesRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the yyyy-mm-ddhh:mm:ss format.', example='2021-12-1210:00:00', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r9s89isisi****', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='caeba0be03****f84eb48b699f0a4883', position='Query'),
  prefix?: string(name='prefix', description='The prefix.', example='prefix_text', position='Query'),
  startKey?: string(name='startKey', description='The starting position of the result list.', example='nextkey', position='Query'),
}

model ListAliasesResponseBody = {
  aliases?: [ 
    {
      additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The weight of the canary release version.'),
      aliasName?: string(name='aliasName', description='The name of the alias.', example='test'),
      createdTime?: string(name='createdTime', description='The creation time.', example='2016-08-15T16:06:05.000+0000'),
      description?: string(name='description', description='The description of the alias.', example='Sample alias.'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The last update time.', example='2016-08-15T16:06:05.000+0000'),
      resolvePolicy?: string(name='resolvePolicy', description='灰度方式：随机灰度或者规则灰度，默认值为随机灰度
枚举值：
Random
Content', example='Random'),
      routePolicy?: RoutePolicy(name='routePolicy', description='灰度规则：满足灰度规则条件的流量，会被路由至灰度实例'),
      versionId?: string(name='versionId', description='The ID of the version.', example='1'),
    }
  ](name='aliases', description='The list of aliases.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='8bj81uI8n****'),
}

model ListAliasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAliasesResponseBody(name='body'),
}

async function listAliases(request: ListAliasesRequest): ListAliasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAliases', 'GET', '/2021-04-06/services/{serviceName}/aliases', 'json', false, 'json', request);
}

model ListCustomDomainsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf*****', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Valid values: \\[0,100]. Default value: 20. The number of returned results is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The pagination token to use to request the next page of results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='fc-thinkphp-demo.functioncompute.com', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the returned domain names must contain.', example='prefix_text', position='Query'),
  startKey?: string(name='startKey', description='The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='next_service', position='Query'),
}

model ListCustomDomainsResponseBody = {
  customDomains?: [ 
    {
      accountId?: string(name='accountId', description='The ID of your Alibaba Cloud account.', example='1986114****4305'),
      apiVersion?: string(name='apiVersion', description='The version of the API.', example='2016-08-15'),
      certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.'),
      createdTime?: string(name='createdTime', description='The time when the custom domain name was created.', example='2020-07-27T08:02:19Z'),
      domainName?: string(name='domainName', description='The domain name.', example='example.com'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the domain name was last modified.', example='2020-07-27T08:02:19Z'),
      protocol?: string(name='protocol', description='The protocol type that is supported by the custom domain name.

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP'),
      routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.'),
      tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.'),
      wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.'),
    }
  ](name='customDomains', description='The information about custom domain names.'),
  nextToken?: string(name='nextToken', description='The pagination token to use to request the next page of results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='example.com'),
}

model ListCustomDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCustomDomainsResponseBody(name='body'),
}

async function listCustomDomains(request: ListCustomDomainsRequest): ListCustomDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCustomDomains', 'GET', '/2021-04-06/custom-domains', 'json', false, 'json', request);
}

model ListEventSourcesRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Query'),
}

model ListEventSourcesResponseBody = {
  eventSources?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the event source was created.', example='2016-08-15T16:06:05.000+0000'),
      sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:eventbridge:cn-shanghai:123456:eventbus/mns-test/rule/fc-test1/target/abc'),
    }
  ](name='eventSources', description='The information about event sources.'),
}

model ListEventSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventSourcesResponseBody(name='body'),
}

async function listEventSources(request: ListEventSourcesRequest): ListEventSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEventSources', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/event-sources', 'json', false, 'json', request);
}

model ListFunctionAsyncInvokeConfigsRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='helloworld', position='Path'),
  accountID?: string(name='AccountID', position='Host'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='The CRC-64 value of the function code package. This value is used to check data integrity. The value is automatically calculated by the tool.', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the Function Compute is called. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcInvocationType?: string(name='X-Fc-Invocation-Type', description='The invocation method.

*   **Sync**: synchronous
*   **Async**: asynchronous', example='Async', position='Header'),
  xFcLogType?: string(name='X-Fc-Log-Type', description='The method used to return logs. Valid values:

*   **Tail**: returns the last 4 KB of logs that are generated for the current request.
*   **None**: No logs are returned for the current request. Default value: None.', example='Tail', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token required to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='8bj81uI8n****', position='Query'),
}

model ListFunctionAsyncInvokeConfigsResponseBody = {
  configs?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the desktop group was created.', example='2020-09-10T02:45:02Z'),
      destinationConfig?: DestinationConfig(name='destinationConfig', description='The configuration structure of the destination for asynchronous invocations. If you have not configured this parameter, this parameter is null.', example='{"onSuccess": null,"onFailure": {"destination": "acs:mns:cn-shanghai:123:/queues/xxx/messages"}}'),
      function?: string(name='function', description='The name of the function.', example='helloworld'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the configuration was last modified.', example='2020-09-10T02:45:02Z'),
      maxAsyncEventAgeInSeconds?: long(name='maxAsyncEventAgeInSeconds', description='The maximum validity period of a message. If you have not configured this parameter, this parameter is null.', example='300'),
      maxAsyncRetryAttempts?: long(name='maxAsyncRetryAttempts', description='The maximum number of retries allowed after an asynchronous invocation fails. If you have not configured this parameter, this parameter is null.', example='3'),
      qualifier?: string(name='qualifier', description='The version or alias of the service.', example='test'),
      service?: string(name='service', description='The name of the service.', example='demo-service'),
      statefulInvocation?: boolean(name='statefulInvocation', description='Indicates whether the asynchronous task feature is enabled.

*   **true**: The asynchronous task feature is enabled.
*   **false**: The asynchronous task feature is disabled.

If you have not configured this parameter, this parameter is null.', example='true'),
    }
  ](name='configs', description='The list of asynchronous invocation configurations.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='caeba0be03****f84eb48b699f0a4883'),
}

model ListFunctionAsyncInvokeConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionAsyncInvokeConfigsResponseBody(name='body'),
}

/**
  * StatefulAsyncInvocation indicates whether the asynchronous task feature is enabled. If StatefulAsyncInvocation is set to true, the asynchronous task is enabled. All asynchronous invocations to the function corresponding to this configuration change to asynchronous task mode.
  *
 */
async function listFunctionAsyncInvokeConfigs(request: ListFunctionAsyncInvokeConfigsRequest): ListFunctionAsyncInvokeConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctionAsyncInvokeConfigs', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/async-invoke-configs', 'json', false, 'json', request);
}

model ListFunctionsRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='8bj81uI8n****', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the names of returned resources must contain.', example='demoFunctionsPrefix', position='Query'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Query'),
  startKey?: string(name='startKey', description='The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='demoStartKey', position='Query'),
}

model ListFunctionsResponseBody = {
  functions?: [ 
    {
      caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000'),
      codeChecksum?: string(name='codeChecksum', description='The CRC-64 value of the function code package.', example='5434025278388143772'),
      codeSize?: long(name='codeSize', description='The size of the function code package that is returned by the system. Unit: byte.', example='1024'),
      cpu?: float(name='cpu', description='The number of vCPUs of the function. The value must be a multiple of 0.05.', example='1.5'),
      createdTime?: string(name='createdTime', description='The time when the function was created.', example='2016-08-15T15:00:00.000+0000'),
      customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configurations of the custom container runtime.'),
      customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.'),
      description?: string(name='description', description='The description of the function.', example='This is a demo hello world function'),
      diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512'),
      environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that you configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Overview](~~69777~~).'),
      functionId?: string(name='functionId', description='The unique ID that is generated by the system for the function.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24****'),
      functionName?: string(name='functionName', description='The name of the function.', example='demo-function'),
      gpuMemorySize?: int32(name='gpuMemorySize', description='GPU instance memory specifications of the function. Unit: MB. The value is a multiple of 1024.', example='2048'),
      handler?: string(name='handler', description='The handler of the function.', example='index.handler'),
      initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the initializer function. Unit: seconds. Default value: 3. Valid values: 1 to 300. When this period ends, the execution of the initializer function is terminated.', example='60'),
      initializer?: string(name='initializer', description='The handler of the initializer function. The format of the value is determined by the programming language that you use. For more information, see [Initializer function](~~157704~~).', example='index.handler'),
      instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10'),
      instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.'),
      instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the number of the soft concurrency, the instance scale-up is triggered. For example, if your instance requires a long term to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of **instanceConcurrency**.', example='5'),
      instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance', example='e1'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the function was last modified.', example='2016-08-15T17:00:00.000+0000'),
      layers?: [ string ](name='layers', description='An array that consists of the information of layers.


> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file with the same name in the layer with a larger subscript.'),
      memorySize?: int32(name='memorySize', description='The memory size that is configured for the function. Unit: MB.', example='512'),
      runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore3.1**, **dotnetcore2.1**, **custom** and **custom-container**. For more information, see [Supported function runtime environments](~~73338~~).', example='python3.9'),
      timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 60. Valid values: 1 to 600. When this period expires, the execution of the function is terminated.', example='10'),
    }
  ](name='functions', description='The information about functions.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='8bj81uI8n****'),
}

model ListFunctionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionsResponseBody(name='body'),
}

async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctions', 'GET', '/2021-04-06/services/{serviceName}/functions', 'json', false, 'json', request);
}

model ListInstancesRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  instanceIds?: [ string ](name='instanceIds', description='The IDs of the instance.', position='Query'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Valid values: \\[0,1000].

The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  qualifier?: string(name='qualifier', description='The version or alias.', example='dev', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      instanceId?: string(name='instanceId', description='The ID of the instance.', example='1ef6b6ff-7f7b-485e-ab49-501ac681****'),
      versionId?: string(name='versionId', description='The version of the service to which the instance belongs. If the instance belongs to the LATEST alias, 0 is returned as the version.', example='1'),
    }
  ](name='instances', description='The information about instances.'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

/**
  * The ListInstances operation allows you to query the available instances of a function.
  * Available instances are instances that are processing requests or can be scheduled to process requests. Available instances queried by the ListInstances operation are the same as those that can be used when you call the InvokeFunction operation with the same values specified for the `serviceName`, `functionName`, and `qualifier` parameters.
  *
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/instances', 'json', false, 'json', request);
}

model ListLayerVersionsRequest {
  layerName: string(name='layerName', description='The name of the layer.', example='MyLayer', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  startVersion?: int32(name='startVersion', description='The initial version of the layer.', example='1', position='Query'),
}

model ListLayerVersionsResponseBody = {
  layers?: [
    Layer
  ](name='layers', description='The information about layer versions.'),
  nextVersion?: int32(name='nextVersion', description='The initial version of the layer for the next query.', example='21'),
}

model ListLayerVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLayerVersionsResponseBody(name='body'),
}

async function listLayerVersions(request: ListLayerVersionsRequest): ListLayerVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLayerVersions', 'GET', '/2021-04-06/layers/{layerName}/versions', 'json', false, 'json', request);
}

model ListLayersRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned configurations is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token required to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='next-layer-name', position='Query'),
  official?: boolean(name='official', description='Specifies whether to obtain the official public layer. When the official parameter is set to true, the public field does not take effect. The default value is false.', example='true', position='Query'),
  prefix?: string(name='prefix', description='The name prefix of the layer. The names of returned resources must contain the prefix. If the name prefix is a, the names of returned resources must start with a.', example='prefix-Layer', position='Query'),
  public?: boolean(name='public', description='Specifies whether to obtain only the common layer. Default value: false.', example='true', position='Query'),
  startKey?: string(name='startKey', description='The name of the start layer. The returned layers are sorted in alphabetical order, and the layers that include and follow the layer specified by the startKey parameter are returned.', example='start-layer-name', position='Query'),
}

model ListLayersResponseBody = {
  layers?: [
    Layer
  ](name='layers', description='The information about layers.'),
  nextToken?: string(name='nextToken', description='The name of the start layer for the next query, which is also the token used to obtain more results.', example='next-layer-name'),
}

model ListLayersResponse = {
  headers: map[string]string(name='headers'),
  body: ListLayersResponseBody(name='body'),
}

async function listLayers(request: ListLayersRequest): ListLayersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLayers', 'GET', '/2021-04-06/layers', 'json', false, 'json', request);
}

model ListOnDemandConfigsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='8bj81uI8n****', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the names of returned resources must contain. If the name prefix is a, the names of returned resources must start with a.', example='prefix_text', position='Query'),
  startKey?: string(name='startKey', description='The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='nextservice', position='Query'),
}

model ListOnDemandConfigsResponseBody = {
  configs?: [
    OnDemandConfig
  ](name='configs', description='The information about the provisioned configuration.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='next_token'),
}

model ListOnDemandConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOnDemandConfigsResponseBody(name='body'),
}

async function listOnDemandConfigs(request: ListOnDemandConfigsRequest): ListOnDemandConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnDemandConfigs', 'GET', '/2021-04-06/on-demand-configs', 'json', false, 'json', request);
}

model ListProvisionConfigsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  limit?: long(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. You do not need to provide this parameter in the first call. The tokens for subsequent queries are obtained from the returned results.', example='demoNextToken', position='Query'),
  qualifier?: string(name='qualifier', description='The qualifier of the service to which resources belong. The qualifier must be aliasName and used together with the serviceName parameter.', example='prod', position='Query'),
  serviceName?: string(name='serviceName', description='The name of the service to which resources belong.', example='serviceName', position='Query'),
}

model ListProvisionConfigsResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='demoNextToken'),
  provisionConfigs?: [ 
    {
      alwaysAllocateCPU?: boolean(name='alwaysAllocateCPU', description='Specifies whether to always allocate CPU to a function instance.', example='true'),
      current?: long(name='current', description='The actual number of provisioned instances.', example='5'),
      currentError?: string(name='currentError', description='The error message returned if a provisioned instance fails to be created.', example='image not found'),
      resource?: string(name='resource', description='The description of the resource.', example='12345#servierName#qualifier#functionName'),
      scheduledActions?: [
        ScheduledActions
      ](name='scheduledActions', description='The configurations of scheduled auto scaling.'),
      target?: long(name='target', description='The expected number of provisioned instances.', example='5'),
      targetTrackingPolicies?: [
        TargetTrackingPolicies
      ](name='targetTrackingPolicies', description='The configurations of metric-based auto scaling.'),
    }
  ](name='provisionConfigs', description='The information about provisioned instances.'),
}

model ListProvisionConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProvisionConfigsResponseBody(name='body'),
}

async function listProvisionConfigs(request: ListProvisionConfigsRequest): ListProvisionConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProvisionConfigs', 'GET', '/2021-04-06/provision-configs', 'json', false, 'json', request);
}

model ListReservedCapacitiesRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the Function Compute API is called. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
  limit?: string(name='limit', description='The maximum number of resources to return. Valid values: \\[1, 100].', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token that determines the start point of the query.', example='8bj81uI8n****', position='Query'),
}

model ListReservedCapacitiesResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='8bj81uI8n****'),
  reservedCapacities?: [
    OpenReservedCapacity
  ](name='reservedCapacities', description='The information about subscription instances.'),
}

model ListReservedCapacitiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListReservedCapacitiesResponseBody(name='body'),
}

async function listReservedCapacities(request: ListReservedCapacitiesRequest): ListReservedCapacitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListReservedCapacities', 'GET', '/2021-04-06/reserved-capacities', 'json', false, 'json', request);
}

model ListServiceVersionsRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  direction?: string(name='direction', description='The order in which the returned versions are sorted. Valid values:
  - **FORWARD**: in ascending order. 
  - **BACKWARD**: in descending order. This is the default value.', example='BACKWARD', position='Query'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='8bj81uI8n****', position='Query'),
  startKey?: string(name='startKey', description='The starting position of the result list. The returned resources are sorted based on the version number, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='nextservice', position='Query'),
}

model ListServiceVersionsResponseBody = {
  direction?: string(name='direction', description='The order in which the returned versions are sorted. Valid values:
  - **FORWARD**: in ascending order. 
  - **BACKWARD**: in descending order. This is the default value.', example='BACKWARD'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='eJhojW7N****'),
  versions?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the service version was created.', example='2020-03-16T06:23:50Z'),
      description?: string(name='description', description='The description of the service version.', example='test_description'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service version was last modified.', example='2020-07-15T06:12:31Z'),
      versionId?: string(name='versionId', description='The version of the service.', example='1'),
    }
  ](name='versions', description='The list of versions.'),
}

model ListServiceVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceVersionsResponseBody(name='body'),
}

async function listServiceVersions(request: ListServiceVersionsRequest): ListServiceVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceVersions', 'GET', '/2021-04-06/services/{serviceName}/versions', 'json', false, 'json', request);
}

model ListServicesRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned configurations is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The starting position of the query. If this parameter is left empty, the query starts from the beginning. You do not need to specify this parameter in the first query. If the number of asynchronous tasks exceeds the limit, the nextToken parameter is returned, the value of which can be used in subsequent calls to obtain more results.', example='caeba0****be03f84eb48b699f0a4883', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the names of returned resources must contain. If the name prefix is a, the names of returned resources must start with a.', example='prefix_text', position='Query'),
  startKey?: string(name='startKey', description='The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='nextService', position='Query'),
}

model ListServicesResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='caeba0****be03f84eb48b699f0a4883'),
  services?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the service was created.', example='2020-04-03T05:57:28Z'),
      description?: string(name='description', description='The description of the service.', example='test_description'),
      internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions in the specified service to access the Internet.', example='true'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service was last modified.', example='2020-04-03T05:57:28Z'),
      logConfig?: LogConfig(name='logConfig', description='The log configuration, which specifies a Logstore to store function execution logs.'),
      nasConfig?: NASConfig(name='nasConfig', description='The configurations of the NAS file system. The configuration allows functions in the specified service in Function Compute to access the NAS file system.'),
      ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.'),
      role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::198613743****:role/fc-public-test'),
      serviceId?: string(name='serviceId', description='The unique ID generated by the system for the service.', example='c910061f-****-44e6-b659-***c'),
      serviceName?: string(name='serviceName', description='The name of the service.', example='service_name'),
      tracingConfig?: TracingConfig(name='tracingConfig', description='The configurations of Tracing Analysis. After you configure Tracing Analysis for a service in Function Compute, you can record the execution duration of a request, view the amount of cold start time for a function, and record the execution duration of a function. For more information, see [Overview](~~189804~~).'),
      vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configuration. The configuration allows a function to access the specified VPC.'),
    }
  ](name='services', description='The information about a service.'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'GET', '/2021-04-06/services', 'json', false, 'json', request);
}

model ListStatefulAsyncInvocationFunctionsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='12348*****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='duytnd-Xsdfasfd***', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='nextToken', description='The starting position of the query. If this parameter is left empty, the query starts from the beginning. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='""', position='Query'),
}

model ListStatefulAsyncInvocationFunctionsResponseBody = {
  data?: [
    AsyncConfigMeta
  ](name='data', description='The details of returned data.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='""'),
}

model ListStatefulAsyncInvocationFunctionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStatefulAsyncInvocationFunctionsResponseBody(name='body'),
}

/**
  * StatefulAsyncInvocation: asynchronous task. Asynchronous tasks allow you to manage the states on the basis of common asynchronous invocations, which is more suitable for task scenarios.
  *
 */
async function listStatefulAsyncInvocationFunctions(request: ListStatefulAsyncInvocationFunctionsRequest): ListStatefulAsyncInvocationFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStatefulAsyncInvocationFunctions', 'GET', '/2021-04-06/stateful-async-invocation-functions', 'json', false, 'json', request);
}

model ListStatefulAsyncInvocationsRequest {
  serviceName: string(name='serviceName', description='The name of the service to which the asynchronous task belongs.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function to which the asynchronous task belongs.', example='demo-function', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='The CRC-64 value of the function code package. This value is used to check data integrity. The value is automatically calculated by the tool.', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcInvocationType?: string(name='X-Fc-Invocation-Type', description='The invocation method. 

- **Sync**: synchronous invocation 
- **Async**: asynchronous invocation', example='Async', position='Header'),
  xFcLogType?: string(name='X-Fc-Log-Type', description='The method used to return logs. Valid values: 

- **Tail**: returns the last 4 KB of logs that are generated for the current request. 
- **None**: does not return logs for the current request. This is the default value.', example='Tail', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='abcxxx', position='Header'),
  includePayload?: boolean(name='includePayload', description='- **true**: returns the invocationPayload parameter in the response. 
- **false**: does not return the invocationPayload parameter in the response. 

> The `invocationPayload` parameter indicates the input parameters of an asynchronous task.', example='true', position='Query'),
  invocationIdPrefix?: string(name='invocationIdPrefix', description='The name prefix of the asynchronous invocation. The names of returned resources must contain the prefix. For example, if invocationidPrefix is set to job, the names of returned resources must start with job.', example='abcxxx', position='Query'),
  limit?: int32(name='limit', description='The maximum number of asynchronous invocations to return. Valid values: [1, 100]. Default value: 50.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='caeba0****be03f84eb48b699f0a4883', position='Query'),
  qualifier?: string(name='qualifier', description='The version or alias of the service to which the asynchronous task belongs.', example='LATEST', position='Query'),
  sortOrderByTime?: string(name='sortOrderByTime', description='The order in which the returned asynchronous invocations are sorted. Valid values:

- **asc**: in ascending order 
- **desc**: in descending order', example='desc', position='Query'),
  startedTimeBegin?: long(name='startedTimeBegin', description='The start time of the asynchronous task.', example='1640966400000', position='Query'),
  startedTimeEnd?: long(name='startedTimeEnd', description='The end time of the asynchronous task.', example='1640966400000', position='Query'),
  status?: string(name='status', description='The status of the asynchronous task. 

- **Enqueued**: The asynchronous invocation is enqueued and is waiting to be executed. 
- **Succeeded**: The invocation is successful. 
- **Failed**: The invocation fails. 
- **Running**: The invocation is being executed. 
- **Stopped**: The invocation is terminated. 
- **Stopping**: The invocation is being terminated. 
- **Invalid**: The invocation is invalid and not executed due to specific reasons. For example, the function is deleted. 
- **Expired**: The maximum validity period of messages is specified for asynchronous invocation. The invocation is discarded and not executed because the specified maximum validity period of messages expires. 
- **Retrying**: The asynchronous invocation is being retried due to an execution error.', example='Running', position='Query'),
}

model ListStatefulAsyncInvocationsResponseBody = {
  invocations?: [
    StatefulAsyncInvocation
  ](name='invocations', description='The information about asynchronous tasks.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='8bj81uI8n****'),
}

model ListStatefulAsyncInvocationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStatefulAsyncInvocationsResponseBody(name='body'),
}

/**
  * StatefulAsyncInvocation: asynchronous task. Asynchronous tasks allow you to manage the states on the basis of common asynchronous invocations, which is more suitable for task scenarios.
  *
 */
async function listStatefulAsyncInvocations(request: ListStatefulAsyncInvocationsRequest): ListStatefulAsyncInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStatefulAsyncInvocations', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/stateful-async-invocations', 'json', false, 'json', request);
}

model ListTaggedResourcesRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. You do not need to provide this parameter in the first call. The tokens for subsequent queries are obtained from the returned results.', example='a-service', position='Query'),
}

model ListTaggedResourcesResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results. You do not need to provide this parameter in the first call. The tokens for subsequent queries are obtained from the returned results.', example='a-service'),
  resources?: [
    Resource
  ](name='resources', description='The information about tagged services.'),
}

model ListTaggedResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaggedResourcesResponseBody(name='body'),
}

async function listTaggedResources(request: ListTaggedResourcesRequest): ListTaggedResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTaggedResources', 'GET', '/2021-04-06/tags', 'json', false, 'json', request);
}

model ListTriggersRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token required to obtain more results. You do not need to provide this parameter in the first call. The tokens for subsequent queries are obtained from the returned results.', example='f-trigger', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the names of returned resources must contain.', example='a', position='Query'),
  startKey?: string(name='startKey', description='The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='a-trigger', position='Query'),
}

model ListTriggersResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='f-trigger'),
  triggers?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the trigger was created.', example='2016-08-15T15:00:00.000+0000'),
      description?: string(name='description', description='The description of the trigger.', example='trigger for test'),
      domainName?: string(name='domainName', description='The domain name used to invoke the function by using HTTP. You can add this domain name as the prefix to the endpoint of Function Compute. This way, you can invoke the function that corresponds to the trigger by using HTTP. For example, `{domainName}.cn-shanghai.fc.aliyuncs.com`.', example='demo-service-demo-function-jkhksh'),
      invocationRole?: string(name='invocationRole', description='The ARN of the RAM role that is used by the event source to invoke the function.', example='acs:ram::123456xxxx:role/fc-test'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the trigger was last modified.', example='016-08-15T17:00:00.000+0000'),
      qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST'),
      sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:oss:cn-shanghai:123456xxxx:mybucket'),
      triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type. For more information about the format, see the following topics:

*   OSS trigger: [OSSTriggerConfig](javascript:void\\(0\\)).
*   Log Service trigger: [LogTriggerConfig](javascript:void\\(0\\)).
*   Time trigger: [TimeTriggerConfig](javascript:void\\(0\\)).
*   HTTP trigger: [HTTPTriggerConfig](javascript:void\\(0\\)).
*   Tablestore trigger: Specify the **SourceArn** parameter and leave this parameter empty.
*   Alibaba Cloud CDN event trigger: [CDNEventsTriggerConfig](javascript:void\\(0\\)).
*   MNS topic trigger: [MnsTopicTriggerConfig](javascript:void\\(0\\)).', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}'),
      triggerId?: string(name='triggerId', description='The unique ID of the trigger.', example='3e270f2f-cef2-421a-bc86-ff4e8088****'),
      triggerName?: string(name='triggerName', description='The name of the trigger.', example='demoTrigger'),
      triggerType?: string(name='triggerType', description='The trigger type, such as **oss**, **log**, **tablestore**, **timer**, **http**, **cdn_events**, and **mns_topic**.', example='oss'),
      urlInternet?: string(name='urlInternet', description='The public domain address. You can access HTTP triggers over the Internet by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou.fcapp.run'),
      urlIntranet?: string(name='urlIntranet', description='The private endpoint. In a VPC, you can access HTTP triggers by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou-vpc.fcapp.run'),
    }
  ](name='triggers', description='The information about triggers.'),
}

model ListTriggersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTriggersResponseBody(name='body'),
}

async function listTriggers(request: ListTriggersRequest): ListTriggersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTriggers', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers', 'json', false, 'json', request);
}

model ListVpcBindingsRequest {
  serviceName?: string(name='serviceName', description='The name of the service.', example='serviceName', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
}

model ListVpcBindingsResponseBody = {
  vpcIds?: [ string ](name='vpcIds', description='The IDs of bound VPCs.'),
}

model ListVpcBindingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcBindingsResponseBody(name='body'),
}

async function listVpcBindings(request: ListVpcBindingsRequest): ListVpcBindingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVpcBindings', 'GET', '/2021-04-06/services/{serviceName}/bindings', 'json', false, 'json', request);
}

model PublishServiceVersionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  ifMatch?: string(name='If-Match', description='The ETag value of the service. This value is used to ensure that the modified service is consistent with the service to be modified. The ETag value is returned in the responses of the [CreateService](~~175256~~), [UpdateService](~~188167~~), and [GetService](~~189225~~) operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the yyyy-mm-ddhh:mm:ss format.', example='2020-12-1210:00:00', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  description?: string(name='description', description='The description of the service version.', example='test_description', position='Body'),
}

model PublishServiceVersionResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the service version was created.', example='2016-08-15T16:06:05.000+0000'),
  description?: string(name='description', description='The description of the service version.', example='test_description'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service version was last modified.', example='2016-08-15T16:06:05.000+0000'),
  versionId?: string(name='versionId', description='The version of the service.', example='1'),
}

model PublishServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishServiceVersionResponseBody(name='body'),
}

async function publishServiceVersion(request: PublishServiceVersionRequest): PublishServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishServiceVersion', 'POST', '/2021-04-06/services/{serviceName}/versions', 'json', false, 'json', request);
}

model PutFunctionAsyncInvokeConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='helloworld', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='ksdfjkdmkki***', position='Header'),
  destinationConfig?: DestinationConfig(name='destinationConfig', description='The configuration structure of the destination for asynchronous invocation.', position='Body'),
  maxAsyncEventAgeInSeconds?: long(name='maxAsyncEventAgeInSeconds', description='The maximum validity period of messages. Valid values: 1 to 2592000. Unit: seconds.', example='300', position='Body'),
  maxAsyncRetryAttempts?: long(name='maxAsyncRetryAttempts', description='The maximum number of retries allowed after an asynchronous invocation fails. Default value: 3. Valid values: 0 to 8.', example='3', position='Body'),
  statefulInvocation?: boolean(name='statefulInvocation', description='Specifies whether to enable the asynchronous task feature. 

- **true**: enables the asynchronous task feature. 
- **false**: does not enable the asynchronous task feature.', example='true', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='test', position='Query'),
}

model PutFunctionAsyncInvokeConfigResponseBody = {
  createdTime?: string(name='createdTime', description='The creation time.', example='2020-09-10T02:45:02Z'),
  destinationConfig?: DestinationConfig(name='destinationConfig', description='The configuration structure of the destination for asynchronous invocation.', example='{"onSuccess": null,"onFailure": {"destination": "acs:mns:cn-shanghai:123:/queues/xxx/messages"}}'),
  function?: string(name='function', description='The name of the function.', example='helloworld'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the configuration was last modified.', example='2020-09-10T02:45:02Z'),
  maxAsyncEventAgeInSeconds?: long(name='maxAsyncEventAgeInSeconds', description='The maximum validity period of messages.', example='300'),
  maxAsyncRetryAttempts?: long(name='maxAsyncRetryAttempts', description='The maximum number of retries allowed after an asynchronous invocation fails.', example='3'),
  qualifier?: string(name='qualifier', description='The qualifier.', example='test'),
  service?: string(name='service', description='The name of the service.', example='demo-service'),
  statefulInvocation?: boolean(name='statefulInvocation', description='Specifies whether to enable the asynchronous task feature. 

- **true**: enables the asynchronous task feature. 
- **false**: does not enable the asynchronous task feature.', example='true'),
}

model PutFunctionAsyncInvokeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: PutFunctionAsyncInvokeConfigResponseBody(name='body'),
}

/**
  * StatefulAsyncInvocation specifies the configurations of the asynchronous task. Asynchronous tasks allow you to manage the states on the basis of common asynchronous invocations, which is more suitable for task scenarios.
  *
 */
async function putFunctionAsyncInvokeConfig(request: PutFunctionAsyncInvokeConfigRequest): PutFunctionAsyncInvokeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutFunctionAsyncInvokeConfig', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/async-invoke-config', 'json', false, 'json', request);
}

model PutFunctionOnDemandConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  ifMatch?: string(name='If-Match', description='If the ETag specified in the request matches the ETag value of the OndemandConfig, FC returns 200 OK. If the ETag specified in the request does not match the ETag value of the object, FC returns 412 Precondition Failed.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API, which is also the unique ID of the request.', example='r9s89isisi****', position='Header'),
  maximumInstanceCount: long(name='maximumInstanceCount', description='The maximum number of on-demand instances. For more information, see [Instance scaling limits](~~185038~~).', example='10', position='Body'),
  qualifier: string(name='qualifier', description='The alias of the service or LATEST.', example='prod', position='Query'),
}

model PutFunctionOnDemandConfigResponseBody = {
  maximumInstanceCount?: long(name='maximumInstanceCount', description='The maximum number of instances.', example='10'),
  resource?: string(name='resource', description='The description of the resource.', example='12345#servierName#qualifier#functionName'),
}

model PutFunctionOnDemandConfigResponse = {
  headers: map[string]string(name='headers'),
  body: PutFunctionOnDemandConfigResponseBody(name='body'),
}

async function putFunctionOnDemandConfig(request: PutFunctionOnDemandConfigRequest): PutFunctionOnDemandConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutFunctionOnDemandConfig', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/on-demand-config', 'json', false, 'json', request);
}

model PutLayerACLRequest {
  layerName: string(name='layerName', description='The name of the layer.', example='MyLayer', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='asdf****', position='Header'),
  public?: boolean(name='public', description='Specifies whether the layer is public.

*   **true**: Public.
*   **false**: Not public.', example='true', position='Query'),
}

model PutLayerACLResponse = {
  headers: map[string]string(name='headers'),
}

async function putLayerACL(request: PutLayerACLRequest): PutLayerACLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutLayerACL', 'PUT', '/2021-04-06/layers/{layerName}/acl', 'none', false, 'json', request);
}

model PutProvisionConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  alwaysAllocateCPU?: boolean(name='alwaysAllocateCPU', description='Specifies whether to always allocate CPU resources. Default value: true.', example='true', position='Body'),
  scheduledActions?: [
    ScheduledActions
  ](name='scheduledActions', description='The configurations of scheduled auto scaling.', position='Body'),
  target: long(name='target', description='The number of provisioned instances. Value range: [1,100000].', example='1', position='Body'),
  targetTrackingPolicies?: [
    TargetTrackingPolicies
  ](name='targetTrackingPolicies', description='The configurations of metric-based auto scaling.', position='Body'),
  qualifier: string(name='qualifier', description='The name of the alias.', example='prod', position='Query'),
}

model PutProvisionConfigResponseBody = {
  alwaysAllocateCPU?: boolean(name='alwaysAllocateCPU', description='Specifies whether to always allocate CPU to a function instance.', example='true'),
  current?: long(name='current', description='The actual number of provisioned instances.', example='1'),
  resource?: string(name='resource', description='The description of the resource.', example='"12345#servierName#qualifier#functionName"'),
  scheduledActions?: [
    ScheduledActions
  ](name='scheduledActions', description='The configurations of scheduled auto scaling.'),
  target?: long(name='target', description='The expected number of provisioned instances.', example='5'),
  targetTrackingPolicies?: [
    TargetTrackingPolicies
  ](name='targetTrackingPolicies', description='The configurations of metric-based auto scaling.'),
}

model PutProvisionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: PutProvisionConfigResponseBody(name='body'),
}

async function putProvisionConfig(request: PutProvisionConfigRequest): PutProvisionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProvisionConfig', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/provision-config', 'json', false, 'json', request);
}

model RegisterEventSourceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  sourceArn: string(name='sourceArn', description='The Alibaba Cloud Resource Name (ARN) of the event source.', example='acs:eventbridge:cn-shanghai:123456:eventbus/mns-test/rule/fc-test1/target/abc', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Query'),
}

model RegisterEventSourceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the event source was created.', example='2016-08-15T16:06:05.000+0000'),
  sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:eventbridge:cn-shanghai:123456:eventbus/mns-test/rule/fc-test1/target/abc'),
}

model RegisterEventSourceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterEventSourceResponseBody(name='body'),
}

async function registerEventSource(request: RegisterEventSourceRequest): RegisterEventSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RegisterEventSource', 'POST', '/2021-04-06/services/{serviceName}/functions/{functionName}/event-sources', 'json', false, 'json', request);
}

model ReleaseGPUInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='i-xxx', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format of the value is: EEE,d MMM yyyy HH:mm:ss GMT.', example='2022-11-11 07:31:04.899465017 +0000 UTC m=+37.671563424', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='test-trace-id', position='Header'),
}

model ReleaseGPUInstanceResponse = {
  headers: map[string]string(name='headers'),
}

async function releaseGPUInstance(request: ReleaseGPUInstanceRequest): ReleaseGPUInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseGPUInstance', 'DELETE', '/2021-04-06/gpuInstances/{instanceId}', 'none', false, 'json', request);
}

model StopStatefulAsyncInvocationRequest {
  serviceName: string(name='serviceName', description='The name of the service to which the asynchronous task belongs.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function to which the asynchronous task belongs.', example='demo-function', position='Path'),
  invocationId: string(name='invocationId', description='The ID of the asynchronous task.', example='demo-id', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service to which the asynchronous task belongs.', example='LATEST', position='Query'),
}

model StopStatefulAsyncInvocationResponse = {
  headers: map[string]string(name='headers'),
}

/**
  * StatefulAsyncInvocation: asynchronous task. Asynchronous tasks allow you to manage the states on the basis of common asynchronous invocations, which is more suitable for task scenarios.
  *
 */
async function stopStatefulAsyncInvocation(request: StopStatefulAsyncInvocationRequest): StopStatefulAsyncInvocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopStatefulAsyncInvocation', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/stateful-async-invocations/{invocationId}', 'none', false, 'json', request);
}

model TagResourceRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  resourceArn: string(name='resourceArn', description='The ARN of the resource.

> You can use the value of this parameter to query the information about the resource, such as the account, service, and region information of the resource. You can manage tags only for services for top level resources.', example='acs:fc:cn-shanghai:188077086902****:services/demo', position='Body'),
  tags: map[string]string(name='tags', description='The tag dictionary.', example='{"k1":"v1"}', position='Body'),
}

model TagResourceResponse = {
  headers: map[string]string(name='headers'),
}

async function tagResource(request: TagResourceRequest): TagResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResource', 'POST', '/2021-04-06/tag', 'none', false, 'json', request);
}

model UntagResourceRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  all?: boolean(name='all', description='Specifies whether to remove all tags. This parameter takes effect only when no tag key is specified. Valid values:
  - **true**: removes all tags. 
  - **false**: does not remove all tags.', example='false', position='Body'),
  resourceArn: string(name='resourceArn', description='The ARN of the resource. 

> You can use the value of this parameter to query the information about the resource, such as the account, service, and region information of the resource. You can manage tags only for services for top level resources.', example='acs:fc:cn-shanghai:188077086902****:services/demo', position='Body'),
  tagKeys?: [ string ](name='tagKeys', description='The keys of the tags that you want to remove.', position='Body'),
}

model UntagResourceResponse = {
  headers: map[string]string(name='headers'),
}

async function untagResource(request: UntagResourceRequest): UntagResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResource', 'PUT', '/2021-04-06/tag', 'none', false, 'json', request);
}

model UpdateAliasRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  aliasName: string(name='aliasName', description='The name of the alias.', example='alias_test', position='Path'),
  ifMatch?: string(name='If-Match', description='If the ETag specified in the request matches the ETag value of the object, the object and 200 OK are returned. Otherwise, 412 Precondition Failed is returned.

The ETag value of an object is used to check data integrity of the object. This parameter is empty by default.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The canary release version to which the alias points and the weight of the canary release version.

*   The canary release version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.', position='Body'),
  description?: string(name='description', description='The description of the alias.', example='test_description', position='Body'),
  resolvePolicy?: string(name='resolvePolicy', description='The canary release mode. Valid values:

*   **Random**: random canary release. This is the default value.
*   **Content**: rule-based canary release.', example='Random', position='Body'),
  routePolicy?: RoutePolicy(name='routePolicy', description='The canary release rule. Traffic that meets the canary release rule is routed to the canary release instance.', position='Body'),
  versionId?: string(name='versionId', description='The ID of the version to which the alias points.', example='1', position='Body'),
}

model UpdateAliasResponseBody = {
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The canary release version to which the alias points and the weight of the canary release version.

*   The canary release version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.'),
  aliasName?: string(name='aliasName', description='The name of the alias.', example='test'),
  createdTime?: string(name='createdTime', description='The time when the alias was created.', example='2016-08-15T16:06:05.000+0000'),
  description?: string(name='description', description='The description of the alias.', example='test_description'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the alias was last modified.', example='2016-08-15T16:06:05.000+0000'),
  versionId?: string(name='versionId', description='The ID of the version to which the alias points.', example='1'),
}

model UpdateAliasResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAliasResponseBody(name='body'),
}

async function updateAlias(request: UpdateAliasRequest): UpdateAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAlias', 'PUT', '/2021-04-06/services/{serviceName}/aliases/{aliasName}', 'json', false, 'json', request);
}

model UpdateCustomDomainRequest {
  domainName: string(name='domainName', description='The domain name.', example='example.com', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf*****', position='Header'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.', position='Body'),
  protocol?: string(name='protocol', description='The protocol types supported by the domain name. Valid values:

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP', position='Body'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.', position='Body'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.', position='Body'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.', position='Body'),
}

model UpdateCustomDomainResponseBody = {
  accountId?: string(name='accountId', description='The ID of your Alibaba Cloud account.', example='1986114****4305'),
  apiVersion?: string(name='apiVersion', description='The version of the API.', example='2016-08-15'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.'),
  createdTime?: string(name='createdTime', description='The time when the custom domain name was created.', example='2020-07-27T08:02:19Z'),
  domainName?: string(name='domainName', description='The domain name.', example='example.com'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the domain name was last modified.', example='2020-07-27T08:02:19Z'),
  protocol?: string(name='protocol', description='The protocol type that is supported by the custom domain name.

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.'),
}

model UpdateCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCustomDomainResponseBody(name='body'),
}

async function updateCustomDomain(request: UpdateCustomDomainRequest): UpdateCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCustomDomain', 'PUT', '/2021-04-06/custom-domains/{domainName}', 'json', false, 'json', request);
}

model UpdateFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  ifMatch?: string(name='If-Match', description='The ETag value of the resource. The value is used to ensure that the modified resource is consistent with the resource to be modified. The ETag value is returned in the responses of the [CreateFunction](~~415747~~), [GetFunction](~~415750~~), and [UpdateFunction](~~415749~~) operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='The CRC-64 value of the function code package.', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request. The value is the same as that of the requestId parameter in the response.', example='test-trace-id', position='Header'),
  instanceConcurrency?: int32(name='InstanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10', position='Body'),
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000', position='Body'),
  code?: Code(name='code', description='**Function code packages** can be provided with the following two methods. You must use only one of the methods in a request.

*   Specify the name of the **Object Storage Service (OSS) bucket** and **object** where the code package is stored.
*   Specify that the **zipFile** parameter is used as the Base64-encoded content of the ZIP file.', position='Body'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value must be a multiple of 0.05.', example='1.5', position='Body'),
  customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configuration of the custom container. After you configure the custom container, Function Compute can execute functions in a container created from a custom image.', position='Body'),
  customDNS?: CustomDNS(name='customDNS', description='The custom DNS configurations of the function.', position='Body'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configurations of the function. This parameter is applicable to only custom runtimes and custom containers.', position='Body'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime.', position='Body'),
  description?: string(name='description', description='The description of the function.', example='test desc', position='Body'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512', position='Body'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that are configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Environment variables](~~69777~~).', position='Body'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='function的GPU显存规格，单位为MB，为1024MB的倍数', example='2048', position='Body'),
  handler?: string(name='handler', description='The handler of the function. The format varies based on the programming language. For more information, see [Function handlers](~~157704~~).', example='index.handler', position='Body'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the initializer function. Unit: seconds. Default value: 3. Minimum value: 1. When the period ends, the execution of the initializer function is terminated.', example='60', position='Body'),
  initializer?: string(name='initializer', description='The handler of the initializer function. The format is determined by the programming language. For more information, see [Function handlers](~~157704~~).', example='index.handler', position='Body'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.', position='Body'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the number of the soft concurrency, the instance scale-up is triggered. For example, if your instance requires a long time to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of the **instanceConcurrency** parameter.', example='5', position='Body'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance', example='e1', position='Body'),
  layers?: [ string ](name='layers', description='The information about layers.

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name and a larger subscript in the layer.', position='Body'),
  memorySize?: int32(name='memorySize', description='The memory size for the function. Unit: MB. The memory size must be a multiple of 64 MB. The memory size varies based on the function instance type. For more information, see [Instance types](~~179379~~).', example='512', position='Body'),
  runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore3.1**, **dotnetcore2.1**, **custom** and **custom-container**. For more information, see [Supported function runtime environments](~~73338~~).', example='python3.9', position='Body'),
  timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 3. Minimum value: 1. When the period ends, the execution of the function is terminated.', example='60', position='Body'),
}

model UpdateFunctionResponseBody = {
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000'),
  codeChecksum?: string(name='codeChecksum', description='The CRC-64 value of the function code package.', example='5434025278388143772'),
  codeSize?: long(name='codeSize', description='The size of the function code package that is returned by the system. Unit: byte.', example='1024'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value must be a multiple of 0.05.', example='1.5'),
  createdTime?: string(name='createdTime', description='The time when the function is created.', example='2016-08-15T15:00:00.000+0000'),
  customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configurations of the custom container runtime. After you configure the custom container runtime, Function Compute can execute the function in a container created from a custom image.'),
  customDNS?: CustomDNS(name='customDNS', description='The custom DNS configurations of the function.'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configurations of the function. This parameter is applicable to only custom runtimes and custom containers.'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime.'),
  description?: string(name='description', description='The description of the function.', example='This is a demo hello world function'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that are configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Environment variables](~~69777~~).'),
  functionId?: string(name='functionId', description='The unique ID that is generated by the system for the function.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24****'),
  functionName?: string(name='functionName', description='The name of the function.', example='demo-function'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='function的GPU显存规格，单位为MB，为1024MB的倍数', example='2048'),
  handler?: string(name='handler', description='The handler of the function.', example='index.handler'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the initializer function. Unit: seconds. Default value: 3. Minimum value: 1. When the period ends, the execution of the initializer function is terminated.', example='60'),
  initializer?: string(name='initializer', description='The handler of the initializer function. The format is determined by the programming language.', example='index.handler'),
  instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the number of the soft concurrency, the instance scale-up is triggered. For example, if your instance requires a long time to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of the **instanceConcurrency** parameter.', example='5'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance', example='e1'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the function was last modified.', example='2016-08-15T17:00:00.000+0000'),
  layers?: [ string ](name='layers', description='The information about layers.

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name and a larger subscript in the layer.'),
  memorySize?: int32(name='memorySize', description='The memory size that is configured for the function. Unit: MB.', example='512'),
  runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore3.1**, **dotnetcore2.1**, **custom** and **custom-container**. For more information, see [Supported function runtime environments](~~73338~~).', example='python3.9'),
  timeout?: int32(name='timeout', description='The timeout period for the execution. Unit: seconds.', example='10'),
}

model UpdateFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFunctionResponseBody(name='body'),
}

async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFunction', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  ifMatch?: string(name='If-Match', description='The value used to ensure that the modified service is consistent with the service to be modified. The value is obtained from the responses of the [CreateService](~~175256~~), [UpdateService](~~188167~~), and [GetService](~~189225~~) operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the Function Compute API is called. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  description?: string(name='description', description='The description of the service.', example='test service', position='Body'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions in the specified service to access the Internet.', example='true', position='Body'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration. Function Compute writes function execution logs to the specified Logstore.', position='Body'),
  nasConfig?: NASConfig(name='nasConfig', description='The configurations of the NAS file system. The configurations allow functions to access the specified NAS resources.', position='Body'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.', position='Body'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::1234567890:role/fc-test', position='Body'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configurations of Tracing Analysis. After you configure Tracing Analysis for a service in Function Compute, you can record the execution duration of a request, view the amount of cold start time for a function, and record the execution duration of a function. For more information, see [Overview](~~189804~~).', position='Body'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The virtual private cloud (VPC) configuration, which allows functions in the specified service in Function Compute to access the specified VPC.', position='Body'),
}

model UpdateServiceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the service was created.', example='2016-08-15T16:06:05.000+0000'),
  description?: string(name='description', description='The description of the service.', example='test_description'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions in the specified service to access the Internet.', example='true'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service was last modified.', example='2016-08-15T16:06:05.000+0000'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration, which specifies a Logstore to store function execution logs.'),
  nasConfig?: NASConfig(name='nasConfig', description='The configurations of the NAS file system. The configuration allows functions in the specified service in Function Compute to access the NAS file system.'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::1234567890:role/fc-test'),
  serviceId?: string(name='serviceId', description='The unique ID generated by the system for the service.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24e737'),
  serviceName?: string(name='serviceName', description='The name of the service.', example='demo-service'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configurations of Tracing Analysis. After you configure Tracing Analysis for a service in Function Compute, you can record the execution duration of a request, view the amount of cold start time for a function, and record the execution duration of a function. For more information, see [Overview](~~189804~~).'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configuration. The configuration allows a function to access the specified VPC.'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateService', 'PUT', '/2021-04-06/services/{serviceName}', 'json', false, 'json', request);
}

model UpdateTriggerRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  triggerName: string(name='triggerName', description='The name of the trigger.', example='demoTrigger', position='Path'),
  ifMatch?: string(name='If-Match', description='This parameter is used to ensure that the modified resource is consistent with the resource to be modified. You can obtain the parameter value from the responses of [CreateTrigger](~~190054~~), [GetTrigger](~~190056~~), and [UpdateTrigger](~~190055~~) operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test', position='Body'),
  invocationRole?: string(name='invocationRole', description='The role that is used by the event source such as OSS to invoke the function. For more information, see [Overview](~~53102~~).', example='acs:ram::123456xxxx:role/fc-test', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Body'),
  triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type. For more information about the format, see the following topics:

*   OSS trigger: [OSSTriggerConfig](javascript:void\\(0\\)).
*   Log Service trigger: [LogTriggerConfig](javascript:void\\(0\\)).
*   Time trigger: [TimeTriggerConfig](javascript:void\\(0\\)).
*   HTTP trigger: [HTTPTriggerConfig](javascript:void\\(0\\)).
*   Tablestore trigger: Specify the **SourceArn** parameter and leave this parameter empty.
*   Alibaba Cloud CDN event trigger: [CDNEventsTriggerConfig](javascript:void\\(0\\)).
*   MNS topic trigger: [MnsTopicTriggerConfig](javascript:void\\(0\\)).', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}', position='Body'),
}

model UpdateTriggerResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the audio or video file was created.', example='2016-08-15T15:00:00.000+0000'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test'),
  domainName?: string(name='domainName', description='The domain name used to invoke the function by using HTTP. You can add this domain name as the prefix to the endpoint of Function Compute. This way, you can invoke the function that corresponds to the trigger by using HTTP. For example, `{domainName}.cn-shanghai.fc.aliyuncs.com`.', example='demo-service-demo-function-jkhksh'),
  invocationRole?: string(name='invocationRole', description='The ARN of the RAM role that is used by the event source to invoke the function.', example='acs:ram::123456xxxx:role/fc-test'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The last modification time.', example='016-08-15T17:00:00.000+0000'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST'),
  sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:oss:cn-shanghai:12345xxxx:mybucket'),
  triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type.', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}'),
  triggerId?: string(name='triggerId', description='The unique ID of the trigger.', example='3e270f2f-cef2-421a-bc86-ff4e8088****'),
  triggerName?: string(name='triggerName', description='The name of the trigger.', example='demoTrigger'),
  triggerType?: string(name='triggerType', description='The trigger type, such as **oss**, **log**, **tablestore**, **timer**, **http**, **cdn_events**, and **mns_topic**.', example='oss'),
  urlInternet?: string(name='urlInternet', description='The public domain address. You can access HTTP triggers over the Internet by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou.fcapp.run'),
  urlIntranet?: string(name='urlIntranet', description='The private endpoint. In a VPC, you can access HTTP triggers by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou-vpc.fcapp.run'),
}

model UpdateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTriggerResponseBody(name='body'),
}

async function updateTrigger(request: UpdateTriggerRequest): UpdateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTrigger', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers/{triggerName}', 'json', false, 'json', request);
}

