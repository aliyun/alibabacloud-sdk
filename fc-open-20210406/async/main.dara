/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'FC-Open';
  @version = '2021-04-06';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'account-id.ap-northeast-1.fc.aliyuncs.com',
    ap-south-1 = 'account-id.ap-south-1.fc.aliyuncs.com',
    ap-southeast-1 = 'account-id.ap-southeast-1.fc.aliyuncs.com',
    ap-southeast-2 = 'account-id.ap-southeast-2.fc.aliyuncs.com',
    ap-southeast-3 = 'account-id.ap-southeast-3.fc.aliyuncs.com',
    ap-southeast-5 = 'account-id.ap-southeast-5.fc.aliyuncs.com',
    cn-beijing = 'account-id.cn-beijing.fc.aliyuncs.com',
    cn-chengdu = 'account-id.cn-chengdu.fc.aliyuncs.com',
    cn-hangzhou = 'account-id.cn-hangzhou.fc.aliyuncs.com',
    cn-hangzhou-finance = 'account-id.cn-hangzhou-finance.fc.aliyuncs.com',
    cn-hongkong = 'account-id.cn-hongkong.fc.aliyuncs.com',
    cn-huhehaote = 'account-id.cn-huhehaote.fc.aliyuncs.com',
    cn-north-2-gov-1 = 'account-id.cn-north-2-gov-1.fc.aliyuncs.com',
    cn-qingdao = 'account-id.cn-qingdao.fc.aliyuncs.com',
    cn-shanghai = 'account-id.cn-shanghai.fc.aliyuncs.com',
    cn-shenzhen = 'account-id.cn-shenzhen.fc.aliyuncs.com',
    cn-zhangjiakou = 'account-id.cn-zhangjiakou.fc.aliyuncs.com',
    eu-central-1 = 'account-id.eu-central-1.fc.aliyuncs.com',
    eu-west-1 = 'account-id.eu-west-1.fc.aliyuncs.com',
    us-east-1 = 'account-id.us-east-1.fc.aliyuncs.com',
    us-west-1 = 'account-id.us-west-1.fc.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AccelerationInfo {
  status?: string(name='status', example='Preparing'),
}

model AsyncConfigMeta {
  functionName?: string(name='functionName', example='functionName'),
  qualifier?: string(name='qualifier', example='LATEST'),
  serviceName?: string(name='serviceName', example='serviceName'),
}

model AvailableAZ {
  availableAZs?: string(name='availableAZs'),
}

model BatchWindow {
  countBasedWindow?: long(name='CountBasedWindow'),
  timeBasedWindow?: long(name='TimeBasedWindow'),
}

model CDNEventsTriggerConfig {
  eventName?: string(name='eventName'),
  eventVersion?: string(name='eventVersion'),
  filter?: map[string][ string ](name='filter'),
  notes?: string(name='notes'),
}

model CertConfig {
  certName?: string(name='certName'),
  certificate?: string(name='certificate', example='-----BEGIN CERTIFICATE----- xxxxx -----END CERTIFICATE-----'),
  privateKey?: string(name='privateKey', example='-----BEGIN RSA PRIVATE KEY----- xxxxx -----END RSA PRIVATE KEY-----'),
}

model Code {
  ossBucketName?: string(name='ossBucketName', example='demo-bucket'),
  ossObjectName?: string(name='ossObjectName', example='demo-key'),
  zipFile?: string(name='zipFile', example='UEsDBAoAAAAAANFUiFYAAAAAAAAAAAAAAAAFABwAY29kZS9VVAkAA6rTMGSq0zBk dXgLAAEE9gEAAAQUAAAAUEsDBBQAAAAIANFUiFaigyIV4wEAAM4DAAANABwAY29k ZS9pbmRleC5qc1VUCQADqtMwZKvTMGR1eAsAAQT2AQAABBQAAAB1k81u1DAQx+9+ irnFqVJHHCioq+UAEqIcALXlhBByktmNqWOntrPbgPZF+iy8E6+AvfYmUYFc4vH/ NzOZj+y4gS26a75/rZsR1mDwfhAGaWb4/rzyd1m+IrtIvdWme4oFpNx44cRV/wCC Rkh5Rm41oOKVRHAtglDCCS7FDzSwQe4Gg0Bb53p7WZYtyp55cRwUq3VXNroeOlTu W4OOC1k+e37x8sUFa10nc9JL5NYH7PwhQH+HH1TthFbALVQo9f73r0eCD702zrIl uAZaa+XwwRVQcykrXt/lsH4FPwmAV6yWyKTe0mzyEmobCoSJp2qQsoAs3B5W5Kwk U6qWq0bGNL5DhW+T7QtIGac8TzL5VkgNe21kc+xkAEKre254Z32s6BOenrv2MjSf hVMx3d8PaATaKCVjVlvkDZqkJmNWO3StbiCq0ZjFMGe07vP1VQIGI2e1lsJP4+pT 0k5mBA6xknn9YktOo6JoTHFcp3xRoF81oKH4Oxz9hJf1LLHYoB2XA8ZlPEFfvN/X 1YILE2AW3btj2dTLRfTLZ+pA/kNnb8LklDu/HXvM/Mh530tR8/D95XerVbaIEsfF 0g8SXszpG2f8/tAFllKohr6/+fiB2SMgNiON/gWk7QpslifHQ1g18gdQSwECHgMK AAAAAADRVIhWAAAAAAAAAAAAAAAABQAYAAAAAAAAABAA7UEAAAAAY29kZS9VVAUA A6rTMGR1eAsAAQT2AQAABBQAAABQSwECHgMUAAAACADRVIhWooMiFeMBAADOAwAA DQAYAAAAAAABAAAApIE/AAAAY29kZS9pbmRleC5qc1VUBQADqtMwZHV4CwABBPYB AAAEFAAAAFBLBQYAAAAAAgACAJ4AAABpAgAAAAA='),
}

model CustomContainerConfig {
  accelerationType?: string(name='accelerationType', example='Default'),
  args?: string(name='args', example='["-arg1", "value1"]'),
  command?: string(name='command', example='["/code/myserver"]'),
  image?: string(name='image', example='registry-vpc.cn-hangzhou.aliyuncs.com/fc-demo/helloworld:v1beta1'),
  instanceID?: string(name='instanceID', example='cri-xxxxxxxxxx'),
  webServerMode?: boolean(name='webServerMode', example='true'),
}

model CustomContainerConfigInfo {
  accelerationInfo?: AccelerationInfo(name='accelerationInfo'),
  accelerationType?: string(name='accelerationType', example='Default'),
  args?: string(name='args', example='["-arg1", "value1"]'),
  command?: string(name='command', example='["/code/myserver"]'),
  image?: string(name='image', example='registry-vpc.cn-hangzhou.aliyuncs.com/fc-demo/helloworld:v1beta1'),
  instanceID?: string(name='instanceID', example='cri-xxxxxxxxxx'),
  webServerMode?: boolean(name='webServerMode', example='true'),
}

model CustomDNS {
  dnsOptions?: [
    DNSOption
  ](name='dnsOptions'),
  nameServers?: [ string ](name='nameServers'),
  searches?: [ string ](name='searches'),
}

model CustomHealthCheckConfig {
  failureThreshold?: int32(name='failureThreshold'),
  httpGetUrl: string(name='httpGetUrl'),
  initialDelaySeconds?: int32(name='initialDelaySeconds'),
  periodSeconds?: int32(name='periodSeconds'),
  successThreshold?: int32(name='successThreshold'),
  timeoutSeconds?: int32(name='timeoutSeconds'),
}

model CustomRuntimeConfig {
  args?: [ string ](name='args'),
  command?: [ string ](name='command'),
}

model DNSOption {
  name: string(name='name', example='ndots'),
  value?: string(name='value', example='2'),
}

model DeadLetterQueue {
  arn?: string(name='Arn'),
}

model DeliveryOption {
  concurrency?: long(name='concurrency'),
  eventSchema?: string(name='eventSchema'),
  mode?: string(name='mode'),
}

model Destination {
  destination?: string(name='destination'),
}

model DestinationConfig {
  onFailure?: Destination(name='onFailure'),
  onSuccess?: Destination(name='onSuccess'),
}

model Error {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
}

model ErrorInfo {
  errorMessage?: string(name='errorMessage'),
  stackTrace?: string(name='stackTrace'),
}

model EventBridgeTriggerConfig {
  asyncInvocationType?: boolean(name='asyncInvocationType'),
  eventRuleFilterPattern: string(name='eventRuleFilterPattern'),
  eventSinkConfig?: EventSinkConfig(name='eventSinkConfig'),
  eventSourceConfig: EventSourceConfig(name='eventSourceConfig'),
  runOptions?: RunOptions(name='runOptions'),
  triggerEnable?: boolean(name='triggerEnable'),
}

model EventSinkConfig {
  deliveryOption?: DeliveryOption(name='deliveryOption'),
}

model EventSourceConfig {
  eventSourceParameters?: EventSourceParameters(name='eventSourceParameters'),
  eventSourceType: string(name='eventSourceType'),
}

model EventSourceParameters {
  sourceDTSParameters?: SourceDTSParameters(name='sourceDTSParameters'),
  sourceKafkaParameters?: SourceKafkaParameters(name='sourceKafkaParameters'),
  sourceMNSParameters?: SourceMNSParameters(name='sourceMNSParameters'),
  sourceMQTTParameters?: SourceMQTTParameters(name='sourceMQTTParameters'),
  sourceRabbitMQParameters?: SourceRabbitMQParameters(name='sourceRabbitMQParameters'),
  sourceRocketMQParameters?: SourceRocketMQParameters(name='sourceRocketMQParameters'),
}

model HTTPTriggerConfig {
  authConfig?: string(name='authConfig'),
  authType?: string(name='authType', example='anonymous, function, jwt'),
  disableURLInternet?: boolean(name='disableURLInternet', description='禁用默认公网域名访问的开关，设置为true 时，访问函数默认提供的公网URL地址会返回403错误。设置为 false 则不会有任何影响。'),
  methods?: [ string ](name='methods'),
}

model InstanceLifecycleConfig {
  preFreeze?: LifecycleHook(name='preFreeze'),
  preStop?: LifecycleHook(name='preStop'),
}

model JWTAuthConfig {
  blackList?: string(name='blackList', example='/userInfo/*'),
  claimPassBy?: [ string ](name='claimPassBy', example='header:userID:userIDToFunction'),
  jwks?: string(name='jwks'),
  tokenLookup?: [ string ](name='tokenLookup'),
  whiteList?: [ string ](name='whiteList'),
}

model JaegerConfig {
  endpoint?: string(name='endpoint'),
}

model JobConfig {
  maxRetryTime?: long(name='maxRetryTime'),
  triggerInterval?: long(name='triggerInterval'),
}

model JobLogConfig {
  logstore?: string(name='logstore'),
  project?: string(name='project'),
}

model Layer {
  acl?: int32(name='acl'),
  arn?: string(name='arn'),
  arnV2?: string(name='arnV2'),
  code?: LayerCode(name='code'),
  codeChecksum?: string(name='codeChecksum'),
  codeSize?: long(name='codeSize'),
  compatibleRuntime?: [ string ](name='compatibleRuntime'),
  createTime?: string(name='createTime'),
  description?: string(name='description'),
  layerName?: string(name='layerName'),
  license?: string(name='license'),
  version?: int32(name='version'),
}

model LayerCode {
  location?: string(name='location', example='仅在查询具体层版本时返回'),
  repositoryType?: string(name='repositoryType'),
}

model LifecycleHook {
  handler?: string(name='handler'),
  timeout?: int32(name='timeout'),
}

model LogConfig {
  enableInstanceMetrics?: boolean(name='enableInstanceMetrics', example='true'),
  enableRequestMetrics?: boolean(name='enableRequestMetrics', example='true'),
  logBeginRule?: string(name='logBeginRule', example='DefaultRegex'),
  logstore?: string(name='logstore', example='test-prj'),
  project?: string(name='project', example='test-logstore'),
}

model LogTriggerConfig {
  enable?: boolean(name='enable'),
  functionParameter?: map[string]string(name='functionParameter'),
  jobConfig?: JobConfig(name='jobConfig'),
  logConfig?: JobLogConfig(name='logConfig'),
  sourceConfig?: SourceConfig(name='sourceConfig'),
}

model MeteringConfig {
  logConfig?: LogConfig(name='logConfig'),
  payerId?: string(name='payerId'),
  role?: string(name='role'),
}

model MnsTopicTriggerConfig {
  filterTag?: string(name='filterTag'),
  notifyContentFormat?: string(name='notifyContentFormat'),
  notifyStrategy?: string(name='notifyStrategy'),
}

model NASConfig {
  groupId?: int32(name='groupId', example='100'),
  mountPoints?: [ 
    {
      enableTLS?: boolean(name='enableTLS', example='false'),
      mountDir?: string(name='mountDir', example='/home/test'),
      serverAddr?: string(name='serverAddr', example='***-uni85.cn-hangzhou.nas.aliyuncs.com:/'),
    }
  ](name='mountPoints'),
  userId?: int32(name='userId', example='100'),
}

model OSSMountConfig {
  mountPoints?: [ 
    {
      bucketName?: string(name='bucketName', example='my-bucket'),
      bucketPath?: string(name='bucketPath', example='/my-dir'),
      endpoint?: string(name='endpoint', example='http://oss-cn-shanghai.aliyuncs.com'),
      mountDir?: string(name='mountDir', example='/mnt/dir'),
      readOnly?: boolean(name='readOnly', example='true'),
    }
  ](name='mountPoints'),
}

model OSSTriggerConfig {
  events?: [ string ](name='events'),
  filter?: OSSTriggerFilter(name='filter'),
}

model OSSTriggerFilter {
  key?: OSSTriggerKey(name='key'),
}

model OSSTriggerKey {
  prefix?: string(name='prefix'),
  suffix?: string(name='suffix'),
}

model OnDemandConfig {
  maximumInstanceCount?: long(name='maximumInstanceCount', example='10'),
  resource?: string(name='resource', example='services/serviceName/function/functionName'),
}

model OpenReservedCapacity {
  createdTime?: string(name='createdTime'),
  cu?: long(name='cu'),
  deadline?: string(name='deadline'),
  instanceId?: string(name='instanceId'),
  isRefunded?: string(name='isRefunded'),
  lastModifiedTime?: string(name='lastModifiedTime'),
}

model OutputCodeLocation {
  location?: string(name='location'),
  repositoryType?: string(name='repositoryType'),
}

model PathConfig {
  functionName?: string(name='functionName', example='f1'),
  methods?: [ string ](name='methods'),
  path?: string(name='path', example='/login'),
  qualifier?: string(name='qualifier', example='prod'),
  rewriteConfig?: RewriteConfig(name='rewriteConfig'),
  serviceName?: string(name='serviceName', example='s1'),
}

model PolicyItem {
  key: string(name='key', example='x-test-uid'),
  operator: string(name='operator', example='='),
  type: string(name='type', example='Header'),
  value: string(name='value', example='11111'),
}

model PreFreeze {
  handler?: string(name='handler', example='index.preFreeze'),
  timeout?: int32(name='timeout', example='10'),
}

model PreStop {
  handler?: string(name='handler', example='index.PreStop'),
  timeout?: int32(name='timeout', example='10'),
}

model RdsTriggerConfig {
  concurrency?: long(name='concurrency'),
  eventFormat?: string(name='eventFormat'),
  retry?: long(name='retry'),
  subscriptionObjects?: [ string ](name='subscriptionObjects'),
}

model Resource {
  resourceArn?: string(name='resourceArn'),
  tags?: map[string]string(name='tags'),
}

model RetryStrategy {
  maximumEventAgeInSeconds?: long(name='MaximumEventAgeInSeconds'),
  maximumRetryAttempts?: long(name='MaximumRetryAttempts'),
  pushRetryStrategy?: string(name='PushRetryStrategy'),
}

model RewriteConfig {
  equalRules?: [ 
    {
      match?: string(name='match', example='/old'),
      replacement?: string(name='replacement', example='/new'),
    }
  ](name='equalRules'),
  regexRules?: [ 
    {
      match?: string(name='match', example='^/js/(.*?)$'),
      replacement?: string(name='replacement', example='/public/javascripts/$1'),
    }
  ](name='regexRules'),
  wildcardRules?: [ 
    {
      match?: string(name='match', example='/api/*'),
      replacement?: string(name='replacement', example='/$1'),
    }
  ](name='wildcardRules'),
}

model RouteConfig {
  routes?: [
    PathConfig
  ](name='routes'),
}

model RoutePolicy {
  condition: string(name='condition', example='AND'),
  policyItems: [
    PolicyItem
  ](name='policyItems'),
}

model RunOptions {
  batchWindow?: BatchWindow(name='batchWindow'),
  deadLetterQueue?: DeadLetterQueue(name='deadLetterQueue'),
  errorsTolerance?: string(name='errorsTolerance'),
  maximumTasks?: long(name='maximumTasks'),
  mode?: string(name='mode'),
  retryStrategy?: RetryStrategy(name='retryStrategy'),
}

model ScheduledActions {
  endTime?: string(name='endTime'),
  name?: string(name='name'),
  scheduleExpression?: string(name='scheduleExpression'),
  startTime?: string(name='startTime'),
  target?: long(name='target'),
}

model SourceConfig {
  logstore?: string(name='logstore'),
}

model SourceDTSParameters {
  brokerUrl: string(name='BrokerUrl', example='dts-cn-shanghai-vpc.aliyuncs.com:18003'),
  initCheckPoint: long(name='InitCheckPoint', example='1677340805'),
  password: string(name='Password', example='dtsTest123'),
  regionId: string(name='RegionId', example='cn-shanghai'),
  sid: string(name='Sid', example='dtse34j22j025aq26p'),
  taskId: string(name='TaskId', example='e34z2gm325qp37m'),
  topic: string(name='Topic', example='cn_shanghai_vpc_rm_uf6398ykj0218rk6t_dts_trigger_upgrade_from_old_version2'),
  username: string(name='Username', example='dts_trigger'),
}

model SourceKafkaParameters {
  consumerGroup: string(name='ConsumerGroup'),
  instanceId: string(name='InstanceId'),
  network?: string(name='Network'),
  offsetReset?: string(name='OffsetReset'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityGroupId?: string(name='SecurityGroupId'),
  topic: string(name='Topic'),
  vSwitchIds?: string(name='VSwitchIds'),
  vpcId?: string(name='VpcId'),
}

model SourceMNSParameters {
  isBase64Decode?: boolean(name='IsBase64Decode'),
  queueName: string(name='QueueName'),
  regionId?: string(name='RegionId'),
}

model SourceMQTTParameters {
  instanceId: string(name='InstanceId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  topic: string(name='Topic'),
}

model SourceRabbitMQParameters {
  instanceId: string(name='InstanceId'),
  queueName: string(name='QueueName'),
  regionId?: string(name='RegionId'),
  virtualHostName: string(name='VirtualHostName'),
}

model SourceRocketMQParameters {
  authType?: string(name='AuthType'),
  filterSql?: string(name='FilterSql'),
  filterType?: string(name='FilterType'),
  groupID: string(name='GroupID'),
  instanceEndpoint?: string(name='InstanceEndpoint'),
  instanceId: string(name='InstanceId'),
  instanceNetwork?: string(name='InstanceNetwork', example='PrivateNetwork'),
  instancePassword?: string(name='InstancePassword'),
  instanceSecurityGroupId?: string(name='InstanceSecurityGroupId'),
  instanceType?: string(name='InstanceType', example='Cloud_5'),
  instanceUsername?: string(name='InstanceUsername'),
  instanceVSwitchIds?: string(name='InstanceVSwitchIds'),
  instanceVpcId?: string(name='InstanceVpcId'),
  offset?: string(name='Offset', example='CONSUME_FROM_LAST_OFFSET'),
  regionId?: string(name='RegionId'),
  tag?: string(name='Tag'),
  timestamp?: long(name='Timestamp'),
  topic: string(name='Topic'),
}

model StatefulAsyncInvocation {
  alreadyRetriedTimes?: long(name='alreadyRetriedTimes', example='3'),
  destinationStatus?: string(name='destinationStatus', example='Succeeded'),
  endTime?: long(name='endTime', example='1633449599'),
  events?: [
    StatefulAsyncInvocationEvent
  ](name='events'),
  functionName?: string(name='functionName', example='functionName'),
  instanceId?: string(name='instanceId', example='D4-4BA6-5293-9FD1-882707E'),
  invocationErrorMessage?: string(name='invocationErrorMessage', example='UnhandledInvocationError'),
  invocationId?: string(name='invocationId', example='cxxdfd'),
  invocationPayload?: string(name='invocationPayload', example='"body"'),
  qualifier?: string(name='qualifier', example='LATEST'),
  requestId?: string(name='requestId', example='ABA740D4-4BA6-5293-9FD1-882707EADC37'),
  serviceName?: string(name='serviceName', example='serviceName'),
  startedTime?: long(name='startedTime', example='1633449590'),
  status?: string(name='status', example='Running'),
}

model StatefulAsyncInvocationEvent {
  eventDetail?: string(name='eventDetail', example='{"Error":"UnhandledInvocationError"}'),
  eventId?: long(name='eventId', example='1'),
  status?: string(name='status', example='Enqueued'),
  timestamp?: long(name='timestamp', example='1647420449721'),
}

model TLSConfig {
  cipherSuites: [ string ](name='cipherSuites'),
  maxVersion?: string(name='maxVersion', example='TLSv1.3'),
  minVersion: string(name='minVersion', example='TLSv1.0'),
}

model TargetTrackingPolicies {
  endTime?: string(name='endTime'),
  maxCapacity?: long(name='maxCapacity'),
  metricTarget?: double(name='metricTarget'),
  metricType?: string(name='metricType'),
  minCapacity?: long(name='minCapacity'),
  name?: string(name='name'),
  startTime?: string(name='startTime'),
}

model TimeTriggerConfig {
  cronExpression?: string(name='cronExpression'),
  enable?: boolean(name='enable'),
  payload?: string(name='payload'),
}

model TracingConfig {
  params: map[string]string(name='params'),
  type: string(name='type', example='Jaeger'),
}

model Trigger {
  createdTime?: string(name='createdTime'),
  domainName?: string(name='domainName'),
  invocationRole?: string(name='invocationRole'),
  lastModifiedTime?: string(name='lastModifiedTime'),
  qualifier?: string(name='qualifier'),
  sourceArn?: string(name='sourceArn'),
  status?: string(name='status'),
  targetArn?: string(name='targetArn'),
  triggerConfig?: string(name='triggerConfig'),
  triggerId?: string(name='triggerId'),
  triggerName?: string(name='triggerName', example='abc'),
  triggerType?: string(name='triggerType'),
  urlInternet?: string(name='urlInternet'),
  urlIntranet?: string(name='urlIntranet'),
}

model VPCConfig {
  role?: string(name='role'),
  securityGroupId?: string(name='securityGroupId', example='sg-bp18hj1wtxgy3b0***'),
  vSwitchIds?: [ string ](name='vSwitchIds'),
  vpcId?: string(name='vpcId', example='vpc-***'),
}

model VendorConfig {
  meteringConfig?: MeteringConfig(name='meteringConfig'),
}

model WAFConfig {
  enableWAF?: boolean(name='enableWAF'),
}

model ClaimGPUInstanceRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='test-trace-id', position='Header'),
  diskPerformanceLevel?: string(name='diskPerformanceLevel', description='The disk performance level of the GPU rendering instance.', example='PL0', position='Body'),
  diskSizeGigabytes?: string(name='diskSizeGigabytes', description='The system disk space of the GPU rendering instance.', example='100', position='Body'),
  imageId: string(name='imageId', description='The image ID of the GPU-rendered instance.', example='m-foobar', position='Body'),
  instanceType: string(name='instanceType', description='The specifications of the GPU rendering instance.', example='ecs.gn7i-c8g1.2xlarge', position='Body'),
  internetBandwidthOut?: string(name='internetBandwidthOut', description='The outbound Internet bandwidth of the GPU rendering instance.', example='100', position='Body'),
  password?: string(name='password', description='The password of the GPU rendering instance.', example='MyPassword', position='Body'),
  role?: string(name='role', description='The role of the user.', example='acs:ram::1234567890:role/fc-test', position='Body'),
  sgId?: string(name='sgId', description='The ID of the security group.', example='sg-xxxx', position='Body'),
  sourceCidrIp: string(name='sourceCidrIp', description='The source IPv4 CIDR block of the GPU rendering instance.', example='0.0.0.0/0', position='Body'),
  tcpPortRange?: [ string ](name='tcpPortRange', description='The range of TCP ports that are open to the security group of the GPU rendering instance.', position='Body'),
  udpPortRange?: [ string ](name='udpPortRange', description='The range of UDP ports that are open to the security group of the GPU rendering instance.', position='Body'),
  vpcId?: string(name='vpcId', description='The ID of the VPC in which the instance resides.', example='v-xxxx', position='Body'),
  vswId?: string(name='vswId', description='The ID of the vSwitch.', example='vsw-xxxx', position='Body'),
}

model ClaimGPUInstanceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the product instance is created.', example='2022-11-11 07:31:04.899465017 +0000 UTC m=+37.671563424'),
  instanceId?: string(name='instanceId', description='The ID of the instance that you query.', example='i-xxx'),
  publicIp?: string(name='publicIp', description='The public IP address of the server.', example='0.0.0.0'),
}

model ClaimGPUInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClaimGPUInstanceResponseBody(name='body'),
}

async function claimGPUInstance(request: ClaimGPUInstanceRequest): ClaimGPUInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ClaimGPUInstance', 'POST', '/2021-04-06/gpuInstances', 'json', false, 'json', request);
}

model CreateAliasRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='service_name', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r9s89isisi****', position='Header'),
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The additional version to which the alias points and the weight of the additional version.

*   The additional version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.', position='Body'),
  aliasName: string(name='aliasName', description='The name of the alias. The name can contain letters, digits, underscores (\\_), and hyphens (-) only. The name cannot start with a digit or a hyphen (-). The name must be 1 to 128 characters in length. The name cannot be set to **LATEST**', example='alias_test', position='Body'),
  description?: string(name='description', description='The description of the alias.', example='test_description', position='Body'),
  resolvePolicy?: string(name='resolvePolicy', description='The canary release mode. Valid values:

*   **Random**: random canary release. This is the default value.
*   **Content**: rule-based canary release.', example='Random', position='Body'),
  routePolicy?: RoutePolicy(name='routePolicy', description='The canary release rule. Traffic that meets the canary release rule is routed to the canary release instance.', position='Body'),
  versionId: string(name='versionId', description='The ID of the version to which the alias points.', example='1', position='Body'),
}

model CreateAliasResponseBody = {
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The additional version to which the alias points and the weight of the additional version.

*   The additional version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.'),
  aliasName?: string(name='aliasName', description='The name of the alias.', example='alias_test'),
  createdTime?: string(name='createdTime', description='The time when the alias was created.', example='2020-04-23T06:32:43Z'),
  description?: string(name='description', description='The description of the alias.', example='test_description'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the alias was last modified.', example='2020-04-23T06:32:43Z'),
  versionId?: string(name='versionId', description='The ID of the version to which the alias points.', example='1'),
}

model CreateAliasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAliasResponseBody(name='body'),
}

async function createAlias(request: CreateAliasRequest): CreateAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAlias', 'POST', '/2021-04-06/services/{serviceName}/aliases', 'json', false, 'json', request);
}

model CreateCustomDomainRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.', position='Body'),
  domainName: string(name='domainName', description='The domain name. Enter a custom domain name that has obtained an ICP filing in the Alibaba Cloud ICP Filing system, or a custom domain name whose ICP filing information includes Alibaba Cloud as a service provider.', example='example.com', position='Body'),
  protocol?: string(name='protocol', description='The protocol types supported by the domain name. Valid values:

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP', position='Body'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.', position='Body'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.', position='Body'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.', position='Body'),
}

model CreateCustomDomainResponseBody = {
  accountId?: string(name='accountId', description='The ID of your Alibaba Cloud account.', example='1986114****4305'),
  apiVersion?: string(name='apiVersion', description='The version of the API.', example='2016-08-15'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.'),
  createdTime?: string(name='createdTime', description='The time when the domain name was added.', example='2020-07-27T08:02:19Z'),
  domainName?: string(name='domainName', description='The domain name.', example='example.com'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the domain name was last modified.', example='2020-07-27T08:02:19Z'),
  protocol?: string(name='protocol', description='The protocol types supported by the domain name. Valid values:

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.'),
}

model CreateCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomDomainResponseBody(name='body'),
}

async function createCustomDomain(request: CreateCustomDomainRequest): CreateCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCustomDomain', 'POST', '/2021-04-06/custom-domains', 'json', false, 'json', request);
}

model CreateFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='serviceName', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='The CRC-64 value of the function code package.', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request. The value is the same as that of the requestId parameter in the response.', example='test-trace-id', position='Header'),
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000', position='Body'),
  code?: Code(name='code', description='The code of the function. The code must be packaged into a ZIP file. Choose **code** or **customContainerConfig** for the function.', position='Body'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value is a multiple of 0.05.', example='1.5', position='Body'),
  customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configurations of the custom container runtime. After you configure the custom container runtime, Function Compute can execute the function in a container created from a custom image. Choose **code** or **customContainerConfig** for the function.', position='Body'),
  customDNS?: CustomDNS(name='customDNS', description='The custom Domain Name System (DNS) configurations of the function.', position='Body'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.', position='Body'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime.', position='Body'),
  description?: string(name='description', description='The description of the function.', example='function-description', position='Body'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512', position='Body'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that you configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Environment variables](~~69777~~).', position='Body'),
  functionName: string(name='functionName', description='The name of the function. The name can contain letters, digits, underscores (\\_), and hyphens (-) only. The name cannot start with a digit or a hyphen (-). The name must be 1 to 64 characters in length.', example='functionName', position='Body'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='The GPU memory capacity for the function. Unit: MB. The value is a multiple of 1,024.', example='2048', position='Body'),
  handler: string(name='handler', description='The handler of the function. The format varies based on the programming language. For more information, see [Function handlers](~~157704~~).', example='index.handler', position='Body'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the Initializer hook. Unit: seconds. Default value: 3. Valid values: 1 to 300. When this period expires, the execution of the Initializer hook is terminated.', example='60', position='Body'),
  initializer?: string(name='initializer', description='The handler of the Initializer hook. For more information, see [Initializer hooks](~~157704~~).', example='index.initializer', position='Body'),
  instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10', position='Body'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.', position='Body'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this property to implement graceful scale-ups for instances. If the number of concurrent requests on an instance is greater than the soft concurrency value of the instance, an instance scale-up is triggered. For example, if your instance requires a long time to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of the **instanceConcurrency** parameter.', example='5', position='Body'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance
*   **fc.gpu.tesla.1**: GPU-accelerated instance (Tesla T4)
*   **fc.gpu.ampere.1**: GPU-accelerated instance (Ampere A10)
*   **g1**: same as **fc.gpu.tesla.1**', example='e1', position='Body'),
  layers?: [ string ](name='layers', description='An array that consists of the information of layers.

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name as a layer with a larger subscript.', position='Body'),
  memorySize?: int32(name='memorySize', description='The memory size for the function. Unit: MB. The value must be a multiple of 64. The memory size varies based on the function instance type. For more information, see [Instance types](~~179379~~).', example='512', position='Body'),
  runtime: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.10**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore3.1**, **dotnetcore2.1**, **custom.debian10**, **custom**, and **custom-container**. For more information, see [Supported function runtime environments](~~73338~~).', example='python3.9', position='Body'),
  timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 3. Minimum value: 1. When the period ends, the execution of the function is terminated.', example='60', position='Body'),
}

model CreateFunctionResponseBody = {
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000'),
  codeChecksum?: string(name='codeChecksum', description='The CRC-64 value of the function code package.', example='5434025278388143772'),
  codeSize?: long(name='codeSize', description='The size of the function code package that is returned by the system. Unit: bytes.', example='1024'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value is a multiple of 0.05.', example='1.5'),
  createdTime?: string(name='createdTime', description='The time when the function was created.', example='2016-08-15T15:00:00.000+0000'),
  customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configurations of the custom container runtime. After you configure the custom container runtime, Function Compute can execute the function in a container created from a custom image.'),
  customDNS?: CustomDNS(name='customDNS', description='The custom DNS configurations of the function.'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime.'),
  description?: string(name='description', description='The description of the function.', example='This is a demo hello world function'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that are configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Environment variables](~~69777~~).'),
  functionId?: string(name='functionId', description='The unique ID that is generated by the system for the function.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24
****'),
  functionName?: string(name='functionName', description='The name of the function.', example='demo-function'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='The GPU memory capacity for the function. Unit: MB. The value is a multiple of 1,024.', example='2048'),
  handler?: string(name='handler', description='The handler of the function.', example='index.handler'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the Initializer hook. Unit: seconds. Default value: 3. Minimum value: 1. When the period ends, the execution of the Initializer hook is terminated.', example='60'),
  initializer?: string(name='initializer', description='The handler of the Initializer hook. The format is determined by the programming language.', example='index.handler'),
  instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the value of soft concurrency, an instance scale-up is triggered. For example, if your instance requires a long time to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of the **instanceConcurrency** parameter.', example='5'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance
*   **fc.gpu.tesla.1**: GPU-accelerated instance (Tesla T4)
*   **fc.gpu.ampere.1**: GPU-accelerated instance (Ampere A10)
*   **g1**: same as **fc.gpu.tesla.1**', example='e1'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the function was last modified.', example='2016-08-15T17:00:00.000+0000'),
  layers?: [ string ](name='layers', description='An array that consists of the information of layers.

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name as a layer with a larger subscript.'),
  layersArnV2?: [ string ](name='layersArnV2', description='ARN list of layers'),
  memorySize?: int32(name='memorySize', description='The memory size that is configured for the function. Unit: MB.', example='512'),
  runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.10**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore3.1**, **dotnetcore2.1**, **custom.debian10**, **custom**, and **custom-container**. For more information, see [Supported function runtime environments](~~73338~~).', example='python3.9'),
  timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 60. Valid values: 1 to 600. When this period expires, the execution of the function is terminated.', example='10'),
}

model CreateFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFunctionResponseBody(name='body'),
}

async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFunction', 'POST', '/2021-04-06/services/{serviceName}/functions', 'json', false, 'json', request);
}

model CreateLayerVersionRequest {
  layerName: string(name='layerName', description='The layer name. The name can be up to 128 character in length.', example='MyLayer', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The value is in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r4isu4sls****', position='Header'),
  code: Code(name='Code', description='The layer code.', position='Body'),
  compatibleRuntime?: [ string ](name='compatibleRuntime', description='The runtime environments that are supported by the layer.', position='Body'),
  description?: string(name='description', description='The layer description. The description can be up to 256 characters in length.', example='test', position='Body'),
}

model CreateLayerVersionResponseBody = {
  acl?: int32(name='acl', description='The access mode of the layer.', example='0'),
  arn?: string(name='arn', description='The Alibaba Cloud Resource Name (ARN) of the layer.', example='xxxxxxxx#Layer-name#1'),
  code?: OutputCodeLocation(name='code', description='The information about the layer code package.'),
  codeChecksum?: string(name='codeChecksum', description='The CRC-64 value of the layer code package. The value is calculated based on the **ECMA-182 **standard.', example='2825179536350****'),
  codesize?: long(name='codesize', description='The size of the layer code package. Unit: bytes.', example='421'),
  compatibleRuntime?: [ string ](name='compatibleRuntime', description='The runtime environments that are supported by the layer.'),
  createTime?: string(name='createTime', description='The time when the layer version was created. The time is in the yyyy-MM-ddTHH:mm:ssZ format.', example='2022-01-01T11:08:00Z'),
  description?: string(name='description', description='The description of the layer version.', example='the first layer'),
  layerName?: string(name='layerName', description='The layer name.', example='MyLayer'),
  version?: int32(name='version', description='The layer version.', example='1'),
}

model CreateLayerVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLayerVersionResponseBody(name='body'),
}

async function createLayerVersion(request: CreateLayerVersionRequest): CreateLayerVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLayerVersion', 'POST', '/2021-04-06/layers/{layerName}/versions', 'json', false, 'json', request);
}

model CreateServiceRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
  description?: string(name='description', description='The description of the service.', example='service_description', position='Body'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions to access the Internet. This is the default value.
*   **false**: does not allow functions to access the Internet.', example='true', position='Body'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration. Function Compute writes function execution logs to the specified Logstore.', position='Body'),
  nasConfig?: NASConfig(name='nasConfig', description='The configuration of the Apsara File Storage NAS (NAS) file system. The configurations allow functions in the specified service to access the NAS file system.', position='Body'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.', position='Body'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::188077086902****:role/fc-test', position='Body'),
  serviceName: string(name='serviceName', description='The name of the service. The name can contain only letters, digits, hyphens (-), and underscores (\\_). It cannot start with a digit or hyphen (-). It must be 1 to 128 characters in length.', example='service_Name', position='Body'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configuration of Tracing Analysis. After Function Compute is integrated with Tracing Analysis, you can record the duration of a request in Function Compute, view the cold start time of a function, and record the execution duration of a function. For more information, see [Tracing Analysis](~~189804~~).', position='Body'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configurations. The configurations allow functions in the specified service to access the specified VPC.', position='Body'),
}

model CreateServiceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the service was created.', example='2016-08-15T16:06:05.000+0000'),
  description?: string(name='description', description='The description of the service.', example='service_description'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions in the specified service to access the Internet.', example='true'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service was last modified.', example='2016-08-15T16:06:05.000+0000'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration. Function Compute writes function execution logs to the specified Logstore.'),
  nasConfig?: NASConfig(name='nasConfig', description='The configuration of the NAS file system. The configurations allow functions in the specified service to access the NAS file system.'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::188077086902****:role/fc-test'),
  serviceId?: string(name='serviceId', description='The unique ID generated by the system for the service.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24e737'),
  serviceName?: string(name='serviceName', description='The name of the service.', example='service_Name'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configuration of Tracing Analysis. After Function Compute is integrated with Tracing Analysis, you can record the duration of a request in Function Compute, view the cold start time of a function, and record the execution duration of a function. For more information, see [Tracing Analysis](~~189804~~).'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configurations. The configurations allow functions in the specified service to access the specified VPC.'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateService', 'POST', '/2021-04-06/services', 'json', false, 'json', request);
}

model CreateTriggerRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test', position='Body'),
  invocationRole?: string(name='invocationRole', description='The role that is used by the event source such as OSS to invoke the function. For more information, see [Overview](~~53102~~).', example='acs:ram::1234567890:role/fc-test', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Body'),
  sourceArn?: string(name='sourceArn', description='The Alibaba Cloud Resource Name (ARN) of the event source for the trigger.', example='acs:oss:cn-shanghai:12345:mybucket', position='Body'),
  triggerConfig: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type. For more information about the format, see the following topics:

* OSS trigger: [OSSTriggerConfig](~~415697~~).
* Log Service trigger: [LogTriggerConfig](~~415694~~).
* Time trigger: [TimeTriggerConfig](~~415712~~).
* HTTP trigger: [HTTPTriggerConfig](~~415685~~).
* Tablestore trigger: Specify the **SourceArn** parameter and leave this parameter empty.
* Alibaba Cloud CDN event trigger: [CDNEventsTriggerConfig](~~415674~~).
* MNS topic trigger: [MnsTopicTriggerConfig](~~415695~~).', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}', position='Body'),
  triggerName: string(name='triggerName', description='The name of the trigger. The name contains only letters, digits, hyphens (-), and underscores (\\_). The name must be 1 to 128 characters in length and cannot start with a digit or hyphen (-).', example='oss_create_object_demo', position='Body'),
  triggerType: string(name='triggerType', description='The type of the trigger. Valid values:

*   **oss**: OSS event trigger. For more information, see [Overview](~~62922~~).
*   **log**: Log Service trigger. For more information, see [Overview](~~84386~~).
*   **timer**: time trigger. For more information, see [Overview](~~68172~~).
*   **http**: HTTP trigger. For more information, see [Overview](~~71229~~).
*   **tablestore**: Tablestore trigger. For more information, see [Overview](~~100092~~).
*   **cdn_events**: CDN event trigger. For more information, see [Overview](~~73333~~).
*   **mns_topic**: MNS topic trigger. For more information, see [Overview](~~97032~~).', example='oss', position='Body'),
}

model CreateTriggerResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the trigger was created.', example='2016-08-15T15:00:00.000+0000'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test'),
  domainName?: string(name='domainName', description='The domain name used to invoke the function by using HTTP. You can add this domain name as the prefix to the endpoint of Function Compute. This way, you can invoke the function that corresponds to the trigger by using HTTP. For example, `{domainName}.cn-shanghai.fc.aliyuncs.com`.', example='demo-service-demo-function-jkhksh'),
  invocationRole?: string(name='invocationRole', description='The ARN of the RAM role that is used by the event source to invoke the function.', example='acs:ram::1234567890:role/fc-test'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the trigger was last modified.', example='016-08-15T17:00:00.000+0000'),
  qualifier?: string(name='qualifier', description='The version of the service.', example='LATEST'),
  sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:oss:cn-shanghai:12345:mybucket'),
  triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type.', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}'),
  triggerId?: string(name='triggerId', description='The unique ID of the trigger.', example='3e270f2f-cef2-421a-bc86-ff4e8088****'),
  triggerName?: string(name='triggerName', description='The name of the trigger. The name contains only letters, digits, hyphens (-), and underscores (\\_). The name must be 1 to 128 characters in length and cannot start with a digit or hyphen (-).', example='oss_create_object_trigger_demo'),
  triggerType?: string(name='triggerType', description='The trigger type, such as **oss**, **log**, **tablestore**, **timer**, **http**, **cdn_events**, and **mns_topic**.', example='oss'),
  urlInternet?: string(name='urlInternet', description='The public domain address. You can access HTTP triggers over the Internet by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou.fcapp.run'),
  urlIntranet?: string(name='urlIntranet', description='The private endpoint. In a VPC, you can access HTTP triggers by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou-vpc.fcapp.run'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTrigger(request: CreateTriggerRequest): CreateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTrigger', 'POST', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers', 'json', false, 'json', request);
}

model CreateVpcBindingRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
  vpcId: string(name='vpcId', description='The ID of the VPC to be bound.', example='v-xxxx', position='Body'),
}

model CreateVpcBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createVpcBinding(request: CreateVpcBindingRequest): CreateVpcBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVpcBinding', 'POST', '/2021-04-06/services/{serviceName}/bindings', 'none', false, 'json', request);
}

model DeleteAliasRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  aliasName: string(name='aliasName', description='The name of the alias.', example='test', position='Path'),
  ifMatch?: string(name='If-Match', description='If the ETag specified in the request matches the ETag value of the object, OSS transmits the object and returns 200 OK. If the ETag specified in the request does not match the ETag value of the object, OSS returns 412 Precondition Failed. 
The ETag value of a resource is used to check whether the resource has changed. You can check data integrity by using the ETag value. 
Default value: null', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r9s89isisi****', position='Header'),
}

model DeleteAliasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteAlias(request: DeleteAliasRequest): DeleteAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlias', 'DELETE', '/2021-04-06/services/{serviceName}/aliases/{aliasName}', 'none', false, 'json', request);
}

model DeleteCustomDomainRequest {
  domainName: string(name='domainName', description='The domain name.', example='example.com', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
}

model DeleteCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteCustomDomain(request: DeleteCustomDomainRequest): DeleteCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCustomDomain', 'DELETE', '/2021-04-06/custom-domains/{domainName}', 'none', false, 'json', request);
}

model DeleteFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  ifMatch?: string(name='If-Match', description='The ETag value of the resource. This value is used to ensure that the modified resource is consistent with the resource to be modified. The ETag value is returned in the responses of the CREATE, GET, and UPDATE operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API. The value is the same as that of the requestId parameter in the response.', example='test-trace-id', position='Header'),
}

model DeleteFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunction', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}', 'none', false, 'json', request);
}

model DeleteFunctionAsyncInvokeConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='helloworld', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf*****', position='Header'),
  qualifier?: string(name='qualifier', description='The qualifier.', example='test', position='Query'),
}

model DeleteFunctionAsyncInvokeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteFunctionAsyncInvokeConfig(request: DeleteFunctionAsyncInvokeConfigRequest): DeleteFunctionAsyncInvokeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunctionAsyncInvokeConfig', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}/async-invoke-config', 'none', false, 'json', request);
}

model DeleteFunctionOnDemandConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='service_Name', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  ifMatch?: string(name='If-Match', description='If the ETag specified in the request matches the ETag value of the OndemandConfig, FC returns 200 OK. If the ETag specified in the request does not match the ETag value of the object, FC returns 412 Precondition Failed.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API, which is also the unique ID of the request.', example='r9s89isisi****', position='Header'),
  qualifier: string(name='qualifier', description='The alias of the service or LATEST.', example='prod', position='Query'),
}

model DeleteFunctionOnDemandConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteFunctionOnDemandConfig(request: DeleteFunctionOnDemandConfigRequest): DeleteFunctionOnDemandConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunctionOnDemandConfig', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}/on-demand-config', 'none', false, 'json', request);
}

model DeleteLayerVersionRequest {
  layerName: string(name='layerName', description='The name of the layer.', example='MyLayer', position='Path'),
  version: string(name='version', description='The version of the layer.', example='1', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='asdf****', position='Header'),
}

model DeleteLayerVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteLayerVersion(request: DeleteLayerVersionRequest): DeleteLayerVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLayerVersion', 'DELETE', '/2021-04-06/layers/{layerName}/versions/{version}', 'none', false, 'json', request);
}

model DeleteServiceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  ifMatch?: string(name='If-Match', description='The ETag value of the service. This value is used to ensure that the modified service is consistent with the service to be modified. The ETag value is returned in the responses of the [CreateService](~~175256~~), [UpdateService](~~188167~~), and [GetService](~~189225~~) operations.', example='service_name', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='r9s89isisi****', position='Header'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteService', 'DELETE', '/2021-04-06/services/{serviceName}', 'none', false, 'json', request);
}

model DeleteServiceVersionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  versionId: string(name='versionId', description='The version of the service.', example='1', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
}

model DeleteServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteServiceVersion(request: DeleteServiceVersionRequest): DeleteServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceVersion', 'DELETE', '/2021-04-06/services/{serviceName}/versions/{versionId}', 'none', false, 'json', request);
}

model DeleteTriggerRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  triggerName: string(name='triggerName', description='The name of the trigger.', example='demoTrigger', position='Path'),
  ifMatch?: string(name='If-Match', description='This parameter is used to ensure that the modified resource is consistent with the resource to be modified. You can obtain the parameter value from the responses of [CreateTrigger](~~415729~~), [GetTrigger](~~415732~~), and [UpdateTrigger](~~415731~~) operations.', example='e19d5cd5af0378da05f63f891c74****', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteTrigger(request: DeleteTriggerRequest): DeleteTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTrigger', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers/{triggerName}', 'none', false, 'json', request);
}

model DeleteVpcBindingRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  vpcId: string(name='vpcId', description='The ID of the VPC to be unbound.', example='vpc-xxxx', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
}

model DeleteVpcBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteVpcBinding(request: DeleteVpcBindingRequest): DeleteVpcBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVpcBinding', 'DELETE', '/2021-04-06/services/{serviceName}/bindings/{vpcId}', 'none', false, 'json', request);
}

model DeregisterEventSourceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  sourceArn: string(name='sourceArn', description='The ARN of the event source.', example='acs:eventbridge:cn-shanghai:123456:eventbus/mns-test/rule/fc-test1/target/abc', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Query'),
}

model DeregisterEventSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deregisterEventSource(request: DeregisterEventSourceRequest): DeregisterEventSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeregisterEventSource', 'DELETE', '/2021-04-06/services/{serviceName}/functions/{functionName}/event-sources/{sourceArn}', 'none', false, 'json', request);
}

model GetAccountSettingsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
}

model GetAccountSettingsResponseBody = {
  availableAZs?: [ string ](name='availableAZs', description='The list of zones.'),
  defaultRole?: string(name='defaultRole', description='The default RAM role.', example='acs:ram::1234:role/aliyunfcdefaultrole'),
}

model GetAccountSettingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountSettingsResponseBody(name='body'),
}

async function getAccountSettings(request: GetAccountSettingsRequest): GetAccountSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAccountSettings', 'GET', '/2021-04-06/account-settings', 'json', false, 'json', request);
}

model GetAliasRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='service_name', position='Path'),
  aliasName: string(name='aliasName', description='The name of the alias.', example='alias_test', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r4isu4sls****', position='Header'),
}

model GetAliasResponseBody = {
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The additional version to which the alias points and the weight of the additional version.

*   The additional version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.'),
  aliasName?: string(name='aliasName', description='The name of the alias.', example='alias_test'),
  createdTime?: string(name='createdTime', description='The time when the alias was created.', example='2020-07-27T06:37:29Z'),
  description?: string(name='description', description='The description of the alias.', example='test_description'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the alias was last modified.', example='2020-07-27T06:37:29Z'),
  resolvePolicy?: string(name='resolvePolicy', description='The canary release mode. Valid values:

*   **Random**: random canary release. This is the default value.
*   **Content**: rule-based canary release.', example='Random'),
  routePolicy?: RoutePolicy(name='routePolicy', description='The canary release rule. Traffic that meets the canary release rule is routed to the canary release instance.'),
  versionId?: string(name='versionId', description='The version to which the alias points.', example='2'),
}

model GetAliasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAliasResponseBody(name='body'),
}

async function getAlias(request: GetAliasRequest): GetAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlias', 'GET', '/2021-04-06/services/{serviceName}/aliases/{aliasName}', 'json', false, 'json', request);
}

model GetCustomDomainRequest {
  domainName: string(name='domainName', description='The domain name.', example='example.com', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='r4isu4sls****', position='Header'),
}

model GetCustomDomainResponseBody = {
  accountId?: string(name='accountId', description='The ID of your Alibaba Cloud account.', example='2016-08-15'),
  apiVersion?: string(name='apiVersion', description='The version of the API.', example='2016-08-15'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.'),
  createdTime?: string(name='createdTime', description='The time when the custom domain name was created.', example='2020-07-27T08:02:19Z'),
  domainName?: string(name='domainName', description='The domain name.', example='example.com'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the domain name was last modified.', example='2020-07-27T08:02:19Z'),
  protocol?: string(name='protocol', description='The protocol types supported by the domain name. Valid values:

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.'),
}

model GetCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCustomDomainResponseBody(name='body'),
}

async function getCustomDomain(request: GetCustomDomainRequest): GetCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCustomDomain', 'GET', '/2021-04-06/custom-domains/{domainName}', 'json', false, 'json', request);
}

model GetFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='service_name', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='function_name', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='demoQualifier', position='Query'),
}

model GetFunctionResponseBody = {
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000'),
  codeChecksum?: string(name='codeChecksum', description='The CRC-64 value of the function code package.', example='2825179536350****'),
  codeSize?: long(name='codeSize', description='The size of the function code package. Unit: byte.', example='421'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value must be a multiple of 0.05.', example='1.5'),
  createdTime?: string(name='createdTime', description='The time when the function was created.', example='2020-04-01T08:15:27Z'),
  customContainerConfig?: CustomContainerConfigInfo(name='customContainerConfig', description='The configurations of the custom container runtime. After you configure the custom container runtime, Function Compute can execute the function in a container created from a custom image.'),
  customDNS?: CustomDNS(name='customDNS', description='The custom DNS configurations of the function.'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime.'),
  description?: string(name='description', description='The description of the function.', example='test_description'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that are configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Environment variables](~~69777~~).'),
  functionId?: string(name='functionId', description='The ID that is generated by the system for the function. Each function ID is unique in Function Compute.', example='aa715851-1c20-4b89-a8fb-***'),
  functionName?: string(name='functionName', description='The name of the function.', example='function_name'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='The GPU memory capacity for the function. Unit: MB. The value is a multiple of 1,024.', example='2048'),
  handler?: string(name='handler', description='The handler of the function. For more information, see [Function handler](~~157704~~).', example='index.handler'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the Initializer hook. Unit: seconds. Default value: 3. Valid values: 1 to 300. When this period ends, the execution of the Initializer hook is terminated.', example='60'),
  initializer?: string(name='initializer', description='The handler of the Initializer hook. The format of the value is determined by the programming language that you use. For more information, see [Initializer hook](~~157704~~).', example='index.handler'),
  instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the value of soft concurrency, an instance scale-up is triggered. For example, if your instance requires a long time to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of the **instanceConcurrency** parameter.', example='5'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance
*   **fc.gpu.tesla.1**: GPU-accelerated instance (Tesla T4)
*   **fc.gpu.ampere.1**: GPU-accelerated instance (Ampere A10)
*   **g1**: same as fc.gpu.tesla.1', example='e1'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the function was last modified.', example='2020-04-01T08:15:27Z'),
  layers?: [ string ](name='layers', description='The layers (ARN V1 version).

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name as a layer with a larger subscript.

**

**Warning** This parameter is to be deprecated. Use layersArnV2.'),
  layersArnV2?: [ string ](name='layersArnV2', description='The list of layers (ARN V2 version).

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name as a layer with a larger subscript.'),
  memorySize?: int32(name='memorySize', description='The memory size for the function. Unit: MB. The value must be a multiple of 64. The memory size varies based on the function instance type. For more information, see [Instance types](~~179379~~).', example='256'),
  runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore2.1**, **custom**, and **custom-container**.', example='python3'),
  timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 60. Valid values: 1 to 600. When this period expires, the execution of the function is terminated.', example='60'),
}

model GetFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionResponseBody(name='body'),
}

async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunction', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}', 'json', false, 'json', request);
}

model GetFunctionAsyncInvokeConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='helloworld', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the Function Compute is called. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the function.', example='test', position='Query'),
}

model GetFunctionAsyncInvokeConfigResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the desktop group was created.', example='2020-09-10T02:45:02Z'),
  destinationConfig?: DestinationConfig(name='destinationConfig', description='The configuration struct of the destination for asynchronous invocations.', example='{"onSuccess": null,"onFailure": {"destination": "acs:mns:cn-shanghai:123:/queues/xxx/messages"}}'),
  function?: string(name='function', description='The name of the function.', example='helloworld'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the configuration was last modified.', example='2020-09-10T02:45:02Z'),
  maxAsyncEventAgeInSeconds?: long(name='maxAsyncEventAgeInSeconds', description='The maximum validity period of a message.', example='300'),
  maxAsyncRetryAttempts?: long(name='maxAsyncRetryAttempts', description='The maximum number of retries allowed after an asynchronous invocation fails.', example='3'),
  qualifier?: string(name='qualifier', description='The version or alias of the service to which the function belongs.', example='test'),
  service?: string(name='service', description='The name of the service.', example='demo-service'),
  statefulInvocation?: boolean(name='statefulInvocation', description='Indicates whether the asynchronous task feature is enabled.

*   **true**: The asynchronous task feature is enabled.
*   **false**: The asynchronous task feature is disabled.', example='true'),
}

model GetFunctionAsyncInvokeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionAsyncInvokeConfigResponseBody(name='body'),
}

/**
  * StatefulAsyncInvocation indicates whether the asynchronous task feature is enabled. If the value of StatefulAsyncInvocation is true, the asynchronous task feature is enabled. All asynchronous invocations change to asynchronous task mode.
  *
 */
async function getFunctionAsyncInvokeConfig(request: GetFunctionAsyncInvokeConfigRequest): GetFunctionAsyncInvokeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionAsyncInvokeConfig', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/async-invoke-config', 'json', false, 'json', request);
}

model GetFunctionCodeRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='demoQualifier', position='Query'),
}

model GetFunctionCodeResponseBody = {
  checksum?: string(name='checksum', description='The CRC-64 value of the function code package.', example='1234567890'),
  url?: string(name='url', description='The URL of the function code package.', example='http://func-code.oss-cn-shanghai.aliyuncs.com/1a2b3c4d5e6f'),
}

model GetFunctionCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionCodeResponseBody(name='body'),
}

async function getFunctionCode(request: GetFunctionCodeRequest): GetFunctionCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionCode', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/code', 'json', false, 'json', request);
}

model GetFunctionOnDemandConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The unique ID of the trace.', example='asdf****', position='Header'),
  qualifier: string(name='qualifier', description='Service alias or LATEST. Other versions are not supported.', example='prod', position='Query'),
}

model GetFunctionOnDemandConfigResponseBody = {
  maximumInstanceCount?: long(name='maximumInstanceCount', description='The maximum number of instances.', example='10'),
  resource?: string(name='resource', description='The description of the resource.', example='12345#servierName#qualifier#functionName'),
}

model GetFunctionOnDemandConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionOnDemandConfigResponseBody(name='body'),
}

async function getFunctionOnDemandConfig(request: GetFunctionOnDemandConfigRequest): GetFunctionOnDemandConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionOnDemandConfig', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/on-demand-config', 'json', false, 'json', request);
}

model GetLayerVersionRequest {
  layerName: string(name='layerName', description='The structure of the layer.', example='MyLayer', position='Path'),
  version: string(name='version', description='The type of the layer code.', example='1', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='This parameter is returned only when the information about a specific layer version is queried.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The location of the layer code.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The structure of the layer code.', example='asdf****', position='Header'),
}

model GetLayerVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Layer  
}

async function getLayerVersion(request: GetLayerVersionRequest): GetLayerVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLayerVersion', 'GET', '/2021-04-06/layers/{layerName}/versions/{version}', 'json', false, 'json', request);
}

model GetProvisionConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  qualifier: string(name='qualifier', description='The name of the alias.', example='prod', position='Query'),
}

model GetProvisionConfigResponseBody = {
  alwaysAllocateCPU?: boolean(name='alwaysAllocateCPU', description='Specifies whether to always allocate CPU to a function instance.', example='true'),
  current?: long(name='current', description='The actual number of provisioned instances.', example='1'),
  currentError?: string(name='currentError', description='The error message returned if a provisioned instance fails to be created.', example='image not found'),
  resource?: string(name='resource', description='The description of the resource.', example='12345#servierName#qualifier#functionName'),
  scheduledActions?: [
    ScheduledActions
  ](name='scheduledActions', description='The configurations of scheduled auto scaling.'),
  target?: long(name='target', description='The expected number of provisioned instances.', example='5'),
  targetTrackingPolicies?: [
    TargetTrackingPolicies
  ](name='targetTrackingPolicies', description='The configurations of metric-based auto scaling.'),
}

model GetProvisionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProvisionConfigResponseBody(name='body'),
}

async function getProvisionConfig(request: GetProvisionConfigRequest): GetProvisionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProvisionConfig', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/provision-config', 'json', false, 'json', request);
}

model GetResourceTagsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  resourceArn: string(name='resourceArn', description='The Alibaba Cloud Resource Name (ARN) of the resource. 

> You can use the value of this parameter to query the information about the resource, such as the account, service, and region information of the resource. You can manage tags only for services for top level resources.', example='acs:fc:cn-shanghai:188077086902****:services/demo', position='Query'),
}

model GetResourceTagsResponseBody = {
  resourceArn?: string(name='resourceArn', description='The ARN of the resource. 

> You can use the value of this parameter to query the information about the resource, such as the account, service, and region information of the resource.', example='acs:fc:cn-shanghai:188077086902****:services/demo'),
  tags?: map[string]string(name='tags', description='The tag dictionary.', example='{"k1":"v1"}'),
}

model GetResourceTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceTagsResponseBody(name='body'),
}

async function getResourceTags(request: GetResourceTagsRequest): GetResourceTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceTags', 'GET', '/2021-04-06/tag', 'json', false, 'json', request);
}

model GetServiceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='test', position='Query'),
}

model GetServiceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the service was created.', example='2020-04-03T05:57:28Z'),
  description?: string(name='description', description='The description of the service.', example='demo-service-test'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions to access the Internet.', example='true'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service was last modified.', example='2020-04-03T05:57:28Z'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration, which specifies a Logstore to store function execution logs.'),
  nasConfig?: NASConfig(name='nasConfig', description='The configurations of the NAS file system. The configuration allows functions in the specified service in Function Compute to access the NAS file system.'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. Scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::1234567890:role/fc-test'),
  serviceId?: string(name='serviceId', description='The unique ID generated by the system for the service.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24e737'),
  serviceName?: string(name='serviceName', description='The name of the service.', example='demo-service'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configuration of Tracing Analysis. After you configure Tracing Analysis for a service in Function Compute, you can record the execution duration of a request, view the amount of cold start time for a function, and record the execution duration of a function. For more information, see [Overview](~~189804~~).'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configuration. The configuration allows a function to access the specified VPC.'),
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceResponseBody(name='body'),
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetService', 'GET', '/2021-04-06/services/{serviceName}', 'json', false, 'json', request);
}

model GetStatefulAsyncInvocationRequest {
  serviceName: string(name='serviceName', description='The event triggered by the asynchronous task.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The number of retries after the asynchronous task fails.', example='demo-function', position='Path'),
  invocationId: string(name='invocationId', description='The request ID of the asynchronous task.', example='e026ae92-61e5-472f-b32d-1c9e3c4e****', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The list of events that trigger the asynchronous task.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='The structure of the asynchronous task.', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='Alibaba Cloud provides SDKs for multiple programming languages to help you integrate Alibaba Cloud services by using APIs. We recommend that you use an SDK to call API operations. This frees you from manual signature verification.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcInvocationType?: string(name='X-Fc-Invocation-Type', description='StatefulAsyncInvocation: asynchronous task. Asynchronous tasks allow you to manage the states on the basis of common asynchronous invocations, which is more suitable for task scenarios.', example='Async', position='Header'),
  xFcLogType?: string(name='X-Fc-Log-Type', description='The latest version of Function Compute API.', example='Tail', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='You can search for API operations, call and debug API operations online, and dynamically generate executable sample code for SDKs.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The ID of the instance that is used to run the asynchronous task.', example='LATEST', position='Query'),
}

model GetStatefulAsyncInvocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StatefulAsyncInvocation  
}

/**
  * The version or alias of the service to which the asynchronous task belongs.
  *
 */
async function getStatefulAsyncInvocation(request: GetStatefulAsyncInvocationRequest): GetStatefulAsyncInvocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetStatefulAsyncInvocation', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/stateful-async-invocations/{invocationId}', 'json', false, 'json', request);
}

model GetTriggerRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  triggerName: string(name='triggerName', description='The name of the trigger.', example='demoTrigger', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
}

model GetTriggerResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the trigger was created.', example='2016-08-15T15:00:00.000+0000'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test'),
  domainName?: string(name='domainName', description='The domain name used to invoke the function by using HTTP. You can add this domain name as the prefix to the endpoint of Function Compute. This way, you can invoke the function that corresponds to the trigger by using HTTP. For example, `{domainName}.cn-shanghai.fc.aliyuncs.com`.', example='demo-service-demo-function-jkhksh'),
  invocationRole?: string(name='invocationRole', description='The ARN of the RAM role that is used by the event source to invoke the function.', example='acs:ram::123456xxxx:role/fc-test'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the trigger was last modified.', example='016-08-15T17:00:00.000+0000'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST'),
  sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:oss:cn-shanghai:123456xxxx:mybucket'),
  triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type. For more information about the format, see the following topics:

*   Object Storage Service (OSS) trigger: [OSSTriggerConfig](~~415697~~).
*   Simple Log Service trigger: [LogTriggerConfig](~~415694~~).
*   Time trigger: [TimeTriggerConfig](~~415712~~).
*   HTTP trigger: [HTTPTriggerConfig](~~415685~~).
*   Tablestore trigger: Specify the **SourceArn** parameter and leave this parameter empty.
*   Alibaba Cloud CDN event trigger: [CDNEventsTriggerConfig](~~415674~~).
*   MNS topic trigger: [MnsTopicTriggerConfig](~~415695~~).
*   EventBridge triggers: [EventBridgeTriggerConfig](~~2508622~~).', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}'),
  triggerId?: string(name='triggerId', description='The unique ID of the trigger.', example='3e270f2f-cef2-421a-bc86-ff4e8088476a'),
  triggerName?: string(name='triggerName', description='The name of the trigger.', example='demoTrigger'),
  triggerType?: string(name='triggerType', description='The trigger type. Example values: **oss**, **log**, **tablestore**, **timer**, **http**, **cdn_events**, **mns_topic**, and **eventbridge**.', example='oss'),
  urlInternet?: string(name='urlInternet', description='The public domain address. You can access HTTP triggers over the Internet by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou.fcapp.run'),
  urlIntranet?: string(name='urlIntranet', description='The private endpoint. In a VPC, you can access HTTP triggers by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou-vpc.fcapp.run'),
}

model GetTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTriggerResponseBody(name='body'),
}

async function getTrigger(request: GetTriggerRequest): GetTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrigger', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers/{triggerName}', 'json', false, 'json', request);
}

model InvokeFunctionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcInvocationType?: string(name='X-Fc-Invocation-Type', description='The method used to invoke the function. Valid values:

*   **Sync**: synchronous
*   **Async**: asynchronous', example='Sync', position='Header'),
  xFcLogType?: string(name='X-Fc-Log-Type', description='The method used to return logs. Valid values:

*   **Tail**: returns the last 4 KB of logs that are generated for the current request.
*   **None**: No logs are returned for the current request. Default value: None.', example='None', position='Header'),
  xFcStatefulAsyncInvocationEnable?: string(name='X-Fc-Stateful-Async-Invocation-Enable', description='Specifies whether to enable the asynchronous task mode for requests. Default value: false. Valid values:

*   **true**
*   **false**

> 

*   This parameter takes effect only for asynchronous invocations. It does not take effect for synchronous invocations.', example='true', position='Header'),
  xFcStatefulAsyncInvocationId?: string(name='X-Fc-Stateful-Async-Invocation-Id', description='The ID of the asynchronous task. You must enable the asynchronous task feature in advance.

> When you use an SDK to invoke a function, we recommend that you specify a business-related ID to facilitate subsequent operations. For example, you can use the video name as the invocation ID for a video-processing function. This way, you can use the ID to check whether the video is processed or terminate the processing of the video. The ID must start with a letter or an underscore (\\_) and can contain letters, digits, underscores (\\_), and hyphens (-). The ID can be up to 128 characters in length. If you do not specify the ID of the asynchronous invocation, Function Compute automatically generates an ID.', example='test-invoke-id', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API. The value is the same as that of the **requestId** parameter in the response.', example='test-trace-id', position='Header'),
  body?: bytes(name='body', description='The event to be processed by the function. Set this parameter to a binary string. Function Compute passes the event to the function for processing.', example='{"key":"value"}', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='demoQualifier', position='Query'),
}

model InvokeFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: bytes(name='body'),
}

async function invokeFunction(request: InvokeFunctionRequest): InvokeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvokeFunction', 'POST', '/2021-04-06/services/{serviceName}/functions/{functionName}/invocations', 'byte', false, 'json', request);
}

model ListAliasesRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='r9s89isisi****', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token required to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='caeba0be03****f84eb48b699f0a4883', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the names of returned resources must contain.', example='prefix_text', position='Query'),
  startKey?: string(name='startKey', description='The starting position of the result list. The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='nextkey', position='Query'),
}

model ListAliasesResponseBody = {
  aliases?: [ 
    {
      additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The additional version to which the alias points and the weight of the additional version.

*   The additional version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.'),
      aliasName?: string(name='aliasName', description='The name of the alias.', example='test'),
      createdTime?: string(name='createdTime', description='The time when the ConfigMaps were created.', example='2016-08-15T16:06:05.000+0000'),
      description?: string(name='description', description='The description of the alias.', example='Sample alias.'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time at which the system parameter was last modified.', example='2016-08-15T16:06:05.000+0000'),
      resolvePolicy?: string(name='resolvePolicy', description='The canary release mode. Valid values:

*   **Random**: random canary release. This is the default value.
*   **Content**: rule-based canary release.', example='Random'),
      routePolicy?: RoutePolicy(name='routePolicy', description='The canary release rule. Traffic that meets the canary release rule is routed to the canary release instance.'),
      versionId?: string(name='versionId', description='The ID of the version.', example='1'),
    }
  ](name='aliases', description='The list of aliases.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='8bj81uI8n****'),
}

model ListAliasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAliasesResponseBody(name='body'),
}

async function listAliases(request: ListAliasesRequest): ListAliasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAliases', 'GET', '/2021-04-06/services/{serviceName}/aliases', 'json', false, 'json', request);
}

model ListCustomDomainsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf*****', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Valid values: \\[0,100]. Default value: 20. The number of returned results is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The pagination token to use to request the next page of results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='fc-thinkphp-demo.functioncompute.com', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the returned domain names must contain.', example='prefix_text', position='Query'),
  startKey?: string(name='startKey', description='The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='next_service', position='Query'),
}

model ListCustomDomainsResponseBody = {
  customDomains?: [ 
    {
      accountId?: string(name='accountId', description='The ID of your Alibaba Cloud account.', example='1986114****4305'),
      apiVersion?: string(name='apiVersion', description='The version of the API.', example='2016-08-15'),
      certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.'),
      createdTime?: string(name='createdTime', description='The time when the custom domain name was created.', example='2020-07-27T08:02:19Z'),
      domainName?: string(name='domainName', description='The domain name.', example='example.com'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the domain name was last modified.', example='2020-07-27T08:02:19Z'),
      protocol?: string(name='protocol', description='The protocol type that is supported by the custom domain name.

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP'),
      routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.'),
      tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.'),
      wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.'),
    }
  ](name='customDomains', description='The information about custom domain names.'),
  nextToken?: string(name='nextToken', description='The pagination token to use to request the next page of results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='example.com'),
}

model ListCustomDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomDomainsResponseBody(name='body'),
}

async function listCustomDomains(request: ListCustomDomainsRequest): ListCustomDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCustomDomains', 'GET', '/2021-04-06/custom-domains', 'json', false, 'json', request);
}

model ListEventSourcesRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Query'),
}

model ListEventSourcesResponseBody = {
  eventSources?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the event source was created.', example='2016-08-15T16:06:05.000+0000'),
      sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:eventbridge:cn-shanghai:123456:eventbus/mns-test/rule/fc-test1/target/abc'),
    }
  ](name='eventSources', description='The information about event sources.'),
}

model ListEventSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEventSourcesResponseBody(name='body'),
}

async function listEventSources(request: ListEventSourcesRequest): ListEventSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEventSources', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/event-sources', 'json', false, 'json', request);
}

model ListFunctionAsyncInvokeConfigsRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='helloworld', position='Path'),
  accountID?: string(name='AccountID', position='Host'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='The CRC-64 value of the function code package. This value is used to check data integrity. The value is automatically calculated by the tool.', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the Function Compute is called. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcInvocationType?: string(name='X-Fc-Invocation-Type', description='The invocation method.

*   **Sync**: synchronous
*   **Async**: asynchronous', example='Async', position='Header'),
  xFcLogType?: string(name='X-Fc-Log-Type', description='The method used to return logs. Valid values:

*   **Tail**: returns the last 4 KB of logs that are generated for the current request.
*   **None**: No logs are returned for the current request. Default value: None.', example='Tail', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token required to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='8bj81uI8n****', position='Query'),
}

model ListFunctionAsyncInvokeConfigsResponseBody = {
  configs?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the desktop group was created.', example='2020-09-10T02:45:02Z'),
      destinationConfig?: DestinationConfig(name='destinationConfig', description='The configuration structure of the destination for asynchronous invocations. If you have not configured this parameter, this parameter is null.', example='{"onSuccess": null,"onFailure": {"destination": "acs:mns:cn-shanghai:123:/queues/xxx/messages"}}'),
      function?: string(name='function', description='The name of the function.', example='helloworld'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the configuration was last modified.', example='2020-09-10T02:45:02Z'),
      maxAsyncEventAgeInSeconds?: long(name='maxAsyncEventAgeInSeconds', description='The maximum validity period of a message. If you have not configured this parameter, this parameter is null.', example='300'),
      maxAsyncRetryAttempts?: long(name='maxAsyncRetryAttempts', description='The maximum number of retries allowed after an asynchronous invocation fails. If you have not configured this parameter, this parameter is null.', example='3'),
      qualifier?: string(name='qualifier', description='The version or alias of the service.', example='test'),
      service?: string(name='service', description='The name of the service.', example='demo-service'),
      statefulInvocation?: boolean(name='statefulInvocation', description='Indicates whether the asynchronous task feature is enabled.

*   **true**: The asynchronous task feature is enabled.
*   **false**: The asynchronous task feature is disabled.

If you have not configured this parameter, this parameter is null.', example='true'),
    }
  ](name='configs', description='The list of asynchronous invocation configurations.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='caeba0be03****f84eb48b699f0a4883'),
}

model ListFunctionAsyncInvokeConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFunctionAsyncInvokeConfigsResponseBody(name='body'),
}

/**
  * StatefulAsyncInvocation indicates whether the asynchronous task feature is enabled. If StatefulAsyncInvocation is set to true, the asynchronous task is enabled. All asynchronous invocations to the function corresponding to this configuration change to asynchronous task mode.
  *
 */
async function listFunctionAsyncInvokeConfigs(request: ListFunctionAsyncInvokeConfigsRequest): ListFunctionAsyncInvokeConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctionAsyncInvokeConfigs', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/async-invoke-configs', 'json', false, 'json', request);
}

model ListFunctionsRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token required to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='8bj81uI8n****', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the names of returned resources must contain.', example='demoFunctionsPrefix', position='Query'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Query'),
  startKey?: string(name='startKey', description='The starting position of the result list. The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='demoStartKey', position='Query'),
}

model ListFunctionsResponseBody = {
  functions?: [ 
    {
      caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000'),
      codeChecksum?: string(name='codeChecksum', description='The CRC-64 value of the function code package.', example='5434025278388143772'),
      codeSize?: long(name='codeSize', description='The size of the function code package that is returned by the system. Unit: bytes.', example='1024'),
      cpu?: float(name='cpu', description='The number of vCPUs of the function. The value must be a multiple of 0.05.', example='1.5'),
      createdTime?: string(name='createdTime', description='The time when the function was created.', example='2016-08-15T15:00:00.000+0000'),
      customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configurations of the custom container runtime.'),
      customDNS?: CustomDNS(name='customDNS'),
      customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.'),
      customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig'),
      description?: string(name='description', description='The description of the function.', example='This is a demo hello world function'),
      diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512'),
      environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that you configured for the function. You can obtain the values of the environment variables from the function.'),
      functionId?: string(name='functionId', description='The unique ID that is generated by the system for the function.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24****'),
      functionName?: string(name='functionName', description='The name of the function.', example='demo-function'),
      gpuMemorySize?: int32(name='gpuMemorySize', description='The GPU memory capacity for the function. Unit: MB. The value is a multiple of 1,024.', example='2048'),
      handler?: string(name='handler', description='The handler of the function.', example='index.handler'),
      initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the Initializer hook. Unit: seconds. Default value: 3. Valid values: 1 to 300. When this period ends, the execution of the Initializer hook is terminated.', example='60'),
      initializer?: string(name='initializer', description='The handler of the Initializer hook. The format of the value is determined by the programming language that you use. For more information, see [Initializer hook](~~157704~~).', example='index.handler'),
      instanceConcurrency?: int32(name='instanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10'),
      instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.'),
      instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the value of soft concurrency, an instance scale-up is triggered. For example, if your instance requires a long time to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of the **instanceConcurrency** parameter.', example='5'),
      instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance
*   **fc.gpu.tesla.1**: GPU-accelerated instance (Tesla T4)
*   **fc.gpu.ampere.1**: GPU-accelerated instance (Ampere A10)
*   **g1**: same as fc.gpu.tesla.1', example='e1'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the function was last modified.', example='2016-08-15T17:00:00.000+0000'),
      layers?: [ string ](name='layers', description='The information about layers.

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name as a layer with a larger subscript.'),
      layersArnV2?: [ string ](name='layersArnV2'),
      memorySize?: int32(name='memorySize', description='The memory size that is configured for the function. Unit: MB.', example='512'),
      runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.10**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore3.1**, **dotnetcore2.1**, **custom.debian10**, **custom**, and **custom-container**. For more information, see [Supported function runtime environments](~~73338~~).', example='python3.9'),
      timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 60. Valid values: 1 to 600. When this period expires, the execution of the function is terminated.', example='10'),
    }
  ](name='functions', description='The information about functions.'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is not returned, all the layers are returned.', example='8bj81uI8n****'),
}

model ListFunctionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFunctionsResponseBody(name='body'),
}

async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctions', 'GET', '/2021-04-06/services/{serviceName}/functions', 'json', false, 'json', request);
}

model ListInstancesRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  instanceIds?: [ string ](name='instanceIds', description='The IDs of the instance.', position='Query'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Valid values: \\[0,1000].

The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  qualifier?: string(name='qualifier', description='The version or alias.', example='dev', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      instanceId?: string(name='instanceId', description='The ID of the instance.', example='1ef6b6ff-7f7b-485e-ab49-501ac681****'),
      versionId?: string(name='versionId', description='The version of the service to which the instance belongs. If the instance belongs to the LATEST alias, 0 is returned as the version.', example='1'),
    }
  ](name='instances', description='The information about instances.'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

/**
  * The ListInstances operation allows you to query the available instances of a function.
  * Available instances are instances that are processing requests or can be scheduled to process requests. Available instances queried by the ListInstances operation are the same as those that can be used when you call the InvokeFunction operation with the same values specified for the `serviceName`, `functionName`, and `qualifier` parameters.
  *
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/instances', 'json', false, 'json', request);
}

model ListLayerVersionsRequest {
  layerName: string(name='layerName', description='The name of the layer.', example='MyLayer', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  startVersion?: int32(name='startVersion', description='The initial version of the layer.', example='1', position='Query'),
}

model ListLayerVersionsResponseBody = {
  layers?: [
    Layer
  ](name='layers', description='The information about layer versions.'),
  nextVersion?: int32(name='nextVersion', description='The initial version of the layer for the next query.', example='21'),
}

model ListLayerVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLayerVersionsResponseBody(name='body'),
}

async function listLayerVersions(request: ListLayerVersionsRequest): ListLayerVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLayerVersions', 'GET', '/2021-04-06/layers/{layerName}/versions', 'json', false, 'json', request);
}

model ListLayersRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned configurations is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token required to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='next-layer-name', position='Query'),
  official?: boolean(name='official', description='Specifies whether to obtain the official public layer. When the official parameter is set to true, the public field does not take effect. The default value is false.', example='true', position='Query'),
  prefix?: string(name='prefix', description='The name prefix of the layer. The names of returned resources must contain the prefix. If the name prefix is a, the names of returned resources must start with a.', example='prefix-Layer', position='Query'),
  public?: boolean(name='public', description='Specifies whether to obtain only the common layer. Default value: false.', example='true', position='Query'),
  startKey?: string(name='startKey', description='The name of the start layer. The returned layers are sorted in alphabetical order, and the layers that include and follow the layer specified by the startKey parameter are returned.', example='start-layer-name', position='Query'),
}

model ListLayersResponseBody = {
  layers?: [
    Layer
  ](name='layers', description='The information about layers.'),
  nextToken?: string(name='nextToken', description='The name of the start layer for the next query, which is also the token used to obtain more results.', example='next-layer-name'),
}

model ListLayersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLayersResponseBody(name='body'),
}

async function listLayers(request: ListLayersRequest): ListLayersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLayers', 'GET', '/2021-04-06/layers', 'json', false, 'json', request);
}

model ListOnDemandConfigsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='$.parameters[8].schema.description', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='$.parameters[8].schema.example', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='$.parameters[8].schema.enumValueTitles', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The time when Function Compute API is called.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The ID of your Alibaba Cloud account.', example='8bj81uI8n****', position='Query'),
  prefix?: string(name='prefix', description='The returned data.', example='prefix_text', position='Query'),
  startKey?: string(name='startKey', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='nextservice', position='Query'),
}

model ListOnDemandConfigsResponseBody = {
  configs?: [
    OnDemandConfig
  ](name='configs', description='$.parameters[9].schema.enumValueTitles'),
  nextToken?: string(name='nextToken', description='{"name":"ListOnDemandConfigs","product":"FC-Open","version":"2021-04-06","path":"/2021-04-06/on-demand-configs","deprecated":0,"method":"GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\\"name\\":\\"prefix\\",\\"position\\":\\"Query\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"The prefix that the names of returned resources must contain. If the name prefix is a, the names of returned resources must start with a. \\",\\"description\\":\\"The prefix that the names of returned resources must contain. If the name prefix is a, the names of returned resources must start with a. \\",\\"example\\":\\"prefix_text\\"},{\\"name\\":\\"startKey\\",\\"position\\":\\"Query\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned. \\",\\"description\\":\\"The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned. \\",\\"example\\":\\"nextservice\\"},{\\"name\\":\\"nextToken\\",\\"position\\":\\"Query\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call. \\",\\"description\\":\\"The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call. \\",\\"example\\":\\"8bj81uI8n****\\"},{\\"name\\":\\"limit\\",\\"position\\":\\"Query\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Integer\\",\\"title\\":\\"The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number. \\",\\"description\\":\\"The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number. \\",\\"example\\":\\"20\\"},{\\"name\\":\\"X-Fc-Account-Id\\",\\"position\\":\\"Header\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"The ID of your Alibaba Cloud account. \\",\\"example\\":\\"188077086902****\\"},{\\"name\\":\\"X-Fc-Date\\",\\"position\\":\\"Header\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"The time when Function Compute API is called. \\",\\"example\\":\\"2020-12-1210:00:00\\"},{\\"name\\":\\"X-Fc-Trace-Id\\",\\"position\\":\\"Header\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"description\\":\\"The trace ID of the invocation request of Function Compute. \\",\\"example\\":\\"rid281s******\\"}]","response_headers":"[]","response":"{\\"type\\":\\"Object\\",\\"children\\":[{\\"name\\":\\"configs\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"Array\\",\\"subType\\":\\"Object\\",\\"example\\":\\"[{\\"maximumInstanceCount\\": 10, \\"resource\\": \\"services/serviceName-bb7f36eb-7f1b-4c42-8f64-401b32ecbf31.aliasName/functions/functionName\\"}]\\",\\"description\\":\\"The information about the on-demand configuration. \\",\\"children\\":[{\\"name\\":\\"resource\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"The details of the function.\\",\\"description\\":\\"The description of the resource. \\",\\"example\\":\\"123#serviceName#alias#functionName\\"},{\\"name\\":\\"maximumInstanceCount\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"public\\",\\"deprecated\\":false,\\"type\\":\\"Long\\",\\"title\\":\\"todo\\",\\"description\\":\\"The maximum number of on-demand instances. \\",\\"example\\":\\"10\\"}],\\"title\\":\\"The information about the provisioned configuration.\\"},{\\"name\\":\\"nextToken\\",\\"required\\":false,\\"checkBlank\\":false,\\"visibility\\":\\"Public\\",\\"deprecated\\":false,\\"type\\":\\"String\\",\\"title\\":\\"The token used to obtain more results. If this parameter is left empty, all the results are returned. \\",\\"description\\":\\"The token used to obtain more results. If this parameter is left empty, all the results are returned. \\",\\"example\\":\\"next_token\\"}],\\"title\\":\\"Schema of Response\\",\\"description\\":\\"The returned data. \\"}","errors":"{}"}', example='next_token'),
}

model ListOnDemandConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOnDemandConfigsResponseBody(name='body'),
}

async function listOnDemandConfigs(request: ListOnDemandConfigsRequest): ListOnDemandConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnDemandConfigs', 'GET', '/2021-04-06/on-demand-configs', 'json', false, 'json', request);
}

model ListProvisionConfigsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  limit?: long(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. You do not need to provide this parameter in the first call. The tokens for subsequent queries are obtained from the returned results.', example='demoNextToken', position='Query'),
  qualifier?: string(name='qualifier', description='The qualifier of the service to which resources belong. The qualifier must be aliasName and used together with the serviceName parameter.', example='prod', position='Query'),
  serviceName?: string(name='serviceName', description='The name of the service to which resources belong.', example='serviceName', position='Query'),
}

model ListProvisionConfigsResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='demoNextToken'),
  provisionConfigs?: [ 
    {
      alwaysAllocateCPU?: boolean(name='alwaysAllocateCPU', description='Specifies whether to always allocate CPU to a function instance.', example='true'),
      current?: long(name='current', description='The actual number of provisioned instances.', example='5'),
      currentError?: string(name='currentError', description='The error message returned if a provisioned instance fails to be created.', example='image not found'),
      resource?: string(name='resource', description='The description of the resource.', example='12345#servierName#qualifier#functionName'),
      scheduledActions?: [
        ScheduledActions
      ](name='scheduledActions', description='The configurations of scheduled auto scaling.'),
      target?: long(name='target', description='The expected number of provisioned instances.', example='5'),
      targetTrackingPolicies?: [
        TargetTrackingPolicies
      ](name='targetTrackingPolicies', description='The configurations of metric-based auto scaling.'),
    }
  ](name='provisionConfigs', description='The information about provisioned instances.'),
}

model ListProvisionConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProvisionConfigsResponseBody(name='body'),
}

async function listProvisionConfigs(request: ListProvisionConfigsRequest): ListProvisionConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProvisionConfigs', 'GET', '/2021-04-06/provision-configs', 'json', false, 'json', request);
}

model ListReservedCapacitiesRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the Function Compute API is called. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf****', position='Header'),
  limit?: string(name='limit', description='The maximum number of resources to return. Valid values: 1 to 100.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token that determines the start point of the query.', example='8bj81uI8n****', position='Query'),
}

model ListReservedCapacitiesResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results.', example='8bj81uI8n****'),
  reservedCapacities?: [
    OpenReservedCapacity
  ](name='reservedCapacities', description='The information about subscription instances.'),
}

model ListReservedCapacitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListReservedCapacitiesResponseBody(name='body'),
}

async function listReservedCapacities(request: ListReservedCapacitiesRequest): ListReservedCapacitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListReservedCapacities', 'GET', '/2021-04-06/reserved-capacities', 'json', false, 'json', request);
}

model ListServiceVersionsRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  direction?: string(name='direction', description='The order in which the returned versions are sorted. Valid values:
  - **FORWARD**: in ascending order. 
  - **BACKWARD**: in descending order. This is the default value.', example='BACKWARD', position='Query'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='8bj81uI8n****', position='Query'),
  startKey?: string(name='startKey', description='The starting position of the result list. The returned resources are sorted based on the version number, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='nextservice', position='Query'),
}

model ListServiceVersionsResponseBody = {
  direction?: string(name='direction', description='The order in which the returned versions are sorted. Valid values:
  - **FORWARD**: in ascending order. 
  - **BACKWARD**: in descending order. This is the default value.', example='BACKWARD'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If the number of resources exceeds the limit, the nextToken parameter is returned. You can include the parameter in subsequent calls to obtain more results. You do not need to provide this parameter in the first call.', example='eJhojW7N****'),
  versions?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the service version was created.', example='2020-03-16T06:23:50Z'),
      description?: string(name='description', description='The description of the service version.', example='test_description'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service version was last modified.', example='2020-07-15T06:12:31Z'),
      versionId?: string(name='versionId', description='The version of the service.', example='1'),
    }
  ](name='versions', description='The list of versions.'),
}

model ListServiceVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceVersionsResponseBody(name='body'),
}

async function listServiceVersions(request: ListServiceVersionsRequest): ListServiceVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceVersions', 'GET', '/2021-04-06/services/{serviceName}/versions', 'json', false, 'json', request);
}

model ListServicesRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. The value cannot exceed 100. The number of returned configurations is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The starting position of the query. If this parameter is left empty, the query starts from the beginning. You do not need to specify this parameter in the first query. If the number of asynchronous tasks exceeds the limit, the nextToken parameter is returned, the value of which can be used in subsequent calls to obtain more results.', example='caeba0****be03f84eb48b699f0a4883', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the names of returned resources must contain. If the name prefix is a, the names of returned resources must start with a.', example='prefix_text', position='Query'),
  startKey?: string(name='startKey', description='The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='nextService', position='Query'),
}

model ListServicesResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='caeba0****be03f84eb48b699f0a4883'),
  services?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the service was created.', example='2020-04-03T05:57:28Z'),
      description?: string(name='description', description='The description of the service.', example='test_description'),
      internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions to access the Internet.', example='true'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service was last modified.', example='2020-04-03T05:57:28Z'),
      logConfig?: LogConfig(name='logConfig', description='The log configuration, which specifies a Logstore to store function execution logs.'),
      nasConfig?: NASConfig(name='nasConfig', description='The configurations of the NAS file system. The configuration allows functions in the specified service in Function Compute to access the NAS file system.'),
      ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.'),
      role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::198613743****:role/fc-public-test'),
      serviceId?: string(name='serviceId', description='The unique ID generated by the system for the service.', example='c910061f-****-44e6-b659-***c'),
      serviceName?: string(name='serviceName', description='The name of the service.', example='service_name'),
      tracingConfig?: TracingConfig(name='tracingConfig', description='The configuration of Tracing Analysis. After you configure Tracing Analysis for a service in Function Compute, you can record the execution duration of a request, view the amount of cold start time for a function, and record the execution duration of a function. For more information, see [Overview](~~189804~~).'),
      vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configuration. The configuration allows a function to access the specified VPC.'),
    }
  ](name='services', description='The information about a service.'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'GET', '/2021-04-06/services', 'json', false, 'json', request);
}

model ListStatefulAsyncInvocationFunctionsRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='It is a tool used to manage and configure Alibaba Cloud resources. After simple installation and configuration, you can use Alibaba Cloud CLI to manage multiple Alibaba Cloud services and migrate your data and business to the cloud with ease.', example='12348*****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The details of returned data.', example='duytnd-Xsdfasfd***', position='Header'),
  limit?: int32(name='limit', description='The latest version of Function Compute API.', example='20', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='nextToken', description='Alibaba Cloud provides SDKs for multiple programming languages to help you integrate Alibaba Cloud services by using APIs. We recommend that you use an SDK to call API operations. This frees you from manual signature verification.', example='""', position='Query'),
}

model ListStatefulAsyncInvocationFunctionsResponseBody = {
  data?: [
    AsyncConfigMeta
  ](name='data', description='The trace ID of the request for Function Compute API.'),
  nextToken?: string(name='nextToken', description='2022-01-28 18:04:38', example='""'),
}

model ListStatefulAsyncInvocationFunctionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListStatefulAsyncInvocationFunctionsResponseBody(name='body'),
}

/**
  * The metadata of the service and function to which the asynchronous task belongs.
  *
 */
async function listStatefulAsyncInvocationFunctions(request: ListStatefulAsyncInvocationFunctionsRequest): ListStatefulAsyncInvocationFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStatefulAsyncInvocationFunctions', 'GET', '/2021-04-06/stateful-async-invocation-functions', 'json', false, 'json', request);
}

model ListStatefulAsyncInvocationsRequest {
  serviceName: string(name='serviceName', description='The error message returned for the asynchronous task.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The event triggered by the asynchronous task.', example='demo-function', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='It is a tool used to manage and configure Alibaba Cloud resources. After simple installation and configuration, you can use Alibaba Cloud CLI to manage multiple Alibaba Cloud services and migrate your data and business to the cloud with ease.', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', description='Alibaba Cloud CLI', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='- **true**: returns the invocationPayload parameter in the response. 
- **false**: does not return the invocationPayload parameter in the response. 

> The `invocationPayload` parameter indicates the input parameters of an asynchronous task.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcInvocationType?: string(name='X-Fc-Invocation-Type', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='Async', position='Header'),
  xFcLogType?: string(name='X-Fc-Log-Type', description='The time when Function Compute API is called.', example='Tail', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The CRC-64 value of the function code package. This value is used to check data integrity. The value is automatically calculated by the tool.', example='abcxxx', position='Header'),
  includePayload?: boolean(name='includePayload', description='You can search for API operations, call and debug API operations online, and dynamically generate executable sample code for SDKs.', example='true', position='Query'),
  invocationIdPrefix?: string(name='invocationIdPrefix', description='Alibaba Cloud provides SDKs for multiple programming languages to help you integrate Alibaba Cloud services by using APIs. We recommend that you use an SDK to call API operations. This frees you from manual signature verification.', example='abcxxx', position='Query'),
  limit?: int32(name='limit', description='The list of events that trigger the asynchronous task.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The ID of the instance that is used to run the asynchronous task.', example='caeba0****be03f84eb48b699f0a4883', position='Query'),
  qualifier?: string(name='qualifier', description='The number of retries after the asynchronous task fails.', example='LATEST', position='Query'),
  sortOrderByTime?: string(name='sortOrderByTime', description='StatefulAsyncInvocation: asynchronous task. Asynchronous tasks allow you to manage the states on the basis of common asynchronous invocations, which is more suitable for task scenarios.', example='desc', position='Query'),
  startedTimeBegin?: long(name='startedTimeBegin', description='The structure of the asynchronous task.', example='1640966400000', position='Query'),
  startedTimeEnd?: long(name='startedTimeEnd', description='The latest version of Function Compute API.', example='1640966400000', position='Query'),
  status?: string(name='status', description='The request ID of the asynchronous task.', example='Running', position='Query'),
}

model ListStatefulAsyncInvocationsResponseBody = {
  invocations?: [
    StatefulAsyncInvocation
  ](name='invocations', description='The version or alias of the service to which the asynchronous task belongs.'),
  nextToken?: string(name='nextToken', description='The returned data.', example='8bj81uI8n****'),
}

model ListStatefulAsyncInvocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListStatefulAsyncInvocationsResponseBody(name='body'),
}

/**
  * The name of the service to which the asynchronous task belongs.
  *
 */
async function listStatefulAsyncInvocations(request: ListStatefulAsyncInvocationsRequest): ListStatefulAsyncInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStatefulAsyncInvocations', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/stateful-async-invocations', 'json', false, 'json', request);
}

model ListTaggedResourcesRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token used to obtain more results. You do not need to provide this parameter in the first call. The tokens for subsequent queries are obtained from the returned results.', example='a-service', position='Query'),
}

model ListTaggedResourcesResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results. You do not need to provide this parameter in the first call. The tokens for subsequent queries are obtained from the returned results.', example='a-service'),
  resources?: [
    Resource
  ](name='resources', description='The information about tagged services.'),
}

model ListTaggedResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaggedResourcesResponseBody(name='body'),
}

async function listTaggedResources(request: ListTaggedResourcesRequest): ListTaggedResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTaggedResources', 'GET', '/2021-04-06/tags', 'json', false, 'json', request);
}

model ListTriggersRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  limit?: int32(name='limit', description='The maximum number of resources to return. Default value: 20. Maximum value: 100. The number of returned resources is less than or equal to the specified number.', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='The token required to obtain more results. You do not need to provide this parameter in the first call. The tokens for subsequent queries are obtained from the returned results.', example='f-trigger', position='Query'),
  prefix?: string(name='prefix', description='The prefix that the names of returned resources must contain.', example='a', position='Query'),
  startKey?: string(name='startKey', description='The returned resources are sorted in alphabetical order, and the resources that include and follow the resource specified by the startKey parameter are returned.', example='a-trigger', position='Query'),
}

model ListTriggersResponseBody = {
  nextToken?: string(name='nextToken', description='The token used to obtain more results. If this parameter is left empty, all the results are returned.', example='f-trigger'),
  triggers?: [ 
    {
      createdTime?: string(name='createdTime', description='The time when the trigger was created.', example='2016-08-15T15:00:00.000+0000'),
      description?: string(name='description', description='The description of the trigger.', example='trigger for test'),
      domainName?: string(name='domainName', description='The domain name used to invoke the function by using HTTP. You can add this domain name as the prefix to the endpoint of Function Compute. This way, you can invoke the function that corresponds to the trigger by using HTTP. Example: `{domainName}.cn-shanghai.fc.aliyuncs.com`.', example='demo-service-demo-function-jkhksh'),
      invocationRole?: string(name='invocationRole', description='The ARN of the RAM role that is used by the event source to invoke the function.', example='acs:ram::123456xxxx:role/fc-test'),
      lastModifiedTime?: string(name='lastModifiedTime', description='The time when the trigger was last modified.', example='016-08-15T17:00:00.000+0000'),
      qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST'),
      sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:oss:cn-shanghai:123456xxxx:mybucket'),
      triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type. For more information about the format, see the following topics:

*   Object Storage Service (OSS) trigger: [OSSTriggerConfig](~~415697~~)).
*   Simple Log Service trigger: [LogTriggerConfig](~~415694~~).
*   Time trigger: [TimeTriggerConfig](~~415712~~).
*   HTTP trigger: [HTTPTriggerConfig](~~415685~~).
*   Tablestore trigger: Specify the **SourceArn** parameter and leave this parameter empty.
*   Alibaba Cloud CDN event trigger: [CDNEventsTriggerConfig](~~415674~~).
*   MNS topic trigger: [MnsTopicTriggerConfig](~~415695~~).
*   EventBridge triggers: [EventBridgeTriggerConfig](~~2508622~~).', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}'),
      triggerId?: string(name='triggerId', description='The unique ID of the trigger.', example='3e270f2f-cef2-421a-bc86-ff4e8088****'),
      triggerName?: string(name='triggerName', description='The name of the trigger.', example='demoTrigger'),
      triggerType?: string(name='triggerType', description='The trigger type. Valid values: **oss**, **log**, **tablestore**, **timer**, **http**, **cdn_events**, **mns_topic**, and **eventbridge**.', example='oss'),
      urlInternet?: string(name='urlInternet', description='The public endpoint. You can access HTTP triggers over the Internet by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou.fcapp.run'),
      urlIntranet?: string(name='urlIntranet', description='The private endpoint. In a VPC, you can access HTTP triggers by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou-vpc.fcapp.run'),
    }
  ](name='triggers', description='The information about triggers.'),
}

model ListTriggersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTriggersResponseBody(name='body'),
}

async function listTriggers(request: ListTriggersRequest): ListTriggersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTriggers', 'GET', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers', 'json', false, 'json', request);
}

model ListVpcBindingsRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='serviceName', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
}

model ListVpcBindingsResponseBody = {
  vpcIds?: [ string ](name='vpcIds', description='The IDs of bound VPCs.'),
}

model ListVpcBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcBindingsResponseBody(name='body'),
}

async function listVpcBindings(request: ListVpcBindingsRequest): ListVpcBindingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVpcBindings', 'GET', '/2021-04-06/services/{serviceName}/bindings', 'json', false, 'json', request);
}

model PublishServiceVersionRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  ifMatch?: string(name='If-Match', description='The ETag value of the service. This value is used to ensure that the modified service is consistent with the service to be modified. The ETag value is returned in the responses of the [CreateService](~~175256~~), [UpdateService](~~188167~~), and [GetService](~~189225~~) operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The start time when the function is invoked. Specify the time in the yyyy-mm-ddhh:mm:ss format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='2020-12-1210:00:00', example='rid281s******', position='Header'),
  description?: string(name='description', description='The description of the service version.', example='test_description', position='Body'),
}

model PublishServiceVersionResponseBody = {
  createdTime?: string(name='createdTime', description='The returned data.', example='2016-08-15T16:06:05.000+0000'),
  description?: string(name='description', description='The creation time.', example='test_description'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The description of the service version.', example='2016-08-15T16:06:05.000+0000'),
  versionId?: string(name='versionId', description='The last update time.', example='1'),
}

model PublishServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishServiceVersionResponseBody(name='body'),
}

async function publishServiceVersion(request: PublishServiceVersionRequest): PublishServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishServiceVersion', 'POST', '/2021-04-06/services/{serviceName}/versions', 'json', false, 'json', request);
}

model PutFunctionAsyncInvokeConfigRequest {
  serviceName: string(name='serviceName', description='The information about the asynchronous invocation configuration.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The configurations of the destination of an asynchronous invocation.', example='helloworld', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The name of the service.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The creation time.', example='The information about the asynchronous invocation configuration.', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The maximum number of retries allowed after an asynchronous invocation fails. Default value: 3. Valid values: 0 to 8.', example='ksdfjkdmkki***', position='Header'),
  destinationConfig?: DestinationConfig(name='destinationConfig', description='You can search for API operations, call and debug API operations online, and dynamically generate executable sample code for SDKs.', position='Body'),
  maxAsyncEventAgeInSeconds?: long(name='maxAsyncEventAgeInSeconds', description='Alibaba Cloud CLI', example='300', position='Body'),
  maxAsyncRetryAttempts?: long(name='maxAsyncRetryAttempts', description='The information about the asynchronous invocation configuration.', example='3', position='Body'),
  statefulInvocation?: boolean(name='statefulInvocation', description='The version or alias of the service.', example='true', position='Body'),
  qualifier?: string(name='qualifier', description='The latest version of Function Compute API.', example='test', position='Query'),
}

model PutFunctionAsyncInvokeConfigResponseBody = {
  createdTime?: string(name='createdTime', description='Sat, 14 Jul 2017 07:02:38 GMT', example='2020-09-10T02:45:02Z'),
  destinationConfig?: DestinationConfig(name='destinationConfig', description='The trace ID of the invocation request of Function Compute.', example='{"onSuccess": null,"onFailure": {"destination": "acs:mns:cn-shanghai:123:/queues/xxx/messages"}}'),
  function?: string(name='function', description='The name of the function.', example='helloworld'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The configuration structure of the destination for asynchronous invocation.', example='2020-09-10T02:45:02Z'),
  maxAsyncEventAgeInSeconds?: long(name='maxAsyncEventAgeInSeconds', description='Specifies whether to enable the asynchronous task feature. 

- **true**: enables the asynchronous task feature. 
- **false**: does not enable the asynchronous task feature.', example='300'),
  maxAsyncRetryAttempts?: long(name='maxAsyncRetryAttempts', description='The ID of your Alibaba Cloud account.', example='3'),
  qualifier?: string(name='qualifier', description='Specifies whether to enable the asynchronous task feature. 

- **true**: enables the asynchronous task feature. 
- **false**: does not enable the asynchronous task feature.', example='test'),
  service?: string(name='service', description='Creates or modifies an asynchronous invocation configuration for a function.', example='demo-service'),
  statefulInvocation?: boolean(name='statefulInvocation', description='Jianyi', example='true'),
}

model PutFunctionAsyncInvokeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutFunctionAsyncInvokeConfigResponseBody(name='body'),
}

/**
  * The maximum validity period of messages.
  *
 */
async function putFunctionAsyncInvokeConfig(request: PutFunctionAsyncInvokeConfigRequest): PutFunctionAsyncInvokeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutFunctionAsyncInvokeConfig', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/async-invoke-config', 'json', false, 'json', request);
}

model PutFunctionOnDemandConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  ifMatch?: string(name='If-Match', description='If the ETag specified in the request matches the ETag value of the object, the object and 200 OK are returned. Otherwise, 412 Precondition Failed is returned.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The value is in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The unique ID of the trace.', example='r9s89isisi****', position='Header'),
  maximumInstanceCount: long(name='maximumInstanceCount', description='The maximum number of on-demand instances. For more information, see [Configure provisioned instances and auto scaling rules](~~185038~~).', example='10', position='Body'),
  qualifier: string(name='qualifier', description='The service alias or latest version. Other versions are not supported.', example='prod', position='Query'),
}

model PutFunctionOnDemandConfigResponseBody = {
  maximumInstanceCount?: long(name='maximumInstanceCount', description='The maximum number of instances.', example='10'),
  resource?: string(name='resource', description='The description of the resource.', example='12345#servierName#qualifier#functionName'),
}

model PutFunctionOnDemandConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutFunctionOnDemandConfigResponseBody(name='body'),
}

async function putFunctionOnDemandConfig(request: PutFunctionOnDemandConfigRequest): PutFunctionOnDemandConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutFunctionOnDemandConfig', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/on-demand-config', 'json', false, 'json', request);
}

model PutLayerACLRequest {
  layerName: string(name='layerName', description='The name of the layer.', example='MyLayer', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the request for Function Compute API.', example='asdf****', position='Header'),
  public?: boolean(name='public', description='Specifies whether the layer is public.

*   **true**: Public.
*   **false**: Not public.', example='true', position='Query'),
}

model PutLayerACLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function putLayerACL(request: PutLayerACLRequest): PutLayerACLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutLayerACL', 'PUT', '/2021-04-06/layers/{layerName}/acl', 'none', false, 'json', request);
}

model PutProvisionConfigRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  alwaysAllocateCPU?: boolean(name='alwaysAllocateCPU', description='Specifies whether to always allocate CPU resources. Default value: true.', example='true', position='Body'),
  scheduledActions?: [
    ScheduledActions
  ](name='scheduledActions', description='The configurations of scheduled auto scaling.', position='Body'),
  target: long(name='target', description='The number of provisioned instances. Value range: [1,100000].', example='1', position='Body'),
  targetTrackingPolicies?: [
    TargetTrackingPolicies
  ](name='targetTrackingPolicies', description='The configurations of metric-based auto scaling.', position='Body'),
  qualifier: string(name='qualifier', description='The name of the alias.', example='prod', position='Query'),
}

model PutProvisionConfigResponseBody = {
  alwaysAllocateCPU?: boolean(name='alwaysAllocateCPU', description='Specifies whether to always allocate CPU to a function instance.', example='true'),
  current?: long(name='current', description='The actual number of provisioned instances.', example='1'),
  resource?: string(name='resource', description='The description of the resource.', example='"12345#servierName#qualifier#functionName"'),
  scheduledActions?: [
    ScheduledActions
  ](name='scheduledActions', description='The configurations of scheduled auto scaling.'),
  target?: long(name='target', description='The expected number of provisioned instances.', example='5'),
  targetTrackingPolicies?: [
    TargetTrackingPolicies
  ](name='targetTrackingPolicies', description='The configurations of metric-based auto scaling.'),
}

model PutProvisionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutProvisionConfigResponseBody(name='body'),
}

async function putProvisionConfig(request: PutProvisionConfigRequest): PutProvisionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProvisionConfig', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/provision-config', 'json', false, 'json', request);
}

model RegisterEventSourceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demo-function', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  sourceArn: string(name='sourceArn', description='The Alibaba Cloud Resource Name (ARN) of the event source.', example='acs:eventbridge:cn-shanghai:123456:eventbus/mns-test/rule/fc-test1/target/abc', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Query'),
}

model RegisterEventSourceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the event source was created.', example='2016-08-15T16:06:05.000+0000'),
  sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:eventbridge:cn-shanghai:123456:eventbus/mns-test/rule/fc-test1/target/abc'),
}

model RegisterEventSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterEventSourceResponseBody(name='body'),
}

async function registerEventSource(request: RegisterEventSourceRequest): RegisterEventSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RegisterEventSource', 'POST', '/2021-04-06/services/{serviceName}/functions/{functionName}/event-sources', 'json', false, 'json', request);
}

model ReleaseGPUInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='i-xxx', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format of the value is: EEE,d MMM yyyy HH:mm:ss GMT.', example='2022-11-11 07:31:04.899465017 +0000 UTC m=+37.671563424', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='test-trace-id', position='Header'),
}

model ReleaseGPUInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function releaseGPUInstance(request: ReleaseGPUInstanceRequest): ReleaseGPUInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseGPUInstance', 'DELETE', '/2021-04-06/gpuInstances/{instanceId}', 'none', false, 'json', request);
}

model StopStatefulAsyncInvocationRequest {
  serviceName: string(name='serviceName', description='The name of the service to which the asynchronous task belongs.', example='demo-service', position='Path'),
  functionName: string(name='functionName', description='The name of the function to which the asynchronous task belongs.', example='demo-function', position='Path'),
  invocationId: string(name='invocationId', description='The ID of the asynchronous task.', example='demo-id', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when Function Compute API is called. Specify the time in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Sat, 14 Jul 2017 07:02:38 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='asdf****', position='Header'),
  qualifier?: string(name='qualifier', description='The version or alias of the service to which the asynchronous task belongs.', example='LATEST', position='Query'),
}

model StopStatefulAsyncInvocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * StatefulAsyncInvocation: asynchronous task. Asynchronous tasks allow you to manage the states on the basis of common asynchronous invocations, which is more suitable for task scenarios.
  *
 */
async function stopStatefulAsyncInvocation(request: StopStatefulAsyncInvocationRequest): StopStatefulAsyncInvocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopStatefulAsyncInvocation', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/stateful-async-invocations/{invocationId}', 'none', false, 'json', request);
}

model TagResourceRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  resourceArn: string(name='resourceArn', description='The ARN of the resource.

> You can use the value of this parameter to query the information about the resource, such as the account, service, and region information of the resource. You can manage tags only for services for top level resources.', example='acs:fc:cn-shanghai:188077086902****:services/demo', position='Body'),
  tags: map[string]string(name='tags', description='The tag dictionary.', example='{"k1":"v1"}', position='Body'),
}

model TagResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function tagResource(request: TagResourceRequest): TagResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResource', 'POST', '/2021-04-06/tag', 'none', false, 'json', request);
}

model UntagResourceRequest {
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the function is invoked. The value is in the **EEE,d MMM yyyy HH:mm:ss GMT** format.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  all?: boolean(name='all', description='Specifies whether to remove all tags. This parameter takes effect only when no tag key is specified. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  resourceArn: string(name='resourceArn', description='The Alibaba Cloud Resource Name (ARN) of the resource.

> You can use the value of this parameter to query the information about the resource, such as the account, service, and region information of the resource. You can manage tags only for services for top level resources.', example='acs:fc:cn-shanghai:188077086902****:services/demo', position='Body'),
  tagKeys?: [ string ](name='tagKeys', description='The keys of the tags that you want to remove.', position='Body'),
}

model UntagResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function untagResource(request: UntagResourceRequest): UntagResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResource', 'PUT', '/2021-04-06/tag', 'none', false, 'json', request);
}

model UpdateAliasRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  aliasName: string(name='aliasName', description='The name of the alias.', example='alias_test', position='Path'),
  ifMatch?: string(name='If-Match', description='If the ETag specified in the request matches the ETag value of the object, the object and 200 OK are returned. Otherwise, 412 Precondition Failed is returned.

The ETag value of an object is used to check data integrity of the object. This parameter is empty by default.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time on which the function is invoked. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The trace ID of the invocation request of Function Compute.', example='rid281s******', position='Header'),
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The additional version to which the alias points and the weight of the additional version.

*   The additional version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.', position='Body'),
  description?: string(name='description', description='The description of the alias.', example='test_description', position='Body'),
  resolvePolicy?: string(name='resolvePolicy', description='The canary release mode. Valid values:

*   **Random**: random canary release. This is the default value.
*   **Content**: rule-based canary release.', example='Random', position='Body'),
  routePolicy?: RoutePolicy(name='routePolicy', description='The canary release rule. Traffic that meets the canary release rule is routed to the canary release instance.', position='Body'),
  versionId?: string(name='versionId', description='The ID of the version to which the alias points.', example='1', position='Body'),
}

model UpdateAliasResponseBody = {
  additionalVersionWeight?: map[string]float(name='additionalVersionWeight', description='The additional version to which the alias points and the weight of the additional version.

*   The additional version takes effect only when the function is invoked.
*   The value consists of a version number and a specific weight. For example, 2:0.05 indicates that when a function is invoked, Version 2 is the canary release version, 5% of the traffic is distributed to the canary release version, and 95% of the traffic is distributed to the major version.'),
  aliasName?: string(name='aliasName', description='The name of the alias.', example='test'),
  createdTime?: string(name='createdTime', description='The time when the alias was created.', example='2016-08-15T16:06:05.000+0000'),
  description?: string(name='description', description='The description of the alias.', example='test_description'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the alias was last modified.', example='2016-08-15T16:06:05.000+0000'),
  versionId?: string(name='versionId', description='The ID of the version to which the alias points.', example='1'),
}

model UpdateAliasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAliasResponseBody(name='body'),
}

async function updateAlias(request: UpdateAliasRequest): UpdateAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAlias', 'PUT', '/2021-04-06/services/{serviceName}/aliases/{aliasName}', 'json', false, 'json', request);
}

model UpdateCustomDomainRequest {
  domainName: string(name='domainName', description='The domain name.', example='example.com', position='Path'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the operation is called. The format is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='asdf*****', position='Header'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.', position='Body'),
  protocol?: string(name='protocol', description='The protocol types supported by the domain name. Valid values:

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP', position='Body'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.', position='Body'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.', position='Body'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.', position='Body'),
}

model UpdateCustomDomainResponseBody = {
  accountId?: string(name='accountId', description='The ID of your Alibaba Cloud account.', example='1986114****4305'),
  apiVersion?: string(name='apiVersion', description='The version of the API.', example='2016-08-15'),
  certConfig?: CertConfig(name='certConfig', description='The configurations of the HTTPS certificate.'),
  createdTime?: string(name='createdTime', description='The time when the custom domain name was created.', example='2020-07-27T08:02:19Z'),
  domainName?: string(name='domainName', description='The domain name.', example='example.com'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the domain name was last modified.', example='2020-07-27T08:02:19Z'),
  protocol?: string(name='protocol', description='The protocol type that is supported by the custom domain name.

*   **HTTP**: Only HTTP is supported.
*   **HTTPS**: Only HTTPS is supported.
*   **HTTP,HTTPS**: HTTP and HTTPS are supported.', example='HTTP'),
  routeConfig?: RouteConfig(name='routeConfig', description='The route table that maps the paths to functions when the functions are invoked by using the custom domain name.'),
  tlsConfig?: TLSConfig(name='tlsConfig', description='The Transport Layer Security (TLS) configuration.'),
  wafConfig?: WAFConfig(name='wafConfig', description='The Web Application Firewall (WAF) configuration.'),
}

model UpdateCustomDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCustomDomainResponseBody(name='body'),
}

async function updateCustomDomain(request: UpdateCustomDomainRequest): UpdateCustomDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCustomDomain', 'PUT', '/2021-04-06/custom-domains/{domainName}', 'json', false, 'json', request);
}

model UpdateFunctionRequest {
  serviceName: string(name='serviceName', example='demoService', position='Path'),
  functionName: string(name='functionName', example='demoFunction', position='Path'),
  ifMatch?: string(name='If-Match', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', example='188077086902****', position='Header'),
  xFcCodeChecksum?: string(name='X-Fc-Code-Checksum', example='1506052139770049xxxx', position='Header'),
  xFcDate?: string(name='X-Fc-Date', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', example='test-trace-id', position='Header'),
  instanceConcurrency?: int32(name='InstanceConcurrency', description='The number of requests that can be concurrently processed by a single instance.', example='10', position='Body'),
  caPort?: int32(name='caPort', description='The port on which the HTTP server listens for the custom runtime or custom container runtime.', example='9000', position='Body'),
  code?: Code(name='code', description='The packaged code of the function. **Function code packages** can be provided with the following two methods. You must use only one of the methods in a request.

*   Specify the name of the Object Storage Service (OSS) bucket and object where the code package is stored. The names are specified in the **ossBucketName** and **ossObjectName** parameters.
*   Specify the Base64-encoded content of the ZIP file by using the **zipFile** parameter.', position='Body'),
  cpu?: float(name='cpu', description='The number of vCPUs of the function. The value is a multiple of 0.05.', example='1.5', position='Body'),
  customContainerConfig?: CustomContainerConfig(name='customContainerConfig', description='The configuration of the custom container. After you configure the custom container, Function Compute can execute the function in a container created from a custom image.', position='Body'),
  customDNS?: CustomDNS(name='customDNS', description='The custom DNS configurations of the function.', position='Body'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig', description='The custom health check configuration of the function. This parameter is applicable only to custom runtimes and custom containers.', position='Body'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig', description='The configurations of the custom runtime for the function.', position='Body'),
  description?: string(name='description', description='The description of the function.', example='test desc', position='Body'),
  diskSize?: int32(name='diskSize', description='The disk size of the function. Unit: MB. Valid values: 512 and 10240.', example='512', position='Body'),
  environmentVariables?: map[string]string(name='environmentVariables', description='The environment variables that are configured for the function. You can obtain the values of the environment variables from the function. For more information, see [Environment variables](~~69777~~).', position='Body'),
  gpuMemorySize?: int32(name='gpuMemorySize', description='The GPU memory capacity for the function. Unit: MB. The value is a multiple of 1,024.', example='2048', position='Body'),
  handler?: string(name='handler', description='The handler of the function. The format varies based on the programming language. For more information, see [Function handlers](~~157704~~).', example='index.handler', position='Body'),
  initializationTimeout?: int32(name='initializationTimeout', description='The timeout period for the execution of the Initializer hook. Unit: seconds. Default value: 3. Minimum value: 1. When the period ends, the execution of the Initializer hook is terminated.', example='60', position='Body'),
  initializer?: string(name='initializer', description='The handler of the Initializer hook. The format is determined by the programming language. For more information, see [Function handlers](~~157704~~).', example='index.handler', position='Body'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig', description='The lifecycle configurations of the instance.', position='Body'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', description='The soft concurrency of the instance. You can use this property to implement graceful scale-ups for instances. If the number of concurrent requests on an instance is greater than the soft concurrency value of the instance, an instance scale-up is triggered. For example, if your instance requires a long time to start, you can specify a suitable soft concurrency to start the instance in advance.

The value must be less than or equal to that of the **instanceConcurrency** parameter.', example='5', position='Body'),
  instanceType?: string(name='instanceType', description='The instance type of the function. Valid values:

*   **e1**: elastic instance
*   **c1**: performance instance
*   **fc.gpu.tesla.1**: GPU-accelerated instance (Tesla T4)
*   **fc.gpu.ampere.1**: GPU-accelerated instance (Ampere A10)
*   **g1**: same as **fc.gpu.tesla.1**', example='e1', position='Body'),
  layers?: [ string ](name='layers', description='An array that consists of the information of layers.

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name as a layer with a larger subscript.', position='Body'),
  memorySize?: int32(name='memorySize', description='The memory size for the function. Unit: MB. The value must be a multiple of 64. The memory size varies based on the function instance type. For more information, see [Instance types](~~179379~~).', example='512', position='Body'),
  runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.10**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore3.1**, **dotnetcore2.1**, **custom.debian10**, **custom**, and **custom-container**. For more information, see [Supported function runtime environments](~~73338~~).', example='python3.9', position='Body'),
  timeout?: int32(name='timeout', description='The timeout period for the execution of the function. Unit: seconds. Default value: 3. Minimum value: 1. When the period ends, the execution of the function is terminated.', example='60', position='Body'),
}

model UpdateFunctionResponseBody = {
  caPort?: int32(name='caPort', example='9000'),
  codeChecksum?: string(name='codeChecksum', example='5434025278388143772'),
  codeSize?: long(name='codeSize', example='1024'),
  cpu?: float(name='cpu', example='1.5'),
  createdTime?: string(name='createdTime', example='2016-08-15T15:00:00.000+0000'),
  customContainerConfig?: CustomContainerConfig(name='customContainerConfig'),
  customDNS?: CustomDNS(name='customDNS'),
  customHealthCheckConfig?: CustomHealthCheckConfig(name='customHealthCheckConfig'),
  customRuntimeConfig?: CustomRuntimeConfig(name='customRuntimeConfig'),
  description?: string(name='description', example='This is a demo hello world function'),
  diskSize?: int32(name='diskSize', example='512'),
  environmentVariables?: map[string]string(name='environmentVariables'),
  functionId?: string(name='functionId', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24****'),
  functionName?: string(name='functionName', example='demo-function'),
  gpuMemorySize?: int32(name='gpuMemorySize', example='2048'),
  handler?: string(name='handler', example='index.handler'),
  initializationTimeout?: int32(name='initializationTimeout', example='60'),
  initializer?: string(name='initializer', example='index.handler'),
  instanceConcurrency?: int32(name='instanceConcurrency', example='10'),
  instanceLifecycleConfig?: InstanceLifecycleConfig(name='instanceLifecycleConfig'),
  instanceSoftConcurrency?: int32(name='instanceSoftConcurrency', example='5'),
  instanceType?: string(name='instanceType', example='e1'),
  lastModifiedTime?: string(name='lastModifiedTime', example='2016-08-15T17:00:00.000+0000'),
  layers?: [ string ](name='layers', description='An array that consists of the information of layers.

> Multiple layers are merged based on the order of array subscripts. The content of a layer with a smaller subscript overwrites the file that has the same name as a layer with a larger subscript.'),
  layersArnV2?: [ string ](name='layersArnV2', description='ARN list of layers'),
  memorySize?: int32(name='memorySize', example='512'),
  runtime?: string(name='runtime', description='The runtime environment of the function. Valid values: **nodejs16**, **nodejs14**, **nodejs12**, **nodejs10**, **nodejs8**, **nodejs6**, **nodejs4.4**, **python3.10**, **python3.9**, **python3**, **python2.7**, **java11**, **java8**, **go1**, **php7.2**, **dotnetcore3.1**, **dotnetcore2.1**, **custom.debian10**, **custom**, and **custom-container**. For more information, see [Supported function runtime environments](~~73338~~).', example='python3.9'),
  timeout?: int32(name='timeout', example='10'),
}

model UpdateFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFunctionResponseBody(name='body'),
}

async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFunction', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demo-service', position='Path'),
  ifMatch?: string(name='If-Match', description='The value used to ensure that the modified service is consistent with the service to be modified. The value is obtained from the responses of the [CreateService](~~175256~~), [UpdateService](~~188167~~), and [GetService](~~189225~~) operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the Function Compute API is called. The format is **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='rid281s******', position='Header'),
  description?: string(name='description', description='The description of the service.', example='test service', position='Body'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions to access the Internet.', example='true', position='Body'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration. Function Compute writes function execution logs to the specified Logstore.', position='Body'),
  nasConfig?: NASConfig(name='nasConfig', description='The configurations of the NAS file system. The configurations allow functions to access the specified NAS resources.', position='Body'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.', position='Body'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::1234567890:role/fc-test', position='Body'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configurations of Tracing Analysis. After you configure Tracing Analysis for a service in Function Compute, you can record the execution duration of a request, view the amount of cold start time for a function, and record the execution duration of a function. For more information, see [Overview](~~189804~~).', position='Body'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The virtual private cloud (VPC) configuration, which allows functions in the specified service in Function Compute to access the specified VPC.', position='Body'),
}

model UpdateServiceResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the service was created.', example='2016-08-15T16:06:05.000+0000'),
  description?: string(name='description', description='The description of the service.', example='test_description'),
  internetAccess?: boolean(name='internetAccess', description='Specifies whether to allow functions to access the Internet. Valid values:

*   **true**: allows functions in the specified service to access the Internet.
*   **false**: does not allow functions to access the Internet.', example='true'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The time when the service was last modified.', example='2016-08-15T16:06:05.000+0000'),
  logConfig?: LogConfig(name='logConfig', description='The log configuration, which specifies a Logstore to store function execution logs.'),
  nasConfig?: NASConfig(name='nasConfig', description='The configurations of the NAS file system. The configuration allows functions in the specified service in Function Compute to access the NAS file system.'),
  ossMountConfig?: OSSMountConfig(name='ossMountConfig', description='The OSS mount configurations.'),
  role?: string(name='role', description='The RAM role that is used to grant required permissions to Function Compute. The RAM role is used in the following scenarios:

*   Sends function execution logs to your Logstore.
*   Generates a token for a function to access other cloud resources during function execution.', example='acs:ram::1234567890:role/fc-test'),
  serviceId?: string(name='serviceId', description='The unique ID generated by the system for the service.', example='2d28e0e9-9ba5-4eed-8b1a-d3d9cd24e737'),
  serviceName?: string(name='serviceName', description='The name of the service.', example='demo-service'),
  tracingConfig?: TracingConfig(name='tracingConfig', description='The configuration of Tracing Analysis. After you configure Tracing Analysis for a service in Function Compute, you can record the execution duration of a request, view the amount of cold start time for a function, and record the execution duration of a function. For more information, see [Overview](~~189804~~).'),
  vpcConfig?: VPCConfig(name='vpcConfig', description='The VPC configuration. The configuration allows a function to access the specified VPC.'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateService', 'PUT', '/2021-04-06/services/{serviceName}', 'json', false, 'json', request);
}

model UpdateTriggerRequest {
  serviceName: string(name='serviceName', description='The name of the service.', example='demoService', position='Path'),
  functionName: string(name='functionName', description='The name of the function.', example='demoFunction', position='Path'),
  triggerName: string(name='triggerName', description='The name of the trigger.', example='demoTrigger', position='Path'),
  ifMatch?: string(name='If-Match', description='This parameter is used to ensure that the modified resource is consistent with the resource to be modified. You can obtain the parameter value from the responses of [CreateTrigger](~~190054~~), [GetTrigger](~~190056~~), and [UpdateTrigger](~~190055~~) operations.', example='e19d5cd5af0378da05f63f891c7467af', position='Header'),
  xFcAccountId?: string(name='X-Fc-Account-Id', description='The ID of your Alibaba Cloud account.', example='188077086902****', position='Header'),
  xFcDate?: string(name='X-Fc-Date', description='The time when the request is initiated on the client. The format of the value is: **EEE,d MMM yyyy HH:mm:ss GMT**.', example='Wed, 11 May 2022 09:00:00 GMT', position='Header'),
  xFcTraceId?: string(name='X-Fc-Trace-Id', description='The custom request ID.', example='my-test-trace-id', position='Header'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test', position='Body'),
  invocationRole?: string(name='invocationRole', description='The role that is used by the event source such as Object Storage Service (OSS) to invoke the function. For more information, see [Overview](~~53102~~).', example='acs:ram::123456xxxx:role/fc-test', position='Body'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST', position='Body'),
  triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type. For more information about the format, see the following topics:

*   Object Storage Service (OSS) trigger: [OSSTriggerConfig](~~415697~~).
*   Simple Log Service trigger: [LogTriggerConfig](~~415694~~).
*   Time trigger: [TimeTriggerConfig](~~415712~~).
*   HTTP trigger: [HTTPTriggerConfig](~~415685~~).
*   Tablestore trigger: Specify the **SourceArn** parameter and leave this parameter empty.
*   Alibaba Cloud CDN event trigger: [CDNEventsTriggerConfig](~~415674~~).
*   MNS topic trigger: [MnsTopicTriggerConfig](~~415695~~).
*   EventBridge triggers: [EventBridgeTriggerConfig](~~2508622~~).', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}', position='Body'),
}

model UpdateTriggerResponseBody = {
  createdTime?: string(name='createdTime', description='The time when the audio or video file was created.', example='2016-08-15T15:00:00.000+0000'),
  description?: string(name='description', description='The description of the trigger.', example='trigger for test'),
  domainName?: string(name='domainName', description='The domain name used to invoke the function by using HTTP. You can add this domain name as the prefix to the endpoint of Function Compute. This way, you can invoke the function that corresponds to the trigger by using HTTP. For example, `{domainName}.cn-shanghai.fc.aliyuncs.com`.', example='demo-service-demo-function-jkhksh'),
  invocationRole?: string(name='invocationRole', description='The ARN of the RAM role that is used by the event source to invoke the function.', example='acs:ram::123456xxxx:role/fc-test'),
  lastModifiedTime?: string(name='lastModifiedTime', description='The last modification time.', example='016-08-15T17:00:00.000+0000'),
  qualifier?: string(name='qualifier', description='The version or alias of the service.', example='LATEST'),
  sourceArn?: string(name='sourceArn', description='The ARN of the event source.', example='acs:oss:cn-shanghai:12345xxxx:mybucket'),
  triggerConfig?: string(name='triggerConfig', description='The configurations of the trigger. The configurations vary based on the trigger type.', example='{"events": ["oss:ObjectCreated:*"], "filter": {"key": {"prefix": "/prefix", "suffix": ".zip"}}}'),
  triggerId?: string(name='triggerId', description='The unique ID of the trigger.', example='3e270f2f-cef2-421a-bc86-ff4e8088****'),
  triggerName?: string(name='triggerName', description='The name of the trigger.', example='demoTrigger'),
  triggerType?: string(name='triggerType', description='The trigger type. Example values: **oss**, **log**, **tablestore**, **timer**, **http**, **cdn_events**, **mns_topic**, and **eventbridge**.', example='oss'),
  urlInternet?: string(name='urlInternet', description='The public domain address. You can access HTTP triggers over the Internet by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou.fcapp.run'),
  urlIntranet?: string(name='urlIntranet', description='The private endpoint. In a VPC, you can access HTTP triggers by using HTTP or HTTPS.', example='https://svc-func-xxxxxxxx.cn-hangzhou-vpc.fcapp.run'),
}

model UpdateTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTriggerResponseBody(name='body'),
}

async function updateTrigger(request: UpdateTriggerRequest): UpdateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTrigger', 'PUT', '/2021-04-06/services/{serviceName}/functions/{functionName}/triggers/{triggerName}', 'json', false, 'json', request);
}

