/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'aps';
  @version = '2024-03-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetFxCustomerTypeRequest {
  uid: long(name='Uid', position='Query'),
}

model GetFxCustomerTypeResponseBody = {
  code?: string(name='Code'),
  data?: {
    customerType?: int32(name='CustomerType'),
    isSub?: int32(name='IsSub'),
    parentId?: long(name='ParentId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetFxCustomerTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFxCustomerTypeResponseBody(name='body'),
}

async function getFxCustomerType(request: GetFxCustomerTypeRequest): GetFxCustomerTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFxCustomerType', 'POST', '/', 'json', false, 'json', request);
}

