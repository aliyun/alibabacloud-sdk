/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Green';
  @version = '2017-08-23';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-3' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'green.ap-southeast-1.aliyuncs.com',
    'cn-chengdu' = 'green.aliyuncs.com',
    'cn-hongkong' = 'green.aliyuncs.com',
    'cn-huhehaote' = 'green.aliyuncs.com',
    'cn-qingdao' = 'green.aliyuncs.com',
    'cn-zhangjiakou' = 'green.aliyuncs.com',
    'eu-central-1' = 'green.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'green.ap-southeast-1.aliyuncs.com',
    'me-east-1' = 'green.ap-southeast-1.aliyuncs.com',
    'us-east-1' = 'green.ap-southeast-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'green.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'green.aliyuncs.com',
    'cn-shanghai-finance-1' = 'green.aliyuncs.com',
    'cn-north-2-gov-1' = 'green.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AuditItemSubmitRequest {
  data?: [ 
    {
      customResult?: string(name='CustomResult'),
      customRiskType?: string(name='CustomRiskType'),
      id?: long(name='Id'),
    }
  ](name='Data', position='Query'),
}

model AuditItemSubmitResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AuditItemSubmitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuditItemSubmitResponseBody(name='body'),
}

async function auditItemSubmit(request: AuditItemSubmitRequest): AuditItemSubmitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuditItemSubmit', 'POST', '/', 'json', false, 'json', request);
}

model CreatCustomOcrTemplateRequest {
  imgUrl: string(name='ImgUrl', position='Query'),
  name: string(name='Name', position='Query'),
  recognizeArea?: string(name='RecognizeArea', position='Query'),
  referArea?: string(name='ReferArea', position='Query'),
}

model CreatCustomOcrTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreatCustomOcrTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatCustomOcrTemplateResponseBody(name='body'),
}

async function creatCustomOcrTemplate(request: CreatCustomOcrTemplateRequest): CreatCustomOcrTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatCustomOcrTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuditCallbackRequest {
  callbackSuggestions: string(name='CallbackSuggestions', position='Query'),
  callbackTypes: string(name='CallbackTypes', position='Query'),
  cryptType?: string(name='CryptType', position='Query'),
  name: string(name='Name', position='Query'),
  url: string(name='Url', position='Query'),
}

model CreateAuditCallbackResponseBody = {
  callbackSuggestions?: [ string ](name='CallbackSuggestions'),
  callbackTypes?: [ string ](name='CallbackTypes'),
  createTime?: string(name='CreateTime'),
  cryptType?: string(name='CryptType'),
  id?: long(name='Id'),
  modifiedTime?: string(name='ModifiedTime'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  seed?: string(name='Seed'),
  url?: string(name='Url'),
}

model CreateAuditCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuditCallbackResponseBody(name='body'),
}

async function createAuditCallback(request: CreateAuditCallbackRequest): CreateAuditCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuditCallback', 'POST', '/', 'json', false, 'json', request);
}

model CreateBizTypeRequest {
  bizTypeImport?: string(name='BizTypeImport', position='Query'),
  bizTypeName: string(name='BizTypeName', position='Query'),
  citeTemplate?: boolean(name='CiteTemplate', position='Query'),
  description?: string(name='Description', position='Query'),
  industryInfo?: string(name='IndustryInfo', position='Query'),
}

model CreateBizTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateBizTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBizTypeResponseBody(name='body'),
}

async function createBizType(request: CreateBizTypeRequest): CreateBizTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBizType', 'POST', '/', 'json', false, 'json', request);
}

model CreateCdiBagRequest {
  clientToken: string(name='ClientToken', position='Query'),
  commodityCode?: string(name='CommodityCode', position='Query'),
  flowOutSpec?: int32(name='FlowOutSpec', position='Query'),
  orderNum?: int32(name='OrderNum', position='Query'),
  orderType: string(name='OrderType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CreateCdiBagResponseBody = {
  code?: string(name='Code'),
  instanceIds?: {
    string?: [ string ](name='String')
  }(name='InstanceIds'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCdiBagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCdiBagResponseBody(name='body'),
}

async function createCdiBag(request: CreateCdiBagRequest): CreateCdiBagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCdiBag', 'POST', '/', 'json', false, 'json', request);
}

model CreateCdiBaseBagRequest {
  clientToken: string(name='ClientToken', position='Query'),
  commodityCode?: string(name='CommodityCode', position='Query'),
  duration: int32(name='Duration', position='Query'),
  flowOutSpec?: int32(name='FlowOutSpec', position='Query'),
  orderType: string(name='OrderType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CreateCdiBaseBagResponseBody = {
  code?: string(name='Code'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCdiBaseBagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCdiBaseBagResponseBody(name='body'),
}

async function createCdiBaseBag(request: CreateCdiBaseBagRequest): CreateCdiBaseBagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCdiBaseBag', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageLibRequest {
  bizTypes?: string(name='BizTypes', position='Query'),
  category: string(name='Category', position='Query'),
  enable?: boolean(name='Enable', position='Query'),
  name: string(name='Name', position='Query'),
  scene: string(name='Scene', position='Query'),
  serviceModule: string(name='ServiceModule', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model CreateImageLibResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateImageLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageLibResponseBody(name='body'),
}

async function createImageLib(request: CreateImageLibRequest): CreateImageLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageLib', 'POST', '/', 'json', false, 'json', request);
}

model CreateKeywordRequest {
  keywordLibId: long(name='KeywordLibId', position='Query'),
  keywords: string(name='Keywords', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model CreateKeywordResponseBody = {
  invalidKeywordList?: [ string ](name='InvalidKeywordList'),
  requestId?: string(name='RequestId'),
  successCount?: int32(name='SuccessCount'),
  validKeywordList?: [ 
    {
      id?: int32(name='id'),
      keyword?: string(name='keyword'),
    }
  ](name='validKeywordList'),
}

model CreateKeywordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKeywordResponseBody(name='body'),
}

async function createKeyword(request: CreateKeywordRequest): CreateKeywordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateKeyword', 'POST', '/', 'json', false, 'json', request);
}

model CreateKeywordLibRequest {
  bizTypes?: string(name='BizTypes', position='Query'),
  category?: string(name='Category', position='Query'),
  enable?: boolean(name='Enable', position='Query'),
  lang?: string(name='Lang', position='Query'),
  language?: string(name='Language', position='Query'),
  libType?: string(name='LibType', position='Query'),
  matchMode?: string(name='MatchMode', position='Query'),
  name: string(name='Name', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  serviceModule: string(name='ServiceModule', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model CreateKeywordLibResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateKeywordLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKeywordLibResponseBody(name='body'),
}

async function createKeywordLib(request: CreateKeywordLibRequest): CreateKeywordLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateKeywordLib', 'POST', '/', 'json', false, 'json', request);
}

model CreateWebSiteInstanceRequest {
  clientToken: string(name='ClientToken', position='Query'),
  duration: int32(name='Duration', position='Query'),
  orderNum?: int32(name='OrderNum', position='Query'),
  orderType: string(name='OrderType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pricingCycle: string(name='PricingCycle', position='Query'),
}

model CreateWebSiteInstanceResponseBody = {
  code?: string(name='Code'),
  instanceIds?: {
    string?: [ string ](name='String')
  }(name='InstanceIds'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateWebSiteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWebSiteInstanceResponseBody(name='body'),
}

async function createWebSiteInstance(request: CreateWebSiteInstanceRequest): CreateWebSiteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWebSiteInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateWebsiteIndexPageBaselineRequest {
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model CreateWebsiteIndexPageBaselineResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateWebsiteIndexPageBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWebsiteIndexPageBaselineResponseBody(name='body'),
}

async function createWebsiteIndexPageBaseline(request: CreateWebsiteIndexPageBaselineRequest): CreateWebsiteIndexPageBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWebsiteIndexPageBaseline', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBizTypeRequest {
  bizTypeName: string(name='BizTypeName', position='Query'),
}

model DeleteBizTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBizTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBizTypeResponseBody(name='body'),
}

async function deleteBizType(request: DeleteBizTypeRequest): DeleteBizTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBizType', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomOcrTemplateRequest {
  ids: string(name='Ids', position='Query'),
}

model DeleteCustomOcrTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomOcrTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomOcrTemplateResponseBody(name='body'),
}

async function deleteCustomOcrTemplate(request: DeleteCustomOcrTemplateRequest): DeleteCustomOcrTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomOcrTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageFromLibRequest {
  ids: string(name='Ids', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteImageFromLibResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImageFromLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImageFromLibResponseBody(name='body'),
}

async function deleteImageFromLib(request: DeleteImageFromLibRequest): DeleteImageFromLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImageFromLib', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageLibRequest {
  id: int32(name='Id', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteImageLibResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImageLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImageLibResponseBody(name='body'),
}

async function deleteImageLib(request: DeleteImageLibRequest): DeleteImageLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImageLib', 'POST', '/', 'json', false, 'json', request);
}

model DeleteKeywordRequest {
  ids?: string(name='Ids', position='Query'),
  keywordLibId: string(name='KeywordLibId', position='Query'),
  keywords?: string(name='Keywords', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteKeywordResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteKeywordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKeywordResponseBody(name='body'),
}

async function deleteKeyword(request: DeleteKeywordRequest): DeleteKeywordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKeyword', 'POST', '/', 'json', false, 'json', request);
}

model DeleteKeywordLibRequest {
  id: int32(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteKeywordLibResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteKeywordLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKeywordLibResponseBody(name='body'),
}

async function deleteKeywordLib(request: DeleteKeywordLibRequest): DeleteKeywordLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKeywordLib', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNotificationContactsRequest {
  contactTypes: string(name='ContactTypes', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteNotificationContactsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNotificationContactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNotificationContactsResponseBody(name='body'),
}

async function deleteNotificationContacts(request: DeleteNotificationContactsRequest): DeleteNotificationContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNotificationContacts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppInfoRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  platform?: string(name='Platform', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeAppInfoResponseBody = {
  appInfoList?: [ 
    {
      debugPackageInfo?: {
        version?: string(name='Version'),
      }(name='DebugPackageInfo'),
      endDate?: string(name='EndDate'),
      icon?: string(name='Icon'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      packageInfo?: {
        version?: string(name='Version'),
      }(name='PackageInfo'),
      packageName?: string(name='PackageName'),
      startDate?: string(name='StartDate'),
      type?: int32(name='Type'),
    }
  ](name='AppInfoList'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppInfoResponseBody(name='body'),
}

async function describeAppInfo(request: DescribeAppInfoRequest): DescribeAppInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditCallbackRequest {
}

model DescribeAuditCallbackResponseBody = {
  callback?: string(name='Callback'),
  cryptType?: int32(name='CryptType'),
  requestId?: string(name='RequestId'),
  seed?: string(name='Seed'),
}

model DescribeAuditCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditCallbackResponseBody(name='body'),
}

async function describeAuditCallback(request: DescribeAuditCallbackRequest): DescribeAuditCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditCallback', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditCallbackListRequest {
}

model DescribeAuditCallbackListResponseBody = {
  callbackList?: [ 
    {
      callbackSuggestions?: [ string ](name='CallbackSuggestions'),
      callbackTypes?: [ string ](name='CallbackTypes'),
      createTime?: string(name='CreateTime'),
      cryptType?: string(name='CryptType'),
      id?: long(name='Id'),
      modifiedTime?: string(name='ModifiedTime'),
      name?: string(name='Name'),
      seed?: string(name='Seed'),
      url?: string(name='Url'),
    }
  ](name='CallbackList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAuditCallbackListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditCallbackListResponseBody(name='body'),
}

async function describeAuditCallbackList(request: DescribeAuditCallbackListRequest): DescribeAuditCallbackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditCallbackList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditContentRequest {
  auditResult?: string(name='AuditResult', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  dataId?: string(name='DataId', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  keywordId?: string(name='KeywordId', position='Query'),
  label?: string(name='Label', position='Query'),
  lang?: string(name='Lang', position='Query'),
  libType?: string(name='LibType', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  scene?: string(name='Scene', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  suggestion?: string(name='Suggestion', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeAuditContentResponseBody = {
  auditContentList?: [ 
    {
      audit?: int32(name='Audit'),
      auditIllegalReasons?: [ string ](name='AuditIllegalReasons'),
      auditResult?: string(name='AuditResult'),
      bizType?: string(name='BizType'),
      content?: string(name='Content'),
      dataId?: string(name='DataId'),
      frameResults?: [ 
        {
          label?: string(name='Label'),
          offset?: int32(name='Offset'),
          url?: string(name='Url'),
        }
      ](name='FrameResults'),
      id?: long(name='Id'),
      newUrl?: string(name='NewUrl'),
      requestTime?: string(name='RequestTime'),
      results?: [ 
        {
          label?: string(name='Label'),
          scene?: string(name='Scene'),
          suggestion?: string(name='Suggestion'),
        }
      ](name='Results'),
      scanFinishedTime?: string(name='ScanFinishedTime'),
      suggestion?: string(name='Suggestion'),
      taskId?: string(name='TaskId'),
      thumbnail?: string(name='Thumbnail'),
      url?: string(name='Url'),
    }
  ](name='AuditContentList'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAuditContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditContentResponseBody(name='body'),
}

async function describeAuditContent(request: DescribeAuditContentRequest): DescribeAuditContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditContent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditContentItemRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  taskId: string(name='TaskId', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeAuditContentItemResponseBody = {
  auditContentItemList?: [ 
    {
      audit?: int32(name='Audit'),
      auditIllegalReasons?: [ string ](name='AuditIllegalReasons'),
      auditResult?: string(name='AuditResult'),
      content?: string(name='Content'),
      endTime?: string(name='EndTime'),
      id?: long(name='Id'),
      parentTaskId?: string(name='ParentTaskId'),
      sn?: int32(name='Sn'),
      startTime?: string(name='StartTime'),
      suggestion?: string(name='Suggestion'),
    }
  ](name='AuditContentItemList'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAuditContentItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditContentItemResponseBody(name='body'),
}

async function describeAuditContentItem(request: DescribeAuditContentItemRequest): DescribeAuditContentItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditContentItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditRangeRequest {
}

model DescribeAuditRangeResponseBody = {
  auditRange?: {
    block?: boolean(name='block'),
    pass?: boolean(name='pass'),
    review?: boolean(name='review'),
  }(name='AuditRange'),
  requestId?: string(name='RequestId'),
}

model DescribeAuditRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditRangeResponseBody(name='body'),
}

async function describeAuditRange(request: DescribeAuditRangeRequest): DescribeAuditRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditRange', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditSettingRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeAuditSettingResponseBody = {
  auditRange?: {
    block?: boolean(name='block'),
    pass?: boolean(name='pass'),
    review?: boolean(name='review'),
  }(name='AuditRange'),
  callback?: string(name='Callback'),
  requestId?: string(name='RequestId'),
  seed?: string(name='Seed'),
}

model DescribeAuditSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuditSettingResponseBody(name='body'),
}

async function describeAuditSetting(request: DescribeAuditSettingRequest): DescribeAuditSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBizTypeImageLibRequest {
  bizTypeName: string(name='BizTypeName', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  scene: string(name='Scene', position='Query'),
}

model DescribeBizTypeImageLibResponseBody = {
  black?: {
    all?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='All'),
    selected?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='Selected'),
  }(name='Black'),
  requestId?: string(name='RequestId'),
  review?: {
    all?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='All'),
    selected?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='Selected'),
  }(name='Review'),
  white?: {
    all?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='All'),
    selected?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='Selected'),
  }(name='White'),
}

model DescribeBizTypeImageLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBizTypeImageLibResponseBody(name='body'),
}

async function describeBizTypeImageLib(request: DescribeBizTypeImageLibRequest): DescribeBizTypeImageLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBizTypeImageLib', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBizTypeSettingRequest {
  bizTypeName: string(name='BizTypeName', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model DescribeBizTypeSettingResponseBody = {
  ad?: {
    categories?: [ string ](name='Categories'),
  }(name='Ad'),
  antispam?: {
    categories?: [ string ](name='Categories'),
  }(name='Antispam'),
  live?: {
    categories?: [ string ](name='Categories'),
  }(name='Live'),
  porn?: {
    categories?: [ string ](name='Categories'),
  }(name='Porn'),
  requestId?: string(name='RequestId'),
  terrorism?: {
    categories?: [ string ](name='Categories'),
  }(name='Terrorism'),
}

model DescribeBizTypeSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBizTypeSettingResponseBody(name='body'),
}

async function describeBizTypeSetting(request: DescribeBizTypeSettingRequest): DescribeBizTypeSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBizTypeSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBizTypeTextLibRequest {
  bizTypeName: string(name='BizTypeName', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  scene: string(name='Scene', position='Query'),
}

model DescribeBizTypeTextLibResponseBody = {
  black?: {
    all?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='All'),
    selected?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='Selected'),
  }(name='Black'),
  ignore?: {
    all?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='All'),
    selected?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='Selected'),
  }(name='Ignore'),
  requestId?: string(name='RequestId'),
  review?: {
    all?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='All'),
    selected?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='Selected'),
  }(name='Review'),
  white?: {
    all?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='All'),
    selected?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }
    ](name='Selected'),
  }(name='White'),
}

model DescribeBizTypeTextLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBizTypeTextLibResponseBody(name='body'),
}

async function describeBizTypeTextLib(request: DescribeBizTypeTextLibRequest): DescribeBizTypeTextLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBizTypeTextLib', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBizTypesRequest {
  importFlag?: boolean(name='ImportFlag', position='Query'),
}

model DescribeBizTypesResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBizTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBizTypesResponseBody(name='body'),
}

async function describeBizTypes(request: DescribeBizTypesRequest): DescribeBizTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBizTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudMonitorServicesRequest {
  page: string(name='Page', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeCloudMonitorServicesResponseBody = {
  items?: [ string ](name='Items'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCloudMonitorServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudMonitorServicesResponseBody(name='body'),
}

async function describeCloudMonitorServices(request: DescribeCloudMonitorServicesRequest): DescribeCloudMonitorServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudMonitorServices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomOcrTemplateRequest {
  ids?: string(name='Ids', position='Query'),
}

model DescribeCustomOcrTemplateResponseBody = {
  ocrTemplateList?: [ 
    {
      id?: long(name='Id'),
      imgUrl?: string(name='ImgUrl'),
      name?: string(name='Name'),
      recognizeArea?: [ 
        {
          height?: int32(name='Height'),
          name?: string(name='Name'),
          width?: int32(name='Width'),
          x?: int32(name='X'),
          y?: int32(name='Y'),
        }
      ](name='RecognizeArea'),
      referArea?: [ 
        {
          height?: int32(name='Height'),
          name?: string(name='Name'),
          width?: int32(name='Width'),
          x?: int32(name='X'),
          y?: int32(name='Y'),
        }
      ](name='ReferArea'),
      status?: int32(name='Status'),
    }
  ](name='OcrTemplateList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCustomOcrTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomOcrTemplateResponseBody(name='body'),
}

async function describeCustomOcrTemplate(request: DescribeCustomOcrTemplateRequest): DescribeCustomOcrTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomOcrTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageFromLibRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  id?: long(name='Id', position='Query'),
  imageLibId: int32(name='ImageLibId', position='Query'),
  modelId?: long(name='ModelId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeImageFromLibResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  imageFromLibList?: [ 
    {
      createTime?: string(name='CreateTime'),
      id?: long(name='Id'),
      image?: string(name='Image'),
      imageHitCount?: long(name='ImageHitCount'),
      thumbnail?: string(name='Thumbnail'),
      videoHitCount?: long(name='VideoHitCount'),
    }
  ](name='ImageFromLibList'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeImageFromLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImageFromLibResponseBody(name='body'),
}

async function describeImageFromLib(request: DescribeImageFromLibRequest): DescribeImageFromLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageFromLib', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageLibRequest {
  serviceModule: string(name='ServiceModule', example='open_api', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeImageLibResponseBody = {
  imageLibList?: [ 
    {
      bizTypes?: [ string ](name='BizTypes'),
      category?: string(name='Category', example='BLACK'),
      code?: string(name='Code', example='808003055'),
      enable?: string(name='Enable', example='true'),
      id?: int32(name='Id', example='1279'),
      imageCount?: int32(name='ImageCount', example='1912312312'),
      modifiedTime?: string(name='ModifiedTime', example='2018-03-19 10:45:44 +0800'),
      name?: string(name='Name'),
      scene?: string(name='Scene', example='PORN'),
      serviceModule?: string(name='ServiceModule', example='open_api'),
      source?: string(name='Source', example='MANUAL'),
    }
  ](name='ImageLibList'),
  requestId?: string(name='RequestId', example='6CF2815C-C8C7-4A01-B52E-FF6E24F53492'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeImageLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImageLibResponseBody(name='body'),
}

async function describeImageLib(request: DescribeImageLibRequest): DescribeImageLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageLib', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageUploadInfoRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeImageUploadInfoResponseBody = {
  accessid?: string(name='Accessid'),
  expire?: int32(name='Expire'),
  folder?: string(name='Folder'),
  host?: string(name='Host'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
}

model DescribeImageUploadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImageUploadInfoResponseBody(name='body'),
}

async function describeImageUploadInfo(request: DescribeImageUploadInfoRequest): DescribeImageUploadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageUploadInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeKeywordRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  keywordLibId: int32(name='KeywordLibId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeKeywordResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  keywordList?: [ 
    {
      createTime?: string(name='CreateTime'),
      hitCount?: int32(name='HitCount'),
      id?: int32(name='Id'),
      keyword?: string(name='Keyword'),
    }
  ](name='KeywordList'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeKeywordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKeywordResponseBody(name='body'),
}

async function describeKeyword(request: DescribeKeywordRequest): DescribeKeywordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKeyword', 'POST', '/', 'json', false, 'json', request);
}

model DescribeKeywordLibRequest {
  lang?: string(name='Lang', position='Query'),
  serviceModule: string(name='ServiceModule', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeKeywordLibResponseBody = {
  keywordLibList?: [ 
    {
      bizTypes?: [ string ](name='BizTypes'),
      category?: string(name='Category'),
      code?: string(name='Code'),
      count?: int32(name='Count'),
      enable?: boolean(name='Enable'),
      id?: int32(name='Id'),
      language?: string(name='Language'),
      libType?: string(name='LibType'),
      matchMode?: string(name='MatchMode'),
      modifiedTime?: string(name='ModifiedTime'),
      name?: string(name='Name'),
      resourceType?: string(name='ResourceType'),
      serviceModule?: string(name='ServiceModule'),
      source?: string(name='Source'),
    }
  ](name='KeywordLibList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeKeywordLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKeywordLibResponseBody(name='body'),
}

async function describeKeywordLib(request: DescribeKeywordLibRequest): DescribeKeywordLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKeywordLib', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNotificationSettingRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeNotificationSettingResponseBody = {
  email?: string(name='Email'),
  phone?: string(name='Phone'),
  realtimeMessageList?: [ string ](name='RealtimeMessageList'),
  reminderModeList?: [ string ](name='ReminderModeList'),
  requestId?: string(name='RequestId'),
  scheduleMessageTime?: int32(name='ScheduleMessageTime'),
  scheduleMessageTimeZone?: int32(name='ScheduleMessageTimeZone'),
}

model DescribeNotificationSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNotificationSettingResponseBody(name='body'),
}

async function describeNotificationSetting(request: DescribeNotificationSettingRequest): DescribeNotificationSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNotificationSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOpenApiRcpStatsRequest {
  bizType?: string(name='BizType', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  startDate: string(name='StartDate', position='Query'),
}

model DescribeOpenApiRcpStatsResponseBody = {
  requestId?: string(name='RequestId'),
  statList?: [ 
    {
      blockCount?: int32(name='BlockCount'),
      date?: string(name='Date'),
      passCount?: int32(name='PassCount'),
      resourceType?: string(name='ResourceType'),
      reviewCount?: int32(name='ReviewCount'),
      totalCount?: int32(name='TotalCount'),
      totalDuration?: int32(name='TotalDuration'),
    }
  ](name='StatList'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeOpenApiRcpStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOpenApiRcpStatsResponseBody(name='body'),
}

async function describeOpenApiRcpStats(request: DescribeOpenApiRcpStatsRequest): DescribeOpenApiRcpStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOpenApiRcpStats', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOpenApiUsageRequest {
  endDate: string(name='EndDate', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startDate: string(name='StartDate', position='Query'),
}

model DescribeOpenApiUsageResponseBody = {
  openApiUsageList?: [ 
    {
      blockCount?: int32(name='BlockCount'),
      blockDuration?: int32(name='BlockDuration'),
      date?: string(name='Date'),
      innerTotalCount?: int32(name='InnerTotalCount'),
      outerTotalCount?: int32(name='OuterTotalCount'),
      passCount?: int32(name='PassCount'),
      passDuration?: int32(name='PassDuration'),
      resourceType?: string(name='ResourceType'),
      reviewCount?: int32(name='ReviewCount'),
      reviewDuration?: int32(name='ReviewDuration'),
      scene?: string(name='Scene'),
      totalCount?: int32(name='TotalCount'),
      totalDuration?: int32(name='TotalDuration'),
    }
  ](name='OpenApiUsageList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeOpenApiUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOpenApiUsageResponseBody(name='body'),
}

async function describeOpenApiUsage(request: DescribeOpenApiUsageRequest): DescribeOpenApiUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOpenApiUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssCallbackSettingRequest {
}

model DescribeOssCallbackSettingResponseBody = {
  auditCallback?: boolean(name='AuditCallback'),
  callbackSeed?: string(name='CallbackSeed'),
  callbackUrl?: string(name='CallbackUrl'),
  requestId?: string(name='RequestId'),
  scanCallback?: boolean(name='ScanCallback'),
  scanCallbackSuggestions?: [ string ](name='ScanCallbackSuggestions'),
  serviceModules?: [ string ](name='ServiceModules'),
}

model DescribeOssCallbackSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssCallbackSettingResponseBody(name='body'),
}

async function describeOssCallbackSetting(request: DescribeOssCallbackSettingRequest): DescribeOssCallbackSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssCallbackSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssIncrementCheckSettingRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeOssIncrementCheckSettingResponseBody = {
  audioAntispamFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='AudioAntispamFreezeConfig'),
  audioAutoFreezeOpened?: boolean(name='AudioAutoFreezeOpened'),
  audioMaxSize?: int32(name='AudioMaxSize'),
  audioScanLimit?: long(name='AudioScanLimit'),
  audioSceneList?: [ string ](name='AudioSceneList'),
  autoFreezeType?: string(name='AutoFreezeType'),
  bizType?: string(name='BizType'),
  bizTypeTemplate?: {
    bizType?: string(name='BizType'),
    description?: string(name='Description'),
    imageConfig?: {
      ad?: {
        categories?: [ string ](name='Categories'),
      }(name='Ad'),
      live?: {
        categories?: [ string ](name='Categories'),
      }(name='Live'),
      porn?: {
        categories?: [ string ](name='Categories'),
      }(name='Porn'),
      terrorism?: {
        categories?: [ string ](name='Categories'),
      }(name='Terrorism'),
    }(name='ImageConfig'),
    includeChannel?: int32(name='IncludeChannel'),
    name?: string(name='Name'),
    videoConfig?: {
      ad?: {
        categories?: [ string ](name='Categories'),
      }(name='Ad'),
      live?: {
        categories?: [ string ](name='Categories'),
      }(name='Live'),
      porn?: {
        categories?: [ string ](name='Categories'),
      }(name='Porn'),
      terrorism?: {
        categories?: [ string ](name='Categories'),
      }(name='Terrorism'),
    }(name='VideoConfig'),
    voiceConfig?: {
      antispam?: {
        categories?: [ string ](name='Categories'),
      }(name='Antispam'),
    }(name='VoiceConfig'),
  }(name='BizTypeTemplate'),
  bucketConfigList?: [ 
    {
      bucket?: string(name='Bucket'),
      prefixes?: [ string ](name='Prefixes'),
      selected?: boolean(name='Selected'),
      type?: string(name='Type'),
    }
  ](name='BucketConfigList'),
  callbackId?: string(name='CallbackId'),
  callbackName?: string(name='CallbackName'),
  endTime?: string(name='EndTime'),
  imageAdFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='ImageAdFreezeConfig'),
  imageAutoFreeze?: {
    ad?: string(name='Ad'),
    enabled?: boolean(name='Enabled'),
    live?: string(name='Live'),
    porn?: string(name='Porn'),
    terrorism?: string(name='Terrorism'),
  }(name='ImageAutoFreeze'),
  imageAutoFreezeOpened?: boolean(name='ImageAutoFreezeOpened'),
  imageEnableLimit?: boolean(name='ImageEnableLimit'),
  imageLiveFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='ImageLiveFreezeConfig'),
  imagePornFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='ImagePornFreezeConfig'),
  imageScanLimit?: long(name='ImageScanLimit'),
  imageSceneList?: [ string ](name='ImageSceneList'),
  imageTerrorismFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='ImageTerrorismFreezeConfig'),
  requestId?: string(name='RequestId'),
  scanImageNoFileType?: boolean(name='ScanImageNoFileType'),
  startTime?: string(name='StartTime'),
  videoAdFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='VideoAdFreezeConfig'),
  videoAutoFreezeOpened?: boolean(name='VideoAutoFreezeOpened'),
  videoAutoFreezeSceneList?: [ string ](name='VideoAutoFreezeSceneList'),
  videoFrameInterval?: int32(name='VideoFrameInterval'),
  videoLiveFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='VideoLiveFreezeConfig'),
  videoMaxFrames?: int32(name='VideoMaxFrames'),
  videoMaxSize?: int32(name='VideoMaxSize'),
  videoPornFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='VideoPornFreezeConfig'),
  videoScanLimit?: long(name='VideoScanLimit'),
  videoSceneList?: [ string ](name='VideoSceneList'),
  videoTerrorismFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='VideoTerrorismFreezeConfig'),
  videoVoiceAntispamFreezeConfig?: {
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='VideoVoiceAntispamFreezeConfig'),
}

model DescribeOssIncrementCheckSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssIncrementCheckSettingResponseBody(name='body'),
}

async function describeOssIncrementCheckSetting(request: DescribeOssIncrementCheckSettingRequest): DescribeOssIncrementCheckSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssIncrementCheckSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssIncrementOverviewRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeOssIncrementOverviewResponseBody = {
  adUnhandleCount?: int32(name='AdUnhandleCount'),
  audioCount?: int32(name='AudioCount'),
  imageCount?: int32(name='ImageCount'),
  liveUnhandleCount?: int32(name='LiveUnhandleCount'),
  pornUnhandleCount?: int32(name='PornUnhandleCount'),
  requestId?: string(name='RequestId'),
  terrorismUnhandleCount?: int32(name='TerrorismUnhandleCount'),
  videoCount?: int32(name='VideoCount'),
  videoFrameCount?: int32(name='VideoFrameCount'),
  voiceAntispamUnhandleCount?: int32(name='VoiceAntispamUnhandleCount'),
}

model DescribeOssIncrementOverviewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssIncrementOverviewResponseBody(name='body'),
}

async function describeOssIncrementOverview(request: DescribeOssIncrementOverviewRequest): DescribeOssIncrementOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssIncrementOverview', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssIncrementStatsRequest {
  endDate: string(name='EndDate', position='Query'),
  lang?: string(name='Lang', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  scene: string(name='Scene', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startDate: string(name='StartDate', position='Query'),
}

model DescribeOssIncrementStatsResponseBody = {
  requestId?: string(name='RequestId'),
  statList?: [ 
    {
      blockCount?: int32(name='BlockCount'),
      date?: string(name='Date'),
      passCount?: int32(name='PassCount'),
      resourceType?: string(name='ResourceType'),
      reviewCount?: int32(name='ReviewCount'),
      scene?: string(name='Scene'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='StatList'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeOssIncrementStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssIncrementStatsResponseBody(name='body'),
}

async function describeOssIncrementStats(request: DescribeOssIncrementStatsRequest): DescribeOssIncrementStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssIncrementStats', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssResultItemsRequest {
  bucket?: string(name='Bucket', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  lang?: string(name='Lang', position='Query'),
  maxScore?: float(name='MaxScore', position='Query'),
  minScore?: float(name='MinScore', position='Query'),
  object?: string(name='Object', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryId?: string(name='QueryId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  scene?: string(name='Scene', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
  stock: boolean(name='Stock', position='Query'),
  stockTaskId?: long(name='StockTaskId', position='Query'),
  suggestion?: string(name='Suggestion', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeOssResultItemsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  queryId?: string(name='QueryId'),
  requestId?: string(name='RequestId'),
  scanResultList?: [ 
    {
      bucket?: string(name='Bucket'),
      content?: string(name='Content'),
      createTime?: string(name='CreateTime'),
      dataId?: string(name='DataId'),
      frameResults?: [ 
        {
          offset?: int32(name='Offset'),
          thumbnail?: string(name='Thumbnail'),
          url?: string(name='Url'),
        }
      ](name='FrameResults'),
      handleStatus?: int32(name='HandleStatus'),
      id?: long(name='Id'),
      newUrl?: string(name='NewUrl'),
      object?: string(name='Object'),
      requestTime?: string(name='RequestTime'),
      resourceStatus?: int32(name='ResourceStatus'),
      scanFinishedTime?: string(name='ScanFinishedTime'),
      score?: string(name='Score'),
      suggestion?: string(name='Suggestion'),
      taskId?: string(name='TaskId'),
      thumbnail?: string(name='Thumbnail'),
      voiceSegmentAntispamResults?: [ 
        {
          endTime?: int32(name='EndTime'),
          label?: string(name='Label'),
          startTime?: int32(name='StartTime'),
          text?: string(name='Text'),
        }
      ](name='VoiceSegmentAntispamResults'),
    }
  ](name='ScanResultList'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeOssResultItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssResultItemsResponseBody(name='body'),
}

async function describeOssResultItems(request: DescribeOssResultItemsRequest): DescribeOssResultItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssResultItems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssStockStatusRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  stockTaskId?: long(name='StockTaskId', position='Query'),
}

model DescribeOssStockStatusResponseBody = {
  audioAntispamCount?: int32(name='AudioAntispamCount'),
  audioTotalCount?: int32(name='AudioTotalCount'),
  bucketList?: [ 
    {
      bucket?: string(name='Bucket'),
      prefixes?: [ string ](name='Prefixes'),
      selected?: boolean(name='Selected'),
    }
  ](name='BucketList'),
  finishedTime?: string(name='FinishedTime'),
  imageAdCount?: int32(name='ImageAdCount'),
  imageLiveCount?: int32(name='ImageLiveCount'),
  imagePornCount?: int32(name='ImagePornCount'),
  imageTerrorismCount?: int32(name='ImageTerrorismCount'),
  imageTotalCount?: int32(name='ImageTotalCount'),
  requestId?: string(name='RequestId'),
  resouceTypeList?: [ string ](name='ResouceTypeList'),
  sceneList?: [ string ](name='SceneList'),
  stockStatus?: int32(name='StockStatus'),
  videoAdCount?: int32(name='VideoAdCount'),
  videoLiveCount?: int32(name='VideoLiveCount'),
  videoPornCount?: int32(name='VideoPornCount'),
  videoTerrorismCount?: int32(name='VideoTerrorismCount'),
  videoTotalCount?: int32(name='VideoTotalCount'),
  videoVoiceAntispamCount?: int32(name='VideoVoiceAntispamCount'),
}

model DescribeOssStockStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssStockStatusResponseBody(name='body'),
}

async function describeOssStockStatus(request: DescribeOssStockStatusRequest): DescribeOssStockStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssStockStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSdkUrlRequest {
  debug?: boolean(name='Debug', position='Query'),
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeSdkUrlResponseBody = {
  requestId?: string(name='RequestId'),
  sdkUrl?: string(name='SdkUrl'),
}

model DescribeSdkUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSdkUrlResponseBody(name='body'),
}

async function describeSdkUrl(request: DescribeSdkUrlRequest): DescribeSdkUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSdkUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpdatePackageResultRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeUpdatePackageResultResponseBody = {
  appInfo?: {
    debugPackageInfo?: {
      version?: string(name='Version'),
    }(name='DebugPackageInfo'),
    endDate?: string(name='EndDate'),
    icon?: string(name='Icon'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    packageInfo?: {
      version?: string(name='Version'),
    }(name='PackageInfo'),
    packageName?: string(name='PackageName'),
    startDate?: string(name='StartDate'),
    type?: int32(name='Type'),
  }(name='AppInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeUpdatePackageResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUpdatePackageResultResponseBody(name='body'),
}

async function describeUpdatePackageResult(request: DescribeUpdatePackageResultRequest): DescribeUpdatePackageResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpdatePackageResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUploadInfoRequest {
  biz: string(name='Biz', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeUploadInfoResponseBody = {
  accessid?: string(name='Accessid'),
  expire?: int32(name='Expire'),
  folder?: string(name='Folder'),
  host?: string(name='Host'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
}

model DescribeUploadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUploadInfoResponseBody(name='body'),
}

async function describeUploadInfo(request: DescribeUploadInfoRequest): DescribeUploadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUploadInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsageBillRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  day: string(name='Day', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeUsageBillResponseBody = {
  billList?: [ 
    {
      bizType?: string(name='BizType'),
      confirmCount?: long(name='ConfirmCount'),
      day?: string(name='Day'),
      freeCount?: long(name='FreeCount'),
      region?: string(name='Region'),
      reviewCount?: long(name='ReviewCount'),
      scene?: string(name='Scene'),
      subUid?: string(name='SubUid'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='BillList'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeUsageBillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsageBillResponseBody(name='body'),
}

async function describeUsageBill(request: DescribeUsageBillRequest): DescribeUsageBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsageBill', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserBizTypesRequest {
  customized?: boolean(name='Customized', position='Query'),
}

model DescribeUserBizTypesResponseBody = {
  bizTypeList?: [ 
    {
      bizType?: string(name='BizType'),
      citeTemplate?: boolean(name='CiteTemplate'),
      description?: string(name='Description'),
      gray?: boolean(name='Gray'),
      industryInfo?: string(name='IndustryInfo'),
      source?: string(name='Source'),
      sourceBizType?: string(name='SourceBizType'),
    }
  ](name='BizTypeList'),
  bizTypeListImport?: [ 
    {
      bizType?: string(name='BizType'),
      citeTemplate?: boolean(name='CiteTemplate'),
      description?: string(name='Description'),
      gray?: boolean(name='Gray'),
      industryInfo?: string(name='IndustryInfo'),
      source?: string(name='Source'),
      sourceBizType?: string(name='SourceBizType'),
    }
  ](name='BizTypeListImport'),
  requestId?: string(name='RequestId'),
}

model DescribeUserBizTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserBizTypesResponseBody(name='body'),
}

async function describeUserBizTypes(request: DescribeUserBizTypesRequest): DescribeUserBizTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBizTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserStatusRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeUserStatusResponseBody = {
  agreeChannel?: int32(name='AgreeChannel'),
  buyed?: boolean(name='Buyed'),
  inDept?: boolean(name='InDept'),
  openApiBeginTime?: string(name='OpenApiBeginTime'),
  openApiUsed?: boolean(name='OpenApiUsed'),
  ossCheckStatus?: string(name='OssCheckStatus'),
  ossVideoSizeLimit?: int32(name='OssVideoSizeLimit'),
  requestId?: string(name='RequestId'),
  uid?: string(name='Uid'),
}

model DescribeUserStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserStatusResponseBody(name='body'),
}

async function describeUserStatus(request: DescribeUserStatusRequest): DescribeUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeViewContentRequest {
  auditResult?: string(name='AuditResult', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  dataId?: string(name='DataId', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  keywordId?: string(name='KeywordId', position='Query'),
  label?: string(name='Label', position='Query'),
  libType?: string(name='LibType', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  scene?: string(name='Scene', position='Query'),
  startDate: string(name='StartDate', position='Query'),
  suggestion?: string(name='Suggestion', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeViewContentResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  viewContentList?: [ 
    {
      bizType?: string(name='BizType'),
      content?: string(name='Content'),
      dataId?: string(name='DataId'),
      faceResults?: [ 
        {
          age?: {
            rate?: float(name='Rate'),
            value?: int32(name='Value'),
          }(name='Age'),
          bang?: {
            rate?: float(name='Rate'),
            value?: string(name='Value'),
          }(name='Bang'),
          bualified?: boolean(name='Bualified'),
          gender?: {
            rate?: float(name='Rate'),
            value?: string(name='Value'),
          }(name='Gender'),
          glasses?: {
            rate?: float(name='Rate'),
            value?: string(name='Value'),
          }(name='Glasses'),
          hairstyle?: {
            rate?: float(name='Rate'),
            value?: string(name='Value'),
          }(name='Hairstyle'),
          hat?: {
            rate?: float(name='Rate'),
            value?: string(name='Value'),
          }(name='Hat'),
          image?: {
            height?: int32(name='Height'),
            width?: int32(name='Width'),
          }(name='Image'),
          location?: {
            h?: int32(name='H'),
            w?: int32(name='W'),
            x?: int32(name='X'),
            y?: int32(name='Y'),
          }(name='Location'),
          mustache?: {
            rate?: float(name='Rate'),
            value?: string(name='Value'),
          }(name='Mustache'),
          quality?: {
            blur?: float(name='Blur'),
            pitch?: float(name='Pitch'),
            roll?: float(name='Roll'),
            yaw?: float(name='Yaw'),
          }(name='Quality'),
          respirator?: {
            rate?: float(name='Rate'),
            value?: string(name='Value'),
          }(name='Respirator'),
          smile?: {
            rate?: float(name='Rate'),
            value?: float(name='Value'),
          }(name='Smile'),
        }
      ](name='FaceResults'),
      frameResults?: [ 
        {
          label?: string(name='Label'),
          offset?: int32(name='Offset'),
          url?: string(name='Url'),
        }
      ](name='FrameResults'),
      id?: long(name='Id'),
      newUrl?: string(name='NewUrl'),
      requestTime?: string(name='RequestTime'),
      results?: [ 
        {
          label?: string(name='Label'),
          scene?: string(name='Scene'),
          suggestion?: string(name='Suggestion'),
        }
      ](name='Results'),
      scanFinishedTime?: string(name='ScanFinishedTime'),
      scanResult?: string(name='ScanResult'),
      suggestion?: string(name='Suggestion'),
      taskId?: string(name='TaskId'),
      thumbnail?: string(name='Thumbnail'),
      url?: string(name='Url'),
    }
  ](name='ViewContentList'),
}

model DescribeViewContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeViewContentResponseBody(name='body'),
}

async function describeViewContent(request: DescribeViewContentRequest): DescribeViewContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeViewContent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebsiteIndexPageBaselineRequest {
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeWebsiteIndexPageBaselineResponseBody = {
  baseLineStatus?: string(name='BaseLineStatus'),
  createTime?: string(name='CreateTime'),
  requestId?: string(name='RequestId'),
  snapshot?: string(name='Snapshot'),
}

model DescribeWebsiteIndexPageBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebsiteIndexPageBaselineResponseBody(name='body'),
}

async function describeWebsiteIndexPageBaseline(request: DescribeWebsiteIndexPageBaselineRequest): DescribeWebsiteIndexPageBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebsiteIndexPageBaseline', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebsiteInstanceRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeWebsiteInstanceResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  websiteInstanceList?: [ 
    {
      buyTime?: string(name='BuyTime'),
      domain?: string(name='Domain'),
      expiredTime?: string(name='ExpiredTime'),
      indexPage?: string(name='IndexPage'),
      indexPageScanInterval?: int32(name='IndexPageScanInterval'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
      status?: string(name='Status'),
      websiteScanInterval?: int32(name='WebsiteScanInterval'),
    }
  ](name='WebsiteInstanceList'),
}

model DescribeWebsiteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebsiteInstanceResponseBody(name='body'),
}

async function describeWebsiteInstance(request: DescribeWebsiteInstanceRequest): DescribeWebsiteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebsiteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebsiteInstanceIdRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeWebsiteInstanceIdResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  websiteInstanceIdList?: [ string ](name='WebsiteInstanceIdList'),
}

model DescribeWebsiteInstanceIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebsiteInstanceIdResponseBody(name='body'),
}

async function describeWebsiteInstanceId(request: DescribeWebsiteInstanceIdRequest): DescribeWebsiteInstanceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebsiteInstanceId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebsiteInstanceKeyUrlRequest {
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeWebsiteInstanceKeyUrlResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  websiteInstanceKeyUrlList?: [ string ](name='WebsiteInstanceKeyUrlList'),
}

model DescribeWebsiteInstanceKeyUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebsiteInstanceKeyUrlResponseBody(name='body'),
}

async function describeWebsiteInstanceKeyUrl(request: DescribeWebsiteInstanceKeyUrlRequest): DescribeWebsiteInstanceKeyUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebsiteInstanceKeyUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebsiteScanResultRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  domain?: string(name='Domain', position='Query'),
  handleStatus?: string(name='HandleStatus', position='Query'),
  label?: string(name='Label', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  siteUrl?: string(name='SiteUrl', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  subServiceModule: string(name='SubServiceModule', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model DescribeWebsiteScanResultResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  websiteScanResultList?: [ 
    {
      domain?: string(name='Domain'),
      handleStatus?: int32(name='HandleStatus'),
      id?: int32(name='Id'),
      imageRiskCount?: int32(name='ImageRiskCount'),
      instanceId?: string(name='InstanceId'),
      labels?: [ string ](name='Labels'),
      scanTime?: string(name='ScanTime'),
      sourceRiskCount?: int32(name='SourceRiskCount'),
      taskId?: string(name='TaskId'),
      textRiskCount?: int32(name='TextRiskCount'),
      url?: string(name='Url'),
    }
  ](name='WebsiteScanResultList'),
}

model DescribeWebsiteScanResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebsiteScanResultResponseBody(name='body'),
}

async function describeWebsiteScanResult(request: DescribeWebsiteScanResultRequest): DescribeWebsiteScanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebsiteScanResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebsiteScanResultDetailRequest {
  id: int32(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeWebsiteScanResultDetailResponseBody = {
  baseline?: string(name='Baseline'),
  content?: string(name='Content'),
  hitKeywords?: [ string ](name='HitKeywords'),
  imageScanResults?: [ 
    {
      labels?: [ string ](name='Labels'),
      url?: string(name='Url'),
    }
  ](name='ImageScanResults'),
  requestId?: string(name='RequestId'),
  resourceType?: string(name='ResourceType'),
  tamperedSource?: string(name='TamperedSource'),
}

model DescribeWebsiteScanResultDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebsiteScanResultDetailResponseBody(name='body'),
}

async function describeWebsiteScanResultDetail(request: DescribeWebsiteScanResultDetailRequest): DescribeWebsiteScanResultDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebsiteScanResultDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebsiteStatRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeWebsiteStatResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  websiteStatList?: [ 
    {
      instanceCount?: int32(name='InstanceCount'),
      riskCount?: int32(name='RiskCount'),
      scanCount?: int32(name='ScanCount'),
      subServiceModule?: string(name='SubServiceModule'),
    }
  ](name='WebsiteStatList'),
}

model DescribeWebsiteStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebsiteStatResponseBody(name='body'),
}

async function describeWebsiteStat(request: DescribeWebsiteStatRequest): DescribeWebsiteStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebsiteStat', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebsiteVerifyInfoRequest {
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeWebsiteVerifyInfoResponseBody = {
  cname?: string(name='Cname'),
  domain?: string(name='Domain'),
  hostFile?: string(name='HostFile'),
  indexPage?: string(name='IndexPage'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId'),
  verifyMethod?: string(name='VerifyMethod'),
}

model DescribeWebsiteVerifyInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebsiteVerifyInfoResponseBody(name='body'),
}

async function describeWebsiteVerifyInfo(request: DescribeWebsiteVerifyInfoRequest): DescribeWebsiteVerifyInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebsiteVerifyInfo', 'POST', '/', 'json', false, 'json', request);
}

model ExportKeywordsRequest {
  keywordLibId: long(name='KeywordLibId', position='Query'),
}

model ExportKeywordsResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  requestId?: string(name='RequestId'),
}

model ExportKeywordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportKeywordsResponseBody(name='body'),
}

async function exportKeywords(request: ExportKeywordsRequest): ExportKeywordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportKeywords', 'POST', '/', 'json', false, 'json', request);
}

model ExportOpenApiRcpStatsRequest {
  bizType?: string(name='BizType', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  startDate: string(name='StartDate', position='Query'),
}

model ExportOpenApiRcpStatsResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  requestId?: string(name='RequestId'),
}

model ExportOpenApiRcpStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportOpenApiRcpStatsResponseBody(name='body'),
}

async function exportOpenApiRcpStats(request: ExportOpenApiRcpStatsRequest): ExportOpenApiRcpStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportOpenApiRcpStats', 'POST', '/', 'json', false, 'json', request);
}

model ExportOssResultRequest {
  bucket?: string(name='Bucket', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  lang?: string(name='Lang', position='Query'),
  maxScore?: float(name='MaxScore', position='Query'),
  minScore?: float(name='MinScore', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  scene?: string(name='Scene', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
  stock: boolean(name='Stock', position='Query'),
  stockTaskId?: long(name='StockTaskId', position='Query'),
  suggestion?: string(name='Suggestion', position='Query'),
  totalCount?: int32(name='TotalCount', position='Query'),
}

model ExportOssResultResponseBody = {
  fileUrl?: string(name='FileUrl'),
  requestId?: string(name='RequestId'),
}

model ExportOssResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportOssResultResponseBody(name='body'),
}

async function exportOssResult(request: ExportOssResultRequest): ExportOssResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportOssResult', 'POST', '/', 'json', false, 'json', request);
}

model GetAuditItemDetailRequest {
  taskId?: string(name='TaskId', position='Query'),
  type?: string(name='Type', position='Query'),
}

model GetAuditItemDetailResponseBody = {
  apiResult?: string(name='ApiResult'),
  apiRiskType?: string(name='ApiRiskType'),
  apiTs?: string(name='ApiTs'),
  newUrl?: string(name='NewUrl'),
  requestId?: string(name='RequestId'),
}

model GetAuditItemDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuditItemDetailResponseBody(name='body'),
}

async function getAuditItemDetail(request: GetAuditItemDetailRequest): GetAuditItemDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuditItemDetail', 'GET', '/', 'json', false, 'json', request);
}

model GetAuditItemListRequest {
  bizType?: string(name='BizType', position='Query'),
  currentPage?: long(name='CurrentPage', position='Query'),
  customResult?: string(name='CustomResult', position='Query'),
  customRiskType?: string(name='CustomRiskType', position='Query'),
  dataId?: string(name='DataId', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  rcpResult?: string(name='RcpResult', position='Query'),
  rcpRiskType?: string(name='RcpRiskType', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  type?: string(name='Type', position='Query'),
}

model GetAuditItemListResponseBody = {
  currentPage?: long(name='CurrentPage'),
  items?: [ 
    {
      bizType?: string(name='BizType'),
      content?: string(name='Content'),
      create?: string(name='Create'),
      customResult?: string(name='CustomResult'),
      customRiskType?: string(name='CustomRiskType'),
      customTs?: string(name='CustomTs'),
      dataId?: string(name='DataId'),
      id?: long(name='Id'),
      operator?: string(name='Operator'),
      rcpResult?: string(name='RcpResult'),
      rcpRiskType?: string(name='RcpRiskType'),
      rcpTs?: string(name='RcpTs'),
      subUid?: string(name='SubUid'),
      taskId?: string(name='TaskId'),
      thumbnail?: string(name='Thumbnail'),
      type?: string(name='Type'),
      uid?: string(name='Uid'),
      url?: string(name='Url'),
    }
  ](name='Items'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model GetAuditItemListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuditItemListResponseBody(name='body'),
}

async function getAuditItemList(request: GetAuditItemListRequest): GetAuditItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuditItemList', 'GET', '/', 'json', false, 'json', request);
}

model GetAuditUserConfRequest {
}

model GetAuditUserConfResponseBody = {
  customAudit?: boolean(name='CustomAudit'),
  rcpLabels?: map[string][ string ](name='RcpLabels'),
  requestId?: string(name='RequestId'),
  userLabels?: map[string][ string ](name='UserLabels'),
}

model GetAuditUserConfResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuditUserConfResponseBody(name='body'),
}

async function getAuditUserConf(request: GetAuditUserConfRequest): GetAuditUserConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuditUserConf', 'GET', '/', 'json', false, 'json', request);
}

model ImportKeywordsRequest {
  keywordLibId: int32(name='KeywordLibId', position='Query'),
  keywordsObject: string(name='KeywordsObject', position='Query'),
}

model ImportKeywordsResponseBody = {
  invalidKeywordList?: [ string ](name='InvalidKeywordList'),
  requestId?: string(name='RequestId'),
  successCount?: int32(name='SuccessCount'),
  validKeywordList?: [ string ](name='validKeywordList'),
}

model ImportKeywordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportKeywordsResponseBody(name='body'),
}

async function importKeywords(request: ImportKeywordsRequest): ImportKeywordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportKeywords', 'POST', '/', 'json', false, 'json', request);
}

model MarkAuditContentRequest {
  auditIllegalReasons?: string(name='AuditIllegalReasons', position='Query'),
  auditResult?: string(name='AuditResult', position='Query'),
  bizTypes: string(name='BizTypes', position='Query'),
  ids: string(name='Ids', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model MarkAuditContentResponseBody = {
  requestId?: string(name='RequestId'),
}

model MarkAuditContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MarkAuditContentResponseBody(name='body'),
}

async function markAuditContent(request: MarkAuditContentRequest): MarkAuditContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MarkAuditContent', 'POST', '/', 'json', false, 'json', request);
}

model MarkAuditContentItemRequest {
  auditIllegalReasons?: string(name='AuditIllegalReasons', position='Query'),
  auditResult?: string(name='AuditResult', position='Query'),
  bizTypes: string(name='BizTypes', position='Query'),
  ids: string(name='Ids', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model MarkAuditContentItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model MarkAuditContentItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MarkAuditContentItemResponseBody(name='body'),
}

async function markAuditContentItem(request: MarkAuditContentItemRequest): MarkAuditContentItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MarkAuditContentItem', 'POST', '/', 'json', false, 'json', request);
}

model MarkOssResultRequest {
  ids: string(name='Ids', position='Query'),
  lang?: string(name='Lang', position='Query'),
  operation: string(name='Operation', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  scene: string(name='Scene', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  stock: boolean(name='Stock', position='Query'),
}

model MarkOssResultResponseBody = {
  requestId?: string(name='RequestId'),
}

model MarkOssResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MarkOssResultResponseBody(name='body'),
}

async function markOssResult(request: MarkOssResultRequest): MarkOssResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MarkOssResult', 'POST', '/', 'json', false, 'json', request);
}

model MarkWebsiteScanResultRequest {
  ids: string(name='Ids', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model MarkWebsiteScanResultResponseBody = {
  requestId?: string(name='RequestId'),
}

model MarkWebsiteScanResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MarkWebsiteScanResultResponseBody(name='body'),
}

async function markWebsiteScanResult(request: MarkWebsiteScanResultRequest): MarkWebsiteScanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MarkWebsiteScanResult', 'POST', '/', 'json', false, 'json', request);
}

model RefundCdiBagRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resourceOwnerId?: string(name='ResourceOwnerId', position='Query'),
}

model RefundCdiBagResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefundCdiBagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundCdiBagResponseBody(name='body'),
}

async function refundCdiBag(request: RefundCdiBagRequest): RefundCdiBagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundCdiBag', 'POST', '/', 'json', false, 'json', request);
}

model RefundCdiBaseBagRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resourceOwnerId?: string(name='ResourceOwnerId', position='Query'),
}

model RefundCdiBaseBagResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefundCdiBaseBagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundCdiBaseBagResponseBody(name='body'),
}

async function refundCdiBaseBag(request: RefundCdiBaseBagRequest): RefundCdiBaseBagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundCdiBaseBag', 'POST', '/', 'json', false, 'json', request);
}

model RefundWebSiteInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resourceOwnerId?: string(name='ResourceOwnerId', position='Query'),
}

model RefundWebSiteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefundWebSiteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundWebSiteInstanceResponseBody(name='body'),
}

async function refundWebSiteInstance(request: RefundWebSiteInstanceRequest): RefundWebSiteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundWebSiteInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewWebSiteInstanceRequest {
  clientToken: string(name='ClientToken', position='Query'),
  commodityCode?: string(name='CommodityCode', position='Query'),
  duration: int32(name='Duration', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  orderNum?: int32(name='OrderNum', position='Query'),
  orderType: string(name='OrderType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pricingCycle: string(name='PricingCycle', position='Query'),
}

model RenewWebSiteInstanceResponseBody = {
  code?: string(name='Code'),
  instanceId?: string(name='InstanceId'),
  instanceIds?: {
    string?: [ string ](name='String')
  }(name='InstanceIds'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewWebSiteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewWebSiteInstanceResponseBody(name='body'),
}

async function renewWebSiteInstance(request: RenewWebSiteInstanceRequest): RenewWebSiteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewWebSiteInstance', 'POST', '/', 'json', false, 'json', request);
}

model SendVerifyCodeToEmailRequest {
  email: string(name='Email', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model SendVerifyCodeToEmailResponseBody = {
  requestId?: string(name='RequestId'),
}

model SendVerifyCodeToEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerifyCodeToEmailResponseBody(name='body'),
}

async function sendVerifyCodeToEmail(request: SendVerifyCodeToEmailRequest): SendVerifyCodeToEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerifyCodeToEmail', 'POST', '/', 'json', false, 'json', request);
}

model SendVerifyCodeToPhoneRequest {
  lang?: string(name='Lang', position='Query'),
  phone: string(name='Phone', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model SendVerifyCodeToPhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model SendVerifyCodeToPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerifyCodeToPhoneResponseBody(name='body'),
}

async function sendVerifyCodeToPhone(request: SendVerifyCodeToPhoneRequest): SendVerifyCodeToPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerifyCodeToPhone', 'POST', '/', 'json', false, 'json', request);
}

model SendWebsiteFeedbackRequest {
  feedback: string(name='Feedback', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  urls: string(name='Urls', position='Query'),
}

model SendWebsiteFeedbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model SendWebsiteFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendWebsiteFeedbackResponseBody(name='body'),
}

async function sendWebsiteFeedback(request: SendWebsiteFeedbackRequest): SendWebsiteFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendWebsiteFeedback', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppPackageRequest {
  debug?: boolean(name='Debug', position='Query'),
  id?: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  packageUrl: string(name='PackageUrl', position='Query'),
  platform?: string(name='Platform', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model UpdateAppPackageResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model UpdateAppPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppPackageResponseBody(name='body'),
}

async function updateAppPackage(request: UpdateAppPackageRequest): UpdateAppPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppPackage', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuditCallbackRequest {
  callback?: string(name='Callback', position='Query'),
  cryptType?: int32(name='CryptType', position='Query'),
  seed?: string(name='Seed', position='Query'),
}

model UpdateAuditCallbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAuditCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuditCallbackResponseBody(name='body'),
}

async function updateAuditCallback(request: UpdateAuditCallbackRequest): UpdateAuditCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuditCallback', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuditRangeRequest {
  auditRange?: string(name='AuditRange', position='Query'),
}

model UpdateAuditRangeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAuditRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuditRangeResponseBody(name='body'),
}

async function updateAuditRange(request: UpdateAuditRangeRequest): UpdateAuditRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuditRange', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuditSettingRequest {
  auditRange?: string(name='AuditRange', position='Query'),
  callback?: string(name='Callback', position='Query'),
  seed?: string(name='Seed', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model UpdateAuditSettingResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAuditSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuditSettingResponseBody(name='body'),
}

async function updateAuditSetting(request: UpdateAuditSettingRequest): UpdateAuditSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuditSetting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBizTypeRequest {
  bizTypeName: string(name='BizTypeName', position='Query'),
  description?: string(name='Description', position='Query'),
}

model UpdateBizTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBizTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBizTypeResponseBody(name='body'),
}

async function updateBizType(request: UpdateBizTypeRequest): UpdateBizTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBizType', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBizTypeImageLibRequest {
  bizTypeName: string(name='BizTypeName', position='Query'),
  black?: string(name='Black', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  review?: string(name='Review', position='Query'),
  scene: string(name='Scene', position='Query'),
  white?: string(name='White', position='Query'),
}

model UpdateBizTypeImageLibResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBizTypeImageLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBizTypeImageLibResponseBody(name='body'),
}

async function updateBizTypeImageLib(request: UpdateBizTypeImageLibRequest): UpdateBizTypeImageLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBizTypeImageLib', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBizTypeSettingRequest {
  ad?: string(name='Ad', position='Query'),
  antispam?: string(name='Antispam', position='Query'),
  bizTypeName: string(name='BizTypeName', position='Query'),
  live?: string(name='Live', position='Query'),
  porn?: string(name='Porn', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  terrorism?: string(name='Terrorism', position='Query'),
}

model UpdateBizTypeSettingResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBizTypeSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBizTypeSettingResponseBody(name='body'),
}

async function updateBizTypeSetting(request: UpdateBizTypeSettingRequest): UpdateBizTypeSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBizTypeSetting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBizTypeTextLibRequest {
  bizTypeName: string(name='BizTypeName', position='Query'),
  black?: string(name='Black', position='Query'),
  ignore?: string(name='Ignore', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  review?: string(name='Review', position='Query'),
  scene: string(name='Scene', position='Query'),
  white?: string(name='White', position='Query'),
}

model UpdateBizTypeTextLibResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBizTypeTextLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBizTypeTextLibResponseBody(name='body'),
}

async function updateBizTypeTextLib(request: UpdateBizTypeTextLibRequest): UpdateBizTypeTextLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBizTypeTextLib', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomOcrTemplateRequest {
  id: long(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  recognizeArea?: string(name='RecognizeArea', position='Query'),
  referArea?: string(name='ReferArea', position='Query'),
}

model UpdateCustomOcrTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCustomOcrTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomOcrTemplateResponseBody(name='body'),
}

async function updateCustomOcrTemplate(request: UpdateCustomOcrTemplateRequest): UpdateCustomOcrTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomOcrTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateKeywordLibRequest {
  bizTypes?: string(name='BizTypes', position='Query'),
  enable?: boolean(name='Enable', position='Query'),
  id: int32(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  matchMode?: string(name='MatchMode', position='Query'),
  name: string(name='Name', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model UpdateKeywordLibResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateKeywordLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateKeywordLibResponseBody(name='body'),
}

async function updateKeywordLib(request: UpdateKeywordLibRequest): UpdateKeywordLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateKeywordLib', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNotificationSettingRequest {
  lang?: string(name='Lang', position='Query'),
  realtimeMessageList?: string(name='RealtimeMessageList', position='Query'),
  reminderModeList: string(name='ReminderModeList', position='Query'),
  scheduleMessageTime: int32(name='ScheduleMessageTime', position='Query'),
  scheduleMessageTimeZone: int32(name='ScheduleMessageTimeZone', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model UpdateNotificationSettingResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateNotificationSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNotificationSettingResponseBody(name='body'),
}

async function updateNotificationSetting(request: UpdateNotificationSettingRequest): UpdateNotificationSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNotificationSetting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOssCallbackSettingRequest {
  auditCallback?: boolean(name='AuditCallback', position='Query'),
  callbackSeed?: string(name='CallbackSeed', position='Query'),
  callbackUrl?: string(name='CallbackUrl', position='Query'),
  scanCallback?: boolean(name='ScanCallback', position='Query'),
  scanCallbackSuggestions?: string(name='ScanCallbackSuggestions', position='Query'),
  serviceModules?: string(name='ServiceModules', position='Query'),
}

model UpdateOssCallbackSettingResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOssCallbackSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssCallbackSettingResponseBody(name='body'),
}

async function updateOssCallbackSetting(request: UpdateOssCallbackSettingRequest): UpdateOssCallbackSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssCallbackSetting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOssIncrementCheckSettingRequest {
  audioAntispamFreezeConfig?: string(name='AudioAntispamFreezeConfig', position='Query'),
  audioAutoFreezeOpened?: boolean(name='AudioAutoFreezeOpened', position='Query'),
  audioMaxSize?: int32(name='AudioMaxSize', position='Query'),
  audioScanLimit?: long(name='AudioScanLimit', position='Query'),
  audioSceneList?: string(name='AudioSceneList', position='Query'),
  autoFreezeType?: string(name='AutoFreezeType', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  bucketConfigList?: string(name='BucketConfigList', position='Query'),
  callbackId?: string(name='CallbackId', position='Query'),
  imageAdFreezeConfig?: string(name='ImageAdFreezeConfig', position='Query'),
  imageAutoFreeze?: string(name='ImageAutoFreeze', position='Query'),
  imageAutoFreezeOpened?: boolean(name='ImageAutoFreezeOpened', position='Query'),
  imageLiveFreezeConfig?: string(name='ImageLiveFreezeConfig', position='Query'),
  imagePornFreezeConfig?: string(name='ImagePornFreezeConfig', position='Query'),
  imageScanLimit?: string(name='ImageScanLimit', position='Query'),
  imageSceneList?: string(name='ImageSceneList', position='Query'),
  imageTerrorismFreezeConfig?: string(name='ImageTerrorismFreezeConfig', position='Query'),
  lang?: string(name='Lang', position='Query'),
  scanImageNoFileType?: boolean(name='ScanImageNoFileType', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  videoAdFreezeConfig?: string(name='VideoAdFreezeConfig', position='Query'),
  videoAutoFreezeOpened?: boolean(name='VideoAutoFreezeOpened', position='Query'),
  videoAutoFreezeSceneList?: string(name='VideoAutoFreezeSceneList', position='Query'),
  videoFrameInterval?: int32(name='VideoFrameInterval', position='Query'),
  videoLiveFreezeConfig?: string(name='VideoLiveFreezeConfig', position='Query'),
  videoMaxFrames?: int32(name='VideoMaxFrames', position='Query'),
  videoMaxSize?: int32(name='VideoMaxSize', position='Query'),
  videoPornFreezeConfig?: string(name='VideoPornFreezeConfig', position='Query'),
  videoScanLimit?: long(name='VideoScanLimit', position='Query'),
  videoSceneList?: string(name='VideoSceneList', position='Query'),
  videoTerrorismFreezeConfig?: string(name='VideoTerrorismFreezeConfig', position='Query'),
  videoVoiceAntispamFreezeConfig?: string(name='VideoVoiceAntispamFreezeConfig', position='Query'),
}

model UpdateOssIncrementCheckSettingResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOssIncrementCheckSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssIncrementCheckSettingResponseBody(name='body'),
}

async function updateOssIncrementCheckSetting(request: UpdateOssIncrementCheckSettingRequest): UpdateOssIncrementCheckSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssIncrementCheckSetting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOssStockStatusRequest {
  audioAutoFreezeSceneList?: string(name='AudioAutoFreezeSceneList', position='Query'),
  audioMaxSize?: int32(name='AudioMaxSize', position='Query'),
  autoFreezeType?: string(name='AutoFreezeType', position='Query'),
  bucketConfigList?: string(name='BucketConfigList', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  imageAutoFreeze?: string(name='ImageAutoFreeze', position='Query'),
  lang?: string(name='Lang', position='Query'),
  operation: string(name='Operation', position='Query'),
  resourceTypeList?: string(name='ResourceTypeList', position='Query'),
  sceneList?: string(name='SceneList', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
  videoAutoFreezeSceneList?: string(name='VideoAutoFreezeSceneList', position='Query'),
  videoFrameInterval?: int32(name='VideoFrameInterval', position='Query'),
  videoMaxFrames?: int32(name='VideoMaxFrames', position='Query'),
  videoMaxSize?: int32(name='VideoMaxSize', position='Query'),
}

model UpdateOssStockStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOssStockStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssStockStatusResponseBody(name='body'),
}

async function updateOssStockStatus(request: UpdateOssStockStatusRequest): UpdateOssStockStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssStockStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWebsiteInstanceRequest {
  domain: string(name='Domain', position='Query'),
  indexPage: string(name='IndexPage', position='Query'),
  indexPageScanInterval: int32(name='IndexPageScanInterval', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  siteProtocol: string(name='SiteProtocol', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  websiteScanInterval: int32(name='WebsiteScanInterval', position='Query'),
}

model UpdateWebsiteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateWebsiteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWebsiteInstanceResponseBody(name='body'),
}

async function updateWebsiteInstance(request: UpdateWebsiteInstanceRequest): UpdateWebsiteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWebsiteInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWebsiteInstanceKeyUrlRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  urls: string(name='Urls', position='Query'),
}

model UpdateWebsiteInstanceKeyUrlResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateWebsiteInstanceKeyUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWebsiteInstanceKeyUrlResponseBody(name='body'),
}

async function updateWebsiteInstanceKeyUrl(request: UpdateWebsiteInstanceKeyUrlRequest): UpdateWebsiteInstanceKeyUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWebsiteInstanceKeyUrl', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWebsiteInstanceStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status: string(name='Status', position='Query'),
}

model UpdateWebsiteInstanceStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateWebsiteInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWebsiteInstanceStatusResponseBody(name='body'),
}

async function updateWebsiteInstanceStatus(request: UpdateWebsiteInstanceStatusRequest): UpdateWebsiteInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWebsiteInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeCdiBaseBagRequest {
  clientToken: string(name='ClientToken', position='Query'),
  commodityCode?: string(name='CommodityCode', position='Query'),
  flowOutSpec?: int32(name='FlowOutSpec', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  orderType: string(name='OrderType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UpgradeCdiBaseBagResponseBody = {
  code?: string(name='Code'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model UpgradeCdiBaseBagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeCdiBaseBagResponseBody(name='body'),
}

async function upgradeCdiBaseBag(request: UpgradeCdiBaseBagRequest): UpgradeCdiBaseBagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeCdiBaseBag', 'POST', '/', 'json', false, 'json', request);
}

model UploadImageToLibRequest {
  imageLibId: int32(name='ImageLibId', position='Query'),
  images?: string(name='Images', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  urls?: string(name='Urls', position='Query'),
}

model UploadImageToLibResponseBody = {
  requestId?: string(name='RequestId'),
}

model UploadImageToLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadImageToLibResponseBody(name='body'),
}

async function uploadImageToLib(request: UploadImageToLibRequest): UploadImageToLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadImageToLib', 'POST', '/', 'json', false, 'json', request);
}

model VerifyCustomOcrTemplateRequest {
  id: long(name='Id', position='Query'),
  testImgUrl: string(name='TestImgUrl', position='Query'),
}

model VerifyCustomOcrTemplateResponseBody = {
  imageUrl?: string(name='ImageUrl'),
  recognizeInfo?: string(name='RecognizeInfo'),
  requestId?: string(name='RequestId'),
}

model VerifyCustomOcrTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyCustomOcrTemplateResponseBody(name='body'),
}

async function verifyCustomOcrTemplate(request: VerifyCustomOcrTemplateRequest): VerifyCustomOcrTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyCustomOcrTemplate', 'POST', '/', 'json', false, 'json', request);
}

model VerifyEmailRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  verifyCode: string(name='VerifyCode', position='Query'),
}

model VerifyEmailResponseBody = {
  requestId?: string(name='RequestId'),
}

model VerifyEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyEmailResponseBody(name='body'),
}

async function verifyEmail(request: VerifyEmailRequest): VerifyEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyEmail', 'POST', '/', 'json', false, 'json', request);
}

model VerifyPhoneRequest {
  lang?: string(name='Lang', position='Query'),
  phone: string(name='Phone', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  verifyCode: string(name='VerifyCode', position='Query'),
}

model VerifyPhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model VerifyPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyPhoneResponseBody(name='body'),
}

async function verifyPhone(request: VerifyPhoneRequest): VerifyPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyPhone', 'POST', '/', 'json', false, 'json', request);
}

model VerifyWebsiteInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  verifyMethod: string(name='VerifyMethod', position='Query'),
}

model VerifyWebsiteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model VerifyWebsiteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyWebsiteInstanceResponseBody(name='body'),
}

async function verifyWebsiteInstance(request: VerifyWebsiteInstanceRequest): VerifyWebsiteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyWebsiteInstance', 'POST', '/', 'json', false, 'json', request);
}

