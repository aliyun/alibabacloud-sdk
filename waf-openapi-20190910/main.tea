/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('waf-openapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateCertificateRequest {
  certificate?: string(name='Certificate'),
  certificateName?: string(name='CertificateName'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  privateKey?: string(name='PrivateKey'),
}

model CreateCertificateResponseBody = {
  certificateId?: long(name='CertificateId'),
  requestId?: string(name='RequestId'),
}

model CreateCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertificateResponseBody(name='body'),
}

async function createCertificateWithOptions(request: CreateCertificateRequest, runtime: Util.RuntimeOptions): CreateCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query['Certificate'] = request.certificate;
  query['CertificateName'] = request.certificateName;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['PrivateKey'] = request.privateKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateCertificate',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCertificate(request: CreateCertificateRequest): CreateCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertificateWithOptions(request, runtime);
}

model CreateCertificateByCertificateIdRequest {
  certificateId?: long(name='CertificateId'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
}

model CreateCertificateByCertificateIdResponseBody = {
  certificateId?: long(name='CertificateId'),
  requestId?: string(name='RequestId'),
}

model CreateCertificateByCertificateIdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertificateByCertificateIdResponseBody(name='body'),
}

async function createCertificateByCertificateIdWithOptions(request: CreateCertificateByCertificateIdRequest, runtime: Util.RuntimeOptions): CreateCertificateByCertificateIdResponse {
  Util.validateModel(request);
  var query = {};
  query['CertificateId'] = request.certificateId;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateCertificateByCertificateId',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCertificateByCertificateId(request: CreateCertificateByCertificateIdRequest): CreateCertificateByCertificateIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertificateByCertificateIdWithOptions(request, runtime);
}

model CreateDomainRequest {
  accessHeaderMode?: int32(name='AccessHeaderMode'),
  accessHeaders?: string(name='AccessHeaders'),
  accessType?: string(name='AccessType'),
  cloudNativeInstances?: string(name='CloudNativeInstances'),
  clusterType?: int32(name='ClusterType'),
  connectionTime?: int32(name='ConnectionTime'),
  domain?: string(name='Domain'),
  http2Port?: string(name='Http2Port'),
  httpPort?: string(name='HttpPort'),
  httpToUserIp?: int32(name='HttpToUserIp'),
  httpsPort?: string(name='HttpsPort'),
  httpsRedirect?: int32(name='HttpsRedirect'),
  instanceId?: string(name='InstanceId'),
  ipFollowStatus?: int32(name='IpFollowStatus'),
  isAccessProduct?: int32(name='IsAccessProduct'),
  loadBalancing?: int32(name='LoadBalancing'),
  logHeaders?: string(name='LogHeaders'),
  readTime?: int32(name='ReadTime'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sniHost?: string(name='SniHost'),
  sniStatus?: int32(name='SniStatus'),
  sourceIps?: string(name='SourceIps'),
  writeTime?: int32(name='WriteTime'),
}

model CreateDomainResponseBody = {
  cname?: string(name='Cname'),
  requestId?: string(name='RequestId'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomainWithOptions(request: CreateDomainRequest, runtime: Util.RuntimeOptions): CreateDomainResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessHeaderMode'] = request.accessHeaderMode;
  query['AccessHeaders'] = request.accessHeaders;
  query['AccessType'] = request.accessType;
  query['CloudNativeInstances'] = request.cloudNativeInstances;
  query['ClusterType'] = request.clusterType;
  query['ConnectionTime'] = request.connectionTime;
  query['Domain'] = request.domain;
  query['Http2Port'] = request.http2Port;
  query['HttpPort'] = request.httpPort;
  query['HttpToUserIp'] = request.httpToUserIp;
  query['HttpsPort'] = request.httpsPort;
  query['HttpsRedirect'] = request.httpsRedirect;
  query['InstanceId'] = request.instanceId;
  query['IpFollowStatus'] = request.ipFollowStatus;
  query['IsAccessProduct'] = request.isAccessProduct;
  query['LoadBalancing'] = request.loadBalancing;
  query['LogHeaders'] = request.logHeaders;
  query['ReadTime'] = request.readTime;
  query['ResourceGroupId'] = request.resourceGroupId;
  query['SniHost'] = request.sniHost;
  query['SniStatus'] = request.sniStatus;
  query['SourceIps'] = request.sourceIps;
  query['WriteTime'] = request.writeTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDomain',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDomainWithOptions(request, runtime);
}

model CreateProtectionModuleRuleRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  rule?: string(name='Rule'),
}

model CreateProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProtectionModuleRuleResponseBody(name='body'),
}

async function createProtectionModuleRuleWithOptions(request: CreateProtectionModuleRuleRequest, runtime: Util.RuntimeOptions): CreateProtectionModuleRuleResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['Rule'] = request.rule;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateProtectionModuleRule',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProtectionModuleRule(request: CreateProtectionModuleRuleRequest): CreateProtectionModuleRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProtectionModuleRuleWithOptions(request, runtime);
}

model DeleteDomainRequest {
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var query = {};
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteProtectionModuleRuleRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  ruleId?: long(name='RuleId'),
}

model DeleteProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProtectionModuleRuleResponseBody(name='body'),
}

async function deleteProtectionModuleRuleWithOptions(request: DeleteProtectionModuleRuleRequest, runtime: Util.RuntimeOptions): DeleteProtectionModuleRuleResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['RuleId'] = request.ruleId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProtectionModuleRule',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProtectionModuleRule(request: DeleteProtectionModuleRuleRequest): DeleteProtectionModuleRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProtectionModuleRuleWithOptions(request, runtime);
}

model DescribeCertMatchStatusRequest {
  certificate?: string(name='Certificate'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  privateKey?: string(name='PrivateKey'),
}

model DescribeCertMatchStatusResponseBody = {
  matchStatus?: boolean(name='MatchStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeCertMatchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertMatchStatusResponseBody(name='body'),
}

async function describeCertMatchStatusWithOptions(request: DescribeCertMatchStatusRequest, runtime: Util.RuntimeOptions): DescribeCertMatchStatusResponse {
  Util.validateModel(request);
  var query = {};
  query['Certificate'] = request.certificate;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['PrivateKey'] = request.privateKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertMatchStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCertMatchStatus(request: DescribeCertMatchStatusRequest): DescribeCertMatchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertMatchStatusWithOptions(request, runtime);
}

model DescribeCertificatesRequest {
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
}

model DescribeCertificatesResponseBody = {
  certificates?: [ 
    {
      certificateId?: long(name='CertificateId'),
      certificateName?: string(name='CertificateName'),
      commonName?: string(name='CommonName'),
      isUsing?: boolean(name='IsUsing'),
      sans?: [ string ](name='Sans'),
    }
  ](name='Certificates'),
  requestId?: string(name='RequestId'),
}

model DescribeCertificatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertificatesResponseBody(name='body'),
}

async function describeCertificatesWithOptions(request: DescribeCertificatesRequest, runtime: Util.RuntimeOptions): DescribeCertificatesResponse {
  Util.validateModel(request);
  var query = {};
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertificates',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCertificates(request: DescribeCertificatesRequest): DescribeCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertificatesWithOptions(request, runtime);
}

model DescribeDomainRequest {
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDomainResponseBody = {
  domain?: {
    accessHeaderMode?: int32(name='AccessHeaderMode'),
    accessHeaders?: [ string ](name='AccessHeaders'),
    accessType?: string(name='AccessType'),
    cloudNativeInstances?: [ 
      {
        cloudNativeProductName?: string(name='CloudNativeProductName'),
        IPAddressList?: string(name='IPAddressList'),
        instanceId?: string(name='InstanceId'),
        protocolPortConfigs?: [ 
          {
            ports?: string(name='Ports'),
            protocol?: string(name='Protocol'),
          }
        ](name='ProtocolPortConfigs'),
        redirectionTypeName?: string(name='RedirectionTypeName'),
      }
    ](name='CloudNativeInstances'),
    clusterType?: int32(name='ClusterType'),
    cname?: string(name='Cname'),
    connectionTime?: int32(name='ConnectionTime'),
    http2Port?: [ string ](name='Http2Port'),
    httpPort?: [ string ](name='HttpPort'),
    httpToUserIp?: int32(name='HttpToUserIp'),
    httpsPort?: [ string ](name='HttpsPort'),
    httpsRedirect?: int32(name='HttpsRedirect'),
    ipFollowStatus?: int32(name='IpFollowStatus'),
    isAccessProduct?: int32(name='IsAccessProduct'),
    loadBalancing?: int32(name='LoadBalancing'),
    logHeaders?: [ 
      {
        k?: string(name='k'),
        v?: string(name='v'),
      }
    ](name='LogHeaders'),
    readTime?: int32(name='ReadTime'),
    resourceGroupId?: string(name='ResourceGroupId'),
    sniHost?: string(name='SniHost'),
    sniStatus?: int32(name='SniStatus'),
    sourceIps?: [ string ](name='SourceIps'),
    version?: long(name='Version'),
    writeTime?: int32(name='WriteTime'),
  }(name='Domain'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainResponseBody(name='body'),
}

async function describeDomainWithOptions(request: DescribeDomainRequest, runtime: Util.RuntimeOptions): DescribeDomainResponse {
  Util.validateModel(request);
  var query = {};
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomain',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainWithOptions(request, runtime);
}

model DescribeDomainAdvanceConfigsRequest {
  domainList?: string(name='DomainList'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDomainAdvanceConfigsResponseBody = {
  domainConfigs?: [ 
    {
      domain?: string(name='Domain'),
      profile?: {
        certStatus?: int32(name='CertStatus'),
        clusterType?: int32(name='ClusterType'),
        cname?: string(name='Cname'),
        exclusiveVipStatus?: int32(name='ExclusiveVipStatus'),
        GSLBStatus?: string(name='GSLBStatus'),
        http2Port?: [ int32 ](name='Http2Port'),
        httpPort?: [ int32 ](name='HttpPort'),
        httpsPort?: [ int32 ](name='HttpsPort'),
        ipv6Status?: int32(name='Ipv6Status'),
        resolvedType?: int32(name='ResolvedType'),
        rs?: [ string ](name='Rs'),
        vipServiceStatus?: int32(name='VipServiceStatus'),
      }(name='Profile'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainAdvanceConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAdvanceConfigsResponseBody(name='body'),
}

async function describeDomainAdvanceConfigsWithOptions(request: DescribeDomainAdvanceConfigsRequest, runtime: Util.RuntimeOptions): DescribeDomainAdvanceConfigsResponse {
  Util.validateModel(request);
  var query = {};
  query['DomainList'] = request.domainList;
  query['InstanceId'] = request.instanceId;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainAdvanceConfigs',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainAdvanceConfigs(request: DescribeDomainAdvanceConfigsRequest): DescribeDomainAdvanceConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAdvanceConfigsWithOptions(request, runtime);
}

model DescribeDomainBasicConfigsRequest {
  accessType?: string(name='AccessType'),
  cloudNativeProductId?: int32(name='CloudNativeProductId'),
  domainKey?: string(name='DomainKey'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDomainBasicConfigsResponseBody = {
  domainConfigs?: [ 
    {
      accessType?: string(name='AccessType'),
      aclStatus?: int32(name='AclStatus'),
      ccMode?: int32(name='CcMode'),
      ccStatus?: int32(name='CcStatus'),
      domain?: string(name='Domain'),
      owner?: string(name='Owner'),
      status?: int32(name='Status'),
      version?: long(name='Version'),
      wafMode?: int32(name='WafMode'),
      wafStatus?: int32(name='WafStatus'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDomainBasicConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainBasicConfigsResponseBody(name='body'),
}

async function describeDomainBasicConfigsWithOptions(request: DescribeDomainBasicConfigsRequest, runtime: Util.RuntimeOptions): DescribeDomainBasicConfigsResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessType'] = request.accessType;
  query['CloudNativeProductId'] = request.cloudNativeProductId;
  query['DomainKey'] = request.domainKey;
  query['InstanceId'] = request.instanceId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainBasicConfigs',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainBasicConfigs(request: DescribeDomainBasicConfigsRequest): DescribeDomainBasicConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBasicConfigsWithOptions(request, runtime);
}

model DescribeDomainListRequest {
  domainName?: string(name='DomainName'),
  domainNames?: [ string ](name='DomainNames'),
  instanceId?: string(name='InstanceId'),
  isSub?: int32(name='IsSub'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDomainListResponseBody = {
  domainNames?: [ string ](name='DomainNames'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainListResponseBody(name='body'),
}

async function describeDomainListWithOptions(request: DescribeDomainListRequest, runtime: Util.RuntimeOptions): DescribeDomainListResponse {
  Util.validateModel(request);
  var query = {};
  query['DomainName'] = request.domainName;
  query['DomainNames'] = request.domainNames;
  query['InstanceId'] = request.instanceId;
  query['IsSub'] = request.isSub;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainList',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainList(request: DescribeDomainListRequest): DescribeDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainListWithOptions(request, runtime);
}

model DescribeDomainNamesRequest {
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDomainNamesResponseBody = {
  domainNames?: [ string ](name='DomainNames'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainNamesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainNamesResponseBody(name='body'),
}

async function describeDomainNamesWithOptions(request: DescribeDomainNamesRequest, runtime: Util.RuntimeOptions): DescribeDomainNamesResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainNames',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainNames(request: DescribeDomainNamesRequest): DescribeDomainNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainNamesWithOptions(request, runtime);
}

model DescribeDomainRuleGroupRequest {
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDomainRuleGroupResponseBody = {
  requestId?: string(name='RequestId'),
  ruleGroupId?: long(name='RuleGroupId'),
}

model DescribeDomainRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRuleGroupResponseBody(name='body'),
}

async function describeDomainRuleGroupWithOptions(request: DescribeDomainRuleGroupRequest, runtime: Util.RuntimeOptions): DescribeDomainRuleGroupResponse {
  Util.validateModel(request);
  var query = {};
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRuleGroup',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainRuleGroup(request: DescribeDomainRuleGroupRequest): DescribeDomainRuleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRuleGroupWithOptions(request, runtime);
}

model DescribeInstanceInfoRequest {
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeInstanceInfoResponseBody = {
  instanceInfo?: {
    endDate?: long(name='EndDate'),
    inDebt?: int32(name='InDebt'),
    instanceId?: string(name='InstanceId'),
    payType?: int32(name='PayType'),
    region?: string(name='Region'),
    remainDay?: int32(name='RemainDay'),
    status?: int32(name='Status'),
    subscriptionType?: string(name='SubscriptionType'),
    trial?: int32(name='Trial'),
    version?: string(name='Version'),
  }(name='InstanceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceInfoResponseBody(name='body'),
}

async function describeInstanceInfoWithOptions(request: DescribeInstanceInfoRequest, runtime: Util.RuntimeOptions): DescribeInstanceInfoResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceInfo',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceInfo(request: DescribeInstanceInfoRequest): DescribeInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceInfoWithOptions(request, runtime);
}

model DescribeInstanceSpecInfoRequest {
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeInstanceSpecInfoResponseBody = {
  expireTime?: long(name='ExpireTime'),
  instanceId?: string(name='InstanceId'),
  instanceSpecInfos?: [ 
    {
      code?: string(name='Code'),
      value?: string(name='Value'),
    }
  ](name='InstanceSpecInfos'),
  requestId?: string(name='RequestId'),
  version?: string(name='Version'),
}

model DescribeInstanceSpecInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSpecInfoResponseBody(name='body'),
}

async function describeInstanceSpecInfoWithOptions(request: DescribeInstanceSpecInfoRequest, runtime: Util.RuntimeOptions): DescribeInstanceSpecInfoResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSpecInfo',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceSpecInfo(request: DescribeInstanceSpecInfoRequest): DescribeInstanceSpecInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecInfoWithOptions(request, runtime);
}

model DescribeLogServiceStatusRequest {
  domainNames?: [ string ](name='DomainNames'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  region?: string(name='Region'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeLogServiceStatusResponseBody = {
  domainStatus?: [ 
    {
      domain?: string(name='Domain'),
      slsLogActive?: int32(name='SlsLogActive'),
    }
  ](name='DomainStatus'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLogServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogServiceStatusResponseBody(name='body'),
}

async function describeLogServiceStatusWithOptions(request: DescribeLogServiceStatusRequest, runtime: Util.RuntimeOptions): DescribeLogServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  query['DomainNames'] = request.domainNames;
  query['InstanceId'] = request.instanceId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['Region'] = request.region;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogServiceStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogServiceStatus(request: DescribeLogServiceStatusRequest): DescribeLogServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogServiceStatusWithOptions(request, runtime);
}

model DescribeProtectionModuleCodeConfigRequest {
  codeType?: int32(name='CodeType'),
  codeValue?: int32(name='CodeValue'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeProtectionModuleCodeConfigResponseBody = {
  codeConfigs?: string(name='CodeConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeProtectionModuleCodeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProtectionModuleCodeConfigResponseBody(name='body'),
}

async function describeProtectionModuleCodeConfigWithOptions(request: DescribeProtectionModuleCodeConfigRequest, runtime: Util.RuntimeOptions): DescribeProtectionModuleCodeConfigResponse {
  Util.validateModel(request);
  var query = {};
  query['CodeType'] = request.codeType;
  query['CodeValue'] = request.codeValue;
  query['InstanceId'] = request.instanceId;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtectionModuleCodeConfig',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtectionModuleCodeConfig(request: DescribeProtectionModuleCodeConfigRequest): DescribeProtectionModuleCodeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtectionModuleCodeConfigWithOptions(request, runtime);
}

model DescribeProtectionModuleRulesRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeProtectionModuleRulesResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      content?: map[string]any(name='Content'),
      ruleId?: long(name='RuleId'),
      status?: long(name='Status'),
      time?: long(name='Time'),
      version?: long(name='Version'),
    }
  ](name='Rules'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeProtectionModuleRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProtectionModuleRulesResponseBody(name='body'),
}

async function describeProtectionModuleRulesWithOptions(request: DescribeProtectionModuleRulesRequest, runtime: Util.RuntimeOptions): DescribeProtectionModuleRulesResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['Lang'] = request.lang;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['Query'] = request.query;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtectionModuleRules',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtectionModuleRules(request: DescribeProtectionModuleRulesRequest): DescribeProtectionModuleRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtectionModuleRulesWithOptions(request, runtime);
}

model DescribeProtectionModuleStatusRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
}

model DescribeProtectionModuleStatusResponseBody = {
  moduleStatus?: int32(name='ModuleStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeProtectionModuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProtectionModuleStatusResponseBody(name='body'),
}

async function describeProtectionModuleStatusWithOptions(request: DescribeProtectionModuleStatusRequest, runtime: Util.RuntimeOptions): DescribeProtectionModuleStatusResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtectionModuleStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtectionModuleStatus(request: DescribeProtectionModuleStatusRequest): DescribeProtectionModuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtectionModuleStatusWithOptions(request, runtime);
}

model DescribeWafSourceIpSegmentRequest {
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeWafSourceIpSegmentResponseBody = {
  ipV6s?: string(name='IpV6s'),
  ips?: string(name='Ips'),
  requestId?: string(name='RequestId'),
}

model DescribeWafSourceIpSegmentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWafSourceIpSegmentResponseBody(name='body'),
}

async function describeWafSourceIpSegmentWithOptions(request: DescribeWafSourceIpSegmentRequest, runtime: Util.RuntimeOptions): DescribeWafSourceIpSegmentResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['ResourceGroupId'] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWafSourceIpSegment',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWafSourceIpSegment(request: DescribeWafSourceIpSegmentRequest): DescribeWafSourceIpSegmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWafSourceIpSegmentWithOptions(request, runtime);
}

model ModifyDomainRequest {
  accessHeaderMode?: int32(name='AccessHeaderMode'),
  accessHeaders?: string(name='AccessHeaders'),
  accessType?: string(name='AccessType'),
  cloudNativeInstances?: string(name='CloudNativeInstances'),
  clusterType?: int32(name='ClusterType'),
  connectionTime?: int32(name='ConnectionTime'),
  domain?: string(name='Domain'),
  http2Port?: string(name='Http2Port'),
  httpPort?: string(name='HttpPort'),
  httpToUserIp?: int32(name='HttpToUserIp'),
  httpsPort?: string(name='HttpsPort'),
  httpsRedirect?: int32(name='HttpsRedirect'),
  instanceId?: string(name='InstanceId'),
  ipFollowStatus?: int32(name='IpFollowStatus'),
  isAccessProduct?: int32(name='IsAccessProduct'),
  loadBalancing?: int32(name='LoadBalancing'),
  logHeaders?: string(name='LogHeaders'),
  readTime?: int32(name='ReadTime'),
  sniHost?: string(name='SniHost'),
  sniStatus?: int32(name='SniStatus'),
  sourceIps?: string(name='SourceIps'),
  writeTime?: int32(name='WriteTime'),
}

model ModifyDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainResponseBody(name='body'),
}

async function modifyDomainWithOptions(request: ModifyDomainRequest, runtime: Util.RuntimeOptions): ModifyDomainResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessHeaderMode'] = request.accessHeaderMode;
  query['AccessHeaders'] = request.accessHeaders;
  query['AccessType'] = request.accessType;
  query['CloudNativeInstances'] = request.cloudNativeInstances;
  query['ClusterType'] = request.clusterType;
  query['ConnectionTime'] = request.connectionTime;
  query['Domain'] = request.domain;
  query['Http2Port'] = request.http2Port;
  query['HttpPort'] = request.httpPort;
  query['HttpToUserIp'] = request.httpToUserIp;
  query['HttpsPort'] = request.httpsPort;
  query['HttpsRedirect'] = request.httpsRedirect;
  query['InstanceId'] = request.instanceId;
  query['InstanceId'] = request.instanceId;
  query['IpFollowStatus'] = request.ipFollowStatus;
  query['IsAccessProduct'] = request.isAccessProduct;
  query['LoadBalancing'] = request.loadBalancing;
  query['LogHeaders'] = request.logHeaders;
  query['ReadTime'] = request.readTime;
  query['SniHost'] = request.sniHost;
  query['SniStatus'] = request.sniStatus;
  query['SourceIps'] = request.sourceIps;
  query['WriteTime'] = request.writeTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDomain',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDomain(request: ModifyDomainRequest): ModifyDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDomainWithOptions(request, runtime);
}

model ModifyDomainIpv6StatusRequest {
  domain?: string(name='Domain'),
  enabled?: string(name='Enabled'),
  instanceId?: string(name='InstanceId'),
}

model ModifyDomainIpv6StatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainIpv6StatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainIpv6StatusResponseBody(name='body'),
}

async function modifyDomainIpv6StatusWithOptions(request: ModifyDomainIpv6StatusRequest, runtime: Util.RuntimeOptions): ModifyDomainIpv6StatusResponse {
  Util.validateModel(request);
  var query = {};
  query['Domain'] = request.domain;
  query['Enabled'] = request.enabled;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDomainIpv6Status',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDomainIpv6Status(request: ModifyDomainIpv6StatusRequest): ModifyDomainIpv6StatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDomainIpv6StatusWithOptions(request, runtime);
}

model ModifyLogRetrievalStatusRequest {
  domain?: string(name='Domain'),
  enabled?: int32(name='Enabled'),
  instanceId?: string(name='InstanceId'),
}

model ModifyLogRetrievalStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogRetrievalStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogRetrievalStatusResponseBody(name='body'),
}

async function modifyLogRetrievalStatusWithOptions(request: ModifyLogRetrievalStatusRequest, runtime: Util.RuntimeOptions): ModifyLogRetrievalStatusResponse {
  Util.validateModel(request);
  var query = {};
  query['Domain'] = request.domain;
  query['Enabled'] = request.enabled;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLogRetrievalStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLogRetrievalStatus(request: ModifyLogRetrievalStatusRequest): ModifyLogRetrievalStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogRetrievalStatusWithOptions(request, runtime);
}

model ModifyLogServiceStatusRequest {
  domain?: string(name='Domain'),
  enabled?: int32(name='Enabled'),
  instanceId?: string(name='InstanceId'),
}

model ModifyLogServiceStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogServiceStatusResponseBody(name='body'),
}

async function modifyLogServiceStatusWithOptions(request: ModifyLogServiceStatusRequest, runtime: Util.RuntimeOptions): ModifyLogServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  query['Domain'] = request.domain;
  query['Enabled'] = request.enabled;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLogServiceStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLogServiceStatus(request: ModifyLogServiceStatusRequest): ModifyLogServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogServiceStatusWithOptions(request, runtime);
}

model ModifyProtectionModuleModeRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  mode?: int32(name='Mode'),
}

model ModifyProtectionModuleModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionModuleModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionModuleModeResponseBody(name='body'),
}

async function modifyProtectionModuleModeWithOptions(request: ModifyProtectionModuleModeRequest, runtime: Util.RuntimeOptions): ModifyProtectionModuleModeResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['Mode'] = request.mode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionModuleMode',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionModuleMode(request: ModifyProtectionModuleModeRequest): ModifyProtectionModuleModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionModuleModeWithOptions(request, runtime);
}

model ModifyProtectionModuleRuleRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  lockVersion?: long(name='LockVersion'),
  rule?: string(name='Rule'),
  ruleId?: long(name='RuleId'),
}

model ModifyProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionModuleRuleResponseBody(name='body'),
}

async function modifyProtectionModuleRuleWithOptions(request: ModifyProtectionModuleRuleRequest, runtime: Util.RuntimeOptions): ModifyProtectionModuleRuleResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['LockVersion'] = request.lockVersion;
  query['Rule'] = request.rule;
  query['RuleId'] = request.ruleId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionModuleRule',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionModuleRule(request: ModifyProtectionModuleRuleRequest): ModifyProtectionModuleRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionModuleRuleWithOptions(request, runtime);
}

model ModifyProtectionModuleStatusRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  moduleStatus?: int32(name='ModuleStatus'),
}

model ModifyProtectionModuleStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionModuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionModuleStatusResponseBody(name='body'),
}

async function modifyProtectionModuleStatusWithOptions(request: ModifyProtectionModuleStatusRequest, runtime: Util.RuntimeOptions): ModifyProtectionModuleStatusResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['ModuleStatus'] = request.moduleStatus;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionModuleStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionModuleStatus(request: ModifyProtectionModuleStatusRequest): ModifyProtectionModuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionModuleStatusWithOptions(request, runtime);
}

model ModifyProtectionRuleCacheStatusRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  ruleId?: long(name='RuleId'),
}

model ModifyProtectionRuleCacheStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionRuleCacheStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionRuleCacheStatusResponseBody(name='body'),
}

async function modifyProtectionRuleCacheStatusWithOptions(request: ModifyProtectionRuleCacheStatusRequest, runtime: Util.RuntimeOptions): ModifyProtectionRuleCacheStatusResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['RuleId'] = request.ruleId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionRuleCacheStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionRuleCacheStatus(request: ModifyProtectionRuleCacheStatusRequest): ModifyProtectionRuleCacheStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionRuleCacheStatusWithOptions(request, runtime);
}

model ModifyProtectionRuleStatusRequest {
  defenseType?: string(name='DefenseType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  lockVersion?: long(name='LockVersion'),
  ruleId?: long(name='RuleId'),
  ruleStatus?: int32(name='RuleStatus'),
}

model ModifyProtectionRuleStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionRuleStatusResponseBody(name='body'),
}

async function modifyProtectionRuleStatusWithOptions(request: ModifyProtectionRuleStatusRequest, runtime: Util.RuntimeOptions): ModifyProtectionRuleStatusResponse {
  Util.validateModel(request);
  var query = {};
  query['DefenseType'] = request.defenseType;
  query['Domain'] = request.domain;
  query['InstanceId'] = request.instanceId;
  query['LockVersion'] = request.lockVersion;
  query['RuleId'] = request.ruleId;
  query['RuleStatus'] = request.ruleStatus;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionRuleStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionRuleStatus(request: ModifyProtectionRuleStatusRequest): ModifyProtectionRuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionRuleStatusWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  query['ResourceGroupId'] = request.resourceGroupId;
  query['ResourceId'] = request.resourceId;
  query['ResourceType'] = request.resourceType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model SetDomainRuleGroupRequest {
  domains?: string(name='Domains'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  ruleGroupId?: long(name='RuleGroupId'),
  wafVersion?: long(name='WafVersion'),
}

model SetDomainRuleGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainRuleGroupResponseBody(name='body'),
}

async function setDomainRuleGroupWithOptions(request: SetDomainRuleGroupRequest, runtime: Util.RuntimeOptions): SetDomainRuleGroupResponse {
  Util.validateModel(request);
  var query = {};
  query['Domains'] = request.domains;
  query['InstanceId'] = request.instanceId;
  query['ResourceGroupId'] = request.resourceGroupId;
  query['RuleGroupId'] = request.ruleGroupId;
  query['WafVersion'] = request.wafVersion;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetDomainRuleGroup',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDomainRuleGroup(request: SetDomainRuleGroupRequest): SetDomainRuleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainRuleGroupWithOptions(request, runtime);
}

