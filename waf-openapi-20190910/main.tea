/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('waf-openapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateCertificateRequest {
  certificate?: string(name='Certificate', example='-----BEGIN CERTIFICATE----- 62EcYPWd2Oy1vs6MTXcJSfN9Z7rZ9fmxWr2BFN2XbahgnsSXM48ixZJ4krc+1M+j2kcubVpsE2cgHdj4v8H6jUz9Ji4mr7vMNS6dXv8PUkl/qoDeNGCNdyTS5NIL5ir+g92cL8IGOkjgvhlqt9vc65Cgb4mL+n5+DV9uOyTZTW/MojmlgfUekC2xiXa54nxJf17Y1TADGSbyJbsC0Q9nIrHsPl8YKkvRWvIAqYxXZ7wRwWWmv4TMxFhWRiNY7yZIo2ZUhl02SIDNggIEeg== -----END CERTIFICATE-----'),
  certificateName?: string(name='CertificateName', example='CertName'),
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  privateKey?: string(name='PrivateKey', example='-----BEGIN RSA PRIVATE KEY----- DADTPZoOHd9WtZ3UKHJTRgNQmioPQn2bqdKHop+B/dn/4VZL7Jt8zSDGM9sTMThLyvsmLQKBgQCr+ujntC1kN6pGBj2Fw2l/EA/W3rYEce2tyhjgmG7rZ+A/jVE9fld5sQra6ZdwBcQJaiygoIYoaMF2EjRwc0qwHaluq0C15f6ujSoHh2e+D5zdmkTg/3NKNjqNv6xA2gYpinVDzFdZ9Zujxvuh9o4Vqf0YF8bv5UK5G04RtKadOw== -----END RSA PRIVATE KEY-----'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateCertificateResponseBody = {
  certificateId?: long(name='CertificateId', example='2329260'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model CreateCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCertificateResponseBody(name='body'),
}

async function createCertificateWithOptions(request: CreateCertificateRequest, runtime: Util.RuntimeOptions): CreateCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificate)) {
    query['Certificate'] = request.certificate;
  }
  if (!Util.isUnset(request.certificateName)) {
    query['CertificateName'] = request.certificateName;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCertificate',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCertificate(request: CreateCertificateRequest): CreateCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertificateWithOptions(request, runtime);
}

model CreateCertificateByCertificateIdRequest {
  certificateId?: long(name='CertificateId', example='3384669'),
  domain?: string(name='Domain', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-zz11sr5****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateCertificateByCertificateIdResponseBody = {
  certificateId?: long(name='CertificateId', example='3384669'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model CreateCertificateByCertificateIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCertificateByCertificateIdResponseBody(name='body'),
}

async function createCertificateByCertificateIdWithOptions(request: CreateCertificateByCertificateIdRequest, runtime: Util.RuntimeOptions): CreateCertificateByCertificateIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateId)) {
    query['CertificateId'] = request.certificateId;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCertificateByCertificateId',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCertificateByCertificateId(request: CreateCertificateByCertificateIdRequest): CreateCertificateByCertificateIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertificateByCertificateIdWithOptions(request, runtime);
}

model CreateDomainRequest {
  accessHeaderMode?: int32(name='AccessHeaderMode', example='0'),
  accessHeaders?: string(name='AccessHeaders', example='["X-Client-IP"]'),
  accessType?: string(name='AccessType', example='waf-cloud-dns'),
  cloudNativeInstances?: string(name='CloudNativeInstances', example='[{"ProtocolPortConfigs":[{"Ports":[80],"Protocol":"http"}],"RedirectionTypeName":"ALB","InstanceId":"alb-s65nua68wdedsp****","IPAddressList":["182.XX.XX.113"],"CloudNativeProductName":"ALB"}]'),
  clusterType?: int32(name='ClusterType', example='0'),
  connectionTime?: int32(name='ConnectionTime', example='5'),
  domain?: string(name='Domain', example='www.example.com'),
  http2Port?: string(name='Http2Port', example='[443]'),
  httpPort?: string(name='HttpPort', example='[80]'),
  httpToUserIp?: int32(name='HttpToUserIp', example='0'),
  httpsPort?: string(name='HttpsPort', example='[443]'),
  httpsRedirect?: int32(name='HttpsRedirect', example='0'),
  instanceId?: string(name='InstanceId', example='waf-cn-7pp26f1****'),
  ipFollowStatus?: int32(name='IpFollowStatus', example='1'),
  isAccessProduct?: int32(name='IsAccessProduct', example='0'),
  keepalive?: boolean(name='Keepalive'),
  keepaliveRequests?: int32(name='KeepaliveRequests'),
  keepaliveTimeout?: int32(name='KeepaliveTimeout'),
  loadBalancing?: int32(name='LoadBalancing', example='0'),
  logHeaders?: string(name='LogHeaders', example='[{"k":"ALIWAF-TAG","v":"Yes"}]'),
  readTime?: int32(name='ReadTime', example='120'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
  retry?: boolean(name='Retry'),
  sniHost?: string(name='SniHost', example='waf.example.com'),
  sniStatus?: int32(name='SniStatus', example='1'),
  sourceIps?: string(name='SourceIps', example='["39.XX.XX.197"]'),
  writeTime?: int32(name='WriteTime', example='120'),
}

model CreateDomainResponseBody = {
  cname?: string(name='Cname', example='mmspx7qhfvnfzggheh1g2wnbhog66vcv.****.com'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomainWithOptions(request: CreateDomainRequest, runtime: Util.RuntimeOptions): CreateDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessHeaderMode)) {
    query['AccessHeaderMode'] = request.accessHeaderMode;
  }
  if (!Util.isUnset(request.accessHeaders)) {
    query['AccessHeaders'] = request.accessHeaders;
  }
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.cloudNativeInstances)) {
    query['CloudNativeInstances'] = request.cloudNativeInstances;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.connectionTime)) {
    query['ConnectionTime'] = request.connectionTime;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.http2Port)) {
    query['Http2Port'] = request.http2Port;
  }
  if (!Util.isUnset(request.httpPort)) {
    query['HttpPort'] = request.httpPort;
  }
  if (!Util.isUnset(request.httpToUserIp)) {
    query['HttpToUserIp'] = request.httpToUserIp;
  }
  if (!Util.isUnset(request.httpsPort)) {
    query['HttpsPort'] = request.httpsPort;
  }
  if (!Util.isUnset(request.httpsRedirect)) {
    query['HttpsRedirect'] = request.httpsRedirect;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipFollowStatus)) {
    query['IpFollowStatus'] = request.ipFollowStatus;
  }
  if (!Util.isUnset(request.isAccessProduct)) {
    query['IsAccessProduct'] = request.isAccessProduct;
  }
  if (!Util.isUnset(request.keepalive)) {
    query['Keepalive'] = request.keepalive;
  }
  if (!Util.isUnset(request.keepaliveRequests)) {
    query['KeepaliveRequests'] = request.keepaliveRequests;
  }
  if (!Util.isUnset(request.keepaliveTimeout)) {
    query['KeepaliveTimeout'] = request.keepaliveTimeout;
  }
  if (!Util.isUnset(request.loadBalancing)) {
    query['LoadBalancing'] = request.loadBalancing;
  }
  if (!Util.isUnset(request.logHeaders)) {
    query['LogHeaders'] = request.logHeaders;
  }
  if (!Util.isUnset(request.readTime)) {
    query['ReadTime'] = request.readTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.retry)) {
    query['Retry'] = request.retry;
  }
  if (!Util.isUnset(request.sniHost)) {
    query['SniHost'] = request.sniHost;
  }
  if (!Util.isUnset(request.sniStatus)) {
    query['SniStatus'] = request.sniStatus;
  }
  if (!Util.isUnset(request.sourceIps)) {
    query['SourceIps'] = request.sourceIps;
  }
  if (!Util.isUnset(request.writeTime)) {
    query['WriteTime'] = request.writeTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDomain',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDomainWithOptions(request, runtime);
}

model CreateProtectionModuleRuleRequest {
  defenseType?: string(name='DefenseType', example='ac_custom'),
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-0xldbqt****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  rule?: string(name='Rule', example='{"action":"monitor","name":"test","scene":"custom_acl","conditions":[{"opCode":1,"key":"URL","values":"/example"}]}'),
}

model CreateProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model CreateProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProtectionModuleRuleResponseBody(name='body'),
}

async function createProtectionModuleRuleWithOptions(request: CreateProtectionModuleRuleRequest, runtime: Util.RuntimeOptions): CreateProtectionModuleRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProtectionModuleRule',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProtectionModuleRule(request: CreateProtectionModuleRuleRequest): CreateProtectionModuleRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProtectionModuleRuleWithOptions(request, runtime);
}

model DeleteDomainRequest {
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteProtectionModuleRuleRequest {
  defenseType?: string(name='DefenseType', example='ac_custom'),
  domain?: string(name='Domain', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-mp9153****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  ruleId?: long(name='RuleId', example='42754'),
}

model DeleteProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId', example='1557B42F-B889-460A-B17F-1DE5C5AD7FF2'),
}

model DeleteProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProtectionModuleRuleResponseBody(name='body'),
}

async function deleteProtectionModuleRuleWithOptions(request: DeleteProtectionModuleRuleRequest, runtime: Util.RuntimeOptions): DeleteProtectionModuleRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProtectionModuleRule',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProtectionModuleRule(request: DeleteProtectionModuleRuleRequest): DeleteProtectionModuleRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProtectionModuleRuleWithOptions(request, runtime);
}

model DescribeCertMatchStatusRequest {
  certificate?: string(name='Certificate', example='-----BEGIN CERTIFICATE----- 62EcYPWd2Oy1vs6MTXcJSfN9Z7rZ9fmxWr2BFN2XbahgnsSXM48ixZJ4krc+1M+j2kcubVpsE2cgHdj4v8H6jUz9Ji4mr7vMNS6dXv8PUkl/qoDeNGCNdyTS5NIL5ir+g92cL8IGOkjgvhlqt9vc65Cgb4mL+n5+DV9uOyTZTW/MojmlgfUekC2xiXa54nxJf17Y1TADGSbyJbsC0Q9nIrHsPl8YKkvRWvIAqYxXZ7wRwWWmv4TMxFhWRiNY7yZIo2ZUhl02SIDNggIEeg== -----END CERTIFICATE-----'),
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  privateKey?: string(name='PrivateKey', example='-----BEGIN RSA PRIVATE KEY----- DADTPZoOHd9WtZ3UKHJTRgNQmioPQn2bqdKHop+B/dn/4VZL7Jt8zSDGM9sTMThLyvsmLQKBgQCr+ujntC1kN6pGBj2Fw2l/EA/W3rYEce2tyhjgmG7rZ+A/jVE9fld5sQra6ZdwBcQJaiygoIYoaMF2EjRwc0qwHaluq0C15f6ujSoHh2e+D5zdmkTg/3NKNjqNv6xA2gYpinVDzFdZ9Zujxvuh9o4Vqf0YF8bv5UK5G04RtKadOw== -----END RSA PRIVATE KEY-----'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeCertMatchStatusResponseBody = {
  matchStatus?: boolean(name='MatchStatus', example='false'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model DescribeCertMatchStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCertMatchStatusResponseBody(name='body'),
}

async function describeCertMatchStatusWithOptions(request: DescribeCertMatchStatusRequest, runtime: Util.RuntimeOptions): DescribeCertMatchStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificate)) {
    query['Certificate'] = request.certificate;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertMatchStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCertMatchStatus(request: DescribeCertMatchStatusRequest): DescribeCertMatchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertMatchStatusWithOptions(request, runtime);
}

model DescribeCertificatesRequest {
  domain?: string(name='Domain', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-zz11sr5****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeCertificatesResponseBody = {
  certificates?: [ 
    {
      certificateId?: long(name='CertificateId', example='2329260'),
      certificateName?: string(name='CertificateName', example='*.aliyundoc.com'),
      commonName?: string(name='CommonName', example='*.aliyundoc.com'),
      endTime?: long(name='EndTime'),
      isUsing?: boolean(name='IsUsing', example='false'),
      sans?: [ string ](name='Sans'),
    }
  ](name='Certificates'),
  requestId?: string(name='RequestId', example='ECF65091-3704-55D5-BC88-EC208B0E238C'),
}

model DescribeCertificatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCertificatesResponseBody(name='body'),
}

async function describeCertificatesWithOptions(request: DescribeCertificatesRequest, runtime: Util.RuntimeOptions): DescribeCertificatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertificates',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCertificates(request: DescribeCertificatesRequest): DescribeCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertificatesWithOptions(request, runtime);
}

model DescribeDomainRequest {
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-7pp26f1****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDomainResponseBody = {
  domain?: {
    accessHeaderMode?: int32(name='AccessHeaderMode', example='1'),
    accessHeaders?: [ string ](name='AccessHeaders'),
    accessType?: string(name='AccessType', example='waf-cloud-dns'),
    cloudNativeInstances?: [ 
      {
        cloudNativeProductName?: string(name='CloudNativeProductName', example='ALB'),
        IPAddressList?: [ string ](name='IPAddressList', example='["39.XX.XX.197"]'),
        instanceId?: string(name='InstanceId', example='alb-s65nua68wdedsp****'),
        protocolPortConfigs?: [ 
          {
            ports?: [ int32 ](name='Ports', example='[80]'),
            protocol?: string(name='Protocol', example='http'),
          }
        ](name='ProtocolPortConfigs'),
        redirectionTypeName?: string(name='RedirectionTypeName', example='ALB'),
      }
    ](name='CloudNativeInstances'),
    clusterType?: int32(name='ClusterType', example='0'),
    cname?: string(name='Cname', example='kdmqyi3ck7xogegxpiyfpb0fj21mgkxn.****.com'),
    connectionTime?: int32(name='ConnectionTime', example='5'),
    http2Port?: [ int32 ](name='Http2Port'),
    httpPort?: [ int32 ](name='HttpPort'),
    httpToUserIp?: int32(name='HttpToUserIp', example='0'),
    httpsPort?: [ int32 ](name='HttpsPort'),
    httpsRedirect?: int32(name='HttpsRedirect', example='0'),
    ipFollowStatus?: int32(name='IpFollowStatus', example='1'),
    isAccessProduct?: int32(name='IsAccessProduct', example='1'),
    keepalive?: boolean(name='Keepalive'),
    keepaliveRequests?: int32(name='KeepaliveRequests'),
    keepaliveTimeout?: int32(name='KeepaliveTimeout'),
    loadBalancing?: int32(name='LoadBalancing', example='2'),
    logHeaders?: [ 
      {
        k?: string(name='k', example='ALIWAF-TAG'),
        v?: string(name='v', example='Yes'),
      }
    ](name='LogHeaders'),
    readTime?: int32(name='ReadTime', example='120'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2mkrunv****'),
    retry?: boolean(name='Retry'),
    sniHost?: string(name='SniHost', example='waf.example.com'),
    sniStatus?: int32(name='SniStatus', example='1'),
    sourceIps?: [ string ](name='SourceIps'),
    version?: long(name='Version', example='40'),
    writeTime?: int32(name='WriteTime', example='120'),
  }(name='Domain'),
  requestId?: string(name='RequestId', example='D827FCFE-90A7-4330-9326-D33C8B4C7726'),
}

model DescribeDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainResponseBody(name='body'),
}

async function describeDomainWithOptions(request: DescribeDomainRequest, runtime: Util.RuntimeOptions): DescribeDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomain',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainWithOptions(request, runtime);
}

model DescribeDomainAdvanceConfigsRequest {
  domainList?: string(name='DomainList', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-2r427ng****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
}

model DescribeDomainAdvanceConfigsResponseBody = {
  domainConfigs?: [ 
    {
      domain?: string(name='Domain', example='www.aliyundoc.com'),
      profile?: {
        certStatus?: int32(name='CertStatus', example='1'),
        clusterType?: int32(name='ClusterType', example='0'),
        cname?: string(name='Cname', example='****dsbpkt75zeiok5mta2j5l7hggcrm.****.com'),
        exclusiveVipStatus?: int32(name='ExclusiveVipStatus', example='0'),
        GSLBStatus?: string(name='GSLBStatus', example='on'),
        http2Port?: [ int32 ](name='Http2Port'),
        httpPort?: [ int32 ](name='HttpPort'),
        httpsPort?: [ int32 ](name='HttpsPort'),
        ipv6Status?: int32(name='Ipv6Status', example='1'),
        resolvedType?: int32(name='ResolvedType', example='0'),
        rs?: [ string ](name='Rs', example='["39.XX.XX.197"]'),
        vipServiceStatus?: int32(name='VipServiceStatus', example='0'),
      }(name='Profile'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model DescribeDomainAdvanceConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainAdvanceConfigsResponseBody(name='body'),
}

async function describeDomainAdvanceConfigsWithOptions(request: DescribeDomainAdvanceConfigsRequest, runtime: Util.RuntimeOptions): DescribeDomainAdvanceConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainList)) {
    query['DomainList'] = request.domainList;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainAdvanceConfigs',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainAdvanceConfigs(request: DescribeDomainAdvanceConfigsRequest): DescribeDomainAdvanceConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAdvanceConfigsWithOptions(request, runtime);
}

model DescribeDomainBasicConfigsRequest {
  accessType?: string(name='AccessType', example='waf-cloud-dns'),
  cloudNativeProductId?: int32(name='CloudNativeProductId', example='0'),
  domainKey?: string(name='DomainKey', example='aliyundoc'),
  instanceId?: string(name='InstanceId', example='waf-cn-tl32ast****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2pz25js****'),
}

model DescribeDomainBasicConfigsResponseBody = {
  domainConfigs?: [ 
    {
      accessType?: string(name='AccessType', example='waf-cloud-dns'),
      aclStatus?: int32(name='AclStatus', example='1'),
      ccMode?: int32(name='CcMode', example='0'),
      ccStatus?: int32(name='CcStatus', example='1'),
      domain?: string(name='Domain', example='www.aliyundoc.com'),
      owner?: string(name='Owner', example='WAF'),
      status?: int32(name='Status', example='1'),
      version?: long(name='Version', example='0'),
      wafMode?: int32(name='WafMode', example='0'),
      wafStatus?: int32(name='WafStatus', example='1'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDomainBasicConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainBasicConfigsResponseBody(name='body'),
}

async function describeDomainBasicConfigsWithOptions(request: DescribeDomainBasicConfigsRequest, runtime: Util.RuntimeOptions): DescribeDomainBasicConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.cloudNativeProductId)) {
    query['CloudNativeProductId'] = request.cloudNativeProductId;
  }
  if (!Util.isUnset(request.domainKey)) {
    query['DomainKey'] = request.domainKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainBasicConfigs',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainBasicConfigs(request: DescribeDomainBasicConfigsRequest): DescribeDomainBasicConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBasicConfigsWithOptions(request, runtime);
}

model DescribeDomainListRequest {
  domainName?: string(name='DomainName', example='example.com'),
  domainNames?: [ string ](name='DomainNames', example='example.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-7pp26f1****'),
  isSub?: int32(name='IsSub', example='0'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2pz25js****'),
}

model DescribeDomainListResponseBody = {
  domainNames?: [ string ](name='DomainNames'),
  requestId?: string(name='RequestId', example='592E866F-6C05-4E7C-81DE-B4D8E86B91EF'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainListResponseBody(name='body'),
}

async function describeDomainListWithOptions(request: DescribeDomainListRequest, runtime: Util.RuntimeOptions): DescribeDomainListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isSub)) {
    query['IsSub'] = request.isSub;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainList',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainList(request: DescribeDomainListRequest): DescribeDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainListWithOptions(request, runtime);
}

model DescribeDomainNamesRequest {
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
}

model DescribeDomainNamesResponseBody = {
  domainNames?: [ string ](name='DomainNames'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model DescribeDomainNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainNamesResponseBody(name='body'),
}

async function describeDomainNamesWithOptions(request: DescribeDomainNamesRequest, runtime: Util.RuntimeOptions): DescribeDomainNamesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainNames',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainNames(request: DescribeDomainNamesRequest): DescribeDomainNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainNamesWithOptions(request, runtime);
}

model DescribeDomainRuleGroupRequest {
  domain?: string(name='Domain', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-tl32ast****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDomainRuleGroupResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
  ruleGroupId?: long(name='RuleGroupId', example='1012'),
  wafAiStatus?: int32(name='WafAiStatus', example='1'),
}

model DescribeDomainRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRuleGroupResponseBody(name='body'),
}

async function describeDomainRuleGroupWithOptions(request: DescribeDomainRuleGroupRequest, runtime: Util.RuntimeOptions): DescribeDomainRuleGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRuleGroup',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainRuleGroup(request: DescribeDomainRuleGroupRequest): DescribeDomainRuleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRuleGroupWithOptions(request, runtime);
}

model DescribeInstanceInfoRequest {
  instanceId?: string(name='InstanceId', example='waf-cn-tl32ast****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
}

model DescribeInstanceInfoResponseBody = {
  instanceInfo?: {
    endDate?: long(name='EndDate', example='1512921600'),
    inDebt?: int32(name='InDebt', example='1'),
    instanceId?: string(name='InstanceId', example='waf-cn-tl32ast****'),
    payType?: int32(name='PayType', example='1'),
    region?: string(name='Region', example='cn'),
    remainDay?: int32(name='RemainDay', example='1'),
    status?: int32(name='Status', example='1'),
    subscriptionType?: string(name='SubscriptionType', example='Subscription'),
    trial?: int32(name='Trial', example='1'),
    version?: string(name='Version', example='version_3'),
  }(name='InstanceInfo'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model DescribeInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceInfoResponseBody(name='body'),
}

async function describeInstanceInfoWithOptions(request: DescribeInstanceInfoRequest, runtime: Util.RuntimeOptions): DescribeInstanceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceInfo',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceInfo(request: DescribeInstanceInfoRequest): DescribeInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceInfoWithOptions(request, runtime);
}

model DescribeInstanceSpecInfoRequest {
  instanceId?: string(name='InstanceId', example='waf-cn-st2225l****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
}

model DescribeInstanceSpecInfoResponseBody = {
  expireTime?: long(name='ExpireTime', example='1677168000000'),
  instanceId?: string(name='InstanceId', example='waf-cn-st2225l****'),
  instanceSpecInfos?: [ 
    {
      code?: string(name='Code', example='103'),
      value?: string(name='Value'),
    }
  ](name='InstanceSpecInfos'),
  requestId?: string(name='RequestId', example='E906513E-F6B5-495E-98DC-7BA888671D76'),
  version?: string(name='Version'),
}

model DescribeInstanceSpecInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceSpecInfoResponseBody(name='body'),
}

async function describeInstanceSpecInfoWithOptions(request: DescribeInstanceSpecInfoRequest, runtime: Util.RuntimeOptions): DescribeInstanceSpecInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSpecInfo',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceSpecInfo(request: DescribeInstanceSpecInfoRequest): DescribeInstanceSpecInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecInfoWithOptions(request, runtime);
}

model DescribeLogServiceStatusRequest {
  domainNames?: [ string ](name='DomainNames', example='www.aliyun.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-zz11sr5****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  region?: string(name='Region', example='cn'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2pz25js****'),
}

model DescribeLogServiceStatusResponseBody = {
  domainStatus?: [ 
    {
      domain?: string(name='Domain', example='www.aliyun.com'),
      slsLogActive?: int32(name='SlsLogActive', example='1'),
    }
  ](name='DomainStatus'),
  requestId?: string(name='RequestId', example='C2E97B3F-1623-4CDF-A7E2-FD9D4CF1027A'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeLogServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogServiceStatusResponseBody(name='body'),
}

async function describeLogServiceStatusWithOptions(request: DescribeLogServiceStatusRequest, runtime: Util.RuntimeOptions): DescribeLogServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogServiceStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogServiceStatus(request: DescribeLogServiceStatusRequest): DescribeLogServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogServiceStatusWithOptions(request, runtime);
}

model DescribeProtectionModuleCodeConfigRequest {
  codeType?: int32(name='CodeType', example='14'),
  codeValue?: int32(name='CodeValue', example='0'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2pz25js****'),
}

model DescribeProtectionModuleCodeConfigResponseBody = {
  codeConfigs?: string(name='CodeConfigs', example='[{"code":0,"name":"310000,530000,150000,110000,TW_01,220000,510000,120000,640000,340000,370000,140000,440000,450000,650000,320000,360000,130000,410000,330000,460000,420000,430000,MO_01,620000,350000,540000,520000,210000,500000,610000,630000,HK_01,230000","env":"online"}]'),
  requestId?: string(name='RequestId', example='BE3911B8-9D96-5B39-8875-503BBC9DA4BF'),
}

model DescribeProtectionModuleCodeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProtectionModuleCodeConfigResponseBody(name='body'),
}

async function describeProtectionModuleCodeConfigWithOptions(request: DescribeProtectionModuleCodeConfigRequest, runtime: Util.RuntimeOptions): DescribeProtectionModuleCodeConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.codeType)) {
    query['CodeType'] = request.codeType;
  }
  if (!Util.isUnset(request.codeValue)) {
    query['CodeValue'] = request.codeValue;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtectionModuleCodeConfig',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtectionModuleCodeConfig(request: DescribeProtectionModuleCodeConfigRequest): DescribeProtectionModuleCodeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtectionModuleCodeConfigWithOptions(request, runtime);
}

model DescribeProtectionModuleModeRequest {
  defenseType?: string(name='DefenseType', example='waf'),
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
}

model DescribeProtectionModuleModeResponseBody = {
  mode?: int32(name='Mode', example='1'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model DescribeProtectionModuleModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProtectionModuleModeResponseBody(name='body'),
}

async function describeProtectionModuleModeWithOptions(request: DescribeProtectionModuleModeRequest, runtime: Util.RuntimeOptions): DescribeProtectionModuleModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtectionModuleMode',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtectionModuleMode(request: DescribeProtectionModuleModeRequest): DescribeProtectionModuleModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtectionModuleModeWithOptions(request, runtime);
}

model DescribeProtectionModuleRulesRequest {
  defenseType?: string(name='DefenseType', example='ac_highfreq'),
  domain?: string(name='Domain', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  lang?: string(name='Lang', example='zh'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  query?: string(name='Query', example='e2ZpbHRlcjp7InJ1bGVJZCI6NDI3NTV9LG9yZGVyQnk6ImdtdF9tb2RpZmllZCIsZGVzYzp0cnVlfQ=='),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2pz25js****'),
}

model DescribeProtectionModuleRulesResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
  rules?: [ 
    {
      content?: map[string]any(name='Content', example='{"count":60,"interval":60,"ttl":300}'),
      ruleId?: long(name='RuleId', example='42755'),
      status?: long(name='Status', example='1'),
      time?: long(name='Time', example='1570700044'),
      version?: long(name='Version', example='2'),
    }
  ](name='Rules'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeProtectionModuleRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProtectionModuleRulesResponseBody(name='body'),
}

async function describeProtectionModuleRulesWithOptions(request: DescribeProtectionModuleRulesRequest, runtime: Util.RuntimeOptions): DescribeProtectionModuleRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtectionModuleRules',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtectionModuleRules(request: DescribeProtectionModuleRulesRequest): DescribeProtectionModuleRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtectionModuleRulesWithOptions(request, runtime);
}

model DescribeProtectionModuleStatusRequest {
  defenseType?: string(name='DefenseType', example='waf'),
  domain?: string(name='Domain', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-zz11sr5****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeProtectionModuleStatusResponseBody = {
  moduleStatus?: int32(name='ModuleStatus', example='1'),
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model DescribeProtectionModuleStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProtectionModuleStatusResponseBody(name='body'),
}

async function describeProtectionModuleStatusWithOptions(request: DescribeProtectionModuleStatusRequest, runtime: Util.RuntimeOptions): DescribeProtectionModuleStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtectionModuleStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtectionModuleStatus(request: DescribeProtectionModuleStatusRequest): DescribeProtectionModuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtectionModuleStatusWithOptions(request, runtime);
}

model DescribeWafSourceIpSegmentRequest {
  instanceId?: string(name='InstanceId', example='waf-cn-zz11sr5****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2pz25js****'),
}

model DescribeWafSourceIpSegmentResponseBody = {
  ipV6s?: string(name='IpV6s', example='39.XXX.XXX.0/24,……,2408:400a:XXXX:XXXX::/56'),
  ips?: string(name='Ips', example='47.XXX.XXX.192/26,……,47.XXX.XXX.0/24'),
  requestId?: string(name='RequestId', example='AB2F5E31-EE96-4FD7-9560-45FF5D5377FF'),
}

model DescribeWafSourceIpSegmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWafSourceIpSegmentResponseBody(name='body'),
}

async function describeWafSourceIpSegmentWithOptions(request: DescribeWafSourceIpSegmentRequest, runtime: Util.RuntimeOptions): DescribeWafSourceIpSegmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWafSourceIpSegment',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWafSourceIpSegment(request: DescribeWafSourceIpSegmentRequest): DescribeWafSourceIpSegmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWafSourceIpSegmentWithOptions(request, runtime);
}

model ModifyDomainRequest {
  accessHeaderMode?: int32(name='AccessHeaderMode', example='0'),
  accessHeaders?: string(name='AccessHeaders', example='["X-Client-IP"]'),
  accessType?: string(name='AccessType', example='waf-cloud-dns'),
  cloudNativeInstances?: string(name='CloudNativeInstances', example='[{"ProtocolPortConfigs":[{"Ports":[80],"Protocol":"http"}],"RedirectionTypeName":"ALB","InstanceId":"alb-s65nua68wdedsp****","IPAddressList":["182.XX.XX.113"],"CloudNativeProductName":"ALB"}]'),
  clusterType?: int32(name='ClusterType', example='0'),
  connectionTime?: int32(name='ConnectionTime', example='5'),
  domain?: string(name='Domain', example='www.example.com'),
  http2Port?: string(name='Http2Port', example='[443]'),
  httpPort?: string(name='HttpPort', example='[80]'),
  httpToUserIp?: int32(name='HttpToUserIp', example='0'),
  httpsPort?: string(name='HttpsPort', example='[443]'),
  httpsRedirect?: int32(name='HttpsRedirect', example='0'),
  instanceId?: string(name='InstanceId', example='waf-cn-7pp26f1****'),
  ipFollowStatus?: int32(name='IpFollowStatus', example='0'),
  isAccessProduct?: int32(name='IsAccessProduct', example='0'),
  keepalive?: boolean(name='Keepalive'),
  keepaliveRequests?: int32(name='KeepaliveRequests'),
  keepaliveTimeout?: int32(name='KeepaliveTimeout'),
  loadBalancing?: int32(name='LoadBalancing', example='0'),
  logHeaders?: string(name='LogHeaders', example='[{"k":"ALIWAF-TAG","v":"Yes"}]'),
  readTime?: int32(name='ReadTime', example='120'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  retry?: boolean(name='Retry'),
  sniHost?: string(name='SniHost', example='waf.example.com'),
  sniStatus?: int32(name='SniStatus', example='1'),
  sourceIps?: string(name='SourceIps', example='["39.XX.XX.197"]'),
  writeTime?: int32(name='WriteTime', example='120'),
}

model ModifyDomainResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDomainResponseBody(name='body'),
}

async function modifyDomainWithOptions(request: ModifyDomainRequest, runtime: Util.RuntimeOptions): ModifyDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessHeaderMode)) {
    query['AccessHeaderMode'] = request.accessHeaderMode;
  }
  if (!Util.isUnset(request.accessHeaders)) {
    query['AccessHeaders'] = request.accessHeaders;
  }
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.cloudNativeInstances)) {
    query['CloudNativeInstances'] = request.cloudNativeInstances;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.connectionTime)) {
    query['ConnectionTime'] = request.connectionTime;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.http2Port)) {
    query['Http2Port'] = request.http2Port;
  }
  if (!Util.isUnset(request.httpPort)) {
    query['HttpPort'] = request.httpPort;
  }
  if (!Util.isUnset(request.httpToUserIp)) {
    query['HttpToUserIp'] = request.httpToUserIp;
  }
  if (!Util.isUnset(request.httpsPort)) {
    query['HttpsPort'] = request.httpsPort;
  }
  if (!Util.isUnset(request.httpsRedirect)) {
    query['HttpsRedirect'] = request.httpsRedirect;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipFollowStatus)) {
    query['IpFollowStatus'] = request.ipFollowStatus;
  }
  if (!Util.isUnset(request.isAccessProduct)) {
    query['IsAccessProduct'] = request.isAccessProduct;
  }
  if (!Util.isUnset(request.keepalive)) {
    query['Keepalive'] = request.keepalive;
  }
  if (!Util.isUnset(request.keepaliveRequests)) {
    query['KeepaliveRequests'] = request.keepaliveRequests;
  }
  if (!Util.isUnset(request.keepaliveTimeout)) {
    query['KeepaliveTimeout'] = request.keepaliveTimeout;
  }
  if (!Util.isUnset(request.loadBalancing)) {
    query['LoadBalancing'] = request.loadBalancing;
  }
  if (!Util.isUnset(request.logHeaders)) {
    query['LogHeaders'] = request.logHeaders;
  }
  if (!Util.isUnset(request.readTime)) {
    query['ReadTime'] = request.readTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.retry)) {
    query['Retry'] = request.retry;
  }
  if (!Util.isUnset(request.sniHost)) {
    query['SniHost'] = request.sniHost;
  }
  if (!Util.isUnset(request.sniStatus)) {
    query['SniStatus'] = request.sniStatus;
  }
  if (!Util.isUnset(request.sourceIps)) {
    query['SourceIps'] = request.sourceIps;
  }
  if (!Util.isUnset(request.writeTime)) {
    query['WriteTime'] = request.writeTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDomain',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDomain(request: ModifyDomainRequest): ModifyDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDomainWithOptions(request, runtime);
}

model ModifyDomainIpv6StatusRequest {
  domain?: string(name='Domain', example='www.example.com'),
  enabled?: string(name='Enabled', example='0'),
  instanceId?: string(name='InstanceId', example='waf-cn-mp9153****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyDomainIpv6StatusResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyDomainIpv6StatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDomainIpv6StatusResponseBody(name='body'),
}

async function modifyDomainIpv6StatusWithOptions(request: ModifyDomainIpv6StatusRequest, runtime: Util.RuntimeOptions): ModifyDomainIpv6StatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDomainIpv6Status',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDomainIpv6Status(request: ModifyDomainIpv6StatusRequest): ModifyDomainIpv6StatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDomainIpv6StatusWithOptions(request, runtime);
}

model ModifyLogRetrievalStatusRequest {
  domain?: string(name='Domain', example='www.example.com'),
  enabled?: int32(name='Enabled', example='1'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyLogRetrievalStatusResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyLogRetrievalStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLogRetrievalStatusResponseBody(name='body'),
}

async function modifyLogRetrievalStatusWithOptions(request: ModifyLogRetrievalStatusRequest, runtime: Util.RuntimeOptions): ModifyLogRetrievalStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLogRetrievalStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLogRetrievalStatus(request: ModifyLogRetrievalStatusRequest): ModifyLogRetrievalStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogRetrievalStatusWithOptions(request, runtime);
}

model ModifyLogServiceStatusRequest {
  domain?: string(name='Domain', example='www.example.com'),
  enabled?: int32(name='Enabled', example='1'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyLogServiceStatusResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyLogServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLogServiceStatusResponseBody(name='body'),
}

async function modifyLogServiceStatusWithOptions(request: ModifyLogServiceStatusRequest, runtime: Util.RuntimeOptions): ModifyLogServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLogServiceStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLogServiceStatus(request: ModifyLogServiceStatusRequest): ModifyLogServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogServiceStatusWithOptions(request, runtime);
}

model ModifyProtectionModuleModeRequest {
  defenseType?: string(name='DefenseType', example='waf'),
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  mode?: int32(name='Mode', example='0'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyProtectionModuleModeResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyProtectionModuleModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProtectionModuleModeResponseBody(name='body'),
}

async function modifyProtectionModuleModeWithOptions(request: ModifyProtectionModuleModeRequest, runtime: Util.RuntimeOptions): ModifyProtectionModuleModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionModuleMode',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionModuleMode(request: ModifyProtectionModuleModeRequest): ModifyProtectionModuleModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionModuleModeWithOptions(request, runtime);
}

model ModifyProtectionModuleRuleRequest {
  defenseType?: string(name='DefenseType', example='ac_custom'),
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-0xldbqt****'),
  lockVersion?: long(name='LockVersion', example='2'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  rule?: string(name='Rule', example='{"action":"monitor","name":"test","scene":"custom_acl","conditions":[{"opCode":1,"key":"URL","values":"/example"}]}'),
  ruleId?: long(name='RuleId', example='369998'),
}

model ModifyProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProtectionModuleRuleResponseBody(name='body'),
}

async function modifyProtectionModuleRuleWithOptions(request: ModifyProtectionModuleRuleRequest, runtime: Util.RuntimeOptions): ModifyProtectionModuleRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lockVersion)) {
    query['LockVersion'] = request.lockVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionModuleRule',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionModuleRule(request: ModifyProtectionModuleRuleRequest): ModifyProtectionModuleRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionModuleRuleWithOptions(request, runtime);
}

model ModifyProtectionModuleStatusRequest {
  defenseType?: string(name='DefenseType', example='waf'),
  domain?: string(name='Domain', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', example='waf-cn-zz11sr5****'),
  moduleStatus?: int32(name='ModuleStatus', example='1'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyProtectionModuleStatusResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyProtectionModuleStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProtectionModuleStatusResponseBody(name='body'),
}

async function modifyProtectionModuleStatusWithOptions(request: ModifyProtectionModuleStatusRequest, runtime: Util.RuntimeOptions): ModifyProtectionModuleStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.moduleStatus)) {
    query['ModuleStatus'] = request.moduleStatus;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionModuleStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionModuleStatus(request: ModifyProtectionModuleStatusRequest): ModifyProtectionModuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionModuleStatusWithOptions(request, runtime);
}

model ModifyProtectionRuleCacheStatusRequest {
  defenseType?: string(name='DefenseType', example='tamperproof'),
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  ruleId?: long(name='RuleId', example='42755'),
}

model ModifyProtectionRuleCacheStatusResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyProtectionRuleCacheStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProtectionRuleCacheStatusResponseBody(name='body'),
}

async function modifyProtectionRuleCacheStatusWithOptions(request: ModifyProtectionRuleCacheStatusRequest, runtime: Util.RuntimeOptions): ModifyProtectionRuleCacheStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionRuleCacheStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionRuleCacheStatus(request: ModifyProtectionRuleCacheStatusRequest): ModifyProtectionRuleCacheStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionRuleCacheStatusWithOptions(request, runtime);
}

model ModifyProtectionRuleStatusRequest {
  defenseType?: string(name='DefenseType', example='tamperproof'),
  domain?: string(name='Domain', example='www.example.com'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-0xldbqt****'),
  lockVersion?: long(name='LockVersion', example='2'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  ruleId?: long(name='RuleId', example='42755'),
  ruleStatus?: int32(name='RuleStatus', example='1'),
}

model ModifyProtectionRuleStatusResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyProtectionRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProtectionRuleStatusResponseBody(name='body'),
}

async function modifyProtectionRuleStatusWithOptions(request: ModifyProtectionRuleStatusRequest, runtime: Util.RuntimeOptions): ModifyProtectionRuleStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseType)) {
    query['DefenseType'] = request.defenseType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lockVersion)) {
    query['LockVersion'] = request.lockVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleStatus)) {
    query['RuleStatus'] = request.ruleStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtectionRuleStatus',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtectionRuleStatus(request: ModifyProtectionRuleStatusRequest): ModifyProtectionRuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionRuleStatusWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
  resourceId?: string(name='ResourceId', example='waf-cn-09k1rd5****~www.example.com'),
  resourceType?: string(name='ResourceType', example='domain'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='C33EB3D5-AF96-43CA-9C7E-37A81BC06A1E'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model SetDomainRuleGroupRequest {
  domains?: string(name='Domains', example='["www.aliyundoc.com"]'),
  instanceId?: string(name='InstanceId', example='waf-cn-tl32ast****'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2pz25js****'),
  ruleGroupId?: long(name='RuleGroupId', example='1012'),
  wafAiStatus?: int32(name='WafAiStatus', example='1'),
  wafVersion?: long(name='WafVersion', example='1'),
}

model SetDomainRuleGroupResponseBody = {
  requestId?: string(name='RequestId', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model SetDomainRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainRuleGroupResponseBody(name='body'),
}

async function setDomainRuleGroupWithOptions(request: SetDomainRuleGroupRequest, runtime: Util.RuntimeOptions): SetDomainRuleGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domains)) {
    query['Domains'] = request.domains;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.ruleGroupId)) {
    query['RuleGroupId'] = request.ruleGroupId;
  }
  if (!Util.isUnset(request.wafAiStatus)) {
    query['WafAiStatus'] = request.wafAiStatus;
  }
  if (!Util.isUnset(request.wafVersion)) {
    query['WafVersion'] = request.wafVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomainRuleGroup',
    version = '2019-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDomainRuleGroup(request: SetDomainRuleGroupRequest): SetDomainRuleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainRuleGroupWithOptions(request, runtime);
}

