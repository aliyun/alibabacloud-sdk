/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'waf-openapi';
  @version = '2019-09-10';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateCertificateRequest {
  certificate?: string(name='Certificate', position='Query'),
  certificateName: string(name='CertificateName', position='Query'),
  domain?: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  privateKey: string(name='PrivateKey', position='Query'),
}

model CreateCertificateResponseBody = {
  certificateId?: long(name='CertificateId'),
  requestId?: string(name='RequestId'),
}

model CreateCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertificateResponseBody(name='body'),
}

async function createCertificate(request: CreateCertificateRequest): CreateCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCertificate', 'POST', '/', 'json', false, 'json', request);
}

model CreateCertificateByCertificateIdRequest {
  certificateId?: long(name='CertificateId', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model CreateCertificateByCertificateIdResponseBody = {
  certificateId?: long(name='CertificateId'),
  requestId?: string(name='RequestId'),
}

model CreateCertificateByCertificateIdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertificateByCertificateIdResponseBody(name='body'),
}

async function createCertificateByCertificateId(request: CreateCertificateByCertificateIdRequest): CreateCertificateByCertificateIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCertificateByCertificateId', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainRequest {
  accessHeaderMode?: int32(name='AccessHeaderMode', position='Query'),
  accessHeaders?: string(name='AccessHeaders', position='Query'),
  accessType?: string(name='AccessType', position='Query'),
  cloudNativeInstances?: string(name='CloudNativeInstances', position='Query'),
  clusterType?: int32(name='ClusterType', position='Query'),
  connectionTime?: int32(name='ConnectionTime', position='Query'),
  domain: string(name='Domain', position='Query'),
  http2Port?: string(name='Http2Port', position='Query'),
  httpPort?: string(name='HttpPort', position='Query'),
  httpToUserIp?: int32(name='HttpToUserIp', position='Query'),
  httpsPort?: string(name='HttpsPort', position='Query'),
  httpsRedirect?: int32(name='HttpsRedirect', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ipFollowStatus?: int32(name='IpFollowStatus', position='Query'),
  isAccessProduct: int32(name='IsAccessProduct', position='Query'),
  loadBalancing?: int32(name='LoadBalancing', position='Query'),
  logHeaders?: string(name='LogHeaders', position='Query'),
  readTime?: int32(name='ReadTime', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sniHost?: string(name='SniHost', position='Query'),
  sniStatus?: int32(name='SniStatus', position='Query'),
  sourceIps?: string(name='SourceIps', position='Query'),
  writeTime?: int32(name='WriteTime', position='Query'),
}

model CreateDomainResponseBody = {
  cname?: string(name='Cname'),
  requestId?: string(name='RequestId'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateProtectionModuleRuleRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  rule: string(name='Rule', position='Query'),
}

model CreateProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProtectionModuleRuleResponseBody(name='body'),
}

async function createProtectionModuleRule(request: CreateProtectionModuleRuleRequest): CreateProtectionModuleRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProtectionModuleRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProtectionModuleRuleRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
}

model DeleteProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProtectionModuleRuleResponseBody(name='body'),
}

async function deleteProtectionModuleRule(request: DeleteProtectionModuleRuleRequest): DeleteProtectionModuleRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProtectionModuleRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCertMatchStatusRequest {
  certificate: string(name='Certificate', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  privateKey: string(name='PrivateKey', position='Query'),
}

model DescribeCertMatchStatusResponseBody = {
  matchStatus?: boolean(name='MatchStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeCertMatchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertMatchStatusResponseBody(name='body'),
}

async function describeCertMatchStatus(request: DescribeCertMatchStatusRequest): DescribeCertMatchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCertMatchStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCertificatesRequest {
  domain?: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeCertificatesResponseBody = {
  certificates?: [ 
    {
      certificateId?: long(name='CertificateId'),
      certificateName?: string(name='CertificateName'),
      commonName?: string(name='CommonName'),
      isUsing?: boolean(name='IsUsing'),
      sans?: [ string ](name='Sans'),
    }
  ](name='Certificates'),
  requestId?: string(name='RequestId'),
}

model DescribeCertificatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertificatesResponseBody(name='body'),
}

async function describeCertificates(request: DescribeCertificatesRequest): DescribeCertificatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCertificates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRequest {
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeDomainResponseBody = {
  domain?: {
    accessHeaderMode?: int32(name='AccessHeaderMode'),
    accessHeaders?: [ string ](name='AccessHeaders'),
    accessType?: string(name='AccessType'),
    cloudNativeInstances?: [ 
      {
        cloudNativeProductName?: string(name='CloudNativeProductName'),
        IPAddressList?: string(name='IPAddressList'),
        instanceId?: string(name='InstanceId'),
        protocolPortConfigs?: [ 
          {
            ports?: string(name='Ports'),
            protocol?: string(name='Protocol'),
          }
        ](name='ProtocolPortConfigs'),
        redirectionTypeName?: string(name='RedirectionTypeName'),
      }
    ](name='CloudNativeInstances'),
    clusterType?: int32(name='ClusterType'),
    cname?: string(name='Cname'),
    connectionTime?: int32(name='ConnectionTime'),
    http2Port?: [ string ](name='Http2Port'),
    httpPort?: [ string ](name='HttpPort'),
    httpToUserIp?: int32(name='HttpToUserIp'),
    httpsPort?: [ string ](name='HttpsPort'),
    httpsRedirect?: int32(name='HttpsRedirect'),
    ipFollowStatus?: int32(name='IpFollowStatus'),
    isAccessProduct?: int32(name='IsAccessProduct'),
    loadBalancing?: int32(name='LoadBalancing'),
    logHeaders?: [ 
      {
        k?: string(name='k'),
        v?: string(name='v'),
      }
    ](name='LogHeaders'),
    readTime?: int32(name='ReadTime'),
    resourceGroupId?: string(name='ResourceGroupId'),
    sniHost?: string(name='SniHost'),
    sniStatus?: int32(name='SniStatus'),
    sourceIps?: [ string ](name='SourceIps'),
    version?: long(name='Version'),
    writeTime?: int32(name='WriteTime'),
  }(name='Domain'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainResponseBody(name='body'),
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainAdvanceConfigsRequest {
  domainList: string(name='DomainList', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDomainAdvanceConfigsResponseBody = {
  domainConfigs?: [ 
    {
      domain?: string(name='Domain'),
      profile?: {
        certStatus?: int32(name='CertStatus'),
        clusterType?: int32(name='ClusterType'),
        cname?: string(name='Cname'),
        exclusiveVipStatus?: int32(name='ExclusiveVipStatus'),
        GSLBStatus?: string(name='GSLBStatus'),
        http2Port?: [ int32 ](name='Http2Port'),
        httpPort?: [ int32 ](name='HttpPort'),
        httpsPort?: [ int32 ](name='HttpsPort'),
        ipv6Status?: int32(name='Ipv6Status'),
        resolvedType?: int32(name='ResolvedType'),
        rs?: [ string ](name='Rs'),
        vipServiceStatus?: int32(name='VipServiceStatus'),
      }(name='Profile'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainAdvanceConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAdvanceConfigsResponseBody(name='body'),
}

async function describeDomainAdvanceConfigs(request: DescribeDomainAdvanceConfigsRequest): DescribeDomainAdvanceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainAdvanceConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainBasicConfigsRequest {
  accessType?: string(name='AccessType', position='Query'),
  cloudNativeProductId?: int32(name='CloudNativeProductId', position='Query'),
  domainKey?: string(name='DomainKey', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDomainBasicConfigsResponseBody = {
  domainConfigs?: [ 
    {
      accessType?: string(name='AccessType'),
      aclStatus?: int32(name='AclStatus'),
      ccMode?: int32(name='CcMode'),
      ccStatus?: int32(name='CcStatus'),
      domain?: string(name='Domain'),
      owner?: string(name='Owner'),
      status?: int32(name='Status'),
      version?: long(name='Version'),
      wafMode?: int32(name='WafMode'),
      wafStatus?: int32(name='WafStatus'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDomainBasicConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainBasicConfigsResponseBody(name='body'),
}

async function describeDomainBasicConfigs(request: DescribeDomainBasicConfigsRequest): DescribeDomainBasicConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainBasicConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainListRequest {
  domainName?: string(name='DomainName', position='Query'),
  domainNames?: [ string ](name='DomainNames', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  isSub?: int32(name='IsSub', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDomainListResponseBody = {
  domainNames?: [ string ](name='DomainNames'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainListResponseBody(name='body'),
}

async function describeDomainList(request: DescribeDomainListRequest): DescribeDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainNamesRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDomainNamesResponseBody = {
  domainNames?: [ string ](name='DomainNames'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainNamesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainNamesResponseBody(name='body'),
}

async function describeDomainNames(request: DescribeDomainNamesRequest): DescribeDomainNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainNames', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRuleGroupRequest {
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeDomainRuleGroupResponseBody = {
  requestId?: string(name='RequestId'),
  ruleGroupId?: long(name='RuleGroupId'),
  wafAiStatus?: int32(name='WafAiStatus'),
}

model DescribeDomainRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRuleGroupResponseBody(name='body'),
}

async function describeDomainRuleGroup(request: DescribeDomainRuleGroupRequest): DescribeDomainRuleGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRuleGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceInfoRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeInstanceInfoResponseBody = {
  instanceInfo?: {
    endDate?: long(name='EndDate'),
    inDebt?: int32(name='InDebt'),
    instanceId?: string(name='InstanceId'),
    payType?: int32(name='PayType'),
    region?: string(name='Region'),
    remainDay?: int32(name='RemainDay'),
    status?: int32(name='Status'),
    subscriptionType?: string(name='SubscriptionType'),
    trial?: int32(name='Trial'),
    version?: string(name='Version'),
  }(name='InstanceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceInfoResponseBody(name='body'),
}

async function describeInstanceInfo(request: DescribeInstanceInfoRequest): DescribeInstanceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSpecInfoRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeInstanceSpecInfoResponseBody = {
  expireTime?: long(name='ExpireTime'),
  instanceId?: string(name='InstanceId'),
  instanceSpecInfos?: [ 
    {
      code?: string(name='Code'),
      value?: string(name='Value'),
    }
  ](name='InstanceSpecInfos'),
  requestId?: string(name='RequestId'),
  version?: string(name='Version'),
}

model DescribeInstanceSpecInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSpecInfoResponseBody(name='body'),
}

async function describeInstanceSpecInfo(request: DescribeInstanceSpecInfoRequest): DescribeInstanceSpecInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSpecInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogServiceStatusRequest {
  domainNames?: [ string ](name='DomainNames', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeLogServiceStatusResponseBody = {
  domainStatus?: [ 
    {
      domain?: string(name='Domain'),
      slsLogActive?: int32(name='SlsLogActive'),
    }
  ](name='DomainStatus'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLogServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogServiceStatusResponseBody(name='body'),
}

async function describeLogServiceStatus(request: DescribeLogServiceStatusRequest): DescribeLogServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProtectionModuleCodeConfigRequest {
  codeType: int32(name='CodeType', position='Query'),
  codeValue?: int32(name='CodeValue', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeProtectionModuleCodeConfigResponseBody = {
  codeConfigs?: string(name='CodeConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeProtectionModuleCodeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProtectionModuleCodeConfigResponseBody(name='body'),
}

async function describeProtectionModuleCodeConfig(request: DescribeProtectionModuleCodeConfigRequest): DescribeProtectionModuleCodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProtectionModuleCodeConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProtectionModuleRulesRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  query?: string(name='Query', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeProtectionModuleRulesResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      content?: map[string]any(name='Content'),
      ruleId?: long(name='RuleId'),
      status?: long(name='Status'),
      time?: long(name='Time'),
      version?: long(name='Version'),
    }
  ](name='Rules'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeProtectionModuleRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProtectionModuleRulesResponseBody(name='body'),
}

async function describeProtectionModuleRules(request: DescribeProtectionModuleRulesRequest): DescribeProtectionModuleRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProtectionModuleRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProtectionModuleStatusRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeProtectionModuleStatusResponseBody = {
  moduleStatus?: int32(name='ModuleStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeProtectionModuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProtectionModuleStatusResponseBody(name='body'),
}

async function describeProtectionModuleStatus(request: DescribeProtectionModuleStatusRequest): DescribeProtectionModuleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProtectionModuleStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWafSourceIpSegmentRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWafSourceIpSegmentResponseBody = {
  ipV6s?: string(name='IpV6s'),
  ips?: string(name='Ips'),
  requestId?: string(name='RequestId'),
}

model DescribeWafSourceIpSegmentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWafSourceIpSegmentResponseBody(name='body'),
}

async function describeWafSourceIpSegment(request: DescribeWafSourceIpSegmentRequest): DescribeWafSourceIpSegmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWafSourceIpSegment', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDomainRequest {
  accessHeaderMode?: int32(name='AccessHeaderMode', position='Query'),
  accessHeaders?: string(name='AccessHeaders', position='Query'),
  accessType?: string(name='AccessType', position='Query'),
  cloudNativeInstances?: string(name='CloudNativeInstances', position='Query'),
  clusterType?: int32(name='ClusterType', position='Query'),
  connectionTime?: int32(name='ConnectionTime', position='Query'),
  domain: string(name='Domain', position='Query'),
  http2Port?: string(name='Http2Port', position='Query'),
  httpPort?: string(name='HttpPort', position='Query'),
  httpToUserIp?: int32(name='HttpToUserIp', position='Query'),
  httpsPort?: string(name='HttpsPort', position='Query'),
  httpsRedirect?: int32(name='HttpsRedirect', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ipFollowStatus?: int32(name='IpFollowStatus', position='Query'),
  isAccessProduct: int32(name='IsAccessProduct', position='Query'),
  loadBalancing?: int32(name='LoadBalancing', position='Query'),
  logHeaders?: string(name='LogHeaders', position='Query'),
  readTime?: int32(name='ReadTime', position='Query'),
  sniHost?: string(name='SniHost', position='Query'),
  sniStatus?: int32(name='SniStatus', position='Query'),
  sourceIps?: string(name='SourceIps', position='Query'),
  writeTime?: int32(name='WriteTime', position='Query'),
}

model ModifyDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainResponseBody(name='body'),
}

async function modifyDomain(request: ModifyDomainRequest): ModifyDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDomain', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDomainIpv6StatusRequest {
  domain: string(name='Domain', position='Query'),
  enabled: string(name='Enabled', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model ModifyDomainIpv6StatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainIpv6StatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainIpv6StatusResponseBody(name='body'),
}

async function modifyDomainIpv6Status(request: ModifyDomainIpv6StatusRequest): ModifyDomainIpv6StatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDomainIpv6Status', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogRetrievalStatusRequest {
  domain: string(name='Domain', position='Query'),
  enabled: int32(name='Enabled', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model ModifyLogRetrievalStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogRetrievalStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogRetrievalStatusResponseBody(name='body'),
}

async function modifyLogRetrievalStatus(request: ModifyLogRetrievalStatusRequest): ModifyLogRetrievalStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogRetrievalStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogServiceStatusRequest {
  domain: string(name='Domain', position='Query'),
  enabled: int32(name='Enabled', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model ModifyLogServiceStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogServiceStatusResponseBody(name='body'),
}

async function modifyLogServiceStatus(request: ModifyLogServiceStatusRequest): ModifyLogServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyProtectionModuleModeRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  mode: int32(name='Mode', position='Query'),
}

model ModifyProtectionModuleModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionModuleModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionModuleModeResponseBody(name='body'),
}

async function modifyProtectionModuleMode(request: ModifyProtectionModuleModeRequest): ModifyProtectionModuleModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyProtectionModuleMode', 'POST', '/', 'json', false, 'json', request);
}

model ModifyProtectionModuleRuleRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  lockVersion: long(name='LockVersion', position='Query'),
  rule: string(name='Rule', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
}

model ModifyProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionModuleRuleResponseBody(name='body'),
}

async function modifyProtectionModuleRule(request: ModifyProtectionModuleRuleRequest): ModifyProtectionModuleRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyProtectionModuleRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyProtectionModuleStatusRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  moduleStatus: int32(name='ModuleStatus', position='Query'),
}

model ModifyProtectionModuleStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionModuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionModuleStatusResponseBody(name='body'),
}

async function modifyProtectionModuleStatus(request: ModifyProtectionModuleStatusRequest): ModifyProtectionModuleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyProtectionModuleStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyProtectionRuleCacheStatusRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
}

model ModifyProtectionRuleCacheStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionRuleCacheStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionRuleCacheStatusResponseBody(name='body'),
}

async function modifyProtectionRuleCacheStatus(request: ModifyProtectionRuleCacheStatusRequest): ModifyProtectionRuleCacheStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyProtectionRuleCacheStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyProtectionRuleStatusRequest {
  defenseType: string(name='DefenseType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  lockVersion: long(name='LockVersion', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  ruleStatus: int32(name='RuleStatus', position='Query'),
}

model ModifyProtectionRuleStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtectionRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionRuleStatusResponseBody(name='body'),
}

async function modifyProtectionRuleStatus(request: ModifyProtectionRuleStatusRequest): ModifyProtectionRuleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyProtectionRuleStatus', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  regionId: string(name='RegionId', position='Host'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainRuleGroupRequest {
  domains: string(name='Domains', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ruleGroupId: long(name='RuleGroupId', position='Query'),
  wafAiStatus?: int32(name='WafAiStatus', position='Query'),
  wafVersion?: long(name='WafVersion', position='Query'),
}

model SetDomainRuleGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainRuleGroupResponseBody(name='body'),
}

async function setDomainRuleGroup(request: SetDomainRuleGroupRequest): SetDomainRuleGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainRuleGroup', 'POST', '/', 'json', false, 'json', request);
}

