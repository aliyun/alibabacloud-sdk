import OSS;
import OpenPlatform;
import RPCUtil;
import OSSUtil;
import Util;
import Credential;
import FileForm;

type @endpoint = string
type @regionId = string
type @protocol = string
type @userAgent = string
type @endpointType = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @openPlatformEndpoint = string
type @credential = Credential

model Config {
  accessKeyId?: string,
  accessKeySecret?: string,
  type?: string,
  securityToken?: string,
  endpoint: string,
  protocol?: string,
  regionId: string,
  userAgent?: string,
  readTimeout?: number,
  connectTimeout?: number,
  httpProxy?: string,
  httpsProxy?: string,
  noProxy?: string,
  socks5Proxy?: string,
  socks5NetWork?: string,
  maxIdleConns?: number,
  endpointType?: string,
  openPlatformEndpoint?: string,
}

init(config: Config){
  if (Util.isUnset(config)) {
    throw {
      name = "ParameterMissing",
      message = "'config' can not be unset"
    };
  }

  if (Util.empty(config.regionId)) {
    throw {
      name = "ParameterMissing",
      message = "'config.regionId' can not be empty"
    };
  }

  if (Util.empty(config.endpoint)) {
    throw {
      name = "ParameterMissing",
      message = "'config.endpoint' can not be empty"
    };
  }

  if (Util.empty(config.type)) {
    config.type = 'access_key';
  }
  var credentialConfig = new Credential.Config{
    accessKeyId =  config.accessKeyId,
    type = config.type,
    accessKeySecret =  config.accessKeySecret,
    securityToken = config.securityToken,
  };
  @credential = new Credential(credentialConfig);
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @regionId = config.regionId;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
  @endpointType = config.endpointType;
  @openPlatformEndpoint = config.openPlatformEndpoint;
}

api _request(action: string, protocol: string, method: string, authType: string, query: object, body: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = '/';
  __request.query = RPCUtil.query({
    Action = action,
    Format = 'json',
    RegionId = @regionId,
    Timestamp = RPCUtil.getTimestamp(),
    Version = '2019-12-30',
    SignatureNonce = Util.getNonce(),
    ...query,
  });
  if (!Util.isUnset(body)) {
    var tmp = Util.anyifyMapValue(RPCUtil.query(body));
    __request.body = Util.toFormString(tmp);
  }
  __request.headers = {
    host = RPCUtil.getHost('imageseg', @regionId, @endpoint),
    user-agent = getUserAgent(),
  };
  if (!Util.equalString(authType, 'Anonymous')) {
    var accessKeyId = getAccessKeyId();
    var accessKeySecret = getAccessKeySecret();
    __request.query.SignatureMethod = 'HMAC-SHA1';
    __request.query.SignatureVersion = '1.0';
    __request.query.AccessKeyId = accessKeyId;
    __request.query.Signature = RPCUtil.getSignature(__request, accessKeySecret);
  }
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);
  if (Util.is4xx(__response.statusCode) || Util.is5xx(__response.statusCode)) {
  throw {
      message = res.Message,
      data = res,
      code = res.Code,
    }
  }
  return res;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

model SegmentFurnitureRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model SegmentFurnitureResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL', description='imageUrl'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function segmentFurniture(request: SegmentFurnitureRequest, runtime: Util.RuntimeOptions): SegmentFurnitureResponse {
  return _request('SegmentFurniture', 'HTTPS', 'POST', 'AK', null, request, runtime);
}

model SegmentFurnitureAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function segmentFurnitureAdvance(request: SegmentFurnitureAdvanceRequest, runtime: Util.RuntimeOptions): SegmentFurnitureResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentFurniturereq = new SegmentFurnitureRequest{};
  RPCUtil.convert(request, segmentFurniturereq);
  segmentFurniturereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentFurnitureResp = segmentFurniture(segmentFurniturereq, runtime);
  return segmentFurnitureResp;
}

model RefineMaskRequest = {
  maskImageURL: string(name='MaskImageURL', description='maskImageUrl'),
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RefineMaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL', description='imageUrl'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function refineMask(request: RefineMaskRequest, runtime: Util.RuntimeOptions): RefineMaskResponse {
  return _request('RefineMask', 'HTTPS', 'POST', 'AK', null, request, runtime);
}

model RefineMaskAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  maskImageURL: string(name='MaskImageURL', description='maskImageUrl'),
}

async function refineMaskAdvance(request: RefineMaskAdvanceRequest, runtime: Util.RuntimeOptions): RefineMaskResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var refineMaskreq = new RefineMaskRequest{};
  RPCUtil.convert(request, refineMaskreq);
  refineMaskreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var refineMaskResp = refineMask(refineMaskreq, runtime);
  return refineMaskResp;
}

model ParseFaceRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model ParseFaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    originImageURL: string(name='OriginImageURL', description='originImageUrl'),
    elements: [
      {
        name: string(name='Name', description='name'),
        imageURL: string(name='ImageURL', description='imageUrl'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function parseFace(request: ParseFaceRequest, runtime: Util.RuntimeOptions): ParseFaceResponse {
  return _request('ParseFace', 'HTTPS', 'GET', 'AK', request, null, runtime);
}

model ParseFaceAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function parseFaceAdvance(request: ParseFaceAdvanceRequest, runtime: Util.RuntimeOptions): ParseFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var parseFacereq = new ParseFaceRequest{};
  RPCUtil.convert(request, parseFacereq);
  parseFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var parseFaceResp = parseFace(parseFacereq, runtime);
  return parseFaceResp;
}

model SegmentVehicleRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model SegmentVehicleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        originImageURL: string(name='OriginImageURL', description='originImageUrl'),
        imageURL: string(name='ImageURL', description='imageUrl'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function segmentVehicle(request: SegmentVehicleRequest, runtime: Util.RuntimeOptions): SegmentVehicleResponse {
  return _request('SegmentVehicle', 'HTTPS', 'POST', 'AK', null, request, runtime);
}

model SegmentVehicleAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function segmentVehicleAdvance(request: SegmentVehicleAdvanceRequest, runtime: Util.RuntimeOptions): SegmentVehicleResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentVehiclereq = new SegmentVehicleRequest{};
  RPCUtil.convert(request, segmentVehiclereq);
  segmentVehiclereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentVehicleResp = segmentVehicle(segmentVehiclereq, runtime);
  return segmentVehicleResp;
}

model SegmentHairRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model SegmentHairResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL', description='uri'),
        x: integer(name='X', description='x'),
        y: integer(name='Y', description='y'),
        width: integer(name='Width', description='w'),
        height: integer(name='Height', description='h'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function segmentHair(request: SegmentHairRequest, runtime: Util.RuntimeOptions): SegmentHairResponse {
  return _request('SegmentHair', 'HTTPS', 'GET', 'AK', request, null, runtime);
}

model SegmentHairAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function segmentHairAdvance(request: SegmentHairAdvanceRequest, runtime: Util.RuntimeOptions): SegmentHairResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentHairreq = new SegmentHairRequest{};
  RPCUtil.convert(request, segmentHairreq);
  segmentHairreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentHairResp = segmentHair(segmentHairreq, runtime);
  return segmentHairResp;
}

model SegmentFaceRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model SegmentFaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL', description='uri'),
        x: integer(name='X', description='x'),
        y: integer(name='Y', description='y'),
        width: integer(name='Width', description='w'),
        height: integer(name='Height', description='h'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function segmentFace(request: SegmentFaceRequest, runtime: Util.RuntimeOptions): SegmentFaceResponse {
  return _request('SegmentFace', 'HTTPS', 'GET', 'AK', request, null, runtime);
}

model SegmentFaceAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function segmentFaceAdvance(request: SegmentFaceAdvanceRequest, runtime: Util.RuntimeOptions): SegmentFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentFacereq = new SegmentFaceRequest{};
  RPCUtil.convert(request, segmentFacereq);
  segmentFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentFaceResp = segmentFace(segmentFacereq, runtime);
  return segmentFaceResp;
}

model SegmentHeadRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model SegmentHeadResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL', description='uri'),
        x: integer(name='X', description='x'),
        y: integer(name='Y', description='y'),
        width: integer(name='Width', description='w'),
        height: integer(name='Height', description='h'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function segmentHead(request: SegmentHeadRequest, runtime: Util.RuntimeOptions): SegmentHeadResponse {
  return _request('SegmentHead', 'HTTPS', 'GET', 'AK', request, null, runtime);
}

model SegmentHeadAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function segmentHeadAdvance(request: SegmentHeadAdvanceRequest, runtime: Util.RuntimeOptions): SegmentHeadResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentHeadreq = new SegmentHeadRequest{};
  RPCUtil.convert(request, segmentHeadreq);
  segmentHeadreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentHeadResp = segmentHead(segmentHeadreq, runtime);
  return segmentHeadResp;
}

model SegmentCommodityRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model SegmentCommodityResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }(name='Data', description='data'),
}

async function segmentCommodity(request: SegmentCommodityRequest, runtime: Util.RuntimeOptions): SegmentCommodityResponse {
  return _request('SegmentCommodity', 'HTTPS', 'GET', 'AK', request, null, runtime);
}

model SegmentCommodityAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function segmentCommodityAdvance(request: SegmentCommodityAdvanceRequest, runtime: Util.RuntimeOptions): SegmentCommodityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentCommodityreq = new SegmentCommodityRequest{};
  RPCUtil.convert(request, segmentCommodityreq);
  segmentCommodityreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentCommodityResp = segmentCommodity(segmentCommodityreq, runtime);
  return segmentCommodityResp;
}

model SegmentBodyRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model SegmentBodyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }(name='Data', description='data'),
}

async function segmentBody(request: SegmentBodyRequest, runtime: Util.RuntimeOptions): SegmentBodyResponse {
  return _request('SegmentBody', 'HTTPS', 'GET', 'AK', request, null, runtime);
}

model SegmentBodyAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function segmentBodyAdvance(request: SegmentBodyAdvanceRequest, runtime: Util.RuntimeOptions): SegmentBodyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentBodyreq = new SegmentBodyRequest{};
  RPCUtil.convert(request, segmentBodyreq);
  segmentBodyreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentBodyResp = segmentBody(segmentBodyreq, runtime);
  return segmentBodyResp;
}

model SegmentCommonImageRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model SegmentCommonImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }(name='Data', description='data'),
}

async function segmentCommonImage(request: SegmentCommonImageRequest, runtime: Util.RuntimeOptions): SegmentCommonImageResponse {
  return _request('SegmentCommonImage', 'HTTPS', 'GET', 'AK', request, null, runtime);
}

model SegmentCommonImageAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function segmentCommonImageAdvance(request: SegmentCommonImageAdvanceRequest, runtime: Util.RuntimeOptions): SegmentCommonImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentCommonImagereq = new SegmentCommonImageRequest{};
  RPCUtil.convert(request, segmentCommonImagereq);
  segmentCommonImagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentCommonImageResp = segmentCommonImage(segmentCommonImagereq, runtime);
  return segmentCommonImageResp;
}

function getUserAgent(): string {
  var userAgent = Util.getUserAgent(@userAgent);
  return userAgent;
}

async function getAccessKeyId(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var accessKeyId = @credential.getAccessKeyId();
  return accessKeyId;
}

async function getAccessKeySecret(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var secret = @credential.getAccessKeySecret();
  return secret;
}

