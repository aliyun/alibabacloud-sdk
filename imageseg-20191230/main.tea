import OSS;
import OpenPlatform;
import Common;
module imageseg {

  type @endpoint = string
  type @regionId = string
  type @protocol = string
  type @userAgent = string
  type @endpointType = string
  type @readTimeout = number
  type @connectTimeout = number
  type @httpProxy = string
  type @httpsProxy = string
  type @noProxy = string
  type @maxIdleConns = number
  type @openPlatformEndpoint = string
  type @getAccessKeyId = (): string
  type @getAccessKeySecret = (): string
  prop version = '2019-12-30';

  model Config {
    accessKeyId?: string,
    accessKeySecret?: string,
    type: string,
    securityToken: string,
    endpoint: string,
    protocol: string,
    regionId: string,
    userAgent: string,
    readTimeout: number,
    connectTimeout: number,
    localAddr: string,
    httpProxy: string,
    httpsProxy: string,
    noProxy: string,
    socks5Proxy: string,
    socks5NetWork: string,
    maxIdleConns: number,
    endpointType: string,
    openPlatformEndpoint: number,
  }

  init(config: Config);

  api _request(action: string, protocol: string, method: string, request: object, runtime: Common.RuntimeObject): object {
    protocol = Common.default(@protocol, protocol);
    method = method;
    pathname = '/';
    query = Common.query({
      Action = action,
      Format = 'json',
      RegionId = @regionId,
      Timestamp = Common.getTimestamp(),
      Version = __module.version,
      SignatureMethod = 'HMAC-SHA1',
      SignatureVersion = '1.0',
      SignatureNonce = Common.getNonce(),
      AccessKeyId = @getAccessKeyId(),
      ...request,
    });
    headers = {
      host = Common.getHost('imageseg', @regionId, @endpoint),
      user-agent = Common.getUserAgent(@userAgent),
    };
    query.Signature = Common.getSignature(__request, @getAccessKeySecret());
  } returns {
    var body = Common.json(__response);
    if (Common.hasError(body)) {
      throw {
        message = body.Message,
        data = body,
        code = body.Code,
      }
    }
    return body;
  } runtime {
    timeouted = 'retry',
    readTimeout = Common.defaultNumber(runtime.readTimeout, @readTimeout),
    connectTimeout = Common.defaultNumber(runtime.connectTimeout, @connectTimeout),
    httpProxy = Common.default(runtime.httpProxy, @httpProxy),
    httpsProxy = Common.default(runtime.httpsProxy, @httpsProxy),
    noProxy = Common.default(runtime.noProxy, @noProxy),
    maxIdleConns = Common.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = Common.defaultNumber(runtime.maxAttempts, 3)
    },
    backoff = {
      policy = Common.default(runtime.backoffPolicy, 'no'),
      period = Common.defaultNumber(runtime.backoffPeriod, 1)
    },
    ignoreSSL = runtime.ignoreSSL
  }

  model SegmentFaceRequest = {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }

  model SegmentFaceResponse = {
    requestId: string(name='RequestId', description='requestId'),
    data: {
      elements: [
        {
          imageURL: string(name='ImageURL', description='uri'),
          x: integer(name='X', description='x'),
          y: integer(name='Y', description='y'),
          width: integer(name='Width', description='w'),
          height: integer(name='Height', description='h'),
        }
      ](name='Elements', description='elements'),
    }(name='Data', description='data'),
  }

  async function segmentFace(request: SegmentFaceRequest, runtime: Common.RuntimeObject): SegmentFaceResponse {
    return _request('SegmentFace', 'HTTPS', 'GET', request, runtime);
  }

  model SegmentFaceAdvanceRequest = {
    imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  }

  async function segmentFaceAdvance(request: SegmentFaceAdvanceRequest, runtime: Common.RuntimeObject): SegmentFaceResponse {
    // Step 0: init client
    var authConfig = new OpenPlatform.Config{
      accessKeyId = @getAccessKeyId(),
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = 'openplatform.aliyuncs.com',
      protocol = @protocol,
      regionId = @regionId,
    };
    var authClient = new OpenPlatform(authConfig);

    var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
      product = 'imageseg',
      regionId = @regionId,
    };
    var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
    // Step 1: request OSS api to upload file
    var ossConfig = new OSS.Config{
      accessKeyId = authResponse.accessKeyId,
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = Common.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
      protocol = @protocol,
      regionId = @regionId,
    };
    var ossClient = new OSS(ossConfig);

    var str = Common.readAsString(request.imageURLObject);
    var fileObj = new OSS.PostObjectRequest.header.file{
      fileName = authResponse.objectKey,
      content = str,
      contentType = '',
    };
    var ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    var uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, runtime);
    // Step 2: request final api
    var segmentFacereq = new SegmentFaceRequest{};
    Common.convert(request, segmentFacereq);
    segmentFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
    var segmentFaceResp = segmentFace(segmentFacereq, runtime);
    return segmentFaceResp;
  }

  model SegmentHairRequest = {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }

  model SegmentHairResponse = {
    requestId: string(name='RequestId', description='requestId'),
    data: {
      elements: [
        {
          imageURL: string(name='ImageURL', description='uri'),
          x: integer(name='X', description='x'),
          y: integer(name='Y', description='y'),
          width: integer(name='Width', description='w'),
          height: integer(name='Height', description='h'),
        }
      ](name='Elements', description='elements'),
    }(name='Data', description='data'),
  }

  async function segmentHair(request: SegmentHairRequest, runtime: Common.RuntimeObject): SegmentHairResponse {
    return _request('SegmentHair', 'HTTPS', 'GET', request, runtime);
  }

  model SegmentHairAdvanceRequest = {
    imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  }

  async function segmentHairAdvance(request: SegmentHairAdvanceRequest, runtime: Common.RuntimeObject): SegmentHairResponse {
    // Step 0: init client
    var authConfig = new OpenPlatform.Config{
      accessKeyId = @getAccessKeyId(),
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = 'openplatform.aliyuncs.com',
      protocol = @protocol,
      regionId = @regionId,
    };
    var authClient = new OpenPlatform(authConfig);

    var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
      product = 'imageseg',
      regionId = @regionId,
    };
    var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
    // Step 1: request OSS api to upload file
    var ossConfig = new OSS.Config{
      accessKeyId = authResponse.accessKeyId,
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = Common.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
      protocol = @protocol,
      regionId = @regionId,
    };
    var ossClient = new OSS(ossConfig);

    var str = Common.readAsString(request.imageURLObject);
    var fileObj = new OSS.PostObjectRequest.header.file{
      fileName = authResponse.objectKey,
      content = str,
      contentType = '',
    };
    var ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    var uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, runtime);
    // Step 2: request final api
    var segmentHairreq = new SegmentHairRequest{};
    Common.convert(request, segmentHairreq);
    segmentHairreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
    var segmentHairResp = segmentHair(segmentHairreq, runtime);
    return segmentHairResp;
  }

  model SegmentHeadRequest = {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }

  model SegmentHeadResponse = {
    requestId: string(name='RequestId', description='requestId'),
    data: {
      elements: [
        {
          imageURL: string(name='ImageURL', description='uri'),
          x: integer(name='X', description='x'),
          y: integer(name='Y', description='y'),
          width: integer(name='Width', description='w'),
          height: integer(name='Height', description='h'),
        }
      ](name='Elements', description='elements'),
    }(name='Data', description='data'),
  }

  async function segmentHead(request: SegmentHeadRequest, runtime: Common.RuntimeObject): SegmentHeadResponse {
    return _request('SegmentHead', 'HTTPS', 'GET', request, runtime);
  }

  model SegmentHeadAdvanceRequest = {
    imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  }

  async function segmentHeadAdvance(request: SegmentHeadAdvanceRequest, runtime: Common.RuntimeObject): SegmentHeadResponse {
    // Step 0: init client
    var authConfig = new OpenPlatform.Config{
      accessKeyId = @getAccessKeyId(),
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = 'openplatform.aliyuncs.com',
      protocol = @protocol,
      regionId = @regionId,
    };
    var authClient = new OpenPlatform(authConfig);

    var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
      product = 'imageseg',
      regionId = @regionId,
    };
    var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
    // Step 1: request OSS api to upload file
    var ossConfig = new OSS.Config{
      accessKeyId = authResponse.accessKeyId,
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = Common.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
      protocol = @protocol,
      regionId = @regionId,
    };
    var ossClient = new OSS(ossConfig);

    var str = Common.readAsString(request.imageURLObject);
    var fileObj = new OSS.PostObjectRequest.header.file{
      fileName = authResponse.objectKey,
      content = str,
      contentType = '',
    };
    var ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    var uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, runtime);
    // Step 2: request final api
    var segmentHeadreq = new SegmentHeadRequest{};
    Common.convert(request, segmentHeadreq);
    segmentHeadreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
    var segmentHeadResp = segmentHead(segmentHeadreq, runtime);
    return segmentHeadResp;
  }

  model SegmentCommonImageRequest = {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }

  model SegmentCommonImageResponse = {
    requestId: string(name='RequestId', description='requestId'),
    data: {
      imageURL: string(name='ImageURL', description='imageUrl'),
    }(name='Data', description='data'),
  }

  async function segmentCommonImage(request: SegmentCommonImageRequest, runtime: Common.RuntimeObject): SegmentCommonImageResponse {
    return _request('SegmentCommonImage', 'HTTPS', 'GET', request, runtime);
  }

  model SegmentCommonImageAdvanceRequest = {
    imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  }

  async function segmentCommonImageAdvance(request: SegmentCommonImageAdvanceRequest, runtime: Common.RuntimeObject): SegmentCommonImageResponse {
    // Step 0: init client
    var authConfig = new OpenPlatform.Config{
      accessKeyId = @getAccessKeyId(),
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = 'openplatform.aliyuncs.com',
      protocol = @protocol,
      regionId = @regionId,
    };
    var authClient = new OpenPlatform(authConfig);

    var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
      product = 'imageseg',
      regionId = @regionId,
    };
    var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
    // Step 1: request OSS api to upload file
    var ossConfig = new OSS.Config{
      accessKeyId = authResponse.accessKeyId,
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = Common.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
      protocol = @protocol,
      regionId = @regionId,
    };
    var ossClient = new OSS(ossConfig);

    var str = Common.readAsString(request.imageURLObject);
    var fileObj = new OSS.PostObjectRequest.header.file{
      fileName = authResponse.objectKey,
      content = str,
      contentType = '',
    };
    var ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    var uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, runtime);
    // Step 2: request final api
    var segmentCommonImagereq = new SegmentCommonImageRequest{};
    Common.convert(request, segmentCommonImagereq);
    segmentCommonImagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
    var segmentCommonImageResp = segmentCommonImage(segmentCommonImagereq, runtime);
    return segmentCommonImageResp;
  }

  model SegmentBodyRequest = {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }

  model SegmentBodyResponse = {
    requestId: string(name='RequestId', description='requestId'),
    data: {
      imageURL: string(name='ImageURL', description='imageUrl'),
    }(name='Data', description='data'),
  }

  async function segmentBody(request: SegmentBodyRequest, runtime: Common.RuntimeObject): SegmentBodyResponse {
    return _request('SegmentBody', 'HTTPS', 'GET', request, runtime);
  }

  model SegmentBodyAdvanceRequest = {
    imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  }

  async function segmentBodyAdvance(request: SegmentBodyAdvanceRequest, runtime: Common.RuntimeObject): SegmentBodyResponse {
    // Step 0: init client
    var authConfig = new OpenPlatform.Config{
      accessKeyId = @getAccessKeyId(),
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = 'openplatform.aliyuncs.com',
      protocol = @protocol,
      regionId = @regionId,
    };
    var authClient = new OpenPlatform(authConfig);

    var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
      product = 'imageseg',
      regionId = @regionId,
    };
    var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
    // Step 1: request OSS api to upload file
    var ossConfig = new OSS.Config{
      accessKeyId = authResponse.accessKeyId,
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = Common.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
      protocol = @protocol,
      regionId = @regionId,
    };
    var ossClient = new OSS(ossConfig);

    var str = Common.readAsString(request.imageURLObject);
    var fileObj = new OSS.PostObjectRequest.header.file{
      fileName = authResponse.objectKey,
      content = str,
      contentType = '',
    };
    var ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    var uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, runtime);
    // Step 2: request final api
    var segmentBodyreq = new SegmentBodyRequest{};
    Common.convert(request, segmentBodyreq);
    segmentBodyreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
    var segmentBodyResp = segmentBody(segmentBodyreq, runtime);
    return segmentBodyResp;
  }

  model SegmentCommodityRequest = {
    imageURL: string(name='ImageURL', description='imageUrl'),
  }

  model SegmentCommodityResponse = {
    requestId: string(name='RequestId', description='requestId'),
    data: {
      imageURL: string(name='ImageURL', description='imageUrl'),
    }(name='Data', description='data'),
  }

  async function segmentCommodity(request: SegmentCommodityRequest, runtime: Common.RuntimeObject): SegmentCommodityResponse {
    return _request('SegmentCommodity', 'HTTPS', 'GET', request, runtime);
  }

  model SegmentCommodityAdvanceRequest = {
    imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
  }

  async function segmentCommodityAdvance(request: SegmentCommodityAdvanceRequest, runtime: Common.RuntimeObject): SegmentCommodityResponse {
    // Step 0: init client
    var authConfig = new OpenPlatform.Config{
      accessKeyId = @getAccessKeyId(),
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = 'openplatform.aliyuncs.com',
      protocol = @protocol,
      regionId = @regionId,
    };
    var authClient = new OpenPlatform(authConfig);

    var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
      product = 'imageseg',
      regionId = @regionId,
    };
    var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
    // Step 1: request OSS api to upload file
    var ossConfig = new OSS.Config{
      accessKeyId = authResponse.accessKeyId,
      accessKeySecret = @getAccessKeySecret(),
      type = 'access_key',
      endpoint = Common.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
      protocol = @protocol,
      regionId = @regionId,
    };
    var ossClient = new OSS(ossConfig);

    var str = Common.readAsString(request.imageURLObject);
    var fileObj = new OSS.PostObjectRequest.header.file{
      fileName = authResponse.objectKey,
      content = str,
      contentType = '',
    };
    var ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    var uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, runtime);
    // Step 2: request final api
    var segmentCommodityreq = new SegmentCommodityRequest{};
    Common.convert(request, segmentCommodityreq);
    segmentCommodityreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
    var segmentCommodityResp = segmentCommodity(segmentCommodityreq, runtime);
    return segmentCommodityResp;
  }

}
