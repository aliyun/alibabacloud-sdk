/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('nbf', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AscpAppointOrderCancelledErpSpiRequest {
  reason?: string(name='reason', description='取消原因'),
  supplierId?: long(name='supplierId', description='供应商ID'),
  fulfilmentOrderCode?: string(name='fulfilmentOrderCode', description='履行单号'),
  outOrderCode?: string(name='outOrderCode', description='待预约单据编号'),
  appointOrderCode?: string(name='appointOrderCode', description='预约单号'),
  outBusinessOrderCode?: string(name='outBusinessOrderCode', description='关联业务单号'),
}

model AscpAppointOrderCancelledErpSpiResponseBody = {
  errroMsg?: string(name='errroMsg', description='错误描述，失败情况下返回'),
  success?: boolean(name='success', description='请求是否成功'),
  errorCode?: string(name='errorCode', description='错误编码，失败情况下返回'),
}

model AscpAppointOrderCancelledErpSpiResponse = {
  headers: map[string]string(name='headers'),
  body: AscpAppointOrderCancelledErpSpiResponseBody(name='body'),
}

async function ascpAppointOrderCancelledErpSpiWithOptions(request: AscpAppointOrderCancelledErpSpiRequest, runtime: Util.RuntimeOptions): AscpAppointOrderCancelledErpSpiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AscpAppointOrderCancelledErpSpi', '2021-07-06_16-58-49-384', 'HTTP', 'POST', 'AK', 'json', req, runtime);
}

async function ascpAppointOrderCancelledErpSpi(request: AscpAppointOrderCancelledErpSpiRequest): AscpAppointOrderCancelledErpSpiResponse {
  var runtime = new Util.RuntimeOptions{};
  return ascpAppointOrderCancelledErpSpiWithOptions(request, runtime);
}

model AscpAppointOrderCreatedErpSpiRequest {
  orderType?: int32(name='orderType', description='预约单类型'),
  supplierId?: long(name='supplierId', description='供应商ID'),
  entityCode?: string(name='entityCode', description='仓库编码（物理仓）'),
  relationCode?: string(name='relationCode', description='仓库编码（逻辑仓）'),
  outOrderCode?: string(name='outOrderCode', description='待预约单据编号'),
  appointOrderCode?: string(name='appointOrderCode', description='预约单号'),
  relationName?: string(name='relationName', description='仓库名称（逻辑仓）'),
  realSupplierNick?: string(name='realSupplierNick', description='供应商名称'),
  entityName?: string(name='entityName', description='仓库名称（物理仓）'),
  warehouseType?: string(name='warehouseType', description='库位类型'),
  inboundType?: string(name='inboundType', description='出入库方式'),
  items?: [ 
    {
      pcs?: int32(name='pcs', description='箱规'),
      brandName?: string(name='brandName', description='品牌名称'),
      weight?: float(name='weight', description='重量（克）'),
      box?: int32(name='box', description='总箱数'),
      scItemId?: long(name='scItemId', description='货品ID'),
      categoryName?: string(name='categoryName', description='商品类目'),
      goodsBarCode?: string(name='goodsBarCode', description='条形码'),
      volume?: float(name='volume', description='体积（立方毫米）'),
      itemId?: long(name='itemId', description='商品ID'),
      unit?: string(name='unit', description='计量单位'),
      planNum?: int32(name='planNum', description='总件数'),
      scItemName?: string(name='scItemName', description='货品名称'),
      packageModel?: string(name='packageModel', description='存储类型'),
      skuId?: long(name='skuId', description='SKUID'),
    }
  ](name='items', description='明细列表'),
  outBusinessOrderCode?: string(name='outBusinessOrderCode', description='关联业务单号'),
  memberId?: long(name='memberId', description='二级供应商编码'),
}

model AscpAppointOrderCreatedErpSpiResponseBody = {
  errroMsg?: string(name='errroMsg', description='错误描述，失败情况下返回'),
  success?: boolean(name='success', description='请求是否成功'),
  errorCode?: string(name='errorCode', description='错误编码，失败情况下返回'),
}

model AscpAppointOrderCreatedErpSpiResponse = {
  headers: map[string]string(name='headers'),
  body: AscpAppointOrderCreatedErpSpiResponseBody(name='body'),
}

async function ascpAppointOrderCreatedErpSpiWithOptions(request: AscpAppointOrderCreatedErpSpiRequest, runtime: Util.RuntimeOptions): AscpAppointOrderCreatedErpSpiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AscpAppointOrderCreatedErpSpi', '2021-07-06_16-58-49-384', 'HTTP', 'POST', 'AK', 'json', req, runtime);
}

async function ascpAppointOrderCreatedErpSpi(request: AscpAppointOrderCreatedErpSpiRequest): AscpAppointOrderCreatedErpSpiResponse {
  var runtime = new Util.RuntimeOptions{};
  return ascpAppointOrderCreatedErpSpiWithOptions(request, runtime);
}

model AscpAppointOrderDoFinishedErpSpiRequest {
  reason?: string(name='reason', description='改约原因'),
  appointWave?: int32(name='appointWave', description='预约波次（新）'),
  appointType?: string(name='appointType', description='预约类型'),
  originalAppointWave?: int32(name='originalAppointWave', description='预约波次(旧)'),
  supplierId?: long(name='supplierId', description='供应商ID'),
  fulfilmentOrderCode?: string(name='fulfilmentOrderCode', description='履行单号'),
  outOrderCode?: string(name='outOrderCode', description='待预约单据编号'),
  originalAppointDate?: string(name='originalAppointDate', description='预约日期(旧)'),
  appointDate?: string(name='appointDate', description='预约日期（新）'),
  appointOrderCode?: string(name='appointOrderCode', description='预约单号'),
  outBusinessOrderCode?: string(name='outBusinessOrderCode', description='关联业务单号'),
}

model AscpAppointOrderDoFinishedErpSpiResponseBody = {
  errroMsg?: string(name='errroMsg', description='错误描述，失败情况下返回'),
  success?: boolean(name='success', description='请求是否成功'),
  errorCode?: string(name='errorCode', description='错误编码，失败情况下返回'),
}

model AscpAppointOrderDoFinishedErpSpiResponse = {
  headers: map[string]string(name='headers'),
  body: AscpAppointOrderDoFinishedErpSpiResponseBody(name='body'),
}

async function ascpAppointOrderDoFinishedErpSpiWithOptions(request: AscpAppointOrderDoFinishedErpSpiRequest, runtime: Util.RuntimeOptions): AscpAppointOrderDoFinishedErpSpiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AscpAppointOrderDoFinishedErpSpi', '2021-07-06_16-58-49-384', 'HTTP', 'POST', 'AK', 'json', req, runtime);
}

async function ascpAppointOrderDoFinishedErpSpi(request: AscpAppointOrderDoFinishedErpSpiRequest): AscpAppointOrderDoFinishedErpSpiResponse {
  var runtime = new Util.RuntimeOptions{};
  return ascpAppointOrderDoFinishedErpSpiWithOptions(request, runtime);
}

