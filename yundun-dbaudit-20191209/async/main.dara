/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Yundun-dbaudit';
  @version = '2019-12-09';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ClearInstanceStorageRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dbaudit-cn-78v1gc****', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  storageCategory: string(name='StorageCategory', description='This parameter is required.', example='dbaudit-audit-dbaudit-cn-78v1gc****', position='Query'),
  storageSpace: string(name='StorageSpace', description='This parameter is required.', example='dbaudit-cn-78v1gc****', position='Query'),
}

model ClearInstanceStorageResponseBody = {
  instanceId?: string(name='InstanceId', example='dbaudit-cn-78v1gc****'),
  requestId?: string(name='RequestId', example='482EF142-BFA5-43FF-B4B0-84A4B0763639'),
}

model ClearInstanceStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClearInstanceStorageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ClearInstanceStorage  ClearInstanceStorageRequest
  * @return ClearInstanceStorageResponse
 */
async function clearInstanceStorage(request: ClearInstanceStorageRequest): ClearInstanceStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearInstanceStorage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAttributeRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dbaudit-cn-78v1gc****', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeInstanceAttributeResponseBody = {
  instanceAttribute?: {
    description?: string(name='Description', example='API'),
    expireTime?: long(name='ExpireTime', example='1578067200000'),
    instanceId?: string(name='InstanceId', example='dbaudit-cn-78v1gc****'),
    instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
    internetEndpoint?: string(name='InternetEndpoint', example='tsiqvqjjlq-public.dbaudit.aliyuncs.com'),
    intranetEndpoint?: string(name='IntranetEndpoint', example='tsiqvqjjlq.dbaudit.aliyuncs.com'),
    licenseCode?: string(name='LicenseCode', example='alpha.professional'),
    publicNetworkAccess?: boolean(name='PublicNetworkAccess', example='true'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    seriesCode?: string(name='SeriesCode', example='alpha'),
    startTime?: long(name='StartTime', example='1577437765000'),
    vpcId?: string(name='VpcId', example='vpc-bp1c85tzgqu1bf5b****'),
    vswitchId?: string(name='VswitchId', example='vsw-bp1kep1f0k5fnyfs****'),
    whiteList?: [ string ](name='WhiteList'),
  }(name='InstanceAttribute'),
  requestId?: string(name='RequestId', example='28382024-466D-4641-A144-40FD0DD53766'),
}

model DescribeInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstanceAttribute  DescribeInstanceAttributeRequest
  * @return DescribeInstanceAttributeResponse
 */
async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceStorageRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dbaudit-cn-78v1gc****', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeInstanceStorageResponseBody = {
  instanceStorages?: [ 
    {
      storageCapacity?: long(name='StorageCapacity', example='6047313952768'),
      storageCategory?: string(name='StorageCategory', example='dbaudit-audit-dbaudit-cn-78v1gc****'),
      storageSpace?: string(name='StorageSpace', example='dbaudit-cn-78v1gc****'),
      storageTime?: long(name='StorageTime', example='180'),
      storageUsed?: long(name='StorageUsed', example='0'),
    }
  ](name='InstanceStorages'),
  requestId?: string(name='RequestId', example='4226E2BB-EED8-4067-B31B-7F02966765B2'),
}

model DescribeInstanceStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceStorageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstanceStorage  DescribeInstanceStorageRequest
  * @return DescribeInstanceStorageResponse
 */
async function describeInstanceStorage(request: DescribeInstanceStorageRequest): DescribeInstanceStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceStorage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  getCenterInstance?: boolean(name='GetCenterInstance', position='Query'),
  instanceId?: [ string ](name='InstanceId', example='dbaudit-cn-78v1gc****', position='Query'),
  instanceStatus?: string(name='InstanceStatus', example='RUNNING', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm26ougij6****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='testapi'),
    }
  ](name='Tag', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      description?: string(name='Description'),
      expireTime?: long(name='ExpireTime', example='1578067200000'),
      instanceId?: string(name='InstanceId', example='dbaudit-cn-78v1gc****'),
      instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
      internetEndpoint?: string(name='InternetEndpoint', example='tsiqvqjjlq-public.dbaudit.aliyuncs.com'),
      intranetEndpoint?: string(name='IntranetEndpoint', example='tsiqvqjjlq.dbaudit.aliyuncs.com'),
      licenseCode?: string(name='LicenseCode', example='alpha.professional'),
      publicNetworkAccess?: boolean(name='PublicNetworkAccess', example='true'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      seriesCode?: string(name='SeriesCode', example='alpha'),
      startTime?: long(name='StartTime', example='1577437765000'),
      vpcId?: string(name='VpcId', example='vpc-bp1c85tzgqu1bf5b****'),
      vswitchId?: string(name='VswitchId', example='vsw-bp1kep1f0k5fnyfs****'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='12AA0353-F01D-43E2-A85C-9040F7A35D93'),
  totalCount?: long(name='TotalCount', example='18'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstances  DescribeInstancesRequest
  * @return DescribeInstancesResponse
 */
async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='52EcpzBpR86EEpcc.9xyfvym3cKAXsdV2SSFZnouWTRzf1', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='dbaudit-cn-78v1gc****', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='testapi'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='52EcpzBpR86EEpcc.9xyfvym3cKAXsdV2SSFZnouWTRzf1'),
  requestId?: string(name='RequestId', example='E6A08A8A-F962-4FAD-AF0C-86B393E1F9C1'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='dbaudit-cn-78v1gc****'),
      resourceType?: string(name='ResourceType', example='INSTANCE'),
      tagKey?: string(name='TagKey', example='test'),
      tagValue?: string(name='TagValue', example='testapi'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

