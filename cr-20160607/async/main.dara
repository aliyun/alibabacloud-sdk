/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cr';
  @version = '2016-06-07';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelRepoBuildRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  buildId: string(name='BuildId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model CancelRepoBuildResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelRepoBuild(request: CancelRepoBuildRequest): CancelRepoBuildResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelRepoBuild', 'POST', '/repos/{RepoNamespace}/{RepoName}/build/{BuildId}/cancel', 'none', false, 'json', request);
}

model CreateNamespaceRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateNamespace', 'PUT', '/namespace', 'none', false, 'json', request);
}

model CreateRepoRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CreateRepoResponse = {
  headers: map[string]string(name='headers'),
}

async function createRepo(request: CreateRepoRequest): CreateRepoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRepo', 'PUT', '/repos', 'none', false, 'json', request);
}

model CreateRepoBuildRuleRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateRepoBuildRuleResponse = {
  headers: map[string]string(name='headers'),
}

async function createRepoBuildRule(request: CreateRepoBuildRuleRequest): CreateRepoBuildRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRepoBuildRule', 'PUT', '/repos/{RepoNamespace}/{RepoName}/rules', 'none', false, 'json', request);
}

model CreateRepoTagSyncRequest {
  repoNamespace: string(name='repoNamespace', position='Path'),
  repoName: string(name='repoName', position='Path'),
  tag: string(name='tag', position='Path'),
  taskId: string(name='taskId', position='Path'),
}

model CreateRepoTagSyncResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRepoTagSyncResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepoTagSyncResponseBody(name='body'),
}

async function createRepoTagSync(request: CreateRepoTagSyncRequest): CreateRepoTagSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRepoTagSync', 'CONNECT', '/repos/{repoNamespace}/{repoName}/tags/{tag}/syncTask/{taskId}', 'json', false, 'json', request);
}

model CreateRepoWebhookRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateRepoWebhookResponse = {
  headers: map[string]string(name='headers'),
}

async function createRepoWebhook(request: CreateRepoWebhookRequest): CreateRepoWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRepoWebhook', 'PUT', '/repos/{RepoNamespace}/{RepoName}/webhooks', 'none', false, 'json', request);
}

model CreateUserInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CreateUserInfoResponse = {
  headers: map[string]string(name='headers'),
}

async function createUserInfo(request: CreateUserInfoRequest): CreateUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUserInfo', 'PUT', '/users', 'none', false, 'json', request);
}

model DeleteImageRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  tag: string(name='Tag', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteImage', 'DELETE', '/repos/{RepoNamespace}/{RepoName}/tags/{Tag}', 'none', false, 'json', request);
}

model DeleteNamespaceRequest {
  namespace: string(name='Namespace', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteNamespace', 'DELETE', '/namespace/{Namespace}', 'none', false, 'json', request);
}

model DeleteRepoRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteRepoResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteRepo(request: DeleteRepoRequest): DeleteRepoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepo', 'DELETE', '/repos/{RepoNamespace}/{RepoName}', 'none', false, 'json', request);
}

model DeleteRepoBuildRuleRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  buildRuleId: long(name='BuildRuleId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteRepoBuildRuleResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteRepoBuildRule(request: DeleteRepoBuildRuleRequest): DeleteRepoBuildRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepoBuildRule', 'DELETE', '/repos/{RepoNamespace}/{RepoName}/rules/{BuildRuleId}', 'none', false, 'json', request);
}

model DeleteRepoWebhookRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  webhookId: long(name='WebhookId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteRepoWebhookResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteRepoWebhook(request: DeleteRepoWebhookRequest): DeleteRepoWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepoWebhook', 'DELETE', '/repos/{RepoNamespace}/{RepoName}/webhooks/{WebhookId}', 'none', false, 'json', request);
}

model GetAuthorizationTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetAuthorizationTokenResponse = {
  headers: map[string]string(name='headers'),
}

async function getAuthorizationToken(request: GetAuthorizationTokenRequest): GetAuthorizationTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAuthorizationToken', 'GET', '/tokens', 'none', false, 'json', request);
}

model GetImageLayerRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  tag: string(name='Tag', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetImageLayerResponse = {
  headers: map[string]string(name='headers'),
}

async function getImageLayer(request: GetImageLayerRequest): GetImageLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetImageLayer', 'GET', '/repos/{RepoNamespace}/{RepoName}/tags/{Tag}/layers', 'none', false, 'json', request);
}

model GetImageManifestRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  tag: string(name='Tag', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  schemaVersion?: int32(name='SchemaVersion', position='Query'),
}

model GetImageManifestResponse = {
  headers: map[string]string(name='headers'),
}

async function getImageManifest(request: GetImageManifestRequest): GetImageManifestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetImageManifest', 'GET', '/repos/{RepoNamespace}/{RepoName}/tags/{Tag}/manifest', 'none', false, 'json', request);
}

model GetNamespaceRequest {
  namespace: string(name='Namespace', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetNamespaceResponse = {
  headers: map[string]string(name='headers'),
}

async function getNamespace(request: GetNamespaceRequest): GetNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNamespace', 'GET', '/namespace/{Namespace}', 'none', false, 'json', request);
}

model GetNamespaceListRequest {
  authorize?: string(name='Authorize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model GetNamespaceListResponse = {
  headers: map[string]string(name='headers'),
}

async function getNamespaceList(request: GetNamespaceListRequest): GetNamespaceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNamespaceList', 'GET', '/namespace', 'none', false, 'json', request);
}

model GetRegionListRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetRegionListResponse = {
  headers: map[string]string(name='headers'),
}

async function getRegionList(request: GetRegionListRequest): GetRegionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegionList', 'GET', '/regions', 'none', false, 'json', request);
}

model GetRepoRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepo(request: GetRepoRequest): GetRepoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepo', 'GET', '/repos/{RepoNamespace}/{RepoName}', 'none', false, 'json', request);
}

model GetRepoBuildListRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  page?: int32(name='Page', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoBuildListResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoBuildList(request: GetRepoBuildListRequest): GetRepoBuildListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoBuildList', 'GET', '/repos/{RepoNamespace}/{RepoName}/build', 'none', false, 'json', request);
}

model GetRepoBuildRuleListRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoBuildRuleListResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoBuildRuleList(request: GetRepoBuildRuleListRequest): GetRepoBuildRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoBuildRuleList', 'GET', '/repos/{RepoNamespace}/{RepoName}/rules', 'none', false, 'json', request);
}

model GetRepoBuildStatusRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  buildId: string(name='BuildId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoBuildStatusResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoBuildStatus(request: GetRepoBuildStatusRequest): GetRepoBuildStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoBuildStatus', 'GET', '/repos/{RepoNamespace}/{RepoName}/build/{BuildId}/status', 'none', false, 'json', request);
}

model GetRepoListRequest {
  page?: int32(name='Page', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model GetRepoListResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoList(request: GetRepoListRequest): GetRepoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoList', 'GET', '/repos', 'none', false, 'json', request);
}

model GetRepoListByNamespaceRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  page?: int32(name='Page', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model GetRepoListByNamespaceResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoListByNamespace(request: GetRepoListByNamespaceRequest): GetRepoListByNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoListByNamespace', 'GET', '/repos/{RepoNamespace}', 'none', false, 'json', request);
}

model GetRepoTagRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  tag: string(name='Tag', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoTagResponseBody = {
  digest?: string(name='digest'),
  imageCreate?: long(name='imageCreate'),
  imageId?: string(name='imageId'),
  imageSize?: long(name='imageSize'),
  imageUpdate?: long(name='imageUpdate'),
  requestId?: string(name='requestId'),
  status?: string(name='status'),
  tag?: string(name='tag'),
}

model GetRepoTagResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepoTagResponseBody(name='body'),
}

async function getRepoTag(request: GetRepoTagRequest): GetRepoTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoTag', 'GET', '/repos/{RepoNamespace}/{RepoName}/tags/{Tag}', 'json', false, 'json', request);
}

model GetRepoTagScanListRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  tag: string(name='Tag', position='Path'),
  page?: int32(name='Page', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  severity?: string(name='Severity', position='Query'),
}

model GetRepoTagScanListResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoTagScanList(request: GetRepoTagScanListRequest): GetRepoTagScanListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoTagScanList', 'GET', '/repos/{RepoNamespace}/{RepoName}/tags/{Tag}/scanResult', 'none', false, 'json', request);
}

model GetRepoTagScanStatusRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  tag: string(name='Tag', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoTagScanStatusResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoTagScanStatus(request: GetRepoTagScanStatusRequest): GetRepoTagScanStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoTagScanStatus', 'GET', '/repos/{RepoNamespace}/{RepoName}/tags/{Tag}/scanStatus', 'none', false, 'json', request);
}

model GetRepoTagScanSummaryRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  tag: string(name='Tag', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoTagScanSummaryResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoTagScanSummary(request: GetRepoTagScanSummaryRequest): GetRepoTagScanSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoTagScanSummary', 'GET', '/repos/{RepoNamespace}/{RepoName}/tags/{Tag}/scanCount', 'none', false, 'json', request);
}

model GetRepoTagsRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  page?: int32(name='Page', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoTagsResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoTags(request: GetRepoTagsRequest): GetRepoTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoTags', 'GET', '/repos/{RepoNamespace}/{RepoName}/tags', 'none', false, 'json', request);
}

model GetRepoWebhookRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRepoWebhookResponse = {
  headers: map[string]string(name='headers'),
}

async function getRepoWebhook(request: GetRepoWebhookRequest): GetRepoWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepoWebhook', 'GET', '/repos/{RepoNamespace}/{RepoName}/webhooks', 'none', false, 'json', request);
}

model StartImageScanRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  tag: string(name='Tag', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model StartImageScanResponse = {
  headers: map[string]string(name='headers'),
}

async function startImageScan(request: StartImageScanRequest): StartImageScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartImageScan', 'PUT', '/repos/{RepoNamespace}/{RepoName}/tags/{Tag}/scan', 'none', false, 'json', request);
}

model StartRepoBuildByRuleRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  buildRuleId: long(name='BuildRuleId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model StartRepoBuildByRuleResponse = {
  headers: map[string]string(name='headers'),
}

async function startRepoBuildByRule(request: StartRepoBuildByRuleRequest): StartRepoBuildByRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartRepoBuildByRule', 'PUT', '/repos/{RepoNamespace}/{RepoName}/rules/{BuildRuleId}/build', 'none', false, 'json', request);
}

model UpdateNamespaceRequest {
  namespace: string(name='Namespace', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateNamespaceResponse = {
  headers: map[string]string(name='headers'),
}

async function updateNamespace(request: UpdateNamespaceRequest): UpdateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateNamespace', 'POST', '/namespace/{Namespace}', 'none', false, 'json', request);
}

model UpdateRepoRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateRepoResponse = {
  headers: map[string]string(name='headers'),
}

async function updateRepo(request: UpdateRepoRequest): UpdateRepoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRepo', 'POST', '/repos/{RepoNamespace}/{RepoName}', 'none', false, 'json', request);
}

model UpdateRepoBuildRuleRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  buildRuleId: long(name='BuildRuleId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateRepoBuildRuleResponse = {
  headers: map[string]string(name='headers'),
}

async function updateRepoBuildRule(request: UpdateRepoBuildRuleRequest): UpdateRepoBuildRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRepoBuildRule', 'POST', '/repos/{RepoNamespace}/{RepoName}/rules/{BuildRuleId}', 'none', false, 'json', request);
}

model UpdateRepoWebhookRequest {
  repoNamespace: string(name='RepoNamespace', position='Path'),
  repoName: string(name='RepoName', position='Path'),
  webhookId: long(name='WebhookId', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateRepoWebhookResponse = {
  headers: map[string]string(name='headers'),
}

async function updateRepoWebhook(request: UpdateRepoWebhookRequest): UpdateRepoWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRepoWebhook', 'POST', '/repos/{RepoNamespace}/{RepoName}/webhooks/{WebhookId}', 'none', false, 'json', request);
}

model UpdateUserInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateUserInfoResponse = {
  headers: map[string]string(name='headers'),
}

async function updateUserInfo(request: UpdateUserInfoRequest): UpdateUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUserInfo', 'POST', '/users', 'none', false, 'json', request);
}

