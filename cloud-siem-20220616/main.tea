/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloud-siem', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BatchJobCheckRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  submitId?: string(name='SubmitId', example='xxxxx_folder_xxxxxx'),
}

model BatchJobCheckResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_logstore_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobCheckResponseBody(name='body'),
}

async function batchJobCheckWithOptions(request: BatchJobCheckRequest, runtime: Util.RuntimeOptions): BatchJobCheckResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.submitId)) {
    body['SubmitId'] = request.submitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchJobCheck',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchJobCheck(request: BatchJobCheckRequest): BatchJobCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchJobCheckWithOptions(request, runtime);
}

model BatchJobSubmitRequest {
  jsonConfig?: string(name='JsonConfig', example='{{"autoSubmit":false,"configName":"test_builder","folderConfig":{"folderId":"rd-EUx7Qp","prodConfig":[{"allLogs":false,"allRegions":false,"logConfig":[{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}],"prodCode":"rds","regions":["cn-shanghai"]},{"allLogs":true,"allRegions":true,"prodCode":"sas"}],"type":"folder"},"listenRdChange":false,"logConfigs":{"cloud_siem_rds_audit_log":{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}}}}'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
}

model BatchJobSubmitResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    configList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogstoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_cfw_flow'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc-test-logstore'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-test-project'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ConfigList'),
    submitId?: string(name='SubmitId', example='BATCH_JOB_XXXXXX'),
    taskCount?: int32(name='TaskCount', example='20'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobSubmitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobSubmitResponseBody(name='body'),
}

async function batchJobSubmitWithOptions(request: BatchJobSubmitRequest, runtime: Util.RuntimeOptions): BatchJobSubmitResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jsonConfig)) {
    body['JsonConfig'] = request.jsonConfig;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchJobSubmit',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchJobSubmit(request: BatchJobSubmitRequest): BatchJobSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchJobSubmitWithOptions(request, runtime);
}

model SendMessageRequest {
  channelType?: int32(name='ChannelType', example='0'),
  receiveUid?: long(name='ReceiveUid', example='123xxxxx'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
}

model SendMessageResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errCode?: string(name='ErrCode', example='501'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessageWithOptions(request: SendMessageRequest, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.receiveUid)) {
    body['ReceiveUid'] = request.receiveUid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

