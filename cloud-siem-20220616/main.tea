/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloud-siem', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataProductListLogMapValue = {
  logCode?: string(name='LogCode', example='cloud_siem_config_log'),
  logName?: string(name='LogName', example='audit log'),
  logNameEn?: string(name='LogNameEn', example='audit log'),
  logNameKey?: string(name='LogNameKey', example='${sas.cloudsiem.prod.cloud_siem_aegis_crack_from_beaver}'),
  status?: boolean(name='Status', example='true'),
  canOperateOrNot?: boolean(name='CanOperateOrNot', example='true'),
  topic?: string(name='Topic', example='sas_login_event'),
  extraParameters?: [ 
    {
      key?: string(name='Key', example='flag'),
      value?: string(name='Value', example='value'),
    }
  ](name='ExtraParameters'),
}

model BatchJobCheckRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  submitId?: string(name='SubmitId', example='xxxxx_folder_xxxxxx'),
}

model BatchJobCheckResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_logstore_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobCheckResponseBody(name='body'),
}

async function batchJobCheckWithOptions(request: BatchJobCheckRequest, runtime: Util.RuntimeOptions): BatchJobCheckResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.submitId)) {
    body['SubmitId'] = request.submitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchJobCheck',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchJobCheck(request: BatchJobCheckRequest): BatchJobCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchJobCheckWithOptions(request, runtime);
}

model BatchJobSubmitRequest {
  jsonConfig?: string(name='JsonConfig', example='{{"autoSubmit":false,"configName":"test_builder","folderConfig":{"folderId":"rd-EUx7Qp","prodConfig":[{"allLogs":false,"allRegions":false,"logConfig":[{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}],"prodCode":"rds","regions":["cn-shanghai"]},{"allLogs":true,"allRegions":true,"prodCode":"sas"}],"type":"folder"},"listenRdChange":false,"logConfigs":{"cloud_siem_rds_audit_log":{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}}}}'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
}

model BatchJobSubmitResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    configList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogstoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_cfw_flow'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc-test-logstore'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-test-project'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ConfigList'),
    submitId?: string(name='SubmitId', example='BATCH_JOB_XXXXXX'),
    taskCount?: int32(name='TaskCount', example='20'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobSubmitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobSubmitResponseBody(name='body'),
}

async function batchJobSubmitWithOptions(request: BatchJobSubmitRequest, runtime: Util.RuntimeOptions): BatchJobSubmitResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jsonConfig)) {
    body['JsonConfig'] = request.jsonConfig;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchJobSubmit',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchJobSubmit(request: BatchJobSubmitRequest): BatchJobSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchJobSubmitWithOptions(request, runtime);
}

model CloseDeliveryRequest {
  logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
  productCode?: string(name='ProductCode', example='sas'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CloseDeliveryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='F375A043-4F5B-55F2-A564-CC47FFC6****'),
  success?: boolean(name='Success', example='true'),
}

model CloseDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseDeliveryResponseBody(name='body'),
}

async function closeDeliveryWithOptions(request: CloseDeliveryRequest, runtime: Util.RuntimeOptions): CloseDeliveryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.logCode)) {
    body['LogCode'] = request.logCode;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloseDelivery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeDelivery(request: CloseDeliveryRequest): CloseDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDeliveryWithOptions(request, runtime);
}

model DeleteAutomateResponseConfigRequest {
  id?: long(name='Id', example='123'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteAutomateResponseConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAutomateResponseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutomateResponseConfigResponseBody(name='body'),
}

async function deleteAutomateResponseConfigWithOptions(request: DeleteAutomateResponseConfigRequest, runtime: Util.RuntimeOptions): DeleteAutomateResponseConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutomateResponseConfig',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutomateResponseConfig(request: DeleteAutomateResponseConfigRequest): DeleteAutomateResponseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutomateResponseConfigWithOptions(request, runtime);
}

model DeleteCustomizeRuleRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  ruleId?: long(name='RuleId', example='123456789'),
}

model DeleteCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: int32(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomizeRuleResponseBody(name='body'),
}

async function deleteCustomizeRuleWithOptions(request: DeleteCustomizeRuleRequest, runtime: Util.RuntimeOptions): DeleteCustomizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomizeRule',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCustomizeRule(request: DeleteCustomizeRuleRequest): DeleteCustomizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomizeRuleWithOptions(request, runtime);
}

model DeleteQuickQueryRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  searchName?: string(name='SearchName', example='display_login_ip_search'),
}

model DeleteQuickQueryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQuickQueryResponseBody(name='body'),
}

async function deleteQuickQueryWithOptions(request: DeleteQuickQueryRequest, runtime: Util.RuntimeOptions): DeleteQuickQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.searchName)) {
    body['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQuickQuery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQuickQuery(request: DeleteQuickQueryRequest): DeleteQuickQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQuickQueryWithOptions(request, runtime);
}

model DeleteWhiteRuleListRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWhiteRuleListResponseBody(name='body'),
}

async function deleteWhiteRuleListWithOptions(request: DeleteWhiteRuleListRequest, runtime: Util.RuntimeOptions): DeleteWhiteRuleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWhiteRuleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWhiteRuleList(request: DeleteWhiteRuleListRequest): DeleteWhiteRuleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWhiteRuleListWithOptions(request, runtime);
}

model DescribeAggregateFunctionRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAggregateFunctionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      function?: string(name='Function', example='count'),
      functionName?: string(name='FunctionName', example='Count'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAggregateFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAggregateFunctionResponseBody(name='body'),
}

async function describeAggregateFunctionWithOptions(request: DescribeAggregateFunctionRequest, runtime: Util.RuntimeOptions): DescribeAggregateFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAggregateFunction',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAggregateFunction(request: DescribeAggregateFunctionRequest): DescribeAggregateFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAggregateFunctionWithOptions(request, runtime);
}

model DescribeAlertSceneByEventRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAlertSceneByEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertName?: string(name='AlertName', example='login_common_ip'),
      alertNameId?: string(name='AlertNameId', example='login_common_ip'),
      alertTile?: string(name='AlertTile', example='Unusual Logon-login_common_ip'),
      alertTileId?: string(name='AlertTileId', example='Unusual Logon-login_common_ip'),
      alertType?: string(name='AlertType', example='Unusual Logon'),
      alertTypeId?: string(name='AlertTypeId', example='Unusual Logon'),
      targets?: [ 
        {
          name?: string(name='Name', example='host uuid'),
          type?: string(name='Type', example='host_uuid'),
          value?: string(name='Value', example='441862da-a539-4cc0-a00d-47395582****'),
          values?: [ string ](name='Values', example='["441862da-a539-4cc0-a00d-473955826881"]'),
        }
      ](name='Targets', example='[{"Type": "host_uuid","Value": "441862da-a539-4cc0-a00d-473955826881","Values": ["441862da-a539-4cc0-a00d-473955826881"],"Name": "${aliyun.siem.entity.host_uuid}"}]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSceneByEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSceneByEventResponseBody(name='body'),
}

async function describeAlertSceneByEventWithOptions(request: DescribeAlertSceneByEventRequest, runtime: Util.RuntimeOptions): DescribeAlertSceneByEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertSceneByEvent',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertSceneByEvent(request: DescribeAlertSceneByEventRequest): DescribeAlertSceneByEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSceneByEventWithOptions(request, runtime);
}

model DescribeAlertSourceRequest {
  endTime?: long(name='EndTime', example='1577808000000'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577808000000'),
}

model DescribeAlertSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      source?: string(name='Source', example='aliyun.siem.alert_datasource.sas'),
      sourceName?: string(name='SourceName', example='sas'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSourceResponseBody(name='body'),
}

async function describeAlertSourceWithOptions(request: DescribeAlertSourceRequest, runtime: Util.RuntimeOptions): DescribeAlertSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertSource',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertSource(request: DescribeAlertSourceRequest): DescribeAlertSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSourceWithOptions(request, runtime);
}

model DescribeAlertSourceWithEventRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAlertSourceWithEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      source?: string(name='Source', example='aliyun.siem.alert_datasource.sas'),
      sourceName?: string(name='SourceName', example='sas'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSourceWithEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSourceWithEventResponseBody(name='body'),
}

async function describeAlertSourceWithEventWithOptions(request: DescribeAlertSourceWithEventRequest, runtime: Util.RuntimeOptions): DescribeAlertSourceWithEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertSourceWithEvent',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertSourceWithEvent(request: DescribeAlertSourceWithEventRequest): DescribeAlertSourceWithEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSourceWithEventWithOptions(request, runtime);
}

model DescribeAlertTypeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAlertTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertType?: string(name='AlertType', example='WEBSHELL'),
      alertTypeMds?: string(name='AlertTypeMds', example='siem_rule_type_process_abnormal_command'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertTypeResponseBody(name='body'),
}

async function describeAlertTypeWithOptions(request: DescribeAlertTypeRequest, runtime: Util.RuntimeOptions): DescribeAlertTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertType',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertType(request: DescribeAlertTypeRequest): DescribeAlertTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertTypeWithOptions(request, runtime);
}

model DescribeAlertsRequest {
  alertTitle?: string(name='AlertTitle', example='Unusual Logon-login_common_account'),
  alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1577808000000'),
  isDefend?: string(name='IsDefend'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  source?: string(name='Source', example='sas'),
  startTime?: long(name='StartTime', example='1577808000000'),
  subUserId?: string(name='SubUserId', example='176555323***'),
}

model DescribeAlertsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsResponseBody(name='body'),
}

async function describeAlertsWithOptions(request: DescribeAlertsRequest, runtime: Util.RuntimeOptions): DescribeAlertsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTitle)) {
    body['AlertTitle'] = request.alertTitle;
  }
  if (!Util.isUnset(request.alertUuid)) {
    body['AlertUuid'] = request.alertUuid;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.isDefend)) {
    body['IsDefend'] = request.isDefend;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlerts',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlerts(request: DescribeAlertsRequest): DescribeAlertsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertsWithOptions(request, runtime);
}

model DescribeAlertsCountRequest {
  endTime?: long(name='EndTime', example='1577808000000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577808000000'),
}

model DescribeAlertsCountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    all?: long(name='All', example='75'),
    high?: long(name='High', example='25'),
    low?: long(name='Low', example='25'),
    medium?: long(name='Medium', example='25'),
    productNum?: int32(name='ProductNum', example='3'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsCountResponseBody(name='body'),
}

async function describeAlertsCountWithOptions(request: DescribeAlertsCountRequest, runtime: Util.RuntimeOptions): DescribeAlertsCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertsCount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertsCount(request: DescribeAlertsCountRequest): DescribeAlertsCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertsCountWithOptions(request, runtime);
}

model DescribeAlertsWithEntityRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  entityId?: long(name='EntityId', example='123456789'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa'),
}

model DescribeAlertsWithEntityResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsWithEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsWithEntityResponseBody(name='body'),
}

async function describeAlertsWithEntityWithOptions(request: DescribeAlertsWithEntityRequest, runtime: Util.RuntimeOptions): DescribeAlertsWithEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sophonTaskId)) {
    body['SophonTaskId'] = request.sophonTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertsWithEntity',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertsWithEntity(request: DescribeAlertsWithEntityRequest): DescribeAlertsWithEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertsWithEntityWithOptions(request, runtime);
}

model DescribeAlertsWithEventRequest {
  alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
  currentPage?: int32(name='CurrentPage', example='1'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  isDefend?: string(name='IsDefend'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  source?: string(name='Source', example='sas'),
  subUserId?: long(name='SubUserId', example='176555323***'),
}

model DescribeAlertsWithEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsWithEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsWithEventResponseBody(name='body'),
}

async function describeAlertsWithEventWithOptions(request: DescribeAlertsWithEventRequest, runtime: Util.RuntimeOptions): DescribeAlertsWithEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTitle)) {
    body['AlertTitle'] = request.alertTitle;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.isDefend)) {
    body['IsDefend'] = request.isDefend;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertsWithEvent',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertsWithEvent(request: DescribeAlertsWithEventRequest): DescribeAlertsWithEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertsWithEventWithOptions(request, runtime);
}

model DescribeAttackTimeLineRequest {
  assetName?: string(name='AssetName', example='zsw-agentless-centos****'),
  endTime?: long(name='EndTime', example='1577808000000'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577803000000'),
}

model DescribeAttackTimeLineResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertLevel?: string(name='AlertLevel', example='remind'),
      alertName?: string(name='AlertName', example='Try SNMP weak password'),
      alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
      alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
      alertSrcProd?: string(name='AlertSrcProd', example='sas'),
      alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
      alertTime?: long(name='AlertTime', example='2021-01-06 16:37:29'),
      alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
      alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
      alertType?: string(name='AlertType', example='Scan'),
      alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
      alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
      alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
      assetId?: string(name='AssetId', example='0616caeb-acb8-45e0-8520-4ee5fbe251f0'),
      assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
      assetName?: string(name='AssetName', example='zsw-agentless-centos****'),
      attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
      cloudCode?: string(name='CloudCode', example='aliyun'),
      incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
      logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAttackTimeLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAttackTimeLineResponseBody(name='body'),
}

async function describeAttackTimeLineWithOptions(request: DescribeAttackTimeLineRequest, runtime: Util.RuntimeOptions): DescribeAttackTimeLineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assetName)) {
    body['AssetName'] = request.assetName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAttackTimeLine',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAttackTimeLine(request: DescribeAttackTimeLineRequest): DescribeAttackTimeLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAttackTimeLineWithOptions(request, runtime);
}

model DescribeAutomateResponseConfigCounterRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAutomateResponseConfigCounterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    all?: long(name='All', example='20'),
    online?: long(name='Online', example='10'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigCounterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigCounterResponseBody(name='body'),
}

async function describeAutomateResponseConfigCounterWithOptions(request: DescribeAutomateResponseConfigCounterRequest, runtime: Util.RuntimeOptions): DescribeAutomateResponseConfigCounterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutomateResponseConfigCounter',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutomateResponseConfigCounter(request: DescribeAutomateResponseConfigCounterRequest): DescribeAutomateResponseConfigCounterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutomateResponseConfigCounterWithOptions(request, runtime);
}

model DescribeAutomateResponseConfigFeatureRequest {
  autoResponseType?: string(name='AutoResponseType', example='event'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAutomateResponseConfigFeatureResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      dataType?: string(name='DataType', example='varchar'),
      feature?: string(name='Feature', example='alert_desc'),
      rightValueEnums?: [ 
        {
          value?: string(name='Value', example='serious'),
          valueMds?: string(name='ValueMds', example='aliyun.siem.automate.feature.alert_level.serious'),
        }
      ](name='RightValueEnums'),
      supportOperators?: [ 
        {
          hasRightValue?: boolean(name='HasRightValue', example='false'),
          index?: int32(name='Index', example='3'),
          operator?: string(name='Operator', example='<='),
          operatorDescCn?: string(name='OperatorDescCn', example='larger than or equal to'),
          operatorDescEn?: string(name='OperatorDescEn', example='larger than or equal to'),
          operatorName?: string(name='OperatorName', example='<='),
          supportDataType?: string(name='SupportDataType', example='varchar'),
          supportTag?: [ string ](name='SupportTag', example='[AGGREGATE]'),
        }
      ](name='SupportOperators'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigFeatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigFeatureResponseBody(name='body'),
}

async function describeAutomateResponseConfigFeatureWithOptions(request: DescribeAutomateResponseConfigFeatureRequest, runtime: Util.RuntimeOptions): DescribeAutomateResponseConfigFeatureResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoResponseType)) {
    body['AutoResponseType'] = request.autoResponseType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutomateResponseConfigFeature',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutomateResponseConfigFeature(request: DescribeAutomateResponseConfigFeatureRequest): DescribeAutomateResponseConfigFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutomateResponseConfigFeatureWithOptions(request, runtime);
}

model DescribeAutomateResponseConfigPlayBooksRequest {
  autoResponseType?: string(name='AutoResponseType', example='event'),
  entityType?: string(name='EntityType', example='ip'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAutomateResponseConfigPlayBooksResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      description?: string(name='Description', example='Waf Block IP'),
      displayName?: string(name='DisplayName', example='WafBlockIP'),
      name?: string(name='Name', example='WafBlockIP'),
      paramType?: string(name='ParamType', example='template-ip'),
      uuid?: string(name='Uuid', example='system_aliyun_clb_process_book'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigPlayBooksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigPlayBooksResponseBody(name='body'),
}

async function describeAutomateResponseConfigPlayBooksWithOptions(request: DescribeAutomateResponseConfigPlayBooksRequest, runtime: Util.RuntimeOptions): DescribeAutomateResponseConfigPlayBooksResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoResponseType)) {
    body['AutoResponseType'] = request.autoResponseType;
  }
  if (!Util.isUnset(request.entityType)) {
    body['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutomateResponseConfigPlayBooks',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutomateResponseConfigPlayBooks(request: DescribeAutomateResponseConfigPlayBooksRequest): DescribeAutomateResponseConfigPlayBooksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutomateResponseConfigPlayBooksWithOptions(request, runtime);
}

model DescribeCloudSiemAssetsRequest {
  assetType?: string(name='AssetType', example='ip'),
  currentPage?: int32(name='CurrentPage', example='1'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudSiemAssetsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='1276085894174392'),
        assetId?: string(name='AssetId', example='0616caeb-acb8-45e0-8520-4ee5fbe251f0'),
        assetInfo?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AssetInfo', example='[{"KeyName": "${aliyun.siem.asset.asset_name}","Values": "zsw-agentless-ubuntu20","Key": "asset_name"}]'),
        assetName?: string(name='AssetName', example='zsw-agentless-centos****'),
        assetType?: string(name='AssetType', example='domain'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemAssetsResponseBody(name='body'),
}

async function describeCloudSiemAssetsWithOptions(request: DescribeCloudSiemAssetsRequest, runtime: Util.RuntimeOptions): DescribeCloudSiemAssetsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assetType)) {
    body['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudSiemAssets',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudSiemAssets(request: DescribeCloudSiemAssetsRequest): DescribeCloudSiemAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudSiemAssetsWithOptions(request, runtime);
}

model DescribeCloudSiemAssetsCounterRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudSiemAssetsCounterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      assetNum?: int32(name='AssetNum', example='1'),
      assetType?: string(name='AssetType', example='domain'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemAssetsCounterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemAssetsCounterResponseBody(name='body'),
}

async function describeCloudSiemAssetsCounterWithOptions(request: DescribeCloudSiemAssetsCounterRequest, runtime: Util.RuntimeOptions): DescribeCloudSiemAssetsCounterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudSiemAssetsCounter',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudSiemAssetsCounter(request: DescribeCloudSiemAssetsCounterRequest): DescribeCloudSiemAssetsCounterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudSiemAssetsCounterWithOptions(request, runtime);
}

model DescribeCloudSiemEventDetailRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudSiemEventDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertNum?: int32(name='AlertNum', example='4'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    assetNum?: int32(name='AssetNum', example='4'),
    attCkLabels?: [ string ](name='AttCkLabels', example='["T1595.002 Vulnerability Scanning"]'),
    dataSources?: [ string ](name='DataSources', example='[sas,waf]'),
    description?: string(name='Description', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
    descriptionEn?: string(name='DescriptionEn', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
    extContent?: string(name='ExtContent', example='{"event_transfer_type":"customize_rule"}'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
    incidentNameEn?: string(name='IncidentNameEn', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
    incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
    remark?: string(name='Remark', example='dealed'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
    threatScore?: float(name='ThreatScore', example='90.2'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemEventDetailResponseBody(name='body'),
}

async function describeCloudSiemEventDetailWithOptions(request: DescribeCloudSiemEventDetailRequest, runtime: Util.RuntimeOptions): DescribeCloudSiemEventDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudSiemEventDetail',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudSiemEventDetail(request: DescribeCloudSiemEventDetailRequest): DescribeCloudSiemEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudSiemEventDetailWithOptions(request, runtime);
}

model DescribeCloudSiemEventsRequest {
  assetId?: string(name='AssetId', example='6c740667-80b2-476d-8924-2e706feb****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1577808000000'),
  eventName?: string(name='EventName', example='ECS unusual log in'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  order?: string(name='Order', example='desc'),
  orderField?: string(name='OrderField', example='ThreatScore'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577808000000'),
  status?: int32(name='Status', example='0'),
  threadLevel?: [ string ](name='ThreadLevel', example='["serious","suspicious","remind"]'),
}

model DescribeCloudSiemEventsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertNum?: int32(name='AlertNum', example='4'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        assetNum?: int32(name='AssetNum', example='4'),
        attCkLabels?: [ string ](name='AttCkLabels', example='["T1595.002 Vulnerability Scanning"]'),
        dataSources?: [ string ](name='DataSources', example='[sas,waf]'),
        description?: string(name='Description', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
        descriptionEn?: string(name='DescriptionEn', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
        extContent?: string(name='ExtContent', example='{"event_transfer_type":"customize_rule"}'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentNameEn?: string(name='IncidentNameEn', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        remark?: string(name='Remark', example='dealed'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
        threatScore?: float(name='ThreatScore', example='90.2'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemEventsResponseBody(name='body'),
}

async function describeCloudSiemEventsWithOptions(request: DescribeCloudSiemEventsRequest, runtime: Util.RuntimeOptions): DescribeCloudSiemEventsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assetId)) {
    body['AssetId'] = request.assetId;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventName)) {
    body['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.order)) {
    body['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.threadLevel)) {
    body['ThreadLevel'] = request.threadLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudSiemEvents',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudSiemEvents(request: DescribeCloudSiemEventsRequest): DescribeCloudSiemEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudSiemEventsWithOptions(request, runtime);
}

model DescribeCustomizeRuleRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleId?: long(name='RuleId', example='123456789'),
}

model DescribeCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertType?: string(name='AlertType', example='WEBSHELL'),
    alertTypeMds?: string(name='AlertTypeMds', example='siem_rule_type_process_abnormal_command'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
    eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
    eventTransferType?: string(name='EventTransferType', example='allToSingle'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    id?: long(name='Id', example='123456789'),
    logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
    logSourceMds?: string(name='LogSourceMds', example='sas.cloudsiem.prod.cloud_siem_aegis_sas_alert'),
    logType?: string(name='LogType', example='ALERT_ACTIVITY'),
    logTypeMds?: string(name='LogTypeMds', example='security_event_config.event_name.webshellName_clientav'),
    queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
    ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
    ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
    ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
    ruleName?: string(name='RuleName', example='waf_scan'),
    ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
    ruleType?: string(name='RuleType', example='customize'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleResponseBody(name='body'),
}

async function describeCustomizeRuleWithOptions(request: DescribeCustomizeRuleRequest, runtime: Util.RuntimeOptions): DescribeCustomizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizeRule',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizeRule(request: DescribeCustomizeRuleRequest): DescribeCustomizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizeRuleWithOptions(request, runtime);
}

model DescribeCustomizeRuleCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCustomizeRuleCountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    highRuleNum?: int32(name='HighRuleNum', example='12'),
    inUseRuleNum?: int32(name='InUseRuleNum', example='20'),
    lowRuleNum?: int32(name='LowRuleNum', example='3'),
    mediumRuleNum?: int32(name='MediumRuleNum', example='5'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleCountResponseBody(name='body'),
}

async function describeCustomizeRuleCountWithOptions(request: DescribeCustomizeRuleCountRequest, runtime: Util.RuntimeOptions): DescribeCustomizeRuleCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizeRuleCount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizeRuleCount(request: DescribeCustomizeRuleCountRequest): DescribeCustomizeRuleCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizeRuleCountWithOptions(request, runtime);
}

model DescribeCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    id?: long(name='Id', example='123456789'),
    simulateData?: string(name='SimulateData', example='[{"key1":"value1","key2":"value2","key3":"value3","key4":"value4","key5":"value5"}]'),
    status?: int32(name='Status', example='0'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleTestResponseBody(name='body'),
}

async function describeCustomizeRuleTestWithOptions(request: DescribeCustomizeRuleTestRequest, runtime: Util.RuntimeOptions): DescribeCustomizeRuleTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizeRuleTest',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizeRuleTest(request: DescribeCustomizeRuleTestRequest): DescribeCustomizeRuleTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizeRuleTestWithOptions(request, runtime);
}

model DescribeCustomizeRuleTestHistogramRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCustomizeRuleTestHistogramResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      count?: long(name='Count', example='125'),
      from?: long(name='From', example='1599897188'),
      to?: long(name='To', example='1599997188'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleTestHistogramResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleTestHistogramResponseBody(name='body'),
}

async function describeCustomizeRuleTestHistogramWithOptions(request: DescribeCustomizeRuleTestHistogramRequest, runtime: Util.RuntimeOptions): DescribeCustomizeRuleTestHistogramResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizeRuleTestHistogram',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizeRuleTestHistogram(request: DescribeCustomizeRuleTestHistogramRequest): DescribeCustomizeRuleTestHistogramResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizeRuleTestHistogramWithOptions(request, runtime);
}

model DescribeDisposeAndPlaybookRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  entityType?: string(name='EntityType', example='ip'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDisposeAndPlaybookResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertNum?: int32(name='AlertNum', example='1'),
        dispose?: string(name='Dispose', example='192.168.1.1'),
        entityId?: long(name='EntityId', example='12345'),
        entityInfo?: map[string]any(name='EntityInfo', example='{"file_path": "c:/www/leixi.jsp","file_hash": "aa0ca926ad948cd820e0a3d9a18c09d0","host_uuid": "efed2cf7-0b77-45d9-a97b-d2cf246bcbb3","malware_type": "${aliyun.siem.sas.alert_tag.webshell}","host_name": "launch-advisor-20230531"}'),
        opcodeMap?: map[string]string(name='OpcodeMap', example='12345'),
        opcodeSet?: [ string ](name='OpcodeSet', example='[1,3]'),
        playbookList?: [ 
          {
            description?: string(name='Description', example='WafBlockIP'),
            displayName?: string(name='DisplayName', example='WafBlockIP'),
            name?: string(name='Name', example='kill_process_isolate_file'),
            opCode?: string(name='OpCode', example='7'),
            opLevel?: string(name='OpLevel', example='2'),
            taskConfig?: string(name='TaskConfig', example='{"opCode":"3"}'),
            wafPlaybook?: boolean(name='WafPlaybook', example='false'),
          }
        ](name='PlaybookList', example='[{"name":"云安全中心-云服务器安全","code":"1"}]'),
        scope?: [ any ](name='Scope', example='176618589410****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDisposeAndPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisposeAndPlaybookResponseBody(name='body'),
}

async function describeDisposeAndPlaybookWithOptions(request: DescribeDisposeAndPlaybookRequest, runtime: Util.RuntimeOptions): DescribeDisposeAndPlaybookResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.entityType)) {
    body['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDisposeAndPlaybook',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDisposeAndPlaybook(request: DescribeDisposeAndPlaybookRequest): DescribeDisposeAndPlaybookResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisposeAndPlaybookWithOptions(request, runtime);
}

model DescribeDisposeStrategyPlaybookRequest {
  endTime?: long(name='EndTime', example='1577808000000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577808000000'),
}

model DescribeDisposeStrategyPlaybookResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      playbookName?: string(name='PlaybookName', example='WafBlockIP'),
      playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDisposeStrategyPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisposeStrategyPlaybookResponseBody(name='body'),
}

async function describeDisposeStrategyPlaybookWithOptions(request: DescribeDisposeStrategyPlaybookRequest, runtime: Util.RuntimeOptions): DescribeDisposeStrategyPlaybookResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDisposeStrategyPlaybook',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDisposeStrategyPlaybook(request: DescribeDisposeStrategyPlaybookRequest): DescribeDisposeStrategyPlaybookResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisposeStrategyPlaybookWithOptions(request, runtime);
}

model DescribeEntityInfoRequest {
  entityId?: long(name='EntityId', example='12345'),
  entityIdentity?: string(name='EntityIdentity', example='test22.php'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa'),
}

model DescribeEntityInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    entityId?: long(name='EntityId', example='12345'),
    entityInfo?: map[string]any(name='EntityInfo', example='{ location: "xian", net_connect_dir: "in", malware_type: "${aliyun.siem.sas.alert_tag.login_unusual_account}" }'),
    entityType?: string(name='EntityType', example='ip'),
    tipInfo?: map[string]any(name='TipInfo', example='{
      "Ip": {
            "queryHot": "0",
            "country": "China",
            "province": "shanxi",
            "ip": "221.11.17.122",
            "asn": "4837",
            "asn_label": "CHINA169-Backbone - CHINA UNICOM China169 Backbone, CN"
      }
}'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEntityInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEntityInfoResponseBody(name='body'),
}

async function describeEntityInfoWithOptions(request: DescribeEntityInfoRequest, runtime: Util.RuntimeOptions): DescribeEntityInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityIdentity)) {
    body['EntityIdentity'] = request.entityIdentity;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sophonTaskId)) {
    body['SophonTaskId'] = request.sophonTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEntityInfo',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEntityInfo(request: DescribeEntityInfoRequest): DescribeEntityInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEntityInfoWithOptions(request, runtime);
}

model DescribeEventCountByThreatLevelRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeEventCountByThreatLevelResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    eventNum?: long(name='EventNum', example='100'),
    highLevelEventNum?: long(name='HighLevelEventNum', example='20'),
    lowLevelEventNum?: long(name='LowLevelEventNum', example='52'),
    mediumLevelEventNum?: long(name='MediumLevelEventNum', example='3'),
    undealEventNum?: long(name='UndealEventNum', example='75'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEventCountByThreatLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventCountByThreatLevelResponseBody(name='body'),
}

async function describeEventCountByThreatLevelWithOptions(request: DescribeEventCountByThreatLevelRequest, runtime: Util.RuntimeOptions): DescribeEventCountByThreatLevelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEventCountByThreatLevel',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEventCountByThreatLevel(request: DescribeEventCountByThreatLevelRequest): DescribeEventCountByThreatLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventCountByThreatLevelWithOptions(request, runtime);
}

model DescribeEventDisposeRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeEventDisposeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    eventDispose?: [ any ](name='EventDispose', example='{ playbookName: "使用安全组封禁入方向IP", sophonTaskId: "400442a5-4f98-45ed-97db-5ab117eb0b8f", … }'),
    receiverInfo?: {
      channel?: string(name='Channel', example='message'),
      gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
      gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
      id?: long(name='Id', example='123'),
      incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
      messageTitle?: string(name='MessageTitle', example='siem event dealed message'),
      receiver?: string(name='Receiver', example='138xxxxxx'),
      status?: int32(name='Status', example='1'),
    }(name='ReceiverInfo'),
    remark?: string(name='Remark', example='dealed'),
    status?: int32(name='Status', example='0'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEventDisposeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventDisposeResponseBody(name='body'),
}

async function describeEventDisposeWithOptions(request: DescribeEventDisposeRequest, runtime: Util.RuntimeOptions): DescribeEventDisposeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEventDispose',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEventDispose(request: DescribeEventDisposeRequest): DescribeEventDisposeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventDisposeWithOptions(request, runtime);
}

model DescribeJobStatusRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  submitId?: string(name='SubmitId', example='xxxxx_folder_xxxxxx'),
}

model DescribeJobStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_project_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123XXXXX'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DescribeJobStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeJobStatusResponseBody(name='body'),
}

async function describeJobStatusWithOptions(request: DescribeJobStatusRequest, runtime: Util.RuntimeOptions): DescribeJobStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.submitId)) {
    body['SubmitId'] = request.submitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeJobStatus',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeJobStatus(request: DescribeJobStatusRequest): DescribeJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeJobStatusWithOptions(request, runtime);
}

model DescribeLogFieldsRequest {
  logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
  logType?: string(name='LogType', example='cloud_siem_aegis_sas_alert'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeLogFieldsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      activityName?: string(name='ActivityName', example='HTTP_ACTIVITY'),
      fieldDesc?: string(name='FieldDesc', example='sas.cloudsiem.prod.activity_name'),
      fieldName?: string(name='FieldName', example='activity_name'),
      fieldType?: string(name='FieldType', example='varchar'),
      logCode?: string(name='LogCode', example='cloud_siem_aegis_sas_alert'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogFieldsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogFieldsResponseBody(name='body'),
}

async function describeLogFieldsWithOptions(request: DescribeLogFieldsRequest, runtime: Util.RuntimeOptions): DescribeLogFieldsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.logSource)) {
    body['LogSource'] = request.logSource;
  }
  if (!Util.isUnset(request.logType)) {
    body['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogFields',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogFields(request: DescribeLogFieldsRequest): DescribeLogFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogFieldsWithOptions(request, runtime);
}

model DescribeLogSourceRequest {
  logType?: string(name='LogType', example='HTTP_ACTIVITY'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeLogSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
      logSourceName?: string(name='LogSourceName', example='sas.cloudsiem.prod.cloud_siem_aegis_sas_alert'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogSourceResponseBody(name='body'),
}

async function describeLogSourceWithOptions(request: DescribeLogSourceRequest, runtime: Util.RuntimeOptions): DescribeLogSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.logType)) {
    body['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogSource',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogSource(request: DescribeLogSourceRequest): DescribeLogSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogSourceWithOptions(request, runtime);
}

model DescribeLogStoreRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeLogStoreResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    appendMeta?: boolean(name='AppendMeta', example='false'),
    autoSplit?: boolean(name='AutoSplit', example='false'),
    enableTracking?: boolean(name='EnableTracking', example='false'),
    logStoreName?: string(name='LogStoreName', example='cloud-siem'),
    maxSplitShard?: int32(name='MaxSplitShard', example='64'),
    shardCount?: int32(name='ShardCount', example='2'),
    ttl?: int32(name='Ttl', example='180'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Request.Forbidden'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9B9CBCEE-9225-5069-BC7F-880938A2****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogStoreResponseBody(name='body'),
}

async function describeLogStoreWithOptions(request: DescribeLogStoreRequest, runtime: Util.RuntimeOptions): DescribeLogStoreResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogStore',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogStore(request: DescribeLogStoreRequest): DescribeLogStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreWithOptions(request, runtime);
}

model DescribeLogTypeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeLogTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      logType?: string(name='LogType', example='HTTP_ACTIVITY'),
      logTypeName?: string(name='LogTypeName', example='sas.cloudsiem.prod.http_activity'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogTypeResponseBody(name='body'),
}

async function describeLogTypeWithOptions(request: DescribeLogTypeRequest, runtime: Util.RuntimeOptions): DescribeLogTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogType',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogType(request: DescribeLogTypeRequest): DescribeLogTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogTypeWithOptions(request, runtime);
}

model DescribeOperatorsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sceneType?: string(name='SceneType', example='AGGREGATE'),
}

model DescribeOperatorsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      index?: int32(name='Index', example='3'),
      operator?: string(name='Operator', example='<='),
      operatorDescCn?: string(name='OperatorDescCn', example='arger than or equal to'),
      operatorDescEn?: string(name='OperatorDescEn', example='larger than or equal to'),
      operatorName?: string(name='OperatorName', example='<='),
      supportDataType?: string(name='SupportDataType', example='varchar'),
      supportTag?: [ string ](name='SupportTag', example='[AGGREGATE]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOperatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOperatorsResponseBody(name='body'),
}

async function describeOperatorsWithOptions(request: DescribeOperatorsRequest, runtime: Util.RuntimeOptions): DescribeOperatorsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sceneType)) {
    body['SceneType'] = request.sceneType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOperators',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOperators(request: DescribeOperatorsRequest): DescribeOperatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOperatorsWithOptions(request, runtime);
}

model DescribeScopeUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeScopeUsersResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      aliUid?: long(name='AliUid', example='123456789****'),
      domains?: [ string ](name='Domains', example='[123.com, 456.com]'),
      instanceId?: string(name='InstanceId', example='waf-cn-tl123ast****'),
      userName?: string(name='UserName', example='test001'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeScopeUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScopeUsersResponseBody(name='body'),
}

async function describeScopeUsersWithOptions(request: DescribeScopeUsersRequest, runtime: Util.RuntimeOptions): DescribeScopeUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScopeUsers',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScopeUsers(request: DescribeScopeUsersRequest): DescribeScopeUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScopeUsersWithOptions(request, runtime);
}

model DescribeStorageRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeStorageResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='CCEEE128-6607-503E-AAA6-C5E57D94****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageResponseBody(name='body'),
}

async function describeStorageWithOptions(request: DescribeStorageRequest, runtime: Util.RuntimeOptions): DescribeStorageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorage',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorage(request: DescribeStorageRequest): DescribeStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageWithOptions(request, runtime);
}

model DescribeWafScopeRequest {
  entityId?: long(name='EntityId', example='20617784'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeWafScopeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      aliuid?: long(name='Aliuid', example='127608589417****'),
      domains?: [ string ](name='Domains', example='[123.com, 456.com]'),
      instanceId?: string(name='InstanceId', example='waf-cn-tl123ast****'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeWafScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWafScopeResponseBody(name='body'),
}

async function describeWafScopeWithOptions(request: DescribeWafScopeRequest, runtime: Util.RuntimeOptions): DescribeWafScopeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWafScope',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWafScope(request: DescribeWafScopeRequest): DescribeWafScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWafScopeWithOptions(request, runtime);
}

model DoQuickFieldRequest {
  from?: int32(name='From', example='1684376244'),
  index?: string(name='Index', example='alert_level'),
  page?: int32(name='Page', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  reverse?: boolean(name='Reverse', example='true'),
  size?: int32(name='Size', example='10'),
  to?: int32(name='To', example='1684378090'),
}

model DoQuickFieldResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    aggQueryd?: string(name='AggQueryd', example='""'),
    completeOrNot?: boolean(name='CompleteOrNot', example='true'),
    count?: int32(name='Count', example='10'),
    hasSQL?: boolean(name='HasSQL', example='true'),
    keys?: [ string ](name='Keys'),
    limited?: long(name='Limited', example='0'),
    logs?: [ any ](name='Logs'),
    PQuery?: string(name='PQuery', example='""'),
    processedRows?: long(name='ProcessedRows', example='1000'),
    queryMode?: int32(name='QueryMode', example='0'),
    whereQuery?: string(name='WhereQuery', example='* and alert_level : remind | with_pack_meta'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', example='true'),
}

model DoQuickFieldResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DoQuickFieldResponseBody(name='body'),
}

async function doQuickFieldWithOptions(request: DoQuickFieldRequest, runtime: Util.RuntimeOptions): DoQuickFieldResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.index)) {
    body['Index'] = request.index;
  }
  if (!Util.isUnset(request.page)) {
    body['Page'] = request.page;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reverse)) {
    body['Reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DoQuickField',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function doQuickField(request: DoQuickFieldRequest): DoQuickFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return doQuickFieldWithOptions(request, runtime);
}

model DoSelfDelegateRequest {
  aliUid?: long(name='AliUid', example='104423523217****'),
  delegateOrNot?: int32(name='DelegateOrNot', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DoSelfDelegateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9B9CBCEE-9225-5069-BC7F-880938A2****'),
  success?: boolean(name='Success', example='true'),
}

model DoSelfDelegateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DoSelfDelegateResponseBody(name='body'),
}

async function doSelfDelegateWithOptions(request: DoSelfDelegateRequest, runtime: Util.RuntimeOptions): DoSelfDelegateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliUid)) {
    body['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.delegateOrNot)) {
    body['DelegateOrNot'] = request.delegateOrNot;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DoSelfDelegate',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function doSelfDelegate(request: DoSelfDelegateRequest): DoSelfDelegateResponse {
  var runtime = new Util.RuntimeOptions{};
  return doSelfDelegateWithOptions(request, runtime);
}

model GetCapacityRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetCapacityResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    existLogStore?: boolean(name='ExistLogStore', example='true'),
    preservedCapacity?: long(name='PreservedCapacity', example='9000'),
    usedCapacity?: double(name='UsedCapacity', example='10'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Storage.Exception'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='27D27DCB-D76B-5064-8B3B-0900DEF7****'),
  success?: boolean(name='Success', example='true'),
}

model GetCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCapacityResponseBody(name='body'),
}

async function getCapacityWithOptions(request: GetCapacityRequest, runtime: Util.RuntimeOptions): GetCapacityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCapacity',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCapacity(request: GetCapacityRequest): GetCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCapacityWithOptions(request, runtime);
}

model GetHistogramsRequest {
  from?: int32(name='From', example='1409529600'),
  query?: string(name='Query', example='* and status: 401'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  to?: int32(name='To', example='1409569200'),
}

model GetHistogramsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    histograms?: [ 
      {
        completedOrNot?: boolean(name='CompletedOrNot', example='true'),
        count?: long(name='Count', example='100'),
        from?: int32(name='From', example='1409529600'),
        to?: int32(name='To', example='1409569200'),
      }
    ](name='Histograms'),
    server?: string(name='Server', example='nginx'),
    totalCount?: long(name='TotalCount', example='2'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='97A31C3A-3F9F-5866-8979-5159E3DC****'),
  success?: boolean(name='Success', example='true'),
}

model GetHistogramsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHistogramsResponseBody(name='body'),
}

async function getHistogramsWithOptions(request: GetHistogramsRequest, runtime: Util.RuntimeOptions): GetHistogramsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetHistograms',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHistograms(request: GetHistogramsRequest): GetHistogramsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHistogramsWithOptions(request, runtime);
}

model GetLogsRequest {
  from?: int32(name='From', example='1684377190'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  query?: string(name='Query', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  reverseOrNot?: boolean(name='ReverseOrNot', example='true'),
  to?: int32(name='To', example='1684378326'),
  total?: long(name='Total', example='2'),
}

model GetLogsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='20'),
      totalCount?: long(name='TotalCount', example='200'),
    }(name='PageInfo'),
    responseData?: {
      completeOrNot?: boolean(name='CompleteOrNot', example='true'),
      cost?: long(name='Cost', example='28'),
      count?: int32(name='Count', example='4'),
      hasSql?: boolean(name='HasSql', example='true'),
      keys?: [ string ](name='Keys'),
      lines?: [ any ](name='Lines'),
    }(name='ResponseData'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='93A8B186-A5F1-5B20-9BCF-5605C5E9****'),
  success?: boolean(name='Success', example='True'),
}

model GetLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogsResponseBody(name='body'),
}

async function getLogsWithOptions(request: GetLogsRequest, runtime: Util.RuntimeOptions): GetLogsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.pageIndex)) {
    body['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reverseOrNot)) {
    body['ReverseOrNot'] = request.reverseOrNot;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  if (!Util.isUnset(request.total)) {
    body['Total'] = request.total;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLogs',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLogs(request: GetLogsRequest): GetLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogsWithOptions(request, runtime);
}

model GetQuickQueryRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  searchName?: string(name='SearchName', example='display_login_ip_search'),
}

model GetQuickQueryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='27D27DCB-D76B-5064-8B3B-0900DEF7****'),
  success?: boolean(name='Success', example='true'),
}

model GetQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQuickQueryResponseBody(name='body'),
}

async function getQuickQueryWithOptions(request: GetQuickQueryRequest, runtime: Util.RuntimeOptions): GetQuickQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.searchName)) {
    body['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQuickQuery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQuickQuery(request: GetQuickQueryRequest): GetQuickQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQuickQueryWithOptions(request, runtime);
}

model GetStorageRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetStorageResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    canOperate?: boolean(name='CanOperate', example='false'),
    displayRegion?: boolean(name='DisplayRegion', example='false'),
    region?: string(name='Region', example='cn-shanghai'),
    ttl?: int32(name='Ttl', example='180'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='97A31C3A-3F9F-5866-8979-5159E3DC****'),
  success?: boolean(name='Success', example='true'),
}

model GetStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStorageResponseBody(name='body'),
}

async function getStorageWithOptions(request: GetStorageRequest, runtime: Util.RuntimeOptions): GetStorageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStorage',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStorage(request: GetStorageRequest): GetStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStorageWithOptions(request, runtime);
}

model ListAutomateResponseConfigsRequest {
  actionType?: string(name='ActionType', example='doPlaybook'),
  autoResponseType?: string(name='AutoResponseType', example='event'),
  currentPage?: int32(name='CurrentPage', example='1'),
  id?: long(name='Id', example='123'),
  pageSize?: int32(name='PageSize', example='10'),
  playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_aegis_kill_quara_book'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleName?: string(name='RuleName', example='cfw kill quara book'),
  status?: int32(name='Status', example='0'),
  subUserId?: long(name='SubUserId', example='17108579417****'),
}

model ListAutomateResponseConfigsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        actionConfig?: string(name='ActionConfig', example='[
      {
            "actionType": "doPlaybook",
            "playbookName": "WafBlockIP",
            "playbookUuid": "bdad6220-6584-41b2-9704-fc6584568758"
      }
]'),
        actionType?: string(name='ActionType', example='doPlaybook,changeEventStatus'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        autoResponseType?: string(name='AutoResponseType', example='event'),
        executionCondition?: string(name='ExecutionCondition', example='[{"left":{"value":"alert_name"},"operator":"containsString","right":{"value":"webshell_online"}}]'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        ruleName?: string(name='RuleName', example='cfw kill quara book'),
        status?: int32(name='Status', example='0'),
        subUserId?: long(name='SubUserId', example='17108579417****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListAutomateResponseConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAutomateResponseConfigsResponseBody(name='body'),
}

async function listAutomateResponseConfigsWithOptions(request: ListAutomateResponseConfigsRequest, runtime: Util.RuntimeOptions): ListAutomateResponseConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.actionType)) {
    body['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.autoResponseType)) {
    body['AutoResponseType'] = request.autoResponseType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.playbookUuid)) {
    body['PlaybookUuid'] = request.playbookUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAutomateResponseConfigs',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAutomateResponseConfigs(request: ListAutomateResponseConfigsRequest): ListAutomateResponseConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAutomateResponseConfigsWithOptions(request, runtime);
}

model ListCloudSiemCustomizeRulesRequest {
  alertType?: string(name='AlertType', example='scan'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1577808000000'),
  id?: string(name='Id', example='10223'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleName?: string(name='RuleName', example='waf_scan'),
  ruleType?: string(name='RuleType', example='customize'),
  startTime?: long(name='StartTime', example='1577808000000'),
  status?: int32(name='Status', example='0'),
  threatLevel?: [ string ](name='ThreatLevel', example='["serious","suspicious","remind"]'),
}

model ListCloudSiemCustomizeRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertType?: string(name='AlertType', example='WEBSHELL'),
        alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
        eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
        eventTransferType?: string(name='EventTransferType', example='allToSingle'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
        logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
        logType?: string(name='LogType', example='ALERT_ACTIVITY'),
        logTypeMds?: string(name='LogTypeMds', example='${sas.cloudsiem.prod.alert_activity}'),
        queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
        ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
        ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
        ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
        ruleName?: string(name='RuleName', example='waf_scan'),
        ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
        ruleType?: string(name='RuleType', example='customize'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCloudSiemCustomizeRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudSiemCustomizeRulesResponseBody(name='body'),
}

async function listCloudSiemCustomizeRulesWithOptions(request: ListCloudSiemCustomizeRulesRequest, runtime: Util.RuntimeOptions): ListCloudSiemCustomizeRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.threatLevel)) {
    body['ThreatLevel'] = request.threatLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCloudSiemCustomizeRules',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCloudSiemCustomizeRules(request: ListCloudSiemCustomizeRulesRequest): ListCloudSiemCustomizeRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCloudSiemCustomizeRulesWithOptions(request, runtime);
}

model ListCloudSiemPredefinedRulesRequest {
  alertType?: string(name='AlertType', example='scan'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1577808000000'),
  id?: string(name='Id', example='10223'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleName?: string(name='RuleName', example='waf_scan'),
  ruleType?: string(name='RuleType', example='customize'),
  startTime?: long(name='StartTime', example='1577808000000'),
  status?: int32(name='Status', example='0'),
  threatLevel?: [ string ](name='ThreatLevel', example='["serious","suspicious","remind"]'),
}

model ListCloudSiemPredefinedRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertType?: string(name='AlertType', example='WEBSHELL'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        ruleDescMds?: string(name='RuleDescMds', example='${siem_rule_description_siem_cfw-attack-count-level-up_cfw-attack}'),
        ruleName?: string(name='RuleName', example='siem_base64-command-exec_aegis-proc'),
        ruleNameMds?: string(name='RuleNameMds', example='${siem_rule_name_siem_cfw-attack-count-level-up_cfw-attack}'),
        source?: string(name='Source', example='cloud_siem_aegis_proc'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCloudSiemPredefinedRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudSiemPredefinedRulesResponseBody(name='body'),
}

async function listCloudSiemPredefinedRulesWithOptions(request: ListCloudSiemPredefinedRulesRequest, runtime: Util.RuntimeOptions): ListCloudSiemPredefinedRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.threatLevel)) {
    body['ThreatLevel'] = request.threatLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCloudSiemPredefinedRules',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCloudSiemPredefinedRules(request: ListCloudSiemPredefinedRulesRequest): ListCloudSiemPredefinedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCloudSiemPredefinedRulesWithOptions(request, runtime);
}

model ListCustomizeRuleTestResultRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  id?: long(name='Id', example='123456789'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListCustomizeRuleTestResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The account you logged in this time is not in the legal account category defined by you. Please confirm the legality of the login behavior。'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "1652956297921019";"log_uuid_count": "99";"attack_ip": "218.92.0.97"}'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        eventName?: string(name='EventName', example='waf_scan'),
        eventType?: string(name='EventType', example='WEBSHELL'),
        level?: string(name='Level', example='remind'),
        logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logType?: string(name='LogType', example='ALERT_ACTIVITY'),
        mainUserId?: string(name='MainUserId', example='127608589417****'),
        onlineStatus?: string(name='OnlineStatus', example='test'),
        subUserId?: string(name='SubUserId', example='176555323***'),
        uuid?: string(name='Uuid', example='sas_71e24437d2797ce8fc59692905a4****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizeRuleTestResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomizeRuleTestResultResponseBody(name='body'),
}

async function listCustomizeRuleTestResultWithOptions(request: ListCustomizeRuleTestResultRequest, runtime: Util.RuntimeOptions): ListCustomizeRuleTestResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomizeRuleTestResult',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCustomizeRuleTestResult(request: ListCustomizeRuleTestResultRequest): ListCustomizeRuleTestResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCustomizeRuleTestResultWithOptions(request, runtime);
}

model ListDeliveryRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListDeliveryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    dashboardUrl?: string(name='DashboardUrl', example='https://sls4service.console.aliyun.com/lognext/project/aliyun-cloudsiem-data-127608589417****-cn-shanghai
/dashboard/cloud-siem?isShare=true&hideTopbar=true&hideSidebar=true&ignoreTabLocalStorage=true'),
    displaySwitchOrNot?: boolean(name='DisplaySwitchOrNot', example='true'),
    logStoreName?: string(name='LogStoreName', example='cloud-siem'),
    productList?: [ 
      {
        logList?: [ 
          {
            canOperateOrNot?: boolean(name='CanOperateOrNot', example='true'),
            extraParameters?: [ 
              {
                key?: string(name='Key', example='flag'),
                value?: string(name='Value', example='value'),
              }
            ](name='ExtraParameters'),
            logCode?: string(name='LogCode', example='cloud_siem_config_log'),
            logName?: string(name='LogName', example='audit log'),
            logNameEn?: string(name='LogNameEn', example='audit log'),
            logNameKey?: string(name='LogNameKey', example='${sas.cloudsiem.prod.cloud_siem_aegis_crack_from_beaver}'),
            status?: boolean(name='Status', example='true'),
            topic?: string(name='Topic', example='sas_login_event'),
          }
        ](name='LogList'),
        logMap?: map[string][ DataProductListLogMapValue         ](name='LogMap'),
        productCode?: string(name='ProductCode', example='sas'),
        productName?: string(name='ProductName', example='Security Center'),
      }
    ](name='ProductList'),
    projectName?: string(name='ProjectName', example='aliyun-cloudsiem-data-127608589417****-cn-shanghai'),
    searchUrl?: string(name='SearchUrl', example='https://sls4service.console.aliyun.com/lognext/project/aliyun-cloudsiem-data-127608589417****-cn-shanghai
/logsearch/cloud-siem?isShare=true&hideTopbar=true&hideSidebar=true&ignoreTabLocalStorage=true'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', example='true'),
}

model ListDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeliveryResponseBody(name='body'),
}

async function listDeliveryWithOptions(request: ListDeliveryRequest, runtime: Util.RuntimeOptions): ListDeliveryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDelivery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDelivery(request: ListDeliveryRequest): ListDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeliveryWithOptions(request, runtime);
}

model ListDisposeStrategyRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  effectiveStatus?: int32(name='EffectiveStatus', example='0'),
  endTime?: long(name='EndTime', example='1577808000000'),
  entityIdentity?: string(name='EntityIdentity', example='test22.php'),
  entityType?: string(name='EntityType', example='ip'),
  order?: string(name='Order', example='desc'),
  orderField?: string(name='OrderField', example='GmtModified'),
  pageSize?: int32(name='PageSize', example='10'),
  playbookName?: string(name='PlaybookName', example='WafBlockIP'),
  playbookTypes?: string(name='PlaybookTypes', example='system'),
  playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sophonTaskId?: string(name='SophonTaskId', example='a50a49b7-6044-4593-ab15-2b46567caadd'),
  startTime?: long(name='StartTime', example='1577808000000'),
}

model ListDisposeStrategyResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        effectiveStatus?: int32(name='EffectiveStatus', example='0'),
        entity?: [ any ](name='Entity', example='[{"ip":"1.1.1.1"}]'),
        entityId?: long(name='EntityId', example='123456789'),
        entityType?: string(name='EntityType', example='ip'),
        errorMessage?: string(name='ErrorMessage', example='DisposalEntity failed which description is Aegis Quarantine File , return_info failed which description is Check Aegis Process Result , [ERROR DETAIL] *******.php:file not found'),
        finishTime?: string(name='FinishTime', example='2021-08-10 21:34:07'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        playbookName?: string(name='PlaybookName', example='WafBlockIP'),
        playbookType?: string(name='PlaybookType', example='system'),
        playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
        scope?: [ any ](name='Scope', example='[{ aliUid: 1766185894104675 }]'),
        sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa'),
        status?: int32(name='Status', example='10'),
        subAliuid?: long(name='SubAliuid', example='176555323***'),
        taskParam?: string(name='TaskParam', example='{
      "file": {
            "op_code": "2",
            "file_path": "/root/alert0913/a886.jsp",
            "entity_type": "file",
            "entity_name": "a886.jsp",
            "file_name": "a886.jsp",
            "file_owner": "USER:,GROUP:",
            "hash_value": "5def10c9a4287d0920d86b42420b20b0",
            "op_level": "2",
            "entity_id": "/root/alert0913/a886.jsp",
            "host_uuid": {
                  "entity_type": "host",
                  "entity_name": "N/A",
                  "is_comprised": "1",
                  "os_type": "linux",
                  "entity_id": "5f58ef67-8803-4314-8d67-c87dc92b****",
                  "host_uuid": "5f58ef67-8803-4314-8d67-c87dc92b****",
                  "host_name": "N/A"
            },
            "malware_type": "${aliyun.siem.sas.alert_tag.webshell}"
      },
      "_sys_siem": {
            "cloudCode": "aliyun",
            "alertId": "89416745494****"
      },
      "scope": [
            {
                  "aliUid": 1766185894104****
            }
      ]
}'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListDisposeStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDisposeStrategyResponseBody(name='body'),
}

async function listDisposeStrategyWithOptions(request: ListDisposeStrategyRequest, runtime: Util.RuntimeOptions): ListDisposeStrategyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.effectiveStatus)) {
    body['EffectiveStatus'] = request.effectiveStatus;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.entityIdentity)) {
    body['EntityIdentity'] = request.entityIdentity;
  }
  if (!Util.isUnset(request.entityType)) {
    body['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.order)) {
    body['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.playbookName)) {
    body['PlaybookName'] = request.playbookName;
  }
  if (!Util.isUnset(request.playbookTypes)) {
    body['PlaybookTypes'] = request.playbookTypes;
  }
  if (!Util.isUnset(request.playbookUuid)) {
    body['PlaybookUuid'] = request.playbookUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sophonTaskId)) {
    body['SophonTaskId'] = request.sophonTaskId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDisposeStrategy',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDisposeStrategy(request: ListDisposeStrategyRequest): ListDisposeStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDisposeStrategyWithOptions(request, runtime);
}

model ListOperationRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListOperationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    adminOrNot?: boolean(name='AdminOrNot', example='true'),
    operationList?: [ string ](name='OperationList'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='CCEEE128-6607-503E-AAA6-C5E57D94****'),
  success?: boolean(name='Success', example='true'),
}

model ListOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOperationResponseBody(name='body'),
}

async function listOperationWithOptions(request: ListOperationRequest, runtime: Util.RuntimeOptions): ListOperationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListOperation',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOperation(request: ListOperationRequest): ListOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOperationWithOptions(request, runtime);
}

model ListQuickQueryRequest {
  offset?: int32(name='Offset', example='0'),
  pageSize?: int32(name='PageSize', example='50'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListQuickQueryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    count?: int32(name='Count', example='10'),
    quickQueryList?: [ 
      {
        displayName?: string(name='DisplayName', example='no_1_created_search_used_for_dispaly_ip'),
        query?: string(name='Query', example='* and SamplerAddress:\\"172.18.1.1\\" and OutIf:\\"105\\"'),
        searchName?: string(name='SearchName', example='data_analysis'),
      }
    ](name='QuickQueryList'),
    total?: int32(name='Total', example='101'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Storage.Exception'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F375A043-4F5B-55F2-A564-CC47FFC6****'),
  success?: boolean(name='Success', example='true'),
}

model ListQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuickQueryResponseBody(name='body'),
}

async function listQuickQueryWithOptions(request: ListQuickQueryRequest, runtime: Util.RuntimeOptions): ListQuickQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQuickQuery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQuickQuery(request: ListQuickQueryRequest): ListQuickQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQuickQueryWithOptions(request, runtime);
}

model OpenDeliveryRequest {
  logCode?: string(name='LogCode', example='cloud_siem_cfw_flow'),
  productCode?: string(name='ProductCode', example='cfw'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model OpenDeliveryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='15FD134E-D69B-51E8-B052-73F97BD8****'),
  success?: boolean(name='Success', example='true'),
}

model OpenDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenDeliveryResponseBody(name='body'),
}

async function openDeliveryWithOptions(request: OpenDeliveryRequest, runtime: Util.RuntimeOptions): OpenDeliveryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.logCode)) {
    body['LogCode'] = request.logCode;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OpenDelivery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openDelivery(request: OpenDeliveryRequest): OpenDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return openDeliveryWithOptions(request, runtime);
}

model PostAutomateResponseConfigRequest {
  actionConfig?: string(name='ActionConfig', example='[
      {
            "actionType": "doPlaybook",
            "playbookName": "WafBlockIP",
            "playbookUuid": "bdad6220-6584-41b2-9704-fc6584568758"
      }
]'),
  actionType?: string(name='ActionType', example='doPlaybook,changeEventStatus'),
  autoResponseType?: string(name='AutoResponseType', example='event'),
  executionCondition?: string(name='ExecutionCondition', example='[{"left":{"value":"alert_name"},"operator":"containsString","right":{"value":"webshell_online"}}]'),
  id?: long(name='Id', example='123'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleName?: string(name='RuleName', example='cfw kill quara book'),
  subUserId?: long(name='SubUserId', example='17108579417****'),
}

model PostAutomateResponseConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostAutomateResponseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostAutomateResponseConfigResponseBody(name='body'),
}

async function postAutomateResponseConfigWithOptions(request: PostAutomateResponseConfigRequest, runtime: Util.RuntimeOptions): PostAutomateResponseConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.actionConfig)) {
    body['ActionConfig'] = request.actionConfig;
  }
  if (!Util.isUnset(request.actionType)) {
    body['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.autoResponseType)) {
    body['AutoResponseType'] = request.autoResponseType;
  }
  if (!Util.isUnset(request.executionCondition)) {
    body['ExecutionCondition'] = request.executionCondition;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostAutomateResponseConfig',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postAutomateResponseConfig(request: PostAutomateResponseConfigRequest): PostAutomateResponseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return postAutomateResponseConfigWithOptions(request, runtime);
}

model PostCustomizeRuleRequest {
  alertType?: string(name='AlertType', example='WEBSHELL'),
  alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}'),
  eventTransferExt?: string(name='EventTransferExt', example='{"time":"1","unit":"MINUTE"}'),
  eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
  eventTransferType?: string(name='EventTransferType', example='allToSingle'),
  id?: long(name='Id', example='123456789'),
  logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
  logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
  logType?: string(name='LogType', example='ALERT_ACTIVITY'),
  logTypeMds?: string(name='LogTypeMds', example='${security_event_config.event_name.webshellName_clientav}'),
  queryCycle?: string(name='QueryCycle', example='{"time":"1","unit":"HOUR"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleCondition?: string(name='RuleCondition', example='[[{"not":false,"left":"alert_name","operator":"=","right":"WEBSHELL"}]]'),
  ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
  ruleGroup?: string(name='RuleGroup', example='["asset_id"]'),
  ruleName?: string(name='RuleName', example='waf_scan'),
  ruleThreshold?: string(name='RuleThreshold', example='{"aggregateFunction":"count","aggregateFunctionName":"count","field":"activity_name","operator":"&lt;=","value":1}'),
  threatLevel?: string(name='ThreatLevel', example='remind'),
}

model PostCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertType?: string(name='AlertType', example='WEBSHELL'),
    alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
    eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
    eventTransferType?: string(name='EventTransferType', example='allToSingle'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    id?: long(name='Id', example='123456789'),
    logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
    logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
    logType?: string(name='LogType', example='ALERT_ACTIVITY'),
    logTypeMds?: string(name='LogTypeMds', example='${security_event_config.event_name.webshellName_clientav}'),
    queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
    ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
    ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
    ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
    ruleName?: string(name='RuleName', example='waf_scan'),
    ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
    ruleType?: string(name='RuleType', example='customize'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostCustomizeRuleResponseBody(name='body'),
}

async function postCustomizeRuleWithOptions(request: PostCustomizeRuleRequest, runtime: Util.RuntimeOptions): PostCustomizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.alertTypeMds)) {
    body['AlertTypeMds'] = request.alertTypeMds;
  }
  if (!Util.isUnset(request.eventTransferExt)) {
    body['EventTransferExt'] = request.eventTransferExt;
  }
  if (!Util.isUnset(request.eventTransferSwitch)) {
    body['EventTransferSwitch'] = request.eventTransferSwitch;
  }
  if (!Util.isUnset(request.eventTransferType)) {
    body['EventTransferType'] = request.eventTransferType;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.logSource)) {
    body['LogSource'] = request.logSource;
  }
  if (!Util.isUnset(request.logSourceMds)) {
    body['LogSourceMds'] = request.logSourceMds;
  }
  if (!Util.isUnset(request.logType)) {
    body['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.logTypeMds)) {
    body['LogTypeMds'] = request.logTypeMds;
  }
  if (!Util.isUnset(request.queryCycle)) {
    body['QueryCycle'] = request.queryCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleCondition)) {
    body['RuleCondition'] = request.ruleCondition;
  }
  if (!Util.isUnset(request.ruleDesc)) {
    body['RuleDesc'] = request.ruleDesc;
  }
  if (!Util.isUnset(request.ruleGroup)) {
    body['RuleGroup'] = request.ruleGroup;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleThreshold)) {
    body['RuleThreshold'] = request.ruleThreshold;
  }
  if (!Util.isUnset(request.threatLevel)) {
    body['ThreatLevel'] = request.threatLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostCustomizeRule',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postCustomizeRule(request: PostCustomizeRuleRequest): PostCustomizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return postCustomizeRuleWithOptions(request, runtime);
}

model PostCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  simulatedData?: string(name='SimulatedData', example='[{"key1":"value1","key2":"value2","key3":"value3","key4":"value4","key5":"value5"}]'),
  testType?: string(name='TestType', example='simulate'),
}

model PostCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostCustomizeRuleTestResponseBody(name='body'),
}

async function postCustomizeRuleTestWithOptions(request: PostCustomizeRuleTestRequest, runtime: Util.RuntimeOptions): PostCustomizeRuleTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.simulatedData)) {
    body['SimulatedData'] = request.simulatedData;
  }
  if (!Util.isUnset(request.testType)) {
    body['TestType'] = request.testType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostCustomizeRuleTest',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postCustomizeRuleTest(request: PostCustomizeRuleTestRequest): PostCustomizeRuleTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return postCustomizeRuleTestWithOptions(request, runtime);
}

model PostEventDisposeAndWhiteruleListRequest {
  eventDispose?: string(name='EventDispose', example='[
      {
            "playbookName": "WafBlockIP",
            "entityId": "104466118",
            "scope": [
                  "176618589410****"
            ],
            "startTime": 1604168946281,
            "endTime": 1614168946281
      },
      {
            "playbookName": "WafBlockIP",
            "entityId": "104466118",
            "scope": [
                  {
                        "instanceId": "waf-cn-n6w1oy1****",
                        "domains": [
                              "lmfip.wafqax.***"
                        ]
                  }
            ],
            "startTime": 1604168946281,
            "endTime": 1614168946281
      }
]'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  receiverInfo?: string(name='ReceiverInfo', example='{
      "messageTitle": "test",
      "receiver": "xiaowang",
      "channel": "message"
}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remark?: string(name='Remark', example='dealed'),
  status?: int32(name='Status', example='0'),
}

model PostEventDisposeAndWhiteruleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostEventDisposeAndWhiteruleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostEventDisposeAndWhiteruleListResponseBody(name='body'),
}

async function postEventDisposeAndWhiteruleListWithOptions(request: PostEventDisposeAndWhiteruleListRequest, runtime: Util.RuntimeOptions): PostEventDisposeAndWhiteruleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventDispose)) {
    body['EventDispose'] = request.eventDispose;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.receiverInfo)) {
    body['ReceiverInfo'] = request.receiverInfo;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostEventDisposeAndWhiteruleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postEventDisposeAndWhiteruleList(request: PostEventDisposeAndWhiteruleListRequest): PostEventDisposeAndWhiteruleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return postEventDisposeAndWhiteruleListWithOptions(request, runtime);
}

model PostEventWhiteruleListRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  whiteruleList?: string(name='WhiteruleList', example='[
      {
            "alertName": "webshell",
            "alertNameId": "webshell",
            "alertType": "command",
            "alertTypeId": "command",
            "expression": {
                  "status": 1,
                  "conditions": [
                        {
                              "isNot": false,
                              "left": {
                                    "value": "file_path"
                              },
                              "operator": "gt",
                              "right": {
                                    "value": "cp"
                              }
                        }
                  ]
            }
      }
]'),
}

model PostEventWhiteruleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostEventWhiteruleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostEventWhiteruleListResponseBody(name='body'),
}

async function postEventWhiteruleListWithOptions(request: PostEventWhiteruleListRequest, runtime: Util.RuntimeOptions): PostEventWhiteruleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.whiteruleList)) {
    body['WhiteruleList'] = request.whiteruleList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostEventWhiteruleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postEventWhiteruleList(request: PostEventWhiteruleListRequest): PostEventWhiteruleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return postEventWhiteruleListWithOptions(request, runtime);
}

model PostFinishCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model PostFinishCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostFinishCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostFinishCustomizeRuleTestResponseBody(name='body'),
}

async function postFinishCustomizeRuleTestWithOptions(request: PostFinishCustomizeRuleTestRequest, runtime: Util.RuntimeOptions): PostFinishCustomizeRuleTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostFinishCustomizeRuleTest',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postFinishCustomizeRuleTest(request: PostFinishCustomizeRuleTestRequest): PostFinishCustomizeRuleTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return postFinishCustomizeRuleTestWithOptions(request, runtime);
}

model PostRuleStatusChangeRequest {
  ids?: string(name='Ids', example='[123,345]'),
  inUse?: boolean(name='InUse', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleType?: string(name='RuleType', example='customize'),
}

model PostRuleStatusChangeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostRuleStatusChangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostRuleStatusChangeResponseBody(name='body'),
}

async function postRuleStatusChangeWithOptions(request: PostRuleStatusChangeRequest, runtime: Util.RuntimeOptions): PostRuleStatusChangeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ids)) {
    body['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.inUse)) {
    body['InUse'] = request.inUse;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostRuleStatusChange',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postRuleStatusChange(request: PostRuleStatusChangeRequest): PostRuleStatusChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return postRuleStatusChangeWithOptions(request, runtime);
}

model RestoreCapacityRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RestoreCapacityResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Request.Forbidden'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', example='true'),
}

model RestoreCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestoreCapacityResponseBody(name='body'),
}

async function restoreCapacityWithOptions(request: RestoreCapacityRequest, runtime: Util.RuntimeOptions): RestoreCapacityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestoreCapacity',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restoreCapacity(request: RestoreCapacityRequest): RestoreCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreCapacityWithOptions(request, runtime);
}

model SaveQuickQueryRequest {
  displayName?: string(name='DisplayName', example='no_1_created_search_used_for_dispaly_ip'),
  query?: string(name='Query', example='* and dst_ip : "121.43.234.***"'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model SaveQuickQueryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', example='true'),
}

model SaveQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveQuickQueryResponseBody(name='body'),
}

async function saveQuickQueryWithOptions(request: SaveQuickQueryRequest, runtime: Util.RuntimeOptions): SaveQuickQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveQuickQuery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveQuickQuery(request: SaveQuickQueryRequest): SaveQuickQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveQuickQueryWithOptions(request, runtime);
}

model SetStorageRequest {
  region?: string(name='Region', example='cn-shanghai'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ttl?: int32(name='Ttl', example='180'),
}

model SetStorageResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Siem.Storage.Exception'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', example='true'),
}

model SetStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetStorageResponseBody(name='body'),
}

async function setStorageWithOptions(request: SetStorageRequest, runtime: Util.RuntimeOptions): SetStorageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetStorage',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setStorage(request: SetStorageRequest): SetStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return setStorageWithOptions(request, runtime);
}

model ShowQuickAnalysisRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ShowQuickAnalysisResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    indexList?: [ string ](name='IndexList'),
  }(name='Data'),
  dyCode?: string(name='DyCode', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', example='Request.Forbidden'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='2A4FBD89-C29D-5973-B882-CB2D23F6****'),
  success?: boolean(name='Success', example='true'),
}

model ShowQuickAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShowQuickAnalysisResponseBody(name='body'),
}

async function showQuickAnalysisWithOptions(request: ShowQuickAnalysisRequest, runtime: Util.RuntimeOptions): ShowQuickAnalysisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ShowQuickAnalysis',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function showQuickAnalysis(request: ShowQuickAnalysisRequest): ShowQuickAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return showQuickAnalysisWithOptions(request, runtime);
}

model UpdateAutomateResponseConfigStatusRequest {
  ids?: string(name='Ids', example='[123,345]'),
  inUse?: boolean(name='InUse', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdateAutomateResponseConfigStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAutomateResponseConfigStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutomateResponseConfigStatusResponseBody(name='body'),
}

async function updateAutomateResponseConfigStatusWithOptions(request: UpdateAutomateResponseConfigStatusRequest, runtime: Util.RuntimeOptions): UpdateAutomateResponseConfigStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ids)) {
    body['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.inUse)) {
    body['InUse'] = request.inUse;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAutomateResponseConfigStatus',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAutomateResponseConfigStatus(request: UpdateAutomateResponseConfigStatusRequest): UpdateAutomateResponseConfigStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAutomateResponseConfigStatusWithOptions(request, runtime);
}

model UpdateWhiteRuleListRequest {
  expression?: string(name='Expression', example='[
      {
            "alertName": "webshell",
            "alertNameId": "webshell",
            "alertType": "command",
            "alertTypeId": "command",
            "expression": {
                  "status": 1,
                  "conditions": [
                        {
                              "isNot": false,
                              "left": {
                                    "value": "file_path"
                              },
                              "operator": "gt",
                              "right": {
                                    "value": "cp"
                              }
                        }
                  ]
            }
      }
]'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  whiteRuleId?: long(name='WhiteRuleId', example='123456789'),
}

model UpdateWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWhiteRuleListResponseBody(name='body'),
}

async function updateWhiteRuleListWithOptions(request: UpdateWhiteRuleListRequest, runtime: Util.RuntimeOptions): UpdateWhiteRuleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.expression)) {
    body['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.whiteRuleId)) {
    body['WhiteRuleId'] = request.whiteRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWhiteRuleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWhiteRuleList(request: UpdateWhiteRuleListRequest): UpdateWhiteRuleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWhiteRuleListWithOptions(request, runtime);
}

