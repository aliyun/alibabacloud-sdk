/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloud-siem', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataProductListLogMapValue = {
  logCode?: string(name='LogCode', description='The code of the log.', example='cloud_siem_config_log'),
  logName?: string(name='LogName', description='This parameter is deprecated.', example='audit log'),
  logNameEn?: string(name='LogNameEn', description='This parameter is deprecated.', example='audit log'),
  logNameKey?: string(name='LogNameKey', description='The language code of the log that is used to indicate the language in which the log is displayed.', example='${sas.cloudsiem.prod.cloud_siem_aegis_crack_from_beaver}'),
  status?: boolean(name='Status', description='The status of the log delivery. Valid values:

*   true: The logs are being delivered.
*   false: The log delivery feature is disabled.', example='true'),
  canOperateOrNot?: boolean(name='CanOperateOrNot', description='Indicates whether the log delivery feature can be enabled or disabled. The feature can be enabled or disabled only by the administrator of the threat analysis feature. Valid values:

*   true
*   false', example='true'),
  topic?: string(name='Topic', description='The topic of the log in the Logstore. The value is an index field in the Logstore that can be used to distinguish different logs.', example='sas_login_event'),
  extraParameters?: [ 
    {
      key?: string(name='Key', description='The ID of the extended parameter.', example='flag'),
      value?: string(name='Value', description='The value of the extended parameter.', example='value'),
    }
  ](name='ExtraParameters', description='The extended parameter.'),
}

model AddDataSourceRequest {
  accountId?: string(name='AccountId', example='123xxxxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceInstanceName?: string(name='DataSourceInstanceName', example='XX北京kafka'),
  dataSourceInstanceParams?: string(name='DataSourceInstanceParams', example='[{"paraCode":"region_code","paraValue":"ap-guangzhou"}]'),
  dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='XX云云防火墙上海实例'),
  dataSourceType?: string(name='DataSourceType', example='obs'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AddDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDataSourceResponseBody(name='body'),
}

async function addDataSourceWithOptions(request: AddDataSourceRequest, runtime: Util.RuntimeOptions): AddDataSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceInstanceName)) {
    body['DataSourceInstanceName'] = request.dataSourceInstanceName;
  }
  if (!Util.isUnset(request.dataSourceInstanceParams)) {
    body['DataSourceInstanceParams'] = request.dataSourceInstanceParams;
  }
  if (!Util.isUnset(request.dataSourceInstanceRemark)) {
    body['DataSourceInstanceRemark'] = request.dataSourceInstanceRemark;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddDataSource',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDataSource(request: AddDataSourceRequest): AddDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDataSourceWithOptions(request, runtime);
}

model AddDataSourceLogRequest {
  accountId?: string(name='AccountId', example='123xxxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  dataSourceInstanceLogs?: string(name='DataSourceInstanceLogs', example='[{"LogCode":"cloud_siem_qcloud_waf_alert_log","LogParas":"[{\\"ParaCode\\":\\"api_name\\",\\"ParaValue\\":\\"GetAttackDownloadRecords\\"}]"}]'),
  logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AddDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDataSourceLogResponseBody(name='body'),
}

async function addDataSourceLogWithOptions(request: AddDataSourceLogRequest, runtime: Util.RuntimeOptions): AddDataSourceLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceInstanceId)) {
    body['DataSourceInstanceId'] = request.dataSourceInstanceId;
  }
  if (!Util.isUnset(request.dataSourceInstanceLogs)) {
    body['DataSourceInstanceLogs'] = request.dataSourceInstanceLogs;
  }
  if (!Util.isUnset(request.logCode)) {
    body['LogCode'] = request.logCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddDataSourceLog',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDataSourceLog(request: AddDataSourceLogRequest): AddDataSourceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDataSourceLogWithOptions(request, runtime);
}

model AddUserRequest {
  addedUserId?: long(name='AddedUserId', example='123XXXXXXXX。'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AddUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserResponseBody(name='body'),
}

async function addUserWithOptions(request: AddUserRequest, runtime: Util.RuntimeOptions): AddUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.addedUserId)) {
    body['AddedUserId'] = request.addedUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddUser',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUser(request: AddUserRequest): AddUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserWithOptions(request, runtime);
}

model AddUserSourceLogConfigRequest {
  deleted?: int32(name='Deleted', example='0'),
  disPlayLine?: string(name='DisPlayLine', example='cn-shanghai.siem-project.siem-logstore'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
  sourceLogInfo?: string(name='SourceLogInfo', example='{"project":"wafnew-project-1335759343513432-cn-hangzhou","logStore":"wafnew-logstore","regionCode":"cn-hangzhou","prodCode":"waf"}'),
  sourceProdCode?: string(name='SourceProdCode', example='sas'),
  subUserId?: long(name='SubUserId', example='123XXXXXX'),
}

model AddUserSourceLogConfigResponseBody = {
  data?: {
    diplayLine?: string(name='DiplayLine', example='cn-shanghai.siem-project.siem-logstore'),
    displayed?: boolean(name='Displayed', example='0'),
    imported?: boolean(name='Imported', example='0'),
    mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
    sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
    sourceProdCode?: string(name='SourceProdCode', example='sas'),
    subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
    subUserName?: string(name='SubUserName', example='sas_account_xxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddUserSourceLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserSourceLogConfigResponseBody(name='body'),
}

async function addUserSourceLogConfigWithOptions(request: AddUserSourceLogConfigRequest, runtime: Util.RuntimeOptions): AddUserSourceLogConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deleted)) {
    body['Deleted'] = request.deleted;
  }
  if (!Util.isUnset(request.disPlayLine)) {
    body['DisPlayLine'] = request.disPlayLine;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceLogCode)) {
    body['SourceLogCode'] = request.sourceLogCode;
  }
  if (!Util.isUnset(request.sourceLogInfo)) {
    body['SourceLogInfo'] = request.sourceLogInfo;
  }
  if (!Util.isUnset(request.sourceProdCode)) {
    body['SourceProdCode'] = request.sourceProdCode;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddUserSourceLogConfig',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUserSourceLogConfig(request: AddUserSourceLogConfigRequest): AddUserSourceLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserSourceLogConfigWithOptions(request, runtime);
}

model BatchJobCheckRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  submitId?: string(name='SubmitId', example='xxxxx_folder_xxxxxx'),
}

model BatchJobCheckResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_logstore_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobCheckResponseBody(name='body'),
}

async function batchJobCheckWithOptions(request: BatchJobCheckRequest, runtime: Util.RuntimeOptions): BatchJobCheckResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.submitId)) {
    body['SubmitId'] = request.submitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchJobCheck',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchJobCheck(request: BatchJobCheckRequest): BatchJobCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchJobCheckWithOptions(request, runtime);
}

model BatchJobSubmitRequest {
  jsonConfig?: string(name='JsonConfig', example='{{"autoSubmit":false,"configName":"test_builder","folderConfig":{"folderId":"rd-EUx7Qp","prodConfig":[{"allLogs":false,"allRegions":false,"logConfig":[{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}],"prodCode":"rds","regions":["cn-shanghai"]},{"allLogs":true,"allRegions":true,"prodCode":"sas"}],"type":"folder"},"listenRdChange":false,"logConfigs":{"cloud_siem_rds_audit_log":{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}}}}'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
}

model BatchJobSubmitResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    configList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogstoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_cfw_flow'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc-test-logstore'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-test-project'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ConfigList'),
    submitId?: string(name='SubmitId', example='BATCH_JOB_XXXXXX'),
    taskCount?: int32(name='TaskCount', example='20'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobSubmitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobSubmitResponseBody(name='body'),
}

async function batchJobSubmitWithOptions(request: BatchJobSubmitRequest, runtime: Util.RuntimeOptions): BatchJobSubmitResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jsonConfig)) {
    body['JsonConfig'] = request.jsonConfig;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchJobSubmit',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchJobSubmit(request: BatchJobSubmitRequest): BatchJobSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchJobSubmitWithOptions(request, runtime);
}

model CloseDeliveryRequest {
  logCode?: string(name='LogCode', description='The log code of the cloud service, such as the code of the process log for Security Center. You can obtain the log code from the response of the ListDelivery operation.', example='cloud_siem_aegis_proc'),
  productCode?: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='sas'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model CloseDeliveryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the threat analysis feature was disabled. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='F375A043-4F5B-55F2-A564-CC47FFC6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CloseDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseDeliveryResponseBody(name='body'),
}

async function closeDeliveryWithOptions(request: CloseDeliveryRequest, runtime: Util.RuntimeOptions): CloseDeliveryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.logCode)) {
    body['LogCode'] = request.logCode;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloseDelivery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeDelivery(request: CloseDeliveryRequest): CloseDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDeliveryWithOptions(request, runtime);
}

model DeleteAutomateResponseConfigRequest {
  id?: long(name='Id', example='123'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteAutomateResponseConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAutomateResponseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutomateResponseConfigResponseBody(name='body'),
}

async function deleteAutomateResponseConfigWithOptions(request: DeleteAutomateResponseConfigRequest, runtime: Util.RuntimeOptions): DeleteAutomateResponseConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutomateResponseConfig',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutomateResponseConfig(request: DeleteAutomateResponseConfigRequest): DeleteAutomateResponseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutomateResponseConfigWithOptions(request, runtime);
}

model DeleteBindAccountRequest {
  accessId?: string(name='AccessId', example='ABCXXXXXXXX'),
  accountId?: string(name='AccountId', example='123xxxxxxx'),
  bindId?: long(name='BindId', example='10'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteBindAccountResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBindAccountResponseBody(name='body'),
}

async function deleteBindAccountWithOptions(request: DeleteBindAccountRequest, runtime: Util.RuntimeOptions): DeleteBindAccountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessId)) {
    body['AccessId'] = request.accessId;
  }
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.bindId)) {
    body['BindId'] = request.bindId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBindAccount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBindAccount(request: DeleteBindAccountRequest): DeleteBindAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBindAccountWithOptions(request, runtime);
}

model DeleteCustomizeRuleRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  ruleId?: long(name='RuleId', example='123456789'),
}

model DeleteCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: int32(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomizeRuleResponseBody(name='body'),
}

async function deleteCustomizeRuleWithOptions(request: DeleteCustomizeRuleRequest, runtime: Util.RuntimeOptions): DeleteCustomizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomizeRule',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCustomizeRule(request: DeleteCustomizeRuleRequest): DeleteCustomizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomizeRuleWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  accountId?: string(name='AccountId', example='123xxxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceInstanceId)) {
    body['DataSourceInstanceId'] = request.dataSourceInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteDataSourceLogRequest {
  accountId?: string(name='AccountId', example='123xxxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  logInstanceId?: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceLogResponseBody(name='body'),
}

async function deleteDataSourceLogWithOptions(request: DeleteDataSourceLogRequest, runtime: Util.RuntimeOptions): DeleteDataSourceLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceInstanceId)) {
    body['DataSourceInstanceId'] = request.dataSourceInstanceId;
  }
  if (!Util.isUnset(request.logInstanceId)) {
    body['LogInstanceId'] = request.logInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSourceLog',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataSourceLog(request: DeleteDataSourceLogRequest): DeleteDataSourceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceLogWithOptions(request, runtime);
}

model DeleteQuickQueryRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
  searchName?: string(name='SearchName', description='The name of the saved search.', example='display_login_ip_search'),
}

model DeleteQuickQueryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the saved search is deleted. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQuickQueryResponseBody(name='body'),
}

async function deleteQuickQueryWithOptions(request: DeleteQuickQueryRequest, runtime: Util.RuntimeOptions): DeleteQuickQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.searchName)) {
    body['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQuickQuery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQuickQuery(request: DeleteQuickQueryRequest): DeleteQuickQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQuickQueryWithOptions(request, runtime);
}

model DeleteUserRequest {
  addedUserId?: long(name='AddedUserId', example='123XXXXXXXX'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.addedUserId)) {
    body['AddedUserId'] = request.addedUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model DeleteWhiteRuleListRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWhiteRuleListResponseBody(name='body'),
}

async function deleteWhiteRuleListWithOptions(request: DeleteWhiteRuleListRequest, runtime: Util.RuntimeOptions): DeleteWhiteRuleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWhiteRuleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWhiteRuleList(request: DeleteWhiteRuleListRequest): DeleteWhiteRuleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWhiteRuleListWithOptions(request, runtime);
}

model DescribeAggregateFunctionRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAggregateFunctionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      function?: string(name='Function', example='count'),
      functionName?: string(name='FunctionName', example='Count'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAggregateFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAggregateFunctionResponseBody(name='body'),
}

async function describeAggregateFunctionWithOptions(request: DescribeAggregateFunctionRequest, runtime: Util.RuntimeOptions): DescribeAggregateFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAggregateFunction',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAggregateFunction(request: DescribeAggregateFunctionRequest): DescribeAggregateFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAggregateFunctionWithOptions(request, runtime);
}

model DescribeAlertSceneRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAlertSceneResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertName?: string(name='AlertName', example='login_common_ip'),
      alertNameId?: string(name='AlertNameId', example='login_common_ip'),
      alertTile?: string(name='AlertTile', example='unusual login-login_common_ip'),
      alertTileId?: string(name='AlertTileId', example='unusual login-login_common_ip'),
      alertType?: string(name='AlertType', example='unusual login'),
      alertTypeId?: string(name='AlertTypeId', example='unusual login'),
      targets?: [ 
        {
          name?: string(name='Name', example='HOST UUID'),
          type?: string(name='Type', example='host_uuid'),
          value?: string(name='Value', example='441862da-a539-4cc0-a00d-47395582****'),
          values?: [ string ](name='Values', example='["441862da-a539-4cc0-a00d-473955826881"]'),
        }
      ](name='Targets', example='[{"Type": "host_uuid","Value": "441862da-a539-4cc0-a00d-473955826881","Values": ["441862da-a539-4cc0-a00d-473955826881"],"Name": "${aliyun.siem.entity.host_uuid}"}]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSceneResponseBody(name='body'),
}

async function describeAlertSceneWithOptions(request: DescribeAlertSceneRequest, runtime: Util.RuntimeOptions): DescribeAlertSceneResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertScene',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertScene(request: DescribeAlertSceneRequest): DescribeAlertSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSceneWithOptions(request, runtime);
}

model DescribeAlertSceneByEventRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAlertSceneByEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertName?: string(name='AlertName', example='login_common_ip'),
      alertNameId?: string(name='AlertNameId', example='login_common_ip'),
      alertTile?: string(name='AlertTile', example='Unusual Logon-login_common_ip'),
      alertTileId?: string(name='AlertTileId', example='Unusual Logon-login_common_ip'),
      alertType?: string(name='AlertType', example='Unusual Logon'),
      alertTypeId?: string(name='AlertTypeId', example='Unusual Logon'),
      targets?: [ 
        {
          name?: string(name='Name', example='host uuid'),
          type?: string(name='Type', example='host_uuid'),
          value?: string(name='Value', example='441862da-a539-4cc0-a00d-47395582****'),
          values?: [ string ](name='Values', example='["441862da-a539-4cc0-a00d-473955826881"]'),
        }
      ](name='Targets', example='[{"Type": "host_uuid","Value": "441862da-a539-4cc0-a00d-473955826881","Values": ["441862da-a539-4cc0-a00d-473955826881"],"Name": "${aliyun.siem.entity.host_uuid}"}]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSceneByEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSceneByEventResponseBody(name='body'),
}

async function describeAlertSceneByEventWithOptions(request: DescribeAlertSceneByEventRequest, runtime: Util.RuntimeOptions): DescribeAlertSceneByEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertSceneByEvent',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertSceneByEvent(request: DescribeAlertSceneByEventRequest): DescribeAlertSceneByEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSceneByEventWithOptions(request, runtime);
}

model DescribeAlertSourceRequest {
  endTime?: long(name='EndTime', example='1577808000000'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577808000000'),
}

model DescribeAlertSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      source?: string(name='Source', example='aliyun.siem.alert_datasource.sas'),
      sourceName?: string(name='SourceName', example='sas'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSourceResponseBody(name='body'),
}

async function describeAlertSourceWithOptions(request: DescribeAlertSourceRequest, runtime: Util.RuntimeOptions): DescribeAlertSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertSource',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertSource(request: DescribeAlertSourceRequest): DescribeAlertSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSourceWithOptions(request, runtime);
}

model DescribeAlertSourceWithEventRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAlertSourceWithEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      source?: string(name='Source', example='aliyun.siem.alert_datasource.sas'),
      sourceName?: string(name='SourceName', example='sas'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSourceWithEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSourceWithEventResponseBody(name='body'),
}

async function describeAlertSourceWithEventWithOptions(request: DescribeAlertSourceWithEventRequest, runtime: Util.RuntimeOptions): DescribeAlertSourceWithEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertSourceWithEvent',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertSourceWithEvent(request: DescribeAlertSourceWithEventRequest): DescribeAlertSourceWithEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSourceWithEventWithOptions(request, runtime);
}

model DescribeAlertTypeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAlertTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertType?: string(name='AlertType', example='WEBSHELL'),
      alertTypeMds?: string(name='AlertTypeMds', example='siem_rule_type_process_abnormal_command'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertTypeResponseBody(name='body'),
}

async function describeAlertTypeWithOptions(request: DescribeAlertTypeRequest, runtime: Util.RuntimeOptions): DescribeAlertTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertType',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertType(request: DescribeAlertTypeRequest): DescribeAlertTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertTypeWithOptions(request, runtime);
}

model DescribeAlertsRequest {
  alertTitle?: string(name='AlertTitle', example='Unusual Logon-login_common_account'),
  alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1577808000000'),
  isDefend?: string(name='IsDefend'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  source?: string(name='Source', example='sas'),
  startTime?: long(name='StartTime', example='1577808000000'),
  subUserId?: string(name='SubUserId', example='176555323***'),
}

model DescribeAlertsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsResponseBody(name='body'),
}

async function describeAlertsWithOptions(request: DescribeAlertsRequest, runtime: Util.RuntimeOptions): DescribeAlertsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTitle)) {
    body['AlertTitle'] = request.alertTitle;
  }
  if (!Util.isUnset(request.alertUuid)) {
    body['AlertUuid'] = request.alertUuid;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.isDefend)) {
    body['IsDefend'] = request.isDefend;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlerts',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlerts(request: DescribeAlertsRequest): DescribeAlertsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertsWithOptions(request, runtime);
}

model DescribeAlertsCountRequest {
  endTime?: long(name='EndTime', example='1577808000000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577808000000'),
}

model DescribeAlertsCountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    all?: long(name='All', example='75'),
    high?: long(name='High', example='25'),
    low?: long(name='Low', example='25'),
    medium?: long(name='Medium', example='25'),
    productNum?: int32(name='ProductNum', example='3'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsCountResponseBody(name='body'),
}

async function describeAlertsCountWithOptions(request: DescribeAlertsCountRequest, runtime: Util.RuntimeOptions): DescribeAlertsCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertsCount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertsCount(request: DescribeAlertsCountRequest): DescribeAlertsCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertsCountWithOptions(request, runtime);
}

model DescribeAlertsWithEntityRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  entityId?: long(name='EntityId', example='123456789'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa'),
}

model DescribeAlertsWithEntityResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsWithEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsWithEntityResponseBody(name='body'),
}

async function describeAlertsWithEntityWithOptions(request: DescribeAlertsWithEntityRequest, runtime: Util.RuntimeOptions): DescribeAlertsWithEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sophonTaskId)) {
    body['SophonTaskId'] = request.sophonTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertsWithEntity',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertsWithEntity(request: DescribeAlertsWithEntityRequest): DescribeAlertsWithEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertsWithEntityWithOptions(request, runtime);
}

model DescribeAlertsWithEventRequest {
  alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
  currentPage?: int32(name='CurrentPage', example='1'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  isDefend?: string(name='IsDefend'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  source?: string(name='Source', example='sas'),
  subUserId?: long(name='SubUserId', example='176555323***'),
}

model DescribeAlertsWithEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsWithEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsWithEventResponseBody(name='body'),
}

async function describeAlertsWithEventWithOptions(request: DescribeAlertsWithEventRequest, runtime: Util.RuntimeOptions): DescribeAlertsWithEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTitle)) {
    body['AlertTitle'] = request.alertTitle;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.isDefend)) {
    body['IsDefend'] = request.isDefend;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertsWithEvent',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertsWithEvent(request: DescribeAlertsWithEventRequest): DescribeAlertsWithEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertsWithEventWithOptions(request, runtime);
}

model DescribeAttackTimeLineRequest {
  assetName?: string(name='AssetName', example='zsw-agentless-centos****'),
  endTime?: long(name='EndTime', example='1577808000000'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577803000000'),
}

model DescribeAttackTimeLineResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertLevel?: string(name='AlertLevel', example='remind'),
      alertName?: string(name='AlertName', example='Try SNMP weak password'),
      alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
      alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
      alertSrcProd?: string(name='AlertSrcProd', example='sas'),
      alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
      alertTime?: long(name='AlertTime', example='2021-01-06 16:37:29'),
      alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
      alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
      alertType?: string(name='AlertType', example='Scan'),
      alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
      alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
      alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
      assetId?: string(name='AssetId', example='0616caeb-acb8-45e0-8520-4ee5fbe251f0'),
      assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
      assetName?: string(name='AssetName', example='zsw-agentless-centos****'),
      attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
      cloudCode?: string(name='CloudCode', example='aliyun'),
      incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
      logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAttackTimeLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAttackTimeLineResponseBody(name='body'),
}

async function describeAttackTimeLineWithOptions(request: DescribeAttackTimeLineRequest, runtime: Util.RuntimeOptions): DescribeAttackTimeLineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assetName)) {
    body['AssetName'] = request.assetName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAttackTimeLine',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAttackTimeLine(request: DescribeAttackTimeLineRequest): DescribeAttackTimeLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAttackTimeLineWithOptions(request, runtime);
}

model DescribeAuthRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAuthResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='4F539347-7D9A-51EA-8ABF-5D5507045C5C'),
}

model DescribeAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuthResponseBody(name='body'),
}

async function describeAuthWithOptions(request: DescribeAuthRequest, runtime: Util.RuntimeOptions): DescribeAuthResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuth',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAuth(request: DescribeAuthRequest): DescribeAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthWithOptions(request, runtime);
}

model DescribeAutomateResponseConfigCounterRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAutomateResponseConfigCounterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    all?: long(name='All', example='20'),
    online?: long(name='Online', example='10'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigCounterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigCounterResponseBody(name='body'),
}

async function describeAutomateResponseConfigCounterWithOptions(request: DescribeAutomateResponseConfigCounterRequest, runtime: Util.RuntimeOptions): DescribeAutomateResponseConfigCounterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutomateResponseConfigCounter',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutomateResponseConfigCounter(request: DescribeAutomateResponseConfigCounterRequest): DescribeAutomateResponseConfigCounterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutomateResponseConfigCounterWithOptions(request, runtime);
}

model DescribeAutomateResponseConfigFeatureRequest {
  autoResponseType?: string(name='AutoResponseType', example='event'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAutomateResponseConfigFeatureResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      dataType?: string(name='DataType', example='varchar'),
      feature?: string(name='Feature', example='alert_desc'),
      rightValueEnums?: [ 
        {
          value?: string(name='Value', example='serious'),
          valueMds?: string(name='ValueMds', example='aliyun.siem.automate.feature.alert_level.serious'),
        }
      ](name='RightValueEnums'),
      supportOperators?: [ 
        {
          hasRightValue?: boolean(name='HasRightValue', example='false'),
          index?: int32(name='Index', example='3'),
          operator?: string(name='Operator', example='<='),
          operatorDescCn?: string(name='OperatorDescCn', example='larger than or equal to'),
          operatorDescEn?: string(name='OperatorDescEn', example='larger than or equal to'),
          operatorName?: string(name='OperatorName', example='<='),
          supportDataType?: string(name='SupportDataType', example='varchar'),
          supportTag?: [ string ](name='SupportTag', example='[AGGREGATE]'),
        }
      ](name='SupportOperators'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigFeatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigFeatureResponseBody(name='body'),
}

async function describeAutomateResponseConfigFeatureWithOptions(request: DescribeAutomateResponseConfigFeatureRequest, runtime: Util.RuntimeOptions): DescribeAutomateResponseConfigFeatureResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoResponseType)) {
    body['AutoResponseType'] = request.autoResponseType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutomateResponseConfigFeature',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutomateResponseConfigFeature(request: DescribeAutomateResponseConfigFeatureRequest): DescribeAutomateResponseConfigFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutomateResponseConfigFeatureWithOptions(request, runtime);
}

model DescribeAutomateResponseConfigPlayBooksRequest {
  autoResponseType?: string(name='AutoResponseType', example='event'),
  entityType?: string(name='EntityType', example='ip'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAutomateResponseConfigPlayBooksResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      description?: string(name='Description', example='Waf Block IP'),
      displayName?: string(name='DisplayName', example='WafBlockIP'),
      name?: string(name='Name', example='WafBlockIP'),
      paramType?: string(name='ParamType', example='template-ip'),
      uuid?: string(name='Uuid', example='system_aliyun_clb_process_book'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigPlayBooksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigPlayBooksResponseBody(name='body'),
}

async function describeAutomateResponseConfigPlayBooksWithOptions(request: DescribeAutomateResponseConfigPlayBooksRequest, runtime: Util.RuntimeOptions): DescribeAutomateResponseConfigPlayBooksResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoResponseType)) {
    body['AutoResponseType'] = request.autoResponseType;
  }
  if (!Util.isUnset(request.entityType)) {
    body['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutomateResponseConfigPlayBooks',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutomateResponseConfigPlayBooks(request: DescribeAutomateResponseConfigPlayBooksRequest): DescribeAutomateResponseConfigPlayBooksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutomateResponseConfigPlayBooksWithOptions(request, runtime);
}

model DescribeCloudSiemAssetsRequest {
  assetType?: string(name='AssetType', example='ip'),
  currentPage?: int32(name='CurrentPage', example='1'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudSiemAssetsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='1276085894174392'),
        assetId?: string(name='AssetId', example='0616caeb-acb8-45e0-8520-4ee5fbe251f0'),
        assetInfo?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AssetInfo', example='[{"KeyName": "${aliyun.siem.asset.asset_name}","Values": "zsw-agentless-ubuntu20","Key": "asset_name"}]'),
        assetName?: string(name='AssetName', example='zsw-agentless-centos****'),
        assetType?: string(name='AssetType', example='domain'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemAssetsResponseBody(name='body'),
}

async function describeCloudSiemAssetsWithOptions(request: DescribeCloudSiemAssetsRequest, runtime: Util.RuntimeOptions): DescribeCloudSiemAssetsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assetType)) {
    body['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudSiemAssets',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudSiemAssets(request: DescribeCloudSiemAssetsRequest): DescribeCloudSiemAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudSiemAssetsWithOptions(request, runtime);
}

model DescribeCloudSiemAssetsCounterRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudSiemAssetsCounterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      assetNum?: int32(name='AssetNum', example='1'),
      assetType?: string(name='AssetType', example='domain'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemAssetsCounterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemAssetsCounterResponseBody(name='body'),
}

async function describeCloudSiemAssetsCounterWithOptions(request: DescribeCloudSiemAssetsCounterRequest, runtime: Util.RuntimeOptions): DescribeCloudSiemAssetsCounterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudSiemAssetsCounter',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudSiemAssetsCounter(request: DescribeCloudSiemAssetsCounterRequest): DescribeCloudSiemAssetsCounterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudSiemAssetsCounterWithOptions(request, runtime);
}

model DescribeCloudSiemEventDetailRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudSiemEventDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertNum?: int32(name='AlertNum', example='4'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    assetNum?: int32(name='AssetNum', example='4'),
    attCkLabels?: [ string ](name='AttCkLabels', example='["T1595.002 Vulnerability Scanning"]'),
    dataSources?: [ string ](name='DataSources', example='[sas,waf]'),
    description?: string(name='Description', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
    descriptionEn?: string(name='DescriptionEn', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
    extContent?: string(name='ExtContent', example='{"event_transfer_type":"customize_rule"}'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
    incidentNameEn?: string(name='IncidentNameEn', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
    incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
    remark?: string(name='Remark', example='dealed'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
    threatScore?: float(name='ThreatScore', example='90.2'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemEventDetailResponseBody(name='body'),
}

async function describeCloudSiemEventDetailWithOptions(request: DescribeCloudSiemEventDetailRequest, runtime: Util.RuntimeOptions): DescribeCloudSiemEventDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudSiemEventDetail',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudSiemEventDetail(request: DescribeCloudSiemEventDetailRequest): DescribeCloudSiemEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudSiemEventDetailWithOptions(request, runtime);
}

model DescribeCloudSiemEventsRequest {
  assetId?: string(name='AssetId', example='6c740667-80b2-476d-8924-2e706feb****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1577808000000'),
  eventName?: string(name='EventName', example='ECS unusual log in'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  order?: string(name='Order', example='desc'),
  orderField?: string(name='OrderField', example='ThreatScore'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577808000000'),
  status?: int32(name='Status', example='0'),
  threadLevel?: [ string ](name='ThreadLevel', example='["serious","suspicious","remind"]'),
}

model DescribeCloudSiemEventsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertNum?: int32(name='AlertNum', example='4'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        assetNum?: int32(name='AssetNum', example='4'),
        attCkLabels?: [ string ](name='AttCkLabels', example='["T1595.002 Vulnerability Scanning"]'),
        dataSources?: [ string ](name='DataSources', example='[sas,waf]'),
        description?: string(name='Description', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
        descriptionEn?: string(name='DescriptionEn', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
        extContent?: string(name='ExtContent', example='{"event_transfer_type":"customize_rule"}'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentNameEn?: string(name='IncidentNameEn', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        remark?: string(name='Remark', example='dealed'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
        threatScore?: float(name='ThreatScore', example='90.2'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemEventsResponseBody(name='body'),
}

async function describeCloudSiemEventsWithOptions(request: DescribeCloudSiemEventsRequest, runtime: Util.RuntimeOptions): DescribeCloudSiemEventsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assetId)) {
    body['AssetId'] = request.assetId;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventName)) {
    body['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.order)) {
    body['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.threadLevel)) {
    body['ThreadLevel'] = request.threadLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudSiemEvents',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudSiemEvents(request: DescribeCloudSiemEventsRequest): DescribeCloudSiemEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudSiemEventsWithOptions(request, runtime);
}

model DescribeCsImportedProdStatusByUserRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sourceLogProd?: string(name='SourceLogProd', example='sas'),
  userId?: long(name='UserId', example='123XXXXXX'),
}

model DescribeCsImportedProdStatusByUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeCsImportedProdStatusByUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCsImportedProdStatusByUserResponseBody(name='body'),
}

async function describeCsImportedProdStatusByUserWithOptions(request: DescribeCsImportedProdStatusByUserRequest, runtime: Util.RuntimeOptions): DescribeCsImportedProdStatusByUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceLogProd)) {
    body['SourceLogProd'] = request.sourceLogProd;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCsImportedProdStatusByUser',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCsImportedProdStatusByUser(request: DescribeCsImportedProdStatusByUserRequest): DescribeCsImportedProdStatusByUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCsImportedProdStatusByUserWithOptions(request, runtime);
}

model DescribeCustomizeRuleRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleId?: long(name='RuleId', example='123456789'),
}

model DescribeCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertType?: string(name='AlertType', example='WEBSHELL'),
    alertTypeMds?: string(name='AlertTypeMds', example='siem_rule_type_process_abnormal_command'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
    eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
    eventTransferType?: string(name='EventTransferType', example='allToSingle'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    id?: long(name='Id', example='123456789'),
    logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
    logSourceMds?: string(name='LogSourceMds', example='sas.cloudsiem.prod.cloud_siem_aegis_sas_alert'),
    logType?: string(name='LogType', example='ALERT_ACTIVITY'),
    logTypeMds?: string(name='LogTypeMds', example='security_event_config.event_name.webshellName_clientav'),
    queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
    ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
    ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
    ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
    ruleName?: string(name='RuleName', example='waf_scan'),
    ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
    ruleType?: string(name='RuleType', example='customize'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleResponseBody(name='body'),
}

async function describeCustomizeRuleWithOptions(request: DescribeCustomizeRuleRequest, runtime: Util.RuntimeOptions): DescribeCustomizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizeRule',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizeRule(request: DescribeCustomizeRuleRequest): DescribeCustomizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizeRuleWithOptions(request, runtime);
}

model DescribeCustomizeRuleCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCustomizeRuleCountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    highRuleNum?: int32(name='HighRuleNum', example='12'),
    inUseRuleNum?: int32(name='InUseRuleNum', example='20'),
    lowRuleNum?: int32(name='LowRuleNum', example='3'),
    mediumRuleNum?: int32(name='MediumRuleNum', example='5'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleCountResponseBody(name='body'),
}

async function describeCustomizeRuleCountWithOptions(request: DescribeCustomizeRuleCountRequest, runtime: Util.RuntimeOptions): DescribeCustomizeRuleCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizeRuleCount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizeRuleCount(request: DescribeCustomizeRuleCountRequest): DescribeCustomizeRuleCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizeRuleCountWithOptions(request, runtime);
}

model DescribeCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    id?: long(name='Id', example='123456789'),
    simulateData?: string(name='SimulateData', example='[{"key1":"value1","key2":"value2","key3":"value3","key4":"value4","key5":"value5"}]'),
    status?: int32(name='Status', example='0'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleTestResponseBody(name='body'),
}

async function describeCustomizeRuleTestWithOptions(request: DescribeCustomizeRuleTestRequest, runtime: Util.RuntimeOptions): DescribeCustomizeRuleTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizeRuleTest',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizeRuleTest(request: DescribeCustomizeRuleTestRequest): DescribeCustomizeRuleTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizeRuleTestWithOptions(request, runtime);
}

model DescribeCustomizeRuleTestHistogramRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCustomizeRuleTestHistogramResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      count?: long(name='Count', example='125'),
      from?: long(name='From', example='1599897188'),
      to?: long(name='To', example='1599997188'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleTestHistogramResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleTestHistogramResponseBody(name='body'),
}

async function describeCustomizeRuleTestHistogramWithOptions(request: DescribeCustomizeRuleTestHistogramRequest, runtime: Util.RuntimeOptions): DescribeCustomizeRuleTestHistogramResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizeRuleTestHistogram',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizeRuleTestHistogram(request: DescribeCustomizeRuleTestHistogramRequest): DescribeCustomizeRuleTestHistogramResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizeRuleTestHistogramWithOptions(request, runtime);
}

model DescribeDataSourceInstanceRequest {
  accountId?: string(name='AccountId', example='123xxxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDataSourceInstanceResponseBody = {
  data?: {
    accountId?: string(name='AccountId', example='123xxxxxxx'),
    cloudCode?: string(name='CloudCode', example='hcloud'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
    dataSourceInstanceParams?: [ 
      {
        paraCode?: string(name='ParaCode', example='region_code'),
        paraValue?: string(name='ParaValue', example='ap-guangzhou'),
      }
    ](name='DataSourceInstanceParams'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeDataSourceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSourceInstanceResponseBody(name='body'),
}

async function describeDataSourceInstanceWithOptions(request: DescribeDataSourceInstanceRequest, runtime: Util.RuntimeOptions): DescribeDataSourceInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceInstanceId)) {
    body['DataSourceInstanceId'] = request.dataSourceInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataSourceInstance',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataSourceInstance(request: DescribeDataSourceInstanceRequest): DescribeDataSourceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataSourceInstanceWithOptions(request, runtime);
}

model DescribeDataSourceParametersRequest {
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceType?: string(name='DataSourceType', example='obs'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDataSourceParametersResponseBody = {
  data?: [ 
    {
      canEditted?: int32(name='CanEditted', example='wafApi'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
      defaultValue?: string(name='DefaultValue', example='wafApi'),
      disabled?: boolean(name='Disabled', example='wafApi'),
      formatCheck?: string(name='FormatCheck', example='email'),
      hit?: string(name='Hit', example='obs docment'),
      paraCode?: string(name='ParaCode', example='region_code'),
      paraLevel?: int32(name='ParaLevel', example='1'),
      paraName?: string(name='ParaName', example='region local'),
      paraType?: string(name='ParaType', example='string'),
      paramValue?: [ 
        {
          label?: string(name='Label', example='guangzhou'),
          value?: string(name='Value', example='ap-guangzhou'),
        }
      ](name='ParamValue'),
      required?: int32(name='Required', example='string'),
      title?: string(name='Title', example='obs bucket name'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeDataSourceParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSourceParametersResponseBody(name='body'),
}

async function describeDataSourceParametersWithOptions(request: DescribeDataSourceParametersRequest, runtime: Util.RuntimeOptions): DescribeDataSourceParametersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataSourceParameters',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataSourceParameters(request: DescribeDataSourceParametersRequest): DescribeDataSourceParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataSourceParametersWithOptions(request, runtime);
}

model DescribeDisposeAndPlaybookRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  entityType?: string(name='EntityType', example='ip'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDisposeAndPlaybookResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertNum?: int32(name='AlertNum', example='1'),
        dispose?: string(name='Dispose', example='192.168.1.1'),
        entityId?: long(name='EntityId', example='12345'),
        entityInfo?: map[string]any(name='EntityInfo', example='{"file_path": "c:/www/leixi.jsp","file_hash": "aa0ca926ad948cd820e0a3d9a18c09d0","host_uuid": "efed2cf7-0b77-45d9-a97b-d2cf246bcbb3","malware_type": "${aliyun.siem.sas.alert_tag.webshell}","host_name": "launch-advisor-20230531"}'),
        opcodeMap?: map[string]string(name='OpcodeMap', example='12345'),
        opcodeSet?: [ string ](name='OpcodeSet', example='[1,3]'),
        playbookList?: [ 
          {
            description?: string(name='Description', example='WafBlockIP'),
            displayName?: string(name='DisplayName', example='WafBlockIP'),
            name?: string(name='Name', example='kill_process_isolate_file'),
            opCode?: string(name='OpCode', example='7'),
            opLevel?: string(name='OpLevel', example='2'),
            taskConfig?: string(name='TaskConfig', example='{"opCode":"3"}'),
            wafPlaybook?: boolean(name='WafPlaybook', example='false'),
          }
        ](name='PlaybookList', example='[{"name":"云安全中心-云服务器安全","code":"1"}]'),
        scope?: [ any ](name='Scope', example='176618589410****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDisposeAndPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisposeAndPlaybookResponseBody(name='body'),
}

async function describeDisposeAndPlaybookWithOptions(request: DescribeDisposeAndPlaybookRequest, runtime: Util.RuntimeOptions): DescribeDisposeAndPlaybookResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.entityType)) {
    body['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDisposeAndPlaybook',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDisposeAndPlaybook(request: DescribeDisposeAndPlaybookRequest): DescribeDisposeAndPlaybookResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisposeAndPlaybookWithOptions(request, runtime);
}

model DescribeDisposeStrategyPlaybookRequest {
  endTime?: long(name='EndTime', example='1577808000000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1577808000000'),
}

model DescribeDisposeStrategyPlaybookResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      playbookName?: string(name='PlaybookName', example='WafBlockIP'),
      playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDisposeStrategyPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisposeStrategyPlaybookResponseBody(name='body'),
}

async function describeDisposeStrategyPlaybookWithOptions(request: DescribeDisposeStrategyPlaybookRequest, runtime: Util.RuntimeOptions): DescribeDisposeStrategyPlaybookResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDisposeStrategyPlaybook',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDisposeStrategyPlaybook(request: DescribeDisposeStrategyPlaybookRequest): DescribeDisposeStrategyPlaybookResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisposeStrategyPlaybookWithOptions(request, runtime);
}

model DescribeEntityInfoRequest {
  entityId?: long(name='EntityId', example='12345'),
  entityIdentity?: string(name='EntityIdentity', example='test22.php'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa'),
}

model DescribeEntityInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    entityId?: long(name='EntityId', example='12345'),
    entityInfo?: map[string]any(name='EntityInfo', example='{ location: "xian", net_connect_dir: "in", malware_type: "${aliyun.siem.sas.alert_tag.login_unusual_account}" }'),
    entityType?: string(name='EntityType', example='ip'),
    tipInfo?: map[string]any(name='TipInfo', example='{
      "Ip": {
            "queryHot": "0",
            "country": "China",
            "province": "shanxi",
            "ip": "221.11.17.122",
            "asn": "4837",
            "asn_label": "CHINA169-Backbone - CHINA UNICOM China169 Backbone, CN"
      }
}'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEntityInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEntityInfoResponseBody(name='body'),
}

async function describeEntityInfoWithOptions(request: DescribeEntityInfoRequest, runtime: Util.RuntimeOptions): DescribeEntityInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityIdentity)) {
    body['EntityIdentity'] = request.entityIdentity;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sophonTaskId)) {
    body['SophonTaskId'] = request.sophonTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEntityInfo',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEntityInfo(request: DescribeEntityInfoRequest): DescribeEntityInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEntityInfoWithOptions(request, runtime);
}

model DescribeEventCountByThreatLevelRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeEventCountByThreatLevelResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    eventNum?: long(name='EventNum', example='100'),
    highLevelEventNum?: long(name='HighLevelEventNum', example='20'),
    lowLevelEventNum?: long(name='LowLevelEventNum', example='52'),
    mediumLevelEventNum?: long(name='MediumLevelEventNum', example='3'),
    undealEventNum?: long(name='UndealEventNum', example='75'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEventCountByThreatLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventCountByThreatLevelResponseBody(name='body'),
}

async function describeEventCountByThreatLevelWithOptions(request: DescribeEventCountByThreatLevelRequest, runtime: Util.RuntimeOptions): DescribeEventCountByThreatLevelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEventCountByThreatLevel',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEventCountByThreatLevel(request: DescribeEventCountByThreatLevelRequest): DescribeEventCountByThreatLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventCountByThreatLevelWithOptions(request, runtime);
}

model DescribeEventDisposeRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeEventDisposeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    eventDispose?: [ any ](name='EventDispose', example='{ playbookName: "使用安全组封禁入方向IP", sophonTaskId: "400442a5-4f98-45ed-97db-5ab117eb0b8f", … }'),
    receiverInfo?: {
      channel?: string(name='Channel', example='message'),
      gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
      gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
      id?: long(name='Id', example='123'),
      incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
      messageTitle?: string(name='MessageTitle', example='siem event dealed message'),
      receiver?: string(name='Receiver', example='138xxxxxx'),
      status?: int32(name='Status', example='1'),
    }(name='ReceiverInfo'),
    remark?: string(name='Remark', example='dealed'),
    status?: int32(name='Status', example='0'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEventDisposeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventDisposeResponseBody(name='body'),
}

async function describeEventDisposeWithOptions(request: DescribeEventDisposeRequest, runtime: Util.RuntimeOptions): DescribeEventDisposeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEventDispose',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEventDispose(request: DescribeEventDisposeRequest): DescribeEventDisposeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventDisposeWithOptions(request, runtime);
}

model DescribeImportedLogCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeImportedLogCountResponseBody = {
  data?: {
    importedLogCount?: int32(name='ImportedLogCount', example='10'),
    totalLogCount?: int32(name='TotalLogCount', example='59'),
    unImportedLogCount?: int32(name='UnImportedLogCount', example='49'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeImportedLogCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImportedLogCountResponseBody(name='body'),
}

async function describeImportedLogCountWithOptions(request: DescribeImportedLogCountRequest, runtime: Util.RuntimeOptions): DescribeImportedLogCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImportedLogCount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImportedLogCount(request: DescribeImportedLogCountRequest): DescribeImportedLogCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImportedLogCountWithOptions(request, runtime);
}

model DescribeJobStatusRequest {
  regionId?: string(name='RegionId', example='cn-shanghai'),
  submitId?: string(name='SubmitId', example='xxxxx_folder_xxxxxx'),
}

model DescribeJobStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_project_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123XXXXX'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DescribeJobStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeJobStatusResponseBody(name='body'),
}

async function describeJobStatusWithOptions(request: DescribeJobStatusRequest, runtime: Util.RuntimeOptions): DescribeJobStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.submitId)) {
    body['SubmitId'] = request.submitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeJobStatus',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeJobStatus(request: DescribeJobStatusRequest): DescribeJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeJobStatusWithOptions(request, runtime);
}

model DescribeLogFieldsRequest {
  logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
  logType?: string(name='LogType', example='cloud_siem_aegis_sas_alert'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeLogFieldsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      activityName?: string(name='ActivityName', example='HTTP_ACTIVITY'),
      fieldDesc?: string(name='FieldDesc', example='sas.cloudsiem.prod.activity_name'),
      fieldName?: string(name='FieldName', example='activity_name'),
      fieldType?: string(name='FieldType', example='varchar'),
      logCode?: string(name='LogCode', example='cloud_siem_aegis_sas_alert'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogFieldsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogFieldsResponseBody(name='body'),
}

async function describeLogFieldsWithOptions(request: DescribeLogFieldsRequest, runtime: Util.RuntimeOptions): DescribeLogFieldsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.logSource)) {
    body['LogSource'] = request.logSource;
  }
  if (!Util.isUnset(request.logType)) {
    body['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogFields',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogFields(request: DescribeLogFieldsRequest): DescribeLogFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogFieldsWithOptions(request, runtime);
}

model DescribeLogSourceRequest {
  logType?: string(name='LogType', example='HTTP_ACTIVITY'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeLogSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
      logSourceName?: string(name='LogSourceName', example='sas.cloudsiem.prod.cloud_siem_aegis_sas_alert'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogSourceResponseBody(name='body'),
}

async function describeLogSourceWithOptions(request: DescribeLogSourceRequest, runtime: Util.RuntimeOptions): DescribeLogSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.logType)) {
    body['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogSource',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogSource(request: DescribeLogSourceRequest): DescribeLogSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogSourceWithOptions(request, runtime);
}

model DescribeLogStoreRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model DescribeLogStoreResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    appendMeta?: boolean(name='AppendMeta', description='Indicates whether the following time points are added after the log arrives: the time points when the public IP address of the client and the log arrive. Valid values:

*   true
*   false', example='false'),
    autoSplit?: boolean(name='AutoSplit', description='Indicates whether the automatic sharding feature is enabled. Valid values:

*   true
*   false', example='false'),
    enableTracking?: boolean(name='EnableTracking', description='Indicates whether the web tracking feature is enabled to collect user information from browsers, iOS applications, or Android applications. Valid values:

*   true
*   false', example='false'),
    logStoreName?: string(name='LogStoreName', description='The name of the Logstore in Simple Log Service.', example='cloud-siem'),
    maxSplitShard?: int32(name='MaxSplitShard', description='The maximum number of shards that can be generated by using the automatic sharding feature.', example='64'),
    shardCount?: int32(name='ShardCount', description='The number of shards in Log Service.', example='2'),
    ttl?: int32(name='Ttl', description='The retention period of data. Unit: day.', example='180'),
  }(name='Data', description='The response of the threat analysis feature.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Request.Forbidden'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B9CBCEE-9225-5069-BC7F-880938A2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogStoreResponseBody(name='body'),
}

async function describeLogStoreWithOptions(request: DescribeLogStoreRequest, runtime: Util.RuntimeOptions): DescribeLogStoreResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogStore',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogStore(request: DescribeLogStoreRequest): DescribeLogStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreWithOptions(request, runtime);
}

model DescribeLogTypeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeLogTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      logType?: string(name='LogType', example='HTTP_ACTIVITY'),
      logTypeName?: string(name='LogTypeName', example='sas.cloudsiem.prod.http_activity'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogTypeResponseBody(name='body'),
}

async function describeLogTypeWithOptions(request: DescribeLogTypeRequest, runtime: Util.RuntimeOptions): DescribeLogTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogType',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogType(request: DescribeLogTypeRequest): DescribeLogTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogTypeWithOptions(request, runtime);
}

model DescribeOperatorsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sceneType?: string(name='SceneType', example='AGGREGATE'),
}

model DescribeOperatorsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      index?: int32(name='Index', example='3'),
      operator?: string(name='Operator', example='<='),
      operatorDescCn?: string(name='OperatorDescCn', example='arger than or equal to'),
      operatorDescEn?: string(name='OperatorDescEn', example='larger than or equal to'),
      operatorName?: string(name='OperatorName', example='<='),
      supportDataType?: string(name='SupportDataType', example='varchar'),
      supportTag?: [ string ](name='SupportTag', example='[AGGREGATE]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOperatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOperatorsResponseBody(name='body'),
}

async function describeOperatorsWithOptions(request: DescribeOperatorsRequest, runtime: Util.RuntimeOptions): DescribeOperatorsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sceneType)) {
    body['SceneType'] = request.sceneType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOperators',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOperators(request: DescribeOperatorsRequest): DescribeOperatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOperatorsWithOptions(request, runtime);
}

model DescribeProdCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeProdCountResponseBody = {
  data?: {
    aliyunProdCount?: int32(name='AliyunProdCount', example='19'),
    hcloudProdCount?: int32(name='HcloudProdCount', example='2'),
    qcloudProdCount?: int32(name='QcloudProdCount', example='2'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeProdCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProdCountResponseBody(name='body'),
}

async function describeProdCountWithOptions(request: DescribeProdCountRequest, runtime: Util.RuntimeOptions): DescribeProdCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProdCount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProdCount(request: DescribeProdCountRequest): DescribeProdCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProdCountWithOptions(request, runtime);
}

model DescribeScopeUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeScopeUsersResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      aliUid?: long(name='AliUid', example='123456789****'),
      domains?: [ string ](name='Domains', example='[123.com, 456.com]'),
      instanceId?: string(name='InstanceId', example='waf-cn-tl123ast****'),
      userName?: string(name='UserName', example='test001'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeScopeUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScopeUsersResponseBody(name='body'),
}

async function describeScopeUsersWithOptions(request: DescribeScopeUsersRequest, runtime: Util.RuntimeOptions): DescribeScopeUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScopeUsers',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScopeUsers(request: DescribeScopeUsersRequest): DescribeScopeUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScopeUsersWithOptions(request, runtime);
}

model DescribeServiceStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeServiceStatusResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceStatusResponseBody(name='body'),
}

async function describeServiceStatusWithOptions(request: DescribeServiceStatusRequest, runtime: Util.RuntimeOptions): DescribeServiceStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServiceStatus',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServiceStatus(request: DescribeServiceStatusRequest): DescribeServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceStatusWithOptions(request, runtime);
}

model DescribeStorageRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model DescribeStorageResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the projects and Logstores that are created for the threat analysis feature exist in Simple Log Service. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='CCEEE128-6607-503E-AAA6-C5E57D94****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageResponseBody(name='body'),
}

async function describeStorageWithOptions(request: DescribeStorageRequest, runtime: Util.RuntimeOptions): DescribeStorageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorage',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorage(request: DescribeStorageRequest): DescribeStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageWithOptions(request, runtime);
}

model DescribeUserBuyStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  subUserId?: long(name='SubUserId', example='123XXXXXX'),
}

model DescribeUserBuyStatusResponseBody = {
  data?: {
    canBuy?: boolean(name='CanBuy', example='true'),
    capacity?: int32(name='Capacity', example='1024'),
    durationDays?: long(name='DurationDays', example='3'),
    endTime?: long(name='EndTime', example='1669823999000'),
    mainUserId?: long(name='MainUserId', example='123XXXXXX'),
    mainUserName?: string(name='MainUserName', example='sas_account_xxx'),
    masterUserId?: long(name='MasterUserId', example='123XXXXXX'),
    masterUserName?: string(name='MasterUserName', example='rd_master_xxx'),
    sasInstanceId?: string(name='SasInstanceId', example='sas-instance-xxxxx'),
    subUserId?: long(name='SubUserId', example='123XXXXXX'),
    subUserName?: string(name='SubUserName', example='sas_account_xxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='81D8EC0C-0804-51AD-8C38-17ED0BC74892'),
}

model DescribeUserBuyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBuyStatusResponseBody(name='body'),
}

async function describeUserBuyStatusWithOptions(request: DescribeUserBuyStatusRequest, runtime: Util.RuntimeOptions): DescribeUserBuyStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserBuyStatus',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserBuyStatus(request: DescribeUserBuyStatusRequest): DescribeUserBuyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBuyStatusWithOptions(request, runtime);
}

model DescribeWafScopeRequest {
  entityId?: long(name='EntityId', example='20617784'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeWafScopeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      aliuid?: long(name='Aliuid', example='127608589417****'),
      domains?: [ string ](name='Domains', example='[123.com, 456.com]'),
      instanceId?: string(name='InstanceId', example='waf-cn-tl123ast****'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeWafScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWafScopeResponseBody(name='body'),
}

async function describeWafScopeWithOptions(request: DescribeWafScopeRequest, runtime: Util.RuntimeOptions): DescribeWafScopeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWafScope',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWafScope(request: DescribeWafScopeRequest): DescribeWafScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWafScopeWithOptions(request, runtime);
}

model DescribeWhiteRuleListRequest {
  alertName?: string(name='AlertName', example='Try SNMP weak password'),
  alertType?: string(name='AlertType', example='scan'),
  currentPage?: int32(name='CurrentPage', example='1'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameId?: string(name='AlertNameId', example='Try SNMP weak password'),
        alertType?: string(name='AlertType', example='scan'),
        alertTypeId?: string(name='AlertTypeId', example='scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        expression?: {
          conditions?: [ 
            {
              isNot?: boolean(name='IsNot', example='false'),
              itemId?: int32(name='ItemId', example='1'),
              left?: {
                isVar?: boolean(name='IsVar', example='true'),
                modifier?: string(name='Modifier', example='length'),
                modifierParam?: map[string]any(name='ModifierParam'),
                type?: string(name='Type', example='false'),
                value?: string(name='Value', example='ip'),
              }(name='Left'),
              operator?: string(name='Operator', example='REGEXP'),
              right?: {
                isVar?: boolean(name='IsVar', example='false'),
                modifier?: string(name='Modifier', example='length'),
                modifierParam?: map[string]any(name='ModifierParam'),
                type?: string(name='Type', example='String'),
                value?: string(name='Value', example='12345'),
              }(name='Right'),
            }
          ](name='Conditions'),
          logic?: string(name='Logic', example='(1&2)|(3&4)'),
        }(name='Expression', example='[{"conditions":[{"isNot":false,"itemId":0,"left":{"value":"host_uuid.host_name"},"operator":"containsString","right":{"value":"Cloud-MCH"}}]}]'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        status?: int32(name='Status', example='1'),
        subAliuid?: long(name='SubAliuid', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWhiteRuleListResponseBody(name='body'),
}

async function describeWhiteRuleListWithOptions(request: DescribeWhiteRuleListRequest, runtime: Util.RuntimeOptions): DescribeWhiteRuleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertName)) {
    body['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWhiteRuleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWhiteRuleList(request: DescribeWhiteRuleListRequest): DescribeWhiteRuleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWhiteRuleListWithOptions(request, runtime);
}

model DoQuickFieldRequest {
  from?: int32(name='From', description='The time when the quick analysis starts. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684376244'),
  index?: string(name='Index', description='The index field.', example='alert_level'),
  page?: int32(name='Page', description='The number of pages to return. Default value: 1.', example='1'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
  reverse?: boolean(name='Reverse', description='The sorting of the query and analysis results. By default, the results are sorted in descending order.', example='true'),
  size?: int32(name='Size', description='The number of entries per page. Default value: 10.', example='10'),
  to?: int32(name='To', description='The time when the quick analysis ends. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684378090'),
}

model DoQuickFieldResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    aggQueryd?: string(name='AggQueryd', description='This parameter is deprecated.', example='""'),
    completeOrNot?: boolean(name='CompleteOrNot', description='Indicates whether the quick analysis was successful. Valid values:

*   true
*   false', example='true'),
    count?: int32(name='Count', description='The number of entries returned.', example='10'),
    hasSQL?: boolean(name='HasSQL', description='This parameter is deprecated.', example='true'),
    keys?: [ string ](name='Keys', description='This parameter is deprecated.'),
    limited?: long(name='Limited', description='This parameter is deprecated.', example='0'),
    logs?: [ any ](name='Logs', description='The logs queried by using the quick analysis feature.'),
    PQuery?: string(name='PQuery', description='This parameter is deprecated.', example='""'),
    processedRows?: long(name='ProcessedRows', description='The number of entries queried.', example='1000'),
    queryMode?: int32(name='QueryMode', description='This parameter is deprecated.', example='0'),
    whereQuery?: string(name='WhereQuery', description='This parameter is deprecated.', example='* and alert_level : remind | with_pack_meta'),
  }(name='Data', description='The response of the quick analysis.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DoQuickFieldResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DoQuickFieldResponseBody(name='body'),
}

async function doQuickFieldWithOptions(request: DoQuickFieldRequest, runtime: Util.RuntimeOptions): DoQuickFieldResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.index)) {
    body['Index'] = request.index;
  }
  if (!Util.isUnset(request.page)) {
    body['Page'] = request.page;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reverse)) {
    body['Reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DoQuickField',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function doQuickField(request: DoQuickFieldRequest): DoQuickFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return doQuickFieldWithOptions(request, runtime);
}

model DoSelfDelegateRequest {
  aliUid?: long(name='AliUid', description='The Alibaba Cloud account of an ordinary member of the threat analysis feature.', example='104423523217****'),
  delegateOrNot?: int32(name='DelegateOrNot', description='Specifies whether to use a delegated administrator account. Valid values:

*   1: use a delegated administrator account.
*   0: do not use a delegated administrator account.', example='1'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model DoSelfDelegateResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether a regular member is authorized. Valid values:

*   true: The member is authorized.
*   false: The authorization is canceled.', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B9CBCEE-9225-5069-BC7F-880938A2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DoSelfDelegateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DoSelfDelegateResponseBody(name='body'),
}

async function doSelfDelegateWithOptions(request: DoSelfDelegateRequest, runtime: Util.RuntimeOptions): DoSelfDelegateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliUid)) {
    body['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.delegateOrNot)) {
    body['DelegateOrNot'] = request.delegateOrNot;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DoSelfDelegate',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function doSelfDelegate(request: DoSelfDelegateRequest): DoSelfDelegateResponse {
  var runtime = new Util.RuntimeOptions{};
  return doSelfDelegateWithOptions(request, runtime);
}

model EnableAccessForCloudSiemRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model EnableAccessForCloudSiemResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model EnableAccessForCloudSiemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableAccessForCloudSiemResponseBody(name='body'),
}

async function enableAccessForCloudSiemWithOptions(request: EnableAccessForCloudSiemRequest, runtime: Util.RuntimeOptions): EnableAccessForCloudSiemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EnableAccessForCloudSiem',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableAccessForCloudSiem(request: EnableAccessForCloudSiemRequest): EnableAccessForCloudSiemResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAccessForCloudSiemWithOptions(request, runtime);
}

model EnableServiceForCloudSiemRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model EnableServiceForCloudSiemResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model EnableServiceForCloudSiemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableServiceForCloudSiemResponseBody(name='body'),
}

async function enableServiceForCloudSiemWithOptions(request: EnableServiceForCloudSiemRequest, runtime: Util.RuntimeOptions): EnableServiceForCloudSiemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EnableServiceForCloudSiem',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableServiceForCloudSiem(request: EnableServiceForCloudSiemRequest): EnableServiceForCloudSiemResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableServiceForCloudSiemWithOptions(request, runtime);
}

model GetCapacityRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model GetCapacityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    existLogStore?: boolean(name='ExistLogStore', description='Indicates whether the Logstores for the threat analysis feature exist on the user side. Valid values:

*   true: The logs are in the normal state. The log analysis feature is available.
*   false: The logs are being cleared. The log analysis feature is unavailable.', example='true'),
    preservedCapacity?: long(name='PreservedCapacity', description='The purchased storage capacity of the threat analysis feature. Unit: GB.', example='9000'),
    usedCapacity?: double(name='UsedCapacity', description='The billable storage capacity of the threat analysis feature. Unit: GB.', example='10'),
  }(name='Data', description='The information about the storage capacity.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Storage.Exception'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='27D27DCB-D76B-5064-8B3B-0900DEF7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCapacityResponseBody(name='body'),
}

async function getCapacityWithOptions(request: GetCapacityRequest, runtime: Util.RuntimeOptions): GetCapacityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCapacity',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCapacity(request: GetCapacityRequest): GetCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCapacityWithOptions(request, runtime);
}

model GetHistogramsRequest {
  from?: int32(name='From', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC. The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409529600'),
  query?: string(name='Query', description='The SQL statement. Only search statements are supported. Analytic statements are not supported. For more information about the syntax and limits of search statements, see [Log search overview](https://help.aliyun.com/zh/sls/user-guide/search-syntax?spm=a2c4g.11186623.0.i2#concept-tnd-1jq-zdb).', example='* and status: 401'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
  to?: int32(name='To', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC. The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409569200'),
}

model GetHistogramsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    histograms?: [ 
      {
        completedOrNot?: boolean(name='CompletedOrNot', description='Indicates whether the query results within the subinterval is complete. Valid values:

*   true: The query is complete and the returned result is complete.
*   false: The query is complete but the returned result is incomplete. You must repeat the request to obtain the complete result.', example='true'),
        count?: long(name='Count', description='The number of logs within the subinterval.', example='100'),
        from?: int32(name='From', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409529600'),
        to?: int32(name='To', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409569200'),
      }
    ](name='Histograms', description='The distribution of logs.'),
    server?: string(name='Server', description='The name of the server.', example='nginx'),
    totalCount?: long(name='TotalCount', description='The number of logs that are generated within the subinterval.', example='2'),
  }(name='Data', description='The data of the charts.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='97A31C3A-3F9F-5866-8979-5159E3DC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetHistogramsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHistogramsResponseBody(name='body'),
}

async function getHistogramsWithOptions(request: GetHistogramsRequest, runtime: Util.RuntimeOptions): GetHistogramsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetHistograms',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHistograms(request: GetHistogramsRequest): GetHistogramsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHistogramsWithOptions(request, runtime);
}

model GetLogsRequest {
  from?: int32(name='From', description='The time when the query starts. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1684377190'),
  pageIndex?: int32(name='PageIndex', description='The page number. Pages start from page 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 0 to 100.', example='10'),
  query?: string(name='Query', description='The search statement or the analytic statement. For more information, see [Log search overview](https://help.aliyun.com/zh/sls/user-guide/log-analysis-overview?spm=a2c4g.11186623.0.i1#t13103.html) and [Log analysis overview](https://help.aliyun.com/zh/sls/user-guide/search-syntax?spm=a2c4g.11186623.0.i0#concept-tnd-1jq-zdb).', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
  reverseOrNot?: boolean(name='ReverseOrNot', description='Specifies whether to sort the results of the log query by time in minutes in descending order. Default value: true. Valid values:

*   true
*   false', example='true'),
  to?: int32(name='To', description='The time when the query ends. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1684378326'),
  total?: long(name='Total', description='The total number of entries returned.', example='2'),
}

model GetLogsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
      totalCount?: long(name='TotalCount', description='The total number of entries.', example='200'),
    }(name='PageInfo', description='The result on the current page.'),
    responseData?: {
      completeOrNot?: boolean(name='CompleteOrNot', description='The status of the log query. Valid values:

*   true: The query is complete and the returned result is complete.
*   false: The query is complete but the returned result is incomplete. You must resend the request to obtain the complete result.', example='true'),
      cost?: long(name='Cost', description='The time period of the log query. Unit: milliseconds.', example='28'),
      count?: int32(name='Count', description='The number of entries returned.', example='4'),
      hasSql?: boolean(name='HasSql', description='Indicated whether an analytic statement is contained. Valid values:

*   true
*   false', example='true'),
      keys?: [ string ](name='Keys', description='The index fields of the logs.'),
      lines?: [ any ](name='Lines', description='The raw data generated in the query.'),
    }(name='ResponseData', description='The log.'),
  }(name='Data', description='The results of the log query.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='93A8B186-A5F1-5B20-9BCF-5605C5E9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='True'),
}

model GetLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogsResponseBody(name='body'),
}

async function getLogsWithOptions(request: GetLogsRequest, runtime: Util.RuntimeOptions): GetLogsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.pageIndex)) {
    body['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reverseOrNot)) {
    body['ReverseOrNot'] = request.reverseOrNot;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  if (!Util.isUnset(request.total)) {
    body['Total'] = request.total;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLogs',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLogs(request: GetLogsRequest): GetLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogsWithOptions(request, runtime);
}

model GetQuickQueryRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
  searchName?: string(name='SearchName', description='The name of the saved search.', example='display_login_ip_search'),
}

model GetQuickQueryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The query statement.', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='27D27DCB-D76B-5064-8B3B-0900DEF7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQuickQueryResponseBody(name='body'),
}

async function getQuickQueryWithOptions(request: GetQuickQueryRequest, runtime: Util.RuntimeOptions): GetQuickQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.searchName)) {
    body['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQuickQuery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQuickQuery(request: GetQuickQueryRequest): GetQuickQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQuickQueryWithOptions(request, runtime);
}

model GetStorageRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model GetStorageResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    canOperate?: boolean(name='CanOperate', description='Indicates whether the storage region can be changed for once. Default value: false Valid values:

*   true
*   false', example='false'),
    displayRegion?: boolean(name='DisplayRegion', description='Indicates whether the storage region can be changed. Default value: false Valid values:

*   true
*   false', example='false'),
    region?: string(name='Region', description='The region in which the logs are stored. Default value: cn-shanghai. Valid values: cn-shanghai for the China site and ap-southeast-1 for the international site.', example='cn-shanghai'),
    ttl?: int32(name='Ttl', description='The storage period of logs. Unit: day. Default value: 180. Valid values: 30 to 3000.', example='180'),
  }(name='Data', description='The information about the storage.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='97A31C3A-3F9F-5866-8979-5159E3DC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStorageResponseBody(name='body'),
}

async function getStorageWithOptions(request: GetStorageRequest, runtime: Util.RuntimeOptions): GetStorageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStorage',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStorage(request: GetStorageRequest): GetStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStorageWithOptions(request, runtime);
}

model ListAccountAccessIdRequest {
  cloudCode?: string(name='CloudCode', example='hcloud'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListAccountAccessIdResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      accessId?: string(name='AccessId', example='ABCXXXXXXXX'),
      accessIdMd5?: string(name='AccessIdMd5', example='abcXXXXXXXX'),
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountStr?: string(name='AccountStr', example='123xxxxxx|xxxx|ABCXXXXX'),
      bound?: int32(name='Bound', example='123xxxxxx|xxxx|ABCXXXXX'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      subUserId?: long(name='SubUserId', example='ABCXXXXXXXX'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', example='true'),
}

model ListAccountAccessIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountAccessIdResponseBody(name='body'),
}

async function listAccountAccessIdWithOptions(request: ListAccountAccessIdRequest, runtime: Util.RuntimeOptions): ListAccountAccessIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountAccessId',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccountAccessId(request: ListAccountAccessIdRequest): ListAccountAccessIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountAccessIdWithOptions(request, runtime);
}

model ListAccountsByLogRequest {
  cloudCode?: string(name='CloudCode', example='hcloud'),
  logCodes?: [ string ](name='LogCodes', example='["cloud_siem_hcloud_waf_alert_log"]'),
  prodCode?: string(name='ProdCode', example='qcloud_waf'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListAccountsByLogResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='sas_account_xxx'),
      imported?: int32(name='Imported', example='123xxxxxxx'),
      logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      prodCode?: string(name='ProdCode', example='qcloud_waf'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListAccountsByLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsByLogResponseBody(name='body'),
}

async function listAccountsByLogWithOptions(request: ListAccountsByLogRequest, runtime: Util.RuntimeOptions): ListAccountsByLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.logCodes)) {
    body['LogCodes'] = request.logCodes;
  }
  if (!Util.isUnset(request.prodCode)) {
    body['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountsByLog',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccountsByLog(request: ListAccountsByLogRequest): ListAccountsByLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsByLogWithOptions(request, runtime);
}

model ListAllProdsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListAllProdsResponseBody = {
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    prodList?: [ 
      {
        cloudCode?: string(name='CloudCode', example='hcloud'),
        importedLogCount?: int32(name='ImportedLogCount', example='10'),
        modifyTime?: string(name='ModifyTime', example='2023-11-23 12:12:12'),
        prodCode?: string(name='ProdCode', example='sas'),
        totalLogCount?: int32(name='TotalLogCount', example='19'),
      }
    ](name='ProdList', example='1'),
    totalCount?: int32(name='TotalCount', example='19'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListAllProdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAllProdsResponseBody(name='body'),
}

async function listAllProdsWithOptions(request: ListAllProdsRequest, runtime: Util.RuntimeOptions): ListAllProdsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAllProds',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAllProds(request: ListAllProdsRequest): ListAllProdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAllProdsWithOptions(request, runtime);
}

model ListAutomateResponseConfigsRequest {
  actionType?: string(name='ActionType', example='doPlaybook'),
  autoResponseType?: string(name='AutoResponseType', example='event'),
  currentPage?: int32(name='CurrentPage', example='1'),
  id?: long(name='Id', example='123'),
  pageSize?: int32(name='PageSize', example='10'),
  playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_aegis_kill_quara_book'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleName?: string(name='RuleName', example='cfw kill quara book'),
  status?: int32(name='Status', example='0'),
  subUserId?: long(name='SubUserId', example='17108579417****'),
}

model ListAutomateResponseConfigsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        actionConfig?: string(name='ActionConfig', example='[
      {
            "actionType": "doPlaybook",
            "playbookName": "WafBlockIP",
            "playbookUuid": "bdad6220-6584-41b2-9704-fc6584568758"
      }
]'),
        actionType?: string(name='ActionType', example='doPlaybook,changeEventStatus'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        autoResponseType?: string(name='AutoResponseType', example='event'),
        executionCondition?: string(name='ExecutionCondition', example='[{"left":{"value":"alert_name"},"operator":"containsString","right":{"value":"webshell_online"}}]'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        ruleName?: string(name='RuleName', example='cfw kill quara book'),
        status?: int32(name='Status', example='0'),
        subUserId?: long(name='SubUserId', example='17108579417****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListAutomateResponseConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAutomateResponseConfigsResponseBody(name='body'),
}

async function listAutomateResponseConfigsWithOptions(request: ListAutomateResponseConfigsRequest, runtime: Util.RuntimeOptions): ListAutomateResponseConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.actionType)) {
    body['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.autoResponseType)) {
    body['AutoResponseType'] = request.autoResponseType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.playbookUuid)) {
    body['PlaybookUuid'] = request.playbookUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAutomateResponseConfigs',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAutomateResponseConfigs(request: ListAutomateResponseConfigsRequest): ListAutomateResponseConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAutomateResponseConfigsWithOptions(request, runtime);
}

model ListBindAccountRequest {
  cloudCode?: string(name='CloudCode', example='hcloud'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListBindAccountResponseBody = {
  data?: [ 
    {
      accessId?: string(name='AccessId', example='ABCXXXXXXXX'),
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='XXXXXXXX'),
      bindId?: long(name='BindId', example='123xxxxxxx'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      createUser?: string(name='CreateUser', example='123xxxxxxx'),
      dataSourceCount?: long(name='DataSourceCount', example='2'),
      modifyTime?: string(name='ModifyTime', example='2023-11-10 12:20:35'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindAccountResponseBody(name='body'),
}

async function listBindAccountWithOptions(request: ListBindAccountRequest, runtime: Util.RuntimeOptions): ListBindAccountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBindAccount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBindAccount(request: ListBindAccountRequest): ListBindAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBindAccountWithOptions(request, runtime);
}

model ListBindDataSourcesRequest {
  accountId?: string(name='AccountId', example='123xxxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListBindDataSourcesResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='sas_tq_account_xxxx'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
      dataSourceName?: string(name='DataSourceName', example='waf_kafka'),
      dataSourceRemark?: string(name='DataSourceRemark', example='waf_kafka'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
      logCount?: int32(name='LogCount', example='1'),
      taskCount?: int32(name='TaskCount', example='0'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListBindDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindDataSourcesResponseBody(name='body'),
}

async function listBindDataSourcesWithOptions(request: ListBindDataSourcesRequest, runtime: Util.RuntimeOptions): ListBindDataSourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBindDataSources',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBindDataSources(request: ListBindDataSourcesRequest): ListBindDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBindDataSourcesWithOptions(request, runtime);
}

model ListCloudSiemCustomizeRulesRequest {
  alertType?: string(name='AlertType', example='scan'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1577808000000'),
  id?: string(name='Id', example='10223'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleName?: string(name='RuleName', example='waf_scan'),
  ruleType?: string(name='RuleType', example='customize'),
  startTime?: long(name='StartTime', example='1577808000000'),
  status?: int32(name='Status', example='0'),
  threatLevel?: [ string ](name='ThreatLevel', example='["serious","suspicious","remind"]'),
}

model ListCloudSiemCustomizeRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertType?: string(name='AlertType', example='WEBSHELL'),
        alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
        eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
        eventTransferType?: string(name='EventTransferType', example='allToSingle'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
        logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
        logType?: string(name='LogType', example='ALERT_ACTIVITY'),
        logTypeMds?: string(name='LogTypeMds', example='${sas.cloudsiem.prod.alert_activity}'),
        queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
        ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
        ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
        ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
        ruleName?: string(name='RuleName', example='waf_scan'),
        ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
        ruleType?: string(name='RuleType', example='customize'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCloudSiemCustomizeRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudSiemCustomizeRulesResponseBody(name='body'),
}

async function listCloudSiemCustomizeRulesWithOptions(request: ListCloudSiemCustomizeRulesRequest, runtime: Util.RuntimeOptions): ListCloudSiemCustomizeRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.threatLevel)) {
    body['ThreatLevel'] = request.threatLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCloudSiemCustomizeRules',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCloudSiemCustomizeRules(request: ListCloudSiemCustomizeRulesRequest): ListCloudSiemCustomizeRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCloudSiemCustomizeRulesWithOptions(request, runtime);
}

model ListCloudSiemPredefinedRulesRequest {
  alertType?: string(name='AlertType', example='scan'),
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1577808000000'),
  id?: string(name='Id', example='10223'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleName?: string(name='RuleName', example='waf_scan'),
  ruleType?: string(name='RuleType', example='customize'),
  startTime?: long(name='StartTime', example='1577808000000'),
  status?: int32(name='Status', example='0'),
  threatLevel?: [ string ](name='ThreatLevel', example='["serious","suspicious","remind"]'),
}

model ListCloudSiemPredefinedRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertType?: string(name='AlertType', example='WEBSHELL'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        ruleDescMds?: string(name='RuleDescMds', example='${siem_rule_description_siem_cfw-attack-count-level-up_cfw-attack}'),
        ruleName?: string(name='RuleName', example='siem_base64-command-exec_aegis-proc'),
        ruleNameMds?: string(name='RuleNameMds', example='${siem_rule_name_siem_cfw-attack-count-level-up_cfw-attack}'),
        source?: string(name='Source', example='cloud_siem_aegis_proc'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCloudSiemPredefinedRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudSiemPredefinedRulesResponseBody(name='body'),
}

async function listCloudSiemPredefinedRulesWithOptions(request: ListCloudSiemPredefinedRulesRequest, runtime: Util.RuntimeOptions): ListCloudSiemPredefinedRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.threatLevel)) {
    body['ThreatLevel'] = request.threatLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCloudSiemPredefinedRules',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCloudSiemPredefinedRules(request: ListCloudSiemPredefinedRulesRequest): ListCloudSiemPredefinedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCloudSiemPredefinedRulesWithOptions(request, runtime);
}

model ListCustomizeRuleTestResultRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  id?: long(name='Id', example='123456789'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListCustomizeRuleTestResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The account you logged in this time is not in the legal account category defined by you. Please confirm the legality of the login behavior。'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "1652956297921019";"log_uuid_count": "99";"attack_ip": "218.92.0.97"}'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        eventName?: string(name='EventName', example='waf_scan'),
        eventType?: string(name='EventType', example='WEBSHELL'),
        level?: string(name='Level', example='remind'),
        logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logType?: string(name='LogType', example='ALERT_ACTIVITY'),
        mainUserId?: string(name='MainUserId', example='127608589417****'),
        onlineStatus?: string(name='OnlineStatus', example='test'),
        subUserId?: string(name='SubUserId', example='176555323***'),
        uuid?: string(name='Uuid', example='sas_71e24437d2797ce8fc59692905a4****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizeRuleTestResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomizeRuleTestResultResponseBody(name='body'),
}

async function listCustomizeRuleTestResultWithOptions(request: ListCustomizeRuleTestResultRequest, runtime: Util.RuntimeOptions): ListCustomizeRuleTestResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomizeRuleTestResult',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCustomizeRuleTestResult(request: ListCustomizeRuleTestResultRequest): ListCustomizeRuleTestResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCustomizeRuleTestResultWithOptions(request, runtime);
}

model ListDataSourceLogsRequest {
  accountId?: string(name='AccountId', example='123xxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListDataSourceLogsResponseBody = {
  data?: {
    accountId?: string(name='AccountId', example='123xxxxxxx'),
    cloudCode?: string(name='CloudCode', example='hcloud'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
    dataSourceInstanceLogs?: [ 
      {
        logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
        logInstanceId?: string(name='LogInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
        logMdsCode?: string(name='LogMdsCode', example='${siem.prod.cloud_siem_waf_xxxxx}'),
        logParams?: [ 
          {
            paraCode?: string(name='ParaCode', example='region_code'),
            paraValue?: string(name='ParaValue', example='ap-guangzhou'),
          }
        ](name='LogParams'),
        taskStatus?: int32(name='TaskStatus', example='1'),
      }
    ](name='DataSourceInstanceLogs'),
    dataSourceInstanceName?: string(name='DataSourceInstanceName', example='waf kafka'),
    dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='waf kafka'),
    subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListDataSourceLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceLogsResponseBody(name='body'),
}

async function listDataSourceLogsWithOptions(request: ListDataSourceLogsRequest, runtime: Util.RuntimeOptions): ListDataSourceLogsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceInstanceId)) {
    body['DataSourceInstanceId'] = request.dataSourceInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceLogs',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSourceLogs(request: ListDataSourceLogsRequest): ListDataSourceLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourceLogsWithOptions(request, runtime);
}

model ListDataSourceTypesRequest {
  cloudCode?: string(name='CloudCode', example='hcloud'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListDataSourceTypesResponseBody = {
  data?: [ 
    {
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListDataSourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceTypesResponseBody(name='body'),
}

async function listDataSourceTypesWithOptions(request: ListDataSourceTypesRequest, runtime: Util.RuntimeOptions): ListDataSourceTypesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceTypes',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSourceTypes(request: ListDataSourceTypesRequest): ListDataSourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourceTypesWithOptions(request, runtime);
}

model ListDeliveryRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model ListDeliveryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

Valid values:

*   200

    <!-- -->

    <!-- -->

    <!-- -->

*   500

    <!-- -->

    <!-- -->

    <!-- -->', example='200'),
  data?: {
    dashboardUrl?: string(name='DashboardUrl', description='The URL that is displayed in charts.', example='https://sls4service.console.aliyun.com/lognext/project/aliyun-cloudsiem-data-127608589417****-cn-shanghai
/dashboard/cloud-siem?isShare=true&hideTopbar=true&hideSidebar=true&ignoreTabLocalStorage=true'),
    displaySwitchOrNot?: boolean(name='DisplaySwitchOrNot', description='Indicates whether the log delivery switch is displayed. Default value: true. Valid values:

*   true
*   false', example='true'),
    logStoreName?: string(name='LogStoreName', description='The name of the Logstore for the threat analysis feature on the user side. The value is in the cloud_siem format.', example='cloud-siem'),
    productList?: [ 
      {
        logList?: [ 
          {
            canOperateOrNot?: boolean(name='CanOperateOrNot', description='Indicates whether the log delivery feature can be enabled or disabled. The feature can be enabled or disabled only by the administrator of the threat analysis feature. Valid values:

*   true
*   false', example='true'),
            extraParameters?: [ 
              {
                key?: string(name='Key', description='The ID of the extended parameter.', example='flag'),
                value?: string(name='Value', description='The value of the extended parameter.', example='value'),
              }
            ](name='ExtraParameters', description='The extended parameter.'),
            logCode?: string(name='LogCode', description='The code of the log.', example='cloud_siem_config_log'),
            logName?: string(name='LogName', description='This parameter is deprecated.', example='audit log'),
            logNameEn?: string(name='LogNameEn', description='This parameter is deprecated.', example='audit log'),
            logNameKey?: string(name='LogNameKey', description='The language code of the log that is used to indicate the language in which the log is displayed.', example='${sas.cloudsiem.prod.cloud_siem_aegis_crack_from_beaver}'),
            status?: boolean(name='Status', description='The status of the log delivery. Valid values:

*   true: The logs are being delivered.
*   false: The log delivery feature is disabled.', example='true'),
            topic?: string(name='Topic', description='The topic of the log in the Logstore. The value is an index field in the Logstore that can be used to distinguish different logs.', example='sas_login_event'),
          }
        ](name='LogList', description='The logs of the cloud services.'),
        logMap?: map[string][ DataProductListLogMapValue         ](name='LogMap', description='The log group. For example, in Security Center, the logs of hosts and networks are stored in different groups. Key indicates the group information, and value indicates the logs in the group.'),
        productCode?: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='sas'),
        productName?: string(name='ProductName', description='This parameter is deprecated.', example='Security Center'),
      }
    ](name='ProductList', description='The cloud services.'),
    projectName?: string(name='ProjectName', description='The name of the project for the threat analysis feature in Simple Log service on the user side. The value is in the aliyun-cloudsiem-data-${aliUid}-${region} format.', example='aliyun-cloudsiem-data-127608589417****-cn-shanghai'),
    searchUrl?: string(name='SearchUrl', description='The URL that is used for log analysis.', example='https://sls4service.console.aliyun.com/lognext/project/aliyun-cloudsiem-data-127608589417****-cn-shanghai
/logsearch/cloud-siem?isShare=true&hideTopbar=true&hideSidebar=true&ignoreTabLocalStorage=true'),
  }(name='Data', description='The response parameters.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic error message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', description='The error message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false

Valid values:

*   True

    <!-- -->

    <!-- -->

    <!-- -->

*   False

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model ListDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeliveryResponseBody(name='body'),
}

async function listDeliveryWithOptions(request: ListDeliveryRequest, runtime: Util.RuntimeOptions): ListDeliveryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDelivery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDelivery(request: ListDeliveryRequest): ListDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeliveryWithOptions(request, runtime);
}

model ListDisposeStrategyRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  effectiveStatus?: int32(name='EffectiveStatus', example='0'),
  endTime?: long(name='EndTime', example='1577808000000'),
  entityIdentity?: string(name='EntityIdentity', example='test22.php'),
  entityType?: string(name='EntityType', example='ip'),
  order?: string(name='Order', example='desc'),
  orderField?: string(name='OrderField', example='GmtModified'),
  pageSize?: int32(name='PageSize', example='10'),
  playbookName?: string(name='PlaybookName', example='WafBlockIP'),
  playbookTypes?: string(name='PlaybookTypes', example='system'),
  playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sophonTaskId?: string(name='SophonTaskId', example='a50a49b7-6044-4593-ab15-2b46567caadd'),
  startTime?: long(name='StartTime', example='1577808000000'),
}

model ListDisposeStrategyResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        effectiveStatus?: int32(name='EffectiveStatus', example='0'),
        entity?: [ any ](name='Entity', example='[{"ip":"1.1.1.1"}]'),
        entityId?: long(name='EntityId', example='123456789'),
        entityType?: string(name='EntityType', example='ip'),
        errorMessage?: string(name='ErrorMessage', example='DisposalEntity failed which description is Aegis Quarantine File , return_info failed which description is Check Aegis Process Result , [ERROR DETAIL] *******.php:file not found'),
        finishTime?: string(name='FinishTime', example='2021-08-10 21:34:07'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        playbookName?: string(name='PlaybookName', example='WafBlockIP'),
        playbookType?: string(name='PlaybookType', example='system'),
        playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
        scope?: [ any ](name='Scope', example='[{ aliUid: 1766185894104675 }]'),
        sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa'),
        status?: int32(name='Status', example='10'),
        subAliuid?: long(name='SubAliuid', example='176555323***'),
        taskParam?: string(name='TaskParam', example='{
      "file": {
            "op_code": "2",
            "file_path": "/root/alert0913/a886.jsp",
            "entity_type": "file",
            "entity_name": "a886.jsp",
            "file_name": "a886.jsp",
            "file_owner": "USER:,GROUP:",
            "hash_value": "5def10c9a4287d0920d86b42420b20b0",
            "op_level": "2",
            "entity_id": "/root/alert0913/a886.jsp",
            "host_uuid": {
                  "entity_type": "host",
                  "entity_name": "N/A",
                  "is_comprised": "1",
                  "os_type": "linux",
                  "entity_id": "5f58ef67-8803-4314-8d67-c87dc92b****",
                  "host_uuid": "5f58ef67-8803-4314-8d67-c87dc92b****",
                  "host_name": "N/A"
            },
            "malware_type": "${aliyun.siem.sas.alert_tag.webshell}"
      },
      "_sys_siem": {
            "cloudCode": "aliyun",
            "alertId": "89416745494****"
      },
      "scope": [
            {
                  "aliUid": 1766185894104****
            }
      ]
}'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListDisposeStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDisposeStrategyResponseBody(name='body'),
}

async function listDisposeStrategyWithOptions(request: ListDisposeStrategyRequest, runtime: Util.RuntimeOptions): ListDisposeStrategyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.effectiveStatus)) {
    body['EffectiveStatus'] = request.effectiveStatus;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.entityIdentity)) {
    body['EntityIdentity'] = request.entityIdentity;
  }
  if (!Util.isUnset(request.entityType)) {
    body['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.order)) {
    body['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.playbookName)) {
    body['PlaybookName'] = request.playbookName;
  }
  if (!Util.isUnset(request.playbookTypes)) {
    body['PlaybookTypes'] = request.playbookTypes;
  }
  if (!Util.isUnset(request.playbookUuid)) {
    body['PlaybookUuid'] = request.playbookUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sophonTaskId)) {
    body['SophonTaskId'] = request.sophonTaskId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDisposeStrategy',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDisposeStrategy(request: ListDisposeStrategyRequest): ListDisposeStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDisposeStrategyWithOptions(request, runtime);
}

model ListImportedLogsByProdRequest {
  cloudCode?: string(name='CloudCode', example='hcloud'),
  prodCode?: string(name='ProdCode', example='qcloud_waf'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListImportedLogsByProdResponseBody = {
  data?: [ 
    {
      autoImported?: int32(name='AutoImported', example='2023-11-23 12:30:00'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      imported?: int32(name='Imported', example='2023-11-23 12:30:00'),
      importedUserCount?: int32(name='ImportedUserCount', example='2'),
      logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
      logMdsCode?: string(name='LogMdsCode', example='${siem.prod. cloud_siem_waf_xxxxx}'),
      modifyTime?: string(name='ModifyTime', example='2023-11-23 12:30:00'),
      prodCode?: string(name='ProdCode', example='qcloud_waf'),
      totalUserCount?: int32(name='TotalUserCount', example='5'),
      unImportedUserCount?: int32(name='UnImportedUserCount', example='3'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListImportedLogsByProdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImportedLogsByProdResponseBody(name='body'),
}

async function listImportedLogsByProdWithOptions(request: ListImportedLogsByProdRequest, runtime: Util.RuntimeOptions): ListImportedLogsByProdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.prodCode)) {
    body['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListImportedLogsByProd',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listImportedLogsByProd(request: ListImportedLogsByProdRequest): ListImportedLogsByProdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listImportedLogsByProdWithOptions(request, runtime);
}

model ListOperationRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model ListOperationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    adminOrNot?: boolean(name='AdminOrNot', description='Indicates whether the user is an administrator. Valid values:

*   true
*   false', example='true'),
    operationList?: [ string ](name='OperationList', description='The resources on which the permissions are granted.'),
  }(name='Data', description='The response parameters.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='CCEEE128-6607-503E-AAA6-C5E57D94****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOperationResponseBody(name='body'),
}

async function listOperationWithOptions(request: ListOperationRequest, runtime: Util.RuntimeOptions): ListOperationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListOperation',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOperation(request: ListOperationRequest): ListOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOperationWithOptions(request, runtime);
}

model ListProjectLogStoresRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
  sourceProdCode?: string(name='SourceProdCode', example='sas'),
  subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
}

model ListProjectLogStoresResponseBody = {
  data?: [ 
    {
      endPoint?: string(name='EndPoint', example='cn-hangzhou.log.aliyuncs.com'),
      localName?: string(name='LocalName', example='hangzhou'),
      logStore?: string(name='LogStore', example='cloud-siem-logstore'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      project?: string(name='Project', example='cloud-siem-project'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListProjectLogStoresResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectLogStoresResponseBody(name='body'),
}

async function listProjectLogStoresWithOptions(request: ListProjectLogStoresRequest, runtime: Util.RuntimeOptions): ListProjectLogStoresResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceLogCode)) {
    body['SourceLogCode'] = request.sourceLogCode;
  }
  if (!Util.isUnset(request.sourceProdCode)) {
    body['SourceProdCode'] = request.sourceProdCode;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectLogStores',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectLogStores(request: ListProjectLogStoresRequest): ListProjectLogStoresResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectLogStoresWithOptions(request, runtime);
}

model ListQuickQueryRequest {
  offset?: int32(name='Offset', description='The line from which the query starts. Default value: 0.', example='0'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 500.', example='50'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model ListQuickQueryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    count?: int32(name='Count', description='The number of saved searches per page.', example='10'),
    quickQueryList?: [ 
      {
        displayName?: string(name='DisplayName', description='The alias of the saved search.', example='no_1_created_search_used_for_dispaly_ip'),
        query?: string(name='Query', description='The query statement corresponding to the saved search.', example='* and SamplerAddress:\\"172.18.1.1\\" and OutIf:\\"105\\"'),
        searchName?: string(name='SearchName', description='The name of the saved search.', example='data_analysis'),
      }
    ](name='QuickQueryList', description='The saved search.'),
    total?: int32(name='Total', description='The total number of saved searches that meet the query conditions.', example='101'),
  }(name='Data', description='The response parameters.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Storage.Exception'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='F375A043-4F5B-55F2-A564-CC47FFC6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuickQueryResponseBody(name='body'),
}

async function listQuickQueryWithOptions(request: ListQuickQueryRequest, runtime: Util.RuntimeOptions): ListQuickQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQuickQuery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQuickQuery(request: ListQuickQueryRequest): ListQuickQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQuickQueryWithOptions(request, runtime);
}

model ListRdUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListRdUsersResponseBody = {
  data?: [ 
    {
      delegatedOrNot?: boolean(name='DelegatedOrNot', example='true'),
      joined?: boolean(name='Joined', example='true'),
      joinedTime?: string(name='JoinedTime', example='2013-10-01 00:00:00'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListRdUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRdUsersResponseBody(name='body'),
}

async function listRdUsersWithOptions(request: ListRdUsersRequest, runtime: Util.RuntimeOptions): ListRdUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRdUsers',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRdUsers(request: ListRdUsersRequest): ListRdUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRdUsersWithOptions(request, runtime);
}

model ListUserProdLogsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
  sourceProdCode?: string(name='SourceProdCode', example='sas'),
}

model ListUserProdLogsResponseBody = {
  data?: [ 
    {
      displayLine?: string(name='DisplayLine', example='cn-shanghai.siem-project.siem-logstore'),
      displayed?: boolean(name='Displayed', example='true'),
      imported?: boolean(name='Imported', example='true'),
      isDeleted?: int32(name='IsDeleted', example='0'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
      sourceLogInfo?: string(name='SourceLogInfo', example='{"project":"wafnew-project-1335759343513432-cn-hangzhou","logStore":"wafnew-logstore","regionCode":"cn-hangzhou","prodCode":"waf"}'),
      sourceProdCode?: string(name='SourceProdCode', example='sas'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListUserProdLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserProdLogsResponseBody(name='body'),
}

async function listUserProdLogsWithOptions(request: ListUserProdLogsRequest, runtime: Util.RuntimeOptions): ListUserProdLogsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceLogCode)) {
    body['SourceLogCode'] = request.sourceLogCode;
  }
  if (!Util.isUnset(request.sourceProdCode)) {
    body['SourceProdCode'] = request.sourceProdCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListUserProdLogs',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserProdLogs(request: ListUserProdLogsRequest): ListUserProdLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserProdLogsWithOptions(request, runtime);
}

model ListUsersByProdRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sourceProdCode?: string(name='SourceProdCode', example='sas'),
}

model ListUsersByProdResponseBody = {
  data?: [ 
    {
      cloudCode?: string(name='CloudCode', example='hcloud'),
      imported?: boolean(name='Imported', example='true'),
      logMdsCode?: string(name='LogMdsCode', example='${siem.xxx.xxxxxxxxx}'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
      sourceLogName?: string(name='SourceLogName', example='安骑士进程日志'),
      sourceProdCode?: string(name='SourceProdCode', example='sas'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListUsersByProdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersByProdResponseBody(name='body'),
}

async function listUsersByProdWithOptions(request: ListUsersByProdRequest, runtime: Util.RuntimeOptions): ListUsersByProdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceProdCode)) {
    body['SourceProdCode'] = request.sourceProdCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListUsersByProd',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsersByProd(request: ListUsersByProdRequest): ListUsersByProdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersByProdWithOptions(request, runtime);
}

model ModifyBindAccountRequest {
  accessId?: string(name='AccessId', example='ABCXXXXXXXXX'),
  accountId?: string(name='AccountId', example='123xxxxxxx'),
  accountName?: string(name='AccountName', example='sas_account_xxx'),
  bindId?: long(name='BindId', example='123'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyBindAccountResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBindAccountResponseBody(name='body'),
}

async function modifyBindAccountWithOptions(request: ModifyBindAccountRequest, runtime: Util.RuntimeOptions): ModifyBindAccountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessId)) {
    body['AccessId'] = request.accessId;
  }
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.bindId)) {
    body['BindId'] = request.bindId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBindAccount',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBindAccount(request: ModifyBindAccountRequest): ModifyBindAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBindAccountWithOptions(request, runtime);
}

model ModifyDataSourceRequest {
  accountId?: string(name='AccountId', example='123xxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  dataSourceInstanceName?: string(name='DataSourceInstanceName', example='beijing_waf_kafka'),
  dataSourceInstanceParams?: string(name='DataSourceInstanceParams', example='[{"paraCode":"region_code","paraValue":"ap-guangzhou"}]'),
  dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='waf_alert_log'),
  dataSourceType?: string(name='DataSourceType', example='obs'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataSourceResponseBody(name='body'),
}

async function modifyDataSourceWithOptions(request: ModifyDataSourceRequest, runtime: Util.RuntimeOptions): ModifyDataSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceInstanceId)) {
    body['DataSourceInstanceId'] = request.dataSourceInstanceId;
  }
  if (!Util.isUnset(request.dataSourceInstanceName)) {
    body['DataSourceInstanceName'] = request.dataSourceInstanceName;
  }
  if (!Util.isUnset(request.dataSourceInstanceParams)) {
    body['DataSourceInstanceParams'] = request.dataSourceInstanceParams;
  }
  if (!Util.isUnset(request.dataSourceInstanceRemark)) {
    body['DataSourceInstanceRemark'] = request.dataSourceInstanceRemark;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDataSource',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDataSource(request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataSourceWithOptions(request, runtime);
}

model ModifyDataSourceLogRequest {
  accountId?: string(name='AccountId', example='123xxxxxxx'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  dataSourceInstanceId?: string(name='DataSourceInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  dataSourceInstanceLogs?: string(name='DataSourceInstanceLogs', example='[{"LogCode":"cloud_siem_qcloud_waf_alert_log","LogParas":"[{\\"ParaCode\\":\\"api_name\\",\\"ParaValue\\":\\"GetAttackDownloadRecords\\"}]"}]'),
  dataSourceType?: string(name='DataSourceType', example='obs'),
  logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
  logInstanceId?: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataSourceLogResponseBody(name='body'),
}

async function modifyDataSourceLogWithOptions(request: ModifyDataSourceLogRequest, runtime: Util.RuntimeOptions): ModifyDataSourceLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.dataSourceInstanceId)) {
    body['DataSourceInstanceId'] = request.dataSourceInstanceId;
  }
  if (!Util.isUnset(request.dataSourceInstanceLogs)) {
    body['DataSourceInstanceLogs'] = request.dataSourceInstanceLogs;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.logCode)) {
    body['LogCode'] = request.logCode;
  }
  if (!Util.isUnset(request.logInstanceId)) {
    body['LogInstanceId'] = request.logInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDataSourceLog',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDataSourceLog(request: ModifyDataSourceLogRequest): ModifyDataSourceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataSourceLogWithOptions(request, runtime);
}

model OpenDeliveryRequest {
  logCode?: string(name='LogCode', description='The log code of the cloud service, such as the code of the process log for Security Center. If you leave this parameter empty, operations are performed on all logs of the cloud service.', example='cloud_siem_cfw_flow'),
  productCode?: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='cfw'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model OpenDeliveryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the log delivery feature is enabled. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='15FD134E-D69B-51E8-B052-73F97BD8****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model OpenDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenDeliveryResponseBody(name='body'),
}

async function openDeliveryWithOptions(request: OpenDeliveryRequest, runtime: Util.RuntimeOptions): OpenDeliveryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.logCode)) {
    body['LogCode'] = request.logCode;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OpenDelivery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openDelivery(request: OpenDeliveryRequest): OpenDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return openDeliveryWithOptions(request, runtime);
}

model PostAutomateResponseConfigRequest {
  actionConfig?: string(name='ActionConfig', example='[
      {
            "actionType": "doPlaybook",
            "playbookName": "WafBlockIP",
            "playbookUuid": "bdad6220-6584-41b2-9704-fc6584568758"
      }
]'),
  actionType?: string(name='ActionType', example='doPlaybook,changeEventStatus'),
  autoResponseType?: string(name='AutoResponseType', example='event'),
  executionCondition?: string(name='ExecutionCondition', example='[{"left":{"value":"alert_name"},"operator":"containsString","right":{"value":"webshell_online"}}]'),
  id?: long(name='Id', example='123'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleName?: string(name='RuleName', example='cfw kill quara book'),
  subUserId?: long(name='SubUserId', example='17108579417****'),
}

model PostAutomateResponseConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostAutomateResponseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostAutomateResponseConfigResponseBody(name='body'),
}

async function postAutomateResponseConfigWithOptions(request: PostAutomateResponseConfigRequest, runtime: Util.RuntimeOptions): PostAutomateResponseConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.actionConfig)) {
    body['ActionConfig'] = request.actionConfig;
  }
  if (!Util.isUnset(request.actionType)) {
    body['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.autoResponseType)) {
    body['AutoResponseType'] = request.autoResponseType;
  }
  if (!Util.isUnset(request.executionCondition)) {
    body['ExecutionCondition'] = request.executionCondition;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.subUserId)) {
    body['SubUserId'] = request.subUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostAutomateResponseConfig',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postAutomateResponseConfig(request: PostAutomateResponseConfigRequest): PostAutomateResponseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return postAutomateResponseConfigWithOptions(request, runtime);
}

model PostCustomizeRuleRequest {
  alertType?: string(name='AlertType', example='WEBSHELL'),
  alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}'),
  eventTransferExt?: string(name='EventTransferExt', example='{"time":"1","unit":"MINUTE"}'),
  eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
  eventTransferType?: string(name='EventTransferType', example='allToSingle'),
  id?: long(name='Id', example='123456789'),
  logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
  logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
  logType?: string(name='LogType', example='ALERT_ACTIVITY'),
  logTypeMds?: string(name='LogTypeMds', example='${security_event_config.event_name.webshellName_clientav}'),
  queryCycle?: string(name='QueryCycle', example='{"time":"1","unit":"HOUR"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleCondition?: string(name='RuleCondition', example='[[{"not":false,"left":"alert_name","operator":"=","right":"WEBSHELL"}]]'),
  ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
  ruleGroup?: string(name='RuleGroup', example='["asset_id"]'),
  ruleName?: string(name='RuleName', example='waf_scan'),
  ruleThreshold?: string(name='RuleThreshold', example='{"aggregateFunction":"count","aggregateFunctionName":"count","field":"activity_name","operator":"&lt;=","value":1}'),
  threatLevel?: string(name='ThreatLevel', example='remind'),
}

model PostCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertType?: string(name='AlertType', example='WEBSHELL'),
    alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
    eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
    eventTransferType?: string(name='EventTransferType', example='allToSingle'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    id?: long(name='Id', example='123456789'),
    logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
    logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
    logType?: string(name='LogType', example='ALERT_ACTIVITY'),
    logTypeMds?: string(name='LogTypeMds', example='${security_event_config.event_name.webshellName_clientav}'),
    queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
    ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
    ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
    ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
    ruleName?: string(name='RuleName', example='waf_scan'),
    ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
    ruleType?: string(name='RuleType', example='customize'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostCustomizeRuleResponseBody(name='body'),
}

async function postCustomizeRuleWithOptions(request: PostCustomizeRuleRequest, runtime: Util.RuntimeOptions): PostCustomizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.alertTypeMds)) {
    body['AlertTypeMds'] = request.alertTypeMds;
  }
  if (!Util.isUnset(request.eventTransferExt)) {
    body['EventTransferExt'] = request.eventTransferExt;
  }
  if (!Util.isUnset(request.eventTransferSwitch)) {
    body['EventTransferSwitch'] = request.eventTransferSwitch;
  }
  if (!Util.isUnset(request.eventTransferType)) {
    body['EventTransferType'] = request.eventTransferType;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.logSource)) {
    body['LogSource'] = request.logSource;
  }
  if (!Util.isUnset(request.logSourceMds)) {
    body['LogSourceMds'] = request.logSourceMds;
  }
  if (!Util.isUnset(request.logType)) {
    body['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.logTypeMds)) {
    body['LogTypeMds'] = request.logTypeMds;
  }
  if (!Util.isUnset(request.queryCycle)) {
    body['QueryCycle'] = request.queryCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleCondition)) {
    body['RuleCondition'] = request.ruleCondition;
  }
  if (!Util.isUnset(request.ruleDesc)) {
    body['RuleDesc'] = request.ruleDesc;
  }
  if (!Util.isUnset(request.ruleGroup)) {
    body['RuleGroup'] = request.ruleGroup;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleThreshold)) {
    body['RuleThreshold'] = request.ruleThreshold;
  }
  if (!Util.isUnset(request.threatLevel)) {
    body['ThreatLevel'] = request.threatLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostCustomizeRule',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postCustomizeRule(request: PostCustomizeRuleRequest): PostCustomizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return postCustomizeRuleWithOptions(request, runtime);
}

model PostCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  simulatedData?: string(name='SimulatedData', example='[{"key1":"value1","key2":"value2","key3":"value3","key4":"value4","key5":"value5"}]'),
  testType?: string(name='TestType', example='simulate'),
}

model PostCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostCustomizeRuleTestResponseBody(name='body'),
}

async function postCustomizeRuleTestWithOptions(request: PostCustomizeRuleTestRequest, runtime: Util.RuntimeOptions): PostCustomizeRuleTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.simulatedData)) {
    body['SimulatedData'] = request.simulatedData;
  }
  if (!Util.isUnset(request.testType)) {
    body['TestType'] = request.testType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostCustomizeRuleTest',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postCustomizeRuleTest(request: PostCustomizeRuleTestRequest): PostCustomizeRuleTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return postCustomizeRuleTestWithOptions(request, runtime);
}

model PostEventDisposeAndWhiteruleListRequest {
  eventDispose?: string(name='EventDispose', example='[
      {
            "playbookName": "WafBlockIP",
            "entityId": "104466118",
            "scope": [
                  "176618589410****"
            ],
            "startTime": 1604168946281,
            "endTime": 1614168946281
      },
      {
            "playbookName": "WafBlockIP",
            "entityId": "104466118",
            "scope": [
                  {
                        "instanceId": "waf-cn-n6w1oy1****",
                        "domains": [
                              "lmfip.wafqax.***"
                        ]
                  }
            ],
            "startTime": 1604168946281,
            "endTime": 1614168946281
      }
]'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  receiverInfo?: string(name='ReceiverInfo', example='{
      "messageTitle": "test",
      "receiver": "xiaowang",
      "channel": "message"
}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remark?: string(name='Remark', example='dealed'),
  status?: int32(name='Status', example='0'),
}

model PostEventDisposeAndWhiteruleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostEventDisposeAndWhiteruleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostEventDisposeAndWhiteruleListResponseBody(name='body'),
}

async function postEventDisposeAndWhiteruleListWithOptions(request: PostEventDisposeAndWhiteruleListRequest, runtime: Util.RuntimeOptions): PostEventDisposeAndWhiteruleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventDispose)) {
    body['EventDispose'] = request.eventDispose;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.receiverInfo)) {
    body['ReceiverInfo'] = request.receiverInfo;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostEventDisposeAndWhiteruleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postEventDisposeAndWhiteruleList(request: PostEventDisposeAndWhiteruleListRequest): PostEventDisposeAndWhiteruleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return postEventDisposeAndWhiteruleListWithOptions(request, runtime);
}

model PostEventWhiteruleListRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  whiteruleList?: string(name='WhiteruleList', example='[
      {
            "alertName": "webshell",
            "alertNameId": "webshell",
            "alertType": "command",
            "alertTypeId": "command",
            "expression": {
                  "status": 1,
                  "conditions": [
                        {
                              "isNot": false,
                              "left": {
                                    "value": "file_path"
                              },
                              "operator": "gt",
                              "right": {
                                    "value": "cp"
                              }
                        }
                  ]
            }
      }
]'),
}

model PostEventWhiteruleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostEventWhiteruleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostEventWhiteruleListResponseBody(name='body'),
}

async function postEventWhiteruleListWithOptions(request: PostEventWhiteruleListRequest, runtime: Util.RuntimeOptions): PostEventWhiteruleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.whiteruleList)) {
    body['WhiteruleList'] = request.whiteruleList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostEventWhiteruleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postEventWhiteruleList(request: PostEventWhiteruleListRequest): PostEventWhiteruleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return postEventWhiteruleListWithOptions(request, runtime);
}

model PostFinishCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model PostFinishCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostFinishCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostFinishCustomizeRuleTestResponseBody(name='body'),
}

async function postFinishCustomizeRuleTestWithOptions(request: PostFinishCustomizeRuleTestRequest, runtime: Util.RuntimeOptions): PostFinishCustomizeRuleTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostFinishCustomizeRuleTest',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postFinishCustomizeRuleTest(request: PostFinishCustomizeRuleTestRequest): PostFinishCustomizeRuleTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return postFinishCustomizeRuleTestWithOptions(request, runtime);
}

model PostRuleStatusChangeRequest {
  ids?: string(name='Ids', example='[123,345]'),
  inUse?: boolean(name='InUse', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleType?: string(name='RuleType', example='customize'),
}

model PostRuleStatusChangeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostRuleStatusChangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostRuleStatusChangeResponseBody(name='body'),
}

async function postRuleStatusChangeWithOptions(request: PostRuleStatusChangeRequest, runtime: Util.RuntimeOptions): PostRuleStatusChangeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ids)) {
    body['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.inUse)) {
    body['InUse'] = request.inUse;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PostRuleStatusChange',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function postRuleStatusChange(request: PostRuleStatusChangeRequest): PostRuleStatusChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return postRuleStatusChangeWithOptions(request, runtime);
}

model RestoreCapacityRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model RestoreCapacityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the release command has been sent. Valid values:

*   true: The command has been sent and the storage space is being released.
*   false: The command failed to be sent.', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Request.Forbidden'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RestoreCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestoreCapacityResponseBody(name='body'),
}

async function restoreCapacityWithOptions(request: RestoreCapacityRequest, runtime: Util.RuntimeOptions): RestoreCapacityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestoreCapacity',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restoreCapacity(request: RestoreCapacityRequest): RestoreCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreCapacityWithOptions(request, runtime);
}

model SaveQuickQueryRequest {
  displayName?: string(name='DisplayName', description='The name of the saved search.', example='no_1_created_search_used_for_dispaly_ip'),
  query?: string(name='Query', description='The query statement.', example='* and dst_ip : "121.43.234.***"'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model SaveQuickQueryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the query statement is saved as a saved search. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model SaveQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveQuickQueryResponseBody(name='body'),
}

async function saveQuickQueryWithOptions(request: SaveQuickQueryRequest, runtime: Util.RuntimeOptions): SaveQuickQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveQuickQuery',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveQuickQuery(request: SaveQuickQueryRequest): SaveQuickQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveQuickQueryWithOptions(request, runtime);
}

model SetStorageRequest {
  region?: string(name='Region', description='The storage region of logs. By default, the region of the data management center is used and cannot be changed. cn-shanghai is used for the China data management center, and ap-southeast-1 is used for the Outside China data management center. To change the region, contact the technical support of threat analysis.', example='cn-shanghai'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
  ttl?: int32(name='Ttl', description='The storage duration of logs. Default value: 180. Minimum value: 30. Maximum value: 3000. Unit: days.', example='180'),
}

model SetStorageResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the settings are saved. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Storage.Exception'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model SetStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetStorageResponseBody(name='body'),
}

async function setStorageWithOptions(request: SetStorageRequest, runtime: Util.RuntimeOptions): SetStorageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetStorage',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setStorage(request: SetStorageRequest): SetStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return setStorageWithOptions(request, runtime);
}

model ShowQuickAnalysisRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou'),
}

model ShowQuickAnalysisResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    indexList?: [ string ](name='IndexList', description='The index fields of the logs.'),
  }(name='Data', description='The index fields.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Request.Forbidden'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A4FBD89-C29D-5973-B882-CB2D23F6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ShowQuickAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShowQuickAnalysisResponseBody(name='body'),
}

async function showQuickAnalysisWithOptions(request: ShowQuickAnalysisRequest, runtime: Util.RuntimeOptions): ShowQuickAnalysisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ShowQuickAnalysis',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function showQuickAnalysis(request: ShowQuickAnalysisRequest): ShowQuickAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return showQuickAnalysisWithOptions(request, runtime);
}

model SubmitImportLogTasksRequest {
  accounts?: string(name='Accounts', example='[{"AccountId":"123123","Imported":1}]'),
  autoImported?: int32(name='AutoImported', example='["cloud_siem_qcloud_cfw_alert_log"]'),
  cloudCode?: string(name='CloudCode', example='hcloud'),
  logCodes?: string(name='LogCodes', example='["cloud_siem_qcloud_cfw_alert_log"]'),
  prodCode?: string(name='ProdCode', example='qcloud_waf'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model SubmitImportLogTasksResponseBody = {
  data?: {
    count?: int32(name='Count', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model SubmitImportLogTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitImportLogTasksResponseBody(name='body'),
}

async function submitImportLogTasksWithOptions(request: SubmitImportLogTasksRequest, runtime: Util.RuntimeOptions): SubmitImportLogTasksResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accounts)) {
    body['Accounts'] = request.accounts;
  }
  if (!Util.isUnset(request.autoImported)) {
    body['AutoImported'] = request.autoImported;
  }
  if (!Util.isUnset(request.cloudCode)) {
    body['CloudCode'] = request.cloudCode;
  }
  if (!Util.isUnset(request.logCodes)) {
    body['LogCodes'] = request.logCodes;
  }
  if (!Util.isUnset(request.prodCode)) {
    body['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitImportLogTasks',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitImportLogTasks(request: SubmitImportLogTasksRequest): SubmitImportLogTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitImportLogTasksWithOptions(request, runtime);
}

model SubmitJobsRequest {
  jsonParam?: string(name='JsonParam', example='[{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":120xxxxxxx,"Deleted":0},{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":121xxxxxxxx,"Deleted":0},{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":122xxxxxxx,"Deleted":1}]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model SubmitJobsResponseBody = {
  data?: int32(name='Data', example='5'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model SubmitJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitJobsResponseBody(name='body'),
}

async function submitJobsWithOptions(request: SubmitJobsRequest, runtime: Util.RuntimeOptions): SubmitJobsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jsonParam)) {
    body['JsonParam'] = request.jsonParam;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitJobs',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitJobs(request: SubmitJobsRequest): SubmitJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitJobsWithOptions(request, runtime);
}

model UpdateAutomateResponseConfigStatusRequest {
  ids?: string(name='Ids', example='[123,345]'),
  inUse?: boolean(name='InUse', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdateAutomateResponseConfigStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAutomateResponseConfigStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutomateResponseConfigStatusResponseBody(name='body'),
}

async function updateAutomateResponseConfigStatusWithOptions(request: UpdateAutomateResponseConfigStatusRequest, runtime: Util.RuntimeOptions): UpdateAutomateResponseConfigStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ids)) {
    body['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.inUse)) {
    body['InUse'] = request.inUse;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAutomateResponseConfigStatus',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAutomateResponseConfigStatus(request: UpdateAutomateResponseConfigStatusRequest): UpdateAutomateResponseConfigStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAutomateResponseConfigStatusWithOptions(request, runtime);
}

model UpdateWhiteRuleListRequest {
  expression?: string(name='Expression', example='[
      {
            "alertName": "webshell",
            "alertNameId": "webshell",
            "alertType": "command",
            "alertTypeId": "command",
            "expression": {
                  "status": 1,
                  "conditions": [
                        {
                              "isNot": false,
                              "left": {
                                    "value": "file_path"
                              },
                              "operator": "gt",
                              "right": {
                                    "value": "cp"
                              }
                        }
                  ]
            }
      }
]'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  whiteRuleId?: long(name='WhiteRuleId', example='123456789'),
}

model UpdateWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWhiteRuleListResponseBody(name='body'),
}

async function updateWhiteRuleListWithOptions(request: UpdateWhiteRuleListRequest, runtime: Util.RuntimeOptions): UpdateWhiteRuleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.expression)) {
    body['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.whiteRuleId)) {
    body['WhiteRuleId'] = request.whiteRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWhiteRuleList',
    version = '2022-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWhiteRuleList(request: UpdateWhiteRuleListRequest): UpdateWhiteRuleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWhiteRuleListWithOptions(request, runtime);
}

