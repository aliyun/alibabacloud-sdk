/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cloud-siem';
  @version = '2022-06-16';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDataSourceRequest {
  accountId?: string(name='AccountId', example='123xxxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceName?: string(name='DataSourceInstanceName', example='XX北京kafka', position='Body'),
  dataSourceInstanceParams?: string(name='DataSourceInstanceParams', example='[{"paraCode":"region_code","paraValue":"ap-guangzhou"}]', position='Body'),
  dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='XX云云防火墙上海实例', position='Body'),
  dataSourceType?: string(name='DataSourceType', example='obs', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model AddDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDataSourceResponseBody(name='body'),
}

async function addDataSource(request: AddDataSourceRequest): AddDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataSource', 'POST', '/', 'json', true, 'form', request);
}

model AddDataSourceLogRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  dataSourceInstanceLogs: string(name='DataSourceInstanceLogs', example='[{"LogCode":"cloud_siem_qcloud_waf_alert_log","LogParas":"[{\\"ParaCode\\":\\"api_name\\",\\"ParaValue\\":\\"GetAttackDownloadRecords\\"}]"}]', position='Body'),
  logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model AddDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDataSourceLogResponseBody(name='body'),
}

async function addDataSourceLog(request: AddDataSourceLogRequest): AddDataSourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataSourceLog', 'POST', '/', 'json', true, 'form', request);
}

model AddUserRequest {
  addedUserId: long(name='AddedUserId', example='123XXXXXXXX。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model AddUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserResponseBody(name='body'),
}

async function addUser(request: AddUserRequest): AddUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUser', 'POST', '/', 'json', true, 'form', request);
}

model AddUserSourceLogConfigRequest {
  deleted?: int32(name='Deleted', example='0', position='Body'),
  disPlayLine?: string(name='DisPlayLine', example='cn-shanghai.siem-project.siem-logstore', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc', position='Body'),
  sourceLogInfo: string(name='SourceLogInfo', example='{"project":"wafnew-project-1335759343513432-cn-hangzhou","logStore":"wafnew-logstore","regionCode":"cn-hangzhou","prodCode":"waf"}', position='Body'),
  sourceProdCode?: string(name='SourceProdCode', example='sas', position='Body'),
  subUserId: long(name='SubUserId', example='123XXXXXX', position='Body'),
}

model AddUserSourceLogConfigResponseBody = {
  data?: {
    diplayLine?: string(name='DiplayLine', example='cn-shanghai.siem-project.siem-logstore'),
    displayed?: boolean(name='Displayed', example='0'),
    imported?: boolean(name='Imported', example='0'),
    mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
    sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
    sourceProdCode?: string(name='SourceProdCode', example='sas'),
    subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
    subUserName?: string(name='SubUserName', example='sas_account_xxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddUserSourceLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserSourceLogConfigResponseBody(name='body'),
}

async function addUserSourceLogConfig(request: AddUserSourceLogConfigRequest): AddUserSourceLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserSourceLogConfig', 'POST', '/', 'json', true, 'form', request);
}

model BatchJobCheckRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Body'),
  submitId?: string(name='SubmitId', example='xxxxx_folder_xxxxxx', position='Body'),
}

model BatchJobCheckResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_logstore_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobCheckResponseBody(name='body'),
}

async function batchJobCheck(request: BatchJobCheckRequest): BatchJobCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchJobCheck', 'POST', '/', 'json', true, 'form', request);
}

model BatchJobSubmitRequest {
  jsonConfig?: string(name='JsonConfig', example='{{"autoSubmit":false,"configName":"test_builder","folderConfig":{"folderId":"rd-EUx7Qp","prodConfig":[{"allLogs":false,"allRegions":false,"logConfig":[{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}],"prodCode":"rds","regions":["cn-shanghai"]},{"allLogs":true,"allRegions":true,"prodCode":"sas"}],"type":"folder"},"listenRdChange":false,"logConfigs":{"cloud_siem_rds_audit_log":{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}}}}', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Body'),
}

model BatchJobSubmitResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    configList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogstoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_cfw_flow'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc-test-logstore'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-test-project'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ConfigList'),
    submitId?: string(name='SubmitId', example='BATCH_JOB_XXXXXX'),
    taskCount?: int32(name='TaskCount', example='20'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobSubmitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobSubmitResponseBody(name='body'),
}

async function batchJobSubmit(request: BatchJobSubmitRequest): BatchJobSubmitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchJobSubmit', 'POST', '/', 'json', true, 'form', request);
}

model CloseDeliveryRequest {
  logCode?: string(name='LogCode', description='The log code of the cloud service, such as the code of the process log for Security Center. You can obtain the log code from the response of the ListDelivery operation.', example='cloud_siem_aegis_proc', position='Body'),
  productCode: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='sas', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model CloseDeliveryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the threat analysis feature was disabled. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='F375A043-4F5B-55F2-A564-CC47FFC6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CloseDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseDeliveryResponseBody(name='body'),
}

async function closeDelivery(request: CloseDeliveryRequest): CloseDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseDelivery', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAutomateResponseConfigRequest {
  id?: long(name='Id', example='123', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteAutomateResponseConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAutomateResponseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutomateResponseConfigResponseBody(name='body'),
}

async function deleteAutomateResponseConfig(request: DeleteAutomateResponseConfigRequest): DeleteAutomateResponseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutomateResponseConfig', 'POST', '/', 'json', true, 'form', request);
}

model DeleteBindAccountRequest {
  accessId: string(name='AccessId', example='ABCXXXXXXXX', position='Body'),
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  bindId?: long(name='BindId', example='10', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteBindAccountResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBindAccountResponseBody(name='body'),
}

async function deleteBindAccount(request: DeleteBindAccountRequest): DeleteBindAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBindAccount', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCustomizeRuleRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Body'),
  ruleId?: long(name='RuleId', example='123456789', position='Body'),
}

model DeleteCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: int32(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomizeRuleResponseBody(name='body'),
}

async function deleteCustomizeRule(request: DeleteCustomizeRuleRequest): DeleteCustomizeRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomizeRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSourceRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSourceLogRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  logInstanceId: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceLogResponseBody(name='body'),
}

async function deleteDataSourceLog(request: DeleteDataSourceLogRequest): DeleteDataSourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSourceLog', 'POST', '/', 'json', true, 'form', request);
}

model DeleteQuickQueryRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  searchName: string(name='SearchName', description='The name of the saved search.', example='display_login_ip_search', position='Body'),
}

model DeleteQuickQueryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the saved search is deleted. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQuickQueryResponseBody(name='body'),
}

async function deleteQuickQuery(request: DeleteQuickQueryRequest): DeleteQuickQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQuickQuery', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserRequest {
  addedUserId: long(name='AddedUserId', example='123XXXXXXXX', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWhiteRuleListRequest {
  id: long(name='Id', example='123456789', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWhiteRuleListResponseBody(name='body'),
}

async function deleteWhiteRuleList(request: DeleteWhiteRuleListRequest): DeleteWhiteRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWhiteRuleList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAggregateFunctionRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAggregateFunctionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      function?: string(name='Function', example='count'),
      functionName?: string(name='FunctionName', example='Count'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAggregateFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAggregateFunctionResponseBody(name='body'),
}

async function describeAggregateFunction(request: DescribeAggregateFunctionRequest): DescribeAggregateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAggregateFunction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSceneRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAlertSceneResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertName?: string(name='AlertName', example='login_common_ip'),
      alertNameId?: string(name='AlertNameId', example='login_common_ip'),
      alertTile?: string(name='AlertTile', example='unusual login-login_common_ip'),
      alertTileId?: string(name='AlertTileId', example='unusual login-login_common_ip'),
      alertType?: string(name='AlertType', example='unusual login'),
      alertTypeId?: string(name='AlertTypeId', example='unusual login'),
      targets?: [ 
        {
          name?: string(name='Name', example='HOST UUID'),
          type?: string(name='Type', example='host_uuid'),
          value?: string(name='Value', example='441862da-a539-4cc0-a00d-47395582****'),
          values?: [ string ](name='Values', example='["441862da-a539-4cc0-a00d-473955826881"]'),
        }
      ](name='Targets', example='[{"Type": "host_uuid","Value": "441862da-a539-4cc0-a00d-473955826881","Values": ["441862da-a539-4cc0-a00d-473955826881"],"Name": "${aliyun.siem.entity.host_uuid}"}]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSceneResponseBody(name='body'),
}

async function describeAlertScene(request: DescribeAlertSceneRequest): DescribeAlertSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertScene', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSceneByEventRequest {
  incidentUuid: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAlertSceneByEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertName?: string(name='AlertName', example='login_common_ip'),
      alertNameId?: string(name='AlertNameId', example='login_common_ip'),
      alertTile?: string(name='AlertTile', example='Unusual Logon-login_common_ip'),
      alertTileId?: string(name='AlertTileId', example='Unusual Logon-login_common_ip'),
      alertType?: string(name='AlertType', example='Unusual Logon'),
      alertTypeId?: string(name='AlertTypeId', example='Unusual Logon'),
      targets?: [ 
        {
          name?: string(name='Name', example='host uuid'),
          type?: string(name='Type', example='host_uuid'),
          value?: string(name='Value', example='441862da-a539-4cc0-a00d-47395582****'),
          values?: [ string ](name='Values', example='["441862da-a539-4cc0-a00d-473955826881"]'),
        }
      ](name='Targets', example='[{"Type": "host_uuid","Value": "441862da-a539-4cc0-a00d-473955826881","Values": ["441862da-a539-4cc0-a00d-473955826881"],"Name": "${aliyun.siem.entity.host_uuid}"}]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSceneByEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSceneByEventResponseBody(name='body'),
}

async function describeAlertSceneByEvent(request: DescribeAlertSceneByEventRequest): DescribeAlertSceneByEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertSceneByEvent', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSourceRequest {
  endTime?: long(name='EndTime', example='1577808000000', position='Body'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  startTime?: long(name='StartTime', example='1577808000000', position='Body'),
}

model DescribeAlertSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      source?: string(name='Source', example='aliyun.siem.alert_datasource.sas'),
      sourceName?: string(name='SourceName', example='sas'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSourceResponseBody(name='body'),
}

async function describeAlertSource(request: DescribeAlertSourceRequest): DescribeAlertSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertSource', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSourceWithEventRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAlertSourceWithEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      source?: string(name='Source', example='aliyun.siem.alert_datasource.sas'),
      sourceName?: string(name='SourceName', example='sas'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSourceWithEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSourceWithEventResponseBody(name='body'),
}

async function describeAlertSourceWithEvent(request: DescribeAlertSourceWithEventRequest): DescribeAlertSourceWithEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertSourceWithEvent', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertTypeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAlertTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertType?: string(name='AlertType', example='WEBSHELL'),
      alertTypeMds?: string(name='AlertTypeMds', example='siem_rule_type_process_abnormal_command'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertTypeResponseBody(name='body'),
}

async function describeAlertType(request: DescribeAlertTypeRequest): DescribeAlertTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertType', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertsRequest {
  alertTitle?: string(name='AlertTitle', example='Unusual Logon-login_common_account', position='Body'),
  alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  endTime?: long(name='EndTime', example='1577808000000', position='Body'),
  isDefend?: string(name='IsDefend', position='Body'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  source?: string(name='Source', example='sas', position='Body'),
  startTime?: long(name='StartTime', example='1577808000000', position='Body'),
  subUserId?: string(name='SubUserId', example='176555323***', position='Body'),
}

model DescribeAlertsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsResponseBody(name='body'),
}

async function describeAlerts(request: DescribeAlertsRequest): DescribeAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlerts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertsCountRequest {
  endTime?: long(name='EndTime', example='1577808000000', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  startTime?: long(name='StartTime', example='1577808000000', position='Body'),
}

model DescribeAlertsCountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    all?: long(name='All', example='75'),
    high?: long(name='High', example='25'),
    low?: long(name='Low', example='25'),
    medium?: long(name='Medium', example='25'),
    productNum?: int32(name='ProductNum', example='3'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsCountResponseBody(name='body'),
}

async function describeAlertsCount(request: DescribeAlertsCountRequest): DescribeAlertsCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertsCount', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertsWithEntityRequest {
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  entityId?: long(name='EntityId', example='123456789', position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa', position='Body'),
}

model DescribeAlertsWithEntityResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsWithEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsWithEntityResponseBody(name='body'),
}

async function describeAlertsWithEntity(request: DescribeAlertsWithEntityRequest): DescribeAlertsWithEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertsWithEntity', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertsWithEventRequest {
  alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  isDefend?: string(name='IsDefend', position='Body'),
  level?: [ string ](name='Level', example='["serious","suspicious","remind"]', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  source?: string(name='Source', example='sas', position='Body'),
  subUserId?: long(name='SubUserId', example='176555323***', position='Body'),
}

model DescribeAlertsWithEventResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AlertInfoList', example='aliyun'),
        alertLevel?: string(name='AlertLevel', example='remind'),
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        endTime?: string(name='EndTime', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', example='127608589417****'),
        occurTime?: string(name='OccurTime', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertsWithEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsWithEventResponseBody(name='body'),
}

async function describeAlertsWithEvent(request: DescribeAlertsWithEventRequest): DescribeAlertsWithEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertsWithEvent', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAttackTimeLineRequest {
  assetName?: string(name='AssetName', example='zsw-agentless-centos****', position='Body'),
  endTime?: long(name='EndTime', example='1577808000000', position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  startTime?: long(name='StartTime', example='1577803000000', position='Body'),
}

model DescribeAttackTimeLineResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertLevel?: string(name='AlertLevel', example='remind'),
      alertName?: string(name='AlertName', example='Try SNMP weak password'),
      alertNameCode?: string(name='AlertNameCode', example='security_event_config.event_name.webshell'),
      alertNameEn?: string(name='AlertNameEn', example='Try SNMP weak password'),
      alertSrcProd?: string(name='AlertSrcProd', example='sas'),
      alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
      alertTime?: long(name='AlertTime', example='2021-01-06 16:37:29'),
      alertTitle?: string(name='AlertTitle', example='Scan-Try SNMP weak password'),
      alertTitleEn?: string(name='AlertTitleEn', example='Scan-Try SNMP weak password'),
      alertType?: string(name='AlertType', example='Scan'),
      alertTypeCode?: string(name='AlertTypeCode', example='security_event_config.event_name.webshellName'),
      alertTypeEn?: string(name='AlertTypeEn', example='Scan'),
      alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
      assetId?: string(name='AssetId', example='0616caeb-acb8-45e0-8520-4ee5fbe251f0'),
      assetList?: string(name='AssetList', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
      assetName?: string(name='AssetName', example='zsw-agentless-centos****'),
      attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
      cloudCode?: string(name='CloudCode', example='aliyun'),
      incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
      logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAttackTimeLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAttackTimeLineResponseBody(name='body'),
}

async function describeAttackTimeLine(request: DescribeAttackTimeLineRequest): DescribeAttackTimeLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAttackTimeLine', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAuthRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAuthResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='4F539347-7D9A-51EA-8ABF-5D5507045C5C'),
}

model DescribeAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuthResponseBody(name='body'),
}

async function describeAuth(request: DescribeAuthRequest): DescribeAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuth', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAutomateResponseConfigCounterRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAutomateResponseConfigCounterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    all?: long(name='All', example='20'),
    online?: long(name='Online', example='10'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigCounterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigCounterResponseBody(name='body'),
}

async function describeAutomateResponseConfigCounter(request: DescribeAutomateResponseConfigCounterRequest): DescribeAutomateResponseConfigCounterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutomateResponseConfigCounter', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAutomateResponseConfigFeatureRequest {
  autoResponseType?: string(name='AutoResponseType', example='event', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAutomateResponseConfigFeatureResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      dataType?: string(name='DataType', example='varchar'),
      feature?: string(name='Feature', example='alert_desc'),
      rightValueEnums?: [ 
        {
          value?: string(name='Value', example='serious'),
          valueMds?: string(name='ValueMds', example='aliyun.siem.automate.feature.alert_level.serious'),
        }
      ](name='RightValueEnums'),
      supportOperators?: [ 
        {
          hasRightValue?: boolean(name='HasRightValue', example='false'),
          index?: int32(name='Index', example='3'),
          operator?: string(name='Operator', example='<='),
          operatorDescCn?: string(name='OperatorDescCn', example='larger than or equal to'),
          operatorDescEn?: string(name='OperatorDescEn', example='larger than or equal to'),
          operatorName?: string(name='OperatorName', example='<='),
          supportDataType?: string(name='SupportDataType', example='varchar'),
          supportTag?: [ string ](name='SupportTag', example='[AGGREGATE]'),
        }
      ](name='SupportOperators'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigFeatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigFeatureResponseBody(name='body'),
}

async function describeAutomateResponseConfigFeature(request: DescribeAutomateResponseConfigFeatureRequest): DescribeAutomateResponseConfigFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutomateResponseConfigFeature', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAutomateResponseConfigPlayBooksRequest {
  autoResponseType?: string(name='AutoResponseType', example='event', position='Body'),
  entityType?: string(name='EntityType', example='ip', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAutomateResponseConfigPlayBooksResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      description?: string(name='Description', example='Waf Block IP'),
      displayName?: string(name='DisplayName', example='WafBlockIP'),
      name?: string(name='Name', example='WafBlockIP'),
      paramType?: string(name='ParamType', example='template-ip'),
      uuid?: string(name='Uuid', example='system_aliyun_clb_process_book'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAutomateResponseConfigPlayBooksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigPlayBooksResponseBody(name='body'),
}

async function describeAutomateResponseConfigPlayBooks(request: DescribeAutomateResponseConfigPlayBooksRequest): DescribeAutomateResponseConfigPlayBooksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutomateResponseConfigPlayBooks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudSiemAssetsRequest {
  assetType?: string(name='AssetType', example='ip', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeCloudSiemAssetsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='1276085894174392'),
        assetId?: string(name='AssetId', example='0616caeb-acb8-45e0-8520-4ee5fbe251f0'),
        assetInfo?: [ 
          {
            key?: string(name='Key', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', example='Trojan Path'),
            values?: string(name='Values', example='/root/test33.php'),
          }
        ](name='AssetInfo', example='[{"KeyName": "${aliyun.siem.asset.asset_name}","Values": "zsw-agentless-ubuntu20","Key": "asset_name"}]'),
        assetName?: string(name='AssetName', example='zsw-agentless-centos****'),
        assetType?: string(name='AssetType', example='domain'),
        cloudCode?: string(name='CloudCode', example='aliyun'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        subUserId?: long(name='SubUserId', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemAssetsResponseBody(name='body'),
}

async function describeCloudSiemAssets(request: DescribeCloudSiemAssetsRequest): DescribeCloudSiemAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudSiemAssets', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudSiemAssetsCounterRequest {
  incidentUuid: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeCloudSiemAssetsCounterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      assetNum?: int32(name='AssetNum', example='1'),
      assetType?: string(name='AssetType', example='domain'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemAssetsCounterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemAssetsCounterResponseBody(name='body'),
}

async function describeCloudSiemAssetsCounter(request: DescribeCloudSiemAssetsCounterRequest): DescribeCloudSiemAssetsCounterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudSiemAssetsCounter', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudSiemEventDetailRequest {
  incidentUuid: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeCloudSiemEventDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertNum?: int32(name='AlertNum', example='4'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    assetNum?: int32(name='AssetNum', example='4'),
    attCkLabels?: [ string ](name='AttCkLabels', example='["T1595.002 Vulnerability Scanning"]'),
    dataSources?: [ string ](name='DataSources', example='[sas,waf]'),
    description?: string(name='Description', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
    descriptionEn?: string(name='DescriptionEn', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
    extContent?: string(name='ExtContent', example='{"event_transfer_type":"customize_rule"}'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
    incidentNameEn?: string(name='IncidentNameEn', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
    incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
    remark?: string(name='Remark', example='dealed'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
    threatScore?: float(name='ThreatScore', example='90.2'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemEventDetailResponseBody(name='body'),
}

async function describeCloudSiemEventDetail(request: DescribeCloudSiemEventDetailRequest): DescribeCloudSiemEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudSiemEventDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudSiemEventsRequest {
  assetId?: string(name='AssetId', example='6c740667-80b2-476d-8924-2e706feb****', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  endTime?: long(name='EndTime', example='1577808000000', position='Body'),
  eventName?: string(name='EventName', example='ECS unusual log in', position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  order?: string(name='Order', example='desc', position='Body'),
  orderField?: string(name='OrderField', example='ThreatScore', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  startTime?: long(name='StartTime', example='1577808000000', position='Body'),
  status?: int32(name='Status', example='0', position='Body'),
  threadLevel?: [ string ](name='ThreadLevel', example='["serious","suspicious","remind"]', position='Body'),
}

model DescribeCloudSiemEventsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertNum?: int32(name='AlertNum', example='4'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        assetNum?: int32(name='AssetNum', example='4'),
        attCkLabels?: [ string ](name='AttCkLabels', example='["T1595.002 Vulnerability Scanning"]'),
        dataSources?: [ string ](name='DataSources', example='[sas,waf]'),
        description?: string(name='Description', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
        descriptionEn?: string(name='DescriptionEn', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
        extContent?: string(name='ExtContent', example='{"event_transfer_type":"customize_rule"}'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentNameEn?: string(name='IncidentNameEn', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        remark?: string(name='Remark', example='dealed'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
        threatScore?: float(name='ThreatScore', example='90.2'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCloudSiemEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemEventsResponseBody(name='body'),
}

async function describeCloudSiemEvents(request: DescribeCloudSiemEventsRequest): DescribeCloudSiemEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudSiemEvents', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCsImportedProdStatusByUserRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceLogProd?: string(name='SourceLogProd', example='sas', position='Body'),
  userId?: long(name='UserId', example='123XXXXXX', position='Body'),
}

model DescribeCsImportedProdStatusByUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeCsImportedProdStatusByUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCsImportedProdStatusByUserResponseBody(name='body'),
}

async function describeCsImportedProdStatusByUser(request: DescribeCsImportedProdStatusByUserRequest): DescribeCsImportedProdStatusByUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCsImportedProdStatusByUser', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomizeRuleRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  ruleId?: long(name='RuleId', example='123456789', position='Body'),
}

model DescribeCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertType?: string(name='AlertType', example='WEBSHELL'),
    alertTypeMds?: string(name='AlertTypeMds', example='siem_rule_type_process_abnormal_command'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
    eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
    eventTransferType?: string(name='EventTransferType', example='allToSingle'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    id?: long(name='Id', example='123456789'),
    logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
    logSourceMds?: string(name='LogSourceMds', example='sas.cloudsiem.prod.cloud_siem_aegis_sas_alert'),
    logType?: string(name='LogType', example='ALERT_ACTIVITY'),
    logTypeMds?: string(name='LogTypeMds', example='security_event_config.event_name.webshellName_clientav'),
    queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
    ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
    ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
    ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
    ruleName?: string(name='RuleName', example='waf_scan'),
    ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
    ruleType?: string(name='RuleType', example='customize'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleResponseBody(name='body'),
}

async function describeCustomizeRule(request: DescribeCustomizeRuleRequest): DescribeCustomizeRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizeRule', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomizeRuleCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeCustomizeRuleCountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    highRuleNum?: int32(name='HighRuleNum', example='12'),
    inUseRuleNum?: int32(name='InUseRuleNum', example='20'),
    lowRuleNum?: int32(name='LowRuleNum', example='3'),
    mediumRuleNum?: int32(name='MediumRuleNum', example='5'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleCountResponseBody(name='body'),
}

async function describeCustomizeRuleCount(request: DescribeCustomizeRuleCountRequest): DescribeCustomizeRuleCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizeRuleCount', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    id?: long(name='Id', example='123456789'),
    simulateData?: string(name='SimulateData', example='[{"key1":"value1","key2":"value2","key3":"value3","key4":"value4","key5":"value5"}]'),
    status?: int32(name='Status', example='0'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleTestResponseBody(name='body'),
}

async function describeCustomizeRuleTest(request: DescribeCustomizeRuleTestRequest): DescribeCustomizeRuleTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizeRuleTest', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomizeRuleTestHistogramRequest {
  id?: long(name='Id', example='123456789', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeCustomizeRuleTestHistogramResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      count?: long(name='Count', example='125'),
      from?: long(name='From', example='1599897188'),
      to?: long(name='To', example='1599997188'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCustomizeRuleTestHistogramResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleTestHistogramResponseBody(name='body'),
}

async function describeCustomizeRuleTestHistogram(request: DescribeCustomizeRuleTestHistogramRequest): DescribeCustomizeRuleTestHistogramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizeRuleTestHistogram', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDataSourceInstanceRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeDataSourceInstanceResponseBody = {
  data?: {
    accountId?: string(name='AccountId', example='123xxxxxxx'),
    cloudCode?: string(name='CloudCode', example='hcloud'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
    dataSourceInstanceParams?: [ 
      {
        paraCode?: string(name='ParaCode', example='region_code'),
        paraValue?: string(name='ParaValue', example='ap-guangzhou'),
      }
    ](name='DataSourceInstanceParams'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeDataSourceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSourceInstanceResponseBody(name='body'),
}

async function describeDataSourceInstance(request: DescribeDataSourceInstanceRequest): DescribeDataSourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourceInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDataSourceParametersRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceType: string(name='DataSourceType', example='obs', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeDataSourceParametersResponseBody = {
  data?: [ 
    {
      canEditted?: int32(name='CanEditted', example='wafApi'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
      defaultValue?: string(name='DefaultValue', example='wafApi'),
      disabled?: boolean(name='Disabled', example='wafApi'),
      formatCheck?: string(name='FormatCheck', example='email'),
      hit?: string(name='Hit', example='obs docment'),
      paraCode?: string(name='ParaCode', example='region_code'),
      paraLevel?: int32(name='ParaLevel', example='1'),
      paraName?: string(name='ParaName', example='region local'),
      paraType?: string(name='ParaType', example='string'),
      paramValue?: [ 
        {
          label?: string(name='Label', example='guangzhou'),
          value?: string(name='Value', example='ap-guangzhou'),
        }
      ](name='ParamValue'),
      required?: int32(name='Required', example='string'),
      title?: string(name='Title', example='obs bucket name'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeDataSourceParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSourceParametersResponseBody(name='body'),
}

async function describeDataSourceParameters(request: DescribeDataSourceParametersRequest): DescribeDataSourceParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourceParameters', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDisposeAndPlaybookRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  entityType?: string(name='EntityType', example='ip', position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeDisposeAndPlaybookResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertNum?: int32(name='AlertNum', example='1'),
        dispose?: string(name='Dispose', example='192.168.1.1'),
        entityId?: long(name='EntityId', example='12345'),
        entityInfo?: map[string]any(name='EntityInfo', example='{"file_path": "c:/www/leixi.jsp","file_hash": "aa0ca926ad948cd820e0a3d9a18c09d0","host_uuid": "efed2cf7-0b77-45d9-a97b-d2cf246bcbb3","malware_type": "${aliyun.siem.sas.alert_tag.webshell}","host_name": "launch-advisor-20230531"}'),
        opcodeMap?: map[string]string(name='OpcodeMap', example='12345'),
        opcodeSet?: [ string ](name='OpcodeSet', example='[1,3]'),
        playbookList?: [ 
          {
            description?: string(name='Description', example='WafBlockIP'),
            displayName?: string(name='DisplayName', example='WafBlockIP'),
            name?: string(name='Name', example='kill_process_isolate_file'),
            opCode?: string(name='OpCode', example='7'),
            opLevel?: string(name='OpLevel', example='2'),
            taskConfig?: string(name='TaskConfig', example='{"opCode":"3"}'),
            wafPlaybook?: boolean(name='WafPlaybook', example='false'),
          }
        ](name='PlaybookList', example='[{"name":"云安全中心-云服务器安全","code":"1"}]'),
        scope?: [ any ](name='Scope', example='176618589410****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDisposeAndPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisposeAndPlaybookResponseBody(name='body'),
}

async function describeDisposeAndPlaybook(request: DescribeDisposeAndPlaybookRequest): DescribeDisposeAndPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDisposeAndPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDisposeStrategyPlaybookRequest {
  endTime: long(name='EndTime', example='1577808000000', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  startTime: long(name='StartTime', example='1577808000000', position='Body'),
}

model DescribeDisposeStrategyPlaybookResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      playbookName?: string(name='PlaybookName', example='WafBlockIP'),
      playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDisposeStrategyPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisposeStrategyPlaybookResponseBody(name='body'),
}

async function describeDisposeStrategyPlaybook(request: DescribeDisposeStrategyPlaybookRequest): DescribeDisposeStrategyPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDisposeStrategyPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEntityInfoRequest {
  entityId?: long(name='EntityId', example='12345', position='Body'),
  entityIdentity?: string(name='EntityIdentity', example='test22.php', position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa', position='Body'),
}

model DescribeEntityInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    entityId?: long(name='EntityId', example='12345'),
    entityInfo?: map[string]any(name='EntityInfo', example='{ location: "xian", net_connect_dir: "in", malware_type: "${aliyun.siem.sas.alert_tag.login_unusual_account}" }'),
    entityType?: string(name='EntityType', example='ip'),
    tipInfo?: map[string]any(name='TipInfo', example='{
      "Ip": {
            "queryHot": "0",
            "country": "China",
            "province": "shanxi",
            "ip": "221.11.17.122",
            "asn": "4837",
            "asn_label": "CHINA169-Backbone - CHINA UNICOM China169 Backbone, CN"
      }
}'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEntityInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEntityInfoResponseBody(name='body'),
}

async function describeEntityInfo(request: DescribeEntityInfoRequest): DescribeEntityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEntityInfo', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEventCountByThreatLevelRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeEventCountByThreatLevelResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    eventNum?: long(name='EventNum', example='100'),
    highLevelEventNum?: long(name='HighLevelEventNum', example='20'),
    lowLevelEventNum?: long(name='LowLevelEventNum', example='52'),
    mediumLevelEventNum?: long(name='MediumLevelEventNum', example='3'),
    undealEventNum?: long(name='UndealEventNum', example='75'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEventCountByThreatLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventCountByThreatLevelResponseBody(name='body'),
}

async function describeEventCountByThreatLevel(request: DescribeEventCountByThreatLevelRequest): DescribeEventCountByThreatLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventCountByThreatLevel', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEventDisposeRequest {
  currentPage?: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=500, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeEventDisposeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    eventDispose?: [ any ](name='EventDispose', example='{ playbookName: "使用安全组封禁入方向IP", sophonTaskId: "400442a5-4f98-45ed-97db-5ab117eb0b8f", … }'),
    receiverInfo?: {
      channel?: string(name='Channel', example='message'),
      gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
      gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
      id?: long(name='Id', example='123'),
      incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
      messageTitle?: string(name='MessageTitle', example='siem event dealed message'),
      receiver?: string(name='Receiver', example='138xxxxxx'),
      status?: int32(name='Status', example='1'),
    }(name='ReceiverInfo'),
    remark?: string(name='Remark', example='dealed'),
    status?: int32(name='Status', example='0'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEventDisposeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventDisposeResponseBody(name='body'),
}

async function describeEventDispose(request: DescribeEventDisposeRequest): DescribeEventDisposeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventDispose', 'POST', '/', 'json', true, 'form', request);
}

model DescribeImportedLogCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeImportedLogCountResponseBody = {
  data?: {
    importedLogCount?: int32(name='ImportedLogCount', example='10'),
    totalLogCount?: int32(name='TotalLogCount', example='59'),
    unImportedLogCount?: int32(name='UnImportedLogCount', example='49'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeImportedLogCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImportedLogCountResponseBody(name='body'),
}

async function describeImportedLogCount(request: DescribeImportedLogCountRequest): DescribeImportedLogCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImportedLogCount', 'POST', '/', 'json', true, 'form', request);
}

model DescribeJobStatusRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Body'),
  submitId: string(name='SubmitId', example='xxxxx_folder_xxxxxx', position='Body'),
}

model DescribeJobStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_project_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123XXXXX'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DescribeJobStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeJobStatusResponseBody(name='body'),
}

async function describeJobStatus(request: DescribeJobStatusRequest): DescribeJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogFieldsRequest {
  logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert', position='Body'),
  logType?: string(name='LogType', example='cloud_siem_aegis_sas_alert', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeLogFieldsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      activityName?: string(name='ActivityName', example='HTTP_ACTIVITY'),
      fieldDesc?: string(name='FieldDesc', example='sas.cloudsiem.prod.activity_name'),
      fieldName?: string(name='FieldName', example='activity_name'),
      fieldType?: string(name='FieldType', example='varchar'),
      logCode?: string(name='LogCode', example='cloud_siem_aegis_sas_alert'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogFieldsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogFieldsResponseBody(name='body'),
}

async function describeLogFields(request: DescribeLogFieldsRequest): DescribeLogFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogFields', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogSourceRequest {
  logType?: string(name='LogType', example='HTTP_ACTIVITY', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeLogSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
      logSourceName?: string(name='LogSourceName', example='sas.cloudsiem.prod.cloud_siem_aegis_sas_alert'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogSourceResponseBody(name='body'),
}

async function describeLogSource(request: DescribeLogSourceRequest): DescribeLogSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogSource', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogStoreRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model DescribeLogStoreResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    appendMeta?: boolean(name='AppendMeta', description='Indicates whether the following time points are added after the log arrives: the time points when the public IP address of the client and the log arrive. Valid values:

*   true
*   false', example='false'),
    autoSplit?: boolean(name='AutoSplit', description='Indicates whether the automatic sharding feature is enabled. Valid values:

*   true
*   false', example='false'),
    enableTracking?: boolean(name='EnableTracking', description='Indicates whether the web tracking feature is enabled to collect user information from browsers, iOS applications, or Android applications. Valid values:

*   true
*   false', example='false'),
    logStoreName?: string(name='LogStoreName', description='The name of the Logstore in Simple Log Service.', example='cloud-siem'),
    maxSplitShard?: int32(name='MaxSplitShard', description='The maximum number of shards that can be generated by using the automatic sharding feature.', example='64'),
    shardCount?: int32(name='ShardCount', description='The number of shards in Log Service.', example='2'),
    ttl?: int32(name='Ttl', description='The retention period of data. Unit: day.', example='180'),
  }(name='Data', description='The response of the threat analysis feature.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Request.Forbidden'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B9CBCEE-9225-5069-BC7F-880938A2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogStoreResponseBody(name='body'),
}

async function describeLogStore(request: DescribeLogStoreRequest): DescribeLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogStore', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogTypeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeLogTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      logType?: string(name='LogType', example='HTTP_ACTIVITY'),
      logTypeName?: string(name='LogTypeName', example='sas.cloudsiem.prod.http_activity'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeLogTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogTypeResponseBody(name='body'),
}

async function describeLogType(request: DescribeLogTypeRequest): DescribeLogTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogType', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOperatorsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sceneType?: string(name='SceneType', example='AGGREGATE', position='Body'),
}

model DescribeOperatorsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      index?: int32(name='Index', example='3'),
      operator?: string(name='Operator', example='<='),
      operatorDescCn?: string(name='OperatorDescCn', example='arger than or equal to'),
      operatorDescEn?: string(name='OperatorDescEn', example='larger than or equal to'),
      operatorName?: string(name='OperatorName', example='<='),
      supportDataType?: string(name='SupportDataType', example='varchar'),
      supportTag?: [ string ](name='SupportTag', example='[AGGREGATE]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOperatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOperatorsResponseBody(name='body'),
}

async function describeOperators(request: DescribeOperatorsRequest): DescribeOperatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperators', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProdCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeProdCountResponseBody = {
  data?: {
    aliyunProdCount?: int32(name='AliyunProdCount', example='19'),
    hcloudProdCount?: int32(name='HcloudProdCount', example='2'),
    qcloudProdCount?: int32(name='QcloudProdCount', example='2'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeProdCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProdCountResponseBody(name='body'),
}

async function describeProdCount(request: DescribeProdCountRequest): DescribeProdCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProdCount', 'POST', '/', 'json', true, 'form', request);
}

model DescribeScopeUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeScopeUsersResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      aliUid?: long(name='AliUid', example='123456789****'),
      domains?: [ string ](name='Domains', example='[123.com, 456.com]'),
      instanceId?: string(name='InstanceId', example='waf-cn-tl123ast****'),
      userName?: string(name='UserName', example='test001'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeScopeUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScopeUsersResponseBody(name='body'),
}

async function describeScopeUsers(request: DescribeScopeUsersRequest): DescribeScopeUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScopeUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServiceStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeServiceStatusResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceStatusResponseBody(name='body'),
}

async function describeServiceStatus(request: DescribeServiceStatusRequest): DescribeServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeStorageRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model DescribeStorageResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the projects and Logstores that are created for the threat analysis feature exist in Simple Log Service. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='CCEEE128-6607-503E-AAA6-C5E57D94****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageResponseBody(name='body'),
}

async function describeStorage(request: DescribeStorageRequest): DescribeStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStorage', 'POST', '/', 'json', true, 'form', request);
}

model DescribeUserBuyStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  subUserId?: long(name='SubUserId', example='123XXXXXX', position='Body'),
}

model DescribeUserBuyStatusResponseBody = {
  data?: {
    canBuy?: boolean(name='CanBuy', example='true'),
    capacity?: int32(name='Capacity', example='1024'),
    durationDays?: long(name='DurationDays', example='3'),
    endTime?: long(name='EndTime', example='1669823999000'),
    mainUserId?: long(name='MainUserId', example='123XXXXXX'),
    mainUserName?: string(name='MainUserName', example='sas_account_xxx'),
    masterUserId?: long(name='MasterUserId', example='123XXXXXX'),
    masterUserName?: string(name='MasterUserName', example='rd_master_xxx'),
    sasInstanceId?: string(name='SasInstanceId', example='sas-instance-xxxxx'),
    subUserId?: long(name='SubUserId', example='123XXXXXX'),
    subUserName?: string(name='SubUserName', example='sas_account_xxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='81D8EC0C-0804-51AD-8C38-17ED0BC74892'),
}

model DescribeUserBuyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBuyStatusResponseBody(name='body'),
}

async function describeUserBuyStatus(request: DescribeUserBuyStatusRequest): DescribeUserBuyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBuyStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWafScopeRequest {
  entityId?: long(name='EntityId', example='20617784', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeWafScopeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      aliuid?: long(name='Aliuid', example='127608589417****'),
      domains?: [ string ](name='Domains', example='[123.com, 456.com]'),
      instanceId?: string(name='InstanceId', example='waf-cn-tl123ast****'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeWafScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWafScopeResponseBody(name='body'),
}

async function describeWafScope(request: DescribeWafScopeRequest): DescribeWafScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWafScope', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWhiteRuleListRequest {
  alertName?: string(name='AlertName', example='Try SNMP weak password', position='Body'),
  alertType?: string(name='AlertType', example='scan', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameId?: string(name='AlertNameId', example='Try SNMP weak password'),
        alertType?: string(name='AlertType', example='scan'),
        alertTypeId?: string(name='AlertTypeId', example='scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        expression?: {
          conditions?: [ 
            {
              isNot?: boolean(name='IsNot', example='false'),
              itemId?: int32(name='ItemId', example='1'),
              left?: {
                isVar?: boolean(name='IsVar', example='true'),
                modifier?: string(name='Modifier', example='length'),
                modifierParam?: map[string]any(name='ModifierParam'),
                type?: string(name='Type', example='false'),
                value?: string(name='Value', example='ip'),
              }(name='Left'),
              operator?: string(name='Operator', example='REGEXP'),
              right?: {
                isVar?: boolean(name='IsVar', example='false'),
                modifier?: string(name='Modifier', example='length'),
                modifierParam?: map[string]any(name='ModifierParam'),
                type?: string(name='Type', example='String'),
                value?: string(name='Value', example='12345'),
              }(name='Right'),
            }
          ](name='Conditions'),
          logic?: string(name='Logic', example='(1&2)|(3&4)'),
        }(name='Expression', example='[{"conditions":[{"isNot":false,"itemId":0,"left":{"value":"host_uuid.host_name"},"operator":"containsString","right":{"value":"Cloud-MCH"}}]}]'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        status?: int32(name='Status', example='1'),
        subAliuid?: long(name='SubAliuid', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWhiteRuleListResponseBody(name='body'),
}

async function describeWhiteRuleList(request: DescribeWhiteRuleListRequest): DescribeWhiteRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWhiteRuleList', 'POST', '/', 'json', true, 'form', request);
}

model DoQuickFieldRequest {
  from: int32(name='From', description='The time when the quick analysis starts. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684376244', position='Body'),
  index: string(name='Index', description='The index field.', example='alert_level', position='Body'),
  page?: int32(name='Page', description='The number of pages to return. Default value: 1.', example='1', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  reverse?: boolean(name='Reverse', description='The sorting of the query and analysis results. By default, the results are sorted in descending order.', example='true', position='Body'),
  size?: int32(name='Size', description='The number of entries per page. Default value: 10.', example='10', position='Body'),
  to: int32(name='To', description='The time when the quick analysis ends. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684378090', position='Body'),
}

model DoQuickFieldResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    aggQueryd?: string(name='AggQueryd', description='This parameter is deprecated.', example='""'),
    completeOrNot?: boolean(name='CompleteOrNot', description='Indicates whether the quick analysis was successful. Valid values:

*   true
*   false', example='true'),
    count?: int32(name='Count', description='The number of entries returned.', example='10'),
    hasSQL?: boolean(name='HasSQL', description='This parameter is deprecated.', example='true'),
    keys?: [ string ](name='Keys', description='This parameter is deprecated.'),
    limited?: long(name='Limited', description='This parameter is deprecated.', example='0'),
    logs?: [ any ](name='Logs', description='The logs queried by using the quick analysis feature.'),
    pQuery?: string(name='PQuery', description='This parameter is deprecated.', example='""'),
    processedRows?: long(name='ProcessedRows', description='The number of entries queried.', example='1000'),
    queryMode?: int32(name='QueryMode', description='This parameter is deprecated.', example='0'),
    whereQuery?: string(name='WhereQuery', description='This parameter is deprecated.', example='* and alert_level : remind | with_pack_meta'),
  }(name='Data', description='The response of the quick analysis.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DoQuickFieldResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DoQuickFieldResponseBody(name='body'),
}

async function doQuickField(request: DoQuickFieldRequest): DoQuickFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DoQuickField', 'POST', '/', 'json', true, 'form', request);
}

model DoSelfDelegateRequest {
  aliUid: long(name='AliUid', description='The Alibaba Cloud account of an ordinary member of the threat analysis feature.', example='104423523217****', position='Body'),
  delegateOrNot: int32(name='DelegateOrNot', description='Specifies whether to use a delegated administrator account. Valid values:

*   1: use a delegated administrator account.
*   0: do not use a delegated administrator account.', example='1', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model DoSelfDelegateResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether a regular member is authorized. Valid values:

*   true: The member is authorized.
*   false: The authorization is canceled.', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B9CBCEE-9225-5069-BC7F-880938A2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DoSelfDelegateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DoSelfDelegateResponseBody(name='body'),
}

async function doSelfDelegate(request: DoSelfDelegateRequest): DoSelfDelegateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DoSelfDelegate', 'POST', '/', 'json', true, 'form', request);
}

model EnableAccessForCloudSiemRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model EnableAccessForCloudSiemResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model EnableAccessForCloudSiemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableAccessForCloudSiemResponseBody(name='body'),
}

async function enableAccessForCloudSiem(request: EnableAccessForCloudSiemRequest): EnableAccessForCloudSiemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAccessForCloudSiem', 'POST', '/', 'json', true, 'form', request);
}

model EnableServiceForCloudSiemRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model EnableServiceForCloudSiemResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model EnableServiceForCloudSiemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableServiceForCloudSiemResponseBody(name='body'),
}

async function enableServiceForCloudSiem(request: EnableServiceForCloudSiemRequest): EnableServiceForCloudSiemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableServiceForCloudSiem', 'POST', '/', 'json', true, 'form', request);
}

model GetCapacityRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model GetCapacityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    existLogStore?: boolean(name='ExistLogStore', description='Indicates whether the Logstores for the threat analysis feature exist on the user side. Valid values:

*   true: The logs are in the normal state. The log analysis feature is available.
*   false: The logs are being cleared. The log analysis feature is unavailable.', example='true'),
    preservedCapacity?: long(name='PreservedCapacity', description='The purchased storage capacity of the threat analysis feature. Unit: GB.', example='9000'),
    usedCapacity?: double(name='UsedCapacity', description='The billable storage capacity of the threat analysis feature. Unit: GB.', example='10'),
  }(name='Data', description='The information about the storage capacity.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Storage.Exception'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='27D27DCB-D76B-5064-8B3B-0900DEF7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCapacityResponseBody(name='body'),
}

async function getCapacity(request: GetCapacityRequest): GetCapacityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCapacity', 'POST', '/', 'json', true, 'form', request);
}

model GetHistogramsRequest {
  from: int32(name='From', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC. The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409529600', position='Body'),
  query?: string(name='Query', description='The SQL statement. Only search statements are supported. Analytic statements are not supported. For more information about the syntax and limits of search statements, see [Log search overview](https://help.aliyun.com/zh/sls/user-guide/search-syntax?spm=a2c4g.11186623.0.i2#concept-tnd-1jq-zdb).', example='* and status: 401', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  to: int32(name='To', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC. The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409569200', position='Body'),
}

model GetHistogramsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    histograms?: [ 
      {
        completedOrNot?: boolean(name='CompletedOrNot', description='Indicates whether the query results within the subinterval is complete. Valid values:

*   true: The query is complete and the returned result is complete.
*   false: The query is complete but the returned result is incomplete. You must repeat the request to obtain the complete result.', example='true'),
        count?: long(name='Count', description='The number of logs within the subinterval.', example='100'),
        from?: int32(name='From', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409529600'),
        to?: int32(name='To', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409569200'),
      }
    ](name='Histograms', description='The distribution of logs.'),
    server?: string(name='Server', description='The name of the server.', example='nginx'),
    totalCount?: long(name='TotalCount', description='The number of logs that are generated within the subinterval.', example='2'),
  }(name='Data', description='The data of the charts.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='97A31C3A-3F9F-5866-8979-5159E3DC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetHistogramsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHistogramsResponseBody(name='body'),
}

async function getHistograms(request: GetHistogramsRequest): GetHistogramsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistograms', 'POST', '/', 'json', true, 'form', request);
}

model GetLogsRequest {
  from: int32(name='From', description='The time when the query starts. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1684377190', position='Body'),
  pageIndex: int32(name='PageIndex', description='The page number. Pages start from page 1.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 0 to 100.', example='10', position='Body'),
  query?: string(name='Query', description='The search statement or the analytic statement. For more information, see [Log search overview](https://help.aliyun.com/zh/sls/user-guide/log-analysis-overview?spm=a2c4g.11186623.0.i1#t13103.html) and [Log analysis overview](https://help.aliyun.com/zh/sls/user-guide/search-syntax?spm=a2c4g.11186623.0.i0#concept-tnd-1jq-zdb).', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  reverseOrNot?: boolean(name='ReverseOrNot', description='Specifies whether to sort the results of the log query by time in minutes in descending order. Default value: true. Valid values:

*   true
*   false', example='true', position='Body'),
  to: int32(name='To', description='The time when the query ends. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1684378326', position='Body'),
  total?: long(name='Total', description='The total number of entries returned.', example='2', position='Body'),
}

model GetLogsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
      totalCount?: long(name='TotalCount', description='The total number of entries.', example='200'),
    }(name='PageInfo', description='The result on the current page.'),
    responseData?: {
      completeOrNot?: boolean(name='CompleteOrNot', description='The status of the log query. Valid values:

*   true: The query is complete and the returned result is complete.
*   false: The query is complete but the returned result is incomplete. You must resend the request to obtain the complete result.', example='true'),
      cost?: long(name='Cost', description='The time period of the log query. Unit: milliseconds.', example='28'),
      count?: int32(name='Count', description='The number of entries returned.', example='4'),
      hasSql?: boolean(name='HasSql', description='Indicated whether an analytic statement is contained. Valid values:

*   true
*   false', example='true'),
      keys?: [ string ](name='Keys', description='The index fields of the logs.'),
      lines?: [ any ](name='Lines', description='The raw data generated in the query.'),
    }(name='ResponseData', description='The log.'),
  }(name='Data', description='The results of the log query.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='93A8B186-A5F1-5B20-9BCF-5605C5E9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='True'),
}

model GetLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogsResponseBody(name='body'),
}

async function getLogs(request: GetLogsRequest): GetLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogs', 'POST', '/', 'json', true, 'form', request);
}

model GetQuickQueryRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  searchName: string(name='SearchName', description='The name of the saved search.', example='display_login_ip_search', position='Body'),
}

model GetQuickQueryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The query statement.', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='27D27DCB-D76B-5064-8B3B-0900DEF7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQuickQueryResponseBody(name='body'),
}

async function getQuickQuery(request: GetQuickQueryRequest): GetQuickQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQuickQuery', 'POST', '/', 'json', true, 'form', request);
}

model GetStorageRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model GetStorageResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    canOperate?: boolean(name='CanOperate', description='Indicates whether the storage region can be changed for once. Default value: false Valid values:

*   true
*   false', example='false'),
    displayRegion?: boolean(name='DisplayRegion', description='Indicates whether the storage region can be changed. Default value: false Valid values:

*   true
*   false', example='false'),
    region?: string(name='Region', description='The region in which the logs are stored. Default value: cn-shanghai. Valid values: cn-shanghai for the China site and ap-southeast-1 for the international site.', example='cn-shanghai'),
    ttl?: int32(name='Ttl', description='The storage period of logs. Unit: day. Default value: 180. Valid values: 30 to 3000.', example='180'),
  }(name='Data', description='The information about the storage.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Analysis.IllegalParameter'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='97A31C3A-3F9F-5866-8979-5159E3DC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStorageResponseBody(name='body'),
}

async function getStorage(request: GetStorageRequest): GetStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStorage', 'POST', '/', 'json', true, 'form', request);
}

model ListAccountAccessIdRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListAccountAccessIdResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      accessId?: string(name='AccessId', example='ABCXXXXXXXX'),
      accessIdMd5?: string(name='AccessIdMd5', example='abcXXXXXXXX'),
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountStr?: string(name='AccountStr', example='123xxxxxx|xxxx|ABCXXXXX'),
      bound?: int32(name='Bound', example='123xxxxxx|xxxx|ABCXXXXX'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      subUserId?: long(name='SubUserId', example='ABCXXXXXXXX'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', example='true'),
}

model ListAccountAccessIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountAccessIdResponseBody(name='body'),
}

async function listAccountAccessId(request: ListAccountAccessIdRequest): ListAccountAccessIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountAccessId', 'POST', '/', 'json', true, 'form', request);
}

model ListAccountsByLogRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  logCodes: [ string ](name='LogCodes', example='["cloud_siem_hcloud_waf_alert_log"]', position='Body'),
  prodCode: string(name='ProdCode', example='qcloud_waf', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListAccountsByLogResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='sas_account_xxx'),
      imported?: int32(name='Imported', example='123xxxxxxx'),
      logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      prodCode?: string(name='ProdCode', example='qcloud_waf'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListAccountsByLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsByLogResponseBody(name='body'),
}

async function listAccountsByLog(request: ListAccountsByLogRequest): ListAccountsByLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountsByLog', 'POST', '/', 'json', true, 'form', request);
}

model ListAllProdsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListAllProdsResponseBody = {
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    prodList?: [ 
      {
        cloudCode?: string(name='CloudCode', example='hcloud'),
        importedLogCount?: int32(name='ImportedLogCount', example='10'),
        modifyTime?: string(name='ModifyTime', example='2023-11-23 12:12:12'),
        prodCode?: string(name='ProdCode', example='sas'),
        totalLogCount?: int32(name='TotalLogCount', example='19'),
      }
    ](name='ProdList', example='1'),
    totalCount?: int32(name='TotalCount', example='19'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListAllProdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAllProdsResponseBody(name='body'),
}

async function listAllProds(request: ListAllProdsRequest): ListAllProdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAllProds', 'POST', '/', 'json', true, 'form', request);
}

model ListAutomateResponseConfigsRequest {
  actionType?: string(name='ActionType', example='doPlaybook', position='Body'),
  autoResponseType?: string(name='AutoResponseType', example='event', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  id?: long(name='Id', example='123', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_aegis_kill_quara_book', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  ruleName?: string(name='RuleName', example='cfw kill quara book', position='Body'),
  status?: int32(name='Status', example='0', position='Body'),
  subUserId?: long(name='SubUserId', example='17108579417****', position='Body'),
}

model ListAutomateResponseConfigsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        actionConfig?: string(name='ActionConfig', example='[
      {
            "actionType": "doPlaybook",
            "playbookName": "WafBlockIP",
            "playbookUuid": "bdad6220-6584-41b2-9704-fc6584568758"
      }
]'),
        actionType?: string(name='ActionType', example='doPlaybook,changeEventStatus'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        autoResponseType?: string(name='AutoResponseType', example='event'),
        executionCondition?: string(name='ExecutionCondition', example='[{"left":{"value":"alert_name"},"operator":"containsString","right":{"value":"webshell_online"}}]'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        ruleName?: string(name='RuleName', example='cfw kill quara book'),
        status?: int32(name='Status', example='0'),
        subUserId?: long(name='SubUserId', example='17108579417****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListAutomateResponseConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAutomateResponseConfigsResponseBody(name='body'),
}

async function listAutomateResponseConfigs(request: ListAutomateResponseConfigsRequest): ListAutomateResponseConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutomateResponseConfigs', 'POST', '/', 'json', true, 'form', request);
}

model ListBindAccountRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListBindAccountResponseBody = {
  data?: [ 
    {
      accessId?: string(name='AccessId', example='ABCXXXXXXXX'),
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='XXXXXXXX'),
      bindId?: long(name='BindId', example='123xxxxxxx'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      createUser?: string(name='CreateUser', example='123xxxxxxx'),
      dataSourceCount?: long(name='DataSourceCount', example='2'),
      modifyTime?: string(name='ModifyTime', example='2023-11-10 12:20:35'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindAccountResponseBody(name='body'),
}

async function listBindAccount(request: ListBindAccountRequest): ListBindAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindAccount', 'POST', '/', 'json', true, 'form', request);
}

model ListBindDataSourcesRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListBindDataSourcesResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='sas_tq_account_xxxx'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
      dataSourceName?: string(name='DataSourceName', example='waf_kafka'),
      dataSourceRemark?: string(name='DataSourceRemark', example='waf_kafka'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
      logCount?: int32(name='LogCount', example='1'),
      taskCount?: int32(name='TaskCount', example='0'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListBindDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindDataSourcesResponseBody(name='body'),
}

async function listBindDataSources(request: ListBindDataSourcesRequest): ListBindDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindDataSources', 'POST', '/', 'json', true, 'form', request);
}

model ListCloudSiemCustomizeRulesRequest {
  alertType?: string(name='AlertType', example='scan', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  endTime?: long(name='EndTime', example='1577808000000', position='Body'),
  id?: string(name='Id', example='10223', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  ruleName?: string(name='RuleName', example='waf_scan', position='Body'),
  ruleType?: string(name='RuleType', example='customize', position='Body'),
  startTime?: long(name='StartTime', example='1577808000000', position='Body'),
  status?: int32(name='Status', example='0', position='Body'),
  threatLevel?: [ string ](name='ThreatLevel', example='["serious","suspicious","remind"]', position='Body'),
}

model ListCloudSiemCustomizeRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertType?: string(name='AlertType', example='WEBSHELL'),
        alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
        eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
        eventTransferType?: string(name='EventTransferType', example='allToSingle'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
        logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
        logType?: string(name='LogType', example='ALERT_ACTIVITY'),
        logTypeMds?: string(name='LogTypeMds', example='${sas.cloudsiem.prod.alert_activity}'),
        queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
        ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
        ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
        ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
        ruleName?: string(name='RuleName', example='waf_scan'),
        ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
        ruleType?: string(name='RuleType', example='customize'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCloudSiemCustomizeRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudSiemCustomizeRulesResponseBody(name='body'),
}

async function listCloudSiemCustomizeRules(request: ListCloudSiemCustomizeRulesRequest): ListCloudSiemCustomizeRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudSiemCustomizeRules', 'POST', '/', 'json', true, 'form', request);
}

model ListCloudSiemPredefinedRulesRequest {
  alertType?: string(name='AlertType', example='scan', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  endTime?: long(name='EndTime', example='1577808000000', position='Body'),
  id?: string(name='Id', example='10223', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  ruleName?: string(name='RuleName', example='waf_scan', position='Body'),
  ruleType?: string(name='RuleType', example='customize', position='Body'),
  startTime?: long(name='StartTime', example='1577808000000', position='Body'),
  status?: int32(name='Status', example='0', position='Body'),
  threatLevel?: [ string ](name='ThreatLevel', example='["serious","suspicious","remind"]', position='Body'),
}

model ListCloudSiemPredefinedRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertType?: string(name='AlertType', example='WEBSHELL'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        ruleDescMds?: string(name='RuleDescMds', example='${siem_rule_description_siem_cfw-attack-count-level-up_cfw-attack}'),
        ruleName?: string(name='RuleName', example='siem_base64-command-exec_aegis-proc'),
        ruleNameMds?: string(name='RuleNameMds', example='${siem_rule_name_siem_cfw-attack-count-level-up_cfw-attack}'),
        source?: string(name='Source', example='cloud_siem_aegis_proc'),
        status?: int32(name='Status', example='0'),
        threatLevel?: string(name='ThreatLevel', example='remind'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCloudSiemPredefinedRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudSiemPredefinedRulesResponseBody(name='body'),
}

async function listCloudSiemPredefinedRules(request: ListCloudSiemPredefinedRulesRequest): ListCloudSiemPredefinedRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudSiemPredefinedRules', 'POST', '/', 'json', true, 'form', request);
}

model ListCustomizeRuleTestResultRequest {
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  id?: long(name='Id', example='123456789', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListCustomizeRuleTestResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', example='The account you logged in this time is not in the legal account category defined by you. Please confirm the legality of the login behavior。'),
        alertDetail?: string(name='AlertDetail', example='{"main_user_id": "1652956297921019";"log_uuid_count": "99";"attack_ip": "218.92.0.97"}'),
        alertSrcProd?: string(name='AlertSrcProd', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', example='waf'),
        attCk?: string(name='AttCk', example='T1595.002 Vulnerability Scanning'),
        eventName?: string(name='EventName', example='waf_scan'),
        eventType?: string(name='EventType', example='WEBSHELL'),
        level?: string(name='Level', example='remind'),
        logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
        logTime?: string(name='LogTime', example='2021-01-06 16:37:29'),
        logType?: string(name='LogType', example='ALERT_ACTIVITY'),
        mainUserId?: string(name='MainUserId', example='127608589417****'),
        onlineStatus?: string(name='OnlineStatus', example='test'),
        subUserId?: string(name='SubUserId', example='176555323***'),
        uuid?: string(name='Uuid', example='sas_71e24437d2797ce8fc59692905a4****'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomizeRuleTestResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomizeRuleTestResultResponseBody(name='body'),
}

async function listCustomizeRuleTestResult(request: ListCustomizeRuleTestResultRequest): ListCustomizeRuleTestResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomizeRuleTestResult', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSourceLogsRequest {
  accountId: string(name='AccountId', example='123xxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListDataSourceLogsResponseBody = {
  data?: {
    accountId?: string(name='AccountId', example='123xxxxxxx'),
    cloudCode?: string(name='CloudCode', example='hcloud'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
    dataSourceInstanceLogs?: [ 
      {
        logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
        logInstanceId?: string(name='LogInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
        logMdsCode?: string(name='LogMdsCode', example='${siem.prod.cloud_siem_waf_xxxxx}'),
        logParams?: [ 
          {
            paraCode?: string(name='ParaCode', example='region_code'),
            paraValue?: string(name='ParaValue', example='ap-guangzhou'),
          }
        ](name='LogParams'),
        taskStatus?: int32(name='TaskStatus', example='1'),
      }
    ](name='DataSourceInstanceLogs'),
    dataSourceInstanceName?: string(name='DataSourceInstanceName', example='waf kafka'),
    dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='waf kafka'),
    subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListDataSourceLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceLogsResponseBody(name='body'),
}

async function listDataSourceLogs(request: ListDataSourceLogsRequest): ListDataSourceLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceLogs', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSourceTypesRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListDataSourceTypesResponseBody = {
  data?: [ 
    {
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListDataSourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceTypesResponseBody(name='body'),
}

async function listDataSourceTypes(request: ListDataSourceTypesRequest): ListDataSourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceTypes', 'POST', '/', 'json', true, 'form', request);
}

model ListDeliveryRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model ListDeliveryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

Valid values:

*   200

    <!-- -->

    <!-- -->

    <!-- -->

*   500

    <!-- -->

    <!-- -->

    <!-- -->', example='200'),
  data?: {
    dashboardUrl?: string(name='DashboardUrl', description='The URL that is displayed in charts.', example='https://sls4service.console.aliyun.com/lognext/project/aliyun-cloudsiem-data-127608589417****-cn-shanghai
/dashboard/cloud-siem?isShare=true&hideTopbar=true&hideSidebar=true&ignoreTabLocalStorage=true'),
    displaySwitchOrNot?: boolean(name='DisplaySwitchOrNot', description='Indicates whether the log delivery switch is displayed. Default value: true. Valid values:

*   true
*   false', example='true'),
    logStoreName?: string(name='LogStoreName', description='The name of the Logstore for the threat analysis feature on the user side. The value is in the cloud_siem format.', example='cloud-siem'),
    productList?: [ 
      {
        logList?: [ 
          {
            canOperateOrNot?: boolean(name='CanOperateOrNot', description='Indicates whether the log delivery feature can be enabled or disabled. The feature can be enabled or disabled only by the administrator of the threat analysis feature. Valid values:

*   true
*   false', example='true'),
            extraParameters?: [ 
              {
                key?: string(name='Key', description='The ID of the extended parameter.', example='flag'),
                value?: string(name='Value', description='The value of the extended parameter.', example='value'),
              }
            ](name='ExtraParameters', description='The extended parameter.'),
            logCode?: string(name='LogCode', description='The code of the log.', example='cloud_siem_config_log'),
            logName?: string(name='LogName', description='This parameter is deprecated.', example='audit log'),
            logNameEn?: string(name='LogNameEn', description='This parameter is deprecated.', example='audit log'),
            logNameKey?: string(name='LogNameKey', description='The language code of the log that is used to indicate the language in which the log is displayed.', example='${sas.cloudsiem.prod.cloud_siem_aegis_crack_from_beaver}'),
            status?: boolean(name='Status', description='The status of the log delivery. Valid values:

*   true: The logs are being delivered.
*   false: The log delivery feature is disabled.', example='true'),
            topic?: string(name='Topic', description='The topic of the log in the Logstore. The value is an index field in the Logstore that can be used to distinguish different logs.', example='sas_login_event'),
          }
        ](name='LogList', description='The logs of the cloud services.'),
        logMap?: map[string][ DataProductListLogMapValue         ](name='LogMap', description='The log group. For example, in Security Center, the logs of hosts and networks are stored in different groups. Key indicates the group information, and value indicates the logs in the group.'),
        productCode?: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='sas'),
        productName?: string(name='ProductName', description='This parameter is deprecated.', example='Security Center'),
      }
    ](name='ProductList', description='The cloud services.'),
    projectName?: string(name='ProjectName', description='The name of the project for the threat analysis feature in Simple Log service on the user side. The value is in the aliyun-cloudsiem-data-${aliUid}-${region} format.', example='aliyun-cloudsiem-data-127608589417****-cn-shanghai'),
    searchUrl?: string(name='SearchUrl', description='The URL that is used for log analysis.', example='https://sls4service.console.aliyun.com/lognext/project/aliyun-cloudsiem-data-127608589417****-cn-shanghai
/logsearch/cloud-siem?isShare=true&hideTopbar=true&hideSidebar=true&ignoreTabLocalStorage=true'),
  }(name='Data', description='The response parameters.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic error message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', description='The error message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false

Valid values:

*   True

    <!-- -->

    <!-- -->

    <!-- -->

*   False

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model ListDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeliveryResponseBody(name='body'),
}

async function listDelivery(request: ListDeliveryRequest): ListDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDelivery', 'POST', '/', 'json', true, 'form', request);
}

model ListDisposeStrategyRequest {
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  effectiveStatus?: int32(name='EffectiveStatus', example='0', position='Body'),
  endTime: long(name='EndTime', example='1577808000000', position='Body'),
  entityIdentity?: string(name='EntityIdentity', example='test22.php', position='Body'),
  entityType?: string(name='EntityType', example='ip', position='Body'),
  order?: string(name='Order', example='desc', position='Body'),
  orderField?: string(name='OrderField', example='GmtModified', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  playbookName?: string(name='PlaybookName', example='WafBlockIP', position='Body'),
  playbookTypes?: string(name='PlaybookTypes', example='system', position='Body'),
  playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sophonTaskId?: string(name='SophonTaskId', example='a50a49b7-6044-4593-ab15-2b46567caadd', position='Body'),
  startTime: long(name='StartTime', example='1577808000000', position='Body'),
}

model ListDisposeStrategyResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        effectiveStatus?: int32(name='EffectiveStatus', example='0'),
        entity?: [ any ](name='Entity', example='[{"ip":"1.1.1.1"}]'),
        entityId?: long(name='EntityId', example='123456789'),
        entityType?: string(name='EntityType', example='ip'),
        errorMessage?: string(name='ErrorMessage', example='DisposalEntity failed which description is Aegis Quarantine File , return_info failed which description is Check Aegis Process Result , [ERROR DETAIL] *******.php:file not found'),
        finishTime?: string(name='FinishTime', example='2021-08-10 21:34:07'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123'),
        incidentName?: string(name='IncidentName', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        playbookName?: string(name='PlaybookName', example='WafBlockIP'),
        playbookType?: string(name='PlaybookType', example='system'),
        playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
        scope?: [ any ](name='Scope', example='[{ aliUid: 1766185894104675 }]'),
        sophonTaskId?: string(name='SophonTaskId', example='577bbf90-a770-44a7-8154-586aa2d318fa'),
        status?: int32(name='Status', example='10'),
        subAliuid?: long(name='SubAliuid', example='176555323***'),
        taskParam?: string(name='TaskParam', example='{
      "file": {
            "op_code": "2",
            "file_path": "/root/alert0913/a886.jsp",
            "entity_type": "file",
            "entity_name": "a886.jsp",
            "file_name": "a886.jsp",
            "file_owner": "USER:,GROUP:",
            "hash_value": "5def10c9a4287d0920d86b42420b20b0",
            "op_level": "2",
            "entity_id": "/root/alert0913/a886.jsp",
            "host_uuid": {
                  "entity_type": "host",
                  "entity_name": "N/A",
                  "is_comprised": "1",
                  "os_type": "linux",
                  "entity_id": "5f58ef67-8803-4314-8d67-c87dc92b****",
                  "host_uuid": "5f58ef67-8803-4314-8d67-c87dc92b****",
                  "host_name": "N/A"
            },
            "malware_type": "${aliyun.siem.sas.alert_tag.webshell}"
      },
      "_sys_siem": {
            "cloudCode": "aliyun",
            "alertId": "89416745494****"
      },
      "scope": [
            {
                  "aliUid": 1766185894104****
            }
      ]
}'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model ListDisposeStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDisposeStrategyResponseBody(name='body'),
}

async function listDisposeStrategy(request: ListDisposeStrategyRequest): ListDisposeStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDisposeStrategy', 'POST', '/', 'json', true, 'form', request);
}

model ListImportedLogsByProdRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  prodCode: string(name='ProdCode', example='qcloud_waf', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListImportedLogsByProdResponseBody = {
  data?: [ 
    {
      autoImported?: int32(name='AutoImported', example='2023-11-23 12:30:00'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      imported?: int32(name='Imported', example='2023-11-23 12:30:00'),
      importedUserCount?: int32(name='ImportedUserCount', example='2'),
      logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
      logMdsCode?: string(name='LogMdsCode', example='${siem.prod. cloud_siem_waf_xxxxx}'),
      modifyTime?: string(name='ModifyTime', example='2023-11-23 12:30:00'),
      prodCode?: string(name='ProdCode', example='qcloud_waf'),
      totalUserCount?: int32(name='TotalUserCount', example='5'),
      unImportedUserCount?: int32(name='UnImportedUserCount', example='3'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListImportedLogsByProdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImportedLogsByProdResponseBody(name='body'),
}

async function listImportedLogsByProd(request: ListImportedLogsByProdRequest): ListImportedLogsByProdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImportedLogsByProd', 'POST', '/', 'json', true, 'form', request);
}

model ListOperationRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model ListOperationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    adminOrNot?: boolean(name='AdminOrNot', description='Indicates whether the user is an administrator. Valid values:

*   true
*   false', example='true'),
    operationList?: [ string ](name='OperationList', description='The resources on which the permissions are granted.'),
  }(name='Data', description='The response parameters.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='SLS.Sls4Service.Error'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='CCEEE128-6607-503E-AAA6-C5E57D94****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOperationResponseBody(name='body'),
}

async function listOperation(request: ListOperationRequest): ListOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOperation', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectLogStoresRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceLogCode: string(name='SourceLogCode', example='cloud_siem_aegis_proc', position='Body'),
  sourceProdCode: string(name='SourceProdCode', example='sas', position='Body'),
  subUserId: long(name='SubUserId', example='123XXXXXXXX', position='Body'),
}

model ListProjectLogStoresResponseBody = {
  data?: [ 
    {
      endPoint?: string(name='EndPoint', example='cn-hangzhou.log.aliyuncs.com'),
      localName?: string(name='LocalName', example='hangzhou'),
      logStore?: string(name='LogStore', example='cloud-siem-logstore'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      project?: string(name='Project', example='cloud-siem-project'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListProjectLogStoresResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectLogStoresResponseBody(name='body'),
}

async function listProjectLogStores(request: ListProjectLogStoresRequest): ListProjectLogStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjectLogStores', 'POST', '/', 'json', true, 'form', request);
}

model ListQuickQueryRequest {
  offset?: int32(name='Offset', description='The line from which the query starts. Default value: 0.', example='0', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 500.', example='50', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model ListQuickQueryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    count?: int32(name='Count', description='The number of saved searches per page.', example='10'),
    quickQueryList?: [ 
      {
        displayName?: string(name='DisplayName', description='The alias of the saved search.', example='no_1_created_search_used_for_dispaly_ip'),
        query?: string(name='Query', description='The query statement corresponding to the saved search.', example='* and SamplerAddress:\\"172.18.1.1\\" and OutIf:\\"105\\"'),
        searchName?: string(name='SearchName', description='The name of the saved search.', example='data_analysis'),
      }
    ](name='QuickQueryList', description='The saved search.'),
    total?: int32(name='Total', description='The total number of saved searches that meet the query conditions.', example='101'),
  }(name='Data', description='The response parameters.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Storage.Exception'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='F375A043-4F5B-55F2-A564-CC47FFC6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuickQueryResponseBody(name='body'),
}

async function listQuickQuery(request: ListQuickQueryRequest): ListQuickQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQuickQuery', 'POST', '/', 'json', true, 'form', request);
}

model ListRdUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListRdUsersResponseBody = {
  data?: [ 
    {
      delegatedOrNot?: boolean(name='DelegatedOrNot', example='true'),
      joined?: boolean(name='Joined', example='true'),
      joinedTime?: string(name='JoinedTime', example='2013-10-01 00:00:00'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListRdUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRdUsersResponseBody(name='body'),
}

async function listRdUsers(request: ListRdUsersRequest): ListRdUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRdUsers', 'POST', '/', 'json', true, 'form', request);
}

model ListUserProdLogsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceLogCode: string(name='SourceLogCode', example='cloud_siem_aegis_proc', position='Body'),
  sourceProdCode: string(name='SourceProdCode', example='sas', position='Body'),
}

model ListUserProdLogsResponseBody = {
  data?: [ 
    {
      displayLine?: string(name='DisplayLine', example='cn-shanghai.siem-project.siem-logstore'),
      displayed?: boolean(name='Displayed', example='true'),
      imported?: boolean(name='Imported', example='true'),
      isDeleted?: int32(name='IsDeleted', example='0'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
      sourceLogInfo?: string(name='SourceLogInfo', example='{"project":"wafnew-project-1335759343513432-cn-hangzhou","logStore":"wafnew-logstore","regionCode":"cn-hangzhou","prodCode":"waf"}'),
      sourceProdCode?: string(name='SourceProdCode', example='sas'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListUserProdLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserProdLogsResponseBody(name='body'),
}

async function listUserProdLogs(request: ListUserProdLogsRequest): ListUserProdLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserProdLogs', 'POST', '/', 'json', true, 'form', request);
}

model ListUsersByProdRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceProdCode: string(name='SourceProdCode', example='sas', position='Body'),
}

model ListUsersByProdResponseBody = {
  data?: [ 
    {
      cloudCode?: string(name='CloudCode', example='hcloud'),
      imported?: boolean(name='Imported', example='true'),
      logMdsCode?: string(name='LogMdsCode', example='${siem.xxx.xxxxxxxxx}'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
      sourceLogName?: string(name='SourceLogName', example='安骑士进程日志'),
      sourceProdCode?: string(name='SourceProdCode', example='sas'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListUsersByProdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersByProdResponseBody(name='body'),
}

async function listUsersByProd(request: ListUsersByProdRequest): ListUsersByProdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersByProd', 'POST', '/', 'json', true, 'form', request);
}

model ModifyBindAccountRequest {
  accessId?: string(name='AccessId', example='ABCXXXXXXXXX', position='Body'),
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  accountName?: string(name='AccountName', example='sas_account_xxx', position='Body'),
  bindId: long(name='BindId', example='123', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ModifyBindAccountResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBindAccountResponseBody(name='body'),
}

async function modifyBindAccount(request: ModifyBindAccountRequest): ModifyBindAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBindAccount', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDataSourceRequest {
  accountId?: string(name='AccountId', example='123xxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  dataSourceInstanceName?: string(name='DataSourceInstanceName', example='beijing_waf_kafka', position='Body'),
  dataSourceInstanceParams?: string(name='DataSourceInstanceParams', example='[{"paraCode":"region_code","paraValue":"ap-guangzhou"}]', position='Body'),
  dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='waf_alert_log', position='Body'),
  dataSourceType: string(name='DataSourceType', example='obs', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ModifyDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataSourceResponseBody(name='body'),
}

async function modifyDataSource(request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataSource', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDataSourceLogRequest {
  accountId?: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1', position='Body'),
  dataSourceInstanceLogs: string(name='DataSourceInstanceLogs', example='[{"LogCode":"cloud_siem_qcloud_waf_alert_log","LogParas":"[{\\"ParaCode\\":\\"api_name\\",\\"ParaValue\\":\\"GetAttackDownloadRecords\\"}]"}]', position='Body'),
  dataSourceType?: string(name='DataSourceType', example='obs', position='Body'),
  logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx', position='Body'),
  logInstanceId: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ModifyDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataSourceLogResponseBody(name='body'),
}

async function modifyDataSourceLog(request: ModifyDataSourceLogRequest): ModifyDataSourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataSourceLog', 'POST', '/', 'json', true, 'form', request);
}

model OpenDeliveryRequest {
  logCode?: string(name='LogCode', description='The log code of the cloud service, such as the code of the process log for Security Center. If you leave this parameter empty, operations are performed on all logs of the cloud service.', example='cloud_siem_cfw_flow', position='Body'),
  productCode: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='cfw', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model OpenDeliveryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the log delivery feature is enabled. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='15FD134E-D69B-51E8-B052-73F97BD8****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model OpenDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenDeliveryResponseBody(name='body'),
}

async function openDelivery(request: OpenDeliveryRequest): OpenDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenDelivery', 'POST', '/', 'json', true, 'form', request);
}

model PostAutomateResponseConfigRequest {
  actionConfig?: string(name='ActionConfig', example='[
      {
            "actionType": "doPlaybook",
            "playbookName": "WafBlockIP",
            "playbookUuid": "bdad6220-6584-41b2-9704-fc6584568758"
      }
]', position='Body'),
  actionType?: string(name='ActionType', example='doPlaybook,changeEventStatus', position='Body'),
  autoResponseType?: string(name='AutoResponseType', example='event', position='Body'),
  executionCondition?: string(name='ExecutionCondition', example='[{"left":{"value":"alert_name"},"operator":"containsString","right":{"value":"webshell_online"}}]', position='Body'),
  id?: long(name='Id', example='123', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  ruleName?: string(name='RuleName', example='cfw kill quara book', position='Body'),
  subUserId?: long(name='SubUserId', example='17108579417****', position='Body'),
}

model PostAutomateResponseConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostAutomateResponseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostAutomateResponseConfigResponseBody(name='body'),
}

async function postAutomateResponseConfig(request: PostAutomateResponseConfigRequest): PostAutomateResponseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostAutomateResponseConfig', 'POST', '/', 'json', true, 'form', request);
}

model PostCustomizeRuleRequest {
  alertType?: string(name='AlertType', example='WEBSHELL', position='Body'),
  alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}', position='Body'),
  eventTransferExt?: string(name='EventTransferExt', example='{"time":"1","unit":"MINUTE"}', position='Body'),
  eventTransferSwitch?: int32(name='EventTransferSwitch', example='1', position='Body'),
  eventTransferType?: string(name='EventTransferType', example='allToSingle', position='Body'),
  id?: long(name='Id', example='123456789', position='Body'),
  logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert', position='Body'),
  logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}', position='Body'),
  logType?: string(name='LogType', example='ALERT_ACTIVITY', position='Body'),
  logTypeMds?: string(name='LogTypeMds', example='${security_event_config.event_name.webshellName_clientav}', position='Body'),
  queryCycle?: string(name='QueryCycle', example='{"time":"1","unit":"HOUR"}', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  ruleCondition?: string(name='RuleCondition', example='[[{"not":false,"left":"alert_name","operator":"=","right":"WEBSHELL"}]]', position='Body'),
  ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan', position='Body'),
  ruleGroup?: string(name='RuleGroup', example='["asset_id"]', position='Body'),
  ruleName?: string(name='RuleName', example='waf_scan', position='Body'),
  ruleThreshold?: string(name='RuleThreshold', example='{"aggregateFunction":"count","aggregateFunctionName":"count","field":"activity_name","operator":"&lt;=","value":1}', position='Body'),
  threatLevel?: string(name='ThreatLevel', example='remind', position='Body'),
}

model PostCustomizeRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    alertType?: string(name='AlertType', example='WEBSHELL'),
    alertTypeMds?: string(name='AlertTypeMds', example='${siem_rule_type_process_abnormal_command}'),
    aliuid?: long(name='Aliuid', example='127608589417****'),
    eventTransferExt?: string(name='EventTransferExt', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
    eventTransferSwitch?: int32(name='EventTransferSwitch', example='1'),
    eventTransferType?: string(name='EventTransferType', example='allToSingle'),
    gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
    id?: long(name='Id', example='123456789'),
    logSource?: string(name='LogSource', example='cloud_siem_aegis_sas_alert'),
    logSourceMds?: string(name='LogSourceMds', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
    logType?: string(name='LogType', example='ALERT_ACTIVITY'),
    logTypeMds?: string(name='LogTypeMds', example='${security_event_config.event_name.webshellName_clientav}'),
    queryCycle?: string(name='QueryCycle', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
    ruleCondition?: string(name='RuleCondition', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
    ruleDesc?: string(name='RuleDesc', example='this rule is for waf scan'),
    ruleGroup?: string(name='RuleGroup', example='[&quot;asset_id&quot;]'),
    ruleName?: string(name='RuleName', example='waf_scan'),
    ruleThreshold?: string(name='RuleThreshold', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
    ruleType?: string(name='RuleType', example='customize'),
    status?: int32(name='Status', example='0'),
    threatLevel?: string(name='ThreatLevel', example='remind'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostCustomizeRuleResponseBody(name='body'),
}

async function postCustomizeRule(request: PostCustomizeRuleRequest): PostCustomizeRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostCustomizeRule', 'POST', '/', 'json', true, 'form', request);
}

model PostCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  simulatedData?: string(name='SimulatedData', example='[{"key1":"value1","key2":"value2","key3":"value3","key4":"value4","key5":"value5"}]', position='Body'),
  testType?: string(name='TestType', example='simulate', position='Body'),
}

model PostCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostCustomizeRuleTestResponseBody(name='body'),
}

async function postCustomizeRuleTest(request: PostCustomizeRuleTestRequest): PostCustomizeRuleTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostCustomizeRuleTest', 'POST', '/', 'json', true, 'form', request);
}

model PostEventDisposeAndWhiteruleListRequest {
  eventDispose?: string(name='EventDispose', example='[
      {
            "playbookName": "WafBlockIP",
            "entityId": "104466118",
            "scope": [
                  "176618589410****"
            ],
            "startTime": 1604168946281,
            "endTime": 1614168946281
      },
      {
            "playbookName": "WafBlockIP",
            "entityId": "104466118",
            "scope": [
                  {
                        "instanceId": "waf-cn-n6w1oy1****",
                        "domains": [
                              "lmfip.wafqax.***"
                        ]
                  }
            ],
            "startTime": 1604168946281,
            "endTime": 1614168946281
      }
]', position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  receiverInfo?: string(name='ReceiverInfo', example='{
      "messageTitle": "test",
      "receiver": "xiaowang",
      "channel": "message"
}', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  remark?: string(name='Remark', example='dealed', position='Body'),
  status?: int32(name='Status', example='0', position='Body'),
}

model PostEventDisposeAndWhiteruleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostEventDisposeAndWhiteruleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostEventDisposeAndWhiteruleListResponseBody(name='body'),
}

async function postEventDisposeAndWhiteruleList(request: PostEventDisposeAndWhiteruleListRequest): PostEventDisposeAndWhiteruleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostEventDisposeAndWhiteruleList', 'POST', '/', 'json', true, 'form', request);
}

model PostEventWhiteruleListRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  whiteruleList: string(name='WhiteruleList', example='[
      {
            "alertName": "webshell",
            "alertNameId": "webshell",
            "alertType": "command",
            "alertTypeId": "command",
            "expression": {
                  "status": 1,
                  "conditions": [
                        {
                              "isNot": false,
                              "left": {
                                    "value": "file_path"
                              },
                              "operator": "gt",
                              "right": {
                                    "value": "cp"
                              }
                        }
                  ]
            }
      }
]', position='Body'),
}

model PostEventWhiteruleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostEventWhiteruleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostEventWhiteruleListResponseBody(name='body'),
}

async function postEventWhiteruleList(request: PostEventWhiteruleListRequest): PostEventWhiteruleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostEventWhiteruleList', 'POST', '/', 'json', true, 'form', request);
}

model PostFinishCustomizeRuleTestRequest {
  id?: long(name='Id', example='123456789', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model PostFinishCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostFinishCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostFinishCustomizeRuleTestResponseBody(name='body'),
}

async function postFinishCustomizeRuleTest(request: PostFinishCustomizeRuleTestRequest): PostFinishCustomizeRuleTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostFinishCustomizeRuleTest', 'POST', '/', 'json', true, 'form', request);
}

model PostRuleStatusChangeRequest {
  ids?: string(name='Ids', example='[123,345]', position='Body'),
  inUse?: boolean(name='InUse', example='true', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  ruleType?: string(name='RuleType', example='customize', position='Body'),
}

model PostRuleStatusChangeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model PostRuleStatusChangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostRuleStatusChangeResponseBody(name='body'),
}

async function postRuleStatusChange(request: PostRuleStatusChangeRequest): PostRuleStatusChangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostRuleStatusChange', 'POST', '/', 'json', true, 'form', request);
}

model RestoreCapacityRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model RestoreCapacityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the release command has been sent. Valid values:

*   true: The command has been sent and the storage space is being released.
*   false: The command failed to be sent.', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Request.Forbidden'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RestoreCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestoreCapacityResponseBody(name='body'),
}

async function restoreCapacity(request: RestoreCapacityRequest): RestoreCapacityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreCapacity', 'POST', '/', 'json', true, 'form', request);
}

model SaveQuickQueryRequest {
  displayName: string(name='DisplayName', description='The name of the saved search.', example='no_1_created_search_used_for_dispaly_ip', position='Body'),
  query: string(name='Query', description='The query statement.', example='* and dst_ip : "121.43.234.***"', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model SaveQuickQueryResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the query statement is saved as a saved search. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Delivery.ErrorMapping'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model SaveQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveQuickQueryResponseBody(name='body'),
}

async function saveQuickQuery(request: SaveQuickQueryRequest): SaveQuickQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveQuickQuery', 'POST', '/', 'json', true, 'form', request);
}

model SetStorageRequest {
  region?: string(name='Region', description='The storage region of logs. By default, the region of the data management center is used and cannot be changed. cn-shanghai is used for the China data management center, and ap-southeast-1 is used for the Outside China data management center. To change the region, contact the technical support of threat analysis.', example='cn-shanghai', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  ttl: int32(name='Ttl', description='The storage duration of logs. Default value: 180. Minimum value: 30. Maximum value: 3000. Unit: days.', example='180', position='Body'),
}

model SetStorageResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the settings are saved. Valid values:

*   true
*   false', example='true'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Siem.Storage.Exception'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model SetStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetStorageResponseBody(name='body'),
}

async function setStorage(request: SetStorageRequest): SetStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetStorage', 'POST', '/', 'json', true, 'form', request);
}

model ShowQuickAnalysisRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model ShowQuickAnalysisResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    indexList?: [ string ](name='IndexList', description='The index fields of the logs.'),
  }(name='Data', description='The index fields.'),
  dyCode?: string(name='DyCode', description='The dynamic error code.', example='DeleteJobConfigError'),
  dyMessage?: string(name='DyMessage', description='The dynamic message.', example='Task[%s] is submitting, please try it later'),
  errCode?: string(name='ErrCode', description='The error code.', example='Request.Forbidden'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A4FBD89-C29D-5973-B882-CB2D23F6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ShowQuickAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShowQuickAnalysisResponseBody(name='body'),
}

async function showQuickAnalysis(request: ShowQuickAnalysisRequest): ShowQuickAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ShowQuickAnalysis', 'POST', '/', 'json', true, 'form', request);
}

model SubmitImportLogTasksRequest {
  accounts?: string(name='Accounts', example='[{"AccountId":"123123","Imported":1}]', position='Body'),
  autoImported?: int32(name='AutoImported', example='["cloud_siem_qcloud_cfw_alert_log"]', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  logCodes?: string(name='LogCodes', example='["cloud_siem_qcloud_cfw_alert_log"]', position='Body'),
  prodCode: string(name='ProdCode', example='qcloud_waf', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model SubmitImportLogTasksResponseBody = {
  data?: {
    count?: int32(name='Count', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model SubmitImportLogTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitImportLogTasksResponseBody(name='body'),
}

async function submitImportLogTasks(request: SubmitImportLogTasksRequest): SubmitImportLogTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitImportLogTasks', 'POST', '/', 'json', true, 'form', request);
}

model SubmitJobsRequest {
  jsonParam: string(name='JsonParam', example='[{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":120xxxxxxx,"Deleted":0},{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":121xxxxxxxx,"Deleted":0},{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":122xxxxxxx,"Deleted":1}]', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model SubmitJobsResponseBody = {
  data?: int32(name='Data', example='5'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model SubmitJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitJobsResponseBody(name='body'),
}

async function submitJobs(request: SubmitJobsRequest): SubmitJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitJobs', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAutomateResponseConfigStatusRequest {
  ids?: string(name='Ids', example='[123,345]', position='Body'),
  inUse?: boolean(name='InUse', example='true', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model UpdateAutomateResponseConfigStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAutomateResponseConfigStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutomateResponseConfigStatusResponseBody(name='body'),
}

async function updateAutomateResponseConfigStatus(request: UpdateAutomateResponseConfigStatusRequest): UpdateAutomateResponseConfigStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAutomateResponseConfigStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWhiteRuleListRequest {
  expression: string(name='Expression', example='[
      {
            "alertName": "webshell",
            "alertNameId": "webshell",
            "alertType": "command",
            "alertTypeId": "command",
            "expression": {
                  "status": 1,
                  "conditions": [
                        {
                              "isNot": false,
                              "left": {
                                    "value": "file_path"
                              },
                              "operator": "gt",
                              "right": {
                                    "value": "cp"
                              }
                        }
                  ]
            }
      }
]', position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  whiteRuleId: long(name='WhiteRuleId', example='123456789', position='Body'),
}

model UpdateWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWhiteRuleListResponseBody(name='body'),
}

async function updateWhiteRuleList(request: UpdateWhiteRuleListRequest): UpdateWhiteRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWhiteRuleList', 'POST', '/', 'json', true, 'form', request);
}

model DataProductListLogMapValue = {
  logCode?: string(name='LogCode', description='The code of the log.', example='cloud_siem_config_log'),
  logName?: string(name='LogName', description='This parameter is deprecated.', example='audit log'),
  logNameEn?: string(name='LogNameEn', description='This parameter is deprecated.', example='audit log'),
  logNameKey?: string(name='LogNameKey', description='The language code of the log that is used to indicate the language in which the log is displayed.', example='${sas.cloudsiem.prod.cloud_siem_aegis_crack_from_beaver}'),
  status?: boolean(name='Status', description='The status of the log delivery. Valid values:

*   true: The logs are being delivered.
*   false: The log delivery feature is disabled.', example='true'),
  canOperateOrNot?: boolean(name='CanOperateOrNot', description='Indicates whether the log delivery feature can be enabled or disabled. The feature can be enabled or disabled only by the administrator of the threat analysis feature. Valid values:

*   true
*   false', example='true'),
  topic?: string(name='Topic', description='The topic of the log in the Logstore. The value is an index field in the Logstore that can be used to distinguish different logs.', example='sas_login_event'),
  extraParameters?: [ 
    {
      key?: string(name='Key', description='The ID of the extended parameter.', example='flag'),
      value?: string(name='Value', description='The value of the extended parameter.', example='value'),
    }
  ](name='ExtraParameters', description='The extended parameter.'),
}

model DataProductListLogMapValueValue = {
  key?: string(name='Key', description='The ID of the extended parameter.', example='flag'),
  value?: string(name='Value', description='The value of the extended parameter.', example='value'),
}

