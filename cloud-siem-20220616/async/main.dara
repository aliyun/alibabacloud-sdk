/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cloud-siem';
  @version = '2022-06-16';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDataSourceRequest {
  accountId?: string(name='AccountId', example='123xxxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceName?: string(name='DataSourceInstanceName', example='XX北京kafka', position='Body'),
  dataSourceInstanceParams?: string(name='DataSourceInstanceParams', example='[{"paraCode":"region_code","paraValue":"ap-guangzhou"}]', position='Body'),
  dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='XX云云防火墙上海实例', position='Body'),
  dataSourceType?: string(name='DataSourceType', example='obs', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model AddDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDataSourceResponseBody(name='body'),
}

async function addDataSource(request: AddDataSourceRequest): AddDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataSource', 'POST', '/', 'json', true, 'form', request);
}

model AddDataSourceLogRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  dataSourceInstanceLogs: string(name='DataSourceInstanceLogs', example='[{"LogCode":"cloud_siem_qcloud_waf_alert_log","LogParas":"[{\\"ParaCode\\":\\"api_name\\",\\"ParaValue\\":\\"GetAttackDownloadRecords\\"}]"}]', position='Body'),
  logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model AddDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDataSourceLogResponseBody(name='body'),
}

async function addDataSourceLog(request: AddDataSourceLogRequest): AddDataSourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataSourceLog', 'POST', '/', 'json', true, 'form', request);
}

model AddUserRequest {
  addedUserId: long(name='AddedUserId', example='123XXXXXXXX。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model AddUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserResponseBody(name='body'),
}

async function addUser(request: AddUserRequest): AddUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUser', 'POST', '/', 'json', true, 'form', request);
}

model AddUserSourceLogConfigRequest {
  deleted?: int32(name='Deleted', example='0', position='Body'),
  disPlayLine?: string(name='DisPlayLine', example='cn-shanghai.siem-project.siem-logstore', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc', position='Body'),
  sourceLogInfo: string(name='SourceLogInfo', example='{"project":"wafnew-project-1335759343513432-cn-hangzhou","logStore":"wafnew-logstore","regionCode":"cn-hangzhou","prodCode":"waf"}', position='Body'),
  sourceProdCode?: string(name='SourceProdCode', example='sas', position='Body'),
  subUserId: long(name='SubUserId', example='123XXXXXX', position='Body'),
}

model AddUserSourceLogConfigResponseBody = {
  data?: {
    diplayLine?: string(name='DiplayLine', example='cn-shanghai.siem-project.siem-logstore'),
    displayed?: boolean(name='Displayed', example='0'),
    imported?: boolean(name='Imported', example='0'),
    mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
    sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
    sourceProdCode?: string(name='SourceProdCode', example='sas'),
    subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
    subUserName?: string(name='SubUserName', example='sas_account_xxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model AddUserSourceLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserSourceLogConfigResponseBody(name='body'),
}

async function addUserSourceLogConfig(request: AddUserSourceLogConfigRequest): AddUserSourceLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserSourceLogConfig', 'POST', '/', 'json', true, 'form', request);
}

model BatchJobCheckRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Body'),
  submitId?: string(name='SubmitId', example='xxxxx_folder_xxxxxx', position='Body'),
}

model BatchJobCheckResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_logstore_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobCheckResponseBody(name='body'),
}

async function batchJobCheck(request: BatchJobCheckRequest): BatchJobCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchJobCheck', 'POST', '/', 'json', true, 'form', request);
}

model BatchJobSubmitRequest {
  jsonConfig?: string(name='JsonConfig', example='{{"autoSubmit":false,"configName":"test_builder","folderConfig":{"folderId":"rd-EUx7Qp","prodConfig":[{"allLogs":false,"allRegions":false,"logConfig":[{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}],"prodCode":"rds","regions":["cn-shanghai"]},{"allLogs":true,"allRegions":true,"prodCode":"sas"}],"type":"folder"},"listenRdChange":false,"logConfigs":{"cloud_siem_rds_audit_log":{"logCode":"cloud_siem_rds_audit_log","logStorePattern":"vpc-test","projectPattern":"vpc-test"}}}}', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Body'),
}

model BatchJobSubmitResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    configList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogstoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_cfw_flow'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc-test-logstore'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-test-project'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123xxxxxx'),
      }
    ](name='ConfigList'),
    submitId?: string(name='SubmitId', example='BATCH_JOB_XXXXXX'),
    taskCount?: int32(name='TaskCount', example='20'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model BatchJobSubmitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchJobSubmitResponseBody(name='body'),
}

async function batchJobSubmit(request: BatchJobSubmitRequest): BatchJobSubmitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchJobSubmit', 'POST', '/', 'json', true, 'form', request);
}

model BindAccountRequest {
  accessId: string(name='AccessId', example='ABCXXXXXXXX', position='Body'),
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  accountName: string(name='AccountName', example='xxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model BindAccountResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model BindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindAccountResponseBody(name='body'),
}

async function bindAccount(request: BindAccountRequest): BindAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAccount', 'POST', '/', 'json', true, 'form', request);
}

model CloseDeliveryRequest {
  logCode?: string(name='LogCode', description='The log code of the cloud service, such as the code of the process log for Security Center. You can obtain the log code from the response of the ListDelivery operation.', example='cloud_siem_aegis_proc', position='Body'),
  productCode: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='sas', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model CloseDeliveryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the threat analysis feature was disabled. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='F375A043-4F5B-55F2-A564-CC47FFC6****'),
}

model CloseDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseDeliveryResponseBody(name='body'),
}

async function closeDelivery(request: CloseDeliveryRequest): CloseDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseDelivery', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAutomateResponseConfigRequest {
  id?: long(name='Id', description='The ID of the rule.', example='123', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DeleteAutomateResponseConfigResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteAutomateResponseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutomateResponseConfigResponseBody(name='body'),
}

async function deleteAutomateResponseConfig(request: DeleteAutomateResponseConfigRequest): DeleteAutomateResponseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutomateResponseConfig', 'POST', '/', 'json', true, 'form', request);
}

model DeleteBindAccountRequest {
  accessId: string(name='AccessId', example='ABCXXXXXXXX', position='Body'),
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  bindId?: long(name='BindId', example='10', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteBindAccountResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBindAccountResponseBody(name='body'),
}

async function deleteBindAccount(request: DeleteBindAccountRequest): DeleteBindAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBindAccount', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCustomizeRuleRequest {
  regionId?: string(name='RegionId', description='The region in which the service is deployed.', example='cn-shanghai', position='Body'),
  ruleId?: long(name='RuleId', description='The ID of the rule.', example='123456789', position='Body'),
}

model DeleteCustomizeRuleResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: int32(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomizeRuleResponseBody(name='body'),
}

async function deleteCustomizeRule(request: DeleteCustomizeRuleRequest): DeleteCustomizeRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomizeRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSourceRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSourceLogRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  logInstanceId: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceLogResponseBody(name='body'),
}

async function deleteDataSourceLog(request: DeleteDataSourceLogRequest): DeleteDataSourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSourceLog', 'POST', '/', 'json', true, 'form', request);
}

model DeleteQuickQueryRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  searchName: string(name='SearchName', description='The name of the saved search.', example='display_login_ip_search', position='Body'),
}

model DeleteQuickQueryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the saved search is deleted. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
}

model DeleteQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQuickQueryResponseBody(name='body'),
}

async function deleteQuickQuery(request: DeleteQuickQueryRequest): DeleteQuickQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQuickQuery', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserRequest {
  addedUserId: long(name='AddedUserId', example='123XXXXXXXX', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWhiteRuleListRequest {
  id: long(name='Id', description='The unique ID of the whitelist rule.', example='123456789', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DeleteWhiteRuleListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: any(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWhiteRuleListResponseBody(name='body'),
}

async function deleteWhiteRuleList(request: DeleteWhiteRuleListRequest): DeleteWhiteRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWhiteRuleList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAggregateFunctionRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeAggregateFunctionResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      function?: string(name='Function', description='The aggregate function.', example='count'),
      functionName?: string(name='FunctionName', description='The display name of the aggregate function.', example='Count'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAggregateFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAggregateFunctionResponseBody(name='body'),
}

async function describeAggregateFunction(request: DescribeAggregateFunctionRequest): DescribeAggregateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAggregateFunction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSceneRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAlertSceneResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alertName?: string(name='AlertName', example='login_common_ip'),
      alertNameId?: string(name='AlertNameId', example='login_common_ip'),
      alertTile?: string(name='AlertTile', example='unusual login-login_common_ip'),
      alertTileId?: string(name='AlertTileId', example='unusual login-login_common_ip'),
      alertType?: string(name='AlertType', example='unusual login'),
      alertTypeId?: string(name='AlertTypeId', example='unusual login'),
      targets?: [ 
        {
          name?: string(name='Name', example='HOST UUID'),
          type?: string(name='Type', example='host_uuid'),
          value?: string(name='Value', example='441862da-a539-4cc0-a00d-47395582****'),
          values?: [ string ](name='Values', example='["441862da-a539-4cc0-a00d-473955826881"]'),
        }
      ](name='Targets', example='[{"Type": "host_uuid","Value": "441862da-a539-4cc0-a00d-473955826881","Values": ["441862da-a539-4cc0-a00d-473955826881"],"Name": "${aliyun.siem.entity.host_uuid}"}]'),
    }
  ](name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAlertSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSceneResponseBody(name='body'),
}

async function describeAlertScene(request: DescribeAlertSceneRequest): DescribeAlertSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertScene', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSceneByEventRequest {
  incidentUuid: string(name='IncidentUuid', description='The ID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeAlertSceneByEventResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      alertName?: string(name='AlertName', description='The alert name. The display name of the alert name varies based on the language of the system, such as Chinese and English.', example='login_common_ip'),
      alertNameId?: string(name='AlertNameId', description='The ID of the alert name.', example='login_common_ip'),
      alertTile?: string(name='AlertTile', description='The alert title. The display name of the alert title varies based on the language of the system, such as Chinese and English.', example='Unusual Logon-login_common_ip'),
      alertTileId?: string(name='AlertTileId', description='The ID of the alert title.', example='Unusual Logon-login_common_ip'),
      alertType?: string(name='AlertType', description='The alert type. The display name of the alert type varies based on the language of the system, such as Chinese and English.', example='Unusual Logon'),
      alertTypeId?: string(name='AlertTypeId', description='The ID of the alert type.', example='Unusual Logon'),
      targets?: [ 
        {
          name?: string(name='Name', description='The display name of the entity attribute field that can be added to the whitelist.', example='host uuid'),
          type?: string(name='Type', description='The entity attribute field that can be added to the whitelist.', example='host_uuid'),
          value?: string(name='Value', description='The right operand that is displayed by default in the whitelist rule.', example='441862da-a539-4cc0-a00d-47395582****'),
          values?: [ string ](name='Values', description='The supported right operands of the whitelist rule.', example='["441862da-a539-4cc0-a00d-473955826881"]'),
        }
      ](name='Targets', description='The objects that can be added to the whitelist.', example='[{"Type": "host_uuid","Value": "441862da-a539-4cc0-a00d-473955826881","Values": ["441862da-a539-4cc0-a00d-473955826881"],"Name": "${aliyun.siem.entity.host_uuid}"}]'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertSceneByEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSceneByEventResponseBody(name='body'),
}

async function describeAlertSceneByEvent(request: DescribeAlertSceneByEventRequest): DescribeAlertSceneByEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertSceneByEvent', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSourceRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  level?: [ string ](name='Level', description='The risk levels. The value is a JSON array. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='["serious","suspicious","remind"]', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
}

model DescribeAlertSourceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      source?: string(name='Source', description='The internal code of the alert data source.', example='aliyun.siem.alert_datasource.sas'),
      sourceName?: string(name='SourceName', description='The name of the alert data source.', example='sas'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSourceResponseBody(name='body'),
}

async function describeAlertSource(request: DescribeAlertSourceRequest): DescribeAlertSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertSource', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSourceWithEventRequest {
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeAlertSourceWithEventResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      source?: string(name='Source', description='The internal code of the alert data source.', example='aliyun.siem.alert_datasource.sas'),
      sourceName?: string(name='SourceName', description='The name of the alert data source.', example='sas'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertSourceWithEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertSourceWithEventResponseBody(name='body'),
}

async function describeAlertSourceWithEvent(request: DescribeAlertSourceWithEventRequest): DescribeAlertSourceWithEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertSourceWithEvent', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertTypeRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeAlertTypeResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      alertType?: string(name='AlertType', description='The type of the risk.', example='WEBSHELL'),
      alertTypeMds?: string(name='AlertTypeMds', description='The internal code of the risk type.', example='siem_rule_type_process_abnormal_command'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertTypeResponseBody(name='body'),
}

async function describeAlertType(request: DescribeAlertTypeRequest): DescribeAlertTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertType', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertsRequest {
  alertTitle?: string(name='AlertTitle', description='The title of the alert.', example='Unusual Logon-login_common_account', position='Body'),
  alertUuid?: string(name='AlertUuid', description='The UUID of the alert.', example='sas_71e24437d2797ce8fc59692905a4****', position='Body'),
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  isDefend?: string(name='IsDefend', description='Specifies whether an attack is defended. Valid values:

*   0: detected.
*   1: blocked.', example='1', position='Body'),
  level?: [ string ](name='Level', description='The risk level. The value is a JSON array. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='["serious","suspicious","remind"]', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  source?: string(name='Source', description='The source of the alert.', example='sas', position='Body'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  subUserId?: string(name='SubUserId', description='The ID of the Alibaba Cloud account within which the alert is generated.', example='176555323***', position='Body'),
}

model DescribeAlertsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', description='The description of the alert.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', description='The internal code of the alert description.', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', description='The description of the alert in English.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', description='The details of the alert.', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', description='The attribute key.', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', description='The name of the key.', example='Trojan Path'),
            values?: string(name='Values', description='The value of the key.', example='/root/test33.php'),
          }
        ](name='AlertInfoList', description='The displayed details of the alert.', example='aliyun'),
        alertLevel?: string(name='AlertLevel', description='The threat level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
        alertName?: string(name='AlertName', description='The name of the alert.', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', description='The internal code of the alert name.', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', description='The name of the alert in English.', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', description='The service for which the alert associated with the event is generated.', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', description='The sub-module of ther alert source.', example='waf'),
        alertTitle?: string(name='AlertTitle', description='The title of the alert.', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', description='The title of the alert in English.', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', description='The alert type.', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', description='The internal code of the alert type.', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', description='The type of the alert in English.', example='Scan'),
        alertUuid?: string(name='AlertUuid', description='The UUID of the alert.', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', description='The details of the asset.', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', description='The tag of the ATT\\&CK attack.', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', description='The cloud code. Valid values:

*   aliyun: Alibaba Cloud
*   qcloud: Tencent Cloud
*   hcloud: Huawei Cloud', example='aliyun'),
        endTime?: string(name='EndTime', description='The time when the alert was closed.', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', description='The time when the alert was received.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The time when the alert was last updated.', example='2021-01-06 16:37:29'),
        id?: long(name='Id', description='The unique ID of the alert.', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend', description='Indicates whether an attack is defended. Valid values:

*   0: detected.
*   1: blocked.', example='1'),
        logTime?: string(name='LogTime', description='The time when the alert was recorded.', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', description='The UUID of the alert log.', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', description='The ID of the Alibaba Cloud account that is associated with the alert in SIEM.', example='127608589417****'),
        occurTime?: string(name='OccurTime', description='The time when the alert is triggered.', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', description='The time at which the alert was first generated.', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', description='The ID of the Alibaba Cloud account within which the alert is generated.', example='176555323***'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsResponseBody(name='body'),
}

async function describeAlerts(request: DescribeAlertsRequest): DescribeAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlerts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertsCountRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
}

model DescribeAlertsCountResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    all?: long(name='All', description='The total number of alerts.', example='75'),
    high?: long(name='High', description='The number of high-risk alerts.', example='25'),
    low?: long(name='Low', description='The number of low-risk alerts.', example='25'),
    medium?: long(name='Medium', description='The number of medium-risk alerts.', example='25'),
    productNum?: int32(name='ProductNum', description='The number of connected services.', example='3'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertsCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsCountResponseBody(name='body'),
}

async function describeAlertsCount(request: DescribeAlertsCountRequest): DescribeAlertsCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertsCount', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertsWithEntityRequest {
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  entityId?: long(name='EntityId', description='The ID of the entity.', example='123456789', position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  sophonTaskId?: string(name='SophonTaskId', description='The ID of the SOAR handing policy.', example='577bbf90-a770-44a7-8154-586aa2d318fa', position='Body'),
}

model DescribeAlertsWithEntityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', description='The description of the alert.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', description='The internal code of the alert description.', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', description='The alert description in English.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', description='The details of the alert.', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', description='The attribute key.', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', description='The name of the key.', example='Trojan Path'),
            values?: string(name='Values', description='The value of the key.', example='/root/test33.php'),
          }
        ](name='AlertInfoList', description='The displayed details of the alert.', example='aliyun'),
        alertLevel?: string(name='AlertLevel', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
        alertName?: string(name='AlertName', description='The name of the alert.', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', description='The internal code of the alert name.', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', description='The name of the alert.', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', description='The source of the alert.', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', description='The sub-module of the alert source.', example='waf'),
        alertTitle?: string(name='AlertTitle', description='The title of the alert.', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', description='The alert title in English.', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', description='The type of the alert.', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', description='The internal code of the alert type.', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', description='The alert type in English.', example='Scan'),
        alertUuid?: string(name='AlertUuid', description='The UUID of the alert.', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', description='The details of the asset.', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', description='The tag of the ATT\\&CK attack.', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', description='The cloud code. Valid values:

*   aliyun: Alibaba Cloud
*   qcloud: Tencent Cloud
*   hcloud: Huawei Cloud', example='aliyun'),
        endTime?: string(name='EndTime', description='The time when the alert was closed.', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', description='The time when the alert was received.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The time when the alert was last updated.', example='2021-01-06 16:37:29'),
        id?: long(name='Id', description='The unique ID of the alert.', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend', description='Specifies whether an attack is defended. Valid values:

*   0: detected
*   1: blocked', example='1'),
        logTime?: string(name='LogTime', description='The time when the alert was recorded.', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', description='The UUID of the alert log.', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', description='The ID of the Alibaba Cloud account that is associated with the alert in SIEM.', example='127608589417****'),
        occurTime?: string(name='OccurTime', description='The time when the alert was triggered.', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', description='The time at which the alert was first generated.', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', description='The ID of the Alibaba Cloud account within which the alert is generated.', example='176555323***'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertsWithEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsWithEntityResponseBody(name='body'),
}

async function describeAlertsWithEntity(request: DescribeAlertsWithEntityRequest): DescribeAlertsWithEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertsWithEntity', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertsWithEventRequest {
  alertTitle?: string(name='AlertTitle', description='The title of the alert.', example='Scan-Try SNMP weak password', position='Body'),
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The ID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  isDefend?: string(name='IsDefend', description='Specifies whether an attack is defended. Valid values:

*   0: detected
*   1: blocked', example='1', position='Body'),
  level?: [ string ](name='Level', description='The risk levels. The value is a JSON array. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='["serious","suspicious","remind"]', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  source?: string(name='Source', description='The data source of the alert.', example='sas', position='Body'),
  subUserId?: long(name='SubUserId', description='The ID of the account within which the alert is generated.', example='176555323***', position='Body'),
}

model DescribeAlertsWithEventResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', description='The description of the alert.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDescCode?: string(name='AlertDescCode', description='The internal code of the alert description.', example='security_event_config.event_name.webshell'),
        alertDescEn?: string(name='AlertDescEn', description='The alert description in English.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
        alertDetail?: string(name='AlertDetail', description='The details of the alert.', example='{"main_user_id": "165295629792****";"log_uuid_count": "99";"attack_ip": "21.92.*.*"}'),
        alertInfoList?: [ 
          {
            key?: string(name='Key', description='The attribute key.', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', description='The name of the key.', example='Trojan Path'),
            values?: string(name='Values', description='The value of the key.', example='/root/test33.php'),
          }
        ](name='AlertInfoList', description='The displayed details of the alert.', example='aliyun'),
        alertLevel?: string(name='AlertLevel', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
        alertName?: string(name='AlertName', description='The name of the alert.', example='Try SNMP weak password'),
        alertNameCode?: string(name='AlertNameCode', description='The internal code of the alert name.', example='security_event_config.event_name.webshell'),
        alertNameEn?: string(name='AlertNameEn', description='The alert name in English.', example='Try SNMP weak password'),
        alertSrcProd?: string(name='AlertSrcProd', description='The source of the alert.', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', description='The sub-module of the alert source.', example='waf'),
        alertTitle?: string(name='AlertTitle', description='The title of the alert.', example='Scan-Try SNMP weak password'),
        alertTitleEn?: string(name='AlertTitleEn', description='The alert title in English.', example='Scan-Try SNMP weak password'),
        alertType?: string(name='AlertType', description='The type of the alert.', example='Scan'),
        alertTypeCode?: string(name='AlertTypeCode', description='The internal code of the alert type.', example='security_event_config.event_name.webshellName'),
        alertTypeEn?: string(name='AlertTypeEn', description='The alert type in English.', example='Scan'),
        alertUuid?: string(name='AlertUuid', description='The UUID of the alert.', example='sas_71e24437d2797ce8fc59692905a4****'),
        assetList?: string(name='AssetList', description='The details of the asset.', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
        attCk?: string(name='AttCk', description='The tag of the ATT\\&CK attack.', example='T1595.002 Vulnerability Scanning'),
        cloudCode?: string(name='CloudCode', description='The cloud code. Valid values:

*   aliyun: Alibaba Cloud
*   qcloud: Tencent Cloud
*   hcloud: Huawei Cloud', example='aliyun'),
        endTime?: string(name='EndTime', description='The time when the alert was closed.', example='2021-01-06 16:37:29'),
        gmtCreate?: string(name='GmtCreate', description='The time when the alert was received.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The time when the alert was last updated.', example='2021-01-06 16:37:29'),
        id?: long(name='Id', description='The unique ID of the alert.', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        isDefend?: string(name='IsDefend', description='Indicates whether an attack is defended. Valid values:

*   0: detected
*   1: blocked', example='1'),
        logTime?: string(name='LogTime', description='The time when the alert was recorded.', example='2021-01-06 16:37:29'),
        logUuid?: string(name='LogUuid', description='The UUID of the alert log.', example='cfw_d12e285a-a042-4d7e-be89-f8a795ef****'),
        mainUserId?: long(name='MainUserId', description='The ID of the Alibaba Cloud account that is associated with the alert in SIEM.', example='127608589417****'),
        occurTime?: string(name='OccurTime', description='The time when the alert was triggered.', example='2021-01-06 16:37:29'),
        startTime?: string(name='StartTime', description='The time at which the alert was first generated.', example='2021-01-06 16:37:29'),
        subUserId?: long(name='SubUserId', description='The ID of the Alibaba Cloud account within which the alert is generated.', example='176555323***'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertsWithEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertsWithEventResponseBody(name='body'),
}

async function describeAlertsWithEvent(request: DescribeAlertsWithEventRequest): DescribeAlertsWithEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertsWithEvent', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAttackTimeLineRequest {
  assetName?: string(name='AssetName', description='The name of the asset.', example='zsw-agentless-centos****', position='Body'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The ID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577803000000', position='Body'),
}

model DescribeAttackTimeLineResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      alertLevel?: string(name='AlertLevel', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
      alertName?: string(name='AlertName', description='The alert name in English.', example='Try SNMP weak password'),
      alertNameCode?: string(name='AlertNameCode', description='The internal code of the alert name.', example='security_event_config.event_name.webshell'),
      alertNameEn?: string(name='AlertNameEn', description='The alert name in English.', example='Try SNMP weak password'),
      alertSrcProd?: string(name='AlertSrcProd', description='The source of the alert.', example='sas'),
      alertSrcProdModule?: string(name='AlertSrcProdModule', description='The sub-module of the alert source.', example='waf'),
      alertTime?: long(name='AlertTime', description='The time when the alert was triggered.', example='2021-01-06 16:37:29'),
      alertTitle?: string(name='AlertTitle', description='The title of the alert.', example='Scan-Try SNMP weak password'),
      alertTitleEn?: string(name='AlertTitleEn', description='The alert title in English.', example='Scan-Try SNMP weak password'),
      alertType?: string(name='AlertType', description='The type of the alert.', example='Scan'),
      alertTypeCode?: string(name='AlertTypeCode', description='The internal code of the alert type.', example='security_event_config.event_name.webshellName'),
      alertTypeEn?: string(name='AlertTypeEn', description='The alert type in English.', example='Scan'),
      alertUuid?: string(name='AlertUuid', description='The UUID of the alert', example='sas_71e24437d2797ce8fc59692905a4****'),
      assetId?: string(name='AssetId', description='The logical ID of the asset.', example='0616caeb-acb8-45e0-8520-4ee5fbe251f0'),
      assetList?: string(name='AssetList', description='The details of the asset.', example='[
      {
            "is_main_asset": "1",
            "asset_name": "47.245.*",
            "port": "22",
            "ip": "47.245.*",
            "asset_type": "ip",
            "location": "ap-southeast-1",
            "asset_id": "47.245.*",
            "net_connect_dir": "in"
      }
]'),
      assetName?: string(name='AssetName', description='The name of the asset.', example='zsw-agentless-centos****'),
      attCk?: string(name='AttCk', description='The tag of the ATT\\&CK attack.', example='T1595.002 Vulnerability Scanning'),
      cloudCode?: string(name='CloudCode', description='The cloud code. Valid values:

*   aliyun: Alibaba Cloud
*   qcloud: Tencent Cloud
*   hcloud: Huawei Cloud', example='aliyun'),
      incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
      logTime?: string(name='LogTime', description='The time when the alert was recorded.', example='2021-01-06 16:37:29'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAttackTimeLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAttackTimeLineResponseBody(name='body'),
}

async function describeAttackTimeLine(request: DescribeAttackTimeLineRequest): DescribeAttackTimeLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAttackTimeLine', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAuthRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeAuthResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='4F539347-7D9A-51EA-8ABF-5D5507045C5C'),
}

model DescribeAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuthResponseBody(name='body'),
}

async function describeAuth(request: DescribeAuthRequest): DescribeAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuth', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAutomateResponseConfigCounterRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeAutomateResponseConfigCounterResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    all?: long(name='All', description='The total number of rules.', example='20'),
    online?: long(name='Online', description='The number of enabled rules.', example='10'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAutomateResponseConfigCounterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigCounterResponseBody(name='body'),
}

async function describeAutomateResponseConfigCounter(request: DescribeAutomateResponseConfigCounterRequest): DescribeAutomateResponseConfigCounterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutomateResponseConfigCounter', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAutomateResponseConfigFeatureRequest {
  autoResponseType?: string(name='AutoResponseType', description='The type of the automated response rule. Valid values:

*   event
*   alert', example='event', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeAutomateResponseConfigFeatureResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      dataType?: string(name='DataType', description='The data type of the condition field in the automated response rule.', example='varchar'),
      feature?: string(name='Feature', description='The name of the condition field in the automated response rule.', example='alert_desc'),
      rightValueEnums?: [ 
        {
          value?: string(name='Value', description='The enumerated value of the right operand.', example='serious'),
          valueMds?: string(name='ValueMds', description='The internal code of the enumerated value.', example='aliyun.siem.automate.feature.alert_level.serious'),
        }
      ](name='RightValueEnums', description='The enumerated values of the right operand for the field.'),
      supportOperators?: [ 
        {
          hasRightValue?: boolean(name='HasRightValue', description='Indicates whether the right operand is required. Valid values:

*   true
*   false', example='false'),
          index?: int32(name='Index', description='The position of the operator in the operator list.', example='3'),
          operator?: string(name='Operator', description='The operator.', example='<='),
          operatorDescCn?: string(name='OperatorDescCn', description='The description of the operator in Chinese.', example='larger than or equal to'),
          operatorDescEn?: string(name='OperatorDescEn', description='The description of the operator in English.', example='larger than or equal to'),
          operatorName?: string(name='OperatorName', description='The display name of the operator.', example='<='),
          supportDataType?: string(name='SupportDataType', description='The data types that are supported by the current operator. The data types are separated by commas (,).', example='varchar'),
          supportTag?: [ string ](name='SupportTag', description='The scenarios that are supported by the operator. Multiple scenarios are separated by commas (,), such as aggregation scenarios. This parameter is empty by default.', example='[AGGREGATE]'),
        }
      ](name='SupportOperators', description='The operators that are supported for the condition field.'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAutomateResponseConfigFeatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigFeatureResponseBody(name='body'),
}

async function describeAutomateResponseConfigFeature(request: DescribeAutomateResponseConfigFeatureRequest): DescribeAutomateResponseConfigFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutomateResponseConfigFeature', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAutomateResponseConfigPlayBooksRequest {
  autoResponseType?: string(name='AutoResponseType', description='The type of the automated response rule. Valid values:

*   event
*   alert', example='event', position='Body'),
  entityType?: string(name='EntityType', description='The entity type of the playbook. Valid values:

*   ip
*   process
*   file', example='ip', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeAutomateResponseConfigPlayBooksResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      description?: string(name='Description', description='The description of the playbook.', example='Waf Block IP'),
      displayName?: string(name='DisplayName', description='The display name of the playbook.', example='WafBlockIP'),
      name?: string(name='Name', description='The unique identifier name of the playbook.', example='WafBlockIP'),
      paramType?: string(name='ParamType', description='The input parameter template of the playbook. Valid values:

*   template-ip: IP address
*   template-process: process
*   template-filee: file', example='template-ip'),
      uuid?: string(name='Uuid', description='The UUID of the playbook.', example='system_aliyun_clb_process_book'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAutomateResponseConfigPlayBooksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutomateResponseConfigPlayBooksResponseBody(name='body'),
}

async function describeAutomateResponseConfigPlayBooks(request: DescribeAutomateResponseConfigPlayBooksRequest): DescribeAutomateResponseConfigPlayBooksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutomateResponseConfigPlayBooks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudSiemAssetsRequest {
  assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   ip
*   domain
*   url
*   process
*   file
*   host', example='ip', position='Body'),
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeCloudSiemAssetsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertUuid?: string(name='AlertUuid', description='The UUID of the alert associated with the event.', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account in SIEM.', example='1276085894174392'),
        assetId?: string(name='AssetId', description='The logical ID of the asset.', example='0616caeb-acb8-45e0-8520-4ee5fbe251f0'),
        assetInfo?: [ 
          {
            key?: string(name='Key', description='The attribute key.', example='suspicious.wbd.wb.trojanpath'),
            keyName?: string(name='KeyName', description='The name of the key.', example='Trojan Path'),
            values?: string(name='Values', description='The value of the key.', example='/root/test33.php'),
          }
        ](name='AssetInfo', description='The display information of the asset is in the JSON format.', example='[{"KeyName": "${aliyun.siem.asset.asset_name}","Values": "zsw-agentless-ubuntu20","Key": "asset_name"}]'),
        assetName?: string(name='AssetName', description='The name of the asset.', example='zsw-agentless-centos****'),
        assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   ip
*   domain
*   url
*   process
*   file
*   host', example='domain'),
        cloudCode?: string(name='CloudCode', description='The cloud code of the entity. Valid values:

*   aliyun: Alibaba Cloud
*   qcloud: Tencent Cloud
*   hcloud: Huawei Cloud', example='aliyun'),
        gmtCreate?: string(name='GmtCreate', description='The time when the asset was synchronized.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The time when the asset was last updated.', example='2021-01-06 16:37:29'),
        id?: long(name='Id', description='The ID of the asset.', example='123'),
        incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        subUserId?: long(name='SubUserId', description='The ID of the associated account to which the asset belongs.', example='176555323***'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeCloudSiemAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemAssetsResponseBody(name='body'),
}

async function describeCloudSiemAssets(request: DescribeCloudSiemAssetsRequest): DescribeCloudSiemAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudSiemAssets', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudSiemAssetsCounterRequest {
  incidentUuid: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeCloudSiemAssetsCounterResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      assetNum?: int32(name='AssetNum', description='The number of assets.', example='1'),
      assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   ip
*   domain
*   url
*   process
*   file
*   host', example='domain'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeCloudSiemAssetsCounterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemAssetsCounterResponseBody(name='body'),
}

async function describeCloudSiemAssetsCounter(request: DescribeCloudSiemAssetsCounterRequest): DescribeCloudSiemAssetsCounterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudSiemAssetsCounter', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudSiemEventDetailRequest {
  incidentUuid: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeCloudSiemEventDetailResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    alertNum?: int32(name='AlertNum', description='The number of alerts that are associated with the event.', example='4'),
    aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account to which the event belongs.', example='127608589417****'),
    assetNum?: int32(name='AssetNum', description='The number of assets that are associated with the event.', example='4'),
    attCkLabels?: [ string ](name='AttCkLabels', description='The tags of the ATT\\&CK attacks.', example='["T1595.002 Vulnerability Scanning"]'),
    dataSources?: [ string ](name='DataSources', description='The source of the alert.', example='[sas,waf]'),
    description?: string(name='Description', description='The description of the event.', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
    descriptionEn?: string(name='DescriptionEn', description='The description of the event in English.', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
    extContent?: string(name='ExtContent', description='The extended information of the event in the JSON format.', example='{"event_transfer_type":"customize_rule"}'),
    gmtCreate?: string(name='GmtCreate', description='The time when the event occurred.', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', description='The time when the event was last updated.', example='2021-01-06 16:37:29'),
    incidentName?: string(name='IncidentName', description='The name of the event.', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
    incidentNameEn?: string(name='IncidentNameEn', description='The name of the event in English.', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
    incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
    remark?: string(name='Remark', description='The remarks of the event.', example='dealed'),
    status?: int32(name='Status', description='The status of the event. Valid values:

*   0: not handled
*   1: handing
*   5: handling failed
*   10: handled', example='0'),
    threatLevel?: string(name='ThreatLevel', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
    threatScore?: float(name='ThreatScore', description='The risk score of the event. The score ranges from 0 to 100. A higher score indicates a higher risk level.', example='90.2'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeCloudSiemEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemEventDetailResponseBody(name='body'),
}

async function describeCloudSiemEventDetail(request: DescribeCloudSiemEventDetailRequest): DescribeCloudSiemEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudSiemEventDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudSiemEventsRequest {
  assetId?: string(name='AssetId', description='The ID of the asset that is associated with the event.', example='6c740667-80b2-476d-8924-2e706feb****', position='Body'),
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  eventName?: string(name='EventName', description='The name of the event.', example='ECS unusual log in', position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The ID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  order?: string(name='Order', description='The sort order. Valid values:

*   desc: descending order
*   asc: ascending order', example='desc', position='Body'),
  orderField?: string(name='OrderField', description='The sort field. Valid values:

*   GmtModified: sorts the events by creation time. This is the default value.
*   ThreatScore: sorts the events by risk score.', example='ThreatScore', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  status?: int32(name='Status', description='The status of the event. Valid values:

*   0: unhandled
*   1: handling
*   5: handling failed
*   10: handled', example='0', position='Body'),
  threadLevel?: [ string ](name='ThreadLevel', description='The risk levels of the events. The value is a JSON array. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='["serious","suspicious","remind"]', position='Body'),
}

model DescribeCloudSiemEventsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertNum?: int32(name='AlertNum', description='The number of alerts that are associated with the event.', example='4'),
        aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account to which the event belongs.', example='127608589417****'),
        assetNum?: int32(name='AssetNum', description='The number of assets that are associated with the event.', example='4'),
        attCkLabels?: [ string ](name='AttCkLabels', description='The tags of the ATT\\&CK attack.', example='["T1595.002 Vulnerability Scanning"]'),
        dataSources?: [ string ](name='DataSources', description='The sources of the alert.', example='[sas,waf]'),
        description?: string(name='Description', description='The description of the event.', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
        descriptionEn?: string(name='DescriptionEn', description='The event description in English.', example='The threat event contains 13 Miner Network,1 Execute suspicious encoded commands on Linux, etc'),
        extContent?: string(name='ExtContent', description='The extended event information in the JSON format.', example='{"event_transfer_type":"customize_rule"}'),
        gmtCreate?: string(name='GmtCreate', description='The time when the event occurred.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The time when the event was last updated.', example='2021-01-06 16:37:29'),
        incidentName?: string(name='IncidentName', description='The name of the event.', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentNameEn?: string(name='IncidentNameEn', description='The event name in English.', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        remark?: string(name='Remark', description='The remarks of the event.', example='dealed'),
        status?: int32(name='Status', description='The status of the event. Valid values:

*   0: unhandled
*   1: handling
*   5: handling failed
*   10: handled', example='0'),
        threatLevel?: string(name='ThreatLevel', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
        threatScore?: float(name='ThreatScore', description='The risk score of the event. Valid values: 0 to 100. A higher value indicates a higher risk level.', example='90.2'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeCloudSiemEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudSiemEventsResponseBody(name='body'),
}

async function describeCloudSiemEvents(request: DescribeCloudSiemEventsRequest): DescribeCloudSiemEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudSiemEvents', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCsImportedProdStatusByUserRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceLogProd?: string(name='SourceLogProd', example='sas', position='Body'),
  userId?: long(name='UserId', example='123XXXXXX', position='Body'),
}

model DescribeCsImportedProdStatusByUserResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeCsImportedProdStatusByUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCsImportedProdStatusByUserResponseBody(name='body'),
}

async function describeCsImportedProdStatusByUser(request: DescribeCsImportedProdStatusByUserRequest): DescribeCsImportedProdStatusByUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCsImportedProdStatusByUser', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomizeRuleRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  ruleId?: long(name='RuleId', description='The ID of the rule.', example='123456789', position='Body'),
}

model DescribeCustomizeRuleResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    alertType?: string(name='AlertType', description='The risk type.', example='WEBSHELL'),
    alertTypeMds?: string(name='AlertTypeMds', description='The internal code of the risk type.', example='siem_rule_type_process_abnormal_command'),
    aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account in SIEM.', example='127608589417****'),
    eventTransferExt?: string(name='EventTransferExt', description='The extended information about event generation. If the value of eventTransferType is allToSingle, the value of this parameter indicates the length and unit of the alert aggregation window. The HTML escape characters are reversed.', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
    eventTransferSwitch?: int32(name='EventTransferSwitch', description='Indicates whether the alert generates an event. Valid values:

*   0: no
*   1: yes', example='1'),
    eventTransferType?: string(name='EventTransferType', description='The event generation method. Valid values:

*   default: The default method is used.
*   singleToSingle: The system generates an event for each alert.
*   allToSingle: The system generates an event for alerts within a period of time.', example='allToSingle'),
    gmtCreate?: string(name='GmtCreate', description='The time when the custom rule was created.', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', description='The time when the custom rule was last updated.', example='2021-01-06 16:37:29'),
    id?: long(name='Id', description='The ID of the custom rule.', example='123456789'),
    logSource?: string(name='LogSource', description='The log source of the rule.', example='cloud_siem_aegis_sas_alert'),
    logSourceMds?: string(name='LogSourceMds', description='The internal code of the log source.', example='sas.cloudsiem.prod.cloud_siem_aegis_sas_alert'),
    logType?: string(name='LogType', description='The log type of the rule.', example='ALERT_ACTIVITY'),
    logTypeMds?: string(name='LogTypeMds', description='The internal code of the log type.', example='security_event_config.event_name.webshellName_clientav'),
    queryCycle?: string(name='QueryCycle', description='The window length of the rule. The HTML escape characters are reversed.', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
    ruleCondition?: string(name='RuleCondition', description='The query condition of the rule. The value is in the JSON format. The HTML escape characters are reversed.', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
    ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='this rule is for waf scan'),
    ruleGroup?: string(name='RuleGroup', description='The log aggregation field. The value is in the JSON format. The HTML escape characters are reversed.', example='[&quot;asset_id&quot;]'),
    ruleName?: string(name='RuleName', description='The name of the rule.', example='waf_scan'),
    ruleThreshold?: string(name='RuleThreshold', description='The threshold configuration of the rule. The value is in the JSON format. The HTML escape characters are reversed.', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
    ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   predefine
*   customize', example='customize'),
    status?: int32(name='Status', description='The rule status. Valid values:

*   0: The rule is in the initial state.
*   10: The simulation data is tested.
*   15: The business data is being tested.
*   20: The business data test ends.
*   100: The rule takes effect.', example='0'),
    threatLevel?: string(name='ThreatLevel', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleResponseBody(name='body'),
}

async function describeCustomizeRule(request: DescribeCustomizeRuleRequest): DescribeCustomizeRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizeRule', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomizeRuleCountRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeCustomizeRuleCountResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: {
    highRuleNum?: int32(name='HighRuleNum', description='The number of rules that are used to identify high-risk threats.', example='12'),
    inUseRuleNum?: int32(name='InUseRuleNum', description='The total number of rules.', example='20'),
    lowRuleNum?: int32(name='LowRuleNum', description='The number of rules that are used to identify low-risk threats.', example='3'),
    mediumRuleNum?: int32(name='MediumRuleNum', description='The number of rules that are used to identify medium-risk threats.', example='5'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeCustomizeRuleCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleCountResponseBody(name='body'),
}

async function describeCustomizeRuleCount(request: DescribeCustomizeRuleCountRequest): DescribeCustomizeRuleCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizeRuleCount', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomizeRuleTestRequest {
  id?: long(name='Id', description='The ID of the rule.', example='123456789', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    id?: long(name='Id', description='The ID of the rule.', example='123456789'),
    simulateData?: string(name='SimulateData', description='The historical data that is used in the simulation test.', example='[{"key1":"value1","key2":"value2","key3":"value3","key4":"value4","key5":"value5"}]'),
    status?: int32(name='Status', description='The status of the rule. Valid values:

*   0: The rule is in the initial state.
*   10: The simulation data is tested.
*   15: The business data is being tested.
*   20: The business data test ends.
*   100: The rule takes effect.', example='0'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleTestResponseBody(name='body'),
}

async function describeCustomizeRuleTest(request: DescribeCustomizeRuleTestRequest): DescribeCustomizeRuleTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizeRuleTest', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomizeRuleTestHistogramRequest {
  id?: long(name='Id', description='The ID of the rule.', example='123456789', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeCustomizeRuleTestHistogramResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      count?: long(name='Count', description='The number of alerts that are generated in the query time range.', example='125'),
      from?: long(name='From', description='The start of the time range for querying alerts. The value is a UNIX timestamp. Unit: seconds.', example='1599897188'),
      to?: long(name='To', description='The end of the time range for querying alerts. The value is a UNIX timestamp. Unit: seconds.', example='1599997188'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeCustomizeRuleTestHistogramResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizeRuleTestHistogramResponseBody(name='body'),
}

async function describeCustomizeRuleTestHistogram(request: DescribeCustomizeRuleTestHistogramRequest): DescribeCustomizeRuleTestHistogramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizeRuleTestHistogram', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDataSourceInstanceRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeDataSourceInstanceResponseBody = {
  data?: {
    accountId?: string(name='AccountId', example='123xxxxxxx'),
    cloudCode?: string(name='CloudCode', example='hcloud'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
    dataSourceInstanceParams?: [ 
      {
        paraCode?: string(name='ParaCode', example='region_code'),
        paraValue?: string(name='ParaValue', example='ap-guangzhou'),
      }
    ](name='DataSourceInstanceParams'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeDataSourceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSourceInstanceResponseBody(name='body'),
}

async function describeDataSourceInstance(request: DescribeDataSourceInstanceRequest): DescribeDataSourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourceInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDataSourceParametersRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceType: string(name='DataSourceType', example='obs', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeDataSourceParametersResponseBody = {
  data?: [ 
    {
      canEditted?: int32(name='CanEditted', example='wafApi'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
      defaultValue?: string(name='DefaultValue', example='wafApi'),
      disabled?: boolean(name='Disabled', example='wafApi'),
      formatCheck?: string(name='FormatCheck', example='email'),
      hit?: string(name='Hit', example='obs docment'),
      paraCode?: string(name='ParaCode', example='region_code'),
      paraLevel?: int32(name='ParaLevel', example='1'),
      paraName?: string(name='ParaName', example='region local'),
      paraType?: string(name='ParaType', example='string'),
      paramValue?: [ 
        {
          label?: string(name='Label', example='guangzhou'),
          value?: string(name='Value', example='ap-guangzhou'),
        }
      ](name='ParamValue'),
      required?: int32(name='Required', example='string'),
      title?: string(name='Title', example='obs bucket name'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeDataSourceParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSourceParametersResponseBody(name='body'),
}

async function describeDataSourceParameters(request: DescribeDataSourceParametersRequest): DescribeDataSourceParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSourceParameters', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDisposeAndPlaybookRequest {
  currentPage?: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', position='Body'),
  entityType?: string(name='EntityType', description='The entity type. Valid values:

*   ip: IP address
*   process: process
*   file: file', example='ip', position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='10', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeDisposeAndPlaybookResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertNum?: int32(name='AlertNum', description='The number of alerts that are associated with the entity.', example='1'),
        dispose?: string(name='Dispose', description='The object for handling.', example='192.168.1.1'),
        entityId?: long(name='EntityId', description='The entity ID', example='12345'),
        entityInfo?: map[string]any(name='EntityInfo', description='The entity information.', example='{"file_path": "c:/www/leixi.jsp","file_hash": "aa0ca926ad948cd820e0a3d9a18c09d0","host_uuid": "efed2cf7-0b77-45d9-a97b-d2cf246bcbb3","malware_type": "${aliyun.siem.sas.alert_tag.webshell}","host_name": "launch-advisor-20230531"}'),
        opcodeMap?: map[string]string(name='OpcodeMap', description='The key-value pairs each of which consists of opcode and oplevel.', example='12345'),
        opcodeSet?: [ string ](name='OpcodeSet', description='An array consisting of the codes of playbooks that are recommended for entity handling.', example='[1,3]'),
        playbookList?: [ 
          {
            description?: string(name='Description', description='The playbook description.', example='WafBlockIP'),
            displayName?: string(name='DisplayName', description='The display name of the playbook.', example='WafBlockIP'),
            name?: string(name='Name', description='The playbook name, which is the unique identifier of the playbook.', example='kill_process_isolate_file'),
            opCode?: string(name='OpCode', description='The opcode of the playbook, which corresponds to the opcode of the playbook recommended for entity handling.', example='7'),
            opLevel?: string(name='OpLevel', description='Indicates whether quick event handling is selected by default. Valid values:

*   2: Quick event handling is selected.
*   1: Quick event handling is displayed but not selected.', example='2'),
            taskConfig?: string(name='TaskConfig', description='The opcode configuration.', example='{"opCode":"3"}'),
            wafPlaybook?: boolean(name='WafPlaybook', description='Indicates whether the playbook is intended for Web Application Firewall (WAF). Valid values:

*   true
*   false', example='false'),
          }
        ](name='PlaybookList', description='The playbooks that can handle the entity.', example='[{"name":"云安全中心-云服务器安全","code":"1"}]'),
        scope?: [ any ](name='Scope', description='An array consisting of the IDs of the users who can handle objects.', example='176618589410****'),
      }
    ](name='ResponseData', description='The detailed data'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeDisposeAndPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisposeAndPlaybookResponseBody(name='body'),
}

async function describeDisposeAndPlaybook(request: DescribeDisposeAndPlaybookRequest): DescribeDisposeAndPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDisposeAndPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDisposeStrategyPlaybookRequest {
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
}

model DescribeDisposeStrategyPlaybookResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: [ 
    {
      playbookName?: string(name='PlaybookName', description='The playbook name, which is the unique identifier of the playbook.', example='WafBlockIP'),
      playbookUuid?: string(name='PlaybookUuid', description='The UUID of the playbook.', example='system_aliyun_clb_process_book'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeDisposeStrategyPlaybookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisposeStrategyPlaybookResponseBody(name='body'),
}

async function describeDisposeStrategyPlaybook(request: DescribeDisposeStrategyPlaybookRequest): DescribeDisposeStrategyPlaybookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDisposeStrategyPlaybook', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEntityInfoRequest {
  entityId?: long(name='EntityId', description='The logical ID of the entity.', example='12345', position='Body'),
  entityIdentity?: string(name='EntityIdentity', description='The feature value of the entity. Fuzzy match is supported.', example='test22.php', position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  sophonTaskId?: string(name='SophonTaskId', description='The ID of the SOAR handling policy.', example='577bbf90-a770-44a7-8154-586aa2d318fa', position='Body'),
}

model DescribeEntityInfoResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    entityId?: long(name='EntityId', description='The logical ID of the entity.', example='12345'),
    entityInfo?: map[string]any(name='EntityInfo', description='The information about the entry.', example='{ location: "xian", net_connect_dir: "in", malware_type: "${aliyun.siem.sas.alert_tag.login_unusual_account}" }'),
    entityType?: string(name='EntityType', description='The type of the entity. Valid values:

*   ip
*   domain
*   url
*   process
*   file
*   host', example='ip'),
    tipInfo?: map[string]any(name='TipInfo', description='The information about the risk Intelligence.', example='{
      "Ip": {
            "queryHot": "0",
            "country": "China",
            "province": "shanxi",
            "ip": "221.11.17.122",
            "asn": "4837",
            "asn_label": "CHINA169-Backbone - CHINA UNICOM China169 Backbone, CN"
      }
}'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeEntityInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEntityInfoResponseBody(name='body'),
}

async function describeEntityInfo(request: DescribeEntityInfoRequest): DescribeEntityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEntityInfo', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEventCountByThreatLevelRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeEventCountByThreatLevelResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    eventNum?: long(name='EventNum', description='The total number of events.', example='100'),
    highLevelEventNum?: long(name='HighLevelEventNum', description='The number of high-risk events.', example='20'),
    lowLevelEventNum?: long(name='LowLevelEventNum', description='The number of low-risk events.', example='52'),
    mediumLevelEventNum?: long(name='MediumLevelEventNum', description='The number of medium-risk events.', example='3'),
    undealEventNum?: long(name='UndealEventNum', description='The number of unhandled events.', example='75'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeEventCountByThreatLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventCountByThreatLevelResponseBody(name='body'),
}

async function describeEventCountByThreatLevel(request: DescribeEventCountByThreatLevelRequest): DescribeEventCountByThreatLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventCountByThreatLevel', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEventDisposeRequest {
  currentPage?: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='10', minimum=1, maximum=500, position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeEventDisposeResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: {
    eventDispose?: [ any ](name='EventDispose', description='An array consisting of JSON objects that are configured for event handling.', example='{ playbookName: "使用安全组封禁入方向IP", sophonTaskId: "400442a5-4f98-45ed-97db-5ab117eb0b8f", … }'),
    receiverInfo?: {
      channel?: string(name='Channel', description='The channel of the contact information. Valid values:

*   message
*   mail', example='message'),
      gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2021-01-06 16:37:29'),
      gmtModified?: string(name='GmtModified', description='The modification time.', example='2021-01-06 16:37:29'),
      id?: long(name='Id', description='The ID of the recipient who receives the event handling result.', example='123'),
      incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
      messageTitle?: string(name='MessageTitle', description='The message title.', example='siem event dealed message'),
      receiver?: string(name='Receiver', description='The contact information of the recipient.', example='138xxxxxx'),
      status?: int32(name='Status', description='Indicates whether the message is sent. Valid values:

*   0: not sent
*   1: sent', example='1'),
    }(name='ReceiverInfo', description='The JSON object that is configured for an alert recipient.'),
    remark?: string(name='Remark', description='The description of the event.', example='dealed'),
    status?: int32(name='Status', description='The status of the event. Valid values:

*   0: not handled
*   1: handing
*   5: handling failed
*   10: handled', example='0'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeEventDisposeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventDisposeResponseBody(name='body'),
}

async function describeEventDispose(request: DescribeEventDisposeRequest): DescribeEventDisposeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventDispose', 'POST', '/', 'json', true, 'form', request);
}

model DescribeImportedLogCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeImportedLogCountResponseBody = {
  data?: {
    importedLogCount?: int32(name='ImportedLogCount', example='10'),
    totalLogCount?: int32(name='TotalLogCount', example='59'),
    unImportedLogCount?: int32(name='UnImportedLogCount', example='49'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeImportedLogCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImportedLogCountResponseBody(name='body'),
}

async function describeImportedLogCount(request: DescribeImportedLogCountRequest): DescribeImportedLogCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImportedLogCount', 'POST', '/', 'json', true, 'form', request);
}

model DescribeJobStatusRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Body'),
  submitId: string(name='SubmitId', example='xxxxx_folder_xxxxxx', position='Body'),
}

model DescribeJobStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    configId?: string(name='ConfigId', example='xxxx_folder_xxxx'),
    errTaskList?: [ 
      {
        productList?: [ 
          {
            logList?: [ 
              {
                errorCode?: string(name='ErrorCode', example='ProjectLogStoreNotFound'),
                logCode?: string(name='LogCode', example='cloud_siem_aegis_proc'),
                logStoreNamePattern?: string(name='LogStoreNamePattern', example='vpc_project_test'),
                productCode?: string(name='ProductCode', example='sas'),
                projectNamePattern?: string(name='ProjectNamePattern', example='vpc-project-test'),
                regionCode?: string(name='RegionCode', example='cn-shanghai'),
              }
            ](name='LogList'),
            productCode?: string(name='ProductCode', example='sas'),
          }
        ](name='ProductList'),
        userId?: long(name='UserId', example='123XXXXX'),
      }
    ](name='ErrTaskList'),
    failedCount?: int32(name='FailedCount', example='8'),
    finishCount?: int32(name='FinishCount', example='52'),
    folderId?: string(name='FolderId', example='fd-xxxxx'),
    taskCount?: int32(name='TaskCount', example='60'),
    taskStatus?: string(name='TaskStatus', example='finish'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='ServerError'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B0DFF6D-XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DescribeJobStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeJobStatusResponseBody(name='body'),
}

async function describeJobStatus(request: DescribeJobStatusRequest): DescribeJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogFieldsRequest {
  logSource?: string(name='LogSource', description='The log source of the rule.', example='cloud_siem_aegis_sas_alert', position='Body'),
  logType?: string(name='LogType', description='The log type of the rule.', example='cloud_siem_aegis_sas_alert', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeLogFieldsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      activityName?: string(name='ActivityName', description='The type of the log to which the field belongs.', example='HTTP_ACTIVITY'),
      fieldDesc?: string(name='FieldDesc', description='The internal code of the field description.', example='sas.cloudsiem.prod.activity_name'),
      fieldName?: string(name='FieldName', description='The name of the field.', example='activity_name'),
      fieldType?: string(name='FieldType', description='The data type of the field. Valid values:

*   varchar
*   bigint', example='varchar'),
      logCode?: string(name='LogCode', description='The log source to which the field belongs.', example='cloud_siem_aegis_sas_alert'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeLogFieldsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogFieldsResponseBody(name='body'),
}

async function describeLogFields(request: DescribeLogFieldsRequest): DescribeLogFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogFields', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogSourceRequest {
  logType?: string(name='LogType', description='The log type of the rule.', example='HTTP_ACTIVITY', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeLogSourceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      logSource?: string(name='LogSource', description='The log source of the rule.', example='cloud_siem_aegis_sas_alert'),
      logSourceName?: string(name='LogSourceName', description='The internal code of the log source.', example='sas.cloudsiem.prod.cloud_siem_aegis_sas_alert'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeLogSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogSourceResponseBody(name='body'),
}

async function describeLogSource(request: DescribeLogSourceRequest): DescribeLogSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogSource', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogStoreRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model DescribeLogStoreResponseBody = {
  data?: {
    appendMeta?: boolean(name='AppendMeta', description='Indicates whether the following time points are added after the log arrives: the time points when the public IP address of the client and the log arrive. Valid values:

*   true
*   false', example='false'),
    autoSplit?: boolean(name='AutoSplit', description='Indicates whether the automatic sharding feature is enabled. Valid values:

*   true
*   false', example='false'),
    enableTracking?: boolean(name='EnableTracking', description='Indicates whether the web tracking feature is enabled to collect user information from browsers, iOS applications, or Android applications. Valid values:

*   true
*   false', example='false'),
    logStoreName?: string(name='LogStoreName', description='The name of the Logstore in Simple Log Service.', example='cloud-siem'),
    maxSplitShard?: int32(name='MaxSplitShard', description='The maximum number of shards that can be generated by using the automatic sharding feature.', example='64'),
    shardCount?: int32(name='ShardCount', description='The number of shards in Log Service.', example='2'),
    ttl?: int32(name='Ttl', description='The retention period of data. Unit: day.', example='180'),
  }(name='Data', description='The response of the threat analysis feature.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B9CBCEE-9225-5069-BC7F-880938A2****'),
}

model DescribeLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogStoreResponseBody(name='body'),
}

async function describeLogStore(request: DescribeLogStoreRequest): DescribeLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogStore', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLogTypeRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeLogTypeResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      logType?: string(name='LogType', description='The log type of the rule.', example='HTTP_ACTIVITY'),
      logTypeName?: string(name='LogTypeName', description='The internal code of the log type.', example='sas.cloudsiem.prod.http_activity'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeLogTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogTypeResponseBody(name='body'),
}

async function describeLogType(request: DescribeLogTypeRequest): DescribeLogTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogType', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOperatorsRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  sceneType?: string(name='SceneType', description='The type of the scenario in which the operator is used. Valid values:

*   If you do not specify this parameter, the default scenario is used.
*   AGGREGATE: AGGREGATE scenario.', example='AGGREGATE', position='Body'),
}

model DescribeOperatorsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      index?: int32(name='Index', description='The position of the operator in the operator list.', example='3'),
      operator?: string(name='Operator', description='The operator.', example='<='),
      operatorDescCn?: string(name='OperatorDescCn', description='The description of the operator in Chinese.', example='arger than or equal to'),
      operatorDescEn?: string(name='OperatorDescEn', description='The description of the operator in English.', example='larger than or equal to'),
      operatorName?: string(name='OperatorName', description='The display name of the operator.', example='<='),
      supportDataType?: string(name='SupportDataType', description='The data types that are supported by the current operator. The data types are separated by commas (,).', example='varchar'),
      supportTag?: [ string ](name='SupportTag', description='The scenarios that are supported by the operator. Multiple scenarios are separated by commas (,), such as AGGREGATE scenarios. This parameter is empty by default.', example='[AGGREGATE]'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeOperatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOperatorsResponseBody(name='body'),
}

async function describeOperators(request: DescribeOperatorsRequest): DescribeOperatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperators', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProdCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeProdCountResponseBody = {
  data?: {
    aliyunProdCount?: int32(name='AliyunProdCount', example='19'),
    hcloudProdCount?: int32(name='HcloudProdCount', example='2'),
    qcloudProdCount?: int32(name='QcloudProdCount', example='2'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeProdCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProdCountResponseBody(name='body'),
}

async function describeProdCount(request: DescribeProdCountRequest): DescribeProdCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProdCount', 'POST', '/', 'json', true, 'form', request);
}

model DescribeScopeUsersRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeScopeUsersResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the security information and event management (SIEM) user.', example='123456789****'),
      domains?: [ string ](name='Domains', description='An array consisting of the domain names that are protected by the WAF instance.', example='[123.com, 456.com]'),
      instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.', example='waf-cn-tl123ast****'),
      userName?: string(name='UserName', description='The username.', example='test001'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeScopeUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScopeUsersResponseBody(name='body'),
}

async function describeScopeUsers(request: DescribeScopeUsersRequest): DescribeScopeUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScopeUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServiceStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeServiceStatusResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DescribeServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceStatusResponseBody(name='body'),
}

async function describeServiceStatus(request: DescribeServiceStatusRequest): DescribeServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeStorageRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model DescribeStorageResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the projects and Logstores that are created for the threat analysis feature exist in Simple Log Service. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='CCEEE128-6607-503E-AAA6-C5E57D94****'),
}

model DescribeStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageResponseBody(name='body'),
}

async function describeStorage(request: DescribeStorageRequest): DescribeStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStorage', 'POST', '/', 'json', true, 'form', request);
}

model DescribeUserBuyStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  subUserId?: long(name='SubUserId', example='123XXXXXX', position='Body'),
}

model DescribeUserBuyStatusResponseBody = {
  data?: {
    canBuy?: boolean(name='CanBuy', example='true'),
    capacity?: int32(name='Capacity', example='1024'),
    durationDays?: long(name='DurationDays', example='3'),
    endTime?: long(name='EndTime', example='1669823999000'),
    mainUserId?: long(name='MainUserId', example='123XXXXXX'),
    mainUserName?: string(name='MainUserName', example='sas_account_xxx'),
    masterUserId?: long(name='MasterUserId', example='123XXXXXX'),
    masterUserName?: string(name='MasterUserName', example='rd_master_xxx'),
    sasInstanceId?: string(name='SasInstanceId', example='sas-instance-xxxxx'),
    subUserId?: long(name='SubUserId', example='123XXXXXX'),
    subUserName?: string(name='SubUserName', example='sas_account_xxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='81D8EC0C-0804-51AD-8C38-17ED0BC74892'),
}

model DescribeUserBuyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBuyStatusResponseBody(name='body'),
}

async function describeUserBuyStatus(request: DescribeUserBuyStatusRequest): DescribeUserBuyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBuyStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWafScopeRequest {
  entityId?: long(name='EntityId', description='The ID of the entity.', example='20617784', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model DescribeWafScopeResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account in SIEM.', example='127608589417****'),
      domains?: [ string ](name='Domains', description='The domain names that are protected by the WAF instance.', example='[123.com, 456.com]'),
      instanceId?: string(name='InstanceId', description='The ID of the WAF instance.', example='waf-cn-tl123ast****'),
    }
  ](name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeWafScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWafScopeResponseBody(name='body'),
}

async function describeWafScope(request: DescribeWafScopeRequest): DescribeWafScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWafScope', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWhiteRuleListRequest {
  alertName?: string(name='AlertName', example='Try SNMP weak password', position='Body'),
  alertType?: string(name='AlertType', example='scan', position='Body'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeWhiteRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: long(name='TotalCount', example='100'),
    }(name='PageInfo'),
    responseData?: [ 
      {
        alertName?: string(name='AlertName', example='Try SNMP weak password'),
        alertNameId?: string(name='AlertNameId', example='Try SNMP weak password'),
        alertType?: string(name='AlertType', example='scan'),
        alertTypeId?: string(name='AlertTypeId', example='scan'),
        alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', example='127608589417****'),
        expression?: {
          conditions?: [ 
            {
              isNot?: boolean(name='IsNot', example='false'),
              itemId?: int32(name='ItemId', example='1'),
              left?: {
                isVar?: boolean(name='IsVar', example='true'),
                modifier?: string(name='Modifier', example='length'),
                modifierParam?: map[string]any(name='ModifierParam'),
                type?: string(name='Type', example='false'),
                value?: string(name='Value', example='ip'),
              }(name='Left'),
              operator?: string(name='Operator', example='REGEXP'),
              right?: {
                isVar?: boolean(name='IsVar', example='false'),
                modifier?: string(name='Modifier', example='length'),
                modifierParam?: map[string]any(name='ModifierParam'),
                type?: string(name='Type', example='String'),
                value?: string(name='Value', example='12345'),
              }(name='Right'),
            }
          ](name='Conditions'),
          logic?: string(name='Logic', example='(1&2)|(3&4)'),
        }(name='Expression', example='[{"conditions":[{"isNot":false,"itemId":0,"left":{"value":"host_uuid.host_name"},"operator":"containsString","right":{"value":"Cloud-MCH"}}]}]'),
        gmtCreate?: string(name='GmtCreate', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', example='2021-01-06 16:37:29'),
        id?: long(name='Id', example='123456789'),
        incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        status?: int32(name='Status', example='1'),
        subAliuid?: long(name='SubAliuid', example='176555323***'),
      }
    ](name='ResponseData'),
  }(name='Data', example='123456'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWhiteRuleListResponseBody(name='body'),
}

async function describeWhiteRuleList(request: DescribeWhiteRuleListRequest): DescribeWhiteRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWhiteRuleList', 'POST', '/', 'json', true, 'form', request);
}

model DoQuickFieldRequest {
  from: int32(name='From', description='The time when the quick analysis starts. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684376244', position='Body'),
  index: string(name='Index', description='The index field.', example='alert_level', position='Body'),
  page?: int32(name='Page', description='The number of pages to return. Default value: 1.', example='1', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  reverse?: boolean(name='Reverse', description='The sorting of the query and analysis results. By default, the results are sorted in descending order.', example='true', position='Body'),
  size?: int32(name='Size', description='The number of entries per page. Default value: 10.', example='10', position='Body'),
  to: int32(name='To', description='The time when the quick analysis ends. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1684378090', position='Body'),
}

model DoQuickFieldResponseBody = {
  data?: {
    aggQueryd?: string(name='AggQueryd', description='This parameter is deprecated.', example='""'),
    completeOrNot?: boolean(name='CompleteOrNot', description='Indicates whether the quick analysis was successful. Valid values:

*   true
*   false', example='true'),
    count?: int32(name='Count', description='The number of entries returned.', example='10'),
    hasSQL?: boolean(name='HasSQL', description='This parameter is deprecated.', example='true'),
    keys?: [ string ](name='Keys', description='This parameter is deprecated.'),
    limited?: long(name='Limited', description='This parameter is deprecated.', example='0'),
    logs?: [ any ](name='Logs', description='The logs queried by using the quick analysis feature.'),
    pQuery?: string(name='PQuery', description='This parameter is deprecated.', example='""'),
    processedRows?: long(name='ProcessedRows', description='The number of entries queried.', example='1000'),
    queryMode?: int32(name='QueryMode', description='This parameter is deprecated.', example='0'),
    whereQuery?: string(name='WhereQuery', description='This parameter is deprecated.', example='* and alert_level : remind | with_pack_meta'),
  }(name='Data', description='The response of the quick analysis.'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
}

model DoQuickFieldResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DoQuickFieldResponseBody(name='body'),
}

async function doQuickField(request: DoQuickFieldRequest): DoQuickFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DoQuickField', 'POST', '/', 'json', true, 'form', request);
}

model DoSelfDelegateRequest {
  aliUid: long(name='AliUid', description='The Alibaba Cloud account of an ordinary member of the threat analysis feature.', example='104423523217****', position='Body'),
  delegateOrNot: int32(name='DelegateOrNot', description='Specifies whether to use a delegated administrator account. Valid values:

*   1: use a delegated administrator account.
*   0: do not use a delegated administrator account.', example='1', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model DoSelfDelegateResponseBody = {
  data?: boolean(name='Data', description='Indicates whether a regular member is authorized. Valid values:

*   true: The member is authorized.
*   false: The authorization is canceled.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B9CBCEE-9225-5069-BC7F-880938A2****'),
}

model DoSelfDelegateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DoSelfDelegateResponseBody(name='body'),
}

async function doSelfDelegate(request: DoSelfDelegateRequest): DoSelfDelegateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DoSelfDelegate', 'POST', '/', 'json', true, 'form', request);
}

model EnableAccessForCloudSiemRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model EnableAccessForCloudSiemResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model EnableAccessForCloudSiemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableAccessForCloudSiemResponseBody(name='body'),
}

async function enableAccessForCloudSiem(request: EnableAccessForCloudSiemRequest): EnableAccessForCloudSiemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAccessForCloudSiem', 'POST', '/', 'json', true, 'form', request);
}

model EnableServiceForCloudSiemRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model EnableServiceForCloudSiemResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model EnableServiceForCloudSiemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableServiceForCloudSiemResponseBody(name='body'),
}

async function enableServiceForCloudSiem(request: EnableServiceForCloudSiemRequest): EnableServiceForCloudSiemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableServiceForCloudSiem', 'POST', '/', 'json', true, 'form', request);
}

model GetCapacityRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model GetCapacityResponseBody = {
  data?: {
    existLogStore?: boolean(name='ExistLogStore', description='Indicates whether the Logstores for the threat analysis feature exist on the user side. Valid values:

*   true: The logs are in the normal state. The log analysis feature is available.
*   false: The logs are being cleared. The log analysis feature is unavailable.', example='true'),
    preservedCapacity?: long(name='PreservedCapacity', description='The purchased storage capacity of the threat analysis feature. Unit: GB.', example='9000'),
    usedCapacity?: double(name='UsedCapacity', description='The billable storage capacity of the threat analysis feature. Unit: GB.', example='10'),
  }(name='Data', description='The information about the storage capacity.'),
  requestId?: string(name='RequestId', description='The request ID.', example='27D27DCB-D76B-5064-8B3B-0900DEF7****'),
}

model GetCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCapacityResponseBody(name='body'),
}

async function getCapacity(request: GetCapacityRequest): GetCapacityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCapacity', 'POST', '/', 'json', true, 'form', request);
}

model GetHistogramsRequest {
  from: int32(name='From', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC. The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409529600', position='Body'),
  query?: string(name='Query', description='The SQL statement. Only search statements are supported. Analytic statements are not supported. For more information about the syntax and limits of search statements, see [Log search overview](https://help.aliyun.com/zh/sls/user-guide/search-syntax?spm=a2c4g.11186623.0.i2#concept-tnd-1jq-zdb).', example='* and status: 401', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  to: int32(name='To', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC. The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409569200', position='Body'),
}

model GetHistogramsResponseBody = {
  data?: {
    histograms?: [ 
      {
        completedOrNot?: boolean(name='CompletedOrNot', description='Indicates whether the query results within the subinterval is complete. Valid values:

*   true: The query is complete and the returned result is complete.
*   false: The query is complete but the returned result is incomplete. You must repeat the request to obtain the complete result.', example='true'),
        count?: long(name='Count', description='The number of logs within the subinterval.', example='100'),
        from?: int32(name='From', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409529600'),
        to?: int32(name='To', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409569200'),
      }
    ](name='Histograms', description='The distribution of logs.'),
    server?: string(name='Server', description='The name of the server.', example='nginx'),
    totalCount?: long(name='TotalCount', description='The number of logs that are generated within the subinterval.', example='2'),
  }(name='Data', description='The data of the charts.'),
  requestId?: string(name='RequestId', description='The request ID.', example='97A31C3A-3F9F-5866-8979-5159E3DC****'),
}

model GetHistogramsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHistogramsResponseBody(name='body'),
}

async function getHistograms(request: GetHistogramsRequest): GetHistogramsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistograms', 'POST', '/', 'json', true, 'form', request);
}

model GetLogsRequest {
  from: int32(name='From', description='The time when the query starts. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1684377190', position='Body'),
  pageIndex: int32(name='PageIndex', description='The page number. Pages start from page 1.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 0 to 100.', example='10', position='Body'),
  query?: string(name='Query', description='The search statement or the analytic statement. For more information, see [Log search overview](https://help.aliyun.com/zh/sls/user-guide/log-analysis-overview?spm=a2c4g.11186623.0.i1#t13103.html) and [Log analysis overview](https://help.aliyun.com/zh/sls/user-guide/search-syntax?spm=a2c4g.11186623.0.i0#concept-tnd-1jq-zdb).', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  reverseOrNot?: boolean(name='ReverseOrNot', description='Specifies whether to sort the results of the log query by time in minutes in descending order. Default value: true. Valid values:

*   true
*   false', example='true', position='Body'),
  to: int32(name='To', description='The time when the query ends. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1684378326', position='Body'),
  total?: long(name='Total', description='The total number of entries returned.', example='2', position='Body'),
}

model GetLogsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
      totalCount?: long(name='TotalCount', description='The total number of entries.', example='200'),
    }(name='PageInfo', description='The result on the current page.'),
    responseData?: {
      completeOrNot?: boolean(name='CompleteOrNot', description='The status of the log query. Valid values:

*   true: The query is complete and the returned result is complete.
*   false: The query is complete but the returned result is incomplete. You must resend the request to obtain the complete result.', example='true'),
      cost?: long(name='Cost', description='The time period of the log query. Unit: milliseconds.', example='28'),
      count?: int32(name='Count', description='The number of entries returned.', example='4'),
      hasSql?: boolean(name='HasSql', description='Indicated whether an analytic statement is contained. Valid values:

*   true
*   false', example='true'),
      keys?: [ string ](name='Keys', description='The index fields of the logs.'),
      lines?: [ any ](name='Lines', description='The raw data generated in the query.'),
    }(name='ResponseData', description='The log.'),
  }(name='Data', description='The results of the log query.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='93A8B186-A5F1-5B20-9BCF-5605C5E9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='True'),
}

model GetLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogsResponseBody(name='body'),
}

async function getLogs(request: GetLogsRequest): GetLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogs', 'POST', '/', 'json', true, 'form', request);
}

model GetQuickQueryRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  searchName: string(name='SearchName', description='The name of the saved search.', example='display_login_ip_search', position='Body'),
}

model GetQuickQueryResponseBody = {
  data?: string(name='Data', description='The query statement.', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5'),
  requestId?: string(name='RequestId', description='The request ID.', example='27D27DCB-D76B-5064-8B3B-0900DEF7****'),
}

model GetQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQuickQueryResponseBody(name='body'),
}

async function getQuickQuery(request: GetQuickQueryRequest): GetQuickQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQuickQuery', 'POST', '/', 'json', true, 'form', request);
}

model GetStorageRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model GetStorageResponseBody = {
  data?: {
    canOperate?: boolean(name='CanOperate', description='Indicates whether the storage region can be changed for once. Default value: false Valid values:

*   true
*   false', example='false'),
    displayRegion?: boolean(name='DisplayRegion', description='Indicates whether the storage region can be changed. Default value: false Valid values:

*   true
*   false', example='false'),
    region?: string(name='Region', description='The region in which the logs are stored. Default value: cn-shanghai. Valid values: cn-shanghai for the China site and ap-southeast-1 for the international site.', example='cn-shanghai'),
    ttl?: int32(name='Ttl', description='The storage period of logs. Unit: day. Default value: 180. Valid values: 30 to 3000.', example='180'),
  }(name='Data', description='The information about the storage.'),
  requestId?: string(name='RequestId', description='The request ID.', example='97A31C3A-3F9F-5866-8979-5159E3DC****'),
}

model GetStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStorageResponseBody(name='body'),
}

async function getStorage(request: GetStorageRequest): GetStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStorage', 'POST', '/', 'json', true, 'form', request);
}

model ListAccountAccessIdRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListAccountAccessIdResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      accessId?: string(name='AccessId', example='ABCXXXXXXXX'),
      accessIdMd5?: string(name='AccessIdMd5', example='abcXXXXXXXX'),
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountStr?: string(name='AccountStr', example='123xxxxxx|xxxx|ABCXXXXX'),
      bound?: int32(name='Bound', example='123xxxxxx|xxxx|ABCXXXXX'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      subUserId?: long(name='SubUserId', example='ABCXXXXXXXX'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  success?: boolean(name='Success', example='true'),
}

model ListAccountAccessIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountAccessIdResponseBody(name='body'),
}

async function listAccountAccessId(request: ListAccountAccessIdRequest): ListAccountAccessIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountAccessId', 'POST', '/', 'json', true, 'form', request);
}

model ListAccountsByLogRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  logCodes: [ string ](name='LogCodes', example='["cloud_siem_hcloud_waf_alert_log"]', position='Body'),
  prodCode: string(name='ProdCode', example='qcloud_waf', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListAccountsByLogResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='sas_account_xxx'),
      imported?: int32(name='Imported', example='123xxxxxxx'),
      logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      prodCode?: string(name='ProdCode', example='qcloud_waf'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListAccountsByLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsByLogResponseBody(name='body'),
}

async function listAccountsByLog(request: ListAccountsByLogRequest): ListAccountsByLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountsByLog', 'POST', '/', 'json', true, 'form', request);
}

model ListAllProdsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListAllProdsResponseBody = {
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    prodList?: [ 
      {
        cloudCode?: string(name='CloudCode', example='hcloud'),
        importedLogCount?: int32(name='ImportedLogCount', example='10'),
        modifyTime?: string(name='ModifyTime', example='2023-11-23 12:12:12'),
        prodCode?: string(name='ProdCode', example='sas'),
        totalLogCount?: int32(name='TotalLogCount', example='19'),
      }
    ](name='ProdList', example='1'),
    totalCount?: int32(name='TotalCount', example='19'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListAllProdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAllProdsResponseBody(name='body'),
}

async function listAllProds(request: ListAllProdsRequest): ListAllProdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAllProds', 'POST', '/', 'json', true, 'form', request);
}

model ListAutomateResponseConfigsRequest {
  actionType?: string(name='ActionType', description='The type of the handling action. Valid values:

*   doPlaybook: runs a playbook.
*   changeEventStatus: changes the status of an event.
*   changeThreatLevel: changes the risk level of an event.', example='doPlaybook', position='Body'),
  autoResponseType?: string(name='AutoResponseType', description='The type of the automated response rule. Valid values:

*   event
*   alert', example='event', position='Body'),
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  id?: long(name='Id', description='The ID of the automated response rule.', example='123', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  playbookUuid?: string(name='PlaybookUuid', description='The UUID of the playbook.', example='system_aliyun_aegis_kill_quara_book', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  ruleName?: string(name='RuleName', description='The name of the automated response rule.', example='cfw kill quara book', position='Body'),
  status?: int32(name='Status', description='The status of the rule. Valid values:

*   0: disabled
*   100: enabled', example='0', position='Body'),
  subUserId?: long(name='SubUserId', description='The ID of the user who created the rule.', example='17108579417****', position='Body'),
}

model ListAutomateResponseConfigsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        actionConfig?: string(name='ActionConfig', description='The configuration of the action that is performed after the rule is hit. The value is in JSON format.', example='[
      {
            "actionType": "doPlaybook",
            "playbookName": "WafBlockIP",
            "playbookUuid": "bdad6220-6584-41b2-9704-fc6584568758"
      }
]'),
        actionType?: string(name='ActionType', description='The type of the handling action. Multiple types are separated by commas (,). Valid values:

*   doPlaybook: runs a playbook.
*   changeEventStatus: changes the status of an event.
*   changeThreatLevel: changes the risk level of an event.', example='doPlaybook,changeEventStatus'),
        aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account that is associated with the rule in SIEM.', example='127608589417****'),
        autoResponseType?: string(name='AutoResponseType', description='The type of the automated response rule. Valid values:

*   event
*   alert', example='event'),
        executionCondition?: string(name='ExecutionCondition', description='The trigger condition of the rule. The value is in the JSON format.', example='[{"left":{"value":"alert_name"},"operator":"containsString","right":{"value":"webshell_online"}}]'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The update time.', example='2021-01-06 16:37:29'),
        id?: long(name='Id', description='The ID of the automated response rule.', example='123'),
        ruleName?: string(name='RuleName', description='The name of the automated response rule.', example='cfw kill quara book'),
        status?: int32(name='Status', description='The status of the rule. Valid values:

*   0: disabled
*   100: enabled', example='0'),
        subUserId?: long(name='SubUserId', description='The ID of the user who created the rule.', example='17108579417****'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListAutomateResponseConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAutomateResponseConfigsResponseBody(name='body'),
}

async function listAutomateResponseConfigs(request: ListAutomateResponseConfigsRequest): ListAutomateResponseConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutomateResponseConfigs', 'POST', '/', 'json', true, 'form', request);
}

model ListBindAccountRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListBindAccountResponseBody = {
  data?: [ 
    {
      accessId?: string(name='AccessId', example='ABCXXXXXXXX'),
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='XXXXXXXX'),
      bindId?: long(name='BindId', example='123xxxxxxx'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      createUser?: string(name='CreateUser', example='123xxxxxxx'),
      dataSourceCount?: long(name='DataSourceCount', example='2'),
      modifyTime?: string(name='ModifyTime', example='2023-11-10 12:20:35'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindAccountResponseBody(name='body'),
}

async function listBindAccount(request: ListBindAccountRequest): ListBindAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindAccount', 'POST', '/', 'json', true, 'form', request);
}

model ListBindDataSourcesRequest {
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListBindDataSourcesResponseBody = {
  data?: [ 
    {
      accountId?: string(name='AccountId', example='123xxxxxxx'),
      accountName?: string(name='AccountName', example='sas_tq_account_xxxx'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
      dataSourceName?: string(name='DataSourceName', example='waf_kafka'),
      dataSourceRemark?: string(name='DataSourceRemark', example='waf_kafka'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
      logCount?: int32(name='LogCount', example='1'),
      taskCount?: int32(name='TaskCount', example='0'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListBindDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindDataSourcesResponseBody(name='body'),
}

async function listBindDataSources(request: ListBindDataSourcesRequest): ListBindDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindDataSources', 'POST', '/', 'json', true, 'form', request);
}

model ListCloudSiemCustomizeRulesRequest {
  alertType?: string(name='AlertType', description='The alert type.', example='scan', position='Body'),
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  id?: string(name='Id', description='The ID of the custom rule.', example='10223', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. The value can be up to 100.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  ruleName?: string(name='RuleName', description='The name of the rule. The name can contain letters, digits, underscores (\\_), and periods (.).', example='waf_scan', position='Body'),
  ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   predefine
*   customize', example='customize', position='Body'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  status?: int32(name='Status', description='The status of the rule. Valid values:

*   0: The rule is in the initial state.
*   10: The simulation data is tested.
*   15: The business data is being tested.
*   20: The business data test ends.
*   100: The rule takes effect.', example='0', position='Body'),
  threatLevel?: [ string ](name='ThreatLevel', description='The risk level. The value is a JSON array. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='["serious","suspicious","remind"]', position='Body'),
}

model ListCloudSiemCustomizeRulesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertType?: string(name='AlertType', description='The type of the risk.', example='WEBSHELL'),
        alertTypeMds?: string(name='AlertTypeMds', description='The internal code of the risk type.', example='${siem_rule_type_process_abnormal_command}'),
        aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account in SIEM.', example='127608589417****'),
        eventTransferExt?: string(name='EventTransferExt', description='The extended information about event generation. If the value of eventTransferType is allToSingle, the value of this parameter indicates the length and unit of the alert aggregation window. The HTML escape characters are reversed.', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
        eventTransferSwitch?: int32(name='EventTransferSwitch', description='Indicates whether the system generates an event for the alert. Valid values:

*   0: no.
*   1: yes.', example='1'),
        eventTransferType?: string(name='EventTransferType', description='The event generation method. Valid values:

*   default: The default method is used.
*   singleToSingle: The system generates an event for each alert.
*   allToSingle: The system generates an event for alerts within a period of time.', example='allToSingle'),
        gmtCreate?: string(name='GmtCreate', description='The time when the custom rule was created.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The time when the custom rule was last updated.', example='2021-01-06 16:37:29'),
        id?: long(name='Id', description='The ID of the custom rule.', example='123456789'),
        logSource?: string(name='LogSource', description='The log source of the rule.', example='cloud_siem_aegis_sas_alert'),
        logSourceMds?: string(name='LogSourceMds', description='The internal code of the log source.', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
        logType?: string(name='LogType', description='The log type of the rule.', example='ALERT_ACTIVITY'),
        logTypeMds?: string(name='LogTypeMds', description='The internal code of the log type.', example='${sas.cloudsiem.prod.alert_activity}'),
        queryCycle?: string(name='QueryCycle', description='The window length of the rule. The HTML escape characters are reversed.', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
        ruleCondition?: string(name='RuleCondition', description='The query condition of the rule in the JSON format. The HTML escape characters are reversed.', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
        ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='this rule is for waf scan'),
        ruleGroup?: string(name='RuleGroup', description='The log aggregation field of the rule. The value is a JSON string. The HTML escape characters are reversed.', example='[&quot;asset_id&quot;]'),
        ruleName?: string(name='RuleName', description='The name of the rule.', example='waf_scan'),
        ruleThreshold?: string(name='RuleThreshold', description='The threshold configurations of the rule in the JSON format. The HTML escape characters are reversed.', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
        ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   predefine
*   customize', example='customize'),
        status?: int32(name='Status', description='The rule status. Valid values:

*   0: The rule is in the initial state.
*   10: The simulation data is tested.
*   15: The business data is being tested.
*   20: The business data test ends.
*   100: The rule takes effect.', example='0'),
        threatLevel?: string(name='ThreatLevel', description='The threat level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListCloudSiemCustomizeRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudSiemCustomizeRulesResponseBody(name='body'),
}

async function listCloudSiemCustomizeRules(request: ListCloudSiemCustomizeRulesRequest): ListCloudSiemCustomizeRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudSiemCustomizeRules', 'POST', '/', 'json', true, 'form', request);
}

model ListCloudSiemPredefinedRulesRequest {
  alertType?: string(name='AlertType', description='The alert type.', example='scan', position='Body'),
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  id?: string(name='Id', description='The ID of the rule.', example='10223', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  ruleName?: string(name='RuleName', description='The name of the rule. The name can contain letters, digits, underscores (\\_), and periods (.).', example='waf_scan', position='Body'),
  ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   predefine
*   customize', example='customize', position='Body'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  status?: int32(name='Status', description='The status of the rule. Valid values:

*   0: The rule is in the initial state.
*   10: The simulation data is tested.
*   15: The business data is being tested.
*   20: The business data test ends.
*   100: The rule takes effect.', example='0', position='Body'),
  threatLevel?: [ string ](name='ThreatLevel', description='The risk level. The value is a JSON array. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='["serious","suspicious","remind"]', position='Body'),
}

model ListCloudSiemPredefinedRulesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertType?: string(name='AlertType', description='The type of the risk.', example='WEBSHELL'),
        gmtCreate?: string(name='GmtCreate', description='The time when the rule was created.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The time when the rule was modified.', example='2021-01-06 16:37:29'),
        id?: long(name='Id', description='The ID of the predefined rule.', example='123456789'),
        ruleDescMds?: string(name='RuleDescMds', description='The internal code of the rule description.', example='${siem_rule_description_siem_cfw-attack-count-level-up_cfw-attack}'),
        ruleName?: string(name='RuleName', description='The name of the rule.', example='siem_base64-command-exec_aegis-proc'),
        ruleNameMds?: string(name='RuleNameMds', description='The internal code of the rule name.', example='${siem_rule_name_siem_cfw-attack-count-level-up_cfw-attack}'),
        source?: string(name='Source', description='The log source of the rule.', example='cloud_siem_aegis_proc'),
        status?: int32(name='Status', description='The status of the predefined rule. Valid values:

*   0: The rule is in the initial state.
*   100: The rule takes effect.', example='0'),
        threatLevel?: string(name='ThreatLevel', description='The threat level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListCloudSiemPredefinedRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudSiemPredefinedRulesResponseBody(name='body'),
}

async function listCloudSiemPredefinedRules(request: ListCloudSiemPredefinedRulesRequest): ListCloudSiemPredefinedRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudSiemPredefinedRules', 'POST', '/', 'json', true, 'form', request);
}

model ListCustomizeRuleTestResultRequest {
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  id?: long(name='Id', description='The ID of the rule.', example='123456789', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model ListCustomizeRuleTestResultResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertDesc?: string(name='AlertDesc', description='The description of the alert.', example='The account you logged in this time is not in the legal account category defined by you. Please confirm the legality of the login behavior。'),
        alertDetail?: string(name='AlertDetail', description='The alert details in the JSON format.', example='{"main_user_id": "1652956297921019";"log_uuid_count": "99";"attack_ip": "218.92.0.97"}'),
        alertSrcProd?: string(name='AlertSrcProd', description='The source of the alert.', example='sas'),
        alertSrcProdModule?: string(name='AlertSrcProdModule', description='The sub-module of the source.', example='waf'),
        attCk?: string(name='AttCk', description='The tag of the ATT\\&CK attack.', example='T1595.002 Vulnerability Scanning'),
        eventName?: string(name='EventName', description='The name of the alert, which corresponds to the name of the custom rule.', example='waf_scan'),
        eventType?: string(name='EventType', description='The risk type, which indicates the alert type.', example='WEBSHELL'),
        level?: string(name='Level', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
        logSource?: string(name='LogSource', description='The log source of the rule.', example='cloud_siem_aegis_sas_alert'),
        logTime?: string(name='LogTime', description='The time when the alert was recorded.', example='2021-01-06 16:37:29'),
        logType?: string(name='LogType', description='The log type of the rule.', example='ALERT_ACTIVITY'),
        mainUserId?: string(name='MainUserId', description='The ID of the Alibaba Cloud account that is associated with the alert in SIEM.', example='127608589417****'),
        onlineStatus?: string(name='OnlineStatus', description='The status of the alert data. Valid values:

*   test: business test data
*   online: online data', example='test'),
        subUserId?: string(name='SubUserId', description='The ID of the Alibaba Cloud account within which the alert is generated.', example='176555323***'),
        uuid?: string(name='Uuid', description='The UUID of the alert.', example='sas_71e24437d2797ce8fc59692905a4****'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListCustomizeRuleTestResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomizeRuleTestResultResponseBody(name='body'),
}

async function listCustomizeRuleTestResult(request: ListCustomizeRuleTestResultRequest): ListCustomizeRuleTestResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomizeRuleTestResult', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSourceLogsRequest {
  accountId: string(name='AccountId', example='123xxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListDataSourceLogsResponseBody = {
  data?: {
    accountId?: string(name='AccountId', example='123xxxxxxx'),
    cloudCode?: string(name='CloudCode', example='hcloud'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
    dataSourceInstanceLogs?: [ 
      {
        logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
        logInstanceId?: string(name='LogInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
        logMdsCode?: string(name='LogMdsCode', example='${siem.prod.cloud_siem_waf_xxxxx}'),
        logParams?: [ 
          {
            paraCode?: string(name='ParaCode', example='region_code'),
            paraValue?: string(name='ParaValue', example='ap-guangzhou'),
          }
        ](name='LogParams'),
        taskStatus?: int32(name='TaskStatus', example='1'),
      }
    ](name='DataSourceInstanceLogs'),
    dataSourceInstanceName?: string(name='DataSourceInstanceName', example='waf kafka'),
    dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='waf kafka'),
    subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListDataSourceLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceLogsResponseBody(name='body'),
}

async function listDataSourceLogs(request: ListDataSourceLogsRequest): ListDataSourceLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceLogs', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSourceTypesRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListDataSourceTypesResponseBody = {
  data?: [ 
    {
      cloudCode?: string(name='CloudCode', example='hcloud'),
      dataSourceType?: string(name='DataSourceType', example='obs'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListDataSourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceTypesResponseBody(name='body'),
}

async function listDataSourceTypes(request: ListDataSourceTypesRequest): ListDataSourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceTypes', 'POST', '/', 'json', true, 'form', request);
}

model ListDeliveryRequest {
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model ListDeliveryResponseBody = {
  data?: {
    dashboardUrl?: string(name='DashboardUrl', description='The URL that is displayed in charts.', example='https://sls4service.console.aliyun.com/lognext/project/aliyun-cloudsiem-data-127608589417****-cn-shanghai
/dashboard/cloud-siem?isShare=true&hideTopbar=true&hideSidebar=true&ignoreTabLocalStorage=true'),
    displaySwitchOrNot?: boolean(name='DisplaySwitchOrNot', description='Indicates whether the log delivery switch is displayed. Default value: true. Valid values:

*   true
*   false', example='true'),
    logStoreName?: string(name='LogStoreName', description='The name of the Logstore for the threat analysis feature on the user side. The value is in the cloud_siem format.', example='cloud-siem'),
    productList?: [ 
      {
        logList?: [ 
          {
            canOperateOrNot?: boolean(name='CanOperateOrNot', description='Indicates whether the log delivery feature can be enabled or disabled. The feature can be enabled or disabled only by the administrator of the threat analysis feature. Valid values:

*   true
*   false', example='true'),
            extraParameters?: [ 
              {
                key?: string(name='Key', description='The ID of the extended parameter.', example='flag'),
                value?: string(name='Value', description='The value of the extended parameter.', example='value'),
              }
            ](name='ExtraParameters', description='The extended parameter.'),
            logCode?: string(name='LogCode', description='The code of the log.', example='cloud_siem_config_log'),
            logName?: string(name='LogName', description='This parameter is deprecated.', example='audit log'),
            logNameEn?: string(name='LogNameEn', description='This parameter is deprecated.', example='audit log'),
            logNameKey?: string(name='LogNameKey', description='The language code of the log that is used to indicate the language in which the log is displayed.', example='${sas.cloudsiem.prod.cloud_siem_aegis_crack_from_beaver}'),
            status?: boolean(name='Status', description='The status of the log delivery. Valid values:

*   true: The logs are being delivered.
*   false: The log delivery feature is disabled.', example='true'),
            topic?: string(name='Topic', description='The topic of the log in the Logstore. The value is an index field in the Logstore that can be used to distinguish different logs.', example='sas_login_event'),
          }
        ](name='LogList', description='The logs of the cloud services.'),
        logMap?: map[string][ DataProductListLogMapValue         ](name='LogMap', description='The log group. For example, in Security Center, the logs of hosts and networks are stored in different groups. Key indicates the group information, and value indicates the logs in the group.'),
        productCode?: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='sas'),
        productName?: string(name='ProductName', description='This parameter is deprecated.', example='Security Center'),
      }
    ](name='ProductList', description='The cloud services.'),
    projectName?: string(name='ProjectName', description='The name of the project for the threat analysis feature in Simple Log service on the user side. The value is in the aliyun-cloudsiem-data-${aliUid}-${region} format.', example='aliyun-cloudsiem-data-127608589417****-cn-shanghai'),
    searchUrl?: string(name='SearchUrl', description='The URL that is used for log analysis.', example='https://sls4service.console.aliyun.com/lognext/project/aliyun-cloudsiem-data-127608589417****-cn-shanghai
/logsearch/cloud-siem?isShare=true&hideTopbar=true&hideSidebar=true&ignoreTabLocalStorage=true'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
}

model ListDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeliveryResponseBody(name='body'),
}

async function listDelivery(request: ListDeliveryRequest): ListDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDelivery', 'POST', '/', 'json', true, 'form', request);
}

model ListDisposeStrategyRequest {
  currentPage: int32(name='CurrentPage', description='The page number. Pages start from page 1.', example='1', minimum=1, position='Body'),
  effectiveStatus?: int32(name='EffectiveStatus', description='The status of the policy. Valid values:

*   0: invalid
*   1: valid', example='0', position='Body'),
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
  entityIdentity?: string(name='EntityIdentity', description='The feature value of the entity. Fuzzy match is supported.', example='test22.php', position='Body'),
  entityType?: string(name='EntityType', description='The entity type of the playbook. Valid values:

*   ip
*   process
*   file', example='ip', position='Body'),
  order?: string(name='Order', description='The sort order. Valid values:

*   desc: descending order.
*   asc: ascending order.', example='desc', position='Body'),
  orderField?: string(name='OrderField', description='The sort field. Valid values:

*   GmtModified: sorts the policies by update time.
*   GmtCreate: sorts the policies by creation time.
*   FinishTime: sorts the policies by end time.', example='GmtModified', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Body'),
  playbookName?: string(name='PlaybookName', description='The name of the playbook, which is the unique identifier of the playbook.', example='WafBlockIP', position='Body'),
  playbookTypes?: string(name='PlaybookTypes', description='The type of the playbook. Valid values:

*   system: user-triggered playbook
*   custom: event-triggered playbook
*   custom_alert: alert-triggered playbook
*   soar-manual: user-run playbook
*   soar-mdr: MDR-run playbook', example='system', position='Body'),
  playbookUuid?: string(name='PlaybookUuid', description='The UUID of the playbook.', example='system_aliyun_clb_process_book', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  sophonTaskId?: string(name='SophonTaskId', description='The ID of the SOAR handling policy.', example='a50a49b7-6044-4593-ab15-2b46567caadd', position='Body'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1577808000000', position='Body'),
}

model ListDisposeStrategyResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
    }(name='PageInfo', description='The pagination information.'),
    responseData?: [ 
      {
        alertUuid?: string(name='AlertUuid', description='The UUID of the alert.', example='sas_71e24437d2797ce8fc59692905a4****'),
        aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account that is associated with the policy in SIEM.', example='127608589417****'),
        effectiveStatus?: int32(name='EffectiveStatus', description='The status of the policy. Valid values:

*   0: invalid
*   1: valid', example='0'),
        entity?: [ any ](name='Entity', description='The details of the entity. The value is a JSON array.', example='[{"ip":"1.1.1.1"}]'),
        entityId?: long(name='EntityId', description='The ID of the entity.', example='123456789'),
        entityType?: string(name='EntityType', description='The type of the entity. Valid values:

*   ip
*   process
*   file', example='ip'),
        errorMessage?: string(name='ErrorMessage', description='The summary information about the failed task.', example='DisposalEntity failed which description is Aegis Quarantine File , return_info failed which description is Check Aegis Process Result , [ERROR DETAIL] *******.php:file not found'),
        finishTime?: string(name='FinishTime', description='The end time of the task.', example='2021-08-10 21:34:07'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2021-01-06 16:37:29'),
        gmtModified?: string(name='GmtModified', description='The update time.', example='2021-01-06 16:37:29'),
        id?: long(name='Id', description='The ID of the policy.', example='123'),
        incidentName?: string(name='IncidentName', description='The name of the event.', example='Multiple type of alerts, including Miner Network, Command line download and run malicious files, Backdoor Process, etc'),
        incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****'),
        playbookName?: string(name='PlaybookName', description='The name of the playbook, which is the unique identifier of the playbook.', example='WafBlockIP'),
        playbookType?: string(name='PlaybookType', description='The type of the playbook. Valid values:

*   system: user-triggered playbook
*   custom: event-triggered playbook
*   custom_alert: alert-triggered playbook
*   soar-manual: user-run playbook
*   soar-mdr: MDR-run playbook', example='system'),
        playbookUuid?: string(name='PlaybookUuid', description='The UUID of the playbook.', example='system_aliyun_clb_process_book'),
        scope?: [ any ](name='Scope', description='The scope of the policy.', example='[{ aliUid: 1766185894104675 }]'),
        sophonTaskId?: string(name='SophonTaskId', description='The ID of the SOAR handling policy.', example='577bbf90-a770-44a7-8154-586aa2d318fa'),
        status?: int32(name='Status', description='The running status of the playbook. Valid values:

*   200: successful
*   10: deleted
*   5: failed
*   0: initial', example='10'),
        subAliuid?: long(name='SubAliuid', description='The ID of the Alibaba account that is used to configure the policy.', example='176555323***'),
        taskParam?: string(name='TaskParam', description='The parameters that are used to trigger the playbook. The value is in the JSON format.', example='{
      "file": {
            "op_code": "2",
            "file_path": "/root/alert0913/a886.jsp",
            "entity_type": "file",
            "entity_name": "a886.jsp",
            "file_name": "a886.jsp",
            "file_owner": "USER:,GROUP:",
            "hash_value": "5def10c9a4287d0920d86b42420b20b0",
            "op_level": "2",
            "entity_id": "/root/alert0913/a886.jsp",
            "host_uuid": {
                  "entity_type": "host",
                  "entity_name": "N/A",
                  "is_comprised": "1",
                  "os_type": "linux",
                  "entity_id": "5f58ef67-8803-4314-8d67-c87dc92b****",
                  "host_uuid": "5f58ef67-8803-4314-8d67-c87dc92b****",
                  "host_name": "N/A"
            },
            "malware_type": "${aliyun.siem.sas.alert_tag.webshell}"
      },
      "_sys_siem": {
            "cloudCode": "aliyun",
            "alertId": "89416745494****"
      },
      "scope": [
            {
                  "aliUid": 1766185894104****
            }
      ]
}'),
      }
    ](name='ResponseData', description='The detailed data.'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListDisposeStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDisposeStrategyResponseBody(name='body'),
}

async function listDisposeStrategy(request: ListDisposeStrategyRequest): ListDisposeStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDisposeStrategy', 'POST', '/', 'json', true, 'form', request);
}

model ListImportedLogsByProdRequest {
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  prodCode: string(name='ProdCode', example='qcloud_waf', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListImportedLogsByProdResponseBody = {
  data?: [ 
    {
      autoImported?: int32(name='AutoImported', example='2023-11-23 12:30:00'),
      cloudCode?: string(name='CloudCode', example='hcloud'),
      imported?: int32(name='Imported', example='2023-11-23 12:30:00'),
      importedUserCount?: int32(name='ImportedUserCount', example='2'),
      logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx'),
      logMdsCode?: string(name='LogMdsCode', example='${siem.prod. cloud_siem_waf_xxxxx}'),
      modifyTime?: string(name='ModifyTime', example='2023-11-23 12:30:00'),
      prodCode?: string(name='ProdCode', example='qcloud_waf'),
      totalUserCount?: int32(name='TotalUserCount', example='5'),
      unImportedUserCount?: int32(name='UnImportedUserCount', example='3'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListImportedLogsByProdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImportedLogsByProdResponseBody(name='body'),
}

async function listImportedLogsByProd(request: ListImportedLogsByProdRequest): ListImportedLogsByProdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImportedLogsByProd', 'POST', '/', 'json', true, 'form', request);
}

model ListOperationRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model ListOperationResponseBody = {
  data?: {
    adminOrNot?: boolean(name='AdminOrNot', description='Indicates whether the user is an administrator. Valid values:

*   true
*   false', example='true'),
    operationList?: [ string ](name='OperationList', description='The resources on which the permissions are granted.'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CCEEE128-6607-503E-AAA6-C5E57D94****'),
}

model ListOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOperationResponseBody(name='body'),
}

async function listOperation(request: ListOperationRequest): ListOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOperation', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectLogStoresRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceLogCode: string(name='SourceLogCode', example='cloud_siem_aegis_proc', position='Body'),
  sourceProdCode: string(name='SourceProdCode', example='sas', position='Body'),
  subUserId: long(name='SubUserId', example='123XXXXXXXX', position='Body'),
}

model ListProjectLogStoresResponseBody = {
  data?: [ 
    {
      endPoint?: string(name='EndPoint', example='cn-hangzhou.log.aliyuncs.com'),
      localName?: string(name='LocalName', example='hangzhou'),
      logStore?: string(name='LogStore', example='cloud-siem-logstore'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      project?: string(name='Project', example='cloud-siem-project'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListProjectLogStoresResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectLogStoresResponseBody(name='body'),
}

async function listProjectLogStores(request: ListProjectLogStoresRequest): ListProjectLogStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjectLogStores', 'POST', '/', 'json', true, 'form', request);
}

model ListQuickQueryRequest {
  offset?: int32(name='Offset', description='The line from which the query starts. Default value: 0.', example='0', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 500.', example='50', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model ListQuickQueryResponseBody = {
  data?: {
    count?: int32(name='Count', description='The number of saved searches per page.', example='10'),
    quickQueryList?: [ 
      {
        displayName?: string(name='DisplayName', description='The alias of the saved search.', example='no_1_created_search_used_for_dispaly_ip'),
        query?: string(name='Query', description='The query statement corresponding to the saved search.', example='* and SamplerAddress:\\"172.18.1.1\\" and OutIf:\\"105\\"'),
        searchName?: string(name='SearchName', description='The name of the saved search.', example='data_analysis'),
      }
    ](name='QuickQueryList', description='The saved search.'),
    total?: int32(name='Total', description='The total number of saved searches that meet the query conditions.', example='101'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F375A043-4F5B-55F2-A564-CC47FFC6****'),
}

model ListQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuickQueryResponseBody(name='body'),
}

async function listQuickQuery(request: ListQuickQueryRequest): ListQuickQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQuickQuery', 'POST', '/', 'json', true, 'form', request);
}

model ListRdUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListRdUsersResponseBody = {
  data?: [ 
    {
      delegatedOrNot?: boolean(name='DelegatedOrNot', example='true'),
      joined?: boolean(name='Joined', example='true'),
      joinedTime?: string(name='JoinedTime', example='2013-10-01 00:00:00'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListRdUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRdUsersResponseBody(name='body'),
}

async function listRdUsers(request: ListRdUsersRequest): ListRdUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRdUsers', 'POST', '/', 'json', true, 'form', request);
}

model ListUserProdLogsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceLogCode: string(name='SourceLogCode', example='cloud_siem_aegis_proc', position='Body'),
  sourceProdCode: string(name='SourceProdCode', example='sas', position='Body'),
}

model ListUserProdLogsResponseBody = {
  data?: [ 
    {
      displayLine?: string(name='DisplayLine', example='cn-shanghai.siem-project.siem-logstore'),
      displayed?: boolean(name='Displayed', example='true'),
      imported?: boolean(name='Imported', example='true'),
      isDeleted?: int32(name='IsDeleted', example='0'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
      sourceLogInfo?: string(name='SourceLogInfo', example='{"project":"wafnew-project-1335759343513432-cn-hangzhou","logStore":"wafnew-logstore","regionCode":"cn-hangzhou","prodCode":"waf"}'),
      sourceProdCode?: string(name='SourceProdCode', example='sas'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListUserProdLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserProdLogsResponseBody(name='body'),
}

async function listUserProdLogs(request: ListUserProdLogsRequest): ListUserProdLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserProdLogs', 'POST', '/', 'json', true, 'form', request);
}

model ListUsersByProdRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  sourceProdCode: string(name='SourceProdCode', example='sas', position='Body'),
}

model ListUsersByProdResponseBody = {
  data?: [ 
    {
      cloudCode?: string(name='CloudCode', example='hcloud'),
      imported?: boolean(name='Imported', example='true'),
      logMdsCode?: string(name='LogMdsCode', example='${siem.xxx.xxxxxxxxx}'),
      mainUserId?: long(name='MainUserId', example='123XXXXXXXXX'),
      sourceLogCode?: string(name='SourceLogCode', example='cloud_siem_aegis_proc'),
      sourceLogName?: string(name='SourceLogName', example='安骑士进程日志'),
      sourceProdCode?: string(name='SourceProdCode', example='sas'),
      subUserId?: long(name='SubUserId', example='123XXXXXXXX'),
      subUserName?: string(name='SubUserName', example='sas_account_xxx'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ListUsersByProdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersByProdResponseBody(name='body'),
}

async function listUsersByProd(request: ListUsersByProdRequest): ListUsersByProdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersByProd', 'POST', '/', 'json', true, 'form', request);
}

model ModifyBindAccountRequest {
  accessId?: string(name='AccessId', example='ABCXXXXXXXXX', position='Body'),
  accountId: string(name='AccountId', example='123xxxxxxx', position='Body'),
  accountName?: string(name='AccountName', example='sas_account_xxx', position='Body'),
  bindId: long(name='BindId', example='123', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ModifyBindAccountResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyBindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBindAccountResponseBody(name='body'),
}

async function modifyBindAccount(request: ModifyBindAccountRequest): ModifyBindAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBindAccount', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDataSourceRequest {
  accountId?: string(name='AccountId', example='123xxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea', position='Body'),
  dataSourceInstanceName?: string(name='DataSourceInstanceName', example='beijing_waf_kafka', position='Body'),
  dataSourceInstanceParams?: string(name='DataSourceInstanceParams', example='[{"paraCode":"region_code","paraValue":"ap-guangzhou"}]', position='Body'),
  dataSourceInstanceRemark?: string(name='DataSourceInstanceRemark', example='waf_alert_log', position='Body'),
  dataSourceType: string(name='DataSourceType', example='obs', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ModifyDataSourceResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    dataSourceInstanceId?: string(name='DataSourceInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataSourceResponseBody(name='body'),
}

async function modifyDataSource(request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataSource', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDataSourceLogRequest {
  accountId?: string(name='AccountId', example='123xxxxxxx', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  dataSourceInstanceId: string(name='DataSourceInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1', position='Body'),
  dataSourceInstanceLogs: string(name='DataSourceInstanceLogs', example='[{"LogCode":"cloud_siem_qcloud_waf_alert_log","LogParas":"[{\\"ParaCode\\":\\"api_name\\",\\"ParaValue\\":\\"GetAttackDownloadRecords\\"}]"}]', position='Body'),
  dataSourceType?: string(name='DataSourceType', example='obs', position='Body'),
  logCode?: string(name='LogCode', example='cloud_siem_waf_xxxxx', position='Body'),
  logInstanceId: string(name='LogInstanceId', example='ef33097c9d1fdb0b9c7e8c7ca320pkl1', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ModifyDataSourceLogResponseBody = {
  data?: {
    count?: int32(name='Count', example='1'),
    logInstanceId?: string(name='LogInstanceId', example='220ba97c9d1fdb0b9c7e8c7ca328d7ea'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ModifyDataSourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataSourceLogResponseBody(name='body'),
}

async function modifyDataSourceLog(request: ModifyDataSourceLogRequest): ModifyDataSourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataSourceLog', 'POST', '/', 'json', true, 'form', request);
}

model OpenDeliveryRequest {
  logCode?: string(name='LogCode', description='The log code of the cloud service, such as the code of the process log for Security Center. If you leave this parameter empty, operations are performed on all logs of the cloud service.', example='cloud_siem_cfw_flow', position='Body'),
  productCode: string(name='ProductCode', description='The code of the cloud service. Valid values:

*   qcloud_waf
*   qlcoud_cfw
*   hcloud_waf
*   hcloud_cfw
*   ddos
*   sas
*   cfw
*   config
*   csk
*   fc
*   rds
*   nas
*   apigateway
*   cdn
*   mongodb
*   eip
*   slb
*   vpc
*   actiontrail
*   waf
*   bastionhost
*   oss
*   polardb', example='cfw', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model OpenDeliveryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the log delivery feature is enabled. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='15FD134E-D69B-51E8-B052-73F97BD8****'),
}

model OpenDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenDeliveryResponseBody(name='body'),
}

async function openDelivery(request: OpenDeliveryRequest): OpenDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenDelivery', 'POST', '/', 'json', true, 'form', request);
}

model PostAutomateResponseConfigRequest {
  actionConfig?: string(name='ActionConfig', description='The configuration of the action that is performed after the rule is hit. The value is in JSON format.', example='[
      {
            "actionType": "doPlaybook",
            "playbookName": "WafBlockIP",
            "playbookUuid": "bdad6220-6584-41b2-9704-fc6584568758"
      }
]', position='Body'),
  actionType?: string(name='ActionType', description='The action that is performed after the rule is hit. Separate multiple values with commas (,). Valid values:

*   doPlaybook: Execute a playbook.
*   changeEventStatus: Change the event status.
*   changeThreatLevel: Change the threat level of the event.', example='doPlaybook,changeEventStatus', position='Body'),
  autoResponseType?: string(name='AutoResponseType', description='The rule type. Valid values:

*   event
*   alert', example='event', position='Body'),
  executionCondition?: string(name='ExecutionCondition', description='The trigger condition of the rule. The value is in JSON format.', example='[{"left":{"value":"alert_name"},"operator":"containsString","right":{"value":"webshell_online"}}]', position='Body'),
  id?: long(name='Id', description='The rule ID.', example='123', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  ruleName?: string(name='RuleName', description='The rule name.', example='cfw kill quara book', position='Body'),
  subUserId?: long(name='SubUserId', description='The ID of the user who created the rule.', example='17108579417****', position='Body'),
}

model PostAutomateResponseConfigResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: string(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model PostAutomateResponseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostAutomateResponseConfigResponseBody(name='body'),
}

async function postAutomateResponseConfig(request: PostAutomateResponseConfigRequest): PostAutomateResponseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostAutomateResponseConfig', 'POST', '/', 'json', true, 'form', request);
}

model PostCustomizeRuleRequest {
  alertType?: string(name='AlertType', description='The risk type.', example='WEBSHELL', position='Body'),
  alertTypeMds?: string(name='AlertTypeMds', description='The internal code of the risk type.', example='${siem_rule_type_process_abnormal_command}', position='Body'),
  eventTransferExt?: string(name='EventTransferExt', description='The extended information about event generation. If eventTransferType is set to allToSingle, the value of this parameter indicates the length and unit of the alert aggregation window.', example='{"time":"1","unit":"MINUTE"}', position='Body'),
  eventTransferSwitch?: int32(name='EventTransferSwitch', description='Specifies whether to convert an alert to an event. Valid values:

*   0: no
*   1: yes', example='1', position='Body'),
  eventTransferType?: string(name='EventTransferType', description='The event generation method. Valid values:

*   default: The default method is used.
*   singleToSingle: The system generates an event for each alert.
*   allToSingle: The system generates an event for alerts within a period of time.', example='allToSingle', position='Body'),
  id?: long(name='Id', description='The ID of the rule.', example='123456789', position='Body'),
  logSource?: string(name='LogSource', description='The log source of the rule.', example='cloud_siem_aegis_sas_alert', position='Body'),
  logSourceMds?: string(name='LogSourceMds', description='The internal code of the log source.', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}', position='Body'),
  logType?: string(name='LogType', description='The log type of the rule.', example='ALERT_ACTIVITY', position='Body'),
  logTypeMds?: string(name='LogTypeMds', description='The internal code of the log type.', example='${security_event_config.event_name.webshellName_clientav}', position='Body'),
  queryCycle?: string(name='QueryCycle', description='The window length of the rule.', example='{"time":"1","unit":"HOUR"}', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  ruleCondition?: string(name='RuleCondition', description='The query condition of the rule. The value is in the JSON format.', example='[[{"not":false,"left":"alert_name","operator":"=","right":"WEBSHELL"}]]', position='Body'),
  ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='this rule is for waf scan', position='Body'),
  ruleGroup?: string(name='RuleGroup', description='The log aggregation field of the rule. The value is a JSON string.', example='["asset_id"]', position='Body'),
  ruleName?: string(name='RuleName', description='The name of the rule.', example='waf_scan', position='Body'),
  ruleThreshold?: string(name='RuleThreshold', description='The threshold configuration of the rule. The value is in the JSON format.', example='{"aggregateFunction":"count","aggregateFunctionName":"count","field":"activity_name","operator":"&lt;=","value":1}', position='Body'),
  threatLevel?: string(name='ThreatLevel', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind', position='Body'),
}

model PostCustomizeRuleResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    alertType?: string(name='AlertType', description='The risk type.', example='WEBSHELL'),
    alertTypeMds?: string(name='AlertTypeMds', description='The internal code of the risk type.', example='${siem_rule_type_process_abnormal_command}'),
    aliuid?: long(name='Aliuid', description='The ID of the Alibaba Cloud account that is used to purchase the threat analysis feature.', example='127608589417****'),
    eventTransferExt?: string(name='EventTransferExt', description='The extended information about event generation. If eventTransferType is set to allToSingle, the value of this parameter indicates the length and unit of the alert aggregation window. The HTML escape characters are reversed.', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;MINUTE&quot;}'),
    eventTransferSwitch?: int32(name='EventTransferSwitch', description='Indicates whether the system generates an event for the alert. Valid values:

*   0: no
*   1: yes', example='1'),
    eventTransferType?: string(name='EventTransferType', description='The event generation method. Valid values:

*   default: The default method is used.
*   singleToSingle: The system generates an event for each alert.
*   allToSingle: The system generates an event for alerts within a period of time.', example='allToSingle'),
    gmtCreate?: string(name='GmtCreate', description='The time when the custom rule was created.', example='2021-01-06 16:37:29'),
    gmtModified?: string(name='GmtModified', description='The time when the custom rule was last updated.', example='2021-01-06 16:37:29'),
    id?: long(name='Id', description='The ID of the custom rule.', example='123456789'),
    logSource?: string(name='LogSource', description='The log source of the rule.', example='cloud_siem_aegis_sas_alert'),
    logSourceMds?: string(name='LogSourceMds', description='The internal code of the log source.', example='${sas.cloudsiem.prod.cloud_siem_aegis_sas_alert}'),
    logType?: string(name='LogType', description='The log type of the rule.', example='ALERT_ACTIVITY'),
    logTypeMds?: string(name='LogTypeMds', description='The internal code of the log type.', example='${security_event_config.event_name.webshellName_clientav}'),
    queryCycle?: string(name='QueryCycle', description='The window length of the rule. The HTML escape characters are reversed.', example='{&quot;time&quot;:&quot;1&quot;,&quot;unit&quot;:&quot;HOUR&quot;}'),
    ruleCondition?: string(name='RuleCondition', description='The query condition of the rule. The value is in the JSON format. The HTML escape characters are reversed.', example='[[{&quot;not&quot;:false,&quot;left&quot;:&quot;alert_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;right&quot;:&quot;WEBSHELL&quot;}]]'),
    ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='this rule is for waf scan'),
    ruleGroup?: string(name='RuleGroup', description='The log aggregation field of the rule. The value is a JSON string. The HTML escape characters are reversed.', example='[&quot;asset_id&quot;]'),
    ruleName?: string(name='RuleName', description='The name of the rule.', example='waf_scan'),
    ruleThreshold?: string(name='RuleThreshold', description='The threshold configuration of the rule. The value is in the JSON format. The HTML escape characters are reversed.', example='{&quot;aggregateFunction&quot;:&quot;count&quot;,&quot;aggregateFunctionName&quot;:&quot;count&quot;,&quot;field&quot;:&quot;activity_name&quot;,&quot;operator&quot;:&quot;&lt;=&quot;,&quot;value&quot;:1}'),
    ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   predefine
*   customize', example='customize'),
    status?: int32(name='Status', description='The rule status. Valid values:

*   0: The rule is in the initial state.
*   10: The simulation data is tested.
*   15: The business data is being tested.
*   20: The business data test ends.
*   100: The rule takes effect.', example='0'),
    threatLevel?: string(name='ThreatLevel', description='The risk level. Valid values:

*   serious: high
*   suspicious: medium
*   remind: low', example='remind'),
  }(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model PostCustomizeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostCustomizeRuleResponseBody(name='body'),
}

async function postCustomizeRule(request: PostCustomizeRuleRequest): PostCustomizeRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostCustomizeRule', 'POST', '/', 'json', true, 'form', request);
}

model PostCustomizeRuleTestRequest {
  id?: long(name='Id', description='The ID of the rule.', example='123456789', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  simulatedData?: string(name='SimulatedData', description='The simulation data for the testing. This parameter is available only when TestType is set to simulate.', example='[{"key1":"value1","key2":"value2","key3":"value3","key4":"value4","key5":"value5"}]', position='Body'),
  testType?: string(name='TestType', description='The testing type. Valid values:

*   simulate: simulation data test
*   business: business data test', example='simulate', position='Body'),
}

model PostCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: any(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model PostCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostCustomizeRuleTestResponseBody(name='body'),
}

async function postCustomizeRuleTest(request: PostCustomizeRuleTestRequest): PostCustomizeRuleTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostCustomizeRuleTest', 'POST', '/', 'json', true, 'form', request);
}

model PostEventDisposeAndWhiteruleListRequest {
  eventDispose?: string(name='EventDispose', description='The configuration of event handling. The value is a JSON object.', example='[
      {
            "playbookName": "WafBlockIP",
            "entityId": "104466118",
            "scope": [
                  "176618589410****"
            ],
            "startTime": 1604168946281,
            "endTime": 1614168946281
      },
      {
            "playbookName": "WafBlockIP",
            "entityId": "104466118",
            "scope": [
                  {
                        "instanceId": "waf-cn-n6w1oy1****",
                        "domains": [
                              "lmfip.wafqax.***"
                        ]
                  }
            ],
            "startTime": 1604168946281,
            "endTime": 1614168946281
      }
]', position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  receiverInfo?: string(name='ReceiverInfo', description='The configuration of the alert recipient. The value is a JSON object.', example='{
      "messageTitle": "test",
      "receiver": "xiaowang",
      "channel": "message"
}', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  remark?: string(name='Remark', description='The remarks of the event.', example='dealed', position='Body'),
  status?: int32(name='Status', description='The status of the event. Valid values:

*   0: unhandled
*   1: handing
*   5: handling failed
*   10: handled', example='0', position='Body'),
}

model PostEventDisposeAndWhiteruleListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model PostEventDisposeAndWhiteruleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostEventDisposeAndWhiteruleListResponseBody(name='body'),
}

async function postEventDisposeAndWhiteruleList(request: PostEventDisposeAndWhiteruleListRequest): PostEventDisposeAndWhiteruleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostEventDisposeAndWhiteruleList', 'POST', '/', 'json', true, 'form', request);
}

model PostEventWhiteruleListRequest {
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  whiteruleList: string(name='WhiteruleList', description='The alert whitelist rule. The value is a JSON object.', example='[
      {
            "alertName": "webshell",
            "alertNameId": "webshell",
            "alertType": "command",
            "alertTypeId": "command",
            "expression": {
                  "status": 1,
                  "conditions": [
                        {
                              "isNot": false,
                              "left": {
                                    "value": "file_path"
                              },
                              "operator": "gt",
                              "right": {
                                    "value": "cp"
                              }
                        }
                  ]
            }
      }
]', position='Body'),
}

model PostEventWhiteruleListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model PostEventWhiteruleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostEventWhiteruleListResponseBody(name='body'),
}

async function postEventWhiteruleList(request: PostEventWhiteruleListRequest): PostEventWhiteruleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostEventWhiteruleList', 'POST', '/', 'json', true, 'form', request);
}

model PostFinishCustomizeRuleTestRequest {
  id?: long(name='Id', description='The ID of the rule.', example='123456789', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model PostFinishCustomizeRuleTestResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: any(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model PostFinishCustomizeRuleTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostFinishCustomizeRuleTestResponseBody(name='body'),
}

async function postFinishCustomizeRuleTest(request: PostFinishCustomizeRuleTestRequest): PostFinishCustomizeRuleTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostFinishCustomizeRuleTest', 'POST', '/', 'json', true, 'form', request);
}

model PostRuleStatusChangeRequest {
  ids?: string(name='Ids', description='The rule IDs. The value is a JSON array.', example='[123,345]', position='Body'),
  inUse?: boolean(name='InUse', description='Specifies whether to enable the rule. Valid values:

*   true
*   false', example='true', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   predefine
*   customize', example='customize', position='Body'),
}

model PostRuleStatusChangeResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: any(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model PostRuleStatusChangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PostRuleStatusChangeResponseBody(name='body'),
}

async function postRuleStatusChange(request: PostRuleStatusChangeRequest): PostRuleStatusChangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PostRuleStatusChange', 'POST', '/', 'json', true, 'form', request);
}

model RestoreCapacityRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model RestoreCapacityResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the release command has been sent. Valid values:

*   true: The command has been sent and the storage space is being released.
*   false: The command failed to be sent.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
}

model RestoreCapacityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestoreCapacityResponseBody(name='body'),
}

async function restoreCapacity(request: RestoreCapacityRequest): RestoreCapacityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreCapacity', 'POST', '/', 'json', true, 'form', request);
}

model SaveQuickQueryRequest {
  displayName: string(name='DisplayName', description='The name of the saved search.', example='no_1_created_search_used_for_dispaly_ip', position='Body'),
  query: string(name='Query', description='The query statement.', example='* and dst_ip : "121.43.234.***"', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model SaveQuickQueryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the query statement is saved as a saved search. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='06735F17-1EDE-5212-81A3-8585368F****'),
}

model SaveQuickQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveQuickQueryResponseBody(name='body'),
}

async function saveQuickQuery(request: SaveQuickQueryRequest): SaveQuickQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveQuickQuery', 'POST', '/', 'json', true, 'form', request);
}

model SetStorageRequest {
  region?: string(name='Region', description='The storage region of logs. By default, the region of the data management center is used and cannot be changed. cn-shanghai is used for the China data management center, and ap-southeast-1 is used for the Outside China data management center. To change the region, contact the technical support of threat analysis.', example='cn-shanghai', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
  ttl: int32(name='Ttl', description='The storage duration of logs. Default value: 180. Minimum value: 30. Maximum value: 3000. Unit: days.', example='180', position='Body'),
}

model SetStorageResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the settings are saved. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='6276D891-58D4-55B2-87B9-74D413F7****'),
}

model SetStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetStorageResponseBody(name='body'),
}

async function setStorage(request: SetStorageRequest): SetStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetStorage', 'POST', '/', 'json', true, 'form', request);
}

model ShowQuickAnalysisRequest {
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region where your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in the Chinese mainland or in the China (Hong Kong) region.
*   ap-southeast-1: Your assets reside in regions outside the Chinese mainland, excluding the China (Hong Kong) region.', example='cn-hangzhou', position='Body'),
}

model ShowQuickAnalysisResponseBody = {
  data?: {
    indexList?: [ string ](name='IndexList', description='The index fields of the logs.'),
  }(name='Data', description='The index fields.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A4FBD89-C29D-5973-B882-CB2D23F6****'),
}

model ShowQuickAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShowQuickAnalysisResponseBody(name='body'),
}

async function showQuickAnalysis(request: ShowQuickAnalysisRequest): ShowQuickAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ShowQuickAnalysis', 'POST', '/', 'json', true, 'form', request);
}

model SubmitImportLogTasksRequest {
  accounts?: string(name='Accounts', example='[{"AccountId":"123123","Imported":1}]', position='Body'),
  autoImported?: int32(name='AutoImported', example='["cloud_siem_qcloud_cfw_alert_log"]', position='Body'),
  cloudCode: string(name='CloudCode', example='hcloud', position='Body'),
  logCodes?: string(name='LogCodes', example='["cloud_siem_qcloud_cfw_alert_log"]', position='Body'),
  prodCode: string(name='ProdCode', example='qcloud_waf', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model SubmitImportLogTasksResponseBody = {
  data?: {
    count?: int32(name='Count', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model SubmitImportLogTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitImportLogTasksResponseBody(name='body'),
}

async function submitImportLogTasks(request: SubmitImportLogTasksRequest): SubmitImportLogTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitImportLogTasks', 'POST', '/', 'json', true, 'form', request);
}

model SubmitJobsRequest {
  jsonParam: string(name='JsonParam', example='[{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":120xxxxxxx,"Deleted":0},{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":121xxxxxxxx,"Deleted":0},{"SourceLogCode":"cloud_siem_aegis_health_check","SourceProdCode":"sas","SubUserId":122xxxxxxx,"Deleted":1}]', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model SubmitJobsResponseBody = {
  data?: int32(name='Data', example='5'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model SubmitJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitJobsResponseBody(name='body'),
}

async function submitJobs(request: SubmitJobsRequest): SubmitJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitJobs', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAutomateResponseConfigStatusRequest {
  ids?: string(name='Ids', description='The IDs of the automatic response rules. The value is a JSON array.', example='[123,345]', position='Body'),
  inUse?: boolean(name='InUse', description='Specifies whether the rule is enabled. Valid values:

*   true
*   false', example='true', position='Body'),
  regionId?: string(name='RegionId', description='The data management center of the threat analysis feature. Specify this parameter based on the region in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions inside China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
}

model UpdateAutomateResponseConfigStatusResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: string(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateAutomateResponseConfigStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutomateResponseConfigStatusResponseBody(name='body'),
}

async function updateAutomateResponseConfigStatus(request: UpdateAutomateResponseConfigStatusRequest): UpdateAutomateResponseConfigStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAutomateResponseConfigStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWhiteRuleListRequest {
  expression: string(name='Expression', description='The alert whitelist rule. The value is a JSON object.', example='[
      {
            "alertName": "webshell",
            "alertNameId": "webshell",
            "alertType": "command",
            "alertTypeId": "command",
            "expression": {
                  "status": 1,
                  "conditions": [
                        {
                              "isNot": false,
                              "left": {
                                    "value": "file_path"
                              },
                              "operator": "gt",
                              "right": {
                                    "value": "cp"
                              }
                        }
                  ]
            }
      }
]', position='Body'),
  incidentUuid?: string(name='IncidentUuid', description='The UUID of the event.', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  regionId?: string(name='RegionId', description='The region in which the data management center of the threat analysis feature resides. Specify this parameter based on the regions in which your assets reside. Valid values:

*   cn-hangzhou: Your assets reside in regions in China.
*   ap-southeast-1: Your assets reside in regions outside China.', example='cn-hangzhou', position='Body'),
  whiteRuleId: long(name='WhiteRuleId', description='The unique ID of the whitelist rule.', example='123456789', position='Body'),
}

model UpdateWhiteRuleListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: any(name='Data', description='The data returned.', example='123456'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateWhiteRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWhiteRuleListResponseBody(name='body'),
}

async function updateWhiteRuleList(request: UpdateWhiteRuleListRequest): UpdateWhiteRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWhiteRuleList', 'POST', '/', 'json', true, 'form', request);
}

model DataProductListLogMapValue = {
  logCode?: string(name='LogCode', description='The code of the log.', example='cloud_siem_config_log'),
  logName?: string(name='LogName', description='This parameter is deprecated.', example='audit log'),
  logNameEn?: string(name='LogNameEn', description='This parameter is deprecated.', example='audit log'),
  logNameKey?: string(name='LogNameKey', description='The language code of the log that is used to indicate the language in which the log is displayed.', example='${sas.cloudsiem.prod.cloud_siem_aegis_crack_from_beaver}'),
  status?: boolean(name='Status', description='The status of the log delivery. Valid values:

*   true: The logs are being delivered.
*   false: The log delivery feature is disabled.', example='true'),
  canOperateOrNot?: boolean(name='CanOperateOrNot', description='Indicates whether the log delivery feature can be enabled or disabled. The feature can be enabled or disabled only by the administrator of the threat analysis feature. Valid values:

*   true
*   false', example='true'),
  topic?: string(name='Topic', description='The topic of the log in the Logstore. The value is an index field in the Logstore that can be used to distinguish different logs.', example='sas_login_event'),
  extraParameters?: [ 
    {
      key?: string(name='Key', description='The ID of the extended parameter.', example='flag'),
      value?: string(name='Value', description='The value of the extended parameter.', example='value'),
    }
  ](name='ExtraParameters', description='The extended parameter.'),
}

model DataProductListLogMapValueValue = {
  key?: string(name='Key', description='The ID of the extended parameter.', example='flag'),
  value?: string(name='Value', description='The value of the extended parameter.', example='value'),
}

