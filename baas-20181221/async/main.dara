/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Baas';
  @version = '2018-12-21';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'baas.aliyuncs.com',
    cn-beijing = 'baas.aliyuncs.com',
    cn-zhangjiakou = 'baas.aliyuncs.com',
    cn-huhehaote = 'baas.aliyuncs.com',
    cn-shanghai = 'baas.aliyuncs.com',
    cn-shenzhen = 'baas.aliyuncs.com',
    cn-hongkong = 'baas.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'baas.ap-southeast-1.aliyuncs.com',
    ap-northeast-1 = 'baas.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'baas.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'baas.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'baas.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'baas.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'baas.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AcceptFabricInvitationRequest {
  code: string(name='Code', position='Body'),
  isAccepted?: boolean(name='IsAccepted', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model AcceptFabricInvitationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AcceptFabricInvitationResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptFabricInvitationResponseBody(name='body'),
}

async function acceptFabricInvitation(request: AcceptFabricInvitationRequest): AcceptFabricInvitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptFabricInvitation', 'POST', '/', 'json', true, 'form', request);
}

model ApplyAntChainCertificateRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  uploadReq: string(name='UploadReq', position='Body'),
}

model ApplyAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ApplyAntChainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAntChainCertificateResponseBody(name='body'),
}

async function applyAntChainCertificate(request: ApplyAntChainCertificateRequest): ApplyAntChainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAntChainCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ApplyAntChainCertificateWithKeyAutoCreationRequest {
  antChainId: string(name='AntChainId', position='Body'),
  commonName: string(name='CommonName', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  countryName: string(name='CountryName', position='Body'),
  localityName: string(name='LocalityName', position='Body'),
  organizationName: string(name='OrganizationName', position='Body'),
  organizationUnitName: string(name='OrganizationUnitName', position='Body'),
  password: string(name='Password', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  stateOrProvinceName: string(name='StateOrProvinceName', position='Body'),
}

model ApplyAntChainCertificateWithKeyAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    downloadPath?: {
      caCrtUrl?: string(name='CaCrtUrl'),
      clientCrtUrl?: string(name='ClientCrtUrl'),
      sdkUrl?: string(name='SdkUrl'),
      trustCaUrl?: string(name='TrustCaUrl'),
    }(name='DownloadPath'),
    privateKey?: string(name='PrivateKey'),
  }(name='Result'),
}

model ApplyAntChainCertificateWithKeyAutoCreationResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAntChainCertificateWithKeyAutoCreationResponseBody(name='body'),
}

async function applyAntChainCertificateWithKeyAutoCreation(request: ApplyAntChainCertificateWithKeyAutoCreationRequest): ApplyAntChainCertificateWithKeyAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAntChainCertificateWithKeyAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest {
  antChainId: string(name='AntChainId', position='Body'),
  phoneList: map[string]any(name='PhoneList', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody(name='body'),
}

async function batchAddAntChainMiniAppQRCodeAuthorizedUsers(request: BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest): BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddAntChainMiniAppQRCodeAuthorizedUsers', 'POST', '/', 'json', true, 'form', request);
}

model CheckFabricConsortiumDomainRequest {
  domainCode: string(name='DomainCode', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CheckFabricConsortiumDomainResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    domain?: string(name='Domain'),
    prompt?: string(name='Prompt'),
    valid?: boolean(name='Valid'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CheckFabricConsortiumDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CheckFabricConsortiumDomainResponseBody(name='body'),
}

async function checkFabricConsortiumDomain(request: CheckFabricConsortiumDomainRequest): CheckFabricConsortiumDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFabricConsortiumDomain', 'POST', '/', 'json', true, 'form', request);
}

model CheckFabricOrganizationDomainRequest {
  domain?: string(name='Domain', position='Body'),
  domainCode?: string(name='DomainCode', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CheckFabricOrganizationDomainResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    domain?: string(name='Domain'),
    prompt?: string(name='Prompt'),
    valid?: boolean(name='Valid'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CheckFabricOrganizationDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CheckFabricOrganizationDomainResponseBody(name='body'),
}

async function checkFabricOrganizationDomain(request: CheckFabricOrganizationDomainRequest): CheckFabricOrganizationDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFabricOrganizationDomain', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmFabricConsortiumMemberRequest {
  consortiumId: string(name='ConsortiumId', position='Query'),
  organization: [ 
    {
      organizationId?: string(name='OrganizationId'),
    }
  ](name='Organization', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ConfirmFabricConsortiumMemberResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model ConfirmFabricConsortiumMemberResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmFabricConsortiumMemberResponseBody(name='body'),
}

async function confirmFabricConsortiumMember(request: ConfirmFabricConsortiumMemberRequest): ConfirmFabricConsortiumMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmFabricConsortiumMember', 'POST', '/', 'json', false, 'json', request);
}

model CopyAntChainContractProjectRequest {
  projectDescription?: string(name='ProjectDescription', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  projectName: string(name='ProjectName', position='Body'),
  projectVersion: string(name='ProjectVersion', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CopyAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    createTime?: long(name='CreateTime'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
    updateTime?: long(name='UpdateTime'),
  }(name='Result'),
}

model CopyAntChainContractProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CopyAntChainContractProjectResponseBody(name='body'),
}

async function copyAntChainContractProject(request: CopyAntChainContractProjectRequest): CopyAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainAccountRequest {
  account: string(name='Account', position='Body'),
  accountPubKey: string(name='AccountPubKey', position='Body'),
  accountRecoverPubKey: string(name='AccountRecoverPubKey', position='Body'),
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    account?: string(name='Account'),
    antChainId?: string(name='AntChainId'),
  }(name='Result'),
}

model CreateAntChainAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainAccountResponseBody(name='body'),
}

async function createAntChainAccount(request: CreateAntChainAccountRequest): CreateAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainAccountWithKeyPairAutoCreationRequest {
  account: string(name='Account', position='Body'),
  antChainId: string(name='AntChainId', position='Body'),
  password: string(name='Password', position='Body'),
  recoverPassword: string(name='RecoverPassword', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateAntChainAccountWithKeyPairAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    account?: string(name='Account'),
    accountPrivateKey?: string(name='AccountPrivateKey'),
    accountPublicKey?: string(name='AccountPublicKey'),
    accountRecoverPrivateKey?: string(name='AccountRecoverPrivateKey'),
    accountRecoverPublicKey?: string(name='AccountRecoverPublicKey'),
    antChainId?: string(name='AntChainId'),
  }(name='Result'),
}

model CreateAntChainAccountWithKeyPairAutoCreationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainAccountWithKeyPairAutoCreationResponseBody(name='body'),
}

async function createAntChainAccountWithKeyPairAutoCreation(request: CreateAntChainAccountWithKeyPairAutoCreationRequest): CreateAntChainAccountWithKeyPairAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainAccountWithKeyPairAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainConsortiumRequest {
  consortiumDescription?: string(name='ConsortiumDescription', position='Body'),
  consortiumName: string(name='ConsortiumName', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
  }(name='Result'),
}

model CreateAntChainConsortiumResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainConsortiumResponseBody(name='body'),
}

async function createAntChainConsortium(request: CreateAntChainConsortiumRequest): CreateAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainContractContentRequest {
  content?: string(name='Content', position='Body'),
  contentName: string(name='ContentName', position='Body'),
  isDirectory: boolean(name='IsDirectory', position='Body'),
  parentContentId?: string(name='ParentContentId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    content?: string(name='Content'),
    contentId?: string(name='ContentId'),
    contentName?: string(name='ContentName'),
    createTime?: string(name='CreateTime'),
    isDirectory?: boolean(name='IsDirectory'),
    parentContentId?: string(name='ParentContentId'),
    projectId?: string(name='ProjectId'),
    updateTime?: string(name='UpdateTime'),
  }(name='Result'),
}

model CreateAntChainContractContentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainContractContentResponseBody(name='body'),
}

async function createAntChainContractContent(request: CreateAntChainContractContentRequest): CreateAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainContractProjectRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  projectDescription?: string(name='ProjectDescription', position='Body'),
  projectName: string(name='ProjectName', position='Body'),
  projectVersion: string(name='ProjectVersion', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    createTime?: long(name='CreateTime'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
    updateTime?: long(name='UpdateTime'),
  }(name='Result'),
}

model CreateAntChainContractProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainContractProjectResponseBody(name='body'),
}

async function createAntChainContractProject(request: CreateAntChainContractProjectRequest): CreateAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricChaincodeRequest {
  channelId: string(name='ChannelId', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', position='Body'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  ossBucket: string(name='OssBucket', position='Body'),
  ossUrl: string(name='OssUrl', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricChaincodeResponseBody(name='body'),
}

async function createFabricChaincode(request: CreateFabricChaincodeRequest): CreateFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricChannelRequest {
  batchTimeout?: int32(name='BatchTimeout', position='Body'),
  channelName: string(name='ChannelName', position='Query'),
  consortiumId: string(name='ConsortiumId', position='Query'),
  maxMessageCount?: int32(name='MaxMessageCount', position='Body'),
  organization: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Organization', position='Query'),
  preferredMaxBytes?: int32(name='PreferredMaxBytes', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateFabricChannelResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    batchTimeout?: int32(name='BatchTimeout'),
    blockCount?: int32(name='BlockCount'),
    chaincodeCount?: int32(name='ChaincodeCount'),
    channelId?: string(name='ChannelId'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    createTime?: string(name='CreateTime'),
    maxMessageCount?: int32(name='MaxMessageCount'),
    memberCount?: int32(name='MemberCount'),
    ownerBid?: string(name='OwnerBid'),
    ownerName?: string(name='OwnerName'),
    ownerUid?: long(name='OwnerUid'),
    preferredMaxBytes?: int32(name='PreferredMaxBytes'),
    requestId?: string(name='RequestId'),
    state?: string(name='State'),
    supportConfig?: boolean(name='SupportConfig'),
    updateTime?: string(name='UpdateTime'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricChannelResponseBody(name='body'),
}

async function createFabricChannel(request: CreateFabricChannelRequest): CreateFabricChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricChannel', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricChannelMemberRequest {
  channelId: string(name='ChannelId', position='Query'),
  organization: [ 
    {
      organizationId?: string(name='OrganizationId'),
    }
  ](name='Organization', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateFabricChannelMemberResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricChannelMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricChannelMemberResponseBody(name='body'),
}

async function createFabricChannelMember(request: CreateFabricChannelMemberRequest): CreateFabricChannelMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricChannelMember', 'POST', '/', 'json', false, 'json', request);
}

model CreateFabricConsortiumRequest {
  channelPolicy: string(name='ChannelPolicy', position='Body'),
  consortiumDescription?: string(name='ConsortiumDescription', position='Body'),
  consortiumName: string(name='ConsortiumName', position='Body'),
  domain: string(name='Domain', position='Body'),
  location: string(name='Location', position='Body'),
  ordererType: string(name='OrdererType', position='Body'),
  orderersCount?: int32(name='OrderersCount', position='Body'),
  organization?: [ 
    {
      organizationId?: string(name='OrganizationId'),
    }
  ](name='Organization', position='Body'),
  paymentDuration: int32(name='PaymentDuration', position='Body'),
  paymentDurationUnit: string(name='PaymentDurationUnit', position='Body'),
  peersCount?: int32(name='PeersCount', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  specName: string(name='SpecName', position='Body'),
  zoneId?: string(name='ZoneId', position='Body'),
}

model CreateFabricConsortiumResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelCount?: int32(name='ChannelCount'),
    channelPolicy?: string(name='ChannelPolicy'),
    clusterState?: string(name='ClusterState'),
    codeName?: string(name='CodeName'),
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    domain?: string(name='Domain'),
    memberCount?: int32(name='MemberCount'),
    ordererCount?: int32(name='OrdererCount'),
    ordererType?: string(name='OrdererType'),
    ownerBid?: string(name='OwnerBid'),
    ownerUid?: long(name='OwnerUid'),
    regionId?: string(name='RegionId'),
    serviceState?: string(name='ServiceState'),
    specName?: string(name='SpecName'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricConsortiumResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricConsortiumResponseBody(name='body'),
}

async function createFabricConsortium(request: CreateFabricConsortiumRequest): CreateFabricConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricConsortium', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricConsortiumMemberRequest {
  code: string(name='Code', position='Query'),
  consortiumId: string(name='ConsortiumId', position='Query'),
  organization: [ 
    {
      organizationId?: string(name='OrganizationId'),
    }
  ](name='Organization', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateFabricConsortiumMemberResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricConsortiumMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricConsortiumMemberResponseBody(name='body'),
}

async function createFabricConsortiumMember(request: CreateFabricConsortiumMemberRequest): CreateFabricConsortiumMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricConsortiumMember', 'POST', '/', 'json', false, 'json', request);
}

model CreateFabricOrganizationRequest {
  description?: string(name='Description', position='Query'),
  domain: string(name='Domain', position='Query'),
  location: string(name='Location', position='Query'),
  organizationName: string(name='OrganizationName', position='Query'),
  paymentDuration: int32(name='PaymentDuration', position='Body'),
  paymentDurationUnit: string(name='PaymentDurationUnit', position='Body'),
  peersCount?: int32(name='PeersCount', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  specName: string(name='SpecName', position='Query'),
}

model CreateFabricOrganizationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    clusterState?: string(name='ClusterState'),
    codeName?: string(name='CodeName'),
    consortiumCount?: int32(name='ConsortiumCount'),
    createTime?: string(name='CreateTime'),
    domain?: string(name='Domain'),
    organizationDescription?: string(name='OrganizationDescription'),
    organizationId?: string(name='OrganizationId'),
    organizationName?: string(name='OrganizationName'),
    ownerBid?: string(name='OwnerBid'),
    ownerName?: string(name='OwnerName'),
    ownerUid?: long(name='OwnerUid'),
    peerCount?: int32(name='PeerCount'),
    regionId?: string(name='RegionId'),
    requestId?: string(name='RequestId'),
    serviceState?: string(name='ServiceState'),
    specName?: string(name='SpecName'),
    userCount?: int32(name='UserCount'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricOrganizationResponseBody(name='body'),
}

async function createFabricOrganization(request: CreateFabricOrganizationRequest): CreateFabricOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricOrganization', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricOrganizationUserRequest {
  attrs?: string(name='Attrs', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  password: string(name='Password', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  username: string(name='Username', position='Body'),
}

model CreateFabricOrganizationUserResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    fullname?: string(name='Fullname'),
    organizationId?: string(name='OrganizationId'),
    password?: string(name='Password'),
    username?: string(name='Username'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricOrganizationUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricOrganizationUserResponseBody(name='body'),
}

async function createFabricOrganizationUser(request: CreateFabricOrganizationUserRequest): CreateFabricOrganizationUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricOrganizationUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainConsortiumRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainConsortiumResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntChainConsortiumResponseBody(name='body'),
}

async function deleteAntChainConsortium(request: DeleteAntChainConsortiumRequest): DeleteAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainContractContentRequest {
  contentId: string(name='ContentId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainContractContentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntChainContractContentResponseBody(name='body'),
}

async function deleteAntChainContractContent(request: DeleteAntChainContractContentRequest): DeleteAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainContractProjectRequest {
  projectId: string(name='ProjectId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainContractProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntChainContractProjectResponseBody(name='body'),
}

async function deleteAntChainContractProject(request: DeleteAntChainContractProjectRequest): DeleteAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserRequest {
  antChainId: string(name='AntChainId', position='Body'),
  phone: string(name='Phone', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody(name='body'),
}

async function deleteAntChainMiniAppQRCodeAuthorizedUser(request: DeleteAntChainMiniAppQRCodeAuthorizedUserRequest): DeleteAntChainMiniAppQRCodeAuthorizedUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainMiniAppQRCodeAuthorizedUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFabricChaincodeRequest {
  chaincodeId: string(name='ChaincodeId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFabricChaincodeResponseBody(name='body'),
}

async function deleteFabricChaincode(request: DeleteFabricChaincodeRequest): DeleteFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainAccountsRequest {
  antChainId: string(name='AntChainId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accounts?: [ 
      {
        account?: string(name='Account'),
        accountPublicKey?: string(name='AccountPublicKey'),
        accountRecoveryKey?: string(name='AccountRecoveryKey'),
        accountStatus?: string(name='AccountStatus'),
        antChainId?: string(name='AntChainId'),
      }
    ](name='Accounts'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainAccountsResponseBody(name='body'),
}

async function describeAntChainAccounts(request: DescribeAntChainAccountsRequest): DescribeAntChainAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainAccounts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainAccountsV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=2147483647, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainAccountsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    accounts?: [ 
      {
        account?: string(name='Account'),
        accountPublicKey?: string(name='AccountPublicKey'),
        accountRecoveryKey?: string(name='AccountRecoveryKey'),
        accountStatus?: string(name='AccountStatus'),
        antChainId?: string(name='AntChainId'),
      }
    ](name='Accounts'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainAccountsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainAccountsV2ResponseBody(name='body'),
}

async function describeAntChainAccountsV2(request: DescribeAntChainAccountsV2Request): DescribeAntChainAccountsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainAccountsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainBlockRequest {
  antChainId: string(name='AntChainId', position='Body'),
  height: long(name='Height', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainBlockResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    blockHash?: string(name='BlockHash'),
    createTime?: long(name='CreateTime'),
    height?: int32(name='Height'),
    previousHash?: string(name='PreviousHash'),
    rootTxHash?: string(name='RootTxHash'),
    transSummaryList?: string(name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize'),
    version?: long(name='Version'),
  }(name='Result'),
}

model DescribeAntChainBlockResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainBlockResponseBody(name='body'),
}

async function describeAntChainBlock(request: DescribeAntChainBlockRequest): DescribeAntChainBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainBlock', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainBlockV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  height: long(name='Height', minimum=0, maximum=9223372036854775807, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainBlockV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    blockHash?: string(name='BlockHash'),
    createTime?: long(name='CreateTime'),
    height?: int32(name='Height'),
    previousHash?: string(name='PreviousHash'),
    rootTxHash?: string(name='RootTxHash'),
    transSummaryList?: [ 
      {
        alias?: string(name='Alias'),
        blockHash?: string(name='BlockHash'),
        category?: int32(name='Category'),
        createTime?: long(name='CreateTime'),
        from?: string(name='From'),
        gasUsed?: long(name='GasUsed'),
        hash?: string(name='Hash'),
        height?: long(name='Height'),
        referenceCount?: int32(name='ReferenceCount'),
        to?: string(name='To'),
        transTypeV10?: string(name='TransTypeV10'),
        transTypeV6?: string(name='TransTypeV6'),
      }
    ](name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize'),
    version?: long(name='Version'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainBlockV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainBlockV2ResponseBody(name='body'),
}

async function describeAntChainBlockV2(request: DescribeAntChainBlockV2Request): DescribeAntChainBlockV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainBlockV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainCertificateApplicationsRequest {
  antChainId: string(name='AntChainId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  status: string(name='Status', position='Body'),
}

model DescribeAntChainCertificateApplicationsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    certificateApplications?: [ 
      {
        antChainId?: string(name='AntChainId'),
        bid?: string(name='Bid'),
        createtime?: long(name='Createtime'),
        status?: string(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='CertificateApplications'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainCertificateApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainCertificateApplicationsResponseBody(name='body'),
}

async function describeAntChainCertificateApplications(request: DescribeAntChainCertificateApplicationsRequest): DescribeAntChainCertificateApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainCertificateApplications', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainCertificateApplicationsV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=9223372036854775807, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  status: string(name='Status', position='Body'),
}

model DescribeAntChainCertificateApplicationsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    certificateApplications?: [ 
      {
        antChainId?: string(name='AntChainId'),
        bid?: string(name='Bid'),
        createtime?: long(name='Createtime'),
        status?: string(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='CertificateApplications'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainCertificateApplicationsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainCertificateApplicationsV2ResponseBody(name='body'),
}

async function describeAntChainCertificateApplicationsV2(request: DescribeAntChainCertificateApplicationsV2Request): DescribeAntChainCertificateApplicationsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainCertificateApplicationsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainConsortiumsRequest {
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainConsortiumsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antConsortiums?: [ 
      {
        chainNum?: long(name='ChainNum'),
        consortiumDescription?: string(name='ConsortiumDescription'),
        consortiumId?: string(name='ConsortiumId'),
        consortiumName?: string(name='ConsortiumName'),
        createTime?: long(name='CreateTime'),
        memberNum?: long(name='MemberNum'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='AntConsortiums'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainConsortiumsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainConsortiumsResponseBody(name='body'),
}

async function describeAntChainConsortiums(request: DescribeAntChainConsortiumsRequest): DescribeAntChainConsortiumsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainConsortiums', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainConsortiumsV2Request {
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=2147483647, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainConsortiumsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antConsortiums?: [ 
      {
        chainNum?: long(name='ChainNum'),
        consortiumDescription?: string(name='ConsortiumDescription'),
        consortiumId?: string(name='ConsortiumId'),
        consortiumName?: string(name='ConsortiumName'),
        createTime?: long(name='CreateTime'),
        isEmptyConsortium?: boolean(name='IsEmptyConsortium'),
        memberNum?: long(name='MemberNum'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='AntConsortiums'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainConsortiumsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainConsortiumsV2ResponseBody(name='body'),
}

async function describeAntChainConsortiumsV2(request: DescribeAntChainConsortiumsV2Request): DescribeAntChainConsortiumsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainConsortiumsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectContentTreeRequest {
  projectId: string(name='ProjectId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainContractProjectContentTreeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    children?: [  map[string]any ](name='Children'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
  }(name='Result'),
}

model DescribeAntChainContractProjectContentTreeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainContractProjectContentTreeResponseBody(name='body'),
}

async function describeAntChainContractProjectContentTree(request: DescribeAntChainContractProjectContentTreeRequest): DescribeAntChainContractProjectContentTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectContentTree', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectContentTreeV2Request {
  consortiumId: string(name='ConsortiumId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainContractProjectContentTreeV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainContractProjectContentTreeV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainContractProjectContentTreeV2ResponseBody(name='body'),
}

async function describeAntChainContractProjectContentTreeV2(request: DescribeAntChainContractProjectContentTreeV2Request): DescribeAntChainContractProjectContentTreeV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectContentTreeV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectsRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainContractProjectsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    contractProjects?: [ 
      {
        consortiumId?: string(name='ConsortiumId'),
        createTime?: long(name='CreateTime'),
        projectDescription?: string(name='ProjectDescription'),
        projectId?: string(name='ProjectId'),
        projectName?: string(name='ProjectName'),
        projectVersion?: string(name='ProjectVersion'),
        updateTime?: long(name='UpdateTime'),
      }
    ](name='ContractProjects'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainContractProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainContractProjectsResponseBody(name='body'),
}

async function describeAntChainContractProjects(request: DescribeAntChainContractProjectsRequest): DescribeAntChainContractProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjects', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectsV2Request {
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=9223372036854775807, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainContractProjectsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    contractProjects?: [ 
      {
        consortiumId?: string(name='ConsortiumId'),
        createTime?: long(name='CreateTime'),
        projectDescription?: string(name='ProjectDescription'),
        projectId?: string(name='ProjectId'),
        projectName?: string(name='ProjectName'),
        projectVersion?: string(name='ProjectVersion'),
        updateTime?: long(name='UpdateTime'),
      }
    ](name='ContractProjects'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainContractProjectsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainContractProjectsV2ResponseBody(name='body'),
}

async function describeAntChainContractProjectsV2(request: DescribeAntChainContractProjectsV2Request): DescribeAntChainContractProjectsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainDownloadPathsRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainDownloadPathsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl'),
    clientCrtUrl?: string(name='ClientCrtUrl'),
    sdkUrl?: string(name='SdkUrl'),
    trustCaUrl?: string(name='TrustCaUrl'),
  }(name='Result'),
}

model DescribeAntChainDownloadPathsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainDownloadPathsResponseBody(name='body'),
}

async function describeAntChainDownloadPaths(request: DescribeAntChainDownloadPathsRequest): DescribeAntChainDownloadPathsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainDownloadPaths', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainDownloadPathsV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainDownloadPathsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl'),
    clientCrtUrl?: string(name='ClientCrtUrl'),
    sdkUrl?: string(name='SdkUrl'),
    trustCaUrl?: string(name='TrustCaUrl'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainDownloadPathsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainDownloadPathsV2ResponseBody(name='body'),
}

async function describeAntChainDownloadPathsV2(request: DescribeAntChainDownloadPathsV2Request): DescribeAntChainDownloadPathsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainDownloadPathsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainInformationRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainInformationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes'),
    antChainId?: string(name='AntChainId'),
    blockHeight?: int32(name='BlockHeight'),
    createTime?: long(name='CreateTime'),
    nodeInfos?: [ 
      {
        blockHeight?: long(name='BlockHeight'),
        nodeName?: string(name='NodeName'),
        status?: boolean(name='Status'),
        version?: string(name='Version'),
      }
    ](name='NodeInfos'),
    nodeNumber?: int32(name='NodeNumber'),
    normal?: boolean(name='Normal'),
    transactionSum?: int32(name='TransactionSum'),
    version?: string(name='Version'),
  }(name='Result'),
}

model DescribeAntChainInformationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainInformationResponseBody(name='body'),
}

async function describeAntChainInformation(request: DescribeAntChainInformationRequest): DescribeAntChainInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainInformation', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainInformationV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainInformationV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes'),
    antChainId?: string(name='AntChainId'),
    blockHeight?: int32(name='BlockHeight'),
    createTime?: long(name='CreateTime'),
    isRole?: boolean(name='IsRole'),
    nodeInfos?: [ 
      {
        blockHeight?: long(name='BlockHeight'),
        nodeName?: string(name='NodeName'),
        status?: boolean(name='Status'),
        version?: string(name='Version'),
      }
    ](name='NodeInfos'),
    nodeNumber?: int32(name='NodeNumber'),
    normal?: boolean(name='Normal'),
    transactionSum?: int32(name='TransactionSum'),
    version?: string(name='Version'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainInformationV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainInformationV2ResponseBody(name='body'),
}

async function describeAntChainInformationV2(request: DescribeAntChainInformationV2Request): DescribeAntChainInformationV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainInformationV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestBlocksRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainLatestBlocksResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainLatestBlocksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainLatestBlocksResponseBody(name='body'),
}

async function describeAntChainLatestBlocks(request: DescribeAntChainLatestBlocksRequest): DescribeAntChainLatestBlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestBlocks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestBlocksV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainLatestBlocksV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      alias?: string(name='Alias'),
      bizData?: string(name='BizData'),
      blockHash?: string(name='BlockHash'),
      createTime?: long(name='CreateTime'),
      height?: long(name='Height'),
      previousHash?: string(name='PreviousHash'),
      rootTxHash?: string(name='RootTxHash'),
      size?: long(name='Size'),
      transactionSize?: long(name='TransactionSize'),
      version?: long(name='Version'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainLatestBlocksV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainLatestBlocksV2ResponseBody(name='body'),
}

async function describeAntChainLatestBlocksV2(request: DescribeAntChainLatestBlocksV2Request): DescribeAntChainLatestBlocksV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestBlocksV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestTransactionDigestsRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainLatestTransactionDigestsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainLatestTransactionDigestsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainLatestTransactionDigestsResponseBody(name='body'),
}

async function describeAntChainLatestTransactionDigests(request: DescribeAntChainLatestTransactionDigestsRequest): DescribeAntChainLatestTransactionDigestsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestTransactionDigests', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestTransactionDigestsV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainLatestTransactionDigestsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainLatestTransactionDigestsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainLatestTransactionDigestsV2ResponseBody(name='body'),
}

async function describeAntChainLatestTransactionDigestsV2(request: DescribeAntChainLatestTransactionDigestsV2Request): DescribeAntChainLatestTransactionDigestsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestTransactionDigestsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMembersRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainMembersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    members?: [ 
      {
        joinTime?: long(name='JoinTime'),
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='Members'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMembersResponseBody(name='body'),
}

async function describeAntChainMembers(request: DescribeAntChainMembersRequest): DescribeAntChainMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMembersV2Request {
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=2147483647, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainMembersV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    members?: [ 
      {
        joinTime?: long(name='JoinTime'),
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='Members'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMembersV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMembersV2ResponseBody(name='body'),
}

async function describeAntChainMembersV2(request: DescribeAntChainMembersV2Request): DescribeAntChainMembersV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMembersV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest {
  antChainId: string(name='AntChainId', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount'),
    accessCount?: long(name='AccessCount'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAccessLog(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest): DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAccessLog', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount'),
    accessCount?: long(name='AccessCount'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserQRCodeAccessLogV2ResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAccessLogV2(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Request): DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAccessLogV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest {
  antChainId: string(name='AntChainId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    authorizedUserList?: [ 
      {
        gmtAuthorized?: string(name='GmtAuthorized'),
        phone?: string(name='Phone'),
      }
    ](name='AuthorizedUserList'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsers(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=9223372036854775807, position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    authorizedUserList?: [ 
      {
        gmtAuthorized?: string(name='GmtAuthorized'),
        phone?: string(name='Phone'),
      }
    ](name='AuthorizedUserList'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2ResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Request): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  transactionHash: string(name='TransactionHash', position='Body'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    base64QRCodePNG?: string(name='Base64QRCodePNG'),
    QRCodeContent?: string(name='QRCodeContent'),
    transactionHash?: string(name='TransactionHash'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserTransactionQRCode(request: DescribeAntChainMiniAppBrowserTransactionQRCodeRequest): DescribeAntChainMiniAppBrowserTransactionQRCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserTransactionQRCode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest {
  antChainId: string(name='AntChainId', position='Body'),
  contractId?: string(name='ContractId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  transactionHash: string(name='TransactionHash', position='Body'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    base64QRCodePNG?: string(name='Base64QRCodePNG'),
    QRCodeContent?: string(name='QRCodeContent'),
    transactionHash?: string(name='TransactionHash'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserTransactionQRCodeNew(request: DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest): DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserTransactionQRCodeNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainNodesRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainNodesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainNodesResponseBody(name='body'),
}

async function describeAntChainNodes(request: DescribeAntChainNodesRequest): DescribeAntChainNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainNodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainNodesV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainNodesV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainNodesV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainNodesV2ResponseBody(name='body'),
}

async function describeAntChainNodesV2(request: DescribeAntChainNodesV2Request): DescribeAntChainNodesV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainNodesV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainQRCodeAuthorizationRequest {
  antChainId: string(name='AntChainId', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainQRCodeAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
}

model DescribeAntChainQRCodeAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainQRCodeAuthorizationResponseBody(name='body'),
}

async function describeAntChainQRCodeAuthorization(request: DescribeAntChainQRCodeAuthorizationRequest): DescribeAntChainQRCodeAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainQRCodeAuthorization', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainQRCodeAuthorizationV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainQRCodeAuthorizationV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainQRCodeAuthorizationV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainQRCodeAuthorizationV2ResponseBody(name='body'),
}

async function describeAntChainQRCodeAuthorizationV2(request: DescribeAntChainQRCodeAuthorizationV2Request): DescribeAntChainQRCodeAuthorizationV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainQRCodeAuthorizationV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionRequest {
  antChainId: string(name='AntChainId', position='Body'),
  hash: string(name='Hash', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainTransactionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    blockHash?: string(name='BlockHash'),
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: string(name='BlockVersion'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    transaction?: {
      data?: string(name='Data'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From'),
      gas?: string(name='Gas'),
      hash?: string(name='Hash'),
      nonce?: string(name='Nonce'),
      period?: long(name='Period'),
      signatures?: [ string ](name='Signatures'),
      timestamp?: long(name='Timestamp'),
      to?: string(name='To'),
      txType?: string(name='TxType'),
      value?: string(name='Value'),
    }(name='Transaction'),
  }(name='Result'),
}

model DescribeAntChainTransactionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionResponseBody(name='body'),
}

async function describeAntChainTransaction(request: DescribeAntChainTransactionRequest): DescribeAntChainTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransaction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionReceiptRequest {
  antChainId: string(name='AntChainId', position='Body'),
  hash: string(name='Hash', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainTransactionReceiptResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    data?: string(name='Data'),
    gasUsed?: string(name='GasUsed'),
    logs?: [ string ](name='Logs'),
    result?: long(name='Result'),
  }(name='Result'),
}

model DescribeAntChainTransactionReceiptResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionReceiptResponseBody(name='body'),
}

async function describeAntChainTransactionReceipt(request: DescribeAntChainTransactionReceiptRequest): DescribeAntChainTransactionReceiptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionReceipt', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionReceiptV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  hash: string(name='Hash', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainTransactionReceiptV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    data?: string(name='Data'),
    gasUsed?: string(name='GasUsed'),
    logs?: [ string ](name='Logs'),
    result?: long(name='Result'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionReceiptV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionReceiptV2ResponseBody(name='body'),
}

async function describeAntChainTransactionReceiptV2(request: DescribeAntChainTransactionReceiptV2Request): DescribeAntChainTransactionReceiptV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionReceiptV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionStatisticsRequest {
  antChainId: string(name='AntChainId', position='Body'),
  end: long(name='End', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  start: long(name='Start', position='Body'),
}

model DescribeAntChainTransactionStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      antChainId?: string(name='AntChainId'),
      creatTime?: long(name='CreatTime'),
      dt?: string(name='Dt'),
      lastSumBlockHeight?: long(name='LastSumBlockHeight'),
      transCount?: long(name='TransCount'),
    }
  ](name='Result'),
}

model DescribeAntChainTransactionStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionStatisticsResponseBody(name='body'),
}

async function describeAntChainTransactionStatistics(request: DescribeAntChainTransactionStatisticsRequest): DescribeAntChainTransactionStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionStatistics', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionStatisticsV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  end?: long(name='End', minimum=0, maximum=9223372036854775807, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  start?: long(name='Start', minimum=0, maximum=9223372036854775807, position='Body'),
}

model DescribeAntChainTransactionStatisticsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      antChainId?: string(name='AntChainId'),
      creatTime?: long(name='CreatTime'),
      dt?: long(name='Dt'),
      lastSumBlockHeight?: long(name='LastSumBlockHeight'),
      transCount?: long(name='TransCount'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionStatisticsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionStatisticsV2ResponseBody(name='body'),
}

async function describeAntChainTransactionStatisticsV2(request: DescribeAntChainTransactionStatisticsV2Request): DescribeAntChainTransactionStatisticsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionStatisticsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionV2Request {
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  hash: string(name='Hash', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainTransactionV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    blockHash?: string(name='BlockHash'),
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: string(name='BlockVersion'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    transaction?: {
      data?: string(name='Data'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From'),
      gas?: string(name='Gas'),
      hash?: string(name='Hash'),
      nonce?: string(name='Nonce'),
      period?: long(name='Period'),
      signatures?: [ string ](name='Signatures'),
      timestamp?: long(name='Timestamp'),
      to?: string(name='To'),
      txType?: string(name='TxType'),
      value?: string(name='Value'),
    }(name='Transaction'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionV2ResponseBody(name='body'),
}

async function describeAntChainTransactionV2(request: DescribeAntChainTransactionV2Request): DescribeAntChainTransactionV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainsRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChains?: [ 
      {
        antChainId?: string(name='AntChainId'),
        antChainName?: string(name='AntChainName'),
        chainType?: string(name='ChainType'),
        cipherSuit?: string(name='CipherSuit'),
        createTime?: long(name='CreateTime'),
        expireTime?: long(name='ExpireTime'),
        isAdmin?: boolean(name='IsAdmin'),
        memberStatus?: string(name='MemberStatus'),
        merkleTreeSuit?: string(name='MerkleTreeSuit'),
        network?: string(name='Network'),
        nodeNum?: int32(name='NodeNum'),
        regionId?: string(name='RegionId'),
        resourceSize?: string(name='ResourceSize'),
        tlsAlgo?: string(name='TlsAlgo'),
        version?: string(name='Version'),
      }
    ](name='AntChains'),
    isExist?: boolean(name='IsExist'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainsResponseBody(name='body'),
}

async function describeAntChains(request: DescribeAntChainsRequest): DescribeAntChainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChains', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainsV2Request {
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=2147483647, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChains?: [ 
      {
        antChainId?: string(name='AntChainId'),
        antChainName?: string(name='AntChainName'),
        chainType?: string(name='ChainType'),
        cipherSuit?: string(name='CipherSuit'),
        createTime?: long(name='CreateTime'),
        expireTime?: long(name='ExpireTime'),
        instanceId?: string(name='InstanceId'),
        isAdmin?: boolean(name='IsAdmin'),
        memberStatus?: string(name='MemberStatus'),
        merkleTreeSuit?: string(name='MerkleTreeSuit'),
        monitorStatus?: boolean(name='MonitorStatus'),
        network?: string(name='Network'),
        nodeNum?: int32(name='NodeNum'),
        regionId?: string(name='RegionId'),
        resourceSize?: string(name='ResourceSize'),
        restStatus?: string(name='RestStatus'),
        tlsAlgo?: string(name='TlsAlgo'),
        version?: string(name='Version'),
      }
    ](name='AntChains'),
    isExist?: boolean(name='IsExist'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainsV2ResponseBody(name='body'),
}

async function describeAntChainsV2(request: DescribeAntChainsV2Request): DescribeAntChainsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumDeletableRequest {
  ethereumId: string(name='EthereumId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeEthereumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    deletable?: boolean(name='Deletable'),
    ethereumId?: string(name='EthereumId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumDeletableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEthereumDeletableResponseBody(name='body'),
}

async function describeEthereumDeletable(request: DescribeEthereumDeletableRequest): DescribeEthereumDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricCandidateOrganizationsRequest {
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricCandidateOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      clusterState?: string(name='ClusterState'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      serviceState?: string(name='ServiceState'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricCandidateOrganizationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricCandidateOrganizationsResponseBody(name='body'),
}

async function describeFabricCandidateOrganizations(request: DescribeFabricCandidateOrganizationsRequest): DescribeFabricCandidateOrganizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricCandidateOrganizations', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChaincodeUploadPolicyRequest {
  organizationId: string(name='OrganizationId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricChaincodeUploadPolicyResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    accessId?: string(name='AccessId'),
    dir?: string(name='Dir'),
    expire?: int32(name='Expire'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChaincodeUploadPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricChaincodeUploadPolicyResponseBody(name='body'),
}

async function describeFabricChaincodeUploadPolicy(request: DescribeFabricChaincodeUploadPolicyRequest): DescribeFabricChaincodeUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChaincodeUploadPolicy', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChannelMembersRequest {
  channelId: string(name='ChannelId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricChannelMembersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      acceptTime?: string(name='AcceptTime'),
      channelId?: string(name='ChannelId'),
      inviteTime?: string(name='InviteTime'),
      organizationDescription?: string(name='OrganizationDescription'),
      organizationDomain?: string(name='OrganizationDomain'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      state?: string(name='State'),
      withPeer?: boolean(name='WithPeer'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChannelMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricChannelMembersResponseBody(name='body'),
}

async function describeFabricChannelMembers(request: DescribeFabricChannelMembersRequest): DescribeFabricChannelMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChannelMembers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricConsortiumAdminStatusRequest {
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumAdminStatusResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consortiumAdministrator?: boolean(name='ConsortiumAdministrator'),
      consortiumId?: string(name='ConsortiumId'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumAdminStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumAdminStatusResponseBody(name='body'),
}

async function describeFabricConsortiumAdminStatus(request: DescribeFabricConsortiumAdminStatusRequest): DescribeFabricConsortiumAdminStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumAdminStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumChaincodesRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      chaincodeId?: string(name='ChaincodeId'),
      chaincodeName?: string(name='ChaincodeName'),
      chaincodeVersion?: string(name='ChaincodeVersion'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumId?: string(name='ConsortiumId'),
      createTime?: string(name='CreateTime'),
      deployTime?: string(name='DeployTime'),
      endorsePolicy?: string(name='EndorsePolicy'),
      input?: string(name='Input'),
      install?: boolean(name='Install'),
      message?: string(name='Message'),
      path?: string(name='Path'),
      providerId?: string(name='ProviderId'),
      providerName?: string(name='ProviderName'),
      state?: string(name='State'),
      type?: int32(name='Type'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumChaincodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumChaincodesResponseBody(name='body'),
}

async function describeFabricConsortiumChaincodes(request: DescribeFabricConsortiumChaincodesRequest): DescribeFabricConsortiumChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumChannelsRequest {
  consortiumId: string(name='ConsortiumId', position='Query'),
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      batchTimeout?: int32(name='BatchTimeout'),
      blockCount?: int32(name='BlockCount'),
      chaincodeCount?: int32(name='ChaincodeCount'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumChannelId?: int32(name='ConsortiumChannelId'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      createTime?: string(name='CreateTime'),
      deleteTime?: string(name='DeleteTime'),
      deleted?: boolean(name='Deleted'),
      maxMessageCount?: int32(name='MaxMessageCount'),
      memberCount?: int32(name='MemberCount'),
      memberJoinedCount?: string(name='MemberJoinedCount'),
      needJoined?: boolean(name='NeedJoined'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      preferredMaxBytes?: int32(name='PreferredMaxBytes'),
      requestId?: string(name='RequestId'),
      state?: string(name='State'),
      supportChannelConfig?: boolean(name='SupportChannelConfig'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumChannelsResponseBody(name='body'),
}

async function describeFabricConsortiumChannels(request: DescribeFabricConsortiumChannelsRequest): DescribeFabricConsortiumChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumChannels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumConfigResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelPolicy?: [ string ](name='ChannelPolicy'),
    ordererType?: [ string ](name='OrdererType'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumConfigResponseBody(name='body'),
}

async function describeFabricConsortiumConfig(request: DescribeFabricConsortiumConfigRequest): DescribeFabricConsortiumConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricConsortiumDeletableRequest {
  consortiumId: string(name='ConsortiumId', position='Query'),
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    codeName?: string(name='CodeName'),
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    deletable?: boolean(name='Deletable'),
    description?: string(name='Description'),
    domain?: string(name='Domain'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumDeletableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumDeletableResponseBody(name='body'),
}

async function describeFabricConsortiumDeletable(request: DescribeFabricConsortiumDeletableRequest): DescribeFabricConsortiumDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumMemberApprovalRequest {
  consortiumId: string(name='ConsortiumId', position='Query'),
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumMemberApprovalResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      channelCreatePolicy?: string(name='ChannelCreatePolicy'),
      confirmTime?: string(name='ConfirmTime'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      domainName?: string(name='DomainName'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      state?: string(name='State'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumMemberApprovalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumMemberApprovalResponseBody(name='body'),
}

async function describeFabricConsortiumMemberApproval(request: DescribeFabricConsortiumMemberApprovalRequest): DescribeFabricConsortiumMemberApprovalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumMemberApproval', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumMembersRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumMembersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consortiumId?: string(name='ConsortiumId'),
      description?: string(name='Description'),
      domain?: string(name='Domain'),
      joinedTime?: string(name='JoinedTime'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumMembersResponseBody(name='body'),
}

async function describeFabricConsortiumMembers(request: DescribeFabricConsortiumMembersRequest): DescribeFabricConsortiumMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumOrderersRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumOrderersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      instanceType?: string(name='InstanceType'),
      ordererName?: string(name='OrdererName'),
      port?: int32(name='Port'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumOrderersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumOrderersResponseBody(name='body'),
}

async function describeFabricConsortiumOrderers(request: DescribeFabricConsortiumOrderersRequest): DescribeFabricConsortiumOrderersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumOrderers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumSpecsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      enable?: boolean(name='Enable'),
      specName?: string(name='SpecName'),
      specTitle?: string(name='SpecTitle'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumSpecsResponseBody(name='body'),
}

async function describeFabricConsortiumSpecs(request: DescribeFabricConsortiumSpecsRequest): DescribeFabricConsortiumSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricConsortiumsRequest {
  consortiumId?: string(name='ConsortiumId', position='Query'),
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeFabricConsortiumsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      channelCount?: int32(name='ChannelCount'),
      channelPolicy?: string(name='ChannelPolicy'),
      codeName?: string(name='CodeName'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      expiredTime?: string(name='ExpiredTime'),
      organizationCount?: int32(name='OrganizationCount'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      regionId?: string(name='RegionId'),
      requestId?: string(name='RequestId'),
      specName?: string(name='SpecName'),
      state?: string(name='State'),
      supportChannelConfig?: boolean(name='SupportChannelConfig'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumsResponseBody(name='body'),
}

async function describeFabricConsortiums(request: DescribeFabricConsortiumsRequest): DescribeFabricConsortiumsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiums', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricExplorerRequest {
  exBody?: string(name='ExBody', position='Query'),
  exMethod: string(name='ExMethod', position='Query'),
  exUrl: string(name='ExUrl', position='Query'),
  organizationId: string(name='OrganizationId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricExplorerResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricExplorerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricExplorerResponseBody(name='body'),
}

async function describeFabricExplorer(request: DescribeFabricExplorerRequest): DescribeFabricExplorerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricExplorer', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricInvitationCodeRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricInvitationCodeResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    accepted?: boolean(name='Accepted'),
    code?: string(name='Code'),
    consortiumId?: string(name='ConsortiumId'),
    email?: string(name='Email'),
    expireTime?: string(name='ExpireTime'),
    invitationId?: int32(name='InvitationId'),
    sendTime?: string(name='SendTime'),
    senderBid?: string(name='SenderBid'),
    senderId?: long(name='SenderId'),
    senderName?: string(name='SenderName'),
    url?: string(name='Url'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricInvitationCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricInvitationCodeResponseBody(name='body'),
}

async function describeFabricInvitationCode(request: DescribeFabricInvitationCodeRequest): DescribeFabricInvitationCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricInvitationCode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricInviterRequest {
  code: string(name='Code', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricInviterResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    expireTime?: string(name='ExpireTime'),
    inviterId?: long(name='InviterId'),
    inviterName?: string(name='InviterName'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricInviterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricInviterResponseBody(name='body'),
}

async function describeFabricInviter(request: DescribeFabricInviterRequest): DescribeFabricInviterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricInviter', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrdererLogsRequest {
  consortiumId: string(name='ConsortiumId', position='Query'),
  lines?: string(name='Lines', position='Query'),
  ordererName: string(name='OrdererName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricOrdererLogsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrdererLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrdererLogsResponseBody(name='body'),
}

async function describeFabricOrdererLogs(request: DescribeFabricOrdererLogsRequest): DescribeFabricOrdererLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrdererLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricOrganizationRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeFabricOrganizationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    CANAME?: string(name='CANAME'),
    CAUrl?: string(name='CAUrl'),
    codeName?: string(name='CodeName'),
    consortiumCount?: int32(name='ConsortiumCount'),
    createTime?: string(name='CreateTime'),
    domain?: string(name='Domain'),
    MSP?: string(name='MSP'),
    organizationDescription?: string(name='OrganizationDescription'),
    organizationId?: string(name='OrganizationId'),
    organizationName?: string(name='OrganizationName'),
    ownerBid?: string(name='OwnerBid'),
    ownerName?: string(name='OwnerName'),
    ownerUid?: long(name='OwnerUid'),
    peerCount?: int32(name='PeerCount'),
    regionId?: string(name='RegionId'),
    requestId?: string(name='RequestId'),
    specName?: string(name='SpecName'),
    state?: string(name='State'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    userCount?: int32(name='UserCount'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationResponseBody(name='body'),
}

async function describeFabricOrganization(request: DescribeFabricOrganizationRequest): DescribeFabricOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganization', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationChaincodesRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricOrganizationChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      chaincodeId?: string(name='ChaincodeId'),
      chaincodeName?: string(name='ChaincodeName'),
      chaincodeVersion?: string(name='ChaincodeVersion'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumId?: string(name='ConsortiumId'),
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      deployTime?: string(name='DeployTime'),
      endorsePolicy?: string(name='EndorsePolicy'),
      installed?: string(name='Installed'),
      message?: string(name='Message'),
      state?: string(name='State'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationChaincodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationChaincodesResponseBody(name='body'),
}

async function describeFabricOrganizationChaincodes(request: DescribeFabricOrganizationChaincodesRequest): DescribeFabricOrganizationChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationChannelsRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricOrganizationChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      batchTimeout?: int32(name='BatchTimeout'),
      blockCount?: int32(name='BlockCount'),
      chaincodeCount?: int32(name='ChaincodeCount'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      createTime?: string(name='CreateTime'),
      deleteTime?: string(name='DeleteTime'),
      deleted?: boolean(name='Deleted'),
      maxMessageCount?: int32(name='MaxMessageCount'),
      memberCount?: int32(name='MemberCount'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      preferredMaxBytes?: int32(name='PreferredMaxBytes'),
      requestId?: string(name='RequestId'),
      state?: string(name='State'),
      supportChannelConfig?: boolean(name='SupportChannelConfig'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationChannelsResponseBody(name='body'),
}

async function describeFabricOrganizationChannels(request: DescribeFabricOrganizationChannelsRequest): DescribeFabricOrganizationChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationChannels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationDeletableRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricOrganizationDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    codeName?: string(name='CodeName'),
    deletable?: boolean(name='Deletable'),
    domain?: string(name='Domain'),
    organizationDescription?: string(name='OrganizationDescription'),
    organizationId?: string(name='OrganizationId'),
    organizationName?: string(name='OrganizationName'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationDeletableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationDeletableResponseBody(name='body'),
}

async function describeFabricOrganizationDeletable(request: DescribeFabricOrganizationDeletableRequest): DescribeFabricOrganizationDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationMembersRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricOrganizationMembersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      description?: string(name='Description'),
      domain?: string(name='Domain'),
      joinedTime?: string(name='JoinedTime'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      state?: string(name='State'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationMembersResponseBody(name='body'),
}

async function describeFabricOrganizationMembers(request: DescribeFabricOrganizationMembersRequest): DescribeFabricOrganizationMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationPeersRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricOrganizationPeersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      instanceType?: string(name='InstanceType'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      isAnchor?: boolean(name='IsAnchor'),
      organizationPeerName?: string(name='OrganizationPeerName'),
      port?: int32(name='Port'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationPeersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationPeersResponseBody(name='body'),
}

async function describeFabricOrganizationPeers(request: DescribeFabricOrganizationPeersRequest): DescribeFabricOrganizationPeersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationPeers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationSpecsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricOrganizationSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      enable?: boolean(name='Enable'),
      organizationSpecsName?: string(name='OrganizationSpecsName'),
      title?: string(name='Title'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationSpecsResponseBody(name='body'),
}

async function describeFabricOrganizationSpecs(request: DescribeFabricOrganizationSpecsRequest): DescribeFabricOrganizationSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricOrganizationUsersRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricOrganizationUsersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      attrs?: string(name='Attrs'),
      callerBid?: string(name='CallerBid'),
      callerUid?: long(name='CallerUid'),
      createTime?: string(name='CreateTime'),
      expireTime?: string(name='ExpireTime'),
      fullName?: string(name='FullName'),
      organizationId?: string(name='OrganizationId'),
      regionId?: string(name='RegionId'),
      username?: string(name='Username'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationUsersResponseBody(name='body'),
}

async function describeFabricOrganizationUsers(request: DescribeFabricOrganizationUsersRequest): DescribeFabricOrganizationUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationsRequest {
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeFabricOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      codeName?: string(name='CodeName'),
      consortiumCount?: int32(name='ConsortiumCount'),
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      organizationDescription?: string(name='OrganizationDescription'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      peerCount?: int32(name='PeerCount'),
      regionId?: string(name='RegionId'),
      requestId?: string(name='RequestId'),
      specName?: string(name='SpecName'),
      state?: string(name='State'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      userCount?: int32(name='UserCount'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationsResponseBody(name='body'),
}

async function describeFabricOrganizations(request: DescribeFabricOrganizationsRequest): DescribeFabricOrganizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizations', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricPeerLogsRequest {
  lines?: string(name='Lines', position='Query'),
  organizationId: string(name='OrganizationId', position='Query'),
  peerName: string(name='PeerName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricPeerLogsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricPeerLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricPeerLogsResponseBody(name='body'),
}

async function describeFabricPeerLogs(request: DescribeFabricPeerLogsRequest): DescribeFabricPeerLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricPeerLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeRegionsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRootDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeRootDomainResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeRootDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRootDomainResponseBody(name='body'),
}

async function describeRootDomain(request: DescribeRootDomainRequest): DescribeRootDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRootDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeTasksResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      action?: string(name='Action'),
      handled?: boolean(name='Handled'),
      operationType?: string(name='OperationType'),
      requestTime?: long(name='RequestTime'),
      responseTime?: string(name='ResponseTime'),
      result?: string(name='Result'),
      sender?: string(name='Sender'),
      target?: string(name='Target'),
      taskId?: int32(name='TaskId'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DownloadFabricOrganizationSDKRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  username: string(name='Username', position='Query'),
}

model DownloadFabricOrganizationSDKResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      content?: string(name='Content'),
      path?: string(name='Path'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DownloadFabricOrganizationSDKResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadFabricOrganizationSDKResponseBody(name='body'),
}

async function downloadFabricOrganizationSDK(request: DownloadFabricOrganizationSDKRequest): DownloadFabricOrganizationSDKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadFabricOrganizationSDK', 'POST', '/', 'json', true, 'form', request);
}

model FreezeAntChainAccountRequest {
  account: string(name='Account', position='Body'),
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model FreezeAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model FreezeAntChainAccountResponse = {
  headers: map[string]string(name='headers'),
  body: FreezeAntChainAccountResponseBody(name='body'),
}

async function freezeAntChainAccount(request: FreezeAntChainAccountRequest): FreezeAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FreezeAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model InstallFabricChaincodeRequest {
  chaincodeId: string(name='ChaincodeId', position='Body'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model InstallFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model InstallFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: InstallFabricChaincodeResponseBody(name='body'),
}

async function installFabricChaincode(request: InstallFabricChaincodeRequest): InstallFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model InstantiateFabricChaincodeRequest {
  chaincodeId: string(name='ChaincodeId', position='Body'),
  collectionConfig?: string(name='CollectionConfig', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', position='Body'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model InstantiateFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model InstantiateFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: InstantiateFabricChaincodeResponseBody(name='body'),
}

async function instantiateFabricChaincode(request: InstantiateFabricChaincodeRequest): InstantiateFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstantiateFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model JoinFabricChannelRequest {
  channelId: string(name='ChannelId', position='Query'),
  do: string(name='Do', position='Query'),
  location?: string(name='Location', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model JoinFabricChannelResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      acceptTime?: string(name='AcceptTime'),
      approveTime?: string(name='ApproveTime'),
      channelId?: string(name='ChannelId'),
      confirmTime?: string(name='ConfirmTime'),
      destroyTime?: string(name='DestroyTime'),
      inviteTime?: string(name='InviteTime'),
      organizationId?: string(name='OrganizationId'),
      state?: string(name='State'),
      withPeer?: boolean(name='WithPeer'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model JoinFabricChannelResponse = {
  headers: map[string]string(name='headers'),
  body: JoinFabricChannelResponseBody(name='body'),
}

async function joinFabricChannel(request: JoinFabricChannelRequest): JoinFabricChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinFabricChannel', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ResetAntChainCertificateRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model ResetAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetAntChainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAntChainCertificateResponseBody(name='body'),
}

async function resetAntChainCertificate(request: ResetAntChainCertificateRequest): ResetAntChainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAntChainCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ResetAntChainUserCertificateRequest {
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  username: string(name='Username', position='Body'),
}

model ResetAntChainUserCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetAntChainUserCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAntChainUserCertificateResponseBody(name='body'),
}

async function resetAntChainUserCertificate(request: ResetAntChainUserCertificateRequest): ResetAntChainUserCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAntChainUserCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ResetFabricOrganizationUserPasswordRequest {
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  password: string(name='Password', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  username: string(name='Username', position='Body'),
}

model ResetFabricOrganizationUserPasswordResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    fullname?: string(name='Fullname'),
    organizationId?: string(name='OrganizationId'),
    password?: string(name='Password'),
    username?: string(name='Username'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ResetFabricOrganizationUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetFabricOrganizationUserPasswordResponseBody(name='body'),
}

async function resetFabricOrganizationUserPassword(request: ResetFabricOrganizationUserPasswordRequest): ResetFabricOrganizationUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetFabricOrganizationUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model SynchronizeFabricChaincodeRequest {
  chaincodeId: string(name='ChaincodeId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model SynchronizeFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model SynchronizeFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: SynchronizeFabricChaincodeResponseBody(name='body'),
}

async function synchronizeFabricChaincode(request: SynchronizeFabricChaincodeRequest): SynchronizeFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SynchronizeFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnfreezeAntChainAccountRequest {
  account: string(name='Account', position='Body'),
  antChainId: string(name='AntChainId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UnfreezeAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UnfreezeAntChainAccountResponse = {
  headers: map[string]string(name='headers'),
  body: UnfreezeAntChainAccountResponseBody(name='body'),
}

async function unfreezeAntChainAccount(request: UnfreezeAntChainAccountRequest): UnfreezeAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnfreezeAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAntChainRequest {
  antChainId: string(name='AntChainId', position='Body'),
  antChainName: string(name='AntChainName', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateAntChainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainResponseBody(name='body'),
}

async function updateAntChain(request: UpdateAntChainRequest): UpdateAntChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChain', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainConsortiumRequest {
  consortiumDescription?: string(name='ConsortiumDescription', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  consortiumName: string(name='ConsortiumName', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainConsortiumResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainConsortiumResponseBody(name='body'),
}

async function updateAntChainConsortium(request: UpdateAntChainConsortiumRequest): UpdateAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainContractContentRequest {
  content?: string(name='Content', position='Body'),
  contentId: string(name='ContentId', position='Body'),
  contentName?: string(name='ContentName', position='Body'),
  parentContentId?: string(name='ParentContentId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainContractContentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainContractContentResponseBody(name='body'),
}

async function updateAntChainContractContent(request: UpdateAntChainContractContentRequest): UpdateAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainContractProjectRequest {
  projectDescription?: string(name='ProjectDescription', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  projectName?: string(name='ProjectName', position='Body'),
  projectVersion?: string(name='ProjectVersion', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainContractProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainContractProjectResponseBody(name='body'),
}

async function updateAntChainContractProject(request: UpdateAntChainContractProjectRequest): UpdateAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainMemberRequest {
  consortiumId: string(name='ConsortiumId', position='Body'),
  memberId: string(name='MemberId', position='Body'),
  memberName: string(name='MemberName', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateAntChainMemberResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainMemberResponseBody(name='body'),
}

async function updateAntChainMember(request: UpdateAntChainMemberRequest): UpdateAntChainMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainMember', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainQRCodeAuthorizationRequest {
  antChainId: string(name='AntChainId', position='Body'),
  authorizationType: string(name='AuthorizationType', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateAntChainQRCodeAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainQRCodeAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainQRCodeAuthorizationResponseBody(name='body'),
}

async function updateAntChainQRCodeAuthorization(request: UpdateAntChainQRCodeAuthorizationRequest): UpdateAntChainQRCodeAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainQRCodeAuthorization', 'POST', '/', 'json', true, 'form', request);
}

model UpgradeFabricChaincodeRequest {
  chaincodeId: string(name='ChaincodeId', position='Body'),
  collectionConfig?: string(name='CollectionConfig', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', position='Body'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpgradeFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model UpgradeFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeFabricChaincodeResponseBody(name='body'),
}

async function upgradeFabricChaincode(request: UpgradeFabricChaincodeRequest): UpgradeFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

