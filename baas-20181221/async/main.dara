/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Baas';
  @version = '2018-12-21';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'baas.aliyuncs.com',
    'cn-beijing' = 'baas.aliyuncs.com',
    'cn-zhangjiakou' = 'baas.aliyuncs.com',
    'cn-huhehaote' = 'baas.aliyuncs.com',
    'cn-shanghai' = 'baas.aliyuncs.com',
    'cn-shenzhen' = 'baas.aliyuncs.com',
    'cn-hongkong' = 'baas.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'baas.ap-southeast-1.aliyuncs.com',
    'ap-northeast-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'us-west-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'us-east-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'eu-central-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'baas.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ChaincodePackage {
  chaincodePackageId?: string(name='ChaincodePackageId', example='cmcc-1.5:227c3cd472a8a2fcaa1c63f15812a1894348a985dc723006dd47d9f2848d10ed'),
  checksum?: string(name='Checksum', example='15bab12c29edbc095c33545b9867aec9be469c74a6dd5783df6ee74a24334c77'),
  deleteTime?: string(name='DeleteTime', example='1533025590'),
  deleted?: boolean(name='Deleted', example='false'),
  installTime?: string(name='InstallTime', example='1533025590'),
  label?: string(name='Label', example='label'),
  md5sum?: string(name='Md5sum', example='N02eVKuRJDA2ODtieMUxVw=='),
  message?: string(name='Message', example='ok'),
  organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
  ossURL?: string(name='OssURL', example='hi003/7efbe860-1a40-42c9-9e6b-0bc08d7ee3a4/cmcc.tar.gz'),
  providerBid?: string(name='ProviderBid', example='26842'),
  providerUid?: string(name='ProviderUid', example='1313158505072210'),
  state?: string(name='State', example='Running'),
  type?: int32(name='Type', example='0'),
  typeName?: string(name='TypeName', example='golang'),
  uploadTime?: string(name='UploadTime', example='1533025590'),
}

model ChaincodeVO {
  chaincodeDefinitionId?: string(name='ChaincodeDefinitionId', example='a5f04baed775b016e8dc386783f40a2c8b13823cac22bc5fd11846cca4a13a9a'),
  chaincodeId?: string(name='ChaincodeId', example='code-sacc-jbkuldd3i7ad'),
  chaincodePackageId?: string(name='ChaincodePackageId', example='sacc_v1.0:698d4e73c5f1d0239fbf0313ac79ddfaf44d5a803ecb02a4d1983cca4a706860'),
  channelId?: string(name='ChannelId', example='chan-test-b0wx5suhgyb9p'),
  channelName?: string(name='ChannelName', example='f100'),
  consortiumId?: string(name='ConsortiumId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
  createTime?: string(name='CreateTime', example='1533025590'),
  deployTime?: string(name='DeployTime', example='1533025590'),
  endorsePolicy?: string(name='EndorsePolicy', example='OR ("perf9141MSP.member")'),
  initRequired?: boolean(name='InitRequired', example='false'),
  input?: string(name='Input', example='args:"key" args:"val"'),
  install?: boolean(name='Install', example='true'),
  management?: boolean(name='Management', example='false'),
  message?: string(name='Message', example='ok'),
  name?: string(name='Name', example='sacc'),
  path?: string(name='Path', example='chaincode/sacc'),
  providerId?: string(name='ProviderId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
  providerName?: string(name='ProviderName', example='perf9141'),
  state?: string(name='State', example='Pending'),
  type?: int32(name='Type', example='0'),
  version?: string(name='Version', example='1.1'),
}

model AcceptFabricInvitationRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  code: string(name='Code', example='secrettoken', position='Body'),
  isAccepted?: boolean(name='IsAccepted', example='true', position='Body'),
}

model AcceptFabricInvitationResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='52CC8D5B-79A8-4769-BC7B-8940556ADA49'),
  success?: boolean(name='Success', example='true'),
}

model AcceptFabricInvitationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptFabricInvitationResponseBody(name='body'),
}

async function acceptFabricInvitation(request: AcceptFabricInvitationRequest): AcceptFabricInvitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptFabricInvitation', 'POST', '/', 'json', true, 'form', request);
}

model ApplyAntChainCertificateRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  uploadReq: string(name='UploadReq', example='LS0tLS1...', position='Body'),
}

model ApplyAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId', example='D3FB9E67-0E31-4B8B-8895-3660CCE8CA62'),
  result?: string(name='Result', example='success'),
}

model ApplyAntChainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAntChainCertificateResponseBody(name='body'),
}

async function applyAntChainCertificate(request: ApplyAntChainCertificateRequest): ApplyAntChainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAntChainCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ApplyAntChainCertificateWithKeyAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='1q8B5R9p', position='Body'),
  commonName: string(name='CommonName', example='commonName', position='Body'),
  consortiumId: string(name='ConsortiumId', example='DV80nJXq', position='Body'),
  countryName: string(name='CountryName', example='countryName', position='Body'),
  localityName: string(name='LocalityName', example='localityName', position='Body'),
  organizationName: string(name='OrganizationName', example='organizationName', position='Body'),
  organizationUnitName: string(name='OrganizationUnitName', example='organizationUnitName', position='Body'),
  password: string(name='Password', example='password', position='Body'),
  stateOrProvinceName: string(name='StateOrProvinceName', example='stateOrProvinceName', position='Body'),
}

model ApplyAntChainCertificateWithKeyAutoCreationResponseBody = {
  requestId?: string(name='RequestId', example='3E1894AF-FEE7-4C6C-8C2A-2B3EE0105B07'),
  result?: {
    downloadPath?: {
      caCrtUrl?: string(name='CaCrtUrl', example='http://***ca.crt'),
      clientCrtUrl?: string(name='ClientCrtUrl', example='http://***client.crt'),
      sdkUrl?: string(name='SdkUrl', example='http://***'),
      trustCaUrl?: string(name='TrustCaUrl', example='http://***trustCa'),
    }(name='DownloadPath'),
    privateKey?: string(name='PrivateKey', example='-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMII***A=\\n-----END ENCRYPTED PRIVATE KEY-----\\n'),
  }(name='Result'),
}

model ApplyAntChainCertificateWithKeyAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAntChainCertificateWithKeyAutoCreationResponseBody(name='body'),
}

async function applyAntChainCertificateWithKeyAutoCreation(request: ApplyAntChainCertificateWithKeyAutoCreationRequest): ApplyAntChainCertificateWithKeyAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAntChainCertificateWithKeyAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model ApproveFabricChaincodeDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='code-sacc-jbkuldd3i7ad', position='Body'),
  chaincodePackageId?: string(name='ChaincodePackageId', example='sacc_v1.0:698d4e73c5f1d0239fbf0313ac79ddfaf44d5a803ecb02a4d1983cca4a706860', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
}

model ApproveFabricChaincodeDefinitionResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: ChaincodeVO(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ApproveFabricChaincodeDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveFabricChaincodeDefinitionResponseBody(name='body'),
}

async function approveFabricChaincodeDefinition(request: ApproveFabricChaincodeDefinitionRequest): ApproveFabricChaincodeDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveFabricChaincodeDefinition', 'POST', '/', 'json', true, 'form', request);
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  phoneList: map[string]any(name='PhoneList', example='["1380013****", "1380013****"]', shrink='json', position='Body'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody = {
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: string(name='Result', example='success'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody(name='body'),
}

async function batchAddAntChainMiniAppQRCodeAuthorizedUsers(request: BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest): BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddAntChainMiniAppQRCodeAuthorizedUsers', 'POST', '/', 'json', true, 'form', request);
}

model CheckFabricConsortiumDomainRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domainCode: string(name='DomainCode', example='bank', position='Body'),
}

model CheckFabricConsortiumDomainResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='8F80A214-89FC-4348-9B3F-15446B3DC1FA'),
  result?: {
    domain?: string(name='Domain', example='bank'),
    prompt?: string(name='Prompt', example='OK'),
    valid?: boolean(name='Valid', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CheckFabricConsortiumDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckFabricConsortiumDomainResponseBody(name='body'),
}

async function checkFabricConsortiumDomain(request: CheckFabricConsortiumDomainRequest): CheckFabricConsortiumDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFabricConsortiumDomain', 'POST', '/', 'json', true, 'form', request);
}

model CheckFabricOrganizationDomainRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain?: string(name='Domain', example='bank', position='Body'),
  domainCode?: string(name='DomainCode', example='bank', position='Body'),
}

model CheckFabricOrganizationDomainResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='C30A14C7-800E-468B-9EB2-C704DA49295E'),
  result?: {
    domain?: string(name='Domain', example='bank'),
    prompt?: string(name='Prompt', example='OK'),
    valid?: boolean(name='Valid', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CheckFabricOrganizationDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckFabricOrganizationDomainResponseBody(name='body'),
}

async function checkFabricOrganizationDomain(request: CheckFabricOrganizationDomainRequest): CheckFabricOrganizationDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFabricOrganizationDomain', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmFabricConsortiumMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Query'),
  organization: [ 
    {
      organizationId: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d046jtl'),
    }
  ](name='Organization', position='Query'),
}

model ConfirmFabricConsortiumMemberResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='50B3ACF3-CE12-433C-A834-9E8C657A4934'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model ConfirmFabricConsortiumMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmFabricConsortiumMemberResponseBody(name='body'),
}

async function confirmFabricConsortiumMember(request: ConfirmFabricConsortiumMemberRequest): ConfirmFabricConsortiumMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmFabricConsortiumMember', 'POST', '/', 'json', false, 'json', request);
}

model CopyAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectDescription?: string(name='ProjectDescription', example='copy project description', position='Body'),
  projectId: string(name='ProjectId', example='2L9VK68g', position='Body'),
  projectName: string(name='ProjectName', example='copyproject', position='Body'),
  projectVersion: string(name='ProjectVersion', example='v1.0.1', position='Body'),
}

model CopyAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId', example='45D67F6F-C723-4AD8-8462-F94EE5FF22E6'),
  result?: {
    consortiumId?: string(name='ConsortiumId', example='DV80nJXq'),
    createTime?: long(name='CreateTime', example='1563953475248'),
    projectDescription?: string(name='ProjectDescription', example='copy project description'),
    projectId?: string(name='ProjectId', example='R6XMEdXe'),
    projectName?: string(name='ProjectName', example='copyproject'),
    projectVersion?: string(name='ProjectVersion', example='v1.0.1'),
    updateTime?: long(name='UpdateTime', example='1563953475248'),
  }(name='Result'),
}

model CopyAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyAntChainContractProjectResponseBody(name='body'),
}

async function copyAntChainContractProject(request: CopyAntChainContractProjectRequest): CopyAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account: string(name='Account', example='test', position='Body'),
  accountPubKey: string(name='AccountPubKey', example='AEDC32...', position='Body'),
  accountRecoverPubKey: string(name='AccountRecoverPubKey', example='AEDC32...', position='Body'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
}

model CreateAntChainAccountResponseBody = {
  requestId?: string(name='RequestId', example='0301F6CB-4FA6-4D03-8668-963623B63D0F'),
  result?: {
    account?: string(name='Account', example='test'),
    antChainId?: string(name='AntChainId', example='bDXK6boZ'),
  }(name='Result'),
}

model CreateAntChainAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainAccountResponseBody(name='body'),
}

async function createAntChainAccount(request: CreateAntChainAccountRequest): CreateAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainAccountWithKeyPairAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  account: string(name='Account', example='accountname', position='Body'),
  antChainId: string(name='AntChainId', example='1q8B5R9p', position='Body'),
  password: string(name='Password', example='password', position='Body'),
  recoverPassword: string(name='RecoverPassword', example='************', position='Body'),
}

model CreateAntChainAccountWithKeyPairAutoCreationResponseBody = {
  requestId?: string(name='RequestId', example='5F058BB4-3043-4638-86D4-EED84AD1AE54'),
  result?: {
    account?: string(name='Account', example='accountname'),
    accountPrivateKey?: string(name='AccountPrivateKey', example='-----BEGIN ENCRYPTED PRIVATE KEY-----\\nM***8=\\n-----END ENCRYPTED PRIVATE KEY-----\\n'),
    accountPublicKey?: string(name='AccountPublicKey', example='b***7'),
    accountRecoverPrivateKey?: string(name='AccountRecoverPrivateKey', example='-----BEGIN ENCRYPTED PRIVATE KEY-----\\nM***Io=\\n-----END ENCRYPTED PRIVATE KEY-----\\n'),
    accountRecoverPublicKey?: string(name='AccountRecoverPublicKey', example='d***b'),
    antChainId?: string(name='AntChainId', example='1q8B5R9p'),
  }(name='Result'),
}

model CreateAntChainAccountWithKeyPairAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainAccountWithKeyPairAutoCreationResponseBody(name='body'),
}

async function createAntChainAccountWithKeyPairAutoCreation(request: CreateAntChainAccountWithKeyPairAutoCreationRequest): CreateAntChainAccountWithKeyPairAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainAccountWithKeyPairAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainConsortiumRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumDescription?: string(name='ConsortiumDescription', position='Body'),
  consortiumName: string(name='ConsortiumName', position='Body'),
}

model CreateAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId', example='87FAFC6B-E7AE-4626-B7F7-AE0B88E612D5'),
  result?: {
    consortiumId?: string(name='ConsortiumId', example='A28nO1ow'),
  }(name='Result'),
}

model CreateAntChainConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainConsortiumResponseBody(name='body'),
}

async function createAntChainConsortium(request: CreateAntChainConsortiumRequest): CreateAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainContractContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  content?: string(name='Content', example='""', position='Body'),
  contentName: string(name='ContentName', example='newFile', position='Body'),
  isDirectory: boolean(name='IsDirectory', example='false', position='Body'),
  parentContentId?: string(name='ParentContentId', example='R38DYDop', position='Body'),
  projectId: string(name='ProjectId', example='bDXK1b8Z', position='Body'),
}

model CreateAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId', example='C407F102-062A-44B3-BBDC-E3B2718F633D'),
  result?: {
    content?: string(name='Content', example='""'),
    contentId?: string(name='ContentId', example='R6XMn59e'),
    contentName?: string(name='ContentName', example='newFile'),
    createTime?: string(name='CreateTime', example='1564024964404'),
    isDirectory?: boolean(name='IsDirectory', example='false'),
    parentContentId?: string(name='ParentContentId', example='R38DYDop'),
    projectId?: string(name='ProjectId', example='bDXK1b8Z'),
    updateTime?: string(name='UpdateTime', example='1564024964404'),
  }(name='Result'),
}

model CreateAntChainContractContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainContractContentResponseBody(name='body'),
}

async function createAntChainContractContent(request: CreateAntChainContractContentRequest): CreateAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='DV80nJXq', position='Body'),
  projectDescription?: string(name='ProjectDescription', example='project description', position='Body'),
  projectName: string(name='ProjectName', example='projectname', position='Body'),
  projectVersion: string(name='ProjectVersion', example='v1.0.0', position='Body'),
}

model CreateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId', example='4261A4C3-B8B5-4555-AEBC-944C3EAB23DB'),
  result?: {
    consortiumId?: string(name='ConsortiumId', example='DV80nJXq'),
    createTime?: long(name='CreateTime', example='1563951889044'),
    projectDescription?: string(name='ProjectDescription', example='project description'),
    projectId?: string(name='ProjectId', example='R38DAbop'),
    projectName?: string(name='ProjectName', example='projectname'),
    projectVersion?: string(name='ProjectVersion', example='v1.0.0'),
    updateTime?: long(name='UpdateTime', example='1563951889140'),
  }(name='Result'),
}

model CreateAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainContractProjectResponseBody(name='body'),
}

async function createAntChainContractProject(request: CreateAntChainContractProjectRequest): CreateAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainKmsAccountNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', example='accountname', position='Body'),
  antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
}

model CreateAntChainKmsAccountNewResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='063C2175-C755-5C85-9C42-5EB432B67D9B'),
  result?: {
    myKmsKeyId?: string(name='MyKmsKeyId', example='1234565181228596659400e4-3bd7-4a83-b9af-d12654bb5779'),
    pubKey?: string(name='PubKey', example='d408f5c5c3c118b23646f4059c81fbe5a1b067a12f96f4a7a5e09eae10c81288cdf64aa887af89738b9ec5d16bc124594bf820a4afa24fe0de9d8dcfd1d99500'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model CreateAntChainKmsAccountNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainKmsAccountNewResponseBody(name='body'),
}

async function createAntChainKmsAccountNew(request: CreateAntChainKmsAccountNewRequest): CreateAntChainKmsAccountNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainKmsAccountNew', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricChaincodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', example='chan-first-channel-1w55v3u39x2xz', position='Body'),
  consortiumId: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d046jtl', position='Body'),
  ossBucket: string(name='OssBucket', example='https://chaincode.oss-cn-beijing.aliyuncs.com', position='Body'),
  ossUrl: string(name='OssUrl', example='aaaaaa1/a0cf8729-7d47-44c9-9ed5-6d2fdfc8dc2c/sacc.cc', position='Body'),
}

model CreateFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='CD264CC8-B892-4CDC-BD31-7D179EE6E396'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jmo0np'),
    chaincodeName?: string(name='ChaincodeName', example='mychaincode'),
    chaincodeVersion?: string(name='ChaincodeVersion', example='1.0'),
    channelName?: string(name='ChannelName', example='first-channel'),
    consortiumId?: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd'),
    createTime?: string(name='CreateTime', example='1544766801000'),
    deployTime?: string(name='DeployTime', example='1544766801000'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")'),
    input?: string(name='Input', example='string'),
    install?: boolean(name='Install', example='true'),
    message?: string(name='Message', example='string'),
    path?: string(name='Path', example='go-sdk-demo/chaincode/src'),
    providerId?: string(name='ProviderId', example='peers-aaaaaa1-1oxw31d046jtl'),
    providerName?: string(name='ProviderName', example='peers-aaaaaa1-1oxw31d046jtl'),
    state?: string(name='State', example='Instantiatable'),
    type?: int32(name='Type', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateFabricChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricChaincodeResponseBody(name='body'),
}

async function createFabricChaincode(request: CreateFabricChaincodeRequest): CreateFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricChaincodePackageRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
  ossUrl: string(name='OssUrl', example='hi003/7efbe860-1a40-42c9-9e6b-0bc08d7ee3a4/cmcc.tar.gz', position='Body'),
}

model CreateFabricChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: ChaincodePackage(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateFabricChaincodePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricChaincodePackageResponseBody(name='body'),
}

async function createFabricChaincodePackage(request: CreateFabricChaincodePackageRequest): CreateFabricChaincodePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricChaincodePackage', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricChannelRequest {
  regionId?: string(name='RegionId', position='Host'),
  batchTimeout?: int32(name='BatchTimeout', example='2', position='Body'),
  channelName: string(name='ChannelName', example='channelx', position='Query'),
  consortiumId: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Query'),
  maxMessageCount?: int32(name='MaxMessageCount', example='50', position='Body'),
  organization: [ 
    {
      id?: string(name='Id', example='peers-aaaaaa1-1oxw31d046jtl'),
    }
  ](name='Organization', position='Query'),
  preferredMaxBytes?: int32(name='PreferredMaxBytes', example='12', position='Body'),
}

model CreateFabricChannelResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    batchTimeout?: int32(name='BatchTimeout', example='2'),
    blockCount?: int32(name='BlockCount', example='2'),
    chaincodeCount?: int32(name='ChaincodeCount', example='2'),
    channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
    channelName?: string(name='ChannelName', example='channelx'),
    consortiumId?: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd'),
    consortiumName?: string(name='ConsortiumName', example='aaaaaa'),
    createTime?: string(name='CreateTime', example='1544768139624'),
    maxMessageCount?: int32(name='MaxMessageCount', example='50'),
    memberCount?: int32(name='MemberCount', example='1'),
    ownerBid?: string(name='OwnerBid', example='26842'),
    ownerName?: string(name='OwnerName', example='uid-'),
    ownerUid?: long(name='OwnerUid', example='1234'),
    preferredMaxBytes?: int32(name='PreferredMaxBytes', example='12'),
    requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
    state?: string(name='State', example='Running'),
    supportConfig?: boolean(name='SupportConfig', example='true'),
    updateTime?: string(name='UpdateTime', example='1544768139624'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateFabricChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricChannelResponseBody(name='body'),
}

async function createFabricChannel(request: CreateFabricChannelRequest): CreateFabricChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricChannel', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricChannelMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo', position='Query'),
  organization: [ 
    {
      organizationId: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d046jtl'),
    }
  ](name='Organization', position='Query'),
}

model CreateFabricChannelMemberResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model CreateFabricChannelMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricChannelMemberResponseBody(name='body'),
}

async function createFabricChannelMember(request: CreateFabricChannelMemberRequest): CreateFabricChannelMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricChannelMember', 'POST', '/', 'json', false, 'json', request);
}

model CreateFabricConsortiumRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelPolicy: string(name='ChannelPolicy', example='all', position='Body'),
  consortiumDescription?: string(name='ConsortiumDescription', example='some', position='Body'),
  consortiumName: string(name='ConsortiumName', example='aaaaa', position='Body'),
  domain: string(name='Domain', example='helloworld', position='Body'),
  location: string(name='Location', example='cn-hangzhou', position='Body'),
  ordererType: string(name='OrdererType', example='etcdraft', position='Body'),
  orderersCount?: int32(name='OrderersCount', example='2', position='Body'),
  organization?: [ 
    {
      organizationId?: string(name='OrganizationId', example='peers-yidio-1tuigx42b1goc'),
    }
  ](name='Organization', position='Body'),
  paymentDuration: int32(name='PaymentDuration', example='2', position='Body'),
  paymentDurationUnit: string(name='PaymentDurationUnit', example='month', position='Body'),
  peersCount?: int32(name='PeersCount', example='2', position='Body'),
  specName: string(name='SpecName', example='basic', position='Body'),
  zoneId?: string(name='ZoneId', example='random', position='Body'),
}

model CreateFabricConsortiumResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    channelCount?: int32(name='ChannelCount', example='0'),
    channelPolicy?: string(name='ChannelPolicy', example='Any'),
    clusterState?: string(name='ClusterState', example='Pending'),
    codeName?: string(name='CodeName', example='lianmenyumingyi'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    consortiumName?: string(name='ConsortiumName', example='myconsortium'),
    createTime?: string(name='CreateTime', example='1544086901984'),
    description?: string(name='Description', example='string'),
    domain?: string(name='Domain', example='hello'),
    memberCount?: int32(name='MemberCount', example='2'),
    ordererCount?: int32(name='OrdererCount', example='1'),
    ordererType?: string(name='OrdererType', example='Kafka'),
    ownerBid?: string(name='OwnerBid', example='26842'),
    ownerUid?: long(name='OwnerUid', example='1019556'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    serviceState?: string(name='ServiceState', example='Pending'),
    specName?: string(name='SpecName', example='basic'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateFabricConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricConsortiumResponseBody(name='body'),
}

async function createFabricConsortium(request: CreateFabricConsortiumRequest): CreateFabricConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricConsortium', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricConsortiumMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  code: string(name='Code', example='200', position='Query'),
  consortiumId: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Query'),
  organization: [ 
    {
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d046jtl'),
    }
  ](name='Organization', position='Query'),
}

model CreateFabricConsortiumMemberResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model CreateFabricConsortiumMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricConsortiumMemberResponseBody(name='body'),
}

async function createFabricConsortiumMember(request: CreateFabricConsortiumMemberRequest): CreateFabricConsortiumMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricConsortiumMember', 'POST', '/', 'json', false, 'json', request);
}

model CreateFabricOrganizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='description', position='Query'),
  domain: string(name='Domain', example='domain', position='Query'),
  location: string(name='Location', example='cn-hangzhou', position='Query'),
  organizationName: string(name='OrganizationName', example='name', position='Query'),
  paymentDuration: int32(name='PaymentDuration', example='12', position='Body'),
  paymentDurationUnit: string(name='PaymentDurationUnit', example='2', position='Body'),
  peersCount?: int32(name='PeersCount', example='2', position='Body'),
  specName: string(name='SpecName', example='basic', position='Query'),
}

model CreateFabricOrganizationResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    clusterState?: string(name='ClusterState', example='Pending'),
    codeName?: string(name='CodeName', example='name'),
    consortiumCount?: int32(name='ConsortiumCount', example='2'),
    createTime?: string(name='CreateTime', example='1544086901984'),
    domain?: string(name='Domain', example='domain'),
    organizationDescription?: string(name='OrganizationDescription', example='desc'),
    organizationId?: string(name='OrganizationId', example='zuzhiyumingyi-hc5d1bwlulg7'),
    organizationName?: string(name='OrganizationName', example='zuzhiyumingyi'),
    ownerBid?: string(name='OwnerBid', example='26842'),
    ownerName?: string(name='OwnerName', example='name'),
    ownerUid?: long(name='OwnerUid', example='1019556'),
    peerCount?: int32(name='PeerCount', example='3'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
    serviceState?: string(name='ServiceState', example='Pending'),
    specName?: string(name='SpecName', example='baisc'),
    userCount?: int32(name='UserCount', example='2'),
    zoneId?: string(name='ZoneId', example='zone'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateFabricOrganizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricOrganizationResponseBody(name='body'),
}

async function createFabricOrganization(request: CreateFabricOrganizationRequest): CreateFabricOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricOrganization', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricOrganizationUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  attrs?: string(name='Attrs', example='foo=foo1,bar=bar1', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-yidio-1tuigx42b****', position='Body'),
  password: string(name='Password', example='password', position='Body'),
  username: string(name='Username', example='username', position='Body'),
}

model CreateFabricOrganizationUserResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    createTime?: string(name='CreateTime', example='1544086901984'),
    expireTime?: string(name='ExpireTime', example='1544411108000'),
    fullname?: string(name='Fullname', example='fullname'),
    organizationId?: string(name='OrganizationId', example='peers-yidio-1tuigx42b****'),
    password?: string(name='Password', example='password'),
    username?: string(name='Username', example='username'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateFabricOrganizationUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricOrganizationUserResponseBody(name='body'),
}

async function createFabricOrganizationUser(request: CreateFabricOrganizationUserRequest): CreateFabricOrganizationUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricOrganizationUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainConsortiumRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='q0oWq92P', position='Body'),
}

model DeleteAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId', example='F3685787-9F2F-4D60-ADD6-07A5179552CA'),
  result?: string(name='Result', example='success'),
}

model DeleteAntChainConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAntChainConsortiumResponseBody(name='body'),
}

async function deleteAntChainConsortium(request: DeleteAntChainConsortiumRequest): DeleteAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainContractContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  contentId: string(name='ContentId', example='GKX7KZX0', position='Body'),
}

model DeleteAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId', example='7E54F588-39DE-446F-9A16-B9BB0B05DF44'),
  result?: string(name='Result', example='success'),
}

model DeleteAntChainContractContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAntChainContractContentResponseBody(name='body'),
}

async function deleteAntChainContractContent(request: DeleteAntChainContractContentRequest): DeleteAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', example='AVXeKq8R', position='Body'),
}

model DeleteAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId', example='4FAC5F05-FDF0-4599-9522-0120525F0145'),
  result?: string(name='Result', example='success'),
}

model DeleteAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAntChainContractProjectResponseBody(name='body'),
}

async function deleteAntChainContractProject(request: DeleteAntChainContractProjectRequest): DeleteAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  phone: string(name='Phone', example='1380013****', position='Body'),
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody = {
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: string(name='Result', example='success'),
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody(name='body'),
}

async function deleteAntChainMiniAppQRCodeAuthorizedUser(request: DeleteAntChainMiniAppQRCodeAuthorizedUserRequest): DeleteAntChainMiniAppQRCodeAuthorizedUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainMiniAppQRCodeAuthorizedUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFabricChaincodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='code-sacc-1pr09q7jm****', position='Body'),
}

model DeleteFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFabricChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFabricChaincodeResponseBody(name='body'),
}

async function deleteFabricChaincode(request: DeleteFabricChaincodeRequest): DeleteFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainAccountsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize: int32(name='PageSize', example='10', position='Body'),
}

model DescribeAntChainAccountsResponseBody = {
  requestId?: string(name='RequestId', example='1692940F-87C5-468F-8188-6C95FC05BBA5'),
  result?: {
    accounts?: [ 
      {
        account?: string(name='Account'),
        accountPublicKey?: string(name='AccountPublicKey', example='de44334f1094cbd37e952ef691a837f36eab2e9afdf6bed9bf523c2dde40ff7b1ff526ec11b510d320f536685f75dd90f67fda8d41a69738a76a77c27b1373fb'),
        accountRecoveryKey?: string(name='AccountRecoveryKey', example='ee54a9c4511345f2de05889540eedb8dfed7b57ab0647c5894e4333596bc2ecef07a0469331d016ad9978b39367a0a5c217ef92ffffcbd6716db6667353891a9'),
        accountStatus?: string(name='AccountStatus', example='NORMAL'),
        antChainId?: string(name='AntChainId', example='pYogqb9v'),
      }
    ](name='Accounts'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='1'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainAccountsResponseBody(name='body'),
}

async function describeAntChainAccounts(request: DescribeAntChainAccountsRequest): DescribeAntChainAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainAccounts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainAccountsV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=0, maximum=2147483647, position='Body'),
}

model DescribeAntChainAccountsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    accounts?: [ 
      {
        account?: string(name='Account', example='test'),
        accountPublicKey?: string(name='AccountPublicKey', example='2aa43bae103b6840ce8efdfe6f3fe5e52f8d1db0f44ff762df87ba17eb209979a0e22c934b2728c6c1bab864a6da52de60c5da89793bd839650a1a153e876e32'),
        accountRecoveryKey?: string(name='AccountRecoveryKey', example='5a36312d78681794258bb33372586c676adf150ad69e67dbfcaae61bba3607705950bc9efe1bf4a17ac24b05b1615a410e48d2a005dca251c6173495bb47ae29'),
        accountStatus?: string(name='AccountStatus', example='NORMAL'),
        antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163'),
      }
    ](name='Accounts'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='100'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainAccountsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainAccountsV2ResponseBody(name='body'),
}

async function describeAntChainAccountsV2(request: DescribeAntChainAccountsV2Request): DescribeAntChainAccountsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainAccountsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainBlockRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
  height: long(name='Height', example='1234', position='Body'),
}

model DescribeAntChainBlockResponseBody = {
  requestId?: string(name='RequestId', example='4DDA2E72-778A-4D79-BE70-448A26A57227'),
  result?: {
    antChainId?: string(name='AntChainId', example='pYogqb9v'),
    blockHash?: string(name='BlockHash', example='aeec5963f8deeeae820aaf302f0c925db9fa8d07b9898dac782335f817554e47'),
    createTime?: long(name='CreateTime', example='1562851727742'),
    height?: int32(name='Height', example='1234'),
    previousHash?: string(name='PreviousHash', example='e11767c7b9d92563663a76f10c69e8354788001e2c9e6bd9267239a81d3bb523'),
    rootTxHash?: string(name='RootTxHash', example='0000000000000000000000000000000000000000000000000000000000000000'),
    transSummaryList?: string(name='TransSummaryList', example='[]'),
    transactionSize?: int32(name='TransactionSize', example='0'),
    version?: long(name='Version', example='2'),
  }(name='Result'),
}

model DescribeAntChainBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainBlockResponseBody(name='body'),
}

async function describeAntChainBlock(request: DescribeAntChainBlockRequest): DescribeAntChainBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainBlock', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainBlockV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  height: long(name='Height', example='100', minimum=0, maximum=9223372036854775807, position='Body'),
}

model DescribeAntChainBlockV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163'),
    blockHash?: string(name='BlockHash', example='5abf96debc87f1b64dcbaf4fa57fd46f2a06acdb5de0ba91ef9718d81aebafc7'),
    createTime?: long(name='CreateTime', example='1609223363570'),
    height?: int32(name='Height', example='254761'),
    previousHash?: string(name='PreviousHash', example='2444ef0617e0c6845549dead70f118c5a58f03c04575ecb79e283ab5c34b491d'),
    rootTxHash?: string(name='RootTxHash', example='0000000000000000000000000000000000000000000000000000000000000000'),
    transSummaryList?: [ 
      {
        alias?: string(name='Alias', example='8bd720bde18c4b37b0f4a1c7834db163'),
        blockHash?: string(name='BlockHash', example='5abf96debc87f1b64dcbaf4fa57fd46f2a06acdb5de0ba91ef9718d81aebafc7'),
        category?: int32(name='Category', example='0'),
        createTime?: long(name='CreateTime', example='1609223363570'),
        from?: string(name='From', example='e7d3e769f3f593dadcb8634cc5b09fc90dd3a61c4a06a79cb0923662fe6fae6b'),
        gasUsed?: long(name='GasUsed', example='4000000'),
        hash?: string(name='Hash', example='076bba1b726b3bcb958cba6fffc03eaa5cbed59320271dcbc0e05648a18a94f2'),
        height?: long(name='Height', example='254761'),
        referenceCount?: int32(name='ReferenceCount', example='0'),
        to?: string(name='To', example='e93372533f323b2f12783aa3a586135cf421486439c2cdcde47411b78f9839ec'),
        transTypeV10?: string(name='TransTypeV10', example='CALL_CONTRACT'),
        transTypeV6?: string(name='TransTypeV6', example='""'),
      }
    ](name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize', example='1'),
    version?: long(name='Version', example='1'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainBlockV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainBlockV2ResponseBody(name='body'),
}

async function describeAntChainBlockV2(request: DescribeAntChainBlockV2Request): DescribeAntChainBlockV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainBlockV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainCertificateApplicationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='1q8B5R9p', position='Body'),
  pageNumber: int32(name='PageNumber', example='1', position='Body'),
  pageSize: int32(name='PageSize', example='20', position='Body'),
  status: string(name='Status', example='1', position='Body'),
}

model DescribeAntChainCertificateApplicationsResponseBody = {
  requestId?: string(name='RequestId', example='B232A84E-7944-4EB0-83D0-9D409E12E0A8'),
  result?: {
    certificateApplications?: [ 
      {
        antChainId?: string(name='AntChainId', example='1q8B5R9p'),
        bid?: string(name='Bid', description='Bid', example='26842'),
        createtime?: long(name='Createtime', example='1563949275000'),
        status?: string(name='Status', example='1'),
        updatetime?: long(name='Updatetime', example='1563949275000'),
        username?: string(name='Username', example='uid-128712635330****'),
      }
    ](name='CertificateApplications'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='20'),
      totalCount?: int32(name='TotalCount', example='1'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainCertificateApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainCertificateApplicationsResponseBody(name='body'),
}

async function describeAntChainCertificateApplications(request: DescribeAntChainCertificateApplicationsRequest): DescribeAntChainCertificateApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainCertificateApplications', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainCertificateApplicationsV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  pageNumber: int32(name='PageNumber', example='10', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', example='1', minimum=0, maximum=9223372036854775807, position='Body'),
  status: string(name='Status', example='1', position='Body'),
}

model DescribeAntChainCertificateApplicationsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    certificateApplications?: [ 
      {
        antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163'),
        bid?: string(name='Bid', example='26842'),
        createtime?: long(name='Createtime', example='1609848404000'),
        status?: string(name='Status', example='1'),
        updatetime?: long(name='Updatetime', example='1609848404000'),
        username?: string(name='Username', example='uid-103477475017****'),
      }
    ](name='CertificateApplications'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='100'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainCertificateApplicationsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainCertificateApplicationsV2ResponseBody(name='body'),
}

async function describeAntChainCertificateApplicationsV2(request: DescribeAntChainCertificateApplicationsV2Request): DescribeAntChainCertificateApplicationsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainCertificateApplicationsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainConsortiumsRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize: int32(name='PageSize', example='10', position='Body'),
}

model DescribeAntChainConsortiumsResponseBody = {
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    antConsortiums?: [ 
      {
        chainNum?: long(name='ChainNum', example='1'),
        consortiumDescription?: string(name='ConsortiumDescription'),
        consortiumId?: string(name='ConsortiumId', example='DV80nJXq'),
        consortiumName?: string(name='ConsortiumName'),
        createTime?: long(name='CreateTime', example='1562845453000'),
        memberNum?: long(name='MemberNum', example='2'),
        role?: string(name='Role', example='SuperAdmin'),
        status?: string(name='Status', example='Active'),
      }
    ](name='AntConsortiums'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='1'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainConsortiumsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainConsortiumsResponseBody(name='body'),
}

async function describeAntChainConsortiums(request: DescribeAntChainConsortiumsRequest): DescribeAntChainConsortiumsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainConsortiums', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainConsortiumsV2Request {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', example='10', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', example='1', minimum=0, maximum=2147483647, position='Body'),
}

model DescribeAntChainConsortiumsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    antConsortiums?: [ 
      {
        chainNum?: long(name='ChainNum', example='2'),
        consortiumDescription?: string(name='ConsortiumDescription', example='test'),
        consortiumId?: string(name='ConsortiumId', example='M8GaMEyX'),
        consortiumName?: string(name='ConsortiumName'),
        createTime?: long(name='CreateTime', example='1609745002000'),
        isEmptyConsortium?: boolean(name='IsEmptyConsortium', example='false'),
        memberNum?: long(name='MemberNum', example='2'),
        role?: string(name='Role', example='Member'),
        status?: string(name='Status', example='Active'),
      }
    ](name='AntConsortiums'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='10'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainConsortiumsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainConsortiumsV2ResponseBody(name='body'),
}

async function describeAntChainConsortiumsV2(request: DescribeAntChainConsortiumsV2Request): DescribeAntChainConsortiumsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainConsortiumsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectContentTreeRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', example='2L9VK68g', position='Body'),
}

model DescribeAntChainContractProjectContentTreeResponseBody = {
  requestId?: string(name='RequestId', example='A0DF307A-A44A-476F-99D8-BA4F205350BD'),
  result?: {
    children?: [  map[string]any ](name='Children'),
    projectDescription?: string(name='ProjectDescription', example='description'),
    projectId?: string(name='ProjectId', example='2L9VK68g'),
    projectName?: string(name='ProjectName', example='projectname'),
    projectVersion?: string(name='ProjectVersion', example='5'),
  }(name='Result'),
}

model DescribeAntChainContractProjectContentTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainContractProjectContentTreeResponseBody(name='body'),
}

async function describeAntChainContractProjectContentTree(request: DescribeAntChainContractProjectContentTreeRequest): DescribeAntChainContractProjectContentTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectContentTree', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectContentTreeV2Request {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  projectId: string(name='ProjectId', example='2L9VK68g', position='Body'),
}

model DescribeAntChainContractProjectContentTreeV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: string(name='Result', example='"{"description":"","projectId":"","projectName":"","treeContractContent":[{"content":"","fileName":"","id":"","isDir":false,"parentId\\":""}],"type":"","version":""}"'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainContractProjectContentTreeV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainContractProjectContentTreeV2ResponseBody(name='body'),
}

async function describeAntChainContractProjectContentTreeV2(request: DescribeAntChainContractProjectContentTreeV2Request): DescribeAntChainContractProjectContentTreeV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectContentTreeV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectsRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='DV80nJXq', position='Body'),
  pageNumber: int32(name='PageNumber', example='1', position='Body'),
  pageSize: int32(name='PageSize', example='10', position='Body'),
}

model DescribeAntChainContractProjectsResponseBody = {
  requestId?: string(name='RequestId', example='5EDAC16F-EA3E-4017-B223-D76220F985DF'),
  result?: {
    contractProjects?: [ 
      {
        consortiumId?: string(name='ConsortiumId', example='DV80nJXq'),
        createTime?: long(name='CreateTime', example='1562847564000'),
        projectDescription?: string(name='ProjectDescription', example='description'),
        projectId?: string(name='ProjectId', example='2L9VK68g'),
        projectName?: string(name='ProjectName', example='projectname'),
        projectVersion?: string(name='ProjectVersion', example='5'),
        updateTime?: long(name='UpdateTime', example='1563954499000'),
      }
    ](name='ContractProjects'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='1'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainContractProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainContractProjectsResponseBody(name='body'),
}

async function describeAntChainContractProjects(request: DescribeAntChainContractProjectsRequest): DescribeAntChainContractProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjects', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectsV2Request {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  pageNumber: int32(name='PageNumber', example='1', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=0, maximum=9223372036854775807, position='Body'),
}

model DescribeAntChainContractProjectsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    contractProjects?: [ 
      {
        consortiumId?: string(name='ConsortiumId', example='M8GaMEyX'),
        createTime?: long(name='CreateTime', example='1609848383000'),
        projectDescription?: string(name='ProjectDescription', example='test'),
        projectId?: string(name='ProjectId', example='RXwQj6m8'),
        projectName?: string(name='ProjectName', example='test'),
        projectVersion?: string(name='ProjectVersion', example='1.0.0'),
        updateTime?: long(name='UpdateTime', example='1609848383000'),
      }
    ](name='ContractProjects'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='100'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainContractProjectsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainContractProjectsV2ResponseBody(name='body'),
}

async function describeAntChainContractProjectsV2(request: DescribeAntChainContractProjectsV2Request): DescribeAntChainContractProjectsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainDownloadPathsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='1q8B5R9p', position='Body'),
}

model DescribeAntChainDownloadPathsResponseBody = {
  requestId?: string(name='RequestId', example='E6F487D4-8606-41B5-B289-46D5EFBD3417'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl', example='http://***ca.crt'),
    clientCrtUrl?: string(name='ClientCrtUrl', example='http://***client.crt'),
    sdkUrl?: string(name='SdkUrl', example='http://***'),
    trustCaUrl?: string(name='TrustCaUrl', example='http://***trustCa'),
  }(name='Result'),
}

model DescribeAntChainDownloadPathsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainDownloadPathsResponseBody(name='body'),
}

async function describeAntChainDownloadPaths(request: DescribeAntChainDownloadPathsRequest): DescribeAntChainDownloadPathsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainDownloadPaths', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainDownloadPathsV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
}

model DescribeAntChainDownloadPathsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl', example='http://***ca.crt'),
    clientCrtUrl?: string(name='ClientCrtUrl', example='http://***client.crt'),
    sdkUrl?: string(name='SdkUrl', example='http://***'),
    trustCaUrl?: string(name='TrustCaUrl', example='http://***trustCa'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainDownloadPathsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainDownloadPathsV2ResponseBody(name='body'),
}

async function describeAntChainDownloadPathsV2(request: DescribeAntChainDownloadPathsV2Request): DescribeAntChainDownloadPathsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainDownloadPathsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainInformationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
}

model DescribeAntChainInformationResponseBody = {
  requestId?: string(name='RequestId', example='91246411-C7E9-4EFD-9074-3939AEDFC1BB'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes', example='0'),
    antChainId?: string(name='AntChainId', example='pYogqb9v'),
    blockHeight?: int32(name='BlockHeight', example='365236'),
    createTime?: long(name='CreateTime', example='1562847396000'),
    nodeInfos?: [ 
      {
        blockHeight?: long(name='BlockHeight', example='365216'),
        nodeName?: string(name='NodeName', example='121.199.195.8 18130'),
        status?: boolean(name='Status', example='true'),
        version?: string(name='Version', example='0.10'),
      }
    ](name='NodeInfos'),
    nodeNumber?: int32(name='NodeNumber', example='4'),
    normal?: boolean(name='Normal', example='true'),
    transactionSum?: int32(name='TransactionSum', example='42'),
    version?: string(name='Version', example='0.10.2.4.7'),
  }(name='Result'),
}

model DescribeAntChainInformationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainInformationResponseBody(name='body'),
}

async function describeAntChainInformation(request: DescribeAntChainInformationRequest): DescribeAntChainInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainInformation', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainInformationV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
}

model DescribeAntChainInformationV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes', example='0'),
    antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163'),
    blockHeight?: int32(name='BlockHeight', example='259988'),
    createTime?: long(name='CreateTime', example='1609221924000'),
    isRole?: boolean(name='IsRole', example='false'),
    nodeInfos?: [ 
      {
        blockHeight?: long(name='BlockHeight', example='259988'),
        nodeName?: string(name='NodeName', example='8.136.158.115 18130'),
        status?: boolean(name='Status', example='true'),
        version?: string(name='Version', example='0.10'),
      }
    ](name='NodeInfos'),
    nodeNumber?: int32(name='NodeNumber', example='4'),
    normal?: boolean(name='Normal', example='true'),
    transactionSum?: int32(name='TransactionSum', example='6'),
    version?: string(name='Version', example='0.10'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainInformationV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainInformationV2ResponseBody(name='body'),
}

async function describeAntChainInformationV2(request: DescribeAntChainInformationV2Request): DescribeAntChainInformationV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainInformationV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestBlocksRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
}

model DescribeAntChainLatestBlocksResponseBody = {
  requestId?: string(name='RequestId', example='B52C552F-DDE6-4779-9BA2-9DD455275528'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainLatestBlocksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainLatestBlocksResponseBody(name='body'),
}

async function describeAntChainLatestBlocks(request: DescribeAntChainLatestBlocksRequest): DescribeAntChainLatestBlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestBlocks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestBlocksV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
}

model DescribeAntChainLatestBlocksV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: [ 
    {
      alias?: string(name='Alias', example='8bd720bde18c4b37b0f4a1c7834db163'),
      bizData?: string(name='BizData', example='b21baa257788d97eb0006672ccc5008f465365e1dec88d0bbd833e150414b3d5'),
      blockHash?: string(name='BlockHash', example='b21baa257788d97eb0006672ccc5008f465365e1dec88d0bbd833e150414b3d5'),
      createTime?: long(name='CreateTime', example='1610002621000'),
      height?: long(name='Height', example='259808'),
      previousHash?: string(name='PreviousHash', example='f208834bdc72bd6bb05c5ef1a35abbc8295a16deda9526b7b78c69ec24591b9f'),
      rootTxHash?: string(name='RootTxHash', example='0000000000000000000000000000000000000000000000000000000000000000'),
      size?: long(name='Size', example='1024'),
      transactionSize?: long(name='TransactionSize', example='0'),
      version?: long(name='Version', example='33556226'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainLatestBlocksV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainLatestBlocksV2ResponseBody(name='body'),
}

async function describeAntChainLatestBlocksV2(request: DescribeAntChainLatestBlocksV2Request): DescribeAntChainLatestBlocksV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestBlocksV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestTransactionDigestsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
}

model DescribeAntChainLatestTransactionDigestsResponseBody = {
  requestId?: string(name='RequestId', example='3348160E-187B-47BD-B1B9-76AD4AFA4558'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainLatestTransactionDigestsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainLatestTransactionDigestsResponseBody(name='body'),
}

async function describeAntChainLatestTransactionDigests(request: DescribeAntChainLatestTransactionDigestsRequest): DescribeAntChainLatestTransactionDigestsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestTransactionDigests', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestTransactionDigestsV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
}

model DescribeAntChainLatestTransactionDigestsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: [ string ](name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainLatestTransactionDigestsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainLatestTransactionDigestsV2ResponseBody(name='body'),
}

async function describeAntChainLatestTransactionDigestsV2(request: DescribeAntChainLatestTransactionDigestsV2Request): DescribeAntChainLatestTransactionDigestsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestTransactionDigestsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='q0oWq92P', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize: int32(name='PageSize', example='10', position='Body'),
}

model DescribeAntChainMembersResponseBody = {
  requestId?: string(name='RequestId', example='E0DB75A2-28C8-4295-8851-A157FFB3DFED'),
  result?: {
    members?: [ 
      {
        joinTime?: long(name='JoinTime', example='1557477823000'),
        memberId?: string(name='MemberId', example='uid-1388601577407805'),
        memberName?: string(name='MemberName', example='uid-1562589998337656'),
        role?: string(name='Role', example='Member'),
        status?: string(name='Status', example='AllianceNotJoined'),
      }
    ](name='Members'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='6'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMembersResponseBody(name='body'),
}

async function describeAntChainMembers(request: DescribeAntChainMembersRequest): DescribeAntChainMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMembersV2Request {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=0, maximum=2147483647, position='Body'),
}

model DescribeAntChainMembersV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    members?: [ 
      {
        joinTime?: long(name='JoinTime', example='1609745002000'),
        memberId?: string(name='MemberId', example='1034774750177934'),
        memberName?: string(name='MemberName', example='uid-1034774750177934'),
        role?: string(name='Role', example='Member'),
        status?: string(name='Status', example='AllianceJoined'),
      }
    ](name='Members'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='100'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainMembersV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMembersV2ResponseBody(name='body'),
}

async function describeAntChainMembersV2(request: DescribeAntChainMembersV2Request): DescribeAntChainMembersV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMembersV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  QRCodeType: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION', position='Body'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody = {
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount', example='100'),
    accessCount?: long(name='AccessCount', example='1000'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAccessLog(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest): DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAccessLog', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  QRCodeType: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION', position='Body'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount', example='10'),
    accessCount?: long(name='AccessCount', example='100'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserQRCodeAccessLogV2ResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAccessLogV2(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Request): DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAccessLogV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  pageNumber: int32(name='PageNumber', example='1', position='Body'),
  pageSize: int32(name='PageSize', example='10', position='Body'),
  QRCodeType: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION', position='Body'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody = {
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    antChainId?: string(name='AntChainId', example='bDXK6boZ'),
    authorizationType?: string(name='AuthorizationType', example='ALL_USER_AUTHORIZATION'),
    authorizedUserList?: [ 
      {
        gmtAuthorized?: string(name='GmtAuthorized', example='1580958389000'),
        phone?: string(name='Phone', example='1380013****'),
      }
    ](name='AuthorizedUserList'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='10'),
      pageSize?: int32(name='PageSize', example='1'),
      totalCount?: int32(name='TotalCount', example='100'),
    }(name='Pagination'),
    QRCodeType?: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsers(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  pageNumber: int32(name='PageNumber', example='1', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=0, maximum=9223372036854775807, position='Body'),
  QRCodeType: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION', position='Body'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    antChainId?: string(name='AntChainId', example='4505A1E4-0EDD-4A02-A4D7-B49219328D49'),
    authorizationType?: string(name='AuthorizationType', example='SPECIFIC_USER_AUTHORIZATION'),
    authorizedUserList?: [ 
      {
        gmtAuthorized?: string(name='GmtAuthorized', example='2021-01-07 10:55:42'),
        phone?: string(name='Phone', example='1380013****'),
      }
    ](name='AuthorizedUserList'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='100'),
    }(name='Pagination'),
    QRCodeType?: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2ResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Request): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  transactionHash: string(name='TransactionHash', example='4a1f1371012cf840a9e4c6bde430d5ba600e422e592d153bd2689783cd1f87d0', position='Body'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody = {
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    antChainId?: string(name='AntChainId', example='bDXK6boZ'),
    base64QRCodePNG?: string(name='Base64QRCodePNG', example='iVBORw0KGgo......ABJRU5ErkJggg=='),
    QRCodeContent?: string(name='QRCodeContent', example='https://render.antfin.com/p/s/miniapp-web/?type=trans&from=aliyun&bizid=bDXK6boZ&hash=10692388f8b729cbb42d2985eebd3567812def357eb826a7ec810ce97e1f295e'),
    transactionHash?: string(name='TransactionHash', example='10692388f8b729cbb42d2985eebd3567812def357eb826a7ec810ce97e1f295e'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserTransactionQRCode(request: DescribeAntChainMiniAppBrowserTransactionQRCodeRequest): DescribeAntChainMiniAppBrowserTransactionQRCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserTransactionQRCode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  contractId?: string(name='ContractId', example='9782291a957d28bec9e02f3dcb27d78392815ede7670b70793e0fd9763309cda', position='Body'),
  transactionHash: string(name='TransactionHash', example='4a1f1371012cf840a9e4c6bde430d5ba600e422e592d153bd2689783cd1f87d0', position='Body'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163'),
    base64QRCodePNG?: string(name='Base64QRCodePNG', example='iVBORw0KGgoAAAANSUhEUgAAAPAAAADwCAIAAACxN37FAAAcb0lEQVR42u3dCZAc1XkAYGlPSRZIGIwEtos4tlM4lE05hhBsU'),
    QRCodeContent?: string(name='QRCodeContent', example='https://render.antfin.com/p/s/miniapp-web/?type=trans&from=aliyun&bizid=8bd720bde18c4b37b0f4a1c7834db163&hash=ac73c8fa158436513e0b398632d9a082e04cee3eac6f9fb50087a46d801bdfd1&contractId='),
    transactionHash?: string(name='TransactionHash', example='ac73c8fa158436513e0b398632d9a082e04cee3eac6f9fb50087a46d801bdfd1'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserTransactionQRCodeNew(request: DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest): DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserTransactionQRCodeNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='1q8B5R9p', position='Body'),
}

model DescribeAntChainNodesResponseBody = {
  requestId?: string(name='RequestId', example='BA9738FE-F427-44FD-A1D9-EB4EFB43075A'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainNodesResponseBody(name='body'),
}

async function describeAntChainNodes(request: DescribeAntChainNodesRequest): DescribeAntChainNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainNodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainNodesV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
}

model DescribeAntChainNodesV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: [ string ](name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainNodesV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainNodesV2ResponseBody(name='body'),
}

async function describeAntChainNodesV2(request: DescribeAntChainNodesV2Request): DescribeAntChainNodesV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainNodesV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainQRCodeAuthorizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  QRCodeType: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION', position='Body'),
}

model DescribeAntChainQRCodeAuthorizationResponseBody = {
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    antChainId?: string(name='AntChainId', example='bDXK6boZ'),
    authorizationType?: string(name='AuthorizationType', example='ALL_USER_AUTHORIZATION'),
    QRCodeType?: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION'),
  }(name='Result'),
}

model DescribeAntChainQRCodeAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainQRCodeAuthorizationResponseBody(name='body'),
}

async function describeAntChainQRCodeAuthorization(request: DescribeAntChainQRCodeAuthorizationRequest): DescribeAntChainQRCodeAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainQRCodeAuthorization', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainQRCodeAuthorizationV2Request {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  QRCodeType: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION', position='Body'),
}

model DescribeAntChainQRCodeAuthorizationV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='980061FC-058D-4298-8598-D9DDB10D0ED4'),
  result?: {
    antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163'),
    authorizationType?: string(name='AuthorizationType', example='ALL_USER_AUTHORIZATION'),
    QRCodeType?: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainQRCodeAuthorizationV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainQRCodeAuthorizationV2ResponseBody(name='body'),
}

async function describeAntChainQRCodeAuthorizationV2(request: DescribeAntChainQRCodeAuthorizationV2Request): DescribeAntChainQRCodeAuthorizationV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainQRCodeAuthorizationV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
  hash: string(name='Hash', example='b3b0d2db83d3e670449d1e2a39d1d13b7e0e6080b0f9c6945f79eca68d1dd2ca', position='Body'),
}

model DescribeAntChainTransactionResponseBody = {
  requestId?: string(name='RequestId', example='7DCE6520-E5DB-4859-90AC-BDDB8A5501C6'),
  result?: {
    blockHash?: string(name='BlockHash', example='1168bc5dd0b78d15446b15ea5a7f7822a7d07c007dd3a50becf98da220fc08f6'),
    blockHeight?: long(name='BlockHeight', example='368169'),
    blockVersion?: string(name='BlockVersion', example='10'),
    createTime?: long(name='CreateTime', example='1563954336850'),
    hash?: string(name='Hash', example='b3b0d2db83d3e670449d1e2a39d1d13b7e0e6080b0f9c6945f79eca68d1dd2ca'),
    transaction?: {
      data?: string(name='Data', example='“”'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From', example='e7d3e769f3f593dadcb8634cc5b09fc90dd3a61c4a06a79cb0923662fe6fae6b'),
      gas?: string(name='Gas', example='4000000'),
      hash?: string(name='Hash', example='b3b0d2db83d3e670449d1e2a39d1d13b7e0e6080b0f9c6945f79eca68d1dd2ca'),
      nonce?: string(name='Nonce', example='5675407026657953619'),
      period?: long(name='Period', description='Period', example='1563954336850'),
      signatures?: [ string ](name='Signatures'),
      timestamp?: long(name='Timestamp', example='1563954336850'),
      to?: string(name='To', example='961085f3c7ef705ad587d0cbe11d7863a5a11af7451f4e9b1edadd74402addf5'),
      txType?: string(name='TxType', example='UNFREEZE_ACCOUNT_CONTRACT'),
      value?: string(name='Value', example='0'),
    }(name='Transaction'),
  }(name='Result'),
}

model DescribeAntChainTransactionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionResponseBody(name='body'),
}

async function describeAntChainTransaction(request: DescribeAntChainTransactionRequest): DescribeAntChainTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransaction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionReceiptRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
  hash: string(name='Hash', example='b3b0d2db83d3e670449d1e2a39d1d13b7e0e6080b0f9c6945f79eca68d1dd2ca', position='Body'),
}

model DescribeAntChainTransactionReceiptResponseBody = {
  requestId?: string(name='RequestId', example='9EC8FDC1-ED32-4EC0-AEC2-AFAA906ADBAB'),
  result?: {
    data?: string(name='Data', example='data'),
    gasUsed?: string(name='GasUsed', example='20000'),
    logs?: [ string ](name='Logs'),
    result?: long(name='Result', example='0'),
  }(name='Result'),
}

model DescribeAntChainTransactionReceiptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionReceiptResponseBody(name='body'),
}

async function describeAntChainTransactionReceipt(request: DescribeAntChainTransactionReceiptRequest): DescribeAntChainTransactionReceiptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionReceipt', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionReceiptV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  hash: string(name='Hash', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
}

model DescribeAntChainTransactionReceiptV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    data?: string(name='Data', example='data'),
    gasUsed?: string(name='GasUsed', example='20000'),
    logs?: [ string ](name='Logs'),
    result?: long(name='Result', example='0'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainTransactionReceiptV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionReceiptV2ResponseBody(name='body'),
}

async function describeAntChainTransactionReceiptV2(request: DescribeAntChainTransactionReceiptV2Request): DescribeAntChainTransactionReceiptV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionReceiptV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
  end: long(name='End', example='1563897600000', position='Body'),
  start: long(name='Start', example='1563206400000', position='Body'),
}

model DescribeAntChainTransactionStatisticsResponseBody = {
  requestId?: string(name='RequestId', example='E93884AC-6C21-4FEA-8E3A-7377D33B194F'),
  result?: [ 
    {
      antChainId?: string(name='AntChainId', example='pYogqb9v'),
      creatTime?: long(name='CreatTime', example='1563294007000'),
      dt?: string(name='Dt', example='2019-07-16'),
      lastSumBlockHeight?: long(name='LastSumBlockHeight', example='148018'),
      transCount?: long(name='TransCount', example='0'),
    }
  ](name='Result'),
}

model DescribeAntChainTransactionStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionStatisticsResponseBody(name='body'),
}

async function describeAntChainTransactionStatistics(request: DescribeAntChainTransactionStatisticsRequest): DescribeAntChainTransactionStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionStatistics', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionStatisticsV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  end?: long(name='End', example='1609776000000', minimum=0, maximum=9223372036854775807, position='Body'),
  start?: long(name='Start', example='1609084800000', minimum=0, maximum=9223372036854775807, position='Body'),
}

model DescribeAntChainTransactionStatisticsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: [ 
    {
      antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163'),
      creatTime?: long(name='CreatTime', example='1609258222000'),
      dt?: long(name='Dt', example='1609171200000'),
      lastSumBlockHeight?: long(name='LastSumBlockHeight', example='11511'),
      transCount?: long(name='TransCount', example='4'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainTransactionStatisticsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionStatisticsV2ResponseBody(name='body'),
}

async function describeAntChainTransactionStatisticsV2(request: DescribeAntChainTransactionStatisticsV2Request): DescribeAntChainTransactionStatisticsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionStatisticsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionV2Request {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  hash: string(name='Hash', example='227072dcd1a5d78098da99ccc8024304b9fb54fc6b65e37ef919d7f2da080061', position='Body'),
}

model DescribeAntChainTransactionV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    blockHash?: string(name='BlockHash', example='1168bc5dd0b78d15446b15ea5a7f7822a7d07c007dd3a50becf98da220fc08f6'),
    blockHeight?: long(name='BlockHeight', example='100'),
    blockVersion?: string(name='BlockVersion', example='10'),
    createTime?: long(name='CreateTime', example='1563954336850'),
    hash?: string(name='Hash', example='b3b0d2db83d3e670449d1e2a39d1d13b7e0e6080b0f9c6945f79eca68d1dd2ca'),
    transaction?: {
      data?: string(name='Data', example='""'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From', example='e7d3e769f3f593dadcb8634cc5b09fc90dd3a61c4a06a79cb0923662fe6fae6b'),
      gas?: string(name='Gas', example='4000000'),
      hash?: string(name='Hash', example='b3b0d2db83d3e670449d1e2a39d1d13b7e0e6080b0f9c6945f79eca68d1dd2ca'),
      nonce?: string(name='Nonce', example='5675407026657953619'),
      period?: long(name='Period', example='1563954336850'),
      signatures?: [ string ](name='Signatures'),
      timestamp?: long(name='Timestamp', example='1563954336850'),
      to?: string(name='To', example='961085f3c7ef705ad587d0cbe11d7863a5a11af7451f4e9b1edadd74402addf5'),
      txType?: string(name='TxType', example='UNFREEZE_ACCOUNT_CONTRACT'),
      value?: string(name='Value', example='0'),
    }(name='Transaction'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainTransactionV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionV2ResponseBody(name='body'),
}

async function describeAntChainTransactionV2(request: DescribeAntChainTransactionV2Request): DescribeAntChainTransactionV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainsRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='AroN3X2l', position='Body'),
  pageNumber: int32(name='PageNumber', example='1', position='Body'),
  pageSize: int32(name='PageSize', example='20', position='Body'),
}

model DescribeAntChainsResponseBody = {
  requestId?: string(name='RequestId', example='52EC3196-D0B8-4FBE-A8B6-6DDABABE11C9'),
  result?: {
    antChains?: [ 
      {
        antChainId?: string(name='AntChainId', example='pYogqb9v'),
        antChainName?: string(name='AntChainName'),
        chainType?: string(name='ChainType', example='Contract'),
        cipherSuit?: string(name='CipherSuit', example='classic'),
        createTime?: long(name='CreateTime', example='1562847396000'),
        expireTime?: long(name='ExpireTime', example='1626019200000'),
        isAdmin?: boolean(name='IsAdmin', example='true'),
        memberStatus?: string(name='MemberStatus', example='ChainApplied'),
        merkleTreeSuit?: string(name='MerkleTreeSuit', example='fdmt'),
        network?: string(name='Network', example='Running'),
        nodeNum?: int32(name='NodeNum', example='4'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resourceSize?: string(name='ResourceSize', example='Basic'),
        tlsAlgo?: string(name='TlsAlgo', example='rsa'),
        version?: string(name='Version', example='2.19.1'),
      }
    ](name='AntChains'),
    isExist?: boolean(name='IsExist', example='false'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='20'),
      totalCount?: int32(name='TotalCount', example='1'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainsResponseBody(name='body'),
}

async function describeAntChains(request: DescribeAntChainsRequest): DescribeAntChainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChains', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainsV2Request {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='M8GaMEyX', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', example='10', minimum=0, maximum=2147483647, position='Body'),
}

model DescribeAntChainsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='DBD6C69E-22B9-419E-B072-7A715F3AA330'),
  result?: {
    antChains?: [ 
      {
        antChainId?: string(name='AntChainId', example='8bd720bde18c4b37b0f4a1c7834db163'),
        antChainName?: string(name='AntChainName'),
        chainType?: string(name='ChainType', example='Contract'),
        cipherSuit?: string(name='CipherSuit', example='classic'),
        createTime?: long(name='CreateTime', example='1609221924000'),
        expireTime?: long(name='ExpireTime', example='1672329600000'),
        instanceId?: string(name='InstanceId', example='ALIYUN202012291405173265824745109'),
        isAdmin?: boolean(name='IsAdmin', example='false'),
        memberStatus?: string(name='MemberStatus', example='ChainApplied'),
        merkleTreeSuit?: string(name='MerkleTreeSuit', example='fdmt'),
        monitorStatus?: boolean(name='MonitorStatus', example='true'),
        network?: string(name='Network', example='Running'),
        nodeNum?: int32(name='NodeNum', example='4'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resourceSize?: string(name='ResourceSize', example='Basic'),
        restStatus?: string(name='RestStatus', example='CREATE'),
        tlsAlgo?: string(name='TlsAlgo', example='rsa'),
        version?: string(name='Version', example='2.19.1'),
      }
    ](name='AntChains'),
    isExist?: boolean(name='IsExist', example='true'),
    pagination?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      totalCount?: int32(name='TotalCount', example='2'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode', example='OK'),
  resultMessage?: string(name='ResultMessage', example='OK'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAntChainsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainsV2ResponseBody(name='body'),
}

async function describeAntChainsV2(request: DescribeAntChainsV2Request): DescribeAntChainsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainsV2', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumDeletableRequest {
  regionId?: string(name='RegionId', position='Host'),
  ethereumId: string(name='EthereumId', example='eth-1ilrhcav4ibdl', position='Body'),
}

model DescribeEthereumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: {
    deletable?: boolean(name='Deletable', example='true'),
    ethereumId?: string(name='EthereumId', example='eth-1ilrhcav4ibdl'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEthereumDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumDeletableResponseBody(name='body'),
}

async function describeEthereumDeletable(request: DescribeEthereumDeletableRequest): DescribeEthereumDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricCandidateOrganizationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeFabricCandidateOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      clusterState?: string(name='ClusterState', example='Running'),
      organizationId?: string(name='OrganizationId', example='peers-1oxw31d04****'),
      organizationName?: string(name='OrganizationName', example='org1'),
      serviceState?: string(name='ServiceState', example='Running'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricCandidateOrganizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricCandidateOrganizationsResponseBody(name='body'),
}

async function describeFabricCandidateOrganizations(request: DescribeFabricCandidateOrganizationsRequest): DescribeFabricCandidateOrganizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricCandidateOrganizations', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChaincodeDefinitionTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='code-sacc-jbkuldd3i7ad', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
}

model DescribeFabricChaincodeDefinitionTaskResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    approvers?: [ string ](name='Approvers'),
    channelName?: string(name='ChannelName', example='f100'),
    content?: {
      chaincodeDefinition?: {
        chaincodePackageId?: string(name='ChaincodePackageId', example='sacc_v1.0:698d4e73c5f1d0239fbf0313ac79ddfaf44d5a803ecb02a4d1983cca4a706860'),
        collectionConfig?: string(name='CollectionConfig', example='collectionconfig'),
        endorsementPolicy?: string(name='EndorsementPolicy', example='OR ("perf9141MSP.member")'),
        initRequired?: boolean(name='InitRequired', example='true'),
        name?: string(name='Name', example='sacc'),
        sequence?: long(name='Sequence', example='1'),
        uid?: string(name='Uid', example='698d4e73c5f1d0239fbf0313ac79ddfaf44d5a803ecb02a4d1983cca4a706860'),
        version?: string(name='Version', example='1.1'),
      }(name='ChaincodeDefinition'),
    }(name='Content'),
    createTime?: long(name='CreateTime', example='1533025590'),
    creator?: string(name='Creator', example='perf9141MSP'),
    description?: string(name='Description', example='description'),
    status?: string(name='Status', example='Pending'),
    taskId?: string(name='TaskId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
    type?: string(name='Type', example='ChaincodeDefinition'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricChaincodeDefinitionTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricChaincodeDefinitionTaskResponseBody(name='body'),
}

async function describeFabricChaincodeDefinitionTask(request: DescribeFabricChaincodeDefinitionTaskRequest): DescribeFabricChaincodeDefinitionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChaincodeDefinitionTask', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChaincodeUploadPolicyRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d04****', position='Body'),
}

model DescribeFabricChaincodeUploadPolicyResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    accessId?: string(name='AccessId', example='accessId'),
    dir?: string(name='Dir', example='test3/4bd1de21-2fff-4405-a8e9-f864c4bee24f'),
    expire?: int32(name='Expire', example='1533025590'),
    host?: string(name='Host', example='https://chaincode.oss-cn-beijing.aliyuncs.com'),
    policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAxOC0wNy0zMVQwODoyNjozMC40NzdaIiwiY29uZGl'),
    signature?: string(name='Signature', example='signature'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricChaincodeUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricChaincodeUploadPolicyResponseBody(name='body'),
}

async function describeFabricChaincodeUploadPolicy(request: DescribeFabricChaincodeUploadPolicyRequest): DescribeFabricChaincodeUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChaincodeUploadPolicy', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChannelMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', example='chan-channelx-1l1hmckuu****', position='Query'),
}

model DescribeFabricChannelMembersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      acceptTime?: string(name='AcceptTime', example='1544411108000'),
      channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
      inviteTime?: string(name='InviteTime', example='1544411108000'),
      organizationDescription?: string(name='OrganizationDescription', example='description'),
      organizationDomain?: string(name='OrganizationDomain', example='hello'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d046jtl'),
      organizationName?: string(name='OrganizationName', example='name'),
      state?: string(name='State', example='Running'),
      withPeer?: boolean(name='WithPeer', example='true'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricChannelMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricChannelMembersResponseBody(name='body'),
}

async function describeFabricChannelMembers(request: DescribeFabricChannelMembersRequest): DescribeFabricChannelMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChannelMembers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricConsortiumAdminStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeFabricConsortiumAdminStatusResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      consortiumAdministrator?: boolean(name='ConsortiumAdministrator', example='true'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumAdminStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumAdminStatusResponseBody(name='body'),
}

async function describeFabricConsortiumAdminStatus(request: DescribeFabricConsortiumAdminStatusRequest): DescribeFabricConsortiumAdminStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumAdminStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumChaincodesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeFabricConsortiumChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jmo0np'),
      chaincodeName?: string(name='ChaincodeName', example='sacc'),
      chaincodeVersion?: string(name='ChaincodeVersion', example='1.0'),
      channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
      channelName?: string(name='ChannelName', example='cname'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      createTime?: string(name='CreateTime', example='1544411108000'),
      deployTime?: string(name='DeployTime', example='1544411108000'),
      endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")'),
      input?: string(name='Input', example='input'),
      install?: boolean(name='Install', example='true'),
      message?: string(name='Message', example='ok'),
      path?: string(name='Path', example='go-sdk-demo/chaincode/src'),
      providerId?: string(name='ProviderId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      providerName?: string(name='ProviderName', example='name'),
      state?: string(name='State', example='Instantiatable'),
      type?: int32(name='Type', example='1'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumChaincodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumChaincodesResponseBody(name='body'),
}

async function describeFabricConsortiumChaincodes(request: DescribeFabricConsortiumChaincodesRequest): DescribeFabricConsortiumChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumChannelsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeFabricConsortiumChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      batchTimeout?: int32(name='BatchTimeout', example='2'),
      blockCount?: int32(name='BlockCount', example='2'),
      chaincodeCount?: int32(name='ChaincodeCount', example='2'),
      channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
      channelName?: string(name='ChannelName', example='mychammel'),
      consortiumChannelId?: int32(name='ConsortiumChannelId', example='1'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      createTime?: string(name='CreateTime', example='1544411108000'),
      deleteTime?: string(name='DeleteTime', example='1544411108000'),
      deleted?: boolean(name='Deleted', example='true'),
      maxMessageCount?: int32(name='MaxMessageCount', example='200'),
      memberCount?: int32(name='MemberCount', example='3'),
      memberJoinedCount?: string(name='MemberJoinedCount', example='3'),
      needJoined?: boolean(name='NeedJoined', example='true'),
      ownerBid?: string(name='OwnerBid', example='26842'),
      ownerName?: string(name='OwnerName', example='uid-*'),
      ownerUid?: long(name='OwnerUid', example='212'),
      preferredMaxBytes?: int32(name='PreferredMaxBytes', example='102410241'),
      requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
      state?: string(name='State', example='Running'),
      supportChannelConfig?: boolean(name='SupportChannelConfig', example='true'),
      updateTime?: string(name='UpdateTime', example='1544411108000'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumChannelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumChannelsResponseBody(name='body'),
}

async function describeFabricConsortiumChannels(request: DescribeFabricConsortiumChannelsRequest): DescribeFabricConsortiumChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumChannels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumConfigResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    channelPolicy?: [ string ](name='ChannelPolicy'),
    ordererType?: [ string ](name='OrdererType'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumConfigResponseBody(name='body'),
}

async function describeFabricConsortiumConfig(request: DescribeFabricConsortiumConfigRequest): DescribeFabricConsortiumConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricConsortiumDeletableRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeFabricConsortiumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    codeName?: string(name='CodeName', example='codename'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    consortiumName?: string(name='ConsortiumName', example='myconsortium'),
    deletable?: boolean(name='Deletable', example='true'),
    description?: string(name='Description', example='description'),
    domain?: string(name='Domain', example='domain'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    state?: string(name='State', example='Running'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumDeletableResponseBody(name='body'),
}

async function describeFabricConsortiumDeletable(request: DescribeFabricConsortiumDeletableRequest): DescribeFabricConsortiumDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumMemberApprovalRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeFabricConsortiumMemberApprovalResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      channelCreatePolicy?: string(name='ChannelCreatePolicy', example='Any'),
      confirmTime?: string(name='ConfirmTime', example='1544411108000'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      domainName?: string(name='DomainName', example='domain'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      organizationName?: string(name='OrganizationName', example='orgname'),
      state?: string(name='State', example='Running'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumMemberApprovalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumMemberApprovalResponseBody(name='body'),
}

async function describeFabricConsortiumMemberApproval(request: DescribeFabricConsortiumMemberApprovalRequest): DescribeFabricConsortiumMemberApprovalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumMemberApproval', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumMembersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeFabricConsortiumMembersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      description?: string(name='Description', example='description'),
      domain?: string(name='Domain', example='domain'),
      joinedTime?: string(name='JoinedTime', example='1544411108000'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      organizationName?: string(name='OrganizationName', example='name'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumMembersResponseBody(name='body'),
}

async function describeFabricConsortiumMembers(request: DescribeFabricConsortiumMembersRequest): DescribeFabricConsortiumMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumOrderersRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeFabricConsortiumOrderersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', example='1544411108000'),
      domain?: string(name='Domain', example='domain'),
      instanceType?: string(name='InstanceType', example='ecs.n1.small'),
      ordererName?: string(name='OrdererName', example='order1'),
      port?: int32(name='Port', example='7050'),
      updateTime?: string(name='UpdateTime', example='1544411108000'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumOrderersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumOrderersResponseBody(name='body'),
}

async function describeFabricConsortiumOrderers(request: DescribeFabricConsortiumOrderersRequest): DescribeFabricConsortiumOrderersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumOrderers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricConsortiumSpecsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeFabricConsortiumSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      enable?: boolean(name='Enable', example='true'),
      specName?: string(name='SpecName', example='basic'),
      specTitle?: string(name='SpecTitle'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumSpecsResponseBody(name='body'),
}

async function describeFabricConsortiumSpecs(request: DescribeFabricConsortiumSpecsRequest): DescribeFabricConsortiumSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiumSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricConsortiumsRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  tag?: [ 
    {
      key: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model DescribeFabricConsortiumsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      channelCount?: int32(name='ChannelCount', example='2'),
      channelPolicy?: string(name='ChannelPolicy', example='Any'),
      codeName?: string(name='CodeName', example='code'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      createTime?: string(name='CreateTime', example='1544411108000'),
      domain?: string(name='Domain', example='domain'),
      expiredTime?: string(name='ExpiredTime', example='1544411108000'),
      majorVersion?: string(name='MajorVersion'),
      organizationCount?: int32(name='OrganizationCount', example='2'),
      ownerBid?: string(name='OwnerBid', example='26842'),
      ownerName?: string(name='OwnerName', example='uid-125566'),
      ownerUid?: long(name='OwnerUid', example='12042815'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      requestId?: string(name='RequestId', example='3A929FAC-A82D-4EAB-A0FF-D867426D8B23'),
      specName?: string(name='SpecName', example='basic'),
      state?: string(name='State', example='Pending'),
      supportChannelConfig?: boolean(name='SupportChannelConfig', example='true'),
      tags?: [ 
        {
          key?: string(name='Key', example='app'),
          value?: string(name='Value', example='nat_internet'),
        }
      ](name='Tags'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricConsortiumsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricConsortiumsResponseBody(name='body'),
}

async function describeFabricConsortiums(request: DescribeFabricConsortiumsRequest): DescribeFabricConsortiumsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricConsortiums', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricExplorerRequest {
  regionId?: string(name='RegionId', position='Host'),
  exBody?: string(name='ExBody', example='{}', position='Query'),
  exMethod: string(name='ExMethod', example='GET', position='Query'),
  exUrl: string(name='ExUrl', example='/api/v1/channel', position='Query'),
  organizationId: string(name='OrganizationId', example='peers-test11-tzwny25vqicq', position='Body'),
}

model DescribeFabricExplorerResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='ExplorerException'),
  dynamicMessage?: string(name='DynamicMessage', example='An error in the monitoring service has occurred.'),
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='19E91C1D-9BD0-468F-A7DA-915263C6689F'),
  result?: string(name='Result', example='{}'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricExplorerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricExplorerResponseBody(name='body'),
}

async function describeFabricExplorer(request: DescribeFabricExplorerRequest): DescribeFabricExplorerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricExplorer', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricInvitationCodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Body'),
}

model DescribeFabricInvitationCodeResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='InvitationCodeNotFound'),
  dynamicMessage?: string(name='DynamicMessage', example='The invitation code could not found.'),
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='77E25463-56CB-4F1C-8EB6-8ADDFE39EF0F'),
  result?: {
    accepted?: boolean(name='Accepted', example='true'),
    code?: string(name='Code', example='code'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    email?: string(name='Email', example='abc@126.com'),
    expireTime?: string(name='ExpireTime', example='1544411108000'),
    invitationId?: int32(name='InvitationId', example='2'),
    sendTime?: string(name='SendTime', example='1544411108000'),
    senderBid?: string(name='SenderBid', example='27534'),
    senderId?: long(name='SenderId', example='26345345'),
    senderName?: string(name='SenderName', example='uid-35324'),
    url?: string(name='Url', example='http://baas.console.aliyun.test/invite?code=92e7ef1934892'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricInvitationCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricInvitationCodeResponseBody(name='body'),
}

async function describeFabricInvitationCode(request: DescribeFabricInvitationCodeRequest): DescribeFabricInvitationCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricInvitationCode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricInviterRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  code: string(name='Code', example='200', position='Body'),
}

model DescribeFabricInviterResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='C445762C-8909-4BD8-A2BD-BB45BF2441D8'),
  result?: {
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****'),
    consortiumName?: string(name='ConsortiumName', example='name'),
    expireTime?: string(name='ExpireTime', example='1544411108000'),
    inviterId?: long(name='InviterId', example='3524234'),
    inviterName?: string(name='InviterName', example='name'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricInviterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricInviterResponseBody(name='body'),
}

async function describeFabricInviter(request: DescribeFabricInviterRequest): DescribeFabricInviterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricInviter', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrdererLogsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-test-iyuso3g773ki', position='Query'),
  lines?: string(name='Lines', example='50', position='Query'),
  ordererName: string(name='OrdererName', example='orderer1', position='Query'),
}

model DescribeFabricOrdererLogsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='508EA949-6349-4C86-B8E7-1D90669382B1'),
  result?: string(name='Result', example='Kafka.Retry.Producer.RetryMax=3'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrdererLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrdererLogsResponseBody(name='body'),
}

async function describeFabricOrdererLogs(request: DescribeFabricOrdererLogsRequest): DescribeFabricOrdererLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrdererLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricOrganizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model DescribeFabricOrganizationResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    CANAME?: string(name='CANAME', example='client'),
    CAUrl?: string(name='CAUrl', example='https://ca1.org1.alibabacloudbaas.com:31154'),
    codeName?: string(name='CodeName', example='org1'),
    consortiumCount?: int32(name='ConsortiumCount', example='2'),
    createTime?: string(name='CreateTime', example='1533025590'),
    domain?: string(name='Domain', example='org1.alibabacloudbaas.com'),
    MSP?: string(name='MSP', example='org1MSP'),
    organizationDescription?: string(name='OrganizationDescription', example='This is org1'),
    organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
    organizationName?: string(name='OrganizationName', example='org1'),
    ownerBid?: string(name='OwnerBid', example='2544'),
    ownerName?: string(name='OwnerName', example='uid-23434'),
    ownerUid?: long(name='OwnerUid', example='23434'),
    peerCount?: int32(name='PeerCount', example='2'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
    specName?: string(name='SpecName', example='basic'),
    state?: string(name='State', example='Running'),
    tags?: [ 
      {
        key?: string(name='Key', example='BlockChainOwner'),
        value?: string(name='Value', example='DepartmentA'),
      }
    ](name='Tags'),
    userCount?: int32(name='UserCount', example='2'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-1a'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationResponseBody(name='body'),
}

async function describeFabricOrganization(request: DescribeFabricOrganizationRequest): DescribeFabricOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganization', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationChaincodePackageRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
}

model DescribeFabricOrganizationChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [
    ChaincodePackage
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationChaincodePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationChaincodePackageResponseBody(name='body'),
}

async function describeFabricOrganizationChaincodePackage(request: DescribeFabricOrganizationChaincodePackageRequest): DescribeFabricOrganizationChaincodePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationChaincodePackage', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationChaincodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
}

model DescribeFabricOrganizationChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jmo0np'),
      chaincodeName?: string(name='ChaincodeName', example='mycc'),
      chaincodeVersion?: string(name='ChaincodeVersion', example='0.3'),
      channelId?: string(name='ChannelId', example='chan-first-channel-31hlgpen5k5lig'),
      channelName?: string(name='ChannelName', example='first-channel'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      createTime?: string(name='CreateTime', example='1533025590'),
      creator?: string(name='Creator', example='uid-23425'),
      deployTime?: string(name='DeployTime', example='1533025590'),
      endorsePolicy?: string(name='EndorsePolicy', example='OR (&#39;perf9141MSP.member&#39;)'),
      installed?: string(name='Installed', example='Installed'),
      message?: string(name='Message', example='OK'),
      state?: string(name='State', example='RUNNING'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationChaincodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationChaincodesResponseBody(name='body'),
}

async function describeFabricOrganizationChaincodes(request: DescribeFabricOrganizationChaincodesRequest): DescribeFabricOrganizationChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationChannelsRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5****', position='Query'),
}

model DescribeFabricOrganizationChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      batchTimeout?: int32(name='BatchTimeout', example='2'),
      blockCount?: int32(name='BlockCount', example='3'),
      chaincodeCount?: int32(name='ChaincodeCount', example='2'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName', example='mychannel'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      createTime?: string(name='CreateTime', example='1533025590'),
      deleteTime?: string(name='DeleteTime', example='1533025590'),
      deleted?: boolean(name='Deleted', example='true'),
      maxMessageCount?: int32(name='MaxMessageCount', example='12'),
      memberCount?: int32(name='MemberCount', example='3'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      preferredMaxBytes?: int32(name='PreferredMaxBytes', example='24'),
      requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
      state?: string(name='State', example='Running'),
      supportChannelConfig?: boolean(name='SupportChannelConfig', example='true'),
      updateTime?: string(name='UpdateTime', example='1533025590'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationChannelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationChannelsResponseBody(name='body'),
}

async function describeFabricOrganizationChannels(request: DescribeFabricOrganizationChannelsRequest): DescribeFabricOrganizationChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationChannels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationDeletableRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
}

model DescribeFabricOrganizationDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    codeName?: string(name='CodeName', example='name'),
    deletable?: boolean(name='Deletable', example='true'),
    domain?: string(name='Domain', example='domain'),
    organizationDescription?: string(name='OrganizationDescription', example='desc'),
    organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****'),
    organizationName?: string(name='OrganizationName', example='orgname'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    state?: string(name='State', example='Running'),
    zoneId?: string(name='ZoneId', example='zone'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationDeletableResponseBody(name='body'),
}

async function describeFabricOrganizationDeletable(request: DescribeFabricOrganizationDeletableRequest): DescribeFabricOrganizationDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationMembersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
}

model DescribeFabricOrganizationMembersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      description?: string(name='Description', example='desc'),
      domain?: string(name='Domain', example='domain'),
      joinedTime?: string(name='JoinedTime', example='1533025590'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****'),
      organizationName?: string(name='OrganizationName', example='name'),
      state?: string(name='State', example='Running'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationMembersResponseBody(name='body'),
}

async function describeFabricOrganizationMembers(request: DescribeFabricOrganizationMembersRequest): DescribeFabricOrganizationMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationPeersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
}

model DescribeFabricOrganizationPeersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', example='1533025590'),
      domain?: string(name='Domain', example='domain'),
      instanceType?: string(name='InstanceType', example='basic'),
      internetIp?: string(name='InternetIp', example='10.0.0.2'),
      intranetIp?: string(name='IntranetIp', example='10.0.0.2'),
      isAnchor?: boolean(name='IsAnchor', example='false'),
      organizationPeerName?: string(name='OrganizationPeerName', example='name'),
      port?: int32(name='Port', example='1234'),
      updateTime?: string(name='UpdateTime', example='1533025590'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationPeersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationPeersResponseBody(name='body'),
}

async function describeFabricOrganizationPeers(request: DescribeFabricOrganizationPeersRequest): DescribeFabricOrganizationPeersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationPeers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationSpecsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeFabricOrganizationSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      enable?: boolean(name='Enable', example='true'),
      organizationSpecsName?: string(name='OrganizationSpecsName', example='basic'),
      title?: string(name='Title'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationSpecsResponseBody(name='body'),
}

async function describeFabricOrganizationSpecs(request: DescribeFabricOrganizationSpecsRequest): DescribeFabricOrganizationSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricOrganizationUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
}

model DescribeFabricOrganizationUsersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      attrs?: string(name='Attrs', example='foo=foo1,bar=bar1'),
      callerBid?: string(name='CallerBid', example='26842'),
      callerUid?: long(name='CallerUid', example='84927598****'),
      createTime?: string(name='CreateTime', example='1533025590'),
      expireTime?: string(name='ExpireTime', example='1533025590'),
      fullName?: string(name='FullName', example='name'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      username?: string(name='Username', example='username'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationUsersResponseBody(name='body'),
}

async function describeFabricOrganizationUsers(request: DescribeFabricOrganizationUsersRequest): DescribeFabricOrganizationUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  tag?: [ 
    {
      key: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model DescribeFabricOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      codeName?: string(name='CodeName', example='name'),
      consortiumCount?: int32(name='ConsortiumCount', example='2'),
      createTime?: string(name='CreateTime', example='1533025590'),
      domain?: string(name='Domain', example='domain'),
      majorVersion?: string(name='MajorVersion'),
      organizationDescription?: string(name='OrganizationDescription', example='desc'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      organizationName?: string(name='OrganizationName', example='name'),
      ownerBid?: string(name='OwnerBid', example='bid'),
      ownerName?: string(name='OwnerName', example='name'),
      ownerUid?: long(name='OwnerUid', example='1232'),
      peerCount?: int32(name='PeerCount', example='3'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
      specName?: string(name='SpecName', example='basic、'),
      state?: string(name='State', example='Running'),
      tags?: [ 
        {
          key?: string(name='Key', example='BlockChainOwner'),
          value?: string(name='Value', example='DepartmentA'),
        }
      ](name='Tags'),
      userCount?: int32(name='UserCount', example='10'),
      zoneId?: string(name='ZoneId', example='zone'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricOrganizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationsResponseBody(name='body'),
}

async function describeFabricOrganizations(request: DescribeFabricOrganizationsRequest): DescribeFabricOrganizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizations', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricPeerLogsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lines?: string(name='Lines', example='50', position='Query'),
  organizationId: string(name='OrganizationId', example='peers-test11-tzwny25vqicq', position='Query'),
  peerName: string(name='PeerName', example='peer1', position='Query'),
}

model DescribeFabricPeerLogsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='78A09CAF-4944-4CAE-B25D-F5B6BA27D9F5'),
  result?: string(name='Result', example='xxxx'),
  success?: boolean(name='Success', example='true'),
}

model DescribeFabricPeerLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricPeerLogsResponseBody(name='body'),
}

async function describeFabricPeerLogs(request: DescribeFabricPeerLogsRequest): DescribeFabricPeerLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricPeerLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeRegionsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='baas.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='D1597848-E708-522C-9275-3A202FC8B63A'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRootDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeRootDomainResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: string(name='Result', example='onaliyunbaas.com'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRootDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRootDomainResponseBody(name='body'),
}

async function describeRootDomain(request: DescribeRootDomainRequest): DescribeRootDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRootDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeTasksResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='msg'),
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      action?: string(name='Action', example='action'),
      handled?: boolean(name='Handled', example='false'),
      operationType?: string(name='OperationType', example='type'),
      requestTime?: long(name='RequestTime', example='1533025590'),
      responseTime?: string(name='ResponseTime', example='1533025590'),
      result?: string(name='Result', example='result'),
      sender?: string(name='Sender', example='sender'),
      target?: string(name='Target', example='target'),
      taskId?: int32(name='TaskId', example='33'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DownloadFabricOrganizationSDKRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
  username: string(name='Username', example='username', position='Query'),
}

model DownloadFabricOrganizationSDKResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      content?: string(name='Content', example='base64string'),
      path?: string(name='Path', example='dir/file'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DownloadFabricOrganizationSDKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadFabricOrganizationSDKResponseBody(name='body'),
}

async function downloadFabricOrganizationSDK(request: DownloadFabricOrganizationSDKRequest): DownloadFabricOrganizationSDKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadFabricOrganizationSDK', 'POST', '/', 'json', true, 'form', request);
}

model FreezeAntChainAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account: string(name='Account', example='accountname', position='Body'),
  antChainId: string(name='AntChainId', example='1q8B5R9p', position='Body'),
}

model FreezeAntChainAccountResponseBody = {
  requestId?: string(name='RequestId', example='9F862442-F6AD-4B5F-8969-CE23DE1413CB'),
  result?: string(name='Result', example='success'),
}

model FreezeAntChainAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FreezeAntChainAccountResponseBody(name='body'),
}

async function freezeAntChainAccount(request: FreezeAntChainAccountRequest): FreezeAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FreezeAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model InstallFabricChaincodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='chan-channelx-1l1hmckuuisxo', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
}

model InstallFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='cc-198jejf8f8chi8'),
    chaincodeName?: string(name='ChaincodeName', example='mychannel'),
    chaincodeVersion?: string(name='ChaincodeVersion', example='1.0'),
    channelName?: string(name='ChannelName', example='mychannel'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    createTime?: string(name='CreateTime', example='1533025590'),
    deployTime?: string(name='DeployTime', example='1533025590'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR ("perf9141MSP.member")'),
    input?: string(name='Input', example='input'),
    install?: boolean(name='Install', example='false'),
    message?: string(name='Message', example='ok'),
    path?: string(name='Path', example='github.com/hyperledger/fabric-samples/chaincode/sacc'),
    providerId?: string(name='ProviderId', example='providerid'),
    providerName?: string(name='ProviderName', example='prividername'),
    state?: string(name='State', example='Pending'),
    type?: int32(name='Type', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model InstallFabricChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallFabricChaincodeResponseBody(name='body'),
}

async function installFabricChaincode(request: InstallFabricChaincodeRequest): InstallFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model InstallFabricChaincodePackageRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodePackageId: string(name='ChaincodePackageId', example='chan-channelx-1l1hmckuuisxo', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
}

model InstallFabricChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: ChaincodePackage(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model InstallFabricChaincodePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallFabricChaincodePackageResponseBody(name='body'),
}

async function installFabricChaincodePackage(request: InstallFabricChaincodePackageRequest): InstallFabricChaincodePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallFabricChaincodePackage', 'POST', '/', 'json', true, 'form', request);
}

model InstantiateFabricChaincodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='cc-198jejf8f8****', position='Body'),
  collectionConfig?: string(name='CollectionConfig', example='[{"requiredPeerCount":0,"name":"collectionName","maxPeerCount":3,"blockToLive":0,"policy":"OR(\\"Org1MSP.peer\\")"}]', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', example='OR (&#39;perf9141MSP.member&#39;)', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
}

model InstantiateFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='cc-198jejf8f8chi8'),
    chaincodeName?: string(name='ChaincodeName', example='channelname'),
    chaincodeVersion?: string(name='ChaincodeVersion', example='1.0'),
    channelName?: string(name='ChannelName', example='channelname'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    createTime?: string(name='CreateTime', example='1533025590'),
    deployTime?: string(name='DeployTime', example='1533025590'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")'),
    input?: string(name='Input', example='input'),
    install?: boolean(name='Install', example='false'),
    message?: string(name='Message', example='ok'),
    path?: string(name='Path', example='go-sdk-demo/chaincode/src'),
    providerId?: string(name='ProviderId', example='id'),
    providerName?: string(name='ProviderName', example='name'),
    state?: string(name='State', example='Running'),
    type?: int32(name='Type', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model InstantiateFabricChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstantiateFabricChaincodeResponseBody(name='body'),
}

async function instantiateFabricChaincode(request: InstantiateFabricChaincodeRequest): InstantiateFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstantiateFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model JoinFabricChannelRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', example='chan-channelx-1l1hmckuu****', position='Query'),
  do: string(name='Do', example='accept', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model JoinFabricChannelResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      acceptTime?: string(name='AcceptTime', example='1533025590'),
      approveTime?: string(name='ApproveTime', example='1533025590'),
      channelId?: string(name='ChannelId', example='channelid'),
      confirmTime?: string(name='ConfirmTime', example='1533025590'),
      destroyTime?: string(name='DestroyTime', example='1533025590'),
      inviteTime?: string(name='InviteTime', example='1533025590'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      state?: string(name='State', example='Running'),
      withPeer?: boolean(name='WithPeer', example='true'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model JoinFabricChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinFabricChannelResponseBody(name='body'),
}

async function joinFabricChannel(request: JoinFabricChannelRequest): JoinFabricChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinFabricChannel', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  nextToken?: string(name='NextToken', example='MWJlMTY4ZmY4MzdmMDQzYmRlMTdjMDMxNDM0MWM4NDI3MTA0N2IzMQo=', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='peers-tf000eihjli000shanghai-yqxvj52lruxx', position='Query'),
  resourceType: string(name='ResourceType', example='organization', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value2'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='MWJlMTY4ZmY4MzdmMDQzYmRlMTdjMDMxNDM0MWM4NDI3MTA0N2IzMQo='),
  requestId?: string(name='RequestId', example='21B8738D-254C-4933-9FC1-3C31B2611482'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='peers-tf000eihjli000shanghai-yqxvj52lruxx'),
      resourceType?: string(name='ResourceType', example='organization'),
      tagKey?: string(name='TagKey', example='key1'),
      tagValue?: string(name='TagValue', example='value1'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ResetAntChainCertificateRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
}

model ResetAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId', example='6ED983D3-C131-4104-8BDD-1F37992258E1'),
  result?: string(name='Result', example='success'),
}

model ResetAntChainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAntChainCertificateResponseBody(name='body'),
}

async function resetAntChainCertificate(request: ResetAntChainCertificateRequest): ResetAntChainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAntChainCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ResetAntChainUserCertificateRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  username: string(name='Username', example='uid-128712635330****', position='Body'),
}

model ResetAntChainUserCertificateResponseBody = {
  requestId?: string(name='RequestId', example='3EB828D1-1E9D-4EC2-A002-139FE998D674'),
  result?: string(name='Result', example='success'),
}

model ResetAntChainUserCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAntChainUserCertificateResponseBody(name='body'),
}

async function resetAntChainUserCertificate(request: ResetAntChainUserCertificateRequest): ResetAntChainUserCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAntChainUserCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ResetFabricOrganizationUserPasswordRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
  password: string(name='Password', example='pwd', position='Body'),
  username: string(name='Username', example='username', position='Body'),
}

model ResetFabricOrganizationUserPasswordResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    createTime?: string(name='CreateTime', example='1533025590'),
    expireTime?: string(name='ExpireTime', example='1533025590'),
    fullname?: string(name='Fullname', example='username'),
    organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****'),
    password?: string(name='Password', example='password'),
    username?: string(name='Username', example='username'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ResetFabricOrganizationUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetFabricOrganizationUserPasswordResponseBody(name='body'),
}

async function resetFabricOrganizationUserPassword(request: ResetFabricOrganizationUserPasswordRequest): ResetFabricOrganizationUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetFabricOrganizationUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model SubmitFabricChaincodeDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodePackageId: string(name='ChaincodePackageId', example='sacc_v1.0:698d4e73c5f1d0239fbf0313ac79ddfaf44d5a803ecb02a4d1983cca4a706860', position='Body'),
  chaincodeVersion: string(name='ChaincodeVersion', example='1.0', position='Body'),
  channelId: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo', position='Body'),
  collectionConfig?: string(name='CollectionConfig', example='collectionconfig', position='Body'),
  endorsePolicy: string(name='EndorsePolicy', example='OR ("perf9141MSP.member")', position='Body'),
  initRequired?: boolean(name='InitRequired', example='false', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  name: string(name='Name', example='sacc', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
}

model SubmitFabricChaincodeDefinitionResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: ChaincodeVO(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model SubmitFabricChaincodeDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitFabricChaincodeDefinitionResponseBody(name='body'),
}

async function submitFabricChaincodeDefinition(request: SubmitFabricChaincodeDefinitionRequest): SubmitFabricChaincodeDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitFabricChaincodeDefinition', 'POST', '/', 'json', true, 'form', request);
}

model SynchronizeFabricChaincodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='code-sacc-1pr09q7jm****', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
}

model SynchronizeFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jm****'),
    chaincodeName?: string(name='ChaincodeName', example='mychaincode'),
    chaincodeVersion?: string(name='ChaincodeVersion', example='1.0'),
    channelName?: string(name='ChannelName', example='chan-channelx-1l1hmckuuisxo'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****'),
    createTime?: string(name='CreateTime', example='1533025590'),
    deployTime?: string(name='DeployTime', example='1533025590'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")'),
    input?: string(name='Input', example='input'),
    install?: boolean(name='Install', example='false'),
    message?: string(name='Message', example='ok'),
    path?: string(name='Path', example='go-sdk-demo/chaincode/src'),
    providerId?: string(name='ProviderId', example='provider'),
    providerName?: string(name='ProviderName', example='name'),
    state?: string(name='State', example='Running'),
    type?: int32(name='Type', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model SynchronizeFabricChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SynchronizeFabricChaincodeResponseBody(name='body'),
}

async function synchronizeFabricChaincode(request: SynchronizeFabricChaincodeRequest): SynchronizeFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SynchronizeFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceId?: [ string ](name='ResourceId', example='peers-tf000eihjli000beijing-bl6rdwi82tget', position='Query'),
  resourceType: string(name='ResourceType', example='organization', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='21B8738D-254C-4933-9FC1-3C31B2611482'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnfreezeAntChainAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account: string(name='Account', example='accountname', position='Body'),
  antChainId: string(name='AntChainId', example='1q8B5R9p', position='Body'),
}

model UnfreezeAntChainAccountResponseBody = {
  requestId?: string(name='RequestId', example='6ED983D3-C131-4104-8BDD-1F37992258E1'),
  result?: string(name='Result', example='success'),
}

model UnfreezeAntChainAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnfreezeAntChainAccountResponseBody(name='body'),
}

async function unfreezeAntChainAccount(request: UnfreezeAntChainAccountRequest): UnfreezeAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnfreezeAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  all?: boolean(name='All', example='true', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='peers-tf000eihjli000shanghai-yqxvj52lruxx', position='Query'),
  resourceType: string(name='ResourceType', example='organization', position='Query'),
  tagKey?: [ string ](name='TagKey', example='key1', position='Query'),
}

model UntagResourcesResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='21B8738D-254C-4933-9FC1-3C31B2611482'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAntChainRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='pYogqb9v', position='Body'),
  antChainName: string(name='AntChainName', position='Body'),
}

model UpdateAntChainResponseBody = {
  requestId?: string(name='RequestId', example='F6A52E53-2CCB-4C3C-A44D-45FAEBC24E47'),
  result?: string(name='Result', example='success'),
}

model UpdateAntChainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainResponseBody(name='body'),
}

async function updateAntChain(request: UpdateAntChainRequest): UpdateAntChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChain', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainConsortiumRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumDescription?: string(name='ConsortiumDescription', position='Body'),
  consortiumId: string(name='ConsortiumId', example='q0oWq92P', position='Body'),
  consortiumName: string(name='ConsortiumName', position='Body'),
}

model UpdateAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId', example='1E55C947-19B4-4AAD-9D22-0B8DA8904B3D'),
  result?: string(name='Result', example='success'),
}

model UpdateAntChainConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainConsortiumResponseBody(name='body'),
}

async function updateAntChainConsortium(request: UpdateAntChainConsortiumRequest): UpdateAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainContractContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  content?: string(name='Content', example='update content', position='Body'),
  contentId: string(name='ContentId', example='R6XMn59e', position='Body'),
  contentName?: string(name='ContentName', example='newFile', position='Body'),
  parentContentId?: string(name='ParentContentId', example='R38DYDop', position='Body'),
}

model UpdateAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId', example='08CBD579-C430-4F1F-9011-C120FA1E9B97'),
  result?: string(name='Result', example='success'),
}

model UpdateAntChainContractContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainContractContentResponseBody(name='body'),
}

async function updateAntChainContractContent(request: UpdateAntChainContractContentRequest): UpdateAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectDescription?: string(name='ProjectDescription', position='Body'),
  projectId: string(name='ProjectId', example='bDXK1b8Z', position='Body'),
  projectName?: string(name='ProjectName', position='Body'),
  projectVersion?: string(name='ProjectVersion', example='v1.1.1', position='Body'),
}

model UpdateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId', example='9EBD381E-A19E-4875-8771-EDA08A0416D3'),
  result?: string(name='Result', example='success'),
}

model UpdateAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainContractProjectResponseBody(name='body'),
}

async function updateAntChainContractProject(request: UpdateAntChainContractProjectRequest): UpdateAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', example='AroN3X2l', position='Body'),
  memberId: string(name='MemberId', example='1287126353301234', position='Body'),
  memberName: string(name='MemberName', example='updatename', position='Body'),
}

model UpdateAntChainMemberResponseBody = {
  requestId?: string(name='RequestId', example='5BA242B2-AB0C-4D06-94EB-23CEC4F7B95E'),
  result?: string(name='Result', example='success'),
}

model UpdateAntChainMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainMemberResponseBody(name='body'),
}

async function updateAntChainMember(request: UpdateAntChainMemberRequest): UpdateAntChainMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainMember', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainQRCodeAuthorizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', example='bDXK6boZ', position='Body'),
  authorizationType: string(name='AuthorizationType', example='ALL_USER_AUTHORIZATION', position='Body'),
  QRCodeType: string(name='QRCodeType', example='MINI_APP_BROWSER_TRANSACTION', position='Body'),
}

model UpdateAntChainQRCodeAuthorizationResponseBody = {
  requestId?: string(name='RequestId', example='D68D66B6-1964-4073-8714-B49F5EF1AEFC'),
  result?: string(name='Result', example='success'),
}

model UpdateAntChainQRCodeAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainQRCodeAuthorizationResponseBody(name='body'),
}

async function updateAntChainQRCodeAuthorization(request: UpdateAntChainQRCodeAuthorizationRequest): UpdateAntChainQRCodeAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainQRCodeAuthorization', 'POST', '/', 'json', true, 'form', request);
}

model UpgradeFabricChaincodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='code-sacc-fk9z4r97****', position='Body'),
  collectionConfig?: string(name='CollectionConfig', example='[{"requiredPeerCount":0,"name":"collectionName","maxPeerCount":3,"blockToLive":0,"policy":"OR(\\"Org1MSP.peer\\")"}]', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', example='OR ("wholesalerMSP.peer")', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-wholesaler-15ix77tof****', position='Body'),
}

model UpgradeFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='A6CC6C63-2D71-4D0C-AEBE-E95F0127C514'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='code-sacc-fk9z4r97****'),
    chaincodeName?: string(name='ChaincodeName', example='mychaincode'),
    chaincodeVersion?: string(name='ChaincodeVersion', example='1.0'),
    channelName?: string(name='ChannelName', example='cc'),
    consortiumId?: string(name='ConsortiumId', example='consortium-supplychain-1pxzsp5tb****'),
    createTime?: string(name='CreateTime', example='1545215617000'),
    deployTime?: string(name='DeployTime', example='1545215617000'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR ("wholesalerMSP.peer")'),
    input?: string(name='Input', example='input'),
    install?: boolean(name='Install', example='false'),
    message?: string(name='Message', example='OK'),
    path?: string(name='Path', example='github.com/sacc'),
    providerId?: string(name='ProviderId', example='1928592'),
    providerName?: string(name='ProviderName', example='uid-1928592'),
    state?: string(name='State', example='Running'),
    type?: int32(name='Type', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeFabricChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeFabricChaincodeResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function upgradeFabricChaincode(request: UpgradeFabricChaincodeRequest): UpgradeFabricChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeFabricChaincode', 'POST', '/', 'json', true, 'form', request);
}

model UpgradeFabricChaincodeDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='code-sacc-jbkuldd3i7ad', position='Body'),
  chaincodePackageId: string(name='ChaincodePackageId', example='sacc_v1.0:698d4e73c5f1d0239fbf0313ac79ddfaf44d5a803ecb02a4d1983cca4a706860', position='Body'),
  chaincodeVersion: string(name='ChaincodeVersion', example='1.1', position='Body'),
  collectionConfig?: string(name='CollectionConfig', example='collectionconfig', position='Body'),
  endorsePolicy: string(name='EndorsePolicy', example='OR ("perf9141MSP.member")', position='Body'),
  initRequired?: boolean(name='InitRequired', example='true', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
}

model UpgradeFabricChaincodeDefinitionResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='1E55C947-19B4-4AAD-9D22-0B8DA8904B3D'),
  result?: ChaincodeVO(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeFabricChaincodeDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeFabricChaincodeDefinitionResponseBody(name='body'),
}

async function upgradeFabricChaincodeDefinition(request: UpgradeFabricChaincodeDefinitionRequest): UpgradeFabricChaincodeDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeFabricChaincodeDefinition', 'POST', '/', 'json', true, 'form', request);
}

