/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'baas.aliyuncs.com',
    cn-beijing = 'baas.aliyuncs.com',
    cn-zhangjiakou = 'baas.aliyuncs.com',
    cn-huhehaote = 'baas.aliyuncs.com',
    cn-shanghai = 'baas.aliyuncs.com',
    cn-shenzhen = 'baas.aliyuncs.com',
    cn-hongkong = 'baas.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'baas.ap-southeast-1.aliyuncs.com',
    ap-northeast-1 = 'baas.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'baas.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'baas.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'baas.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'baas.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'baas.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('baas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ChaincodePackage {
  chaincodePackageId?: string(name='ChaincodePackageId', description='链码包ID'),
  checksum?: string(name='Checksum', description='链码校验值'),
  deleteTime?: string(name='DeleteTime', description='删除时间'),
  deleted?: boolean(name='Deleted', description='是否删除'),
  installTime?: string(name='InstallTime', description='安装时间'),
  label?: string(name='Label', description='链码label'),
  md5sum?: string(name='Md5sum', description='链码md5值'),
  message?: string(name='Message', description='信息'),
  organizationId?: string(name='OrganizationId', description='组织ID'),
  ossURL?: string(name='OssURL', description='链码包存放bucket内路径'),
  providerBid?: string(name='ProviderBid', description='上传者Bid'),
  providerUid?: string(name='ProviderUid', description='上传者Uid'),
  state?: string(name='State', description='链码状态'),
  type?: int32(name='Type', description='链码类型'),
  typeName?: string(name='TypeName', description='链码类型'),
  uploadTime?: string(name='UploadTime', description='上传时间'),
}

model ChaincodeVO {
  chaincodeDefinitionId?: string(name='ChaincodeDefinitionId', description='链码定义ID'),
  chaincodeId?: string(name='ChaincodeId', description='链码ID'),
  chaincodePackageId?: string(name='ChaincodePackageId', description='链码包ID'),
  channelId?: string(name='ChannelId', description='通道ID'),
  channelName?: string(name='ChannelName', description='通道名称'),
  consortiumId?: string(name='ConsortiumId', description='联盟ID'),
  createTime?: string(name='CreateTime', description='创建时间'),
  deployTime?: string(name='DeployTime', description='安装部署时间'),
  endorsePolicy?: string(name='EndorsePolicy', description='背书策略'),
  initRequired?: boolean(name='InitRequired', description='是否需要初始化'),
  input?: string(name='Input', description='链码初始化参数'),
  install?: boolean(name='Install', description='链码是否安装'),
  management?: boolean(name='Management', description='是否是管理链码'),
  message?: string(name='Message', description='信息'),
  name?: string(name='Name', description='链码包名称'),
  path?: string(name='Path', description='链码路径'),
  providerId?: string(name='ProviderId', description='上传者ID'),
  providerName?: string(name='ProviderName', description='链码上传者'),
  state?: string(name='State', description='链码状态'),
  type?: int32(name='Type', description='链码类型'),
  version?: string(name='Version', description='链码包版本'),
}

model AcceptFabricInvitationRequest {
  code?: string(name='Code'),
  isAccepted?: boolean(name='IsAccepted'),
}

model AcceptFabricInvitationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AcceptFabricInvitationResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptFabricInvitationResponseBody(name='body'),
}

async function acceptFabricInvitationWithOptions(request: AcceptFabricInvitationRequest, runtime: Util.RuntimeOptions): AcceptFabricInvitationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.code)) {
    body['Code'] = request.code;
  }
  if (!Util.isUnset(request.isAccepted)) {
    body['IsAccepted'] = request.isAccepted;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AcceptFabricInvitation',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function acceptFabricInvitation(request: AcceptFabricInvitationRequest): AcceptFabricInvitationResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptFabricInvitationWithOptions(request, runtime);
}

model ApplyAntChainCertificateRequest {
  antChainId?: string(name='AntChainId'),
  uploadReq?: string(name='UploadReq'),
}

model ApplyAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ApplyAntChainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAntChainCertificateResponseBody(name='body'),
}

async function applyAntChainCertificateWithOptions(request: ApplyAntChainCertificateRequest, runtime: Util.RuntimeOptions): ApplyAntChainCertificateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.uploadReq)) {
    body['UploadReq'] = request.uploadReq;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAntChainCertificate',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyAntChainCertificate(request: ApplyAntChainCertificateRequest): ApplyAntChainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAntChainCertificateWithOptions(request, runtime);
}

model ApplyAntChainCertificateWithKeyAutoCreationRequest {
  antChainId?: string(name='AntChainId'),
  commonName?: string(name='CommonName'),
  consortiumId?: string(name='ConsortiumId'),
  countryName?: string(name='CountryName'),
  localityName?: string(name='LocalityName'),
  organizationName?: string(name='OrganizationName'),
  organizationUnitName?: string(name='OrganizationUnitName'),
  password?: string(name='Password'),
  stateOrProvinceName?: string(name='StateOrProvinceName'),
}

model ApplyAntChainCertificateWithKeyAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    downloadPath?: {
      caCrtUrl?: string(name='CaCrtUrl'),
      clientCrtUrl?: string(name='ClientCrtUrl'),
      sdkUrl?: string(name='SdkUrl'),
      trustCaUrl?: string(name='TrustCaUrl'),
    }(name='DownloadPath'),
    privateKey?: string(name='PrivateKey'),
  }(name='Result'),
}

model ApplyAntChainCertificateWithKeyAutoCreationResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAntChainCertificateWithKeyAutoCreationResponseBody(name='body'),
}

async function applyAntChainCertificateWithKeyAutoCreationWithOptions(request: ApplyAntChainCertificateWithKeyAutoCreationRequest, runtime: Util.RuntimeOptions): ApplyAntChainCertificateWithKeyAutoCreationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.commonName)) {
    body['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.countryName)) {
    body['CountryName'] = request.countryName;
  }
  if (!Util.isUnset(request.localityName)) {
    body['LocalityName'] = request.localityName;
  }
  if (!Util.isUnset(request.organizationName)) {
    body['OrganizationName'] = request.organizationName;
  }
  if (!Util.isUnset(request.organizationUnitName)) {
    body['OrganizationUnitName'] = request.organizationUnitName;
  }
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.stateOrProvinceName)) {
    body['StateOrProvinceName'] = request.stateOrProvinceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAntChainCertificateWithKeyAutoCreation',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyAntChainCertificateWithKeyAutoCreation(request: ApplyAntChainCertificateWithKeyAutoCreationRequest): ApplyAntChainCertificateWithKeyAutoCreationResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAntChainCertificateWithKeyAutoCreationWithOptions(request, runtime);
}

model ApproveFabricChaincodeDefinitionRequest {
  chaincodeId?: string(name='ChaincodeId'),
  chaincodePackageId?: string(name='ChaincodePackageId'),
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model ApproveFabricChaincodeDefinitionResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: ChaincodeVO(name='Result'),
  success?: boolean(name='Success'),
}

model ApproveFabricChaincodeDefinitionResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveFabricChaincodeDefinitionResponseBody(name='body'),
}

async function approveFabricChaincodeDefinitionWithOptions(request: ApproveFabricChaincodeDefinitionRequest, runtime: Util.RuntimeOptions): ApproveFabricChaincodeDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodeId)) {
    body['ChaincodeId'] = request.chaincodeId;
  }
  if (!Util.isUnset(request.chaincodePackageId)) {
    body['ChaincodePackageId'] = request.chaincodePackageId;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApproveFabricChaincodeDefinition',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approveFabricChaincodeDefinition(request: ApproveFabricChaincodeDefinitionRequest): ApproveFabricChaincodeDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveFabricChaincodeDefinitionWithOptions(request, runtime);
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest {
  antChainId?: string(name='AntChainId'),
  phoneList?: map[string]any(name='PhoneList'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest {
  antChainId?: string(name='AntChainId'),
  phoneListShrink?: string(name='PhoneList'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody(name='body'),
}

async function batchAddAntChainMiniAppQRCodeAuthorizedUsersWithOptions(tmpReq: BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest, runtime: Util.RuntimeOptions): BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse {
  Util.validateModel(tmpReq);
  var request = new BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.phoneList)) {
    request.phoneListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.phoneList, 'PhoneList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.phoneListShrink)) {
    body['PhoneList'] = request.phoneListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddAntChainMiniAppQRCodeAuthorizedUsers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAddAntChainMiniAppQRCodeAuthorizedUsers(request: BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest): BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddAntChainMiniAppQRCodeAuthorizedUsersWithOptions(request, runtime);
}

model CheckFabricConsortiumDomainRequest {
  domainCode?: string(name='DomainCode'),
}

model CheckFabricConsortiumDomainResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    domain?: string(name='Domain'),
    prompt?: string(name='Prompt'),
    valid?: boolean(name='Valid'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CheckFabricConsortiumDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CheckFabricConsortiumDomainResponseBody(name='body'),
}

async function checkFabricConsortiumDomainWithOptions(request: CheckFabricConsortiumDomainRequest, runtime: Util.RuntimeOptions): CheckFabricConsortiumDomainResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.domainCode)) {
    body['DomainCode'] = request.domainCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckFabricConsortiumDomain',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkFabricConsortiumDomain(request: CheckFabricConsortiumDomainRequest): CheckFabricConsortiumDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkFabricConsortiumDomainWithOptions(request, runtime);
}

model CheckFabricOrganizationDomainRequest {
  domain?: string(name='Domain'),
  domainCode?: string(name='DomainCode'),
}

model CheckFabricOrganizationDomainResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    domain?: string(name='Domain'),
    prompt?: string(name='Prompt'),
    valid?: boolean(name='Valid'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CheckFabricOrganizationDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CheckFabricOrganizationDomainResponseBody(name='body'),
}

async function checkFabricOrganizationDomainWithOptions(request: CheckFabricOrganizationDomainRequest, runtime: Util.RuntimeOptions): CheckFabricOrganizationDomainResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.domain)) {
    body['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.domainCode)) {
    body['DomainCode'] = request.domainCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckFabricOrganizationDomain',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkFabricOrganizationDomain(request: CheckFabricOrganizationDomainRequest): CheckFabricOrganizationDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkFabricOrganizationDomainWithOptions(request, runtime);
}

model ConfirmFabricConsortiumMemberRequest {
  consortiumId?: string(name='ConsortiumId'),
  organization?: [ 
    {
      organizationId?: string(name='OrganizationId'),
    }
  ](name='Organization'),
}

model ConfirmFabricConsortiumMemberResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model ConfirmFabricConsortiumMemberResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmFabricConsortiumMemberResponseBody(name='body'),
}

async function confirmFabricConsortiumMemberWithOptions(request: ConfirmFabricConsortiumMemberRequest, runtime: Util.RuntimeOptions): ConfirmFabricConsortiumMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consortiumId)) {
    query['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmFabricConsortiumMember',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmFabricConsortiumMember(request: ConfirmFabricConsortiumMemberRequest): ConfirmFabricConsortiumMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmFabricConsortiumMemberWithOptions(request, runtime);
}

model CopyAntChainContractProjectRequest {
  projectDescription?: string(name='ProjectDescription'),
  projectId?: string(name='ProjectId'),
  projectName?: string(name='ProjectName'),
  projectVersion?: string(name='ProjectVersion'),
}

model CopyAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    createTime?: long(name='CreateTime'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
    updateTime?: long(name='UpdateTime'),
  }(name='Result'),
}

model CopyAntChainContractProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CopyAntChainContractProjectResponseBody(name='body'),
}

async function copyAntChainContractProjectWithOptions(request: CopyAntChainContractProjectRequest, runtime: Util.RuntimeOptions): CopyAntChainContractProjectResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.projectDescription)) {
    body['ProjectDescription'] = request.projectDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.projectVersion)) {
    body['ProjectVersion'] = request.projectVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CopyAntChainContractProject',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyAntChainContractProject(request: CopyAntChainContractProjectRequest): CopyAntChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyAntChainContractProjectWithOptions(request, runtime);
}

model CreateAntChainAccountRequest {
  account?: string(name='Account'),
  accountPubKey?: string(name='AccountPubKey'),
  accountRecoverPubKey?: string(name='AccountRecoverPubKey'),
  antChainId?: string(name='AntChainId'),
}

model CreateAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    account?: string(name='Account'),
    antChainId?: string(name='AntChainId'),
  }(name='Result'),
}

model CreateAntChainAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainAccountResponseBody(name='body'),
}

async function createAntChainAccountWithOptions(request: CreateAntChainAccountRequest, runtime: Util.RuntimeOptions): CreateAntChainAccountResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.account)) {
    body['Account'] = request.account;
  }
  if (!Util.isUnset(request.accountPubKey)) {
    body['AccountPubKey'] = request.accountPubKey;
  }
  if (!Util.isUnset(request.accountRecoverPubKey)) {
    body['AccountRecoverPubKey'] = request.accountRecoverPubKey;
  }
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAntChainAccount',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAntChainAccount(request: CreateAntChainAccountRequest): CreateAntChainAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntChainAccountWithOptions(request, runtime);
}

model CreateAntChainAccountWithKeyPairAutoCreationRequest {
  account?: string(name='Account'),
  antChainId?: string(name='AntChainId'),
  password?: string(name='Password'),
  recoverPassword?: string(name='RecoverPassword'),
}

model CreateAntChainAccountWithKeyPairAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    account?: string(name='Account'),
    accountPrivateKey?: string(name='AccountPrivateKey'),
    accountPublicKey?: string(name='AccountPublicKey'),
    accountRecoverPrivateKey?: string(name='AccountRecoverPrivateKey'),
    accountRecoverPublicKey?: string(name='AccountRecoverPublicKey'),
    antChainId?: string(name='AntChainId'),
  }(name='Result'),
}

model CreateAntChainAccountWithKeyPairAutoCreationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainAccountWithKeyPairAutoCreationResponseBody(name='body'),
}

async function createAntChainAccountWithKeyPairAutoCreationWithOptions(request: CreateAntChainAccountWithKeyPairAutoCreationRequest, runtime: Util.RuntimeOptions): CreateAntChainAccountWithKeyPairAutoCreationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.account)) {
    body['Account'] = request.account;
  }
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.recoverPassword)) {
    body['RecoverPassword'] = request.recoverPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAntChainAccountWithKeyPairAutoCreation',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAntChainAccountWithKeyPairAutoCreation(request: CreateAntChainAccountWithKeyPairAutoCreationRequest): CreateAntChainAccountWithKeyPairAutoCreationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntChainAccountWithKeyPairAutoCreationWithOptions(request, runtime);
}

model CreateAntChainConsortiumRequest {
  consortiumDescription?: string(name='ConsortiumDescription'),
  consortiumName?: string(name='ConsortiumName'),
}

model CreateAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
  }(name='Result'),
}

model CreateAntChainConsortiumResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainConsortiumResponseBody(name='body'),
}

async function createAntChainConsortiumWithOptions(request: CreateAntChainConsortiumRequest, runtime: Util.RuntimeOptions): CreateAntChainConsortiumResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumDescription)) {
    body['ConsortiumDescription'] = request.consortiumDescription;
  }
  if (!Util.isUnset(request.consortiumName)) {
    body['ConsortiumName'] = request.consortiumName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAntChainConsortium',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAntChainConsortium(request: CreateAntChainConsortiumRequest): CreateAntChainConsortiumResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntChainConsortiumWithOptions(request, runtime);
}

model CreateAntChainContractContentRequest {
  content?: string(name='Content'),
  contentName?: string(name='ContentName'),
  isDirectory?: boolean(name='IsDirectory'),
  parentContentId?: string(name='ParentContentId'),
  projectId?: string(name='ProjectId'),
}

model CreateAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    content?: string(name='Content'),
    contentId?: string(name='ContentId'),
    contentName?: string(name='ContentName'),
    createTime?: string(name='CreateTime'),
    isDirectory?: boolean(name='IsDirectory'),
    parentContentId?: string(name='ParentContentId'),
    projectId?: string(name='ProjectId'),
    updateTime?: string(name='UpdateTime'),
  }(name='Result'),
}

model CreateAntChainContractContentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainContractContentResponseBody(name='body'),
}

async function createAntChainContractContentWithOptions(request: CreateAntChainContractContentRequest, runtime: Util.RuntimeOptions): CreateAntChainContractContentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentName)) {
    body['ContentName'] = request.contentName;
  }
  if (!Util.isUnset(request.isDirectory)) {
    body['IsDirectory'] = request.isDirectory;
  }
  if (!Util.isUnset(request.parentContentId)) {
    body['ParentContentId'] = request.parentContentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAntChainContractContent',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAntChainContractContent(request: CreateAntChainContractContentRequest): CreateAntChainContractContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntChainContractContentWithOptions(request, runtime);
}

model CreateAntChainContractProjectRequest {
  consortiumId?: string(name='ConsortiumId'),
  projectDescription?: string(name='ProjectDescription'),
  projectName?: string(name='ProjectName'),
  projectVersion?: string(name='ProjectVersion'),
}

model CreateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    createTime?: long(name='CreateTime'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
    updateTime?: long(name='UpdateTime'),
  }(name='Result'),
}

model CreateAntChainContractProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntChainContractProjectResponseBody(name='body'),
}

async function createAntChainContractProjectWithOptions(request: CreateAntChainContractProjectRequest, runtime: Util.RuntimeOptions): CreateAntChainContractProjectResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.projectDescription)) {
    body['ProjectDescription'] = request.projectDescription;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.projectVersion)) {
    body['ProjectVersion'] = request.projectVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAntChainContractProject',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAntChainContractProject(request: CreateAntChainContractProjectRequest): CreateAntChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntChainContractProjectWithOptions(request, runtime);
}

model CreateFabricChaincodeRequest {
  channelId?: string(name='ChannelId'),
  consortiumId?: string(name='ConsortiumId'),
  endorsePolicy?: string(name='EndorsePolicy'),
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
  ossBucket?: string(name='OssBucket'),
  ossUrl?: string(name='OssUrl'),
}

model CreateFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricChaincodeResponseBody(name='body'),
}

async function createFabricChaincodeWithOptions(request: CreateFabricChaincodeRequest, runtime: Util.RuntimeOptions): CreateFabricChaincodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.channelId)) {
    body['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.endorsePolicy)) {
    body['EndorsePolicy'] = request.endorsePolicy;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.ossBucket)) {
    body['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossUrl)) {
    body['OssUrl'] = request.ossUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFabricChaincode',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFabricChaincode(request: CreateFabricChaincodeRequest): CreateFabricChaincodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFabricChaincodeWithOptions(request, runtime);
}

model CreateFabricChaincodePackageRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
  ossUrl?: string(name='OssUrl'),
}

model CreateFabricChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: ChaincodePackage(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricChaincodePackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricChaincodePackageResponseBody(name='body'),
}

async function createFabricChaincodePackageWithOptions(request: CreateFabricChaincodePackageRequest, runtime: Util.RuntimeOptions): CreateFabricChaincodePackageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.ossUrl)) {
    body['OssUrl'] = request.ossUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFabricChaincodePackage',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFabricChaincodePackage(request: CreateFabricChaincodePackageRequest): CreateFabricChaincodePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFabricChaincodePackageWithOptions(request, runtime);
}

model CreateFabricChannelRequest {
  batchTimeout?: int32(name='BatchTimeout'),
  channelName?: string(name='ChannelName'),
  consortiumId?: string(name='ConsortiumId'),
  maxMessageCount?: int32(name='MaxMessageCount'),
  organization?: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Organization'),
  preferredMaxBytes?: int32(name='PreferredMaxBytes'),
}

model CreateFabricChannelResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    batchTimeout?: int32(name='BatchTimeout'),
    blockCount?: int32(name='BlockCount'),
    chaincodeCount?: int32(name='ChaincodeCount'),
    channelId?: string(name='ChannelId'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    createTime?: string(name='CreateTime'),
    maxMessageCount?: int32(name='MaxMessageCount'),
    memberCount?: int32(name='MemberCount'),
    ownerBid?: string(name='OwnerBid'),
    ownerName?: string(name='OwnerName'),
    ownerUid?: long(name='OwnerUid'),
    preferredMaxBytes?: int32(name='PreferredMaxBytes'),
    requestId?: string(name='RequestId'),
    state?: string(name='State'),
    supportConfig?: boolean(name='SupportConfig'),
    updateTime?: string(name='UpdateTime'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricChannelResponseBody(name='body'),
}

async function createFabricChannelWithOptions(request: CreateFabricChannelRequest, runtime: Util.RuntimeOptions): CreateFabricChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelName)) {
    query['ChannelName'] = request.channelName;
  }
  if (!Util.isUnset(request.consortiumId)) {
    query['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.batchTimeout)) {
    body['BatchTimeout'] = request.batchTimeout;
  }
  if (!Util.isUnset(request.maxMessageCount)) {
    body['MaxMessageCount'] = request.maxMessageCount;
  }
  if (!Util.isUnset(request.preferredMaxBytes)) {
    body['PreferredMaxBytes'] = request.preferredMaxBytes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFabricChannel',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFabricChannel(request: CreateFabricChannelRequest): CreateFabricChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFabricChannelWithOptions(request, runtime);
}

model CreateFabricChannelMemberRequest {
  channelId?: string(name='ChannelId'),
  organization?: [ 
    {
      organizationId?: string(name='OrganizationId'),
    }
  ](name='Organization'),
}

model CreateFabricChannelMemberResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricChannelMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricChannelMemberResponseBody(name='body'),
}

async function createFabricChannelMemberWithOptions(request: CreateFabricChannelMemberRequest, runtime: Util.RuntimeOptions): CreateFabricChannelMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFabricChannelMember',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFabricChannelMember(request: CreateFabricChannelMemberRequest): CreateFabricChannelMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFabricChannelMemberWithOptions(request, runtime);
}

model CreateFabricConsortiumRequest {
  channelPolicy?: string(name='ChannelPolicy'),
  consortiumDescription?: string(name='ConsortiumDescription'),
  consortiumName?: string(name='ConsortiumName'),
  domain?: string(name='Domain'),
  location?: string(name='Location'),
  ordererType?: string(name='OrdererType'),
  orderersCount?: int32(name='OrderersCount'),
  organization?: [ 
    {
      organizationId?: string(name='OrganizationId'),
    }
  ](name='Organization'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  peersCount?: int32(name='PeersCount'),
  specName?: string(name='SpecName'),
  zoneId?: string(name='ZoneId'),
}

model CreateFabricConsortiumResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelCount?: int32(name='ChannelCount'),
    channelPolicy?: string(name='ChannelPolicy'),
    clusterState?: string(name='ClusterState'),
    codeName?: string(name='CodeName'),
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    domain?: string(name='Domain'),
    memberCount?: int32(name='MemberCount'),
    ordererCount?: int32(name='OrdererCount'),
    ordererType?: string(name='OrdererType'),
    ownerBid?: string(name='OwnerBid'),
    ownerUid?: long(name='OwnerUid'),
    regionId?: string(name='RegionId'),
    serviceState?: string(name='ServiceState'),
    specName?: string(name='SpecName'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricConsortiumResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricConsortiumResponseBody(name='body'),
}

async function createFabricConsortiumWithOptions(request: CreateFabricConsortiumRequest, runtime: Util.RuntimeOptions): CreateFabricConsortiumResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.channelPolicy)) {
    body['ChannelPolicy'] = request.channelPolicy;
  }
  if (!Util.isUnset(request.consortiumDescription)) {
    body['ConsortiumDescription'] = request.consortiumDescription;
  }
  if (!Util.isUnset(request.consortiumName)) {
    body['ConsortiumName'] = request.consortiumName;
  }
  if (!Util.isUnset(request.domain)) {
    body['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.ordererType)) {
    body['OrdererType'] = request.ordererType;
  }
  if (!Util.isUnset(request.orderersCount)) {
    body['OrderersCount'] = request.orderersCount;
  }
  if (!Util.isUnset(request.organization)) {
    body['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.paymentDuration)) {
    body['PaymentDuration'] = request.paymentDuration;
  }
  if (!Util.isUnset(request.paymentDurationUnit)) {
    body['PaymentDurationUnit'] = request.paymentDurationUnit;
  }
  if (!Util.isUnset(request.peersCount)) {
    body['PeersCount'] = request.peersCount;
  }
  if (!Util.isUnset(request.specName)) {
    body['SpecName'] = request.specName;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFabricConsortium',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFabricConsortium(request: CreateFabricConsortiumRequest): CreateFabricConsortiumResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFabricConsortiumWithOptions(request, runtime);
}

model CreateFabricConsortiumMemberRequest {
  code?: string(name='Code'),
  consortiumId?: string(name='ConsortiumId'),
  organization?: [ 
    {
      organizationId?: string(name='OrganizationId'),
    }
  ](name='Organization'),
}

model CreateFabricConsortiumMemberResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricConsortiumMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricConsortiumMemberResponseBody(name='body'),
}

async function createFabricConsortiumMemberWithOptions(request: CreateFabricConsortiumMemberRequest, runtime: Util.RuntimeOptions): CreateFabricConsortiumMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.consortiumId)) {
    query['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFabricConsortiumMember',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFabricConsortiumMember(request: CreateFabricConsortiumMemberRequest): CreateFabricConsortiumMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFabricConsortiumMemberWithOptions(request, runtime);
}

model CreateFabricOrganizationRequest {
  description?: string(name='Description'),
  domain?: string(name='Domain'),
  location?: string(name='Location'),
  organizationName?: string(name='OrganizationName'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  peersCount?: int32(name='PeersCount'),
  specName?: string(name='SpecName'),
}

model CreateFabricOrganizationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    clusterState?: string(name='ClusterState'),
    codeName?: string(name='CodeName'),
    consortiumCount?: int32(name='ConsortiumCount'),
    createTime?: string(name='CreateTime'),
    domain?: string(name='Domain'),
    organizationDescription?: string(name='OrganizationDescription'),
    organizationId?: string(name='OrganizationId'),
    organizationName?: string(name='OrganizationName'),
    ownerBid?: string(name='OwnerBid'),
    ownerName?: string(name='OwnerName'),
    ownerUid?: long(name='OwnerUid'),
    peerCount?: int32(name='PeerCount'),
    regionId?: string(name='RegionId'),
    requestId?: string(name='RequestId'),
    serviceState?: string(name='ServiceState'),
    specName?: string(name='SpecName'),
    userCount?: int32(name='UserCount'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricOrganizationResponseBody(name='body'),
}

async function createFabricOrganizationWithOptions(request: CreateFabricOrganizationRequest, runtime: Util.RuntimeOptions): CreateFabricOrganizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationName)) {
    query['OrganizationName'] = request.organizationName;
  }
  if (!Util.isUnset(request.specName)) {
    query['SpecName'] = request.specName;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.paymentDuration)) {
    body['PaymentDuration'] = request.paymentDuration;
  }
  if (!Util.isUnset(request.paymentDurationUnit)) {
    body['PaymentDurationUnit'] = request.paymentDurationUnit;
  }
  if (!Util.isUnset(request.peersCount)) {
    body['PeersCount'] = request.peersCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFabricOrganization',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFabricOrganization(request: CreateFabricOrganizationRequest): CreateFabricOrganizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFabricOrganizationWithOptions(request, runtime);
}

model CreateFabricOrganizationUserRequest {
  attrs?: string(name='Attrs'),
  organizationId?: string(name='OrganizationId'),
  password?: string(name='Password'),
  username?: string(name='Username'),
}

model CreateFabricOrganizationUserResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    fullname?: string(name='Fullname'),
    organizationId?: string(name='OrganizationId'),
    password?: string(name='Password'),
    username?: string(name='Username'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricOrganizationUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFabricOrganizationUserResponseBody(name='body'),
}

async function createFabricOrganizationUserWithOptions(request: CreateFabricOrganizationUserRequest, runtime: Util.RuntimeOptions): CreateFabricOrganizationUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.attrs)) {
    body['Attrs'] = request.attrs;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.username)) {
    body['Username'] = request.username;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFabricOrganizationUser',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFabricOrganizationUser(request: CreateFabricOrganizationUserRequest): CreateFabricOrganizationUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFabricOrganizationUserWithOptions(request, runtime);
}

model DeleteAntChainConsortiumRequest {
  consortiumId?: string(name='ConsortiumId'),
}

model DeleteAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainConsortiumResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntChainConsortiumResponseBody(name='body'),
}

async function deleteAntChainConsortiumWithOptions(request: DeleteAntChainConsortiumRequest, runtime: Util.RuntimeOptions): DeleteAntChainConsortiumResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAntChainConsortium',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAntChainConsortium(request: DeleteAntChainConsortiumRequest): DeleteAntChainConsortiumResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAntChainConsortiumWithOptions(request, runtime);
}

model DeleteAntChainContractContentRequest {
  contentId?: string(name='ContentId'),
}

model DeleteAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainContractContentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntChainContractContentResponseBody(name='body'),
}

async function deleteAntChainContractContentWithOptions(request: DeleteAntChainContractContentRequest, runtime: Util.RuntimeOptions): DeleteAntChainContractContentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.contentId)) {
    body['ContentId'] = request.contentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAntChainContractContent',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAntChainContractContent(request: DeleteAntChainContractContentRequest): DeleteAntChainContractContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAntChainContractContentWithOptions(request, runtime);
}

model DeleteAntChainContractProjectRequest {
  projectId?: string(name='ProjectId'),
}

model DeleteAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainContractProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntChainContractProjectResponseBody(name='body'),
}

async function deleteAntChainContractProjectWithOptions(request: DeleteAntChainContractProjectRequest, runtime: Util.RuntimeOptions): DeleteAntChainContractProjectResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAntChainContractProject',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAntChainContractProject(request: DeleteAntChainContractProjectRequest): DeleteAntChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAntChainContractProjectWithOptions(request, runtime);
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserRequest {
  antChainId?: string(name='AntChainId'),
  phone?: string(name='Phone'),
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody(name='body'),
}

async function deleteAntChainMiniAppQRCodeAuthorizedUserWithOptions(request: DeleteAntChainMiniAppQRCodeAuthorizedUserRequest, runtime: Util.RuntimeOptions): DeleteAntChainMiniAppQRCodeAuthorizedUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.phone)) {
    body['Phone'] = request.phone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAntChainMiniAppQRCodeAuthorizedUser',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAntChainMiniAppQRCodeAuthorizedUser(request: DeleteAntChainMiniAppQRCodeAuthorizedUserRequest): DeleteAntChainMiniAppQRCodeAuthorizedUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAntChainMiniAppQRCodeAuthorizedUserWithOptions(request, runtime);
}

model DeleteFabricChaincodeRequest {
  chaincodeId?: string(name='ChaincodeId'),
}

model DeleteFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFabricChaincodeResponseBody(name='body'),
}

async function deleteFabricChaincodeWithOptions(request: DeleteFabricChaincodeRequest, runtime: Util.RuntimeOptions): DeleteFabricChaincodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodeId)) {
    body['ChaincodeId'] = request.chaincodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFabricChaincode',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFabricChaincode(request: DeleteFabricChaincodeRequest): DeleteFabricChaincodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFabricChaincodeWithOptions(request, runtime);
}

model DescribeAntChainAccountsRequest {
  antChainId?: string(name='AntChainId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accounts?: [ 
      {
        account?: string(name='Account'),
        accountPublicKey?: string(name='AccountPublicKey'),
        accountRecoveryKey?: string(name='AccountRecoveryKey'),
        accountStatus?: string(name='AccountStatus'),
        antChainId?: string(name='AntChainId'),
      }
    ](name='Accounts'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainAccountsResponseBody(name='body'),
}

async function describeAntChainAccountsWithOptions(request: DescribeAntChainAccountsRequest, runtime: Util.RuntimeOptions): DescribeAntChainAccountsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainAccounts',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainAccounts(request: DescribeAntChainAccountsRequest): DescribeAntChainAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainAccountsWithOptions(request, runtime);
}

model DescribeAntChainAccountsV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainAccountsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    accounts?: [ 
      {
        account?: string(name='Account'),
        accountPublicKey?: string(name='AccountPublicKey'),
        accountRecoveryKey?: string(name='AccountRecoveryKey'),
        accountStatus?: string(name='AccountStatus'),
        antChainId?: string(name='AntChainId'),
      }
    ](name='Accounts'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainAccountsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainAccountsV2ResponseBody(name='body'),
}

async function describeAntChainAccountsV2WithOptions(request: DescribeAntChainAccountsV2Request, runtime: Util.RuntimeOptions): DescribeAntChainAccountsV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainAccountsV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainAccountsV2(request: DescribeAntChainAccountsV2Request): DescribeAntChainAccountsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainAccountsV2WithOptions(request, runtime);
}

model DescribeAntChainBlockRequest {
  antChainId?: string(name='AntChainId'),
  height?: long(name='Height'),
}

model DescribeAntChainBlockResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    blockHash?: string(name='BlockHash'),
    createTime?: long(name='CreateTime'),
    height?: int32(name='Height'),
    previousHash?: string(name='PreviousHash'),
    rootTxHash?: string(name='RootTxHash'),
    transSummaryList?: string(name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize'),
    version?: long(name='Version'),
  }(name='Result'),
}

model DescribeAntChainBlockResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainBlockResponseBody(name='body'),
}

async function describeAntChainBlockWithOptions(request: DescribeAntChainBlockRequest, runtime: Util.RuntimeOptions): DescribeAntChainBlockResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.height)) {
    body['Height'] = request.height;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainBlock',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainBlock(request: DescribeAntChainBlockRequest): DescribeAntChainBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainBlockWithOptions(request, runtime);
}

model DescribeAntChainBlockV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
  height?: long(name='Height'),
}

model DescribeAntChainBlockV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    blockHash?: string(name='BlockHash'),
    createTime?: long(name='CreateTime'),
    height?: int32(name='Height'),
    previousHash?: string(name='PreviousHash'),
    rootTxHash?: string(name='RootTxHash'),
    transSummaryList?: [ 
      {
        alias?: string(name='Alias'),
        blockHash?: string(name='BlockHash'),
        category?: int32(name='Category'),
        createTime?: long(name='CreateTime'),
        from?: string(name='From'),
        gasUsed?: long(name='GasUsed'),
        hash?: string(name='Hash'),
        height?: long(name='Height'),
        referenceCount?: int32(name='ReferenceCount'),
        to?: string(name='To'),
        transTypeV10?: string(name='TransTypeV10'),
        transTypeV6?: string(name='TransTypeV6'),
      }
    ](name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize'),
    version?: long(name='Version'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainBlockV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainBlockV2ResponseBody(name='body'),
}

async function describeAntChainBlockV2WithOptions(request: DescribeAntChainBlockV2Request, runtime: Util.RuntimeOptions): DescribeAntChainBlockV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.height)) {
    body['Height'] = request.height;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainBlockV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainBlockV2(request: DescribeAntChainBlockV2Request): DescribeAntChainBlockV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainBlockV2WithOptions(request, runtime);
}

model DescribeAntChainCertificateApplicationsRequest {
  antChainId?: string(name='AntChainId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model DescribeAntChainCertificateApplicationsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    certificateApplications?: [ 
      {
        antChainId?: string(name='AntChainId'),
        bid?: string(name='Bid'),
        createtime?: long(name='Createtime'),
        status?: string(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='CertificateApplications'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainCertificateApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainCertificateApplicationsResponseBody(name='body'),
}

async function describeAntChainCertificateApplicationsWithOptions(request: DescribeAntChainCertificateApplicationsRequest, runtime: Util.RuntimeOptions): DescribeAntChainCertificateApplicationsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainCertificateApplications',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainCertificateApplications(request: DescribeAntChainCertificateApplicationsRequest): DescribeAntChainCertificateApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainCertificateApplicationsWithOptions(request, runtime);
}

model DescribeAntChainCertificateApplicationsV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model DescribeAntChainCertificateApplicationsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    certificateApplications?: [ 
      {
        antChainId?: string(name='AntChainId'),
        bid?: string(name='Bid'),
        createtime?: long(name='Createtime'),
        status?: string(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='CertificateApplications'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainCertificateApplicationsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainCertificateApplicationsV2ResponseBody(name='body'),
}

async function describeAntChainCertificateApplicationsV2WithOptions(request: DescribeAntChainCertificateApplicationsV2Request, runtime: Util.RuntimeOptions): DescribeAntChainCertificateApplicationsV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainCertificateApplicationsV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainCertificateApplicationsV2(request: DescribeAntChainCertificateApplicationsV2Request): DescribeAntChainCertificateApplicationsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainCertificateApplicationsV2WithOptions(request, runtime);
}

model DescribeAntChainConsortiumsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainConsortiumsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antConsortiums?: [ 
      {
        chainNum?: long(name='ChainNum'),
        consortiumDescription?: string(name='ConsortiumDescription'),
        consortiumId?: string(name='ConsortiumId'),
        consortiumName?: string(name='ConsortiumName'),
        createTime?: long(name='CreateTime'),
        memberNum?: long(name='MemberNum'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='AntConsortiums'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainConsortiumsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainConsortiumsResponseBody(name='body'),
}

async function describeAntChainConsortiumsWithOptions(request: DescribeAntChainConsortiumsRequest, runtime: Util.RuntimeOptions): DescribeAntChainConsortiumsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainConsortiums',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainConsortiums(request: DescribeAntChainConsortiumsRequest): DescribeAntChainConsortiumsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainConsortiumsWithOptions(request, runtime);
}

model DescribeAntChainConsortiumsV2Request {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainConsortiumsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antConsortiums?: [ 
      {
        chainNum?: long(name='ChainNum'),
        consortiumDescription?: string(name='ConsortiumDescription'),
        consortiumId?: string(name='ConsortiumId'),
        consortiumName?: string(name='ConsortiumName'),
        createTime?: long(name='CreateTime'),
        isEmptyConsortium?: boolean(name='IsEmptyConsortium'),
        memberNum?: long(name='MemberNum'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='AntConsortiums'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainConsortiumsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainConsortiumsV2ResponseBody(name='body'),
}

async function describeAntChainConsortiumsV2WithOptions(request: DescribeAntChainConsortiumsV2Request, runtime: Util.RuntimeOptions): DescribeAntChainConsortiumsV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainConsortiumsV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainConsortiumsV2(request: DescribeAntChainConsortiumsV2Request): DescribeAntChainConsortiumsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainConsortiumsV2WithOptions(request, runtime);
}

model DescribeAntChainContractProjectContentTreeRequest {
  projectId?: string(name='ProjectId'),
}

model DescribeAntChainContractProjectContentTreeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    children?: [  map[string]any ](name='Children'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
  }(name='Result'),
}

model DescribeAntChainContractProjectContentTreeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainContractProjectContentTreeResponseBody(name='body'),
}

async function describeAntChainContractProjectContentTreeWithOptions(request: DescribeAntChainContractProjectContentTreeRequest, runtime: Util.RuntimeOptions): DescribeAntChainContractProjectContentTreeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainContractProjectContentTree',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainContractProjectContentTree(request: DescribeAntChainContractProjectContentTreeRequest): DescribeAntChainContractProjectContentTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainContractProjectContentTreeWithOptions(request, runtime);
}

model DescribeAntChainContractProjectContentTreeV2Request {
  consortiumId?: string(name='ConsortiumId'),
  projectId?: string(name='ProjectId'),
}

model DescribeAntChainContractProjectContentTreeV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainContractProjectContentTreeV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainContractProjectContentTreeV2ResponseBody(name='body'),
}

async function describeAntChainContractProjectContentTreeV2WithOptions(request: DescribeAntChainContractProjectContentTreeV2Request, runtime: Util.RuntimeOptions): DescribeAntChainContractProjectContentTreeV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainContractProjectContentTreeV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainContractProjectContentTreeV2(request: DescribeAntChainContractProjectContentTreeV2Request): DescribeAntChainContractProjectContentTreeV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainContractProjectContentTreeV2WithOptions(request, runtime);
}

model DescribeAntChainContractProjectsRequest {
  consortiumId?: string(name='ConsortiumId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainContractProjectsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    contractProjects?: [ 
      {
        consortiumId?: string(name='ConsortiumId'),
        createTime?: long(name='CreateTime'),
        projectDescription?: string(name='ProjectDescription'),
        projectId?: string(name='ProjectId'),
        projectName?: string(name='ProjectName'),
        projectVersion?: string(name='ProjectVersion'),
        updateTime?: long(name='UpdateTime'),
      }
    ](name='ContractProjects'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainContractProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainContractProjectsResponseBody(name='body'),
}

async function describeAntChainContractProjectsWithOptions(request: DescribeAntChainContractProjectsRequest, runtime: Util.RuntimeOptions): DescribeAntChainContractProjectsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainContractProjects',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainContractProjects(request: DescribeAntChainContractProjectsRequest): DescribeAntChainContractProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainContractProjectsWithOptions(request, runtime);
}

model DescribeAntChainContractProjectsV2Request {
  consortiumId?: string(name='ConsortiumId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainContractProjectsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    contractProjects?: [ 
      {
        consortiumId?: string(name='ConsortiumId'),
        createTime?: long(name='CreateTime'),
        projectDescription?: string(name='ProjectDescription'),
        projectId?: string(name='ProjectId'),
        projectName?: string(name='ProjectName'),
        projectVersion?: string(name='ProjectVersion'),
        updateTime?: long(name='UpdateTime'),
      }
    ](name='ContractProjects'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainContractProjectsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainContractProjectsV2ResponseBody(name='body'),
}

async function describeAntChainContractProjectsV2WithOptions(request: DescribeAntChainContractProjectsV2Request, runtime: Util.RuntimeOptions): DescribeAntChainContractProjectsV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainContractProjectsV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainContractProjectsV2(request: DescribeAntChainContractProjectsV2Request): DescribeAntChainContractProjectsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainContractProjectsV2WithOptions(request, runtime);
}

model DescribeAntChainDownloadPathsRequest {
  antChainId?: string(name='AntChainId'),
}

model DescribeAntChainDownloadPathsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl'),
    clientCrtUrl?: string(name='ClientCrtUrl'),
    sdkUrl?: string(name='SdkUrl'),
    trustCaUrl?: string(name='TrustCaUrl'),
  }(name='Result'),
}

model DescribeAntChainDownloadPathsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainDownloadPathsResponseBody(name='body'),
}

async function describeAntChainDownloadPathsWithOptions(request: DescribeAntChainDownloadPathsRequest, runtime: Util.RuntimeOptions): DescribeAntChainDownloadPathsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainDownloadPaths',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainDownloadPaths(request: DescribeAntChainDownloadPathsRequest): DescribeAntChainDownloadPathsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainDownloadPathsWithOptions(request, runtime);
}

model DescribeAntChainDownloadPathsV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
}

model DescribeAntChainDownloadPathsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl'),
    clientCrtUrl?: string(name='ClientCrtUrl'),
    sdkUrl?: string(name='SdkUrl'),
    trustCaUrl?: string(name='TrustCaUrl'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainDownloadPathsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainDownloadPathsV2ResponseBody(name='body'),
}

async function describeAntChainDownloadPathsV2WithOptions(request: DescribeAntChainDownloadPathsV2Request, runtime: Util.RuntimeOptions): DescribeAntChainDownloadPathsV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainDownloadPathsV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainDownloadPathsV2(request: DescribeAntChainDownloadPathsV2Request): DescribeAntChainDownloadPathsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainDownloadPathsV2WithOptions(request, runtime);
}

model DescribeAntChainInformationRequest {
  antChainId?: string(name='AntChainId'),
}

model DescribeAntChainInformationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes'),
    antChainId?: string(name='AntChainId'),
    blockHeight?: int32(name='BlockHeight'),
    createTime?: long(name='CreateTime'),
    nodeInfos?: [ 
      {
        blockHeight?: long(name='BlockHeight'),
        nodeName?: string(name='NodeName'),
        status?: boolean(name='Status'),
        version?: string(name='Version'),
      }
    ](name='NodeInfos'),
    nodeNumber?: int32(name='NodeNumber'),
    normal?: boolean(name='Normal'),
    transactionSum?: int32(name='TransactionSum'),
    version?: string(name='Version'),
  }(name='Result'),
}

model DescribeAntChainInformationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainInformationResponseBody(name='body'),
}

async function describeAntChainInformationWithOptions(request: DescribeAntChainInformationRequest, runtime: Util.RuntimeOptions): DescribeAntChainInformationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainInformation',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainInformation(request: DescribeAntChainInformationRequest): DescribeAntChainInformationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainInformationWithOptions(request, runtime);
}

model DescribeAntChainInformationV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
}

model DescribeAntChainInformationV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes'),
    antChainId?: string(name='AntChainId'),
    blockHeight?: int32(name='BlockHeight'),
    createTime?: long(name='CreateTime'),
    isRole?: boolean(name='IsRole'),
    nodeInfos?: [ 
      {
        blockHeight?: long(name='BlockHeight'),
        nodeName?: string(name='NodeName'),
        status?: boolean(name='Status'),
        version?: string(name='Version'),
      }
    ](name='NodeInfos'),
    nodeNumber?: int32(name='NodeNumber'),
    normal?: boolean(name='Normal'),
    transactionSum?: int32(name='TransactionSum'),
    version?: string(name='Version'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainInformationV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainInformationV2ResponseBody(name='body'),
}

async function describeAntChainInformationV2WithOptions(request: DescribeAntChainInformationV2Request, runtime: Util.RuntimeOptions): DescribeAntChainInformationV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainInformationV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainInformationV2(request: DescribeAntChainInformationV2Request): DescribeAntChainInformationV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainInformationV2WithOptions(request, runtime);
}

model DescribeAntChainLatestBlocksRequest {
  antChainId?: string(name='AntChainId'),
}

model DescribeAntChainLatestBlocksResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainLatestBlocksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainLatestBlocksResponseBody(name='body'),
}

async function describeAntChainLatestBlocksWithOptions(request: DescribeAntChainLatestBlocksRequest, runtime: Util.RuntimeOptions): DescribeAntChainLatestBlocksResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainLatestBlocks',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainLatestBlocks(request: DescribeAntChainLatestBlocksRequest): DescribeAntChainLatestBlocksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainLatestBlocksWithOptions(request, runtime);
}

model DescribeAntChainLatestBlocksV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
}

model DescribeAntChainLatestBlocksV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      alias?: string(name='Alias'),
      bizData?: string(name='BizData'),
      blockHash?: string(name='BlockHash'),
      createTime?: long(name='CreateTime'),
      height?: long(name='Height'),
      previousHash?: string(name='PreviousHash'),
      rootTxHash?: string(name='RootTxHash'),
      size?: long(name='Size'),
      transactionSize?: long(name='TransactionSize'),
      version?: long(name='Version'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainLatestBlocksV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainLatestBlocksV2ResponseBody(name='body'),
}

async function describeAntChainLatestBlocksV2WithOptions(request: DescribeAntChainLatestBlocksV2Request, runtime: Util.RuntimeOptions): DescribeAntChainLatestBlocksV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainLatestBlocksV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainLatestBlocksV2(request: DescribeAntChainLatestBlocksV2Request): DescribeAntChainLatestBlocksV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainLatestBlocksV2WithOptions(request, runtime);
}

model DescribeAntChainLatestTransactionDigestsRequest {
  antChainId?: string(name='AntChainId'),
}

model DescribeAntChainLatestTransactionDigestsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainLatestTransactionDigestsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainLatestTransactionDigestsResponseBody(name='body'),
}

async function describeAntChainLatestTransactionDigestsWithOptions(request: DescribeAntChainLatestTransactionDigestsRequest, runtime: Util.RuntimeOptions): DescribeAntChainLatestTransactionDigestsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainLatestTransactionDigests',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainLatestTransactionDigests(request: DescribeAntChainLatestTransactionDigestsRequest): DescribeAntChainLatestTransactionDigestsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainLatestTransactionDigestsWithOptions(request, runtime);
}

model DescribeAntChainLatestTransactionDigestsV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
}

model DescribeAntChainLatestTransactionDigestsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainLatestTransactionDigestsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainLatestTransactionDigestsV2ResponseBody(name='body'),
}

async function describeAntChainLatestTransactionDigestsV2WithOptions(request: DescribeAntChainLatestTransactionDigestsV2Request, runtime: Util.RuntimeOptions): DescribeAntChainLatestTransactionDigestsV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainLatestTransactionDigestsV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainLatestTransactionDigestsV2(request: DescribeAntChainLatestTransactionDigestsV2Request): DescribeAntChainLatestTransactionDigestsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainLatestTransactionDigestsV2WithOptions(request, runtime);
}

model DescribeAntChainMembersRequest {
  consortiumId?: string(name='ConsortiumId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainMembersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    members?: [ 
      {
        joinTime?: long(name='JoinTime'),
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='Members'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMembersResponseBody(name='body'),
}

async function describeAntChainMembersWithOptions(request: DescribeAntChainMembersRequest, runtime: Util.RuntimeOptions): DescribeAntChainMembersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainMembers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainMembers(request: DescribeAntChainMembersRequest): DescribeAntChainMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainMembersWithOptions(request, runtime);
}

model DescribeAntChainMembersV2Request {
  consortiumId?: string(name='ConsortiumId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainMembersV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    members?: [ 
      {
        joinTime?: long(name='JoinTime'),
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='Members'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMembersV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMembersV2ResponseBody(name='body'),
}

async function describeAntChainMembersV2WithOptions(request: DescribeAntChainMembersV2Request, runtime: Util.RuntimeOptions): DescribeAntChainMembersV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainMembersV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainMembersV2(request: DescribeAntChainMembersV2Request): DescribeAntChainMembersV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainMembersV2WithOptions(request, runtime);
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest {
  antChainId?: string(name='AntChainId'),
  QRCodeType?: string(name='QRCodeType'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount'),
    accessCount?: long(name='AccessCount'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAccessLogWithOptions(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest, runtime: Util.RuntimeOptions): DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.QRCodeType)) {
    body['QRCodeType'] = request.QRCodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainMiniAppBrowserQRCodeAccessLog',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainMiniAppBrowserQRCodeAccessLog(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest): DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainMiniAppBrowserQRCodeAccessLogWithOptions(request, runtime);
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Request {
  antChainId?: string(name='AntChainId'),
  QRCodeType?: string(name='QRCodeType'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount'),
    accessCount?: long(name='AccessCount'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserQRCodeAccessLogV2ResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAccessLogV2WithOptions(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Request, runtime: Util.RuntimeOptions): DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.QRCodeType)) {
    body['QRCodeType'] = request.QRCodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainMiniAppBrowserQRCodeAccessLogV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainMiniAppBrowserQRCodeAccessLogV2(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Request): DescribeAntChainMiniAppBrowserQRCodeAccessLogV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainMiniAppBrowserQRCodeAccessLogV2WithOptions(request, runtime);
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest {
  antChainId?: string(name='AntChainId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  QRCodeType?: string(name='QRCodeType'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    authorizedUserList?: [ 
      {
        gmtAuthorized?: string(name='GmtAuthorized'),
        phone?: string(name='Phone'),
      }
    ](name='AuthorizedUserList'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsersWithOptions(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest, runtime: Util.RuntimeOptions): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.QRCodeType)) {
    body['QRCodeType'] = request.QRCodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsers(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainMiniAppBrowserQRCodeAuthorizedUsersWithOptions(request, runtime);
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Request {
  antChainId?: string(name='AntChainId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  QRCodeType?: string(name='QRCodeType'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    authorizedUserList?: [ 
      {
        gmtAuthorized?: string(name='GmtAuthorized'),
        phone?: string(name='Phone'),
      }
    ](name='AuthorizedUserList'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2ResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2WithOptions(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Request, runtime: Util.RuntimeOptions): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.QRCodeType)) {
    body['QRCodeType'] = request.QRCodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Request): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainMiniAppBrowserQRCodeAuthorizedUsersV2WithOptions(request, runtime);
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeRequest {
  antChainId?: string(name='AntChainId'),
  transactionHash?: string(name='TransactionHash'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    base64QRCodePNG?: string(name='Base64QRCodePNG'),
    QRCodeContent?: string(name='QRCodeContent'),
    transactionHash?: string(name='TransactionHash'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserTransactionQRCodeWithOptions(request: DescribeAntChainMiniAppBrowserTransactionQRCodeRequest, runtime: Util.RuntimeOptions): DescribeAntChainMiniAppBrowserTransactionQRCodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.transactionHash)) {
    body['TransactionHash'] = request.transactionHash;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainMiniAppBrowserTransactionQRCode',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainMiniAppBrowserTransactionQRCode(request: DescribeAntChainMiniAppBrowserTransactionQRCodeRequest): DescribeAntChainMiniAppBrowserTransactionQRCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainMiniAppBrowserTransactionQRCodeWithOptions(request, runtime);
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest {
  antChainId?: string(name='AntChainId'),
  contractId?: string(name='ContractId'),
  transactionHash?: string(name='TransactionHash'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    base64QRCodePNG?: string(name='Base64QRCodePNG'),
    QRCodeContent?: string(name='QRCodeContent'),
    transactionHash?: string(name='TransactionHash'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserTransactionQRCodeNewWithOptions(request: DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest, runtime: Util.RuntimeOptions): DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.contractId)) {
    body['ContractId'] = request.contractId;
  }
  if (!Util.isUnset(request.transactionHash)) {
    body['TransactionHash'] = request.transactionHash;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainMiniAppBrowserTransactionQRCodeNew',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainMiniAppBrowserTransactionQRCodeNew(request: DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest): DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainMiniAppBrowserTransactionQRCodeNewWithOptions(request, runtime);
}

model DescribeAntChainNodesRequest {
  antChainId?: string(name='AntChainId'),
}

model DescribeAntChainNodesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainNodesResponseBody(name='body'),
}

async function describeAntChainNodesWithOptions(request: DescribeAntChainNodesRequest, runtime: Util.RuntimeOptions): DescribeAntChainNodesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainNodes',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainNodes(request: DescribeAntChainNodesRequest): DescribeAntChainNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainNodesWithOptions(request, runtime);
}

model DescribeAntChainNodesV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
}

model DescribeAntChainNodesV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainNodesV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainNodesV2ResponseBody(name='body'),
}

async function describeAntChainNodesV2WithOptions(request: DescribeAntChainNodesV2Request, runtime: Util.RuntimeOptions): DescribeAntChainNodesV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainNodesV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainNodesV2(request: DescribeAntChainNodesV2Request): DescribeAntChainNodesV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainNodesV2WithOptions(request, runtime);
}

model DescribeAntChainQRCodeAuthorizationRequest {
  antChainId?: string(name='AntChainId'),
  QRCodeType?: string(name='QRCodeType'),
}

model DescribeAntChainQRCodeAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
}

model DescribeAntChainQRCodeAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainQRCodeAuthorizationResponseBody(name='body'),
}

async function describeAntChainQRCodeAuthorizationWithOptions(request: DescribeAntChainQRCodeAuthorizationRequest, runtime: Util.RuntimeOptions): DescribeAntChainQRCodeAuthorizationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.QRCodeType)) {
    body['QRCodeType'] = request.QRCodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainQRCodeAuthorization',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainQRCodeAuthorization(request: DescribeAntChainQRCodeAuthorizationRequest): DescribeAntChainQRCodeAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainQRCodeAuthorizationWithOptions(request, runtime);
}

model DescribeAntChainQRCodeAuthorizationV2Request {
  antChainId?: string(name='AntChainId'),
  QRCodeType?: string(name='QRCodeType'),
}

model DescribeAntChainQRCodeAuthorizationV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainQRCodeAuthorizationV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainQRCodeAuthorizationV2ResponseBody(name='body'),
}

async function describeAntChainQRCodeAuthorizationV2WithOptions(request: DescribeAntChainQRCodeAuthorizationV2Request, runtime: Util.RuntimeOptions): DescribeAntChainQRCodeAuthorizationV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.QRCodeType)) {
    body['QRCodeType'] = request.QRCodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainQRCodeAuthorizationV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainQRCodeAuthorizationV2(request: DescribeAntChainQRCodeAuthorizationV2Request): DescribeAntChainQRCodeAuthorizationV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainQRCodeAuthorizationV2WithOptions(request, runtime);
}

model DescribeAntChainTransactionRequest {
  antChainId?: string(name='AntChainId'),
  hash?: string(name='Hash'),
}

model DescribeAntChainTransactionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    blockHash?: string(name='BlockHash'),
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: string(name='BlockVersion'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    transaction?: {
      data?: string(name='Data'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From'),
      gas?: string(name='Gas'),
      hash?: string(name='Hash'),
      nonce?: string(name='Nonce'),
      period?: long(name='Period'),
      signatures?: [ string ](name='Signatures'),
      timestamp?: long(name='Timestamp'),
      to?: string(name='To'),
      txType?: string(name='TxType'),
      value?: string(name='Value'),
    }(name='Transaction'),
  }(name='Result'),
}

model DescribeAntChainTransactionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionResponseBody(name='body'),
}

async function describeAntChainTransactionWithOptions(request: DescribeAntChainTransactionRequest, runtime: Util.RuntimeOptions): DescribeAntChainTransactionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.hash)) {
    body['Hash'] = request.hash;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainTransaction',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainTransaction(request: DescribeAntChainTransactionRequest): DescribeAntChainTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainTransactionWithOptions(request, runtime);
}

model DescribeAntChainTransactionReceiptRequest {
  antChainId?: string(name='AntChainId'),
  hash?: string(name='Hash'),
}

model DescribeAntChainTransactionReceiptResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    data?: string(name='Data'),
    gasUsed?: string(name='GasUsed'),
    logs?: [ string ](name='Logs'),
    result?: long(name='Result'),
  }(name='Result'),
}

model DescribeAntChainTransactionReceiptResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionReceiptResponseBody(name='body'),
}

async function describeAntChainTransactionReceiptWithOptions(request: DescribeAntChainTransactionReceiptRequest, runtime: Util.RuntimeOptions): DescribeAntChainTransactionReceiptResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.hash)) {
    body['Hash'] = request.hash;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainTransactionReceipt',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainTransactionReceipt(request: DescribeAntChainTransactionReceiptRequest): DescribeAntChainTransactionReceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainTransactionReceiptWithOptions(request, runtime);
}

model DescribeAntChainTransactionReceiptV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
  hash?: string(name='Hash'),
}

model DescribeAntChainTransactionReceiptV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    data?: string(name='Data'),
    gasUsed?: string(name='GasUsed'),
    logs?: [ string ](name='Logs'),
    result?: long(name='Result'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionReceiptV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionReceiptV2ResponseBody(name='body'),
}

async function describeAntChainTransactionReceiptV2WithOptions(request: DescribeAntChainTransactionReceiptV2Request, runtime: Util.RuntimeOptions): DescribeAntChainTransactionReceiptV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.hash)) {
    body['Hash'] = request.hash;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainTransactionReceiptV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainTransactionReceiptV2(request: DescribeAntChainTransactionReceiptV2Request): DescribeAntChainTransactionReceiptV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainTransactionReceiptV2WithOptions(request, runtime);
}

model DescribeAntChainTransactionStatisticsRequest {
  antChainId?: string(name='AntChainId'),
  end?: long(name='End'),
  start?: long(name='Start'),
}

model DescribeAntChainTransactionStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      antChainId?: string(name='AntChainId'),
      creatTime?: long(name='CreatTime'),
      dt?: string(name='Dt'),
      lastSumBlockHeight?: long(name='LastSumBlockHeight'),
      transCount?: long(name='TransCount'),
    }
  ](name='Result'),
}

model DescribeAntChainTransactionStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionStatisticsResponseBody(name='body'),
}

async function describeAntChainTransactionStatisticsWithOptions(request: DescribeAntChainTransactionStatisticsRequest, runtime: Util.RuntimeOptions): DescribeAntChainTransactionStatisticsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.end)) {
    body['End'] = request.end;
  }
  if (!Util.isUnset(request.start)) {
    body['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainTransactionStatistics',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainTransactionStatistics(request: DescribeAntChainTransactionStatisticsRequest): DescribeAntChainTransactionStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainTransactionStatisticsWithOptions(request, runtime);
}

model DescribeAntChainTransactionStatisticsV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
  end?: long(name='End'),
  start?: long(name='Start'),
}

model DescribeAntChainTransactionStatisticsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      antChainId?: string(name='AntChainId'),
      creatTime?: long(name='CreatTime'),
      dt?: long(name='Dt'),
      lastSumBlockHeight?: long(name='LastSumBlockHeight'),
      transCount?: long(name='TransCount'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionStatisticsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionStatisticsV2ResponseBody(name='body'),
}

async function describeAntChainTransactionStatisticsV2WithOptions(request: DescribeAntChainTransactionStatisticsV2Request, runtime: Util.RuntimeOptions): DescribeAntChainTransactionStatisticsV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.end)) {
    body['End'] = request.end;
  }
  if (!Util.isUnset(request.start)) {
    body['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainTransactionStatisticsV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainTransactionStatisticsV2(request: DescribeAntChainTransactionStatisticsV2Request): DescribeAntChainTransactionStatisticsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainTransactionStatisticsV2WithOptions(request, runtime);
}

model DescribeAntChainTransactionV2Request {
  antChainId?: string(name='AntChainId'),
  consortiumId?: string(name='ConsortiumId'),
  hash?: string(name='Hash'),
}

model DescribeAntChainTransactionV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    blockHash?: string(name='BlockHash'),
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: string(name='BlockVersion'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    transaction?: {
      data?: string(name='Data'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From'),
      gas?: string(name='Gas'),
      hash?: string(name='Hash'),
      nonce?: string(name='Nonce'),
      period?: long(name='Period'),
      signatures?: [ string ](name='Signatures'),
      timestamp?: long(name='Timestamp'),
      to?: string(name='To'),
      txType?: string(name='TxType'),
      value?: string(name='Value'),
    }(name='Transaction'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainTransactionV2ResponseBody(name='body'),
}

async function describeAntChainTransactionV2WithOptions(request: DescribeAntChainTransactionV2Request, runtime: Util.RuntimeOptions): DescribeAntChainTransactionV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.hash)) {
    body['Hash'] = request.hash;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainTransactionV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainTransactionV2(request: DescribeAntChainTransactionV2Request): DescribeAntChainTransactionV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainTransactionV2WithOptions(request, runtime);
}

model DescribeAntChainsRequest {
  consortiumId?: string(name='ConsortiumId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChains?: [ 
      {
        antChainId?: string(name='AntChainId'),
        antChainName?: string(name='AntChainName'),
        chainType?: string(name='ChainType'),
        cipherSuit?: string(name='CipherSuit'),
        createTime?: long(name='CreateTime'),
        expireTime?: long(name='ExpireTime'),
        isAdmin?: boolean(name='IsAdmin'),
        memberStatus?: string(name='MemberStatus'),
        merkleTreeSuit?: string(name='MerkleTreeSuit'),
        network?: string(name='Network'),
        nodeNum?: int32(name='NodeNum'),
        regionId?: string(name='RegionId'),
        resourceSize?: string(name='ResourceSize'),
        tlsAlgo?: string(name='TlsAlgo'),
        version?: string(name='Version'),
      }
    ](name='AntChains'),
    isExist?: boolean(name='IsExist'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainsResponseBody(name='body'),
}

async function describeAntChainsWithOptions(request: DescribeAntChainsRequest, runtime: Util.RuntimeOptions): DescribeAntChainsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChains',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChains(request: DescribeAntChainsRequest): DescribeAntChainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainsWithOptions(request, runtime);
}

model DescribeAntChainsV2Request {
  consortiumId?: string(name='ConsortiumId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAntChainsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChains?: [ 
      {
        antChainId?: string(name='AntChainId'),
        antChainName?: string(name='AntChainName'),
        chainType?: string(name='ChainType'),
        cipherSuit?: string(name='CipherSuit'),
        createTime?: long(name='CreateTime'),
        expireTime?: long(name='ExpireTime'),
        instanceId?: string(name='InstanceId'),
        isAdmin?: boolean(name='IsAdmin'),
        memberStatus?: string(name='MemberStatus'),
        merkleTreeSuit?: string(name='MerkleTreeSuit'),
        monitorStatus?: boolean(name='MonitorStatus'),
        network?: string(name='Network'),
        nodeNum?: int32(name='NodeNum'),
        regionId?: string(name='RegionId'),
        resourceSize?: string(name='ResourceSize'),
        restStatus?: string(name='RestStatus'),
        tlsAlgo?: string(name='TlsAlgo'),
        version?: string(name='Version'),
      }
    ](name='AntChains'),
    isExist?: boolean(name='IsExist'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeAntChainsV2ResponseBody(name='body'),
}

async function describeAntChainsV2WithOptions(request: DescribeAntChainsV2Request, runtime: Util.RuntimeOptions): DescribeAntChainsV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntChainsV2',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntChainsV2(request: DescribeAntChainsV2Request): DescribeAntChainsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeAntChainsV2WithOptions(request, runtime);
}

model DescribeEthereumDeletableRequest {
  ethereumId?: string(name='EthereumId'),
}

model DescribeEthereumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    deletable?: boolean(name='Deletable'),
    ethereumId?: string(name='EthereumId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumDeletableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEthereumDeletableResponseBody(name='body'),
}

async function describeEthereumDeletableWithOptions(request: DescribeEthereumDeletableRequest, runtime: Util.RuntimeOptions): DescribeEthereumDeletableResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.ethereumId)) {
    body['EthereumId'] = request.ethereumId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEthereumDeletable',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEthereumDeletable(request: DescribeEthereumDeletableRequest): DescribeEthereumDeletableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEthereumDeletableWithOptions(request, runtime);
}

model DescribeFabricCandidateOrganizationsRequest {
  location?: string(name='Location'),
}

model DescribeFabricCandidateOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      clusterState?: string(name='ClusterState'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      serviceState?: string(name='ServiceState'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricCandidateOrganizationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricCandidateOrganizationsResponseBody(name='body'),
}

async function describeFabricCandidateOrganizationsWithOptions(request: DescribeFabricCandidateOrganizationsRequest, runtime: Util.RuntimeOptions): DescribeFabricCandidateOrganizationsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricCandidateOrganizations',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricCandidateOrganizations(request: DescribeFabricCandidateOrganizationsRequest): DescribeFabricCandidateOrganizationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricCandidateOrganizationsWithOptions(request, runtime);
}

model DescribeFabricChaincodeDefinitionTaskRequest {
  chaincodeId?: string(name='ChaincodeId'),
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricChaincodeDefinitionTaskResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    approvers?: [ string ](name='Approvers'),
    channelName?: string(name='ChannelName'),
    content?: {
      chaincodeDefinition?: {
        chaincodePackageId?: string(name='ChaincodePackageId'),
        collectionConfig?: string(name='CollectionConfig'),
        endorsementPolicy?: string(name='EndorsementPolicy'),
        initRequired?: boolean(name='InitRequired'),
        name?: string(name='Name'),
        sequence?: long(name='Sequence'),
        uid?: string(name='Uid'),
        version?: string(name='Version'),
      }(name='ChaincodeDefinition'),
    }(name='Content'),
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChaincodeDefinitionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricChaincodeDefinitionTaskResponseBody(name='body'),
}

async function describeFabricChaincodeDefinitionTaskWithOptions(request: DescribeFabricChaincodeDefinitionTaskRequest, runtime: Util.RuntimeOptions): DescribeFabricChaincodeDefinitionTaskResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodeId)) {
    body['ChaincodeId'] = request.chaincodeId;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricChaincodeDefinitionTask',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricChaincodeDefinitionTask(request: DescribeFabricChaincodeDefinitionTaskRequest): DescribeFabricChaincodeDefinitionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricChaincodeDefinitionTaskWithOptions(request, runtime);
}

model DescribeFabricChaincodeUploadPolicyRequest {
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricChaincodeUploadPolicyResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    accessId?: string(name='AccessId'),
    dir?: string(name='Dir'),
    expire?: int32(name='Expire'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChaincodeUploadPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricChaincodeUploadPolicyResponseBody(name='body'),
}

async function describeFabricChaincodeUploadPolicyWithOptions(request: DescribeFabricChaincodeUploadPolicyRequest, runtime: Util.RuntimeOptions): DescribeFabricChaincodeUploadPolicyResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricChaincodeUploadPolicy',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricChaincodeUploadPolicy(request: DescribeFabricChaincodeUploadPolicyRequest): DescribeFabricChaincodeUploadPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricChaincodeUploadPolicyWithOptions(request, runtime);
}

model DescribeFabricChannelMembersRequest {
  channelId?: string(name='ChannelId'),
}

model DescribeFabricChannelMembersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      acceptTime?: string(name='AcceptTime'),
      channelId?: string(name='ChannelId'),
      inviteTime?: string(name='InviteTime'),
      organizationDescription?: string(name='OrganizationDescription'),
      organizationDomain?: string(name='OrganizationDomain'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      state?: string(name='State'),
      withPeer?: boolean(name='WithPeer'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChannelMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricChannelMembersResponseBody(name='body'),
}

async function describeFabricChannelMembersWithOptions(request: DescribeFabricChannelMembersRequest, runtime: Util.RuntimeOptions): DescribeFabricChannelMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricChannelMembers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricChannelMembers(request: DescribeFabricChannelMembersRequest): DescribeFabricChannelMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricChannelMembersWithOptions(request, runtime);
}

model DescribeFabricConsortiumAdminStatusRequest {
  location?: string(name='Location'),
}

model DescribeFabricConsortiumAdminStatusResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consortiumAdministrator?: boolean(name='ConsortiumAdministrator'),
      consortiumId?: string(name='ConsortiumId'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumAdminStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumAdminStatusResponseBody(name='body'),
}

async function describeFabricConsortiumAdminStatusWithOptions(request: DescribeFabricConsortiumAdminStatusRequest, runtime: Util.RuntimeOptions): DescribeFabricConsortiumAdminStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumAdminStatus',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumAdminStatus(request: DescribeFabricConsortiumAdminStatusRequest): DescribeFabricConsortiumAdminStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumAdminStatusWithOptions(request, runtime);
}

model DescribeFabricConsortiumChaincodesRequest {
  consortiumId?: string(name='ConsortiumId'),
  location?: string(name='Location'),
}

model DescribeFabricConsortiumChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      chaincodeId?: string(name='ChaincodeId'),
      chaincodeName?: string(name='ChaincodeName'),
      chaincodeVersion?: string(name='ChaincodeVersion'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumId?: string(name='ConsortiumId'),
      createTime?: string(name='CreateTime'),
      deployTime?: string(name='DeployTime'),
      endorsePolicy?: string(name='EndorsePolicy'),
      input?: string(name='Input'),
      install?: boolean(name='Install'),
      message?: string(name='Message'),
      path?: string(name='Path'),
      providerId?: string(name='ProviderId'),
      providerName?: string(name='ProviderName'),
      state?: string(name='State'),
      type?: int32(name='Type'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumChaincodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumChaincodesResponseBody(name='body'),
}

async function describeFabricConsortiumChaincodesWithOptions(request: DescribeFabricConsortiumChaincodesRequest, runtime: Util.RuntimeOptions): DescribeFabricConsortiumChaincodesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumChaincodes',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumChaincodes(request: DescribeFabricConsortiumChaincodesRequest): DescribeFabricConsortiumChaincodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumChaincodesWithOptions(request, runtime);
}

model DescribeFabricConsortiumChannelsRequest {
  consortiumId?: string(name='ConsortiumId'),
  location?: string(name='Location'),
}

model DescribeFabricConsortiumChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      batchTimeout?: int32(name='BatchTimeout'),
      blockCount?: int32(name='BlockCount'),
      chaincodeCount?: int32(name='ChaincodeCount'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumChannelId?: int32(name='ConsortiumChannelId'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      createTime?: string(name='CreateTime'),
      deleteTime?: string(name='DeleteTime'),
      deleted?: boolean(name='Deleted'),
      maxMessageCount?: int32(name='MaxMessageCount'),
      memberCount?: int32(name='MemberCount'),
      memberJoinedCount?: string(name='MemberJoinedCount'),
      needJoined?: boolean(name='NeedJoined'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      preferredMaxBytes?: int32(name='PreferredMaxBytes'),
      requestId?: string(name='RequestId'),
      state?: string(name='State'),
      supportChannelConfig?: boolean(name='SupportChannelConfig'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumChannelsResponseBody(name='body'),
}

async function describeFabricConsortiumChannelsWithOptions(request: DescribeFabricConsortiumChannelsRequest, runtime: Util.RuntimeOptions): DescribeFabricConsortiumChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consortiumId)) {
    query['ConsortiumId'] = request.consortiumId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumChannels',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumChannels(request: DescribeFabricConsortiumChannelsRequest): DescribeFabricConsortiumChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumChannelsWithOptions(request, runtime);
}

model DescribeFabricConsortiumConfigResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelPolicy?: [ string ](name='ChannelPolicy'),
    ordererType?: [ string ](name='OrdererType'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumConfigResponseBody(name='body'),
}

async function describeFabricConsortiumConfigWithOptions(runtime: Util.RuntimeOptions): DescribeFabricConsortiumConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumConfig',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumConfig(): DescribeFabricConsortiumConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumConfigWithOptions(runtime);
}

model DescribeFabricConsortiumDeletableRequest {
  consortiumId?: string(name='ConsortiumId'),
  location?: string(name='Location'),
}

model DescribeFabricConsortiumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    codeName?: string(name='CodeName'),
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    deletable?: boolean(name='Deletable'),
    description?: string(name='Description'),
    domain?: string(name='Domain'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumDeletableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumDeletableResponseBody(name='body'),
}

async function describeFabricConsortiumDeletableWithOptions(request: DescribeFabricConsortiumDeletableRequest, runtime: Util.RuntimeOptions): DescribeFabricConsortiumDeletableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consortiumId)) {
    query['ConsortiumId'] = request.consortiumId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumDeletable',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumDeletable(request: DescribeFabricConsortiumDeletableRequest): DescribeFabricConsortiumDeletableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumDeletableWithOptions(request, runtime);
}

model DescribeFabricConsortiumMemberApprovalRequest {
  consortiumId?: string(name='ConsortiumId'),
  location?: string(name='Location'),
}

model DescribeFabricConsortiumMemberApprovalResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      channelCreatePolicy?: string(name='ChannelCreatePolicy'),
      confirmTime?: string(name='ConfirmTime'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      domainName?: string(name='DomainName'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      state?: string(name='State'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumMemberApprovalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumMemberApprovalResponseBody(name='body'),
}

async function describeFabricConsortiumMemberApprovalWithOptions(request: DescribeFabricConsortiumMemberApprovalRequest, runtime: Util.RuntimeOptions): DescribeFabricConsortiumMemberApprovalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consortiumId)) {
    query['ConsortiumId'] = request.consortiumId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumMemberApproval',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumMemberApproval(request: DescribeFabricConsortiumMemberApprovalRequest): DescribeFabricConsortiumMemberApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumMemberApprovalWithOptions(request, runtime);
}

model DescribeFabricConsortiumMembersRequest {
  consortiumId?: string(name='ConsortiumId'),
  location?: string(name='Location'),
}

model DescribeFabricConsortiumMembersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consortiumId?: string(name='ConsortiumId'),
      description?: string(name='Description'),
      domain?: string(name='Domain'),
      joinedTime?: string(name='JoinedTime'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumMembersResponseBody(name='body'),
}

async function describeFabricConsortiumMembersWithOptions(request: DescribeFabricConsortiumMembersRequest, runtime: Util.RuntimeOptions): DescribeFabricConsortiumMembersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumMembers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumMembers(request: DescribeFabricConsortiumMembersRequest): DescribeFabricConsortiumMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumMembersWithOptions(request, runtime);
}

model DescribeFabricConsortiumOrderersRequest {
  consortiumId?: string(name='ConsortiumId'),
  location?: string(name='Location'),
}

model DescribeFabricConsortiumOrderersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      instanceType?: string(name='InstanceType'),
      ordererName?: string(name='OrdererName'),
      port?: int32(name='Port'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumOrderersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumOrderersResponseBody(name='body'),
}

async function describeFabricConsortiumOrderersWithOptions(request: DescribeFabricConsortiumOrderersRequest, runtime: Util.RuntimeOptions): DescribeFabricConsortiumOrderersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumOrderers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumOrderers(request: DescribeFabricConsortiumOrderersRequest): DescribeFabricConsortiumOrderersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumOrderersWithOptions(request, runtime);
}

model DescribeFabricConsortiumSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      enable?: boolean(name='Enable'),
      specName?: string(name='SpecName'),
      specTitle?: string(name='SpecTitle'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumSpecsResponseBody(name='body'),
}

async function describeFabricConsortiumSpecsWithOptions(runtime: Util.RuntimeOptions): DescribeFabricConsortiumSpecsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiumSpecs',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiumSpecs(): DescribeFabricConsortiumSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumSpecsWithOptions(runtime);
}

model DescribeFabricConsortiumsRequest {
  consortiumId?: string(name='ConsortiumId'),
  location?: string(name='Location'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeFabricConsortiumsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      channelCount?: int32(name='ChannelCount'),
      channelPolicy?: string(name='ChannelPolicy'),
      codeName?: string(name='CodeName'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      expiredTime?: string(name='ExpiredTime'),
      organizationCount?: int32(name='OrganizationCount'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      regionId?: string(name='RegionId'),
      requestId?: string(name='RequestId'),
      specName?: string(name='SpecName'),
      state?: string(name='State'),
      supportChannelConfig?: boolean(name='SupportChannelConfig'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricConsortiumsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricConsortiumsResponseBody(name='body'),
}

async function describeFabricConsortiumsWithOptions(request: DescribeFabricConsortiumsRequest, runtime: Util.RuntimeOptions): DescribeFabricConsortiumsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consortiumId)) {
    query['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricConsortiums',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricConsortiums(request: DescribeFabricConsortiumsRequest): DescribeFabricConsortiumsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricConsortiumsWithOptions(request, runtime);
}

model DescribeFabricExplorerRequest {
  exBody?: string(name='ExBody'),
  exMethod?: string(name='ExMethod'),
  exUrl?: string(name='ExUrl'),
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricExplorerResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricExplorerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricExplorerResponseBody(name='body'),
}

async function describeFabricExplorerWithOptions(request: DescribeFabricExplorerRequest, runtime: Util.RuntimeOptions): DescribeFabricExplorerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exBody)) {
    query['ExBody'] = request.exBody;
  }
  if (!Util.isUnset(request.exMethod)) {
    query['ExMethod'] = request.exMethod;
  }
  if (!Util.isUnset(request.exUrl)) {
    query['ExUrl'] = request.exUrl;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricExplorer',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricExplorer(request: DescribeFabricExplorerRequest): DescribeFabricExplorerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricExplorerWithOptions(request, runtime);
}

model DescribeFabricInvitationCodeRequest {
  consortiumId?: string(name='ConsortiumId'),
}

model DescribeFabricInvitationCodeResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    accepted?: boolean(name='Accepted'),
    code?: string(name='Code'),
    consortiumId?: string(name='ConsortiumId'),
    email?: string(name='Email'),
    expireTime?: string(name='ExpireTime'),
    invitationId?: int32(name='InvitationId'),
    sendTime?: string(name='SendTime'),
    senderBid?: string(name='SenderBid'),
    senderId?: long(name='SenderId'),
    senderName?: string(name='SenderName'),
    url?: string(name='Url'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricInvitationCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricInvitationCodeResponseBody(name='body'),
}

async function describeFabricInvitationCodeWithOptions(request: DescribeFabricInvitationCodeRequest, runtime: Util.RuntimeOptions): DescribeFabricInvitationCodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricInvitationCode',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricInvitationCode(request: DescribeFabricInvitationCodeRequest): DescribeFabricInvitationCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricInvitationCodeWithOptions(request, runtime);
}

model DescribeFabricInviterRequest {
  code?: string(name='Code'),
}

model DescribeFabricInviterResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    expireTime?: string(name='ExpireTime'),
    inviterId?: long(name='InviterId'),
    inviterName?: string(name='InviterName'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricInviterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricInviterResponseBody(name='body'),
}

async function describeFabricInviterWithOptions(request: DescribeFabricInviterRequest, runtime: Util.RuntimeOptions): DescribeFabricInviterResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.code)) {
    body['Code'] = request.code;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricInviter',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricInviter(request: DescribeFabricInviterRequest): DescribeFabricInviterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricInviterWithOptions(request, runtime);
}

model DescribeFabricOrdererLogsRequest {
  consortiumId?: string(name='ConsortiumId'),
  lines?: string(name='Lines'),
  ordererName?: string(name='OrdererName'),
}

model DescribeFabricOrdererLogsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrdererLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrdererLogsResponseBody(name='body'),
}

async function describeFabricOrdererLogsWithOptions(request: DescribeFabricOrdererLogsRequest, runtime: Util.RuntimeOptions): DescribeFabricOrdererLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consortiumId)) {
    query['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.lines)) {
    query['Lines'] = request.lines;
  }
  if (!Util.isUnset(request.ordererName)) {
    query['OrdererName'] = request.ordererName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrdererLogs',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrdererLogs(request: DescribeFabricOrdererLogsRequest): DescribeFabricOrdererLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrdererLogsWithOptions(request, runtime);
}

model DescribeFabricOrganizationRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeFabricOrganizationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    CANAME?: string(name='CANAME'),
    CAUrl?: string(name='CAUrl'),
    codeName?: string(name='CodeName'),
    consortiumCount?: int32(name='ConsortiumCount'),
    createTime?: string(name='CreateTime'),
    domain?: string(name='Domain'),
    MSP?: string(name='MSP'),
    organizationDescription?: string(name='OrganizationDescription'),
    organizationId?: string(name='OrganizationId'),
    organizationName?: string(name='OrganizationName'),
    ownerBid?: string(name='OwnerBid'),
    ownerName?: string(name='OwnerName'),
    ownerUid?: long(name='OwnerUid'),
    peerCount?: int32(name='PeerCount'),
    regionId?: string(name='RegionId'),
    requestId?: string(name='RequestId'),
    specName?: string(name='SpecName'),
    state?: string(name='State'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    userCount?: int32(name='UserCount'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationResponseBody(name='body'),
}

async function describeFabricOrganizationWithOptions(request: DescribeFabricOrganizationRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganization',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganization(request: DescribeFabricOrganizationRequest): DescribeFabricOrganizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationWithOptions(request, runtime);
}

model DescribeFabricOrganizationChaincodePackageRequest {
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricOrganizationChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [
    ChaincodePackage
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationChaincodePackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationChaincodePackageResponseBody(name='body'),
}

async function describeFabricOrganizationChaincodePackageWithOptions(request: DescribeFabricOrganizationChaincodePackageRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationChaincodePackageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizationChaincodePackage',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizationChaincodePackage(request: DescribeFabricOrganizationChaincodePackageRequest): DescribeFabricOrganizationChaincodePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationChaincodePackageWithOptions(request, runtime);
}

model DescribeFabricOrganizationChaincodesRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricOrganizationChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      chaincodeId?: string(name='ChaincodeId'),
      chaincodeName?: string(name='ChaincodeName'),
      chaincodeVersion?: string(name='ChaincodeVersion'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumId?: string(name='ConsortiumId'),
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      deployTime?: string(name='DeployTime'),
      endorsePolicy?: string(name='EndorsePolicy'),
      installed?: string(name='Installed'),
      message?: string(name='Message'),
      state?: string(name='State'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationChaincodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationChaincodesResponseBody(name='body'),
}

async function describeFabricOrganizationChaincodesWithOptions(request: DescribeFabricOrganizationChaincodesRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationChaincodesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizationChaincodes',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizationChaincodes(request: DescribeFabricOrganizationChaincodesRequest): DescribeFabricOrganizationChaincodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationChaincodesWithOptions(request, runtime);
}

model DescribeFabricOrganizationChannelsRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricOrganizationChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      batchTimeout?: int32(name='BatchTimeout'),
      blockCount?: int32(name='BlockCount'),
      chaincodeCount?: int32(name='ChaincodeCount'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      createTime?: string(name='CreateTime'),
      deleteTime?: string(name='DeleteTime'),
      deleted?: boolean(name='Deleted'),
      maxMessageCount?: int32(name='MaxMessageCount'),
      memberCount?: int32(name='MemberCount'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      preferredMaxBytes?: int32(name='PreferredMaxBytes'),
      requestId?: string(name='RequestId'),
      state?: string(name='State'),
      supportChannelConfig?: boolean(name='SupportChannelConfig'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationChannelsResponseBody(name='body'),
}

async function describeFabricOrganizationChannelsWithOptions(request: DescribeFabricOrganizationChannelsRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationChannelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizationChannels',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizationChannels(request: DescribeFabricOrganizationChannelsRequest): DescribeFabricOrganizationChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationChannelsWithOptions(request, runtime);
}

model DescribeFabricOrganizationDeletableRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricOrganizationDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    codeName?: string(name='CodeName'),
    deletable?: boolean(name='Deletable'),
    domain?: string(name='Domain'),
    organizationDescription?: string(name='OrganizationDescription'),
    organizationId?: string(name='OrganizationId'),
    organizationName?: string(name='OrganizationName'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationDeletableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationDeletableResponseBody(name='body'),
}

async function describeFabricOrganizationDeletableWithOptions(request: DescribeFabricOrganizationDeletableRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationDeletableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizationDeletable',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizationDeletable(request: DescribeFabricOrganizationDeletableRequest): DescribeFabricOrganizationDeletableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationDeletableWithOptions(request, runtime);
}

model DescribeFabricOrganizationMembersRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricOrganizationMembersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consortiumId?: string(name='ConsortiumId'),
      consortiumName?: string(name='ConsortiumName'),
      description?: string(name='Description'),
      domain?: string(name='Domain'),
      joinedTime?: string(name='JoinedTime'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      state?: string(name='State'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationMembersResponseBody(name='body'),
}

async function describeFabricOrganizationMembersWithOptions(request: DescribeFabricOrganizationMembersRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationMembersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizationMembers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizationMembers(request: DescribeFabricOrganizationMembersRequest): DescribeFabricOrganizationMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationMembersWithOptions(request, runtime);
}

model DescribeFabricOrganizationPeersRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricOrganizationPeersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      instanceType?: string(name='InstanceType'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      isAnchor?: boolean(name='IsAnchor'),
      organizationPeerName?: string(name='OrganizationPeerName'),
      port?: int32(name='Port'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationPeersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationPeersResponseBody(name='body'),
}

async function describeFabricOrganizationPeersWithOptions(request: DescribeFabricOrganizationPeersRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationPeersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizationPeers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizationPeers(request: DescribeFabricOrganizationPeersRequest): DescribeFabricOrganizationPeersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationPeersWithOptions(request, runtime);
}

model DescribeFabricOrganizationSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      enable?: boolean(name='Enable'),
      organizationSpecsName?: string(name='OrganizationSpecsName'),
      title?: string(name='Title'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationSpecsResponseBody(name='body'),
}

async function describeFabricOrganizationSpecsWithOptions(runtime: Util.RuntimeOptions): DescribeFabricOrganizationSpecsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizationSpecs',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizationSpecs(): DescribeFabricOrganizationSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationSpecsWithOptions(runtime);
}

model DescribeFabricOrganizationUsersRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model DescribeFabricOrganizationUsersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      attrs?: string(name='Attrs'),
      callerBid?: string(name='CallerBid'),
      callerUid?: long(name='CallerUid'),
      createTime?: string(name='CreateTime'),
      expireTime?: string(name='ExpireTime'),
      fullName?: string(name='FullName'),
      organizationId?: string(name='OrganizationId'),
      regionId?: string(name='RegionId'),
      username?: string(name='Username'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationUsersResponseBody(name='body'),
}

async function describeFabricOrganizationUsersWithOptions(request: DescribeFabricOrganizationUsersRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizationUsers',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizationUsers(request: DescribeFabricOrganizationUsersRequest): DescribeFabricOrganizationUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationUsersWithOptions(request, runtime);
}

model DescribeFabricOrganizationsRequest {
  location?: string(name='Location'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeFabricOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      codeName?: string(name='CodeName'),
      consortiumCount?: int32(name='ConsortiumCount'),
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      organizationDescription?: string(name='OrganizationDescription'),
      organizationId?: string(name='OrganizationId'),
      organizationName?: string(name='OrganizationName'),
      ownerBid?: string(name='OwnerBid'),
      ownerName?: string(name='OwnerName'),
      ownerUid?: long(name='OwnerUid'),
      peerCount?: int32(name='PeerCount'),
      regionId?: string(name='RegionId'),
      requestId?: string(name='RequestId'),
      specName?: string(name='SpecName'),
      state?: string(name='State'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      userCount?: int32(name='UserCount'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricOrganizationsResponseBody(name='body'),
}

async function describeFabricOrganizationsWithOptions(request: DescribeFabricOrganizationsRequest, runtime: Util.RuntimeOptions): DescribeFabricOrganizationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricOrganizations',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricOrganizations(request: DescribeFabricOrganizationsRequest): DescribeFabricOrganizationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricOrganizationsWithOptions(request, runtime);
}

model DescribeFabricPeerLogsRequest {
  lines?: string(name='Lines'),
  organizationId?: string(name='OrganizationId'),
  peerName?: string(name='PeerName'),
}

model DescribeFabricPeerLogsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricPeerLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFabricPeerLogsResponseBody(name='body'),
}

async function describeFabricPeerLogsWithOptions(request: DescribeFabricPeerLogsRequest, runtime: Util.RuntimeOptions): DescribeFabricPeerLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lines)) {
    query['Lines'] = request.lines;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.peerName)) {
    query['PeerName'] = request.peerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFabricPeerLogs',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFabricPeerLogs(request: DescribeFabricPeerLogsRequest): DescribeFabricPeerLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFabricPeerLogsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRootDomainResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeRootDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRootDomainResponseBody(name='body'),
}

async function describeRootDomainWithOptions(runtime: Util.RuntimeOptions): DescribeRootDomainResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRootDomain',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRootDomain(): DescribeRootDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRootDomainWithOptions(runtime);
}

model DescribeTasksResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      action?: string(name='Action'),
      handled?: boolean(name='Handled'),
      operationType?: string(name='OperationType'),
      requestTime?: long(name='RequestTime'),
      responseTime?: string(name='ResponseTime'),
      result?: string(name='Result'),
      sender?: string(name='Sender'),
      target?: string(name='Target'),
      taskId?: int32(name='TaskId'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(runtime: Util.RuntimeOptions): DescribeTasksResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeTasks',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTasks(): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(runtime);
}

model DownloadFabricOrganizationSDKRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
  username?: string(name='Username'),
}

model DownloadFabricOrganizationSDKResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      content?: string(name='Content'),
      path?: string(name='Path'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DownloadFabricOrganizationSDKResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadFabricOrganizationSDKResponseBody(name='body'),
}

async function downloadFabricOrganizationSDKWithOptions(request: DownloadFabricOrganizationSDKRequest, runtime: Util.RuntimeOptions): DownloadFabricOrganizationSDKResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DownloadFabricOrganizationSDK',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadFabricOrganizationSDK(request: DownloadFabricOrganizationSDKRequest): DownloadFabricOrganizationSDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadFabricOrganizationSDKWithOptions(request, runtime);
}

model FreezeAntChainAccountRequest {
  account?: string(name='Account'),
  antChainId?: string(name='AntChainId'),
}

model FreezeAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model FreezeAntChainAccountResponse = {
  headers: map[string]string(name='headers'),
  body: FreezeAntChainAccountResponseBody(name='body'),
}

async function freezeAntChainAccountWithOptions(request: FreezeAntChainAccountRequest, runtime: Util.RuntimeOptions): FreezeAntChainAccountResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.account)) {
    body['Account'] = request.account;
  }
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FreezeAntChainAccount',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function freezeAntChainAccount(request: FreezeAntChainAccountRequest): FreezeAntChainAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return freezeAntChainAccountWithOptions(request, runtime);
}

model InstallFabricChaincodeRequest {
  chaincodeId?: string(name='ChaincodeId'),
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model InstallFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model InstallFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: InstallFabricChaincodeResponseBody(name='body'),
}

async function installFabricChaincodeWithOptions(request: InstallFabricChaincodeRequest, runtime: Util.RuntimeOptions): InstallFabricChaincodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodeId)) {
    body['ChaincodeId'] = request.chaincodeId;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InstallFabricChaincode',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installFabricChaincode(request: InstallFabricChaincodeRequest): InstallFabricChaincodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return installFabricChaincodeWithOptions(request, runtime);
}

model InstallFabricChaincodePackageRequest {
  chaincodePackageId?: string(name='ChaincodePackageId'),
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model InstallFabricChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: ChaincodePackage(name='Result'),
  success?: boolean(name='Success'),
}

model InstallFabricChaincodePackageResponse = {
  headers: map[string]string(name='headers'),
  body: InstallFabricChaincodePackageResponseBody(name='body'),
}

async function installFabricChaincodePackageWithOptions(request: InstallFabricChaincodePackageRequest, runtime: Util.RuntimeOptions): InstallFabricChaincodePackageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodePackageId)) {
    body['ChaincodePackageId'] = request.chaincodePackageId;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InstallFabricChaincodePackage',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installFabricChaincodePackage(request: InstallFabricChaincodePackageRequest): InstallFabricChaincodePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return installFabricChaincodePackageWithOptions(request, runtime);
}

model InstantiateFabricChaincodeRequest {
  chaincodeId?: string(name='ChaincodeId'),
  collectionConfig?: string(name='CollectionConfig'),
  endorsePolicy?: string(name='EndorsePolicy'),
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model InstantiateFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model InstantiateFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: InstantiateFabricChaincodeResponseBody(name='body'),
}

async function instantiateFabricChaincodeWithOptions(request: InstantiateFabricChaincodeRequest, runtime: Util.RuntimeOptions): InstantiateFabricChaincodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodeId)) {
    body['ChaincodeId'] = request.chaincodeId;
  }
  if (!Util.isUnset(request.collectionConfig)) {
    body['CollectionConfig'] = request.collectionConfig;
  }
  if (!Util.isUnset(request.endorsePolicy)) {
    body['EndorsePolicy'] = request.endorsePolicy;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InstantiateFabricChaincode',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function instantiateFabricChaincode(request: InstantiateFabricChaincodeRequest): InstantiateFabricChaincodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return instantiateFabricChaincodeWithOptions(request, runtime);
}

model JoinFabricChannelRequest {
  channelId?: string(name='ChannelId'),
  do?: string(name='Do'),
  location?: string(name='Location'),
}

model JoinFabricChannelResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      acceptTime?: string(name='AcceptTime'),
      approveTime?: string(name='ApproveTime'),
      channelId?: string(name='ChannelId'),
      confirmTime?: string(name='ConfirmTime'),
      destroyTime?: string(name='DestroyTime'),
      inviteTime?: string(name='InviteTime'),
      organizationId?: string(name='OrganizationId'),
      state?: string(name='State'),
      withPeer?: boolean(name='WithPeer'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model JoinFabricChannelResponse = {
  headers: map[string]string(name='headers'),
  body: JoinFabricChannelResponseBody(name='body'),
}

async function joinFabricChannelWithOptions(request: JoinFabricChannelRequest, runtime: Util.RuntimeOptions): JoinFabricChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.do)) {
    query['Do'] = request.do;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'JoinFabricChannel',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function joinFabricChannel(request: JoinFabricChannelRequest): JoinFabricChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinFabricChannelWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ResetAntChainCertificateRequest {
  antChainId?: string(name='AntChainId'),
}

model ResetAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetAntChainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAntChainCertificateResponseBody(name='body'),
}

async function resetAntChainCertificateWithOptions(request: ResetAntChainCertificateRequest, runtime: Util.RuntimeOptions): ResetAntChainCertificateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetAntChainCertificate',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAntChainCertificate(request: ResetAntChainCertificateRequest): ResetAntChainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAntChainCertificateWithOptions(request, runtime);
}

model ResetAntChainUserCertificateRequest {
  antChainId?: string(name='AntChainId'),
  username?: string(name='Username'),
}

model ResetAntChainUserCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetAntChainUserCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAntChainUserCertificateResponseBody(name='body'),
}

async function resetAntChainUserCertificateWithOptions(request: ResetAntChainUserCertificateRequest, runtime: Util.RuntimeOptions): ResetAntChainUserCertificateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.username)) {
    body['Username'] = request.username;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetAntChainUserCertificate',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAntChainUserCertificate(request: ResetAntChainUserCertificateRequest): ResetAntChainUserCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAntChainUserCertificateWithOptions(request, runtime);
}

model ResetFabricOrganizationUserPasswordRequest {
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
  password?: string(name='Password'),
  username?: string(name='Username'),
}

model ResetFabricOrganizationUserPasswordResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    fullname?: string(name='Fullname'),
    organizationId?: string(name='OrganizationId'),
    password?: string(name='Password'),
    username?: string(name='Username'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ResetFabricOrganizationUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetFabricOrganizationUserPasswordResponseBody(name='body'),
}

async function resetFabricOrganizationUserPasswordWithOptions(request: ResetFabricOrganizationUserPasswordRequest, runtime: Util.RuntimeOptions): ResetFabricOrganizationUserPasswordResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.username)) {
    body['Username'] = request.username;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetFabricOrganizationUserPassword',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetFabricOrganizationUserPassword(request: ResetFabricOrganizationUserPasswordRequest): ResetFabricOrganizationUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetFabricOrganizationUserPasswordWithOptions(request, runtime);
}

model SubmitFabricChaincodeDefinitionRequest {
  chaincodePackageId?: string(name='ChaincodePackageId'),
  chaincodeVersion?: string(name='ChaincodeVersion'),
  channelId?: string(name='ChannelId'),
  collectionConfig?: string(name='CollectionConfig'),
  endorsePolicy?: string(name='EndorsePolicy'),
  initRequired?: boolean(name='InitRequired'),
  location?: string(name='Location'),
  name?: string(name='Name'),
  organizationId?: string(name='OrganizationId'),
}

model SubmitFabricChaincodeDefinitionResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: ChaincodeVO(name='Result'),
  success?: boolean(name='Success'),
}

model SubmitFabricChaincodeDefinitionResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitFabricChaincodeDefinitionResponseBody(name='body'),
}

async function submitFabricChaincodeDefinitionWithOptions(request: SubmitFabricChaincodeDefinitionRequest, runtime: Util.RuntimeOptions): SubmitFabricChaincodeDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodePackageId)) {
    body['ChaincodePackageId'] = request.chaincodePackageId;
  }
  if (!Util.isUnset(request.chaincodeVersion)) {
    body['ChaincodeVersion'] = request.chaincodeVersion;
  }
  if (!Util.isUnset(request.channelId)) {
    body['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.collectionConfig)) {
    body['CollectionConfig'] = request.collectionConfig;
  }
  if (!Util.isUnset(request.endorsePolicy)) {
    body['EndorsePolicy'] = request.endorsePolicy;
  }
  if (!Util.isUnset(request.initRequired)) {
    body['InitRequired'] = request.initRequired;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitFabricChaincodeDefinition',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitFabricChaincodeDefinition(request: SubmitFabricChaincodeDefinitionRequest): SubmitFabricChaincodeDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitFabricChaincodeDefinitionWithOptions(request, runtime);
}

model SynchronizeFabricChaincodeRequest {
  chaincodeId?: string(name='ChaincodeId'),
  organizationId?: string(name='OrganizationId'),
}

model SynchronizeFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model SynchronizeFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: SynchronizeFabricChaincodeResponseBody(name='body'),
}

async function synchronizeFabricChaincodeWithOptions(request: SynchronizeFabricChaincodeRequest, runtime: Util.RuntimeOptions): SynchronizeFabricChaincodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodeId)) {
    body['ChaincodeId'] = request.chaincodeId;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SynchronizeFabricChaincode',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function synchronizeFabricChaincode(request: SynchronizeFabricChaincodeRequest): SynchronizeFabricChaincodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return synchronizeFabricChaincodeWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnfreezeAntChainAccountRequest {
  account?: string(name='Account'),
  antChainId?: string(name='AntChainId'),
}

model UnfreezeAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UnfreezeAntChainAccountResponse = {
  headers: map[string]string(name='headers'),
  body: UnfreezeAntChainAccountResponseBody(name='body'),
}

async function unfreezeAntChainAccountWithOptions(request: UnfreezeAntChainAccountRequest, runtime: Util.RuntimeOptions): UnfreezeAntChainAccountResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.account)) {
    body['Account'] = request.account;
  }
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnfreezeAntChainAccount',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unfreezeAntChainAccount(request: UnfreezeAntChainAccountRequest): UnfreezeAntChainAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return unfreezeAntChainAccountWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateAntChainRequest {
  antChainId?: string(name='AntChainId'),
  antChainName?: string(name='AntChainName'),
}

model UpdateAntChainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainResponseBody(name='body'),
}

async function updateAntChainWithOptions(request: UpdateAntChainRequest, runtime: Util.RuntimeOptions): UpdateAntChainResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.antChainName)) {
    body['AntChainName'] = request.antChainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAntChain',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAntChain(request: UpdateAntChainRequest): UpdateAntChainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAntChainWithOptions(request, runtime);
}

model UpdateAntChainConsortiumRequest {
  consortiumDescription?: string(name='ConsortiumDescription'),
  consortiumId?: string(name='ConsortiumId'),
  consortiumName?: string(name='ConsortiumName'),
}

model UpdateAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainConsortiumResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainConsortiumResponseBody(name='body'),
}

async function updateAntChainConsortiumWithOptions(request: UpdateAntChainConsortiumRequest, runtime: Util.RuntimeOptions): UpdateAntChainConsortiumResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumDescription)) {
    body['ConsortiumDescription'] = request.consortiumDescription;
  }
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.consortiumName)) {
    body['ConsortiumName'] = request.consortiumName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAntChainConsortium',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAntChainConsortium(request: UpdateAntChainConsortiumRequest): UpdateAntChainConsortiumResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAntChainConsortiumWithOptions(request, runtime);
}

model UpdateAntChainContractContentRequest {
  content?: string(name='Content'),
  contentId?: string(name='ContentId'),
  contentName?: string(name='ContentName'),
  parentContentId?: string(name='ParentContentId'),
}

model UpdateAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainContractContentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainContractContentResponseBody(name='body'),
}

async function updateAntChainContractContentWithOptions(request: UpdateAntChainContractContentRequest, runtime: Util.RuntimeOptions): UpdateAntChainContractContentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentId)) {
    body['ContentId'] = request.contentId;
  }
  if (!Util.isUnset(request.contentName)) {
    body['ContentName'] = request.contentName;
  }
  if (!Util.isUnset(request.parentContentId)) {
    body['ParentContentId'] = request.parentContentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAntChainContractContent',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAntChainContractContent(request: UpdateAntChainContractContentRequest): UpdateAntChainContractContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAntChainContractContentWithOptions(request, runtime);
}

model UpdateAntChainContractProjectRequest {
  projectDescription?: string(name='ProjectDescription'),
  projectId?: string(name='ProjectId'),
  projectName?: string(name='ProjectName'),
  projectVersion?: string(name='ProjectVersion'),
}

model UpdateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainContractProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainContractProjectResponseBody(name='body'),
}

async function updateAntChainContractProjectWithOptions(request: UpdateAntChainContractProjectRequest, runtime: Util.RuntimeOptions): UpdateAntChainContractProjectResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.projectDescription)) {
    body['ProjectDescription'] = request.projectDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.projectVersion)) {
    body['ProjectVersion'] = request.projectVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAntChainContractProject',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAntChainContractProject(request: UpdateAntChainContractProjectRequest): UpdateAntChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAntChainContractProjectWithOptions(request, runtime);
}

model UpdateAntChainMemberRequest {
  consortiumId?: string(name='ConsortiumId'),
  memberId?: string(name='MemberId'),
  memberName?: string(name='MemberName'),
}

model UpdateAntChainMemberResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainMemberResponseBody(name='body'),
}

async function updateAntChainMemberWithOptions(request: UpdateAntChainMemberRequest, runtime: Util.RuntimeOptions): UpdateAntChainMemberResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.consortiumId)) {
    body['ConsortiumId'] = request.consortiumId;
  }
  if (!Util.isUnset(request.memberId)) {
    body['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.memberName)) {
    body['MemberName'] = request.memberName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAntChainMember',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAntChainMember(request: UpdateAntChainMemberRequest): UpdateAntChainMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAntChainMemberWithOptions(request, runtime);
}

model UpdateAntChainQRCodeAuthorizationRequest {
  antChainId?: string(name='AntChainId'),
  authorizationType?: string(name='AuthorizationType'),
  QRCodeType?: string(name='QRCodeType'),
}

model UpdateAntChainQRCodeAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainQRCodeAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAntChainQRCodeAuthorizationResponseBody(name='body'),
}

async function updateAntChainQRCodeAuthorizationWithOptions(request: UpdateAntChainQRCodeAuthorizationRequest, runtime: Util.RuntimeOptions): UpdateAntChainQRCodeAuthorizationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.antChainId)) {
    body['AntChainId'] = request.antChainId;
  }
  if (!Util.isUnset(request.authorizationType)) {
    body['AuthorizationType'] = request.authorizationType;
  }
  if (!Util.isUnset(request.QRCodeType)) {
    body['QRCodeType'] = request.QRCodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAntChainQRCodeAuthorization',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAntChainQRCodeAuthorization(request: UpdateAntChainQRCodeAuthorizationRequest): UpdateAntChainQRCodeAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAntChainQRCodeAuthorizationWithOptions(request, runtime);
}

model UpgradeFabricChaincodeRequest {
  chaincodeId?: string(name='ChaincodeId'),
  collectionConfig?: string(name='CollectionConfig'),
  endorsePolicy?: string(name='EndorsePolicy'),
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model UpgradeFabricChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeName?: string(name='ChaincodeName'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model UpgradeFabricChaincodeResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeFabricChaincodeResponseBody(name='body'),
}

async function upgradeFabricChaincodeWithOptions(request: UpgradeFabricChaincodeRequest, runtime: Util.RuntimeOptions): UpgradeFabricChaincodeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodeId)) {
    body['ChaincodeId'] = request.chaincodeId;
  }
  if (!Util.isUnset(request.collectionConfig)) {
    body['CollectionConfig'] = request.collectionConfig;
  }
  if (!Util.isUnset(request.endorsePolicy)) {
    body['EndorsePolicy'] = request.endorsePolicy;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeFabricChaincode',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeFabricChaincode(request: UpgradeFabricChaincodeRequest): UpgradeFabricChaincodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeFabricChaincodeWithOptions(request, runtime);
}

model UpgradeFabricChaincodeDefinitionRequest {
  chaincodeId?: string(name='ChaincodeId'),
  chaincodePackageId?: string(name='ChaincodePackageId'),
  chaincodeVersion?: string(name='ChaincodeVersion'),
  collectionConfig?: string(name='CollectionConfig'),
  endorsePolicy?: string(name='EndorsePolicy'),
  initRequired?: boolean(name='InitRequired'),
  location?: string(name='Location'),
  organizationId?: string(name='OrganizationId'),
}

model UpgradeFabricChaincodeDefinitionResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: ChaincodeVO(name='Result'),
  success?: boolean(name='Success'),
}

model UpgradeFabricChaincodeDefinitionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeFabricChaincodeDefinitionResponseBody(name='body'),
}

async function upgradeFabricChaincodeDefinitionWithOptions(request: UpgradeFabricChaincodeDefinitionRequest, runtime: Util.RuntimeOptions): UpgradeFabricChaincodeDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.chaincodeId)) {
    body['ChaincodeId'] = request.chaincodeId;
  }
  if (!Util.isUnset(request.chaincodePackageId)) {
    body['ChaincodePackageId'] = request.chaincodePackageId;
  }
  if (!Util.isUnset(request.chaincodeVersion)) {
    body['ChaincodeVersion'] = request.chaincodeVersion;
  }
  if (!Util.isUnset(request.collectionConfig)) {
    body['CollectionConfig'] = request.collectionConfig;
  }
  if (!Util.isUnset(request.endorsePolicy)) {
    body['EndorsePolicy'] = request.endorsePolicy;
  }
  if (!Util.isUnset(request.initRequired)) {
    body['InitRequired'] = request.initRequired;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.organizationId)) {
    body['OrganizationId'] = request.organizationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeFabricChaincodeDefinition',
    version = '2018-12-21',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeFabricChaincodeDefinition(request: UpgradeFabricChaincodeDefinitionRequest): UpgradeFabricChaincodeDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeFabricChaincodeDefinitionWithOptions(request, runtime);
}

