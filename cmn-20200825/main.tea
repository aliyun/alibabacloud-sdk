/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cmn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateDedicatedLineRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  isp?: string(name='Isp', description='运营商'),
  bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
  dedicatedLineIp?: string(name='DedicatedLineIp', description='专线IP'),
  dedicatedLineGateway?: string(name='DedicatedLineGateway', description='专线网关'),
  dedicatedLineRole?: string(name='DedicatedLineRole', description='专线角色'),
  deviceId?: string(name='DeviceId', description='关联设备ID'),
  devicePort?: string(name='DevicePort', description='关联设备端口名称'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateDedicatedLineResponseBody = {
  dedicatedLineId?: string(name='DedicatedLineId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedLineResponseBody(name='body'),
}

async function createDedicatedLineWithOptions(request: CreateDedicatedLineRequest, runtime: Util.RuntimeOptions): CreateDedicatedLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedLine', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedLine(request: CreateDedicatedLineRequest): CreateDedicatedLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedLineWithOptions(request, runtime);
}

model CreateDeviceRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  hostName?: string(name='HostName', description='主机名'),
  ip?: string(name='Ip', description='设备IP'),
  sn?: string(name='Sn', description='设备SN'),
  mac?: string(name='Mac', description='设备MAC地址'),
  vendor?: string(name='Vendor', description='设备厂商'),
  model?: string(name='Model', description='设备型号'),
  serviceStatus?: string(name='ServiceStatus', description='设备状态'),
  securityDomain?: string(name='SecurityDomain', description='设备安全域'),
  loginType?: string(name='LoginType', description='登录类型'),
  loginUsername?: string(name='LoginUsername', description='登录账号'),
  loginPassword?: string(name='LoginPassword', description='登录密码'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP 版本号'),
  snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
  snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
  snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol'),
  snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='SNMP Privacy Passphase'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol'),
  extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceId?: string(name='DeviceId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDeviceWithOptions(request: CreateDeviceRequest, runtime: Util.RuntimeOptions): CreateDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDevice', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceWithOptions(request, runtime);
}

model CreateDeviceFormRequest {
  deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
  configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
  accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
  detailDisplay?: boolean(name='DetailDisplay', description='是否展示设备详情'),
  uniqueKey?: string(name='UniqueKey', description='设备形态的主键'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateDeviceFormResponseBody = {
  deviceFormId?: string(name='DeviceFormId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceFormResponseBody(name='body'),
}

async function createDeviceFormWithOptions(request: CreateDeviceFormRequest, runtime: Util.RuntimeOptions): CreateDeviceFormResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeviceForm', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeviceForm(request: CreateDeviceFormRequest): CreateDeviceFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceFormWithOptions(request, runtime);
}

model CreateDevicePropertyRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  propertyName?: string(name='PropertyName', description='属性名称'),
  propertyKey?: string(name='PropertyKey', description='属性主键'),
  propertyFormat?: string(name='PropertyFormat', description='属性格式'),
  propertyContent?: string(name='PropertyContent', description='属性内容'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateDevicePropertyResponseBody = {
  devicePropertyId?: string(name='DevicePropertyId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevicePropertyResponseBody(name='body'),
}

async function createDevicePropertyWithOptions(request: CreateDevicePropertyRequest, runtime: Util.RuntimeOptions): CreateDevicePropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeviceProperty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeviceProperty(request: CreateDevicePropertyRequest): CreateDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDevicePropertyWithOptions(request, runtime);
}

model CreateMonitorItemRequest {
  monitorItemName?: string(name='MonitorItemName', description='监控项名称'),
  monitorItemDescription?: string(name='MonitorItemDescription', description='监控项描述'),
  dataItem?: string(name='DataItem', description='数据项'),
  securityDomain?: string(name='SecurityDomain', description='安全域'),
  analysisCode?: string(name='AnalysisCode', description='解析代码'),
  collectionType?: string(name='CollectionType', description='采集类型'),
  effective?: int32(name='Effective', description='是否启用'),
  config?: string(name='Config', description='监控项参数配置'),
  execInterval?: int32(name='ExecInterval', description='执行间隔(s)'),
  deviceForm?: string(name='DeviceForm', description='设备形态'),
  alarmRuleList?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='告警状态'),
      variable?: string(name='Variable', description='指标名'),
      expression?: string(name='Expression', description='表达式'),
      value?: string(name='Value', description='比较值'),
    }
  ](name='AlarmRuleList', description='告警规则列表'),
  type?: string(name='Type', description='类型'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateMonitorItemResponseBody = {
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateMonitorItemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorItemResponseBody(name='body'),
}

async function createMonitorItemWithOptions(request: CreateMonitorItemRequest, runtime: Util.RuntimeOptions): CreateMonitorItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMonitorItem', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMonitorItem(request: CreateMonitorItemRequest): CreateMonitorItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMonitorItemWithOptions(request, runtime);
}

model CreatePhysicalSpaceRequest {
  physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
  country?: string(name='Country', description='所属国家'),
  province?: string(name='Province', description='所属省份'),
  city?: string(name='City', description='所属城市'),
  address?: string(name='Address', description='具体地址'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreatePhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
}

model CreatePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePhysicalSpaceResponseBody(name='body'),
}

async function createPhysicalSpaceWithOptions(request: CreatePhysicalSpaceRequest, runtime: Util.RuntimeOptions): CreatePhysicalSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePhysicalSpace', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPhysicalSpace(request: CreatePhysicalSpaceRequest): CreatePhysicalSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhysicalSpaceWithOptions(request, runtime);
}

model CreateRealtimeTaskRequest {
  deviceId?: string(name='DeviceId', description='设备ID'),
  script?: string(name='Script', description='模板执行脚本'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateRealtimeTaskResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  taskId?: string(name='TaskId', description='实时任务ID'),
}

model CreateRealtimeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRealtimeTaskResponseBody(name='body'),
}

async function createRealtimeTaskWithOptions(request: CreateRealtimeTaskRequest, runtime: Util.RuntimeOptions): CreateRealtimeTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRealtimeTask', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRealtimeTask(request: CreateRealtimeTaskRequest): CreateRealtimeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRealtimeTaskWithOptions(request, runtime);
}

model CreateTimePeriodRequest {
  timePeriodName?: string(name='TimePeriodName', description='时间段名称'),
  timePeriodDescription?: string(name='TimePeriodDescription', description='描述'),
  expression?: string(name='Expression', description='cron表达式'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateTimePeriodResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  timePeriodId?: string(name='TimePeriodId', description='时间段ID'),
}

model CreateTimePeriodResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTimePeriodResponseBody(name='body'),
}

async function createTimePeriodWithOptions(request: CreateTimePeriodRequest, runtime: Util.RuntimeOptions): CreateTimePeriodResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTimePeriod', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTimePeriod(request: CreateTimePeriodRequest): CreateTimePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTimePeriodWithOptions(request, runtime);
}

model DeleteDedicatedLineRequest {
  dedicatedLineId?: string(name='DedicatedLineId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteDedicatedLineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedLineResponseBody(name='body'),
}

async function deleteDedicatedLineWithOptions(request: DeleteDedicatedLineRequest, runtime: Util.RuntimeOptions): DeleteDedicatedLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDedicatedLine', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDedicatedLine(request: DeleteDedicatedLineRequest): DeleteDedicatedLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedLineWithOptions(request, runtime);
}

model DeleteDeviceRequest {
  deviceId?: string(name='DeviceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDevice', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

model DeleteDeviceFormRequest {
  deviceFormId?: string(name='DeviceFormId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteDeviceFormResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceFormResponseBody(name='body'),
}

async function deleteDeviceFormWithOptions(request: DeleteDeviceFormRequest, runtime: Util.RuntimeOptions): DeleteDeviceFormResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceForm', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceForm(request: DeleteDeviceFormRequest): DeleteDeviceFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceFormWithOptions(request, runtime);
}

model DeleteDevicePropertyRequest {
  devicePropertyId?: string(name='DevicePropertyId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteDevicePropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevicePropertyResponseBody(name='body'),
}

async function deleteDevicePropertyWithOptions(request: DeleteDevicePropertyRequest, runtime: Util.RuntimeOptions): DeleteDevicePropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceProperty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceProperty(request: DeleteDevicePropertyRequest): DeleteDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDevicePropertyWithOptions(request, runtime);
}

model DeleteInspectionTaskRequest {
  taskId?: string(name='TaskId', description='周期性任务的ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteInspectionTaskResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteInspectionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInspectionTaskResponseBody(name='body'),
}

async function deleteInspectionTaskWithOptions(request: DeleteInspectionTaskRequest, runtime: Util.RuntimeOptions): DeleteInspectionTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteInspectionTask', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteInspectionTask(request: DeleteInspectionTaskRequest): DeleteInspectionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInspectionTaskWithOptions(request, runtime);
}

model DeletePhysicalSpaceRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeletePhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeletePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePhysicalSpaceResponseBody(name='body'),
}

async function deletePhysicalSpaceWithOptions(request: DeletePhysicalSpaceRequest, runtime: Util.RuntimeOptions): DeletePhysicalSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePhysicalSpace', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePhysicalSpace(request: DeletePhysicalSpaceRequest): DeletePhysicalSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePhysicalSpaceWithOptions(request, runtime);
}

model DisableNotificationRequest {
  expiryTime?: string(name='ExpiryTime', description='到期时间'),
  reason?: string(name='Reason', description='关闭原因'),
  list?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      type?: string(name='Type', description='类型'),
      dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
    }
  ](name='List', description='关闭通知的对象'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DisableNotificationResponseBody = {
  requestId?: string(name='RequestId', description='request id'),
}

model DisableNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableNotificationResponseBody(name='body'),
}

async function disableNotificationWithOptions(request: DisableNotificationRequest, runtime: Util.RuntimeOptions): DisableNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableNotification', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableNotification(request: DisableNotificationRequest): DisableNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableNotificationWithOptions(request, runtime);
}

model EnableNotificationRequest {
  list?: [ 
    {
      type?: string(name='Type', description='类型'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
    }
  ](name='List', description='通知对象'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model EnableNotificationResponseBody = {
  requestId?: string(name='RequestId', description='request id'),
}

model EnableNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableNotificationResponseBody(name='body'),
}

async function enableNotificationWithOptions(request: EnableNotificationRequest, runtime: Util.RuntimeOptions): EnableNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableNotification', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableNotification(request: EnableNotificationRequest): EnableNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableNotificationWithOptions(request, runtime);
}

model GetAlarmStatusRequest {
  deviceId?: string(name='DeviceId', description='设备ID'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  type?: string(name='Type', description='数据类型'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
  dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetAlarmStatusResponseBody = {
  requestId?: string(name='RequestId', description='request Id'),
  alarmStatus?: {
    deviceId?: string(name='DeviceId', description='设备ID'),
    monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
    collectionTime?: string(name='CollectionTime', description='采集时间'),
    receiveTime?: string(name='ReceiveTime', description='接收时间'),
    alarmRule?: string(name='AlarmRule', description='命中告警规则'),
    alarmStatus?: string(name='AlarmStatus', description='告警状态'),
    result?: string(name='Result', description='采集结果'),
    abnormalDataItem?: string(name='AbnormalDataItem', description='异常数据项'),
    uniqueKey?: string(name='UniqueKey', description='索引'),
    responseCode?: string(name='ResponseCode', description='采集状态码'),
    resourceDevice?: {
      hostName?: string(name='HostName', description='设备名'),
      ip?: string(name='Ip', description='IP'),
      vendor?: string(name='Vendor', description='厂商'),
      model?: string(name='Model', description='型号'),
      status?: string(name='Status', description='状态'),
      sn?: string(name='Sn', description='sn'),
      space?: string(name='Space', description='物理空间'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      securityDomain?: string(name='SecurityDomain', description='安全域'),
      deviceForm?: string(name='DeviceForm', description='设备形态'),
    }(name='ResourceDevice', description='设备'),
    monitorItem?: {
      monitorItemName?: string(name='MonitorItemName', description='监控项名称'),
      monitorItemDescription?: string(name='MonitorItemDescription', description='描述'),
      securityDomain?: string(name='SecurityDomain', description='安全域'),
      collectionType?: string(name='CollectionType', description='采集类型'),
      execInterval?: string(name='ExecInterval', description='执行间隔'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      deviceForm?: string(name='DeviceForm', description='设备形态'),
      effective?: long(name='Effective', description='是否启用'),
    }(name='MonitorItem', description='监控项'),
    firstAbnormalTime?: string(name='FirstAbnormalTime', description='首次异常时间'),
    notificationSwitch?: {
      reason?: string(name='Reason', description='关闭原因'),
      expiryTime?: string(name='ExpiryTime', description='关闭到期时间'),
    }(name='NotificationSwitch', description='告警开关'),
    aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
    dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
    aggregateData?: {
      aggregateMode?: string(name='AggregateMode', description='聚合方式'),
      aggregateDataDescription?: string(name='AggregateDataDescription', description='描述'),
      dataItem?: string(name='DataItem', description='数据项'),
      aggregateDataName?: string(name='AggregateDataName', description='聚合数据名称'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      isAllDevice?: int32(name='IsAllDevice', description='是否聚合全部设备'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
    }(name='AggregateData', description='聚合数据详情'),
    dedicatedLine?: {
      dedicatedLineName?: string(name='DedicatedLineName', description='专线名称'),
      space?: string(name='Space', description='物理空间'),
      portName?: string(name='PortName', description='端口名'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      bandwidth?: string(name='Bandwidth', description='带宽'),
      ip?: string(name='Ip', description='IP'),
    }(name='DedicatedLine', description='专线详情'),
  }(name='AlarmStatus', description='告警状态'),
}

model GetAlarmStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlarmStatusResponseBody(name='body'),
}

async function getAlarmStatusWithOptions(request: GetAlarmStatusRequest, runtime: Util.RuntimeOptions): GetAlarmStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAlarmStatus', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAlarmStatus(request: GetAlarmStatusRequest): GetAlarmStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlarmStatusWithOptions(request, runtime);
}

model GetDedicatedLineRequest {
  dedicatedLineId?: string(name='DedicatedLineId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDedicatedLineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  dedicatedLine?: {
    dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
    isp?: string(name='Isp', description='运营商'),
    bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
    dedicatedLineIp?: string(name='DedicatedLineIp', description='专线IP'),
    dedicatedLineGateway?: string(name='DedicatedLineGateway', description='专线网关'),
    dedicatedLineRole?: string(name='DedicatedLineRole', description='专线角色'),
    deviceId?: string(name='DeviceId', description='关联设备ID'),
    devicePort?: string(name='DevicePort', description='关联设备端口名称'),
    deviceName?: string(name='DeviceName', description='关联设备名称'),
    physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  }(name='DedicatedLine', description='物理空间专线详情'),
}

model GetDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  body: GetDedicatedLineResponseBody(name='body'),
}

async function getDedicatedLineWithOptions(request: GetDedicatedLineRequest, runtime: Util.RuntimeOptions): GetDedicatedLineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDedicatedLine', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDedicatedLine(request: GetDedicatedLineRequest): GetDedicatedLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDedicatedLineWithOptions(request, runtime);
}

model GetDeviceRequest {
  deviceId?: string(name='DeviceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDeviceResponseBody = {
  device?: {
    deviceId?: string(name='DeviceId', description='设备ID'),
    deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
    deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
    physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
    physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
    hostName?: string(name='HostName', description='主机名'),
    ip?: string(name='Ip', description='设备IP'),
    sn?: string(name='Sn', description='设备SN'),
    mac?: string(name='Mac', description='设备MAC地址'),
    vendor?: string(name='Vendor', description='设备厂商'),
    model?: string(name='Model', description='设备型号'),
    securityDomain?: string(name='SecurityDomain', description='设备安全域'),
    serviceStatus?: string(name='ServiceStatus', description='设备状态'),
    loginType?: string(name='LoginType', description='登录类型'),
    loginUsername?: string(name='LoginUsername', description='登录账号'),
    loginPassword?: string(name='LoginPassword', description='登录密码'),
    snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号'),
    snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
    snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
    snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
    snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名'),
    snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase'),
    snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol'),
    snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='SNMP Privacy Passphase'),
    snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol'),
    extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
  }(name='Device', description='设备详情'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceResponseBody(name='body'),
}

async function getDeviceWithOptions(request: GetDeviceRequest, runtime: Util.RuntimeOptions): GetDeviceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDevice', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDevice(request: GetDeviceRequest): GetDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceWithOptions(request, runtime);
}

model GetDeviceConfigRequest {
  deviceId?: string(name='DeviceId', description='实例 ID。'),
  date?: string(name='Date', description='查询日期，格式 yyyy-MM-dd'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDeviceConfigResponseBody = {
  deviceConfig?: string(name='DeviceConfig', description='设备配置内容'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceConfigResponseBody(name='body'),
}

async function getDeviceConfigWithOptions(request: GetDeviceConfigRequest, runtime: Util.RuntimeOptions): GetDeviceConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceConfig', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceConfig(request: GetDeviceConfigRequest): GetDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceConfigWithOptions(request, runtime);
}

model GetDeviceConfigDiffRequest {
  deviceId?: string(name='DeviceId', description='实例 ID。'),
  startDate?: string(name='StartDate', description='查询日期1，格式 yyyy-MM-dd'),
  endDate?: string(name='EndDate', description='查询日期2，格式 yyyy-MM-dd'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDeviceConfigDiffResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceConfigDiff?: {
    extractDiff?: string(name='ExtractDiff', description='差异提取'),
    totalDiff?: string(name='TotalDiff', description='全量比对'),
  }(name='DeviceConfigDiff'),
}

model GetDeviceConfigDiffResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceConfigDiffResponseBody(name='body'),
}

async function getDeviceConfigDiffWithOptions(request: GetDeviceConfigDiffRequest, runtime: Util.RuntimeOptions): GetDeviceConfigDiffResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceConfigDiff', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceConfigDiff(request: GetDeviceConfigDiffRequest): GetDeviceConfigDiffResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceConfigDiffWithOptions(request, runtime);
}

model GetDeviceFormRequest {
  deviceFormId?: string(name='DeviceFormId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDeviceFormResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceForm?: {
    configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
    attributeList?: [ 
      {
        attributeKey?: string(name='AttributeKey', description='设备形态属性主键'),
        attributeName?: string(name='AttributeName', description='设备形态属性名称'),
        attributeRequirement?: boolean(name='AttributeRequirement', description='设备形态属性是否必填'),
        attributeUniqueness?: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一'),
        attributeFormat?: string(name='AttributeFormat', description='设备形态属性值格式'),
        attributeType?: string(name='AttributeType', description='设备形态属性值类型'),
        attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象'),
        attributeTableDisplay?: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见'),
        attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符'),
        attributeQuery?: boolean(name='AttributeQuery', description='前端是否展示对应的查询控件'),
        attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', description='前端查询控件是否支持模糊搜索'),
        attributeBuiltIn?: boolean(name='AttributeBuiltIn', description='设备形态属性是否内置'),
      }
    ](name='AttributeList', description='设备形态属性列表'),
    deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
    deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
    formBuiltIn?: boolean(name='FormBuiltIn', description='设备形态是否内置'),
    accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
    detailDisplay?: boolean(name='DetailDisplay', description='是否展示设备详情'),
    uniqueKey?: string(name='UniqueKey', description='设备形态主键'),
  }(name='DeviceForm', description='设备详情'),
}

model GetDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceFormResponseBody(name='body'),
}

async function getDeviceFormWithOptions(request: GetDeviceFormRequest, runtime: Util.RuntimeOptions): GetDeviceFormResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceForm', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceForm(request: GetDeviceFormRequest): GetDeviceFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceFormWithOptions(request, runtime);
}

model GetDevicePropertyRequest {
  devicePropertyId?: string(name='DevicePropertyId', description='实例 ID。'),
  propertyKey?: string(name='PropertyKey', description='属性主键'),
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDevicePropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceProperty?: {
    devicePropertyId?: string(name='DevicePropertyId', description='设备属性ID'),
    deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
    deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
    propertyName?: string(name='PropertyName', description='属性名称'),
    propertyKey?: string(name='PropertyKey', description='属性主键'),
    propertyFormat?: string(name='PropertyFormat', description='属性格式'),
    propertyContent?: string(name='PropertyContent', description='属性内容'),
    builtIn?: boolean(name='BuiltIn', description='是否内置属性'),
  }(name='DeviceProperty', description='设备属性详情'),
}

model GetDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevicePropertyResponseBody(name='body'),
}

async function getDevicePropertyWithOptions(request: GetDevicePropertyRequest, runtime: Util.RuntimeOptions): GetDevicePropertyResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceProperty', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceProperty(request: GetDevicePropertyRequest): GetDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDevicePropertyWithOptions(request, runtime);
}

model GetInspectionTaskRequest {
  taskId?: string(name='TaskId', description='巡检项ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetInspectionTaskResponseBody = {
  space?: string(name='Space', description='物理空间'),
  requestId?: string(name='RequestId', description='请求ID'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  inspectionResult?: string(name='InspectionResult', description='巡检结果'),
  inspectionAlarmRules?: [ 
    {
      expression?: string(name='Expression', description='告警符号'),
      operator?: string(name='Operator', description='告警操作符'),
      value?: string(name='Value', description='告警值'),
      actualValue?: string(name='ActualValue', description='告警实际值'),
      level?: string(name='Level', description='告警级别'),
    }
  ](name='InspectionAlarmRules', description='告警规则'),
  IP?: string(name='IP', description='IP地址'),
  hostName?: string(name='HostName', description='主机名'),
  vendor?: string(name='Vendor', description='厂商'),
  taskStatus?: string(name='TaskStatus', description='任务状态'),
  itemId?: string(name='ItemId', description='巡检项ID'),
  executionEndTime?: string(name='ExecutionEndTime', description='巡检结束时间'),
  executionBeginTime?: string(name='ExecutionBeginTime', description='巡检开始时间'),
  model?: [ string ](name='Model', description='型号'),
  itemName?: string(name='ItemName', description='巡检项名字'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  scriptId?: string(name='ScriptId', description='模板ID'),
  taskId?: string(name='TaskId', description='任务ID'),
}

model GetInspectionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetInspectionTaskResponseBody(name='body'),
}

async function getInspectionTaskWithOptions(request: GetInspectionTaskRequest, runtime: Util.RuntimeOptions): GetInspectionTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetInspectionTask', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getInspectionTask(request: GetInspectionTaskRequest): GetInspectionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInspectionTaskWithOptions(request, runtime);
}

model GetPhysicalSpaceRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetPhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  physicalSpace?: {
    physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
    physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
    country?: string(name='Country', description='所属国家'),
    province?: string(name='Province', description='所属省份'),
    city?: string(name='City', description='所属城市'),
    address?: string(name='Address', description='具体地址'),
  }(name='PhysicalSpace', description='物理空间详情'),
}

model GetPhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetPhysicalSpaceResponseBody(name='body'),
}

async function getPhysicalSpaceWithOptions(request: GetPhysicalSpaceRequest, runtime: Util.RuntimeOptions): GetPhysicalSpaceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetPhysicalSpace', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getPhysicalSpace(request: GetPhysicalSpaceRequest): GetPhysicalSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalSpaceWithOptions(request, runtime);
}

model GetRealtimeTaskRequest {
  taskId?: string(name='TaskId', description='实时任务ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetRealtimeTaskResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  inspectionTask?: {
    taskStatus?: string(name='TaskStatus', description='巡检状态'),
    inspectionResult?: string(name='InspectionResult', description='巡检输出'),
    errorCode?: string(name='ErrorCode', description='巡检错误码'),
    inspectionMessage?: string(name='InspectionMessage', description='巡检错误信息'),
  }(name='InspectionTask', description='请求任务结果'),
}

model GetRealtimeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealtimeTaskResponseBody(name='body'),
}

async function getRealtimeTaskWithOptions(request: GetRealtimeTaskRequest, runtime: Util.RuntimeOptions): GetRealtimeTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetRealtimeTask', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getRealtimeTask(request: GetRealtimeTaskRequest): GetRealtimeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRealtimeTaskWithOptions(request, runtime);
}

model ListAlarmStatusRequest {
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  space?: string(name='Space', description='物理空间'),
  deviceForm?: string(name='DeviceForm', description='设备形态'),
  status?: string(name='Status', description='告警状态'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  type?: string(name='Type', description='数据类型'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListAlarmStatusResponseBody = {
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  alarmStatus?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      collectionTime?: string(name='CollectionTime', description='检测时间'),
      receiveTime?: string(name='ReceiveTime', description='接收时间'),
      alarmRule?: string(name='AlarmRule', description='命中告警规则'),
      alarmStatus?: string(name='AlarmStatus', description='告警状态'),
      result?: string(name='Result', description='采集结果'),
      abnormalDataItem?: string(name='AbnormalDataItem', description='异常数据项'),
      uniqueKey?: string(name='UniqueKey', description='索引'),
      responseCode?: string(name='ResponseCode', description='采集状态码'),
      resourceDevice?: {
        hostName?: string(name='HostName', description='设备名'),
      }(name='ResourceDevice', description='设备'),
      monitorItem?: {
        monitorItemName?: string(name='MonitorItemName', description='监控项名称'),
      }(name='MonitorItem', description='监控项'),
      firstAbnormalTime?: string(name='FirstAbnormalTime', description='首次异常时间'),
      notificationSwitch?: {
        reason?: string(name='Reason', description='关闭原因'),
        expiryTime?: string(name='ExpiryTime', description='关闭到期时间'),
      }(name='NotificationSwitch', description='告警开关配置'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      aggregateData?: {
        aggregateDataName?: string(name='AggregateDataName', description='聚合数据名称'),
        dataItem?: string(name='DataItem', description='数据项'),
      }(name='AggregateData', description='聚合数据'),
      dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
      dedicatedLine?: {
        dedicatedLineName?: string(name='DedicatedLineName', description='专线名称'),
      }(name='DedicatedLine', description='专线'),
    }
  ](name='AlarmStatus', description='告警状态列表'),
  statistics?: [ 
    {
      count?: long(name='Count', description='数量'),
      status?: string(name='Status', description='告警状态'),
    }
  ](name='Statistics', description='告警状态统计'),
}

model ListAlarmStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlarmStatusResponseBody(name='body'),
}

async function listAlarmStatusWithOptions(request: ListAlarmStatusRequest, runtime: Util.RuntimeOptions): ListAlarmStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAlarmStatus', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAlarmStatus(request: ListAlarmStatusRequest): ListAlarmStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlarmStatusWithOptions(request, runtime);
}

model ListAlarmStatusHistoriesRequest {
  start?: long(name='Start', description='开始时间秒级时间戳'),
  end?: long(name='End', description='结束时间秒级时间戳'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  type?: string(name='Type', description='类型'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
  dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListAlarmStatusHistoriesResponseBody = {
  requestId?: string(name='RequestId', description='request id'),
  alarmStatusHistories?: [ 
    {
      timestamp?: long(name='Timestamp', description='时间戳'),
      value?: string(name='Value', description='数值'),
    }
  ](name='AlarmStatusHistories', description='数据列表'),
}

model ListAlarmStatusHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlarmStatusHistoriesResponseBody(name='body'),
}

async function listAlarmStatusHistoriesWithOptions(request: ListAlarmStatusHistoriesRequest, runtime: Util.RuntimeOptions): ListAlarmStatusHistoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAlarmStatusHistories', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAlarmStatusHistories(request: ListAlarmStatusHistoriesRequest): ListAlarmStatusHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlarmStatusHistoriesWithOptions(request, runtime);
}

model ListDedicatedLinesRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDedicatedLinesResponseBody = {
  dedicatedLines?: [ 
    {
      dedicatedLineId?: string(name='DedicatedLineId', description='物理空间专线ID'),
      isp?: string(name='Isp', description='运营商'),
      bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
      dedicatedLineIp?: string(name='DedicatedLineIp', description='专线IP'),
      dedicatedLineGateway?: string(name='DedicatedLineGateway', description='专线网关'),
      dedicatedLineRole?: string(name='DedicatedLineRole', description='专线角色'),
      deviceId?: string(name='DeviceId', description='关联设备ID'),
      devicePort?: string(name='DevicePort', description='关联设备端口'),
      deviceName?: string(name='DeviceName', description='关联设备名称'),
      physicalSpaceId?: string(name='PhysicalSpaceId', description='关联物理空间ID'),
    }
  ](name='DedicatedLines', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListDedicatedLinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDedicatedLinesResponseBody(name='body'),
}

async function listDedicatedLinesWithOptions(request: ListDedicatedLinesRequest, runtime: Util.RuntimeOptions): ListDedicatedLinesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDedicatedLines', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDedicatedLines(request: ListDedicatedLinesRequest): ListDedicatedLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDedicatedLinesWithOptions(request, runtime);
}

model ListDeviceFormsRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDeviceFormsResponseBody = {
  deviceForms?: [ 
    {
      configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
      attributeList?: [ 
        {
          attributeKey?: string(name='AttributeKey', description='设备形态属性主键'),
          attributeName?: string(name='AttributeName', description='设备形态属性名称'),
          attributeRequirement?: boolean(name='AttributeRequirement', description='设备形态属性是否必填'),
          attributeUniqueness?: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一'),
          attributeFormat?: string(name='AttributeFormat', description='设备形态属性值格式'),
          attributeType?: string(name='AttributeType', description='设备形态属性值类型'),
          attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象'),
          attributeTableDisplay?: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见'),
          attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符'),
          attributeQuery?: boolean(name='AttributeQuery', description='前端是否展示对应的查询控件'),
          attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', description='前端查询控件是否支持模糊搜索'),
          attributeBuiltIn?: boolean(name='AttributeBuiltIn', description='设备形态属性是否内置'),
        }
      ](name='AttributeList', description='设备形态属性列表'),
      accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
      detailDisplay?: boolean(name='DetailDisplay', description='是否展示详情'),
      formBuiltIn?: boolean(name='FormBuiltIn', description='设备形态是否内置'),
      uniqueKey?: string(name='UniqueKey', description='设备形态主键'),
      deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
      deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
    }
  ](name='DeviceForms', description='数组，返回示例目录。'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
}

model ListDeviceFormsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceFormsResponseBody(name='body'),
}

async function listDeviceFormsWithOptions(request: ListDeviceFormsRequest, runtime: Util.RuntimeOptions): ListDeviceFormsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceForms', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceForms(request: ListDeviceFormsRequest): ListDeviceFormsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceFormsWithOptions(request, runtime);
}

model ListDevicePropertiesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDevicePropertiesResponseBody = {
  deviceProperties?: [ 
    {
      devicePropertyId?: string(name='DevicePropertyId', description='设备属性ID'),
      deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
      deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
      propertyName?: string(name='PropertyName', description='属性名称'),
      propertyKey?: string(name='PropertyKey', description='属性主键'),
      propertyFormat?: string(name='PropertyFormat', description='属性格式'),
      propertyContent?: string(name='PropertyContent', description='属性内容'),
      builtIn?: boolean(name='BuiltIn', description='是否内置属性'),
    }
  ](name='DeviceProperties', description='数组，返回示例目录。'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
}

model ListDevicePropertiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicePropertiesResponseBody(name='body'),
}

async function listDevicePropertiesWithOptions(request: ListDevicePropertiesRequest, runtime: Util.RuntimeOptions): ListDevicePropertiesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceProperties', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceProperties(request: ListDevicePropertiesRequest): ListDevicePropertiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicePropertiesWithOptions(request, runtime);
}

model ListDevicesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  hostName?: [ string ](name='HostName', description='设备主机名'),
  ip?: [ string ](name='Ip', description='设备IP'),
  sn?: [ string ](name='Sn', description='设备SN'),
  mac?: [ string ](name='Mac', description='设备MAC'),
  vendor?: [ string ](name='Vendor', description='设备厂商'),
  model?: [ string ](name='Model', description='设备型号'),
  serviceStatus?: [ string ](name='ServiceStatus', description='设备服务状态'),
  securityDomain?: [ string ](name='SecurityDomain', description='安全域'),
  extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDevicesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  devices?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
      deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
      physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
      physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
      hostName?: string(name='HostName', description='主机名'),
      ip?: string(name='Ip', description='设备IP'),
      sn?: string(name='Sn', description='设备SN'),
      mac?: string(name='Mac', description='设备MAC地址'),
      vendor?: string(name='Vendor', description='设备厂商'),
      model?: string(name='Model', description='设备型号'),
      securityDomain?: string(name='SecurityDomain', description='设备安全域'),
      serviceStatus?: string(name='ServiceStatus', description='设备状态'),
      loginType?: string(name='LoginType', description='登录类型'),
      loginUsername?: string(name='LoginUsername', description='登录账号'),
      loginPassword?: string(name='LoginPassword', description='登录密码'),
      snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号'),
      snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
      snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
      snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
      snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名'),
      snmpAuthPassPhrase?: string(name='SnmpAuthPassPhrase', description='SNMP Auth PassPhrase'),
      snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol'),
      snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='SNMP Privacy Passphase'),
      snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol'),
      extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
    }
  ](name='Devices', description='数组，返回示例目录。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDevices', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model ListDeviceValuesRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
  attributeKeyword?: string(name='AttributeKeyword', description='查询属性主键'),
  attributeGroup?: string(name='AttributeGroup', description='查询属性对应JSON中主键'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDeviceValuesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceValues?: [ string ](name='DeviceValues', description='数组，返回示例目录。'),
}

model ListDeviceValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceValuesResponseBody(name='body'),
}

async function listDeviceValuesWithOptions(request: ListDeviceValuesRequest, runtime: Util.RuntimeOptions): ListDeviceValuesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceValues', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceValues(request: ListDeviceValuesRequest): ListDeviceValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceValuesWithOptions(request, runtime);
}

model ListInspectionTasksRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  itemId?: string(name='ItemId', description='巡检项ID'),
  hostName?: string(name='HostName', description='主机名'),
  ip?: string(name='Ip', description='设备IP'),
  taskStatus?: string(name='TaskStatus', description='巡检状态'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListInspectionTasksResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='请求ID'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  inspectionTasks?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      itemId?: string(name='ItemId', description='巡检项ID'),
      executionEndTime?: string(name='ExecutionEndTime', description='巡检结束时间'),
      executionBeginTime?: string(name='ExecutionBeginTime', description='巡检开始时间'),
      itemName?: string(name='ItemName', description='巡检项名字'),
      scriptId?: string(name='ScriptId', description='模板ID'),
      space?: string(name='Space', description='物理空间'),
      inspectionResult?: string(name='InspectionResult', description='巡检结果'),
      inspectionAlarmRules?: [ 
        {
          alarmExpression?: string(name='AlarmExpression', description='告警符号'),
          alarmOperator?: string(name='AlarmOperator', description='告警变量'),
          alarmValue?: string(name='AlarmValue', description='告警值'),
          actualValue?: string(name='ActualValue', description='告警实际值'),
          alarmLevel?: string(name='AlarmLevel', description='告警级别'),
        }
      ](name='InspectionAlarmRules', description='告警规则'),
      IP?: string(name='IP', description='IP地址'),
      hostName?: string(name='HostName', description='主机名'),
      vendor?: string(name='Vendor', description='厂商'),
      taskStatus?: string(name='TaskStatus', description='任务状态'),
      model?: [ string ](name='Model', description='型号'),
      errorCode?: string(name='ErrorCode', description='错误码'),
      inspectionMessage?: string(name='InspectionMessage', description='巡检信息'),
      taskId?: string(name='TaskId', description='任务ID'),
    }
  ](name='InspectionTasks', description='数组，返回示例目录。'),
}

model ListInspectionTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListInspectionTasksResponseBody(name='body'),
}

async function listInspectionTasksWithOptions(request: ListInspectionTasksRequest, runtime: Util.RuntimeOptions): ListInspectionTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListInspectionTasks', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listInspectionTasks(request: ListInspectionTasksRequest): ListInspectionTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInspectionTasksWithOptions(request, runtime);
}

model ListInstancesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  instances?: [ 
    {
      instanceId?: string(name='InstanceId', description='实例ID'),
      instanceName?: string(name='InstanceName', description='实例名称'),
      instanceSpec?: string(name='InstanceSpec', description='实例规格'),
      instanceOpenDate?: string(name='InstanceOpenDate', description='实例开通时间'),
      instanceEndDate?: string(name='InstanceEndDate', description='实例到期时间'),
      instanceDeviceMaxCount?: string(name='InstanceDeviceMaxCount', description='最大纳管设备数量'),
    }
  ](name='Instances', description='实例列表'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(runtime: Util.RuntimeOptions): ListInstancesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListInstances', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listInstances(): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(runtime);
}

model ListMonitorDataRequest {
  start?: long(name='Start', description='开始时间'),
  end?: long(name='End', description='结束时间'),
  dataType?: string(name='DataType', description='数据类型'),
  dataItem?: string(name='DataItem', description='数据项'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  key?: string(name='Key', description='key'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
  portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
  dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListMonitorDataResponseBody = {
  requestId?: string(name='RequestId', description='Request Id'),
  monitorData?: [ 
    {
      timestamp?: long(name='Timestamp', description='时间戳'),
      value?: string(name='Value', description='数值'),
      dataItem?: string(name='DataItem', description='数据项'),
      key?: string(name='Key', description='key'),
    }
  ](name='MonitorData', description='数据列表'),
}

model ListMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: ListMonitorDataResponseBody(name='body'),
}

async function listMonitorDataWithOptions(request: ListMonitorDataRequest, runtime: Util.RuntimeOptions): ListMonitorDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListMonitorData', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listMonitorData(request: ListMonitorDataRequest): ListMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMonitorDataWithOptions(request, runtime);
}

model ListNotificationHistoriesRequest {
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  type?: string(name='Type', description='类型'),
  dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListNotificationHistoriesResponseBody = {
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  requestId?: string(name='RequestId', description='request Id'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  notificationHistories?: [ 
    {
      time?: string(name='Time', description='发送时间'),
      notificationMode?: string(name='NotificationMode', description='发送方式'),
      status?: string(name='Status', description='发送状态'),
      output?: string(name='Output', description='输出内容'),
      message?: string(name='Message', description='发送内容'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      notificationGroupId?: string(name='NotificationGroupId', description='通知组ID'),
      notificationGroupName?: string(name='NotificationGroupName', description='通知组名称'),
      dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
    }
  ](name='NotificationHistories', description='数据列表'),
}

model ListNotificationHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNotificationHistoriesResponseBody(name='body'),
}

async function listNotificationHistoriesWithOptions(request: ListNotificationHistoriesRequest, runtime: Util.RuntimeOptions): ListNotificationHistoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListNotificationHistories', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listNotificationHistories(request: ListNotificationHistoriesRequest): ListNotificationHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNotificationHistoriesWithOptions(request, runtime);
}

model ListPhysicalSpacesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  physicalSpaceIds?: [ string ](name='PhysicalSpaceIds', description='物理空间ID'),
  physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称，支持模糊搜索。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListPhysicalSpacesResponseBody = {
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  physicalSpaces?: [ 
    {
      physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
      physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
      country?: string(name='Country', description='所属国家'),
      province?: string(name='Province', description='所属省份'),
      city?: string(name='City', description='所属城市'),
      address?: string(name='Address', description='具体地址'),
    }
  ](name='PhysicalSpaces', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
}

model ListPhysicalSpacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPhysicalSpacesResponseBody(name='body'),
}

async function listPhysicalSpacesWithOptions(request: ListPhysicalSpacesRequest, runtime: Util.RuntimeOptions): ListPhysicalSpacesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListPhysicalSpaces', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listPhysicalSpaces(request: ListPhysicalSpacesRequest): ListPhysicalSpacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhysicalSpacesWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
  message?: string(name='Message'),
  code?: string(name='Code'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListRegions', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListTasksHistoriesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  itemId?: string(name='ItemId', description='巡检项ID'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListTasksHistoriesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='请求ID'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  inspectionTasks?: [ 
    {
      executionEndTime?: string(name='ExecutionEndTime', description='巡检结束时间'),
      executionBeginTime?: string(name='ExecutionBeginTime', description='巡检开始时间'),
      inspectionResult?: string(name='InspectionResult', description='巡检结果'),
      inspectionAlarmRules?: [ 
        {
          alarmExpression?: string(name='AlarmExpression', description='告警表达式'),
          alarmOperator?: string(name='AlarmOperator', description='告警操作符'),
          alarmValue?: string(name='AlarmValue', description='告警值'),
          actualValue?: string(name='ActualValue', description='告警实际值'),
          alarmLevel?: string(name='AlarmLevel', description='告警级别'),
        }
      ](name='InspectionAlarmRules', description='告警规则'),
      taskId?: string(name='TaskId', description='任务ID'),
    }
  ](name='InspectionTasks', description='数组，返回示例目录。'),
}

model ListTasksHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTasksHistoriesResponseBody(name='body'),
}

async function listTasksHistoriesWithOptions(request: ListTasksHistoriesRequest, runtime: Util.RuntimeOptions): ListTasksHistoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListTasksHistories', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listTasksHistories(request: ListTasksHistoriesRequest): ListTasksHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksHistoriesWithOptions(request, runtime);
}

model RetryTasksRequest {
  retryTasks?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      scriptId?: string(name='ScriptId', description='脚本ID'),
    }
  ](name='RetryTasks', description='重执行任务的数组'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model RetryTasksShrinkRequest {
  retryTasksShrink?: string(name='RetryTasks', description='重执行任务的数组'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model RetryTasksResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model RetryTasksResponse = {
  headers: map[string]string(name='headers'),
  body: RetryTasksResponseBody(name='body'),
}

async function retryTasksWithOptions(tmpReq: RetryTasksRequest, runtime: Util.RuntimeOptions): RetryTasksResponse {
  Util.validateModel(tmpReq);
  var request = new RetryTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.retryTasks)) {
    request.retryTasksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.retryTasks, 'RetryTasks', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RetryTasks', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function retryTasks(request: RetryTasksRequest): RetryTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryTasksWithOptions(request, runtime);
}

model UpdateDedicatedLineRequest {
  dedicatedLineId?: string(name='DedicatedLineId', description='实例 ID。'),
  isp?: string(name='Isp', description='运营商'),
  bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
  dedicatedLineIp?: string(name='DedicatedLineIp', description='专线IP'),
  dedicatedLineGateway?: string(name='DedicatedLineGateway', description='专线网关'),
  dedicatedLineRole?: string(name='DedicatedLineRole', description='专线角色'),
  deviceId?: string(name='DeviceId', description='关联设备ID'),
  devicePort?: string(name='DevicePort', description='关联设备端口名称'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDedicatedLineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDedicatedLineResponseBody(name='body'),
}

async function updateDedicatedLineWithOptions(request: UpdateDedicatedLineRequest, runtime: Util.RuntimeOptions): UpdateDedicatedLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDedicatedLine', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDedicatedLine(request: UpdateDedicatedLineRequest): UpdateDedicatedLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDedicatedLineWithOptions(request, runtime);
}

model UpdateDeviceRequest {
  deviceId?: string(name='DeviceId', description='设备ID'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间'),
  hostName?: string(name='HostName', description='主机名'),
  ip?: string(name='Ip', description='设备IP'),
  sn?: string(name='Sn', description='设备SN'),
  mac?: string(name='Mac', description='设备MAC地址'),
  vendor?: string(name='Vendor', description='设备厂商'),
  model?: string(name='Model', description='设备型号'),
  serviceStatus?: string(name='ServiceStatus', description='设备状态'),
  securityDomain?: string(name='SecurityDomain', description='设备安全域'),
  loginType?: string(name='LoginType', description='登录类型'),
  loginUsername?: string(name='LoginUsername', description='登录账号'),
  loginPassword?: string(name='LoginPassword', description='登录密码'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP 版本号'),
  snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
  snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
  snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='Auth Protocol'),
  snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='Privacy Passphase'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='Privacy Protocol'),
  extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceResponseBody(name='body'),
}

async function updateDeviceWithOptions(request: UpdateDeviceRequest, runtime: Util.RuntimeOptions): UpdateDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDevice', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDevice(request: UpdateDeviceRequest): UpdateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceWithOptions(request, runtime);
}

model UpdateDeviceFormRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
  accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
  attributeList?: [ 
    {
      attributeKey?: string(name='AttributeKey', description='设备形态属性主键'),
      attributeName?: string(name='AttributeName', description='设备形态属性名称'),
      attributeRequirement?: boolean(name='AttributeRequirement', description='设备形态属性是否必填'),
      attributeUniqueness?: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一'),
      attributeFormat?: string(name='AttributeFormat', description='设备形态属性值格式'),
      attributeType?: string(name='AttributeType', description='设备形态属性值类型'),
      attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象'),
      attributeTableDisplay?: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见'),
      attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符'),
      attributeQuery?: boolean(name='AttributeQuery', description='前端展示搜索控件'),
      attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', description='查询支持模糊搜索'),
    }
  ](name='AttributeList', description='设备形态属性列表'),
  detailDisplay?: boolean(name='DetailDisplay', description='是否展示设备详情'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDeviceFormShrinkRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
  accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
  attributeListShrink?: string(name='AttributeList', description='设备形态属性列表'),
  detailDisplay?: boolean(name='DetailDisplay', description='是否展示设备详情'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDeviceFormResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceFormResponseBody(name='body'),
}

async function updateDeviceFormWithOptions(tmpReq: UpdateDeviceFormRequest, runtime: Util.RuntimeOptions): UpdateDeviceFormResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDeviceFormShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.attributeList)) {
    request.attributeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attributeList, 'AttributeList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceForm', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceForm(request: UpdateDeviceFormRequest): UpdateDeviceFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceFormWithOptions(request, runtime);
}

model UpdateDevicePropertyRequest {
  devicePropertyId?: string(name='DevicePropertyId', description='实例 ID。'),
  propertyFormat?: string(name='PropertyFormat', description='属性格式'),
  propertyContent?: string(name='PropertyContent', description='属性内容'),
  propertyName?: string(name='PropertyName', description='属性名称'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDevicePropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevicePropertyResponseBody(name='body'),
}

async function updateDevicePropertyWithOptions(request: UpdateDevicePropertyRequest, runtime: Util.RuntimeOptions): UpdateDevicePropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceProperty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceProperty(request: UpdateDevicePropertyRequest): UpdateDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDevicePropertyWithOptions(request, runtime);
}

model UpdateDevicesRequest {
  deviceIds?: [ string ](name='DeviceIds', description='设备ID'),
  loginType?: string(name='LoginType', description='登录类型'),
  loginUsername?: string(name='LoginUsername', description='登录账号'),
  loginPassword?: string(name='LoginPassword', description='登录密码'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP 版本号'),
  snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
  snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
  snmpUserName?: string(name='SnmpUserName', description='SNMP 用户名'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol'),
  snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='SNMP Privacy Passphase'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDevicesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevicesResponseBody(name='body'),
}

async function updateDevicesWithOptions(request: UpdateDevicesRequest, runtime: Util.RuntimeOptions): UpdateDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDevices', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDevices(request: UpdateDevicesRequest): UpdateDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDevicesWithOptions(request, runtime);
}

model UpdatePhysicalSpaceRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='实例 ID。'),
  physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
  country?: string(name='Country', description='所属国家'),
  province?: string(name='Province', description='所属省份'),
  city?: string(name='City', description='所属城市'),
  address?: string(name='Address', description='具体地址'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdatePhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdatePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePhysicalSpaceResponseBody(name='body'),
}

async function updatePhysicalSpaceWithOptions(request: UpdatePhysicalSpaceRequest, runtime: Util.RuntimeOptions): UpdatePhysicalSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdatePhysicalSpace', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updatePhysicalSpace(request: UpdatePhysicalSpaceRequest): UpdatePhysicalSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhysicalSpaceWithOptions(request, runtime);
}

