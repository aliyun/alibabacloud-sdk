/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cmn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model OrderStep {
  displayMethod?: string(name='DisplayMethod', description='步骤展示方式'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  jobKwargs?: string(name='JobKwargs', description='步骤任务参数'),
  jobMessage?: string(name='JobMessage', description='步骤标题'),
  jobReturnStatus?: string(name='JobReturnStatus', description='步骤标题'),
  jobReturnValues?: string(name='JobReturnValues', description='步骤任务返回'),
  jobSystem?: string(name='JobSystem', description='步骤任务系统'),
  orderId?: string(name='OrderId', description='工单id'),
  orderStepId?: string(name='OrderStepId', description='工单步骤id'),
  realNextStep?: string(name='RealNextStep', description='下一步步骤名'),
  restriction?: [ 
    {
      label?: string(name='Label', description='步骤标题'),
      value?: string(name='Value', description='步骤名'),
    }
  ](name='Restriction', description='下一步步骤可选列表'),
  stepName?: string(name='StepName', description='步骤名'),
  stepStatus?: string(name='StepStatus', description='步骤状态'),
  stepTitle?: string(name='StepTitle', description='步骤标题'),
  stepType?: string(name='StepType', description='步骤类型'),
}

model DeviceForm {
  accountConfig?: string(name='AccountConfig', description='是否需要配置账号信息'),
  configCompare?: string(name='ConfigCompare', description='是否需要展示配置备份'),
  formId?: string(name='FormId', description='设备形态ID'),
  formName?: string(name='FormName', description='设备形态名称'),
  propertiesList?: [
    DeviceFormProperty
  ](name='PropertiesList', description='设备形态属性列表'),
}

model ScheduleType {
  scheduleTypeId?: string(name='ScheduleTypeId', description='资源一级ID'),
  createTime?: string(name='CreateTime', description='创建时间'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  key?: string(name='Key', description='值班类型key'),
  value?: string(name='Value', description='值班类型value'),
  status?: string(name='Status', description='值班类型状态'),
  relatedWorker?: [ string ](name='RelatedWorker', description='relatedWorkerStr'),
}

model Task {
  category?: string(name='Category', description='模板类别'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  params?: string(name='Params', description='任务参数'),
  responseCode?: string(name='ResponseCode', description='任务错误码'),
  result?: string(name='Result', description='任务返回'),
  status?: string(name='Status', description='任务状态'),
  taskId?: string(name='TaskId', description='任务id'),
  templateId?: string(name='TemplateId', description='模板id'),
  templateName?: string(name='TemplateName', description='模板名称'),
}

model Scheme {
  category?: string(name='Category', description='方案类型'),
  content?: string(name='Content', description='方案内容'),
  description?: string(name='Description', description='方案说明'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  input?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Input', description='方案入参'),
  output?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Output', description='方案出参'),
  schemeId?: string(name='SchemeId', description='方案id'),
  schemeName?: string(name='SchemeName', description='方案名称'),
  status?: string(name='Status', description='方案状态'),
  view?: string(name='View', description='方案展示'),
}

model AggregateData {
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  dataItem?: string(name='DataItem', description='数据项'),
  deviceIdList?: [ string ](name='DeviceIdList', description='聚合设备ID列表'),
  aggregateModeList?: [ string ](name='AggregateModeList', description='聚合方式列表'),
  aggregateDataName?: string(name='AggregateDataName', description='聚合数据名称'),
  aggregateDataDescription?: string(name='AggregateDataDescription', description='描述'),
  isAllDevice?: int32(name='IsAllDevice', description='是否聚合全部设备'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
}

model SpaceModel {
  spaceModelName?: string(name='SpaceModelName', description='资源名称'),
  createTime?: string(name='CreateTime', description='创建时间'),
  spaceModelId?: string(name='SpaceModelId', description='资源一级ID'),
  spaceType?: string(name='SpaceType', description='物理空间类型'),
  sort?: {
    levelName?: string(name='LevelName', description='分层名称'),
    level?: long(name='Level', description='层次'),
  }(name='Sort', description='层级'),
  spaceModel?: {
    spaceModelId?: string(name='SpaceModelId', description='物理空间模型id'),
    status?: string(name='Status', description='模型状态'),
    spaceType?: string(name='SpaceType', description='物理空间类型'),
    createTime?: string(name='CreateTime', description='创建时间'),
    updateTime?: string(name='UpdateTime', description='更新时间'),
    sort?: {
      level?: long(name='Level', description='层级'),
      levleName?: string(name='LevleName', description='层级名称'),
    }(name='Sort', description='模型实例'),
  }(name='SpaceModel', description='物理空间模型'),
  spaceId?: string(name='SpaceId', description='物理空间id'),
  instance?: string(name='Instance', description='物理空间实例'),
  status?: string(name='Status', description='状态'),
  operateType?: string(name='OperateType', description='操作类型'),
}

model Port {
  deviceId?: string(name='DeviceId', description='设备ID'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
  portName?: string(name='PortName', description='端口名称'),
}

model BusinessType {
  businessTypeId?: string(name='BusinessTypeId', description='配置规范对象'),
  createTime?: string(name='CreateTime', description='创建时间'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  name?: string(name='Name', description='业务类型名称'),
  abbr?: string(name='Abbr', description='业务类型缩写'),
  mask?: string(name='Mask', description='掩码'),
  gateway?: long(name='Gateway', description='网关地址位置，正数为正数序号，负数为倒数序号'),
  sharing?: string(name='Sharing', description='是否复用 reuse/single'),
  direction?: long(name='Direction', description='分配方向，0表示正向，1表示反向'),
  reserveNumber?: long(name='ReserveNumber', description='保留地址数目'),
  type?: string(name='Type', description='业务类型大类'),
  zoneType?: string(name='ZoneType', description='绑定的园区类型'),
  leaseTime?: string(name='LeaseTime', description='有效时间'),
  vlan?: string(name='Vlan', description='Vlan'),
  actionFlag?: string(name='ActionFlag', description='业务类型地址申请完对应的动作，DHCP表示需要触发DHCP变更'),
}

model NotificationGroup {
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  notificationGroupDescription?: string(name='NotificationGroupDescription', description='描述'),
  notificationGroupId?: string(name='NotificationGroupId', description='通知组ID'),
  notificationGroupName?: string(name='NotificationGroupName', description='通知组名称'),
  notificationGroupType?: string(name='NotificationGroupType', description='通知组类型'),
  webhook?: string(name='Webhook', description='钉钉群webhook'),
}

model Template {
  category?: string(name='Category', description='模板类型'),
  comment?: string(name='Comment', description='模板说明'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  input?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Input', description='模板入参'),
  output?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Output', description='模板出参'),
  templateName?: string(name='TemplateName', description='模板名称'),
  templateType?: string(name='TemplateType', description='模板类型'),
}

model DedicatedLine {
  bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
  deviceId?: string(name='DeviceId', description='关联设备ID'),
  devicePort?: string(name='DevicePort', description='关联设备端口'),
  isp?: string(name='Isp', description='运营商'),
  lineGateway?: string(name='LineGateway', description='专线网关'),
  lineId?: string(name='LineId', description='物理空间专线ID'),
  lineIp?: string(name='LineIp', description='专线IP'),
  lineRole?: string(name='LineRole', description='专线角色'),
}

model DeviceResource {
  createTime?: string(name='CreateTime', description='创建时间'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds', description='资源一级ID'),
  deviceResourceId?: string(name='DeviceResourceId', description='设备资源id'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
  type?: string(name='Type', description='操作类型'),
  data?: string(name='Data', description='更新数据'),
  downloadType?: string(name='DownloadType', description='操作类型'),
  businessType?: string(name='BusinessType', description='业务类型'),
  listType?: string(name='ListType', description='list类型'),
  archId?: string(name='ArchId', description='架构资源ID'),
  deviceResource?: [ 
    {
      deviceResourceId?: string(name='DeviceResourceId', description='设备资源ID'),
      setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
      role?: string(name='Role', description='角色'),
      blockNumber?: string(name='BlockNumber', description='组号'),
      deviceNumber?: string(name='DeviceNumber', description='设备号'),
      vendor?: string(name='Vendor', description='厂商'),
      model?: string(name='Model', description='模型'),
      hostName?: string(name='HostName', description='主机名'),
      sn?: string(name='Sn', description='设备sn号'),
      location?: string(name='Location', description='物理空间位置'),
      managerIp?: string(name='ManagerIp', description='带内管理地址'),
      deliveryIp?: string(name='DeliveryIp', description='交付登录地址'),
      configGenerate?: boolean(name='ConfigGenerate', description='配置生成'),
      configTaskStatus?: string(name='ConfigTaskStatus', description='配置下发状态'),
      config?: string(name='Config', description='设备配置'),
      loopback?: string(name='Loopback', description='loopback地址'),
      interConnection?: string(name='InterConnection', description='设备互联地址'),
      business?: string(name='Business', description='设备业务地址'),
      stack?: boolean(name='Stack', description='堆叠状态'),
    }
  ](name='DeviceResource', description='设备资源'),
  ipType?: string(name='IpType', description='ip类型'),
  netLocation?: string(name='NetLocation', description='位置'),
  businessTypeParams?: string(name='BusinessTypeParams', description='业务参数'),
  loopbackPort?: string(name='LoopbackPort', description='Loopback口'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型id'),
}

model ModelToRole {
  modelToRoleId?: string(name='ModelToRoleId', description='资源一级ID'),
  createTime?: string(name='CreateTime', description='创建时间'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  id?: string(name='Id', description='角色型号对应关系uid'),
  networkArchitectureIterationId?: string(name='NetworkArchitectureIterationId', description='架构迭代uid'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='设备厂商'),
  model?: string(name='Model', description='设备型号'),
}

model ScheduleWorker {
  createTime?: string(name='CreateTime', description='创建时间'),
  scheduleWorkerId?: string(name='ScheduleWorkerId', description='资源一级ID'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  workerId?: string(name='WorkerId', description='值班人员工号'),
  workerName?: string(name='WorkerName', description='值班人员姓名'),
  workerContact?: string(name='WorkerContact', description='联系方式'),
}

model IpBlock {
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
  createTime?: string(name='CreateTime', description='创建时间'),
  ipBlockId?: string(name='IpBlockId', description='资源一级ID'),
  block?: string(name='Block', description='IP段地址'),
  mask?: string(name='Mask', description='IP段掩码'),
  parentId?: string(name='ParentId', description='父地址段UID'),
  netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE'),
  category?: string(name='Category', description='地址类别 IPV4'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型UID'),
  deviceName?: string(name='DeviceName', description='设备名称'),
  zoneName?: string(name='ZoneName', description='园区名称'),
  backupDeviceName?: string(name='BackupDeviceName', description='备份设备名称'),
  netBusiness?: string(name='NetBusiness', description='公网地址类型 INC GUEST VIP'),
  ownership?: string(name='Ownership', description='IP归属'),
  application?: string(name='Application', description='IP用途'),
  description?: string(name='Description', description='备注'),
  reserveParentBlock?: string(name='ReserveParentBlock', description='是否保留父段 true 是 false 否'),
  updateType?: string(name='UpdateType', description='更新类型 update 更新 split 拆分'),
  zoneLayer?: [ 
    {
      name?: string(name='Name', description='园区层级名称'),
      value?: string(name='Value', description='园区层级值'),
    }
  ](name='ZoneLayer', description='园区层级'),
}

model Order {
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  orderId?: string(name='OrderId', description='工单id'),
  output?: string(name='Output', description='工单返回'),
  params?: string(name='Params', description='工单参数'),
  schemeId?: string(name='SchemeId', description='方案id'),
  schemeName?: string(name='SchemeName', description='方案名'),
  status?: string(name='Status', description='任务状态'),
  title?: string(name='Title', description='工单标题'),
}

model Script {
  content?: string(name='Content', description='脚本代码'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  input?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Input', description='模板入参'),
  output?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Output', description='模板出参'),
  rules?: [
    ScriptRule
  ](name='Rules', description='规则列表'),
  scriptId?: string(name='ScriptId', description='脚本id'),
  templateId?: string(name='TemplateId', description='模板id'),
  versionId?: string(name='VersionId', description='版本id'),
}

model Agent {
  agentId?: string(name='AgentId', description='探针Id'),
  agentName?: string(name='AgentName', description='探针名称'),
  agentVersion?: string(name='AgentVersion', description='探针版本'),
  cpuUsage?: string(name='CpuUsage', description='cpu使用率'),
  diskUsage?: string(name='DiskUsage', description='磁盘利用率'),
  gmtModify?: string(name='GmtModify', description='更新时间'),
  ip?: string(name='Ip', description='探针IP'),
  kernelVersion?: string(name='KernelVersion', description='系统版本'),
  memoryUsage?: string(name='MemoryUsage', description='内存使用率'),
  securityDomain?: string(name='SecurityDomain', description='安全域'),
  status?: string(name='Status', description='探针状态'),
}

model ResourceInformation {
  createTime?: string(name='CreateTime', description='创建时间'),
  resourceInformationId?: string(name='ResourceInformationId', description='资源一级ID'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceAttribute?: string(name='ResourceAttribute', description='资源属性'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目资源id'),
  information?: [ 
    {
      key?: string(name='Key', description='键'),
      keyAttribute?: string(name='KeyAttribute', description='键属性'),
      keyAction?: string(name='KeyAction', description='键动作'),
      keyDescription?: string(name='KeyDescription', description='键描述'),
    }
  ](name='Information', description='信息'),
  architectureId?: string(name='ArchitectureId', description='架构id'),
}

model ScriptRule {
  arch?: string(name='Arch', description='设备架构'),
  domain?: string(name='Domain', description='设备安全域'),
  model?: string(name='Model', description='设备型号'),
  os?: string(name='Os', description='设备OS版本'),
  role?: string(name='Role', description='设备角色'),
  ruleId?: string(name='RuleId', description='规则id'),
  scriptId?: string(name='ScriptId', description='脚本id'),
  vendor?: string(name='Vendor', description='设备厂商'),
}

model ScheduleDuty {
  createTime?: string(name='CreateTime', description='创建时间'),
  scheduleDutyId?: string(name='ScheduleDutyId', description='资源一级ID'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  workDate?: string(name='WorkDate', description='值班表日期'),
  workType?: string(name='WorkType', description='值班表类型'),
  workerName?: string(name='WorkerName', description='值班人员姓名'),
  workerId?: string(name='WorkerId', description='值班人员工号'),
  startDate?: string(name='StartDate', description='开始时间'),
  endDate?: string(name='EndDate', description='结束时间'),
  scheduleTypeIds?: [ string ](name='ScheduleTypeIds', description='scheduleTypeIds'),
  typeWorkerList?: [ 
    {
      scheduleTypeId?: string(name='ScheduleTypeId', description='scheduleTypeId'),
      scheduleWorkerName?: [ string ](name='ScheduleWorkerName', description='值班人员姓名'),
    }
  ](name='TypeWorkerList', description='typeWorkerList'),
}

model Device {
  accountType?: string(name='AccountType', description='账号类型'),
  accountVersion?: string(name='AccountVersion', description='snmp版本号'),
  authPassPhrase?: string(name='AuthPassPhrase', description='Auth PassPhrase'),
  authProtocol?: string(name='AuthProtocol', description='Auth Protocol'),
  community?: string(name='Community', description='community'),
  deviceForm?: string(name='DeviceForm', description='设备形态'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  deviceIp?: string(name='DeviceIp', description='设备IP'),
  deviceMac?: string(name='DeviceMac', description='设备MAC地址'),
  deviceSn?: string(name='DeviceSn', description='设备SN'),
  hostname?: string(name='Hostname', description='主机名'),
  model?: string(name='Model', description='设备型号'),
  privacyPassPhrase?: string(name='PrivacyPassPhrase', description='Privacy PassPhrase'),
  privacyProtocol?: string(name='PrivacyProtocol', description='Privacy Protocol'),
  securityDomain?: string(name='SecurityDomain', description='设备安全域'),
  securityLevel?: string(name='SecurityLevel', description='安全等级'),
  space?: string(name='Space', description='设备所属物理空间'),
  sshAccount?: string(name='SshAccount', description='SSH登录账号'),
  sshPassword?: string(name='SshPassword', description='SSH登录密码'),
  status?: string(name='Status', description='设备状态'),
  telnetAccount?: string(name='TelnetAccount', description='TELNET登录账号'),
  telnetPassword?: string(name='TelnetPassword', description='TELNET登录密码'),
  userName?: string(name='UserName', description='用户名'),
  vendor?: string(name='Vendor', description='设备厂商'),
}

model TimePeriod {
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  timePeriodDescription?: string(name='TimePeriodDescription', description='描述'),
  timePeriodName?: string(name='TimePeriodName', description='时间段名称'),
  timePeriodId?: string(name='TimePeriodId', description='时间段ID'),
  cronExpression?: string(name='CronExpression', description='Cron表达式'),
  source?: string(name='Source', description='来源'),
}

model AtomicStep {
  description?: string(name='Description', description='步骤说明'),
  input?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Input', description='步骤入参'),
  output?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Output', description='步骤出参'),
  stepId?: string(name='StepId', description='步骤id'),
  stepName?: string(name='StepName', description='步骤名称'),
  stepType?: string(name='StepType', description='步骤类型'),
}

model InspectionItem {
  itemId?: string(name='ItemId', description='巡检项ID'),
  itemName?: string(name='ItemName', description='巡检项名字'),
  itemDescription?: string(name='ItemDescription', description='巡检项描述'),
  inspectionCrontab?: string(name='InspectionCrontab', description='巡检定时表达式'),
}

model DeviceProperty {
  content?: string(name='Content', description='属性值'),
  deviceForm?: string(name='DeviceForm', description='设备形态'),
  format?: string(name='Format', description='属性格式，包括JSON和SPLITTER（分隔符）'),
  nameCn?: string(name='NameCn', description='属性展示名称'),
  nameEn?: string(name='NameEn', description='属性英文主键'),
  propertyId?: string(name='PropertyId', description='设备属性ID'),
}

model AgentsTask {
  actionType?: string(name='ActionType', description='操作类型'),
  agentType?: string(name='AgentType', description='探针类型'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='更新时间'),
  params?: string(name='Params', description='任务参数'),
  status?: string(name='Status', description='任务状态'),
  agentsTaskId?: string(name='AgentsTaskId', description='任务ID'),
}

model Module {
  moduleId?: string(name='ModuleId', description='资源一级ID'),
  createTime?: string(name='CreateTime', description='创建时间'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  id?: string(name='Id', description='模块uuid'),
  parentModuleId?: string(name='ParentModuleId', description='父模块uuid'),
  name?: string(name='Name', description='模块名字'),
  moduleType?: string(name='ModuleType', description='模块类型'),
  minCount?: long(name='MinCount', description='最小建设模块数量'),
  maxCount?: long(name='MaxCount', description='最大建设模块数量'),
  stack?: boolean(name='Stack', description='堆叠'),
  device?: {
    createTime?: string(name='CreateTime', description='创建时间'),
    updateTime?: string(name='UpdateTime', description='更新时间'),
    id?: string(name='Id', description='设备uuid'),
    deviceRole?: string(name='DeviceRole', description='设备角色'),
    deviceCount?: long(name='DeviceCount', description='区块内设备数量'),
    deviceX?: string(name='DeviceX', description='设备x坐标'),
    deviceY?: string(name='DeviceY', description='设备y坐标'),
    role?: string(name='Role', description='设备角色'),
    count?: long(name='Count', description='区块内设备数量'),
    x?: string(name='X', description='设备x坐标'),
    y?: string(name='Y', description='设备y坐标'),
  }(name='Device', description='设备信息'),
  moduleDetails?: [ 
    {
      orderNumber?: long(name='OrderNumber', description='模块序号'),
      deviceDetails?: [ 
        {
          orderNumber?: long(name='OrderNumber', description='设备序号'),
        }
      ](name='DeviceDetails', description='设备详情'),
    }
  ](name='ModuleDetails', description='模块详情'),
}

model DataViewChart {
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  dataViewId?: string(name='DataViewId', description='数据视图ID'),
  chartType?: string(name='ChartType', description='图表类型'),
  dataViewSource?: string(name='DataViewSource', description='数据源类型'),
  grid?: string(name='Grid', description='布局配置'),
}

model ScriptHistory {
  comment?: string(name='Comment', description='版本说明'),
  content?: string(name='Content', description='脚本代码'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  input?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Input', description='模板入参'),
  output?: [ 
    {
      description?: string(name='Description', description='参数说明'),
      name?: string(name='Name', description='参数名称'),
      sample?: string(name='Sample', description='参数示例'),
      type?: string(name='Type', description='参数类型'),
    }
  ](name='Output', description='模板出参'),
  scriptId?: string(name='ScriptId', description='脚本id'),
  versionId?: string(name='VersionId', description='版本id'),
}

model NetworkArchitecture {
  networkArchitectureId?: string(name='NetworkArchitectureId', description='资源一级ID'),
  createTime?: string(name='CreateTime', description='创建时间'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  role?: string(name='Role', description='架构内容'),
  groupNumber?: long(name='GroupNumber', description='组数'),
  deviceNumber?: long(name='DeviceNumber', description='设备数'),
  availabe?: boolean(name='Availabe', description='可用'),
  stack?: boolean(name='Stack', description='堆叠'),
  selected?: boolean(name='Selected', description='可选'),
  children?: [ string ](name='Children', description='子节点'),
  id?: string(name='Id', description='架构资源id'),
  version?: string(name='Version', description='架构版本'),
  name?: string(name='Name', description='架构名称'),
  description?: string(name='Description', description='架构描述'),
  status?: string(name='Status', description='架构状态'),
  archVersionIterationId?: string(name='ArchVersionIterationId', description='架构最新版本uuid'),
}

model ConfigurationVariate {
  createTime?: string(name='CreateTime', description='创建时间'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  configurationVariateId?: string(name='ConfigurationVariateId', description='资源一级ID'),
  variateName?: string(name='VariateName', description='变量名字'),
  comment?: string(name='Comment', description='描述变量'),
  formatFunction?: string(name='FormatFunction', description='python转换函数'),
}

model Ip {
  ipId?: string(name='IpId', description='资源一级ID'),
  ipName?: string(name='IpName', description='资源名称'),
  createTime?: string(name='CreateTime', description='创建时间'),
  ipAddress?: string(name='IpAddress', description='IP地址'),
  parentIpBlock?: string(name='ParentIpBlock', description='地址段'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型UID'),
  businessTypeName?: string(name='BusinessTypeName', description='业务类型名称'),
  status?: string(name='Status', description='状态 using available lock'),
  deviceName?: string(name='DeviceName', description='设备名称'),
  port?: string(name='Port', description='设备端口名称'),
  deviceMac?: string(name='DeviceMac', description='设备MAC'),
  zoneLayer?: [ 
    {
      name?: string(name='Name', description='园区层级名称'),
      value?: string(name='Value', description='园区层级值'),
    }
  ](name='ZoneLayer', description='园区层级'),
}

model OsVersion {
  createTime?: string(name='CreateTime', description='创建时间'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  osVersion?: string(name='OsVersion', description='版本'),
  status?: string(name='Status', description='状态'),
  fileName?: string(name='FileName', description='file'),
  filePath?: string(name='FilePath', description='文件路径'),
  osVersionId?: string(name='OsVersionId', description='资源id'),
  accessId?: string(name='AccessId', description='用户名'),
  policy?: string(name='Policy', description='策略'),
  signature?: string(name='Signature', description='签名'),
  directory?: string(name='Directory', description='目录'),
  host?: string(name='Host', description='主机'),
  expireTime?: string(name='ExpireTime', description='过期时间'),
}

model TaskLog {
  funcName?: string(name='FuncName', description='函数名'),
  gmtCreate?: string(name='GmtCreate', description='记录时间'),
  level?: string(name='Level', description='日志等级'),
  lineNo?: int32(name='LineNo', description='行数'),
  logId?: string(name='LogId', description='日志id'),
  message?: string(name='Message', description='日志信息'),
  taskId?: string(name='TaskId', description='任务id'),
}

model ConfigurationSpecification {
  createTime?: string(name='CreateTime', description='创建时间'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  specificationName?: string(name='SpecificationName', description='配置规范名字'),
  configurationSpecificationId?: string(name='ConfigurationSpecificationId', description='配置规范uid'),
  architecture?: string(name='Architecture', description='架构类型'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  specificationContent?: string(name='SpecificationContent', description='配置规范内容'),
  relatedVariate?: [ string ](name='RelatedVariate', description='相关变量'),
}

model ZoneType {
  zoneTypeName?: string(name='ZoneTypeName', description='资源名称'),
  createTime?: string(name='CreateTime', description='创建时间'),
  zoneTypeId?: string(name='ZoneTypeId', description='资源一级ID'),
  name?: string(name='Name', description='园区类型名称'),
  zoneTypeLayer?: [ 
    {
      name?: string(name='Name', description='园区层级名称'),
      mask?: long(name='Mask', description='园区层级掩码'),
    }
  ](name='ZoneTypeLayer', description='园区层级'),
}

model SetupProject {
  setupProjectName?: string(name='SetupProjectName', description='资源名称'),
  createTime?: string(name='CreateTime', description='创建时间'),
  setupProjectId?: string(name='SetupProjectId', description='资源一级ID'),
  spaceId?: string(name='SpaceId', description='物理空间uId'),
  description?: string(name='Description', description='描述'),
  archId?: string(name='ArchId', description='架构id'),
  deliveryTime?: string(name='DeliveryTime', description='预计交付时间'),
  nodes?: string(name='Nodes', description='节点'),
  architectureId?: string(name='ArchitectureId', description='架构id'),
  status?: string(name='Status', description='状态'),
  spaceType?: string(name='SpaceType', description='物理空间类型'),
  spaceName?: string(name='SpaceName', description='物理空间名称'),
  archVersion?: string(name='ArchVersion', description='架构版本'),
  packages?: [ 
    {
      role?: string(name='Role', description='角色'),
      deviceNumber?: string(name='DeviceNumber', description='设备号'),
      vendor?: string(name='Vendor', description='厂商'),
      model?: string(name='Model', description='型号'),
    }
  ](name='Packages', description='套餐'),
}

model InspectionTask {
  templateId?: string(name='TemplateId', description='巡检模板ID'),
  itemName?: string(name='ItemName', description='巡检项名字'),
  itemId?: string(name='ItemId', description='巡检项ID'),
  space?: string(name='Space', description='物理空间'),
  hostname?: string(name='Hostname', description='主机名'),
  IP?: string(name='IP', description='设备IP'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  role?: string(name='Role', description='角色'),
  taskStatus?: string(name='TaskStatus', description='任务状态'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  inspectionResult?: string(name='InspectionResult', description='执行结果'),
  executionBeginTime?: string(name='ExecutionBeginTime', description='执行开始时间'),
  executionEndTime?: string(name='ExecutionEndTime', description='执行结束时间'),
  inspectionAlarmRules?: [ 
    {
      expression?: string(name='Expression', description='告警表达式'),
      operator?: string(name='Operator', description='告警操作符'),
      value?: string(name='Value', description='告警值'),
      actualValue?: string(name='ActualValue', description='告警实际值'),
      level?: string(name='Level', description='告警级别'),
    }
  ](name='InspectionAlarmRules', description='告警规则'),
}

model CliTask {
  agentIp?: string(name='AgentIp', description='agent IP'),
  cliTaskId?: string(name='CliTaskId', description='cli任务id'),
  command?: string(name='Command', description='cli命令'),
  deviceId?: string(name='DeviceId', description='设备id'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  output?: string(name='Output', description='设备回显'),
  protocol?: string(name='Protocol', description='协议'),
  responseCode?: string(name='ResponseCode', description='任务错误码'),
  result?: string(name='Result', description='任务结果'),
  sessionId?: string(name='SessionId', description='会话id'),
  status?: string(name='Status', description='cli任务状态'),
  timeout?: int32(name='Timeout', description='超时参数'),
}

model IpBlockRecord {
  ipBlockRecordId?: string(name='IpBlockRecordId', description='工单uuid'),
  createTime?: string(name='CreateTime', description='创建时间'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  title?: string(name='Title', description='工单名称'),
  creator?: long(name='Creator', description='创建人'),
  workNo?: string(name='WorkNo', description='工号'),
  netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE'),
  status?: string(name='Status', description='工单状态 running complete fail cancel lock approving'),
  zoneName?: string(name='ZoneName', description='园区名称'),
  description?: string(name='Description', description='工单备注'),
  detail?: [ 
    {
      businessTypeName?: string(name='BusinessTypeName', description='业务类型'),
      deviceName?: string(name='DeviceName', description='设备名称'),
      gateway?: string(name='Gateway', description='网关'),
      parentIpBlocks?: [ string ](name='ParentIpBlocks', description='父地址段列表'),
      zoneLayer?: [ 
        {
          name?: string(name='Name', description='园区层级名称'),
          value?: string(name='Value', description='园区层级值'),
        }
      ](name='ZoneLayer', description='园区层级'),
    }
  ](name='Detail', description='工单详情'),
  recordType?: string(name='RecordType', description='工单类型 Apply 申请工单 Recycle 释放工单'),
  ipBlockCode?: [ string ](name='IpBlockCode', description='要释放的IP段'),
}

model IpRecord {
  createTime?: string(name='CreateTime', description='创建时间'),
  ipRecordId?: string(name='IpRecordId', description='资源一级ID'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
  businessTypeName?: string(name='BusinessTypeName', description='业务类型名称'),
  creator?: string(name='Creator', description='创建人'),
  status?: string(name='Status', description='工单状态 running complete fail'),
  zoneName?: string(name='ZoneName', description='园区名'),
  description?: string(name='Description', description='备注'),
  ipBlock?: string(name='IpBlock', description='地址段'),
  detail?: [ 
    {
      ip?: string(name='Ip', description='申请到的Ip'),
      deviceName?: string(name='DeviceName', description='设备名称'),
      port?: string(name='Port', description='设备端口'),
      remoteIp?: string(name='RemoteIp', description='对端IP'),
      remoteDeviceName?: string(name='RemoteDeviceName', description='对端设备名称'),
      remotePort?: string(name='RemotePort', description='对端设备端口'),
      deviceMac?: string(name='DeviceMac', description='设备MAC'),
      gateway?: string(name='Gateway', description='网关'),
      parentIpBlocks?: [ string ](name='ParentIpBlocks', description='父地址段列表'),
      zoneLayer?: [ 
        {
          name?: string(name='Name', description='园区层级名称'),
          value?: string(name='Value', description='园区层级值'),
        }
      ](name='ZoneLayer', description='园区层级'),
    }
  ](name='Detail', description='工单详情'),
  recodeType?: string(name='RecodeType', description='工单类型 Apply 申请工单 Recycle 释放工单'),
  ipCode?: [ string ](name='IpCode', description='IP地址列表'),
}

model MonitorItem {
  analysisCode?: string(name='AnalysisCode', description='解析代码'),
  collectionType?: string(name='CollectionType', description='采集类型'),
  config?: string(name='Config', description='采集配置'),
  monitorItemDescription?: string(name='MonitorItemDescription', description='描述'),
  enable?: int32(name='Enable', description='是否启用'),
  execInterval?: string(name='ExecInterval', description='采集间隔'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='更新时间'),
  monitorItemName?: string(name='MonitorItemName', description='监控项名称'),
  securityDomain?: string(name='SecurityDomain', description='安全域'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
}

model PhysicalSpace {
  address?: string(name='Address', description='具体所在地址'),
  city?: string(name='City', description='所属城市'),
  country?: string(name='Country', description='所属国家'),
  province?: string(name='Province', description='所属省份'),
  spaceId?: string(name='SpaceId', description='物理空间ID'),
  spaceName?: string(name='SpaceName', description='物理空间名称'),
}

model InspectionScript {
  scriptId?: string(name='ScriptId', description='巡检模板ID'),
  itemId?: string(name='ItemId', description='巡检项ID'),
  itemName?: string(name='ItemName', description='巡检项名字'),
  itemDescription?: string(name='ItemDescription', description='巡检项描述'),
  inspectionCrontab?: string(name='InspectionCrontab', description='巡检项定时表达式'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  role?: string(name='Role', description='角色'),
  scriptStatus?: string(name='ScriptStatus', description='模板状态'),
  script?: string(name='Script', description='模板执行内容'),
  inspectionAlarmRules?: [ 
    {
      alarmExpression?: string(name='AlarmExpression', description='告警表达式'),
      alarmOperator?: string(name='AlarmOperator', description='告警符号'),
      alarmValue?: string(name='AlarmValue', description='告警值'),
      alarmLevel?: string(name='AlarmLevel', description='告警级别'),
    }
  ](name='InspectionAlarmRules', description='巡检告警规则'),
}

model SubscriptionItem {
  alarmStatus?: string(name='AlarmStatus', description='告警状态'),
  notificationMode?: string(name='NotificationMode', description='通知方式'),
  suppressionStrategy?: string(name='SuppressionStrategy', description='抑制策略'),
  notificationGroupId?: string(name='NotificationGroupId', description='通知组ID'),
  subscriptionType?: string(name='SubscriptionType', description='订阅类型'),
  triggerTimes?: int32(name='TriggerTimes', description='连续触发次数'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  language?: string(name='Language', description='发送通知的语言'),
  recoveryNotice?: int32(name='RecoveryNotice', description='是否发送通知'),
  subscriptionItemId?: string(name='SubscriptionItemId', description='订阅项ID'),
}

model DataView {
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  dataViewName?: string(name='DataViewName', description='数据视图名称'),
  dataViewDescription?: string(name='DataViewDescription', description='描述'),
  dataViewId?: string(name='DataViewId', description='聚合数据'),
  dataViewChartList?: [
    DataViewChart
  ](name='DataViewChartList', description='图表列表'),
}

model DeviceTask {
  deviceId?: string(name='DeviceId', description='设备id'),
  deviceIp?: string(name='DeviceIp', description='设备ip'),
  deviceName?: string(name='DeviceName', description='设备名'),
  deviceTaskId?: string(name='DeviceTaskId', description='设备任务id'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModify?: string(name='GmtModify', description='修改时间'),
  output?: string(name='Output', description='设备任务回显'),
  params?: string(name='Params', description='设备任务参数'),
  responseCode?: string(name='ResponseCode', description='设备任务错误码'),
  result?: string(name='Result', description='设备任务返回'),
  scriptId?: string(name='ScriptId', description='脚本id'),
  scriptVersion?: string(name='ScriptVersion', description='版本id'),
  status?: string(name='Status', description='设备任务状态'),
  templateId?: string(name='TemplateId', description='模板id'),
  templateName?: string(name='TemplateName', description='模板名称'),
}

model PortCollection {
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  portCollectionDescription?: string(name='PortCollectionDescription', description='描述'),
  portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
  portCollectionName?: string(name='PortCollectionName', description='端口集名称'),
  portList?: [
    Port
  ](name='PortList', description='端口列表'),
}

model ConnectionPolicy {
  createTime?: string(name='CreateTime', description='创建时间'),
  connectionPolicyId?: string(name='ConnectionPolicyId', description='资源一级ID'),
  networkArchitectureIterationId?: string(name='NetworkArchitectureIterationId', description='架构迭代uid'),
  name?: string(name='Name', description='连接策略名字'),
  algorithm?: string(name='Algorithm', description='连接策略算法'),
  linkCount?: long(name='LinkCount', description='连接数'),
  uplinkModelId?: string(name='UplinkModelId', description='上联模块uid'),
  downlinkModuleId?: string(name='DownlinkModuleId', description='下联模块uid'),
  uplinkDeviceId?: string(name='UplinkDeviceId', description='上联设备uid'),
  downlinkDeviceId?: string(name='DownlinkDeviceId', description='下联设备uid'),
  id?: string(name='Id', description='连接策略uid'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model DeviceFormProperty {
  content?: string(name='Content', description='属性描述'),
  keyword?: string(name='Keyword', description='属性关键词'),
  placeholder?: boolean(name='Placeholder', description='前端界面控件占位符文字'),
  required?: boolean(name='Required', description='属性是否必填'),
  searchSupported?: boolean(name='SearchSupported', description='属性是否作为界面查询条件'),
  sequence?: int32(name='Sequence', description='属性展示的次序'),
  tableVisible?: boolean(name='TableVisible', description='前端界面是否展示为表格列'),
  uniqueness?: boolean(name='Uniqueness', description='属性是否需要唯一检查'),
  valueReference?: string(name='ValueReference', description='属性值来源具体的方式'),
  valueSource?: string(name='ValueSource', description='属性值来源类型：枚举、接口等'),
  valueType?: string(name='ValueType', description='属性类型，JSON或者分隔符'),
}

model CreateConfigurationSpecificationRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  specificationName?: string(name='SpecificationName', description='配置规范名字'),
  architecture?: string(name='Architecture', description='架构类型'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  specificationContent?: string(name='SpecificationContent', description='配置规范内容'),
  relatedVariate?: [ bytes ](name='RelatedVariate', description='相关变量'),
}

model CreateConfigurationSpecificationShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  specificationName?: string(name='SpecificationName', description='配置规范名字'),
  architecture?: string(name='Architecture', description='架构类型'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  specificationContent?: string(name='SpecificationContent', description='配置规范内容'),
  relatedVariateShrink?: string(name='RelatedVariate', description='相关变量'),
}

model CreateConfigurationSpecificationResponseBody = {
  configurationSpecificationId?: string(name='ConfigurationSpecificationId', description='资源uuid'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateConfigurationSpecificationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConfigurationSpecificationResponseBody(name='body'),
}

async function createConfigurationSpecificationWithOptions(tmpReq: CreateConfigurationSpecificationRequest, runtime: Util.RuntimeOptions): CreateConfigurationSpecificationResponse {
  Util.validateModel(tmpReq);
  var request = new CreateConfigurationSpecificationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.relatedVariate)) {
    request.relatedVariateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedVariate, 'RelatedVariate', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConfigurationSpecification', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConfigurationSpecification(request: CreateConfigurationSpecificationRequest): CreateConfigurationSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigurationSpecificationWithOptions(request, runtime);
}

model CreateIpBlockRequest {
  instanceId?: string(name='InstanceId', description='实例ID'),
  ipBlockId?: string(name='IpBlockId', description='资源一级ID'),
  block?: string(name='Block', description='IP段地址'),
  mask?: string(name='Mask', description='IP段掩码'),
  parentId?: string(name='ParentId', description='父地址段UID'),
  netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE'),
  category?: string(name='Category', description='地址类别 IPV4'),
  status?: string(name='Status', description='地址状态'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型UID'),
  deviceName?: string(name='DeviceName', description='设备名称'),
  zoneName?: string(name='ZoneName', description='园区名称'),
  backupDeviceName?: string(name='BackupDeviceName', description='备份设备名称'),
  netBusiness?: string(name='NetBusiness', description='公网地址类型 INC GUEST VIP'),
  ownership?: string(name='Ownership', description='IP归属'),
  application?: string(name='Application', description='IP用途'),
  description?: string(name='Description', description='备注'),
  reserveParentBlock?: string(name='ReserveParentBlock', description='是否保留父段 true 是 false 否'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateIpBlockResponseBody = {
  ipBlockId?: string(name='IpBlockId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateIpBlockResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpBlockResponseBody(name='body'),
}

async function createIpBlockWithOptions(request: CreateIpBlockRequest, runtime: Util.RuntimeOptions): CreateIpBlockResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIpBlock', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIpBlock(request: CreateIpBlockRequest): CreateIpBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpBlockWithOptions(request, runtime);
}

model UpdateConfigurationVariateRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  configurationVariateId?: string(name='ConfigurationVariateId', description='资源一级ID'),
  variateName?: string(name='VariateName', description='变量名字'),
  comment?: string(name='Comment', description='描述变量'),
  formatFunction?: string(name='FormatFunction', description='python转换函数'),
}

model UpdateConfigurationVariateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigurationVariateResponseBody(name='body'),
}

async function updateConfigurationVariateWithOptions(request: UpdateConfigurationVariateRequest, runtime: Util.RuntimeOptions): UpdateConfigurationVariateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateConfigurationVariate', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateConfigurationVariate(request: UpdateConfigurationVariateRequest): UpdateConfigurationVariateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigurationVariateWithOptions(request, runtime);
}

model GetScheduleTypeRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleTypeId?: string(name='ScheduleTypeId', description='实例 ID。'),
}

model GetScheduleTypeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  scheduleType?: {
    status?: string(name='Status', description='值班类型状态'),
    scheduleTypeId?: string(name='ScheduleTypeId', description='资源一级ID'),
    createTime?: string(name='CreateTime', description='创建时间'),
    updateTime?: string(name='UpdateTime', description='更新时间'),
    scheduleType?: string(name='ScheduleType', description='值班类型value'),
    relatedWorker?: [ string ](name='RelatedWorker', description='relatedWorker'),
  }(name='ScheduleType', description='值班类型对象'),
}

model GetScheduleTypeResponse = {
  headers: map[string]string(name='headers'),
  body: GetScheduleTypeResponseBody(name='body'),
}

async function getScheduleTypeWithOptions(request: GetScheduleTypeRequest, runtime: Util.RuntimeOptions): GetScheduleTypeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetScheduleType', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getScheduleType(request: GetScheduleTypeRequest): GetScheduleTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getScheduleTypeWithOptions(request, runtime);
}

model DeleteDeviceRequest {
  deviceId?: string(name='DeviceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDevice', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

model ListDeviceValuesRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
  attributeKeyword?: string(name='AttributeKeyword', description='查询属性主键'),
  attributeGroup?: string(name='AttributeGroup', description='查询属性对应JSON中主键'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDeviceValuesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceValues?: [ string ](name='DeviceValues', description='数组，返回示例目录。'),
}

model ListDeviceValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceValuesResponseBody(name='body'),
}

async function listDeviceValuesWithOptions(request: ListDeviceValuesRequest, runtime: Util.RuntimeOptions): ListDeviceValuesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceValues', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceValues(request: ListDeviceValuesRequest): ListDeviceValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceValuesWithOptions(request, runtime);
}

model GetIpBlockRecordRequest {
  instanceId?: string(name='InstanceId'),
  ipBlockRecordId?: string(name='IpBlockRecordId', description='实例 ID。'),
}

model GetIpBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  ipBlockRecord?: {
    ipBlockRecordId?: string(name='IpBlockRecordId', description='工单uuid'),
    createTime?: string(name='CreateTime', description='创建时间'),
    updateTime?: string(name='UpdateTime', description='2020-12-22 10:39:17'),
    title?: string(name='Title', description='工单名称'),
    creator?: long(name='Creator', description='创建人'),
    workNo?: string(name='WorkNo', description='工号'),
    netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE'),
    status?: string(name='Status', description='工单状态 running complete fail cancel lock approving'),
    zoneName?: string(name='ZoneName', description='园区名称'),
    description?: string(name='Description', description='工单备注'),
    detail?: [ 
      {
        businessTypeName?: string(name='BusinessTypeName', description='业务类型'),
        deviceName?: string(name='DeviceName', description='设备名称'),
        gateway?: string(name='Gateway', description='网关'),
        parentIpBlocks?: [ string ](name='ParentIpBlocks', description='父地址段列表'),
        zoneLayer?: [ 
          {
            name?: string(name='Name', description='园区层级名称'),
            value?: string(name='Value', description='园区层级值'),
          }
        ](name='ZoneLayer', description='园区层级'),
        ipBlockCode?: string(name='IpBlockCode', description='地址段'),
      }
    ](name='Detail', description='工单详情'),
    recordType?: string(name='RecordType', description='工单类型 Apply 申请工单 Recycle 释放工单'),
    ipBlockCode?: [ string ](name='IpBlockCode', description='要释放的IP段'),
  }(name='IpBlockRecord', description='工单类型对象'),
}

model GetIpBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpBlockRecordResponseBody(name='body'),
}

async function getIpBlockRecordWithOptions(request: GetIpBlockRecordRequest, runtime: Util.RuntimeOptions): GetIpBlockRecordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetIpBlockRecord', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getIpBlockRecord(request: GetIpBlockRecordRequest): GetIpBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpBlockRecordWithOptions(request, runtime);
}

model ListSpaceModelsRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  spaceType?: string(name='SpaceType', description='物理空间类型'),
  status?: string(name='Status', description='物理空间状态'),
}

model ListSpaceModelsResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
  spaceModel?: [ 
    {
      spaceType?: string(name='SpaceType', description='物理空间类型'),
      sort?: [ 
        {
          levelName?: string(name='LevelName', description='层级名称'),
          level?: long(name='Level', description='层级'),
        }
      ](name='Sort', description='层级'),
      createTime?: string(name='CreateTime', description='创建时间'),
      spaceModelId?: string(name='SpaceModelId', description='资源一级ID'),
      status?: string(name='Status', description='模型状态'),
      updateTime?: string(name='UpdateTime', description='更新时间'),
    }
  ](name='SpaceModel', description='数组，返回示例目录。'),
}

model ListSpaceModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSpaceModelsResponseBody(name='body'),
}

async function listSpaceModelsWithOptions(request: ListSpaceModelsRequest, runtime: Util.RuntimeOptions): ListSpaceModelsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListSpaceModels', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listSpaceModels(request: ListSpaceModelsRequest): ListSpaceModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSpaceModelsWithOptions(request, runtime);
}

model ListDevicePropertiesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDevicePropertiesResponseBody = {
  deviceProperties?: [ 
    {
      devicePropertyId?: string(name='DevicePropertyId', description='设备属性ID'),
      deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
      deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
      propertyName?: string(name='PropertyName', description='属性名称'),
      propertyKey?: string(name='PropertyKey', description='属性主键'),
      propertyFormat?: string(name='PropertyFormat', description='属性格式'),
      propertyContent?: string(name='PropertyContent', description='属性内容'),
      builtIn?: boolean(name='BuiltIn', description='是否内置属性'),
    }
  ](name='DeviceProperties', description='数组，返回示例目录。'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
}

model ListDevicePropertiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicePropertiesResponseBody(name='body'),
}

async function listDevicePropertiesWithOptions(request: ListDevicePropertiesRequest, runtime: Util.RuntimeOptions): ListDevicePropertiesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceProperties', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceProperties(request: ListDevicePropertiesRequest): ListDevicePropertiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicePropertiesWithOptions(request, runtime);
}

model ListInspectionDevicesRequest {
  instanceId?: string(name='InstanceId', description='实例id'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: [ string ](name='Model', description='型号'),
}

model ListInspectionDevicesShrinkRequest {
  instanceId?: string(name='InstanceId', description='实例id'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  modelShrink?: string(name='Model', description='型号'),
}

model ListInspectionDevicesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  inspectionScripts?: [ 
    {
      role?: string(name='Role', description='角色'),
      vendor?: string(name='Vendor', description='厂商'),
      model?: string(name='Model', description='型号'),
      hostName?: string(name='HostName', description='主机名'),
      manageIp?: string(name='ManageIp', description='管理ip'),
      deviceState?: string(name='DeviceState', description='设备状态'),
      space?: string(name='Space', description='物理空间'),
      deviceId?: string(name='DeviceId', description='设备id'),
    }
  ](name='InspectionScripts', description='content'),
}

model ListInspectionDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInspectionDevicesResponseBody(name='body'),
}

async function listInspectionDevicesWithOptions(tmpReq: ListInspectionDevicesRequest, runtime: Util.RuntimeOptions): ListInspectionDevicesResponse {
  Util.validateModel(tmpReq);
  var request = new ListInspectionDevicesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.model)) {
    request.modelShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.model, 'Model', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListInspectionDevices', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listInspectionDevices(request: ListInspectionDevicesRequest): ListInspectionDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInspectionDevicesWithOptions(request, runtime);
}

model ListInspectionTasksRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  itemId?: string(name='ItemId', description='巡检项ID'),
  hostName?: string(name='HostName', description='主机名'),
  IP?: string(name='IP', description='设备IP'),
  taskStatus?: string(name='TaskStatus', description='巡检状态'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  space?: string(name='Space', description='物理空间'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
}

model ListInspectionTasksResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='请求ID'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  inspectionTasks?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      itemId?: string(name='ItemId', description='巡检项ID'),
      executionEndTime?: string(name='ExecutionEndTime', description='巡检结束时间'),
      executionBeginTime?: string(name='ExecutionBeginTime', description='巡检开始时间'),
      itemName?: string(name='ItemName', description='巡检项名字'),
      scriptId?: string(name='ScriptId', description='模板ID'),
      space?: string(name='Space', description='物理空间'),
      inspectionResult?: string(name='InspectionResult', description='巡检结果'),
      inspectionAlarmRules?: [ 
        {
          alarmExpression?: string(name='AlarmExpression', description='告警符号'),
          alarmOperator?: string(name='AlarmOperator', description='告警变量'),
          alarmValue?: string(name='AlarmValue', description='告警值'),
          actualValue?: string(name='ActualValue', description='告警实际值'),
          alarmLevel?: string(name='AlarmLevel', description='告警级别'),
        }
      ](name='InspectionAlarmRules', description='告警规则'),
      IP?: string(name='IP', description='IP地址'),
      hostName?: string(name='HostName', description='主机名'),
      vendor?: string(name='Vendor', description='厂商'),
      taskStatus?: string(name='TaskStatus', description='任务状态'),
      model?: [ string ](name='Model', description='型号'),
      errorCode?: string(name='ErrorCode', description='错误码'),
      inspectionMessage?: string(name='InspectionMessage', description='巡检信息'),
      taskId?: string(name='TaskId', description='任务ID'),
      deviceDisplay?: string(name='DeviceDisplay', description='设备回显'),
      role?: string(name='Role', description='角色'),
    }
  ](name='InspectionTasks', description='数组，返回示例目录。'),
}

model ListInspectionTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListInspectionTasksResponseBody(name='body'),
}

async function listInspectionTasksWithOptions(request: ListInspectionTasksRequest, runtime: Util.RuntimeOptions): ListInspectionTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListInspectionTasks', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listInspectionTasks(request: ListInspectionTasksRequest): ListInspectionTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInspectionTasksWithOptions(request, runtime);
}

model ListScheduleWorkersRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
}

model ListScheduleWorkersResponseBody = {
  scheduleWorker?: [ 
    {
      scheduleWorkerId?: string(name='ScheduleWorkerId', description='资源一级ID'),
      createTime?: string(name='CreateTime', description='创建时间'),
      workerId?: string(name='WorkerId', description='值班人员工号'),
      workerName?: string(name='WorkerName', description='值班人员姓名'),
      workerContact?: string(name='WorkerContact', description='联系方式'),
      updateTime?: string(name='UpdateTime', description='更新时间'),
    }
  ](name='ScheduleWorker', description='数组，返回示例目录。'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
}

model ListScheduleWorkersResponse = {
  headers: map[string]string(name='headers'),
  body: ListScheduleWorkersResponseBody(name='body'),
}

async function listScheduleWorkersWithOptions(request: ListScheduleWorkersRequest, runtime: Util.RuntimeOptions): ListScheduleWorkersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListScheduleWorkers', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listScheduleWorkers(request: ListScheduleWorkersRequest): ListScheduleWorkersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScheduleWorkersWithOptions(request, runtime);
}

model UpdateProjectProgressRequest {
  instanceId?: string(name='InstanceId'),
  setupProjectId?: string(name='SetupProjectId', description='资源id'),
  progress?: string(name='Progress', description='建设进展'),
}

model UpdateProjectProgressResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateProjectProgressResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectProgressResponseBody(name='body'),
}

async function updateProjectProgressWithOptions(request: UpdateProjectProgressRequest, runtime: Util.RuntimeOptions): UpdateProjectProgressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProjectProgress', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProjectProgress(request: UpdateProjectProgressRequest): UpdateProjectProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectProgressWithOptions(request, runtime);
}

model UpdateDeviceResourceRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  deviceResourceId?: string(name='DeviceResourceId', description='资源一级ID'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds', description='资源一级ID'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
  updateType?: string(name='UpdateType', description='操作类型'),
  data?: string(name='Data', description='更新数据'),
}

model UpdateDeviceResourceShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  deviceResourceId?: string(name='DeviceResourceId', description='资源一级ID'),
  deviceResourceIdsShrink?: string(name='DeviceResourceIds', description='资源一级ID'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
  updateType?: string(name='UpdateType', description='操作类型'),
  data?: string(name='Data', description='更新数据'),
}

model UpdateDeviceResourceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDeviceResourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceResourceResponseBody(name='body'),
}

async function updateDeviceResourceWithOptions(tmpReq: UpdateDeviceResourceRequest, runtime: Util.RuntimeOptions): UpdateDeviceResourceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDeviceResourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceResourceIds)) {
    request.deviceResourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceResourceIds, 'DeviceResourceIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceResource', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceResource(request: UpdateDeviceResourceRequest): UpdateDeviceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceResourceWithOptions(request, runtime);
}

model GetDevicePropertyRequest {
  devicePropertyId?: string(name='DevicePropertyId', description='实例 ID。'),
  propertyKey?: string(name='PropertyKey', description='属性主键'),
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDevicePropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceProperty?: {
    devicePropertyId?: string(name='DevicePropertyId', description='设备属性ID'),
    deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
    deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
    propertyName?: string(name='PropertyName', description='属性名称'),
    propertyKey?: string(name='PropertyKey', description='属性主键'),
    propertyFormat?: string(name='PropertyFormat', description='属性格式'),
    propertyContent?: string(name='PropertyContent', description='属性内容'),
    builtIn?: boolean(name='BuiltIn', description='是否内置属性'),
  }(name='DeviceProperty', description='设备属性详情'),
}

model GetDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevicePropertyResponseBody(name='body'),
}

async function getDevicePropertyWithOptions(request: GetDevicePropertyRequest, runtime: Util.RuntimeOptions): GetDevicePropertyResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceProperty', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceProperty(request: GetDevicePropertyRequest): GetDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDevicePropertyWithOptions(request, runtime);
}

model ListResourceTypesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  resourceType?: [ 
    {
      resourceType?: string(name='ResourceType', description='资源类型'),
      resourceTypeName?: string(name='ResourceTypeName', description='资源名称'),
      key?: string(name='Key'),
    }
  ](name='ResourceType', description='资源类型'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypesWithOptions(runtime: Util.RuntimeOptions): ListResourceTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListResourceTypes', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listResourceTypes(): ListResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceTypesWithOptions(runtime);
}

model GetSetupProjectRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  setupProjectId?: string(name='SetupProjectId', description='实例 ID。'),
}

model GetSetupProjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  setupProject?: {
    deliveryTime?: string(name='DeliveryTime', description='预计交付时间'),
    packages?: [ 
      {
        role?: string(name='Role', description='角色'),
        deviceNumber?: string(name='DeviceNumber', description='设备号'),
        vendor?: string(name='Vendor', description='厂商'),
        model?: string(name='Model', description='型号'),
      }
    ](name='Packages', description='套餐'),
    createTime?: string(name='CreateTime', description='创建时间'),
    spaceId?: string(name='SpaceId', description='物理空间uId'),
    spaceName?: string(name='SpaceName', description='物理空间名称'),
    spaceType?: string(name='SpaceType', description='物理空间类型'),
    setupProjectId?: string(name='SetupProjectId', description='资源一级ID'),
    nodes?: string(name='Nodes', description='节点'),
    progress?: string(name='Progress', description='项目进展'),
  }(name='SetupProject', description='建设项目'),
}

model GetSetupProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetSetupProjectResponseBody(name='body'),
}

async function getSetupProjectWithOptions(request: GetSetupProjectRequest, runtime: Util.RuntimeOptions): GetSetupProjectResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetSetupProject', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getSetupProject(request: GetSetupProjectRequest): GetSetupProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSetupProjectWithOptions(request, runtime);
}

model ListConfigurationVariateRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  variateName?: string(name='VariateName', description='变量名字'),
}

model ListConfigurationVariateResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  configurationVariate?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      configurationVariateId?: string(name='ConfigurationVariateId', description='配置变量id'),
      variateName?: string(name='VariateName', description='配置变量名称'),
      updateTime?: string(name='UpdateTime', description='更新时间'),
      comment?: string(name='Comment', description='配置变量描述'),
      formatFunction?: string(name='FormatFunction', description='配置变量转换函数'),
    }
  ](name='ConfigurationVariate', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
}

model ListConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigurationVariateResponseBody(name='body'),
}

async function listConfigurationVariateWithOptions(request: ListConfigurationVariateRequest, runtime: Util.RuntimeOptions): ListConfigurationVariateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListConfigurationVariate', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listConfigurationVariate(request: ListConfigurationVariateRequest): ListConfigurationVariateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigurationVariateWithOptions(request, runtime);
}

model CreateSpaceModelRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  spaceType?: string(name='SpaceType', description='物理空间类型'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateSpaceModelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  spaceModelId?: string(name='SpaceModelId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
}

model CreateSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSpaceModelResponseBody(name='body'),
}

async function createSpaceModelWithOptions(request: CreateSpaceModelRequest, runtime: Util.RuntimeOptions): CreateSpaceModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSpaceModel', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSpaceModel(request: CreateSpaceModelRequest): CreateSpaceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSpaceModelWithOptions(request, runtime);
}

model DeleteScheduleWorkerRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleWorkerId?: string(name='ScheduleWorkerId', description='实例 ID。'),
}

model DeleteScheduleWorkerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteScheduleWorkerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScheduleWorkerResponseBody(name='body'),
}

async function deleteScheduleWorkerWithOptions(request: DeleteScheduleWorkerRequest, runtime: Util.RuntimeOptions): DeleteScheduleWorkerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScheduleWorker', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScheduleWorker(request: DeleteScheduleWorkerRequest): DeleteScheduleWorkerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduleWorkerWithOptions(request, runtime);
}

model ListDedicatedLinesRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDedicatedLinesResponseBody = {
  dedicatedLines?: [ 
    {
      dedicatedLineId?: string(name='DedicatedLineId', description='物理空间专线ID'),
      isp?: string(name='Isp', description='运营商'),
      bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
      dedicatedLineIp?: string(name='DedicatedLineIp', description='专线IP'),
      dedicatedLineGateway?: string(name='DedicatedLineGateway', description='专线网关'),
      dedicatedLineRole?: string(name='DedicatedLineRole', description='专线角色'),
      deviceId?: string(name='DeviceId', description='关联设备ID'),
      devicePort?: string(name='DevicePort', description='关联设备端口'),
      deviceName?: string(name='DeviceName', description='关联设备名称'),
      physicalSpaceId?: string(name='PhysicalSpaceId', description='关联物理空间ID'),
    }
  ](name='DedicatedLines', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListDedicatedLinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDedicatedLinesResponseBody(name='body'),
}

async function listDedicatedLinesWithOptions(request: ListDedicatedLinesRequest, runtime: Util.RuntimeOptions): ListDedicatedLinesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDedicatedLines', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDedicatedLines(request: ListDedicatedLinesRequest): ListDedicatedLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDedicatedLinesWithOptions(request, runtime);
}

model UpdateInformationKeyActionRequest {
  resourceInformationId?: string(name='ResourceInformationId', description='资源id'),
  instanceId?: string(name='InstanceId'),
  key?: string(name='Key', description='键'),
  value?: string(name='Value', description='键值'),
  keyAction?: string(name='KeyAction', description='动作'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
}

model UpdateInformationKeyActionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  actionMessage?: string(name='ActionMessage', description='返回信息'),
}

model UpdateInformationKeyActionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInformationKeyActionResponseBody(name='body'),
}

async function updateInformationKeyActionWithOptions(request: UpdateInformationKeyActionRequest, runtime: Util.RuntimeOptions): UpdateInformationKeyActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateInformationKeyAction', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateInformationKeyAction(request: UpdateInformationKeyActionRequest): UpdateInformationKeyActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInformationKeyActionWithOptions(request, runtime);
}

model GetRealtimeTaskRequest {
  taskId?: string(name='TaskId', description='实时任务ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetRealtimeTaskResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  inspectionTask?: {
    taskStatus?: string(name='TaskStatus', description='巡检状态'),
    inspectionResult?: string(name='InspectionResult', description='巡检输出'),
    errorCode?: string(name='ErrorCode', description='巡检错误码'),
    inspectionMessage?: string(name='InspectionMessage', description='巡检错误信息'),
  }(name='InspectionTask', description='请求任务结果'),
}

model GetRealtimeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealtimeTaskResponseBody(name='body'),
}

async function getRealtimeTaskWithOptions(request: GetRealtimeTaskRequest, runtime: Util.RuntimeOptions): GetRealtimeTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetRealtimeTask', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getRealtimeTask(request: GetRealtimeTaskRequest): GetRealtimeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRealtimeTaskWithOptions(request, runtime);
}

model ListScheduleTypesRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
}

model ListScheduleTypesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  scheduleType?: [ 
    {
      status?: string(name='Status', description='值班类型状态'),
      relatedWorker?: [ string ](name='RelatedWorker'),
      createTime?: string(name='CreateTime', description='创建时间'),
      scheduleTypeId?: string(name='ScheduleTypeId', description='资源一级ID'),
      updateTime?: string(name='UpdateTime', description='更新时间'),
      scheduleType?: string(name='ScheduleType', description='值班类型value'),
    }
  ](name='ScheduleType', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
}

model ListScheduleTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListScheduleTypesResponseBody(name='body'),
}

async function listScheduleTypesWithOptions(request: ListScheduleTypesRequest, runtime: Util.RuntimeOptions): ListScheduleTypesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListScheduleTypes', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listScheduleTypes(request: ListScheduleTypesRequest): ListScheduleTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScheduleTypesWithOptions(request, runtime);
}

model CreateScheduleTypeRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleType?: string(name='ScheduleType', description='值班类型key'),
  relatedWorker?: [ string ](name='RelatedWorker', description='relatedWorkerStr'),
  status?: string(name='Status', description='值班类型状态'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateScheduleTypeShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleType?: string(name='ScheduleType', description='值班类型key'),
  relatedWorkerShrink?: string(name='RelatedWorker', description='relatedWorkerStr'),
  status?: string(name='Status', description='值班类型状态'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateScheduleTypeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  scheduleTypeId?: string(name='ScheduleTypeId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
}

model CreateScheduleTypeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduleTypeResponseBody(name='body'),
}

async function createScheduleTypeWithOptions(tmpReq: CreateScheduleTypeRequest, runtime: Util.RuntimeOptions): CreateScheduleTypeResponse {
  Util.validateModel(tmpReq);
  var request = new CreateScheduleTypeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.relatedWorker)) {
    request.relatedWorkerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedWorker, 'RelatedWorker', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScheduleType', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScheduleType(request: CreateScheduleTypeRequest): CreateScheduleTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduleTypeWithOptions(request, runtime);
}

model GetScheduleWorkerRequest {
  instanceId?: string(name='InstanceId'),
  scheduleWorkerId?: string(name='ScheduleWorkerId', description='实例 ID。'),
}

model GetScheduleWorkerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  scheduleWorker?: {
    createTime?: string(name='CreateTime', description='创建时间'),
    updateTime?: string(name='UpdateTime', description='更新时间'),
    scheduleWorkerId?: string(name='ScheduleWorkerId', description='资源一级ID'),
    workerId?: string(name='WorkerId', description='值班人员工号'),
    workerName?: string(name='WorkerName', description='值班人员姓名'),
    workerContact?: string(name='WorkerContact', description='联系方式'),
  }(name='ScheduleWorker', description='值班人员对象'),
}

model GetScheduleWorkerResponse = {
  headers: map[string]string(name='headers'),
  body: GetScheduleWorkerResponseBody(name='body'),
}

async function getScheduleWorkerWithOptions(request: GetScheduleWorkerRequest, runtime: Util.RuntimeOptions): GetScheduleWorkerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetScheduleWorker', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getScheduleWorker(request: GetScheduleWorkerRequest): GetScheduleWorkerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getScheduleWorkerWithOptions(request, runtime);
}

model CreateScheduleWorkerRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  workerId?: string(name='WorkerId', description='值班人员工号'),
  workerName?: string(name='WorkerName', description='值班人员姓名'),
  workerContact?: string(name='WorkerContact', description='联系方式'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateScheduleWorkerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  scheduleWorkerId?: string(name='ScheduleWorkerId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
}

model CreateScheduleWorkerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduleWorkerResponseBody(name='body'),
}

async function createScheduleWorkerWithOptions(request: CreateScheduleWorkerRequest, runtime: Util.RuntimeOptions): CreateScheduleWorkerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScheduleWorker', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScheduleWorker(request: CreateScheduleWorkerRequest): CreateScheduleWorkerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduleWorkerWithOptions(request, runtime);
}

model CreateConfigurationVariateRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  variateName?: string(name='VariateName', description='资源名称'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  comment?: string(name='Comment', description='描述变量'),
  formatFunction?: string(name='FormatFunction', description='python转换函数'),
}

model CreateConfigurationVariateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  configurationVariateId?: string(name='ConfigurationVariateId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
}

model CreateConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConfigurationVariateResponseBody(name='body'),
}

async function createConfigurationVariateWithOptions(request: CreateConfigurationVariateRequest, runtime: Util.RuntimeOptions): CreateConfigurationVariateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConfigurationVariate', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConfigurationVariate(request: CreateConfigurationVariateRequest): CreateConfigurationVariateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigurationVariateWithOptions(request, runtime);
}

model GetSpaceModelSortRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  spaceType?: string(name='SpaceType', description='物理空间类型'),
  operateType?: string(name='OperateType', description='操作类型'),
}

model GetSpaceModelSortResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  spaceModel?: [ 
    {
      levelName?: string(name='LevelName', description='层级名称'),
      level?: long(name='Level', description='层级'),
    }
  ](name='SpaceModel', description='建设项目'),
}

model GetSpaceModelSortResponse = {
  headers: map[string]string(name='headers'),
  body: GetSpaceModelSortResponseBody(name='body'),
}

async function getSpaceModelSortWithOptions(request: GetSpaceModelSortRequest, runtime: Util.RuntimeOptions): GetSpaceModelSortResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetSpaceModelSort', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getSpaceModelSort(request: GetSpaceModelSortRequest): GetSpaceModelSortResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpaceModelSortWithOptions(request, runtime);
}

model CreateRealtimeTaskRequest {
  deviceId?: string(name='DeviceId', description='设备ID'),
  script?: string(name='Script', description='模板执行脚本'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  clientToken?: string(name='ClientToken', description='token'),
}

model CreateRealtimeTaskResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  taskId?: string(name='TaskId', description='实时任务ID'),
}

model CreateRealtimeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRealtimeTaskResponseBody(name='body'),
}

async function createRealtimeTaskWithOptions(request: CreateRealtimeTaskRequest, runtime: Util.RuntimeOptions): CreateRealtimeTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRealtimeTask', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRealtimeTask(request: CreateRealtimeTaskRequest): CreateRealtimeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRealtimeTaskWithOptions(request, runtime);
}

model GetDeviceFormRequest {
  deviceFormId?: string(name='DeviceFormId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDeviceFormResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceForm?: {
    configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
    attributeList?: [ 
      {
        attributeKey?: string(name='AttributeKey', description='设备形态属性主键'),
        attributeName?: string(name='AttributeName', description='设备形态属性名称'),
        attributeRequirement?: boolean(name='AttributeRequirement', description='设备形态属性是否必填'),
        attributeUniqueness?: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一'),
        attributeFormat?: string(name='AttributeFormat', description='设备形态属性值格式'),
        attributeType?: string(name='AttributeType', description='设备形态属性值类型'),
        attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象'),
        attributeTableDisplay?: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见'),
        attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符'),
        attributeQuery?: boolean(name='AttributeQuery', description='前端是否展示对应的查询控件'),
        attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', description='前端查询控件是否支持模糊搜索'),
        attributeBuiltIn?: boolean(name='AttributeBuiltIn', description='设备形态属性是否内置'),
      }
    ](name='AttributeList', description='设备形态属性列表'),
    deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
    deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
    formBuiltIn?: boolean(name='FormBuiltIn', description='设备形态是否内置'),
    accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
    detailDisplay?: boolean(name='DetailDisplay', description='是否展示设备详情'),
    uniqueKey?: string(name='UniqueKey', description='设备形态主键'),
  }(name='DeviceForm', description='设备详情'),
}

model GetDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceFormResponseBody(name='body'),
}

async function getDeviceFormWithOptions(request: GetDeviceFormRequest, runtime: Util.RuntimeOptions): GetDeviceFormResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceForm', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceForm(request: GetDeviceFormRequest): GetDeviceFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceFormWithOptions(request, runtime);
}

model CreateDeviceRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  hostName?: string(name='HostName', description='主机名'),
  ip?: string(name='Ip', description='设备IP'),
  sn?: string(name='Sn', description='设备SN'),
  mac?: string(name='Mac', description='设备MAC地址'),
  vendor?: string(name='Vendor', description='设备厂商'),
  model?: string(name='Model', description='设备型号'),
  serviceStatus?: string(name='ServiceStatus', description='设备状态'),
  securityDomain?: string(name='SecurityDomain', description='设备安全域'),
  loginType?: string(name='LoginType', description='登录类型'),
  loginUsername?: string(name='LoginUsername', description='登录账号'),
  loginPassword?: string(name='LoginPassword', description='登录密码'),
  enablePassword?: string(name='EnablePassword', description='enable密码'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP 版本号'),
  snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
  snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
  snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol'),
  snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='SNMP Privacy Passphase'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol'),
  extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceId?: string(name='DeviceId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDeviceWithOptions(request: CreateDeviceRequest, runtime: Util.RuntimeOptions): CreateDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDevice', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceWithOptions(request, runtime);
}

model CreateSetupProjectRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  deliveryTime?: string(name='DeliveryTime', description='创建时间'),
  spaceId?: string(name='SpaceId', description='物理空间uId'),
  description?: string(name='Description', description='描述'),
}

model CreateSetupProjectResponseBody = {
  setupProjectId?: string(name='SetupProjectId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateSetupProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSetupProjectResponseBody(name='body'),
}

async function createSetupProjectWithOptions(request: CreateSetupProjectRequest, runtime: Util.RuntimeOptions): CreateSetupProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSetupProject', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSetupProject(request: CreateSetupProjectRequest): CreateSetupProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSetupProjectWithOptions(request, runtime);
}

model UpdateDedicatedLineRequest {
  dedicatedLineId?: string(name='DedicatedLineId', description='实例 ID。'),
  isp?: string(name='Isp', description='运营商'),
  bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
  dedicatedLineIp?: string(name='DedicatedLineIp', description='专线IP'),
  dedicatedLineGateway?: string(name='DedicatedLineGateway', description='专线网关'),
  dedicatedLineRole?: string(name='DedicatedLineRole', description='专线角色'),
  deviceId?: string(name='DeviceId', description='关联设备ID'),
  devicePort?: string(name='DevicePort', description='关联设备端口名称'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDedicatedLineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDedicatedLineResponseBody(name='body'),
}

async function updateDedicatedLineWithOptions(request: UpdateDedicatedLineRequest, runtime: Util.RuntimeOptions): UpdateDedicatedLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDedicatedLine', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDedicatedLine(request: UpdateDedicatedLineRequest): UpdateDedicatedLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDedicatedLineWithOptions(request, runtime);
}

model GetOsVersionRequest {
  instanceId?: string(name='InstanceId'),
  osVersionId?: string(name='OsVersionId', description='实例 ID。'),
}

model GetOsVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  osVersion?: [ 
    {
      downloadPath?: string(name='DownloadPath', description='下载路径'),
    }
  ](name='OsVersion', description='数组，返回示例目录。'),
}

model GetOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetOsVersionResponseBody(name='body'),
}

async function getOsVersionWithOptions(request: GetOsVersionRequest, runtime: Util.RuntimeOptions): GetOsVersionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetOsVersion', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getOsVersion(request: GetOsVersionRequest): GetOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOsVersionWithOptions(request, runtime);
}

model UpdateScheduleDutyRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleDutyId?: string(name='ScheduleDutyId', description='资源一级ID'),
  typeWorkerList?: [ 
    {
      scheduleTypeId?: string(name='ScheduleTypeId', description='scheduleTypeId'),
      scheduleWorkerName?: [ string ](name='ScheduleWorkerName', description='值班人员姓名'),
    }
  ](name='TypeWorkerList', description='typeWorkerList'),
}

model UpdateScheduleDutyShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleDutyId?: string(name='ScheduleDutyId', description='资源一级ID'),
  typeWorkerListShrink?: string(name='TypeWorkerList', description='typeWorkerList'),
}

model UpdateScheduleDutyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateScheduleDutyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateScheduleDutyResponseBody(name='body'),
}

async function updateScheduleDutyWithOptions(tmpReq: UpdateScheduleDutyRequest, runtime: Util.RuntimeOptions): UpdateScheduleDutyResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateScheduleDutyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.typeWorkerList)) {
    request.typeWorkerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.typeWorkerList, 'TypeWorkerList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateScheduleDuty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateScheduleDuty(request: UpdateScheduleDutyRequest): UpdateScheduleDutyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScheduleDutyWithOptions(request, runtime);
}

model CreateIpRecordRequest {
  instanceId?: string(name='InstanceId'),
  ipRecordName?: string(name='IpRecordName', description='资源名称'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型uuid'),
  creator?: string(name='Creator', description='创建人'),
  device?: [ 
    {
      deviceName?: string(name='DeviceName', description='设备名称'),
      port?: string(name='Port', description='设备端口'),
      remoteDeviceName?: string(name='RemoteDeviceName', description='对端设备名称'),
      remotePort?: string(name='RemotePort', description='对端设备端口'),
      deviceMac?: string(name='DeviceMac', description='设备MAC'),
      zoneLayer?: [ 
        {
          name?: string(name='Name', description='园区层级名称'),
          value?: string(name='Value', description='园区层级值'),
        }
      ](name='ZoneLayer', description='园区层级'),
    }
  ](name='Device', description='设备列表'),
  recordType?: string(name='RecordType', description='工单类型 Apply 申请工单 Recycle 释放工单'),
  ipCode?: [ string ](name='IpCode', description='IP地址列表'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateIpRecordShrinkRequest {
  instanceId?: string(name='InstanceId'),
  ipRecordName?: string(name='IpRecordName', description='资源名称'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型uuid'),
  creator?: string(name='Creator', description='创建人'),
  deviceShrink?: string(name='Device', description='设备列表'),
  recordType?: string(name='RecordType', description='工单类型 Apply 申请工单 Recycle 释放工单'),
  ipCodeShrink?: string(name='IpCode', description='IP地址列表'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateIpRecordResponseBody = {
  ipRecordId?: string(name='IpRecordId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId', description='若创建接口为异步实现，则需返回明确的JobId。'),
}

model CreateIpRecordResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpRecordResponseBody(name='body'),
}

async function createIpRecordWithOptions(tmpReq: CreateIpRecordRequest, runtime: Util.RuntimeOptions): CreateIpRecordResponse {
  Util.validateModel(tmpReq);
  var request = new CreateIpRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.device)) {
    request.deviceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.device, 'Device', 'json');
  }
  if (!Util.isUnset(tmpReq.ipCode)) {
    request.ipCodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ipCode, 'IpCode', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIpRecord', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIpRecord(request: CreateIpRecordRequest): CreateIpRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpRecordWithOptions(request, runtime);
}

model ListInstancesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  instances?: [ 
    {
      instanceId?: string(name='InstanceId', description='实例ID'),
      instanceName?: string(name='InstanceName', description='实例名称'),
      instanceSpec?: string(name='InstanceSpec', description='实例规格'),
      instanceOpenDate?: string(name='InstanceOpenDate', description='实例开通时间'),
      instanceEndDate?: string(name='InstanceEndDate', description='实例到期时间'),
      instanceDeviceMaxCount?: string(name='InstanceDeviceMaxCount', description='最大纳管设备数量'),
    }
  ](name='Instances', description='实例列表'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(runtime: Util.RuntimeOptions): ListInstancesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListInstances', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listInstances(): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(runtime);
}

model ListZoneTypesRequest {
  name?: string(name='Name', description='园区类型名称'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListZoneTypesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  zoneType?: [ 
    {
      name?: string(name='Name', description='园区类型名称'),
      zoneTypeName?: string(name='ZoneTypeName', description='资源名称'),
      zoneTypeLayer?: [ 
        {
          name?: string(name='Name', description='园区层级名称'),
          mask?: long(name='Mask', description='园区层级掩码'),
        }
      ](name='ZoneTypeLayer', description='园区层级'),
      createTime?: string(name='CreateTime', description='创建时间'),
      zoneTypeId?: string(name='ZoneTypeId', description='资源一级ID'),
    }
  ](name='ZoneType', description='数组，返回示例目录。'),
}

model ListZoneTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListZoneTypesResponseBody(name='body'),
}

async function listZoneTypesWithOptions(request: ListZoneTypesRequest, runtime: Util.RuntimeOptions): ListZoneTypesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListZoneTypes', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listZoneTypes(request: ListZoneTypesRequest): ListZoneTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listZoneTypesWithOptions(request, runtime);
}

model UpdatePhysicalSpaceRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='实例 ID。'),
  physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
  country?: string(name='Country', description='所属国家'),
  province?: string(name='Province', description='所属省份'),
  city?: string(name='City', description='所属城市'),
  address?: string(name='Address', description='具体地址'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  owner?: string(name='Owner', description='负责人'),
  spaceAbbreviation?: string(name='SpaceAbbreviation', description='缩写'),
  spaceType?: string(name='SpaceType', description='模型'),
}

model UpdatePhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdatePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePhysicalSpaceResponseBody(name='body'),
}

async function updatePhysicalSpaceWithOptions(request: UpdatePhysicalSpaceRequest, runtime: Util.RuntimeOptions): UpdatePhysicalSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdatePhysicalSpace', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updatePhysicalSpace(request: UpdatePhysicalSpaceRequest): UpdatePhysicalSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhysicalSpaceWithOptions(request, runtime);
}

model UpdateResourceInstanceRequest {
  instanceId?: string(name='InstanceId'),
  resourceInformationId?: string(name='ResourceInformationId', description='资源id'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目资源uuid'),
  resourceInformation?: [ 
    {
      key?: string(name='Key', description='键'),
      value?: string(name='Value', description='值'),
    }
  ](name='ResourceInformation', description='数据'),
}

model UpdateResourceInstanceShrinkRequest {
  instanceId?: string(name='InstanceId'),
  resourceInformationId?: string(name='ResourceInformationId', description='资源id'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目资源uuid'),
  resourceInformationShrink?: string(name='ResourceInformation', description='数据'),
}

model UpdateResourceInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateResourceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceInstanceResponseBody(name='body'),
}

async function updateResourceInstanceWithOptions(tmpReq: UpdateResourceInstanceRequest, runtime: Util.RuntimeOptions): UpdateResourceInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateResourceInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceInformation)) {
    request.resourceInformationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceInformation, 'ResourceInformation', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateResourceInstance', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateResourceInstance(request: UpdateResourceInstanceRequest): UpdateResourceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceInstanceWithOptions(request, runtime);
}

model GetScheduleDutyRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleDutyId?: string(name='ScheduleDutyId', description='scheduleDutyId'),
}

model GetScheduleDutyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  scheduleDuty?: {
    workType?: string(name='WorkType', description='值班表类型'),
    createTime?: string(name='CreateTime', description='创建时间'),
    updateTime?: string(name='UpdateTime', description='更新时间'),
    workDate?: string(name='WorkDate', description='值班表日期'),
    workerId?: string(name='WorkerId', description='值班人员工号'),
    scheduleDutyId?: string(name='ScheduleDutyId', description='资源一级ID'),
    workerName?: string(name='WorkerName', description='值班人员姓名'),
  }(name='ScheduleDuty', description='值班表对象'),
}

model GetScheduleDutyResponse = {
  headers: map[string]string(name='headers'),
  body: GetScheduleDutyResponseBody(name='body'),
}

async function getScheduleDutyWithOptions(request: GetScheduleDutyRequest, runtime: Util.RuntimeOptions): GetScheduleDutyResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetScheduleDuty', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getScheduleDuty(request: GetScheduleDutyRequest): GetScheduleDutyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getScheduleDutyWithOptions(request, runtime);
}

model GetConfigurationVariateRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  configurationVariateId?: string(name='ConfigurationVariateId', description='实例 ID。'),
}

model GetConfigurationVariateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  configurationVariate?: {
    variateName?: string(name='VariateName', description='project'),
    comment?: string(name='Comment', description='变量描述'),
    formatFunction?: string(name='FormatFunction', description='转换函数'),
  }(name='ConfigurationVariate', description='资源对象'),
}

model GetConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  body: GetConfigurationVariateResponseBody(name='body'),
}

async function getConfigurationVariateWithOptions(request: GetConfigurationVariateRequest, runtime: Util.RuntimeOptions): GetConfigurationVariateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetConfigurationVariate', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getConfigurationVariate(request: GetConfigurationVariateRequest): GetConfigurationVariateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigurationVariateWithOptions(request, runtime);
}

model GetAlarmStatusRequest {
  deviceId?: string(name='DeviceId', description='设备ID'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  type?: string(name='Type', description='数据类型'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
  dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
  appId?: string(name='AppId', description='应用ID'),
}

model GetAlarmStatusResponseBody = {
  requestId?: string(name='RequestId', description='request Id'),
  alarmStatus?: {
    deviceId?: string(name='DeviceId', description='设备ID'),
    monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
    collectionTime?: string(name='CollectionTime', description='采集时间'),
    receiveTime?: string(name='ReceiveTime', description='接收时间'),
    alarmRule?: string(name='AlarmRule', description='命中告警规则'),
    alarmStatus?: string(name='AlarmStatus', description='告警状态'),
    result?: string(name='Result', description='采集结果'),
    abnormalDataItem?: string(name='AbnormalDataItem', description='异常数据项'),
    uniqueKey?: string(name='UniqueKey', description='索引'),
    responseCode?: string(name='ResponseCode', description='采集状态码'),
    resourceDevice?: {
      hostName?: string(name='HostName', description='设备名'),
      ip?: string(name='Ip', description='IP'),
      vendor?: string(name='Vendor', description='厂商'),
      model?: string(name='Model', description='型号'),
      status?: string(name='Status', description='状态'),
      sn?: string(name='Sn', description='sn'),
      space?: string(name='Space', description='物理空间'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      securityDomain?: string(name='SecurityDomain', description='安全域'),
      deviceForm?: string(name='DeviceForm', description='设备形态'),
    }(name='ResourceDevice', description='设备'),
    monitorItem?: {
      monitorItemName?: string(name='MonitorItemName', description='监控项名称'),
      monitorItemDescription?: string(name='MonitorItemDescription', description='描述'),
      securityDomain?: string(name='SecurityDomain', description='安全域'),
      collectionType?: string(name='CollectionType', description='采集类型'),
      execInterval?: string(name='ExecInterval', description='执行间隔'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      deviceForm?: string(name='DeviceForm', description='设备形态'),
      effective?: long(name='Effective', description='是否启用'),
    }(name='MonitorItem', description='监控项'),
    firstAbnormalTime?: string(name='FirstAbnormalTime', description='首次异常时间'),
    notificationSwitch?: {
      reason?: string(name='Reason', description='关闭原因'),
      expiryTime?: string(name='ExpiryTime', description='关闭到期时间'),
    }(name='NotificationSwitch', description='告警开关'),
    aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
    dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
    aggregateData?: {
      aggregateMode?: string(name='AggregateMode', description='聚合方式'),
      aggregateDataDescription?: string(name='AggregateDataDescription', description='描述'),
      dataItem?: string(name='DataItem', description='数据项'),
      aggregateDataName?: string(name='AggregateDataName', description='聚合数据名称'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      isAllDevice?: int32(name='IsAllDevice', description='是否聚合全部设备'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
    }(name='AggregateData', description='聚合数据详情'),
    dedicatedLine?: {
      dedicatedLineName?: string(name='DedicatedLineName', description='专线名称'),
      space?: string(name='Space', description='物理空间'),
      portName?: string(name='PortName', description='端口名'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      bandwidth?: string(name='Bandwidth', description='带宽'),
      ip?: string(name='Ip', description='IP'),
      dedicatedLineGateway?: string(name='DedicatedLineGateway', description='对端IP'),
    }(name='DedicatedLine', description='专线详情'),
    portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
    portCollection?: {
      portCollectionName?: string(name='PortCollectionName', description='端口集名称'),
      portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
      portCollectionDescription?: string(name='PortCollectionDescription', description='端口集描述'),
      portList?: [ 
        {
          portName?: string(name='PortName', description='端口名'),
          deviceId?: string(name='DeviceId', description='设备ID'),
          resourceDevice?: {
            hostName?: string(name='HostName', description='设备名'),
            ip?: string(name='Ip', description='IP'),
            securityDomain?: string(name='SecurityDomain', description='安全域'),
          }(name='ResourceDevice', description='设备详情'),
        }
      ](name='PortList', description='端口列表'),
    }(name='PortCollection'),
    agentIp?: string(name='AgentIp', description='采集探针IP'),
    appId?: string(name='AppId', description='应用ID'),
    resourceApp?: {
      domain?: string(name='Domain', description='监控域名'),
      appId?: string(name='AppId', description='应用ID'),
      port?: string(name='Port', description='端口'),
      type?: string(name='Type', description='资源类型'),
      securityDomain?: string(name='SecurityDomain', description='所属探针'),
    }(name='ResourceApp', description='应用'),
  }(name='AlarmStatus', description='告警状态'),
}

model GetAlarmStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlarmStatusResponseBody(name='body'),
}

async function getAlarmStatusWithOptions(request: GetAlarmStatusRequest, runtime: Util.RuntimeOptions): GetAlarmStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAlarmStatus', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAlarmStatus(request: GetAlarmStatusRequest): GetAlarmStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlarmStatusWithOptions(request, runtime);
}

model GetIpRecordRequest {
  instanceId?: string(name='InstanceId'),
  ipRecordId?: string(name='IpRecordId', description='实例 ID。'),
}

model GetIpRecordResponseBody = {
  ipRecord?: {
    status?: string(name='Status', description='工单状态 running complete fail'),
    description?: string(name='Description', description='备注'),
    ipCode?: [ string ](name='IpCode', description='IP地址列表'),
    createTime?: string(name='CreateTime', description='创建时间'),
    updateTime?: string(name='UpdateTime', description='修改时间'),
    creator?: string(name='Creator', description='创建人'),
    ipRecordId?: string(name='IpRecordId', description='资源一级ID'),
    ipRecordName?: string(name='IpRecordName', description='资源名称'),
    zoneName?: string(name='ZoneName', description='园区名'),
    businessTypeName?: string(name='BusinessTypeName', description='业务类型名称'),
    recodeType?: string(name='RecodeType', description='工单类型 Apply 申请工单 Recycle 释放工单'),
    ipBlock?: string(name='IpBlock', description='地址段'),
    detail?: [ 
      {
        ip?: string(name='Ip', description='申请到的Ip'),
        deviceName?: string(name='DeviceName', description='设备名称'),
        port?: string(name='Port', description='设备端口'),
        remoteIp?: string(name='RemoteIp', description='对端IP'),
        remoteDeviceName?: string(name='RemoteDeviceName', description='对端设备名称'),
        remotePort?: string(name='RemotePort', description='对端设备端口'),
        deviceMac?: string(name='DeviceMac', description='设备MAC'),
        gateway?: string(name='Gateway', description='网关'),
        parentIpBlocks?: [ string ](name='ParentIpBlocks', description='父地址段列表'),
        zoneLayer?: [ 
          {
            name?: string(name='Name', description='园区层级名称'),
            value?: string(name='Value', description='园区层级值'),
          }
        ](name='ZoneLayer', description='园区层级'),
      }
    ](name='Detail', description='工单详情'),
  }(name='IpRecord', description='工单类型对象'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetIpRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpRecordResponseBody(name='body'),
}

async function getIpRecordWithOptions(request: GetIpRecordRequest, runtime: Util.RuntimeOptions): GetIpRecordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetIpRecord', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getIpRecord(request: GetIpRecordRequest): GetIpRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpRecordWithOptions(request, runtime);
}

model ListScheduleDutiesRequest {
  instanceId?: string(name='InstanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model ListScheduleDutiesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  scheduleDuties?: [ 
    {
      scheduleDutyDate?: string(name='ScheduleDutyDate', description='值班表日期'),
      scheduleDutyId?: string(name='ScheduleDutyId', description='资源一级ID'),
      createTime?: string(name='CreateTime', description='创建时间'),
      updateTime?: string(name='UpdateTime', description='更新时间'),
      holiday?: boolean(name='Holiday', description='是否节假日'),
      typeWorkerList?: [ 
        {
          scheduleDutyId?: string(name='ScheduleDutyId', description='值班表id'),
          scheduleTypeId?: string(name='ScheduleTypeId', description='值班类型Id'),
          scheduleTypeName?: string(name='ScheduleTypeName', description='值班类型名称'),
          scheduleWorkerName?: [ string ](name='ScheduleWorkerName', description='值班人员名称'),
        }
      ](name='TypeWorkerList'),
    }
  ](name='ScheduleDuties', description='数组，返回示例目录。'),
}

model ListScheduleDutiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListScheduleDutiesResponseBody(name='body'),
}

async function listScheduleDutiesWithOptions(request: ListScheduleDutiesRequest, runtime: Util.RuntimeOptions): ListScheduleDutiesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListScheduleDuties', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listScheduleDuties(request: ListScheduleDutiesRequest): ListScheduleDutiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScheduleDutiesWithOptions(request, runtime);
}

model LockSpaceModelRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  spaceModelId?: string(name='SpaceModelId', description='资源id'),
}

model LockSpaceModelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model LockSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  body: LockSpaceModelResponseBody(name='body'),
}

async function lockSpaceModelWithOptions(request: LockSpaceModelRequest, runtime: Util.RuntimeOptions): LockSpaceModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LockSpaceModel', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lockSpaceModel(request: LockSpaceModelRequest): LockSpaceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockSpaceModelWithOptions(request, runtime);
}

model UpdateResourceInformationRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  resourceInformationId?: string(name='ResourceInformationId', description='资源信息Id'),
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceAttribute?: string(name='ResourceAttribute', description='资源属性'),
  information?: [ 
    {
      key?: string(name='Key', description='键'),
      keyAttribute?: string(name='KeyAttribute', description='键属性'),
      keyAction?: string(name='KeyAction', description='键动作'),
      keyDescription?: string(name='KeyDescription', description='键描述'),
      setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
    }
  ](name='Information', description='信息'),
}

model UpdateResourceInformationShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  resourceInformationId?: string(name='ResourceInformationId', description='资源信息Id'),
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceAttribute?: string(name='ResourceAttribute', description='资源属性'),
  informationShrink?: string(name='Information', description='信息'),
}

model UpdateResourceInformationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateResourceInformationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceInformationResponseBody(name='body'),
}

async function updateResourceInformationWithOptions(tmpReq: UpdateResourceInformationRequest, runtime: Util.RuntimeOptions): UpdateResourceInformationResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateResourceInformationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.information)) {
    request.informationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.information, 'Information', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateResourceInformation', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateResourceInformation(request: UpdateResourceInformationRequest): UpdateResourceInformationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceInformationWithOptions(request, runtime);
}

model CreateTimePeriodRequest {
  timePeriodName?: string(name='TimePeriodName', description='时间段名称'),
  timePeriodDescription?: string(name='TimePeriodDescription', description='描述'),
  expression?: string(name='Expression', description='cron表达式'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateTimePeriodResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  timePeriodId?: string(name='TimePeriodId', description='时间段ID'),
}

model CreateTimePeriodResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTimePeriodResponseBody(name='body'),
}

async function createTimePeriodWithOptions(request: CreateTimePeriodRequest, runtime: Util.RuntimeOptions): CreateTimePeriodResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTimePeriod', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTimePeriod(request: CreateTimePeriodRequest): CreateTimePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTimePeriodWithOptions(request, runtime);
}

model ListDevicesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  hostName?: [ string ](name='HostName', description='设备主机名'),
  ip?: [ string ](name='Ip', description='设备IP'),
  sn?: [ string ](name='Sn', description='设备SN'),
  mac?: [ string ](name='Mac', description='设备MAC'),
  vendor?: [ string ](name='Vendor', description='设备厂商'),
  model?: [ string ](name='Model', description='设备型号'),
  serviceStatus?: [ string ](name='ServiceStatus', description='设备服务状态'),
  securityDomain?: [ string ](name='SecurityDomain', description='安全域'),
  extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDevicesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  devices?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
      deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
      physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
      physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
      hostName?: string(name='HostName', description='主机名'),
      ip?: string(name='Ip', description='设备IP'),
      sn?: string(name='Sn', description='设备SN'),
      mac?: string(name='Mac', description='设备MAC地址'),
      vendor?: string(name='Vendor', description='设备厂商'),
      model?: string(name='Model', description='设备型号'),
      securityDomain?: string(name='SecurityDomain', description='设备安全域'),
      serviceStatus?: string(name='ServiceStatus', description='设备状态'),
      loginType?: string(name='LoginType', description='登录类型'),
      loginUsername?: string(name='LoginUsername', description='登录账号'),
      loginPassword?: string(name='LoginPassword', description='登录密码'),
      enablePassword?: string(name='EnablePassword', description='enable密码'),
      snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号'),
      snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
      snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
      snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
      snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名'),
      snmpAuthPassPhrase?: string(name='SnmpAuthPassPhrase', description='SNMP Auth PassPhrase'),
      snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol'),
      snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='SNMP Privacy Passphase'),
      snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol'),
      extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
    }
  ](name='Devices', description='数组，返回示例目录。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDevices', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model ListInspectionTaskReportsRequest {
  inspectionItemId?: string(name='InspectionItemId', description='巡检项id'),
  vendor?: string(name='Vendor', description='厂商'),
  instanceId?: string(name='InstanceId', description='实例id'),
}

model ListInspectionTaskReportsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  inspectionTask?: [ 
    {
      totalDeviceNumber?: long(name='TotalDeviceNumber', description='总设备数'),
      actualDeviceNumber?: long(name='ActualDeviceNumber', description='实际设备数'),
      deviceRate?: string(name='DeviceRate', description='设备占比'),
      taskNumber?: long(name='TaskNumber', description='任务数'),
      runningTaskNumber?: long(name='RunningTaskNumber', description='正在运行任务数'),
      runningTaskRate?: string(name='RunningTaskRate', description='运行占比'),
      successTaskNumber?: long(name='SuccessTaskNumber', description='成功任务数'),
      successTaskRate?: string(name='SuccessTaskRate', description='成功占比'),
      failureTaskNumber?: long(name='FailureTaskNumber', description='失败任务数'),
      failureTaskRate?: string(name='FailureTaskRate', description='失败占比'),
      failureStatistic?: string(name='FailureStatistic', description='失败详情'),
      alarmNumber?: long(name='AlarmNumber', description='告警数量'),
      criticalNumber?: long(name='CriticalNumber', description='高危数量'),
      criticalRate?: string(name='CriticalRate', description='高危占比'),
      warningNumber?: long(name='WarningNumber', description='中危数量'),
      warningRate?: string(name='WarningRate', description='中危占比'),
      normalNumber?: long(name='NormalNumber', description='正常数量'),
      normalRate?: string(name='NormalRate', description='正常占比'),
      alarmStatistic?: [ 
        {
          inspectionItem?: string(name='InspectionItem', description='巡检项'),
          vendor?: string(name='Vendor', description='厂商'),
          model?: string(name='Model', description='型号'),
          criticalNumber?: long(name='CriticalNumber', description='高危数量'),
          warningNumber?: long(name='WarningNumber', description='中危数量'),
        }
      ](name='AlarmStatistic'),
    }
  ](name='InspectionTask', description='内容'),
}

model ListInspectionTaskReportsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInspectionTaskReportsResponseBody(name='body'),
}

async function listInspectionTaskReportsWithOptions(request: ListInspectionTaskReportsRequest, runtime: Util.RuntimeOptions): ListInspectionTaskReportsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListInspectionTaskReports', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listInspectionTaskReports(request: ListInspectionTaskReportsRequest): ListInspectionTaskReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInspectionTaskReportsWithOptions(request, runtime);
}

model CreateMonitorItemRequest {
  monitorItemName?: string(name='MonitorItemName', description='监控项名称'),
  monitorItemDescription?: string(name='MonitorItemDescription', description='监控项描述'),
  dataItem?: string(name='DataItem', description='数据项'),
  securityDomain?: string(name='SecurityDomain', description='安全域'),
  analysisCode?: string(name='AnalysisCode', description='解析代码'),
  collectionType?: string(name='CollectionType', description='采集类型'),
  effective?: int32(name='Effective', description='是否启用'),
  config?: string(name='Config', description='监控项参数配置'),
  execInterval?: int32(name='ExecInterval', description='执行间隔(s)'),
  deviceForm?: string(name='DeviceForm', description='设备形态'),
  alarmRuleList?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='告警状态'),
      variable?: string(name='Variable', description='指标名'),
      expression?: string(name='Expression', description='表达式'),
      value?: string(name='Value', description='比较值'),
    }
  ](name='AlarmRuleList', description='告警规则列表'),
  type?: string(name='Type', description='类型'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateMonitorItemResponseBody = {
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateMonitorItemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorItemResponseBody(name='body'),
}

async function createMonitorItemWithOptions(request: CreateMonitorItemRequest, runtime: Util.RuntimeOptions): CreateMonitorItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMonitorItem', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMonitorItem(request: CreateMonitorItemRequest): CreateMonitorItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMonitorItemWithOptions(request, runtime);
}

model CreatePhysicalSpaceRequest {
  physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
  country?: string(name='Country', description='所属国家'),
  province?: string(name='Province', description='所属省份'),
  city?: string(name='City', description='所属城市'),
  address?: string(name='Address', description='具体地址'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  spaceType?: string(name='SpaceType', description='物理空间模型'),
  spaceAbbreviation?: string(name='SpaceAbbreviation', description='物理空间缩写'),
  owner?: string(name='Owner', description='负责人'),
}

model CreatePhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
}

model CreatePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePhysicalSpaceResponseBody(name='body'),
}

async function createPhysicalSpaceWithOptions(request: CreatePhysicalSpaceRequest, runtime: Util.RuntimeOptions): CreatePhysicalSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePhysicalSpace', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPhysicalSpace(request: CreatePhysicalSpaceRequest): CreatePhysicalSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhysicalSpaceWithOptions(request, runtime);
}

model UpdateDevicesRequest {
  deviceIds?: [ string ](name='DeviceIds', description='设备ID'),
  loginType?: string(name='LoginType', description='登录类型'),
  loginUsername?: string(name='LoginUsername', description='登录账号'),
  loginPassword?: string(name='LoginPassword', description='登录密码'),
  enablePassword?: string(name='EnablePassword', description='enable密码'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP 版本号'),
  snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
  snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
  snmpUserName?: string(name='SnmpUserName', description='SNMP 用户名'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol'),
  snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='SNMP Privacy Passphase'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间id'),
  physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
  serviceStatus?: string(name='ServiceStatus', description='服务状态'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
}

model UpdateDevicesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevicesResponseBody(name='body'),
}

async function updateDevicesWithOptions(request: UpdateDevicesRequest, runtime: Util.RuntimeOptions): UpdateDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDevices', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDevices(request: UpdateDevicesRequest): UpdateDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDevicesWithOptions(request, runtime);
}

model UpdateScheduleTypeRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleTypeId?: string(name='ScheduleTypeId', description='资源一级ID'),
  scheduleType?: string(name='ScheduleType', description='值班类型key'),
  relatedWorker?: [ string ](name='RelatedWorker', description='relatedWorkerStr'),
  status?: string(name='Status', description='值班类型状态'),
}

model UpdateScheduleTypeShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleTypeId?: string(name='ScheduleTypeId', description='资源一级ID'),
  scheduleType?: string(name='ScheduleType', description='值班类型key'),
  relatedWorkerShrink?: string(name='RelatedWorker', description='relatedWorkerStr'),
  status?: string(name='Status', description='值班类型状态'),
}

model UpdateScheduleTypeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateScheduleTypeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateScheduleTypeResponseBody(name='body'),
}

async function updateScheduleTypeWithOptions(tmpReq: UpdateScheduleTypeRequest, runtime: Util.RuntimeOptions): UpdateScheduleTypeResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateScheduleTypeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.relatedWorker)) {
    request.relatedWorkerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedWorker, 'RelatedWorker', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateScheduleType', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateScheduleType(request: UpdateScheduleTypeRequest): UpdateScheduleTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScheduleTypeWithOptions(request, runtime);
}

model DownloadDeviceResourceRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  deviceResourceId?: string(name='DeviceResourceId', description='deviceResourceId'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds', description='资源uuid'),
  downloadType?: string(name='DownloadType', description='操作类型'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
}

model DownloadDeviceResourceShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  deviceResourceId?: string(name='DeviceResourceId', description='deviceResourceId'),
  deviceResourceIdsShrink?: string(name='DeviceResourceIds', description='资源uuid'),
  downloadType?: string(name='DownloadType', description='操作类型'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
}

model DownloadDeviceResourceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  downloadUrl?: string(name='DownloadUrl', description='下载链接'),
}

model DownloadDeviceResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadDeviceResourceResponseBody(name='body'),
}

async function downloadDeviceResourceWithOptions(tmpReq: DownloadDeviceResourceRequest, runtime: Util.RuntimeOptions): DownloadDeviceResourceResponse {
  Util.validateModel(tmpReq);
  var request = new DownloadDeviceResourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceResourceIds)) {
    request.deviceResourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceResourceIds, 'DeviceResourceIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DownloadDeviceResource', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function downloadDeviceResource(request: DownloadDeviceResourceRequest): DownloadDeviceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadDeviceResourceWithOptions(request, runtime);
}

model GetOsDownloadPathRequest {
  instanceId?: string(name='InstanceId'),
  osVersionId?: string(name='OsVersionId', description='架构资源uuid'),
}

model GetOsDownloadPathResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  osVersion?: {
    downloadPath?: string(name='DownloadPath', description='系统版本下载路径'),
  }(name='OsVersion', description='系统版本'),
}

model GetOsDownloadPathResponse = {
  headers: map[string]string(name='headers'),
  body: GetOsDownloadPathResponseBody(name='body'),
}

async function getOsDownloadPathWithOptions(request: GetOsDownloadPathRequest, runtime: Util.RuntimeOptions): GetOsDownloadPathResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetOsDownloadPath', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getOsDownloadPath(request: GetOsDownloadPathRequest): GetOsDownloadPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOsDownloadPathWithOptions(request, runtime);
}

model ListConnectionPoliciesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  instanceId?: string(name='InstanceId'),
  architectureIterationId?: string(name='ArchitectureIterationId', description='架构迭代uid'),
  connectionPolicyId?: string(name='ConnectionPolicyId', description='连接策略id'),
  uplinkArchitectureModuleId?: string(name='UplinkArchitectureModuleId', description='上联模块uid'),
  downlinkArchitectureModuleId?: string(name='DownlinkArchitectureModuleId', description='下联模块uid'),
  uplinkArchitectureDeviceId?: string(name='UplinkArchitectureDeviceId', description='上联设备uid'),
  downlinkArchitectureDeviceId?: string(name='DownlinkArchitectureDeviceId', description='下联设备uid'),
}

model ListConnectionPoliciesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  connectionPolicy?: [ 
    {
      id?: string(name='Id', description='连接策略uid'),
      architectureIterationId?: string(name='ArchitectureIterationId', description='架构迭代uid'),
      name?: string(name='Name', description='连接策略名字'),
      linkCount?: int32(name='LinkCount', description='连接数'),
      algorithm?: string(name='Algorithm', description='连接策略算法'),
      createTime?: string(name='CreateTime', description='创建时间'),
      updateTime?: string(name='UpdateTime', description='更新是啊金'),
      uplinkArchitectureModuleId?: string(name='UplinkArchitectureModuleId', description='下联模块uid'),
      downlinkArchitectureModuleId?: string(name='DownlinkArchitectureModuleId', description='下联设备uid'),
      uplinkArchitectureDeviceId?: string(name='UplinkArchitectureDeviceId', description='上联模块uid'),
      downlinkArchitectureDeviceId?: string(name='DownlinkArchitectureDeviceId', description='上联设备uid'),
    }
  ](name='ConnectionPolicy', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
}

model ListConnectionPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectionPoliciesResponseBody(name='body'),
}

async function listConnectionPoliciesWithOptions(request: ListConnectionPoliciesRequest, runtime: Util.RuntimeOptions): ListConnectionPoliciesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListConnectionPolicies', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listConnectionPolicies(request: ListConnectionPoliciesRequest): ListConnectionPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionPoliciesWithOptions(request, runtime);
}

model UpdateScheduleWorkerRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleWorkerId?: string(name='ScheduleWorkerId', description='资源一级ID'),
  workerId?: string(name='WorkerId', description='值班人员工号'),
  workerName?: string(name='WorkerName', description='值班人员姓名'),
  workerContact?: string(name='WorkerContact', description='联系方式'),
}

model UpdateScheduleWorkerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateScheduleWorkerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateScheduleWorkerResponseBody(name='body'),
}

async function updateScheduleWorkerWithOptions(request: UpdateScheduleWorkerRequest, runtime: Util.RuntimeOptions): UpdateScheduleWorkerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateScheduleWorker', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateScheduleWorker(request: UpdateScheduleWorkerRequest): UpdateScheduleWorkerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScheduleWorkerWithOptions(request, runtime);
}

model DeleteConfigurationVariateRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  configurationVariateId?: string(name='ConfigurationVariateId', description='实例 ID。'),
}

model DeleteConfigurationVariateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConfigurationVariateResponseBody(name='body'),
}

async function deleteConfigurationVariateWithOptions(request: DeleteConfigurationVariateRequest, runtime: Util.RuntimeOptions): DeleteConfigurationVariateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteConfigurationVariate', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteConfigurationVariate(request: DeleteConfigurationVariateRequest): DeleteConfigurationVariateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConfigurationVariateWithOptions(request, runtime);
}

model CreateScheduleDutyRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  startDate?: string(name='StartDate', description='开始时间'),
  endDate?: string(name='EndDate', description='结束时间'),
  scheduleTypeIds?: [ string ](name='ScheduleTypeIds', description='值班表类型'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateScheduleDutyShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  startDate?: string(name='StartDate', description='开始时间'),
  endDate?: string(name='EndDate', description='结束时间'),
  scheduleTypeIdsShrink?: string(name='ScheduleTypeIds', description='值班表类型'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateScheduleDutyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  scheduleDutyId?: string(name='ScheduleDutyId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
}

model CreateScheduleDutyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduleDutyResponseBody(name='body'),
}

async function createScheduleDutyWithOptions(tmpReq: CreateScheduleDutyRequest, runtime: Util.RuntimeOptions): CreateScheduleDutyResponse {
  Util.validateModel(tmpReq);
  var request = new CreateScheduleDutyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scheduleTypeIds)) {
    request.scheduleTypeIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleTypeIds, 'ScheduleTypeIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScheduleDuty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScheduleDuty(request: CreateScheduleDutyRequest): CreateScheduleDutyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduleDutyWithOptions(request, runtime);
}

model GetPhysicalSpaceRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetPhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  physicalSpace?: {
    physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
    physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
    country?: string(name='Country', description='所属国家'),
    province?: string(name='Province', description='所属省份'),
    city?: string(name='City', description='所属城市'),
    address?: string(name='Address', description='具体地址'),
    spaceType?: string(name='SpaceType', description='模型'),
    spaceAbbreviation?: string(name='SpaceAbbreviation', description='缩写'),
    owner?: string(name='Owner', description='负责人'),
  }(name='PhysicalSpace', description='物理空间详情'),
}

model GetPhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetPhysicalSpaceResponseBody(name='body'),
}

async function getPhysicalSpaceWithOptions(request: GetPhysicalSpaceRequest, runtime: Util.RuntimeOptions): GetPhysicalSpaceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetPhysicalSpace', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getPhysicalSpace(request: GetPhysicalSpaceRequest): GetPhysicalSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalSpaceWithOptions(request, runtime);
}

model DeleteResourceInformationRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  resourceInformationId?: string(name='ResourceInformationId', description='实例 ID。'),
}

model DeleteResourceInformationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteResourceInformationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceInformationResponseBody(name='body'),
}

async function deleteResourceInformationWithOptions(request: DeleteResourceInformationRequest, runtime: Util.RuntimeOptions): DeleteResourceInformationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteResourceInformation', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteResourceInformation(request: DeleteResourceInformationRequest): DeleteResourceInformationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResourceInformationWithOptions(request, runtime);
}

model DeleteSetupProjectRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  setupProjectId?: string(name='SetupProjectId', description='实例 ID。'),
}

model DeleteSetupProjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteSetupProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSetupProjectResponseBody(name='body'),
}

async function deleteSetupProjectWithOptions(request: DeleteSetupProjectRequest, runtime: Util.RuntimeOptions): DeleteSetupProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSetupProject', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSetupProject(request: DeleteSetupProjectRequest): DeleteSetupProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSetupProjectWithOptions(request, runtime);
}

model CreateDedicatedLineRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  isp?: string(name='Isp', description='运营商'),
  bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
  dedicatedLineIp?: string(name='DedicatedLineIp', description='专线IP'),
  dedicatedLineGateway?: string(name='DedicatedLineGateway', description='专线网关'),
  dedicatedLineRole?: string(name='DedicatedLineRole', description='专线角色'),
  deviceId?: string(name='DeviceId', description='关联设备ID'),
  devicePort?: string(name='DevicePort', description='关联设备端口名称'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateDedicatedLineResponseBody = {
  dedicatedLineId?: string(name='DedicatedLineId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedLineResponseBody(name='body'),
}

async function createDedicatedLineWithOptions(request: CreateDedicatedLineRequest, runtime: Util.RuntimeOptions): CreateDedicatedLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedLine', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedLine(request: CreateDedicatedLineRequest): CreateDedicatedLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedLineWithOptions(request, runtime);
}

model ApplyIPRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  ipType?: string(name='IpType', description='ip地址类型'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型id'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds', description='设备uuid列表'),
  loopbackPort?: string(name='LoopbackPort', description='Loopback端口'),
  netLocation?: string(name='NetLocation', description='位置空间'),
  businessTypeParams?: string(name='BusinessTypeParams', description='业务参数'),
  deviceResourceId?: string(name='DeviceResourceId', description='deviceResourceId'),
}

model ApplyIPShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  ipType?: string(name='IpType', description='ip地址类型'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型id'),
  deviceResourceIdsShrink?: string(name='DeviceResourceIds', description='设备uuid列表'),
  loopbackPort?: string(name='LoopbackPort', description='Loopback端口'),
  netLocation?: string(name='NetLocation', description='位置空间'),
  businessTypeParams?: string(name='BusinessTypeParams', description='业务参数'),
  deviceResourceId?: string(name='DeviceResourceId', description='deviceResourceId'),
}

model ApplyIPResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ApplyIPResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyIPResponseBody(name='body'),
}

async function applyIPWithOptions(tmpReq: ApplyIPRequest, runtime: Util.RuntimeOptions): ApplyIPResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyIPShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceResourceIds)) {
    request.deviceResourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceResourceIds, 'DeviceResourceIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApplyIP', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function applyIP(request: ApplyIPRequest): ApplyIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyIPWithOptions(request, runtime);
}

model UpdateOsVersionRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  osVersionId?: string(name='OsVersionId', description='osVersionId'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  osVersion?: string(name='OsVersion', description='系统版本'),
  status?: string(name='Status', description='状态'),
  fileName?: string(name='FileName', description='文件名'),
  filePath?: string(name='FilePath', description='文件路径'),
}

model UpdateOsVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionResponseBody(name='body'),
}

async function updateOsVersionWithOptions(request: UpdateOsVersionRequest, runtime: Util.RuntimeOptions): UpdateOsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateOsVersion', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateOsVersion(request: UpdateOsVersionRequest): UpdateOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOsVersionWithOptions(request, runtime);
}

model GetSpaceModelInstanceRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  spaceId?: string(name='SpaceId', description='资源id'),
  spaceType?: string(name='SpaceType', description='物理空间类型'),
  operateType?: string(name='OperateType', description='操作类型'),
}

model GetSpaceModelInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  spaceModel?: {
    instance?: string(name='Instance', description='物理空间实例'),
  }(name='SpaceModel', description='建设项目'),
}

model GetSpaceModelInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetSpaceModelInstanceResponseBody(name='body'),
}

async function getSpaceModelInstanceWithOptions(request: GetSpaceModelInstanceRequest, runtime: Util.RuntimeOptions): GetSpaceModelInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetSpaceModelInstance', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getSpaceModelInstance(request: GetSpaceModelInstanceRequest): GetSpaceModelInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpaceModelInstanceWithOptions(request, runtime);
}

model ListOsVersionsRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
}

model ListOsVersionsResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  osVersion?: [ 
    {
      osVersion?: string(name='OsVersion', description='系统版本'),
      fileName?: string(name='FileName', description='文件名'),
      status?: string(name='Status', description='状态'),
      filePath?: string(name='FilePath', description='文件路径'),
      createTime?: string(name='CreateTime', description='创建时间'),
      vendor?: string(name='Vendor', description='厂商'),
      model?: string(name='Model', description='型号'),
      osVersionId?: string(name='OsVersionId', description='资源uuid'),
      updateTime?: string(name='UpdateTime', description='修改时间'),
    }
  ](name='OsVersion', description='数组，返回示例目录。'),
}

model ListOsVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOsVersionsResponseBody(name='body'),
}

async function listOsVersionsWithOptions(request: ListOsVersionsRequest, runtime: Util.RuntimeOptions): ListOsVersionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListOsVersions', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listOsVersions(request: ListOsVersionsRequest): ListOsVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOsVersionsWithOptions(request, runtime);
}

model GetDeviceConfigRequest {
  deviceId?: string(name='DeviceId', description='实例 ID。'),
  date?: string(name='Date', description='查询日期，格式 yyyy-MM-dd'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDeviceConfigResponseBody = {
  deviceConfig?: string(name='DeviceConfig', description='设备配置内容'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceConfigResponseBody(name='body'),
}

async function getDeviceConfigWithOptions(request: GetDeviceConfigRequest, runtime: Util.RuntimeOptions): GetDeviceConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceConfig', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceConfig(request: GetDeviceConfigRequest): GetDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceConfigWithOptions(request, runtime);
}

model GetDedicatedLineRequest {
  dedicatedLineId?: string(name='DedicatedLineId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDedicatedLineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  dedicatedLine?: {
    dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
    isp?: string(name='Isp', description='运营商'),
    bandwidth?: int32(name='Bandwidth', description='宽带（Mbps）'),
    dedicatedLineIp?: string(name='DedicatedLineIp', description='专线IP'),
    dedicatedLineGateway?: string(name='DedicatedLineGateway', description='专线网关'),
    dedicatedLineRole?: string(name='DedicatedLineRole', description='专线角色'),
    deviceId?: string(name='DeviceId', description='关联设备ID'),
    devicePort?: string(name='DevicePort', description='关联设备端口名称'),
    deviceName?: string(name='DeviceName', description='关联设备名称'),
    physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
  }(name='DedicatedLine', description='物理空间专线详情'),
}

model GetDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  body: GetDedicatedLineResponseBody(name='body'),
}

async function getDedicatedLineWithOptions(request: GetDedicatedLineRequest, runtime: Util.RuntimeOptions): GetDedicatedLineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDedicatedLine', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDedicatedLine(request: GetDedicatedLineRequest): GetDedicatedLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDedicatedLineWithOptions(request, runtime);
}

model GetDeviceResourceRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  deviceResourceId?: string(name='DeviceResourceId', description='实例 ID。'),
}

model GetDeviceResourceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceResource?: {
    deviceResourceId?: string(name='DeviceResourceId', description='资源一级ID'),
    setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
    role?: string(name='Role', description='角色'),
    blockNumber?: string(name='BlockNumber', description='组号'),
    deviceNum?: string(name='DeviceNum', description='设备号'),
    vendor?: string(name='Vendor', description='厂商'),
    model?: string(name='Model', description='模型'),
    hostName?: string(name='HostName', description='主机名'),
    sn?: string(name='Sn', description='设备sn号'),
    location?: string(name='Location', description='物理空间位置'),
    managerIp?: string(name='ManagerIp', description='带内管理地址'),
    deliveryIp?: string(name='DeliveryIp', description='交付登录地址'),
    generateConfig?: string(name='GenerateConfig', description='配置生成'),
    configTaskStatus?: string(name='ConfigTaskStatus', description='配置下发状态'),
    config?: string(name='Config', description='设备配置'),
    loopback?: string(name='Loopback', description='loopback地址'),
    interConnection?: string(name='InterConnection', description='设备互联地址'),
    business?: string(name='Business', description='设备业务地址'),
    stack?: boolean(name='Stack', description='堆叠状态'),
  }(name='DeviceResource', description='设备资源'),
}

model GetDeviceResourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceResourceResponseBody(name='body'),
}

async function getDeviceResourceWithOptions(request: GetDeviceResourceRequest, runtime: Util.RuntimeOptions): GetDeviceResourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceResource', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceResource(request: GetDeviceResourceRequest): GetDeviceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceResourceWithOptions(request, runtime);
}

model DeleteDedicatedLineRequest {
  dedicatedLineId?: string(name='DedicatedLineId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteDedicatedLineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedLineResponseBody(name='body'),
}

async function deleteDedicatedLineWithOptions(request: DeleteDedicatedLineRequest, runtime: Util.RuntimeOptions): DeleteDedicatedLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDedicatedLine', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDedicatedLine(request: DeleteDedicatedLineRequest): DeleteDedicatedLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedLineWithOptions(request, runtime);
}

model ListIpRequest {
  instanceId?: string(name='InstanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  ipAddress?: string(name='IpAddress', description='Ip地址'),
  ipBlockId?: string(name='IpBlockId', description='IP地址段的UID'),
}

model ListIpResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
  ip?: [ 
    {
      port?: string(name='Port', description='设备端口名称'),
      deviceMac?: string(name='DeviceMac', description='设备MAC'),
      ipAddress?: string(name='IpAddress', description='IP地址'),
      ipId?: string(name='IpId', description='资源一级ID'),
      status?: string(name='Status', description='状态 using available lock'),
      parentIpBlock?: string(name='ParentIpBlock', description='地址段'),
      createTime?: string(name='CreateTime', description='创建时间'),
      zoneLayer?: [ 
        {
          name?: string(name='Name', description='园区层级名称'),
          value?: string(name='Value', description='园区层级值'),
        }
      ](name='ZoneLayer', description='园区层级'),
      businessTypeName?: string(name='BusinessTypeName', description='业务类型名称'),
      businessTypeId?: string(name='BusinessTypeId', description='业务类型UID'),
      deviceName?: string(name='DeviceName', description='设备名称'),
    }
  ](name='Ip', description='数组，返回示例目录。'),
}

model ListIpResponse = {
  headers: map[string]string(name='headers'),
  body: ListIpResponseBody(name='body'),
}

async function listIpWithOptions(request: ListIpRequest, runtime: Util.RuntimeOptions): ListIpResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListIp', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listIp(request: ListIpRequest): ListIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpWithOptions(request, runtime);
}

model ListConfigurationSpecificationsRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  architecture?: string(name='Architecture', description='架构类型'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  specificationName?: string(name='SpecificationName', description='配置规范名字'),
}

model ListConfigurationSpecificationsResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  configurationSpecification?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      updateTime?: string(name='UpdateTime', description='更新时间'),
      specificationName?: string(name='SpecificationName', description='配置规范名字'),
      architecture?: string(name='Architecture', description='架构'),
      role?: string(name='Role', description='角色'),
      model?: string(name='Model', description='型号'),
      vendor?: string(name='Vendor', description='厂商'),
      specificationContent?: string(name='SpecificationContent', description='规范内容'),
      relatedVariate?: [ string ](name='RelatedVariate', description='相关变量'),
      configurationSpecificationId?: string(name='ConfigurationSpecificationId', description='配置规范id'),
    }
  ](name='ConfigurationSpecification', description='数组，返回示例目录。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
}

model ListConfigurationSpecificationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigurationSpecificationsResponseBody(name='body'),
}

async function listConfigurationSpecificationsWithOptions(request: ListConfigurationSpecificationsRequest, runtime: Util.RuntimeOptions): ListConfigurationSpecificationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListConfigurationSpecifications', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listConfigurationSpecifications(request: ListConfigurationSpecificationsRequest): ListConfigurationSpecificationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigurationSpecificationsWithOptions(request, runtime);
}

model EnableNotificationRequest {
  list?: [ 
    {
      type?: string(name='Type', description='类型'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
      portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
      appId?: string(name='AppId', description='应用ID'),
    }
  ](name='List', description='通知对象'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model EnableNotificationResponseBody = {
  requestId?: string(name='RequestId', description='request id'),
}

model EnableNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableNotificationResponseBody(name='body'),
}

async function enableNotificationWithOptions(request: EnableNotificationRequest, runtime: Util.RuntimeOptions): EnableNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableNotification', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableNotification(request: EnableNotificationRequest): EnableNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableNotificationWithOptions(request, runtime);
}

model UpdateDevicePropertyRequest {
  devicePropertyId?: string(name='DevicePropertyId', description='实例 ID。'),
  propertyFormat?: string(name='PropertyFormat', description='属性格式'),
  propertyContent?: string(name='PropertyContent', description='属性内容'),
  propertyName?: string(name='PropertyName', description='属性名称'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDevicePropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevicePropertyResponseBody(name='body'),
}

async function updateDevicePropertyWithOptions(request: UpdateDevicePropertyRequest, runtime: Util.RuntimeOptions): UpdateDevicePropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceProperty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceProperty(request: UpdateDevicePropertyRequest): UpdateDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDevicePropertyWithOptions(request, runtime);
}

model ListNotificationHistoriesRequest {
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  type?: string(name='Type', description='类型'),
  dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
  appId?: string(name='AppId', description='应用ID'),
}

model ListNotificationHistoriesResponseBody = {
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  requestId?: string(name='RequestId', description='request Id'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  notificationHistories?: [ 
    {
      time?: string(name='Time', description='发送时间'),
      notificationMode?: string(name='NotificationMode', description='发送方式'),
      status?: string(name='Status', description='发送状态'),
      output?: string(name='Output', description='输出内容'),
      message?: string(name='Message', description='发送内容'),
      deviceId?: string(name='DeviceId', description='设备ID'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      notificationGroupId?: string(name='NotificationGroupId', description='通知组ID'),
      notificationGroupName?: string(name='NotificationGroupName', description='通知组名称'),
      dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
    }
  ](name='NotificationHistories', description='数据列表'),
}

model ListNotificationHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNotificationHistoriesResponseBody(name='body'),
}

async function listNotificationHistoriesWithOptions(request: ListNotificationHistoriesRequest, runtime: Util.RuntimeOptions): ListNotificationHistoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListNotificationHistories', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listNotificationHistories(request: ListNotificationHistoriesRequest): ListNotificationHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNotificationHistoriesWithOptions(request, runtime);
}

model DeleteDevicePropertyRequest {
  devicePropertyId?: string(name='DevicePropertyId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteDevicePropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevicePropertyResponseBody(name='body'),
}

async function deleteDevicePropertyWithOptions(request: DeleteDevicePropertyRequest, runtime: Util.RuntimeOptions): DeleteDevicePropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceProperty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceProperty(request: DeleteDevicePropertyRequest): DeleteDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDevicePropertyWithOptions(request, runtime);
}

model ListResourceInstancesRequest {
  instanceId?: string(name='InstanceId'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目资源id'),
}

model ListResourceInstancesResponseBody = {
  logicResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      resourceAttribute?: string(name='ResourceAttribute'),
      keyList?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
          keyAttribute?: string(name='KeyAttribute'),
          keyAction?: string(name='KeyAction'),
          keyDescription?: string(name='KeyDescription'),
        }
      ](name='KeyList'),
    }
  ](name='LogicResource'),
  requestId?: string(name='RequestId', description='请求id'),
}

model ListResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceInstancesResponseBody(name='body'),
}

async function listResourceInstancesWithOptions(request: ListResourceInstancesRequest, runtime: Util.RuntimeOptions): ListResourceInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListResourceInstances', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listResourceInstances(request: ListResourceInstancesRequest): ListResourceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceInstancesWithOptions(request, runtime);
}

model ListIpBlocksRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  instanceId?: string(name='InstanceId'),
  netType?: string(name='NetType', description='网络类型 PRIVATE PUBLIC'),
  treeType?: boolean(name='TreeType', description='是否树状展示地址段'),
  ipBlock?: string(name='IpBlock', description='地址段'),
  ip?: string(name='Ip', description='IP地址'),
  status?: string(name='Status', description='地址段状态'),
  zoneName?: string(name='ZoneName', description='园区名称，NetType为PUBLIC有效'),
  netBusiness?: string(name='NetBusiness', description='公网地址类型，NetType为PUBLIC有效'),
}

model ListIpBlocksResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
  ipBlock?: [ 
    {
      ipBlockId?: string(name='IpBlockId', description='IP地址段UID'),
      ipBlockCode?: string(name='IpBlockCode', description='IP段'),
      parentId?: string(name='ParentId', description='父地址段UID'),
      netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE'),
      status?: string(name='Status', description='状态： using available lock'),
      ownership?: string(name='Ownership', description='IP归属'),
      category?: string(name='Category', description='地址类别 IPV4'),
      description?: string(name='Description', description='备注'),
      backupDeviceName?: string(name='BackupDeviceName', description='备份设备名称'),
      zoneLayer?: [ 
        {
          name?: string(name='Name', description='园区层级名称'),
          value?: string(name='Value', description='园区层级值'),
        }
      ](name='ZoneLayer', description='园区层级'),
      businessTypeId?: string(name='BusinessTypeId', description='业务类型UID'),
      businessTypeName?: string(name='BusinessTypeName', description='业务类型名称'),
      netBusiness?: string(name='NetBusiness', description='公网地址类型 INC GUEST VIP'),
      application?: string(name='Application', description='IP用途'),
      deviceName?: string(name='DeviceName', description='设备名称'),
      zoneName?: string(name='ZoneName', description='园区名称'),
      ipBlocks?: [ string ](name='IpBlocks', description='地址段子段列表'),
    }
  ](name='IpBlock', description='地址段对象'),
}

model ListIpBlocksResponse = {
  headers: map[string]string(name='headers'),
  body: ListIpBlocksResponseBody(name='body'),
}

async function listIpBlocksWithOptions(request: ListIpBlocksRequest, runtime: Util.RuntimeOptions): ListIpBlocksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListIpBlocks', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listIpBlocks(request: ListIpBlocksRequest): ListIpBlocksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpBlocksWithOptions(request, runtime);
}

model ListDeviceResourcesRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  businessType?: string(name='BusinessType', description='业务类型'),
  listType?: string(name='ListType', description='List类型'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
}

model ListDeviceResourcesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  deviceResource?: [ 
    {
      setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
      deviceResourceId?: string(name='DeviceResourceId', description='资源一级ID'),
      role?: string(name='Role', description='角色'),
      blockNumber?: string(name='BlockNumber', description='组号'),
      deviceNumber?: string(name='DeviceNumber', description='设备号'),
      vendor?: string(name='Vendor', description='厂商'),
      model?: string(name='Model', description='模型'),
      hostName?: string(name='HostName', description='主机名'),
      sn?: string(name='Sn', description='设备sn号'),
      configTaskId?: string(name='ConfigTaskId', description='配置任务Id'),
      location?: string(name='Location', description='物理空间位置'),
      managerIp?: string(name='ManagerIp', description='带内管理地址'),
      deliveryIp?: string(name='DeliveryIp', description='交付登录地址'),
      generateConfig?: string(name='GenerateConfig', description='配置生成'),
      configTaskStatus?: string(name='ConfigTaskStatus', description='配置下发状态'),
      config?: string(name='Config', description='设备配置'),
      specification?: string(name='Specification', description='配置规范'),
      params?: string(name='Params', description='配置入参'),
      loopback?: string(name='Loopback', description='loopback地址'),
      interConnection?: string(name='InterConnection', description='设备互联地址'),
      business?: string(name='Business', description='设备业务地址'),
      stack?: boolean(name='Stack', description='堆叠状态'),
    }
  ](name='DeviceResource', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
}

model ListDeviceResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceResourcesResponseBody(name='body'),
}

async function listDeviceResourcesWithOptions(request: ListDeviceResourcesRequest, runtime: Util.RuntimeOptions): ListDeviceResourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceResources', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceResources(request: ListDeviceResourcesRequest): ListDeviceResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceResourcesWithOptions(request, runtime);
}

model ListResourceInformationsRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  architectureId?: string(name='ArchitectureId', description='架构id'),
}

model ListResourceInformationsResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
  resourceInformation?: [ 
    {
      information?: [ 
        {
          key?: string(name='Key', description='键'),
          keyAttribute?: string(name='KeyAttribute', description='键属性'),
          keyAction?: string(name='KeyAction', description='键动作'),
          keyDescription?: string(name='KeyDescription', description='键描述'),
        }
      ](name='Information', description='信息'),
      resourceInformationId?: string(name='ResourceInformationId', description='资源一级ID'),
      resourceAttribute?: string(name='ResourceAttribute', description='资源属性'),
      resourceType?: string(name='ResourceType', description='资源类型'),
    }
  ](name='ResourceInformation', description='数组，返回示例目录。'),
}

model ListResourceInformationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceInformationsResponseBody(name='body'),
}

async function listResourceInformationsWithOptions(request: ListResourceInformationsRequest, runtime: Util.RuntimeOptions): ListResourceInformationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListResourceInformations', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listResourceInformations(request: ListResourceInformationsRequest): ListResourceInformationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceInformationsWithOptions(request, runtime);
}

model ListDeviceFormsRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListDeviceFormsResponseBody = {
  deviceForms?: [ 
    {
      configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
      attributeList?: [ 
        {
          attributeKey?: string(name='AttributeKey', description='设备形态属性主键'),
          attributeName?: string(name='AttributeName', description='设备形态属性名称'),
          attributeRequirement?: boolean(name='AttributeRequirement', description='设备形态属性是否必填'),
          attributeUniqueness?: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一'),
          attributeFormat?: string(name='AttributeFormat', description='设备形态属性值格式'),
          attributeType?: string(name='AttributeType', description='设备形态属性值类型'),
          attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象'),
          attributeTableDisplay?: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见'),
          attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符'),
          attributeQuery?: boolean(name='AttributeQuery', description='前端是否展示对应的查询控件'),
          attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', description='前端查询控件是否支持模糊搜索'),
          attributeBuiltIn?: boolean(name='AttributeBuiltIn', description='设备形态属性是否内置'),
        }
      ](name='AttributeList', description='设备形态属性列表'),
      accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
      detailDisplay?: boolean(name='DetailDisplay', description='是否展示详情'),
      formBuiltIn?: boolean(name='FormBuiltIn', description='设备形态是否内置'),
      uniqueKey?: string(name='UniqueKey', description='设备形态主键'),
      deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
      deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
    }
  ](name='DeviceForms', description='数组，返回示例目录。'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
}

model ListDeviceFormsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceFormsResponseBody(name='body'),
}

async function listDeviceFormsWithOptions(request: ListDeviceFormsRequest, runtime: Util.RuntimeOptions): ListDeviceFormsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceForms', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceForms(request: ListDeviceFormsRequest): ListDeviceFormsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceFormsWithOptions(request, runtime);
}

model GetConfigurationSpecificationRequest {
  configurationSpecificationId?: string(name='ConfigurationSpecificationId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='instanceId'),
}

model GetConfigurationSpecificationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  configurationSpecification?: {
    createTime?: string(name='CreateTime', description='创建时间'),
    configurationSpecificationId?: string(name='ConfigurationSpecificationId', description='配置规范资源ID'),
    updateTime?: string(name='UpdateTime', description='更新时间'),
    specificationName?: string(name='SpecificationName', description='配置规范名字'),
    architecture?: string(name='Architecture', description='架构'),
    role?: string(name='Role', description='角色'),
    mode?: string(name='Mode', description='型号'),
    vendor?: string(name='Vendor', description='厂商'),
    specificationContent?: string(name='SpecificationContent', description='规范内容'),
    relatedVariate?: [ string ](name='RelatedVariate', description='相关变量'),
  }(name='ConfigurationSpecification', description='配置规范对象'),
}

model GetConfigurationSpecificationResponse = {
  headers: map[string]string(name='headers'),
  body: GetConfigurationSpecificationResponseBody(name='body'),
}

async function getConfigurationSpecificationWithOptions(request: GetConfigurationSpecificationRequest, runtime: Util.RuntimeOptions): GetConfigurationSpecificationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetConfigurationSpecification', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getConfigurationSpecification(request: GetConfigurationSpecificationRequest): GetConfigurationSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigurationSpecificationWithOptions(request, runtime);
}

model DeleteScheduleDutyRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleDutyId?: string(name='ScheduleDutyId', description='实例 ID。'),
  typeWorkerList?: [ 
    {
      scheduleTypeId?: string(name='ScheduleTypeId'),
      scheduleTypeName?: string(name='ScheduleTypeName'),
      scheduleWorkerName?: string(name='ScheduleWorkerName'),
    }
  ](name='TypeWorkerList', description='typeWorkerList'),
}

model DeleteScheduleDutyShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleDutyId?: string(name='ScheduleDutyId', description='实例 ID。'),
  typeWorkerListShrink?: string(name='TypeWorkerList', description='typeWorkerList'),
}

model DeleteScheduleDutyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteScheduleDutyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScheduleDutyResponseBody(name='body'),
}

async function deleteScheduleDutyWithOptions(tmpReq: DeleteScheduleDutyRequest, runtime: Util.RuntimeOptions): DeleteScheduleDutyResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteScheduleDutyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.typeWorkerList)) {
    request.typeWorkerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.typeWorkerList, 'TypeWorkerList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScheduleDuty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScheduleDuty(request: DeleteScheduleDutyRequest): DeleteScheduleDutyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduleDutyWithOptions(request, runtime);
}

model UploadScheduleDutyRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleDuty?: [ 
    {
      workDate?: string(name='WorkDate', description='值班表日期'),
      worker?: [ 
        {
          workType?: string(name='WorkType', description='值班表类型'),
          workerName?: [ string ](name='WorkerName', description='值班人员姓名'),
        }
      ](name='Worker', description='worker'),
    }
  ](name='ScheduleDuty', description='scheduleDuty'),
}

model UploadScheduleDutyShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  scheduleDutyShrink?: string(name='ScheduleDuty', description='scheduleDuty'),
}

model UploadScheduleDutyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UploadScheduleDutyResponse = {
  headers: map[string]string(name='headers'),
  body: UploadScheduleDutyResponseBody(name='body'),
}

async function uploadScheduleDutyWithOptions(tmpReq: UploadScheduleDutyRequest, runtime: Util.RuntimeOptions): UploadScheduleDutyResponse {
  Util.validateModel(tmpReq);
  var request = new UploadScheduleDutyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scheduleDuty)) {
    request.scheduleDutyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleDuty, 'ScheduleDuty', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadScheduleDuty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadScheduleDuty(request: UploadScheduleDutyRequest): UploadScheduleDutyResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadScheduleDutyWithOptions(request, runtime);
}

model ListAlarmStatusHistoriesRequest {
  start?: long(name='Start', description='开始时间秒级时间戳'),
  end?: long(name='End', description='结束时间秒级时间戳'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  type?: string(name='Type', description='类型'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
  dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
  appId?: string(name='AppId', description='应用ID'),
}

model ListAlarmStatusHistoriesResponseBody = {
  requestId?: string(name='RequestId', description='request id'),
  alarmStatusHistories?: [ 
    {
      timestamp?: long(name='Timestamp', description='时间戳'),
      value?: string(name='Value', description='数值'),
    }
  ](name='AlarmStatusHistories', description='数据列表'),
}

model ListAlarmStatusHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlarmStatusHistoriesResponseBody(name='body'),
}

async function listAlarmStatusHistoriesWithOptions(request: ListAlarmStatusHistoriesRequest, runtime: Util.RuntimeOptions): ListAlarmStatusHistoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAlarmStatusHistories', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAlarmStatusHistories(request: ListAlarmStatusHistoriesRequest): ListAlarmStatusHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlarmStatusHistoriesWithOptions(request, runtime);
}

model GetSpaceModelRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  spaceModelId?: string(name='SpaceModelId', description='实例 ID。'),
}

model GetSpaceModelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  spaceModel?: {
    spaceModelId?: string(name='SpaceModelId', description='物理空间模型id'),
    status?: string(name='Status', description='模型状态'),
    spaceType?: string(name='SpaceType', description='物理空间类型'),
    createTime?: string(name='CreateTime', description='创建时间'),
    updateTime?: string(name='UpdateTime', description='更新时间'),
    sort?: [ 
      {
        levelName?: string(name='LevelName', description='层级名称'),
        level?: long(name='Level', description='层级'),
      }
    ](name='Sort', description='模型实例'),
  }(name='SpaceModel', description='物理空间模型'),
}

model GetSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  body: GetSpaceModelResponseBody(name='body'),
}

async function getSpaceModelWithOptions(request: GetSpaceModelRequest, runtime: Util.RuntimeOptions): GetSpaceModelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetSpaceModel', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getSpaceModel(request: GetSpaceModelRequest): GetSpaceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpaceModelWithOptions(request, runtime);
}

model CreateDeviceFormRequest {
  deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
  configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
  accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
  detailDisplay?: boolean(name='DetailDisplay', description='是否展示设备详情'),
  uniqueKey?: string(name='UniqueKey', description='设备形态的主键'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateDeviceFormResponseBody = {
  deviceFormId?: string(name='DeviceFormId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceFormResponseBody(name='body'),
}

async function createDeviceFormWithOptions(request: CreateDeviceFormRequest, runtime: Util.RuntimeOptions): CreateDeviceFormResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeviceForm', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeviceForm(request: CreateDeviceFormRequest): CreateDeviceFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceFormWithOptions(request, runtime);
}

model ListPhysicalSpacesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  physicalSpaceIds?: [ string ](name='PhysicalSpaceIds', description='物理空间ID'),
  physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称，支持模糊搜索。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListPhysicalSpacesResponseBody = {
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  physicalSpaces?: [ 
    {
      physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
      physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
      country?: string(name='Country', description='所属国家'),
      province?: string(name='Province', description='所属省份'),
      city?: string(name='City', description='所属城市'),
      address?: string(name='Address', description='具体地址'),
      spaceAbbreviation?: string(name='SpaceAbbreviation', description='缩写'),
      spaceType?: string(name='SpaceType', description='模型'),
      owner?: string(name='Owner', description='负责人'),
      instance?: string(name='Instance', description='实例'),
    }
  ](name='PhysicalSpaces', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  maxResults?: int32(name='MaxResults', description='每页数量。'),
}

model ListPhysicalSpacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPhysicalSpacesResponseBody(name='body'),
}

async function listPhysicalSpacesWithOptions(request: ListPhysicalSpacesRequest, runtime: Util.RuntimeOptions): ListPhysicalSpacesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListPhysicalSpaces', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listPhysicalSpaces(request: ListPhysicalSpacesRequest): ListPhysicalSpacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhysicalSpacesWithOptions(request, runtime);
}

model ListMonitorDataRequest {
  start?: long(name='Start', description='开始时间'),
  end?: long(name='End', description='结束时间'),
  dataType?: string(name='DataType', description='数据类型'),
  dataItem?: string(name='DataItem', description='数据项'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  key?: string(name='Key', description='key'),
  aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
  portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
  dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  appId?: string(name='AppId', description='应用ID'),
}

model ListMonitorDataResponseBody = {
  requestId?: string(name='RequestId', description='Request Id'),
  monitorData?: [ 
    {
      timestamp?: long(name='Timestamp', description='时间戳'),
      value?: string(name='Value', description='数值'),
      dataItem?: string(name='DataItem', description='数据项'),
      key?: string(name='Key', description='key'),
    }
  ](name='MonitorData', description='数据列表'),
}

model ListMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: ListMonitorDataResponseBody(name='body'),
}

async function listMonitorDataWithOptions(request: ListMonitorDataRequest, runtime: Util.RuntimeOptions): ListMonitorDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListMonitorData', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listMonitorData(request: ListMonitorDataRequest): ListMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMonitorDataWithOptions(request, runtime);
}

model CreateResourceInformationRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceAttribute?: string(name='ResourceAttribute', description='资源属性'),
  architectureId?: string(name='ArchitectureId', description='架构id'),
  information?: [ 
    {
      key?: string(name='Key', description='键'),
      keyAttribute?: string(name='KeyAttribute', description='键属性'),
      keyAction?: string(name='KeyAction', description='键动作'),
      keyDescription?: string(name='KeyDescription', description='键描述'),
    }
  ](name='Information', description='信息'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateResourceInformationResponseBody = {
  resourceInformationId?: string(name='ResourceInformationId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateResourceInformationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceInformationResponseBody(name='body'),
}

async function createResourceInformationWithOptions(request: CreateResourceInformationRequest, runtime: Util.RuntimeOptions): CreateResourceInformationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateResourceInformation', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createResourceInformation(request: CreateResourceInformationRequest): CreateResourceInformationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceInformationWithOptions(request, runtime);
}

model UpdateSpaceModelInstanceRequest {
  spaceId?: string(name='SpaceId', description='物理空间id'),
  instance?: string(name='Instance', description='物理空间实例'),
}

model UpdateSpaceModelInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateSpaceModelInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSpaceModelInstanceResponseBody(name='body'),
}

async function updateSpaceModelInstanceWithOptions(request: UpdateSpaceModelInstanceRequest, runtime: Util.RuntimeOptions): UpdateSpaceModelInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSpaceModelInstance', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSpaceModelInstance(request: UpdateSpaceModelInstanceRequest): UpdateSpaceModelInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSpaceModelInstanceWithOptions(request, runtime);
}

model UpdateIpRecordRequest {
  instanceId?: string(name='InstanceId'),
  clientToken?: string(name='ClientToken', description='用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一。只支持 ASCII 字符，且不能超过 64 个字符'),
  ipRecordId?: string(name='IpRecordId', description='资源一级ID'),
  status?: string(name='Status', description='工单状态 running complete fail'),
}

model UpdateIpRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateIpRecordResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIpRecordResponseBody(name='body'),
}

async function updateIpRecordWithOptions(request: UpdateIpRecordRequest, runtime: Util.RuntimeOptions): UpdateIpRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateIpRecord', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateIpRecord(request: UpdateIpRecordRequest): UpdateIpRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpRecordWithOptions(request, runtime);
}

model ReleaseIPRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  ipType?: string(name='IpType', description='ip地址类型'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds', description='deviceResourceIdStr'),
  deviceResourceId?: string(name='DeviceResourceId', description='deviceResourceId'),
}

model ReleaseIPShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  ipType?: string(name='IpType', description='ip地址类型'),
  setupProjectId?: string(name='SetupProjectId', description='建设项目id'),
  deviceResourceIdsShrink?: string(name='DeviceResourceIds', description='deviceResourceIdStr'),
  deviceResourceId?: string(name='DeviceResourceId', description='deviceResourceId'),
}

model ReleaseIPResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReleaseIPResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseIPResponseBody(name='body'),
}

async function releaseIPWithOptions(tmpReq: ReleaseIPRequest, runtime: Util.RuntimeOptions): ReleaseIPResponse {
  Util.validateModel(tmpReq);
  var request = new ReleaseIPShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceResourceIds)) {
    request.deviceResourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceResourceIds, 'DeviceResourceIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseIP', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseIP(request: ReleaseIPRequest): ReleaseIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseIPWithOptions(request, runtime);
}

model DeleteDeviceResourceRequest {
  deviceResourceId?: string(name='DeviceResourceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='instanceId'),
}

model DeleteDeviceResourceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDeviceResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResourceResponseBody(name='body'),
}

async function deleteDeviceResourceWithOptions(request: DeleteDeviceResourceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceResource', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceResource(request: DeleteDeviceResourceRequest): DeleteDeviceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceResourceWithOptions(request, runtime);
}

model GetIpBlockRequest {
  ipBlockId?: string(name='IpBlockId', description='资源ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetIpBlockResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  ipBlock?: {
    ipBlockId?: string(name='IpBlockId', description='IP地址段UID'),
    ipBlockCode?: string(name='IpBlockCode', description='IP段'),
    parentId?: string(name='ParentId', description='父地址段UID'),
    netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE'),
    status?: string(name='Status', description='状态： using available lock'),
    ownership?: string(name='Ownership', description='IP归属'),
    category?: string(name='Category', description='地址类别 IPV4'),
    description?: string(name='Description', description='备注'),
    backupDeviceName?: string(name='BackupDeviceName', description='备份设备名称'),
    zoneLayer?: [ 
      {
        name?: string(name='Name', description='园区层级名称'),
        value?: string(name='Value', description='园区层级值'),
      }
    ](name='ZoneLayer', description='园区层级'),
    businessTypeId?: string(name='BusinessTypeId', description='业务类型UID'),
    businessTypeName?: string(name='BusinessTypeName', description='业务类型名称'),
    netBusiness?: string(name='NetBusiness', description='公网地址类型 INC GUEST VIP'),
    application?: string(name='Application', description='IP用途'),
    deviceName?: string(name='DeviceName', description='设备名称'),
    zoneName?: string(name='ZoneName', description='园区名称'),
  }(name='IpBlock', description='园区类型对象'),
}

model GetIpBlockResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpBlockResponseBody(name='body'),
}

async function getIpBlockWithOptions(request: GetIpBlockRequest, runtime: Util.RuntimeOptions): GetIpBlockResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetIpBlock', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getIpBlock(request: GetIpBlockRequest): GetIpBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpBlockWithOptions(request, runtime);
}

model DeleteIpBlockRequest {
  instanceId?: string(name='InstanceId', description='实例 ID。'),
  ipBlockId?: string(name='IpBlockId', description='资源ID'),
}

model DeleteIpBlockResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteIpBlockResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpBlockResponseBody(name='body'),
}

async function deleteIpBlockWithOptions(request: DeleteIpBlockRequest, runtime: Util.RuntimeOptions): DeleteIpBlockResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteIpBlock', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteIpBlock(request: DeleteIpBlockRequest): DeleteIpBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpBlockWithOptions(request, runtime);
}

model DeleteInspectionTaskRequest {
  taskId?: string(name='TaskId', description='周期性任务的ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteInspectionTaskResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteInspectionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInspectionTaskResponseBody(name='body'),
}

async function deleteInspectionTaskWithOptions(request: DeleteInspectionTaskRequest, runtime: Util.RuntimeOptions): DeleteInspectionTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteInspectionTask', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteInspectionTask(request: DeleteInspectionTaskRequest): DeleteInspectionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInspectionTaskWithOptions(request, runtime);
}

model DeleteConfigurationSpecificationRequest {
  configurationSpecificationId?: string(name='ConfigurationSpecificationId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='instanceId'),
}

model DeleteConfigurationSpecificationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteConfigurationSpecificationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConfigurationSpecificationResponseBody(name='body'),
}

async function deleteConfigurationSpecificationWithOptions(request: DeleteConfigurationSpecificationRequest, runtime: Util.RuntimeOptions): DeleteConfigurationSpecificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteConfigurationSpecification', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteConfigurationSpecification(request: DeleteConfigurationSpecificationRequest): DeleteConfigurationSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConfigurationSpecificationWithOptions(request, runtime);
}

model ListBusinessTypesRequest {
  instanceId?: string(name='InstanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  name?: string(name='Name', description='业务类型名称'),
  reserveNumber?: long(name='ReserveNumber', description='保留地址数目'),
  type?: string(name='Type', description='业务类型大类'),
  zoneType?: string(name='ZoneType', description='绑定的园区类型'),
}

model ListBusinessTypesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
  businessType?: [ 
    {
      updateTime?: string(name='UpdateTime', description='修改时间'),
      createTime?: string(name='CreateTime', description='创建时间'),
      businessTypeId?: string(name='BusinessTypeId', description='资源一级ID'),
      name?: string(name='Name', description='业务类型名称'),
      abbreviation?: string(name='Abbreviation', description='业务类型缩写'),
      mask?: string(name='Mask', description='掩码'),
      gateway?: long(name='Gateway', description='网关地址位置，正数为正数序号，负数为倒数序号'),
      sharing?: string(name='Sharing', description='是否复用 reuse/single'),
      direction?: long(name='Direction', description='分配方向，0表示正向，1表示反向'),
      reserveNumber?: long(name='ReserveNumber', description='保留地址数目'),
      type?: string(name='Type', description='业务类型大类'),
      zoneType?: string(name='ZoneType', description='绑定的园区类型'),
      leaseTime?: string(name='LeaseTime', description='有效时间'),
      vlan?: string(name='Vlan', description='Vlan'),
      actionFlag?: string(name='ActionFlag', description='业务类型地址申请完对应的动作，DHCP表示需要触发DHCP变更'),
    }
  ](name='BusinessType', description='数组，返回示例目录。'),
}

model ListBusinessTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListBusinessTypesResponseBody(name='body'),
}

async function listBusinessTypesWithOptions(request: ListBusinessTypesRequest, runtime: Util.RuntimeOptions): ListBusinessTypesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListBusinessTypes', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listBusinessTypes(request: ListBusinessTypesRequest): ListBusinessTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBusinessTypesWithOptions(request, runtime);
}

model ListSetupProjectsRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  status?: string(name='Status', description='集群名'),
  spaceId?: string(name='SpaceId', description='物理空间id'),
}

model ListSetupProjectsResponseBody = {
  setupProject?: [ 
    {
      progress?: string(name='Progress', description='项目进展'),
      spaceType?: string(name='SpaceType', description='物理空间类型'),
      spaceName?: string(name='SpaceName', description='物理空间名称'),
      archVersion?: string(name='ArchVersion', description='架构版本'),
      architectureId?: string(name='ArchitectureId', description='架构id'),
      packages?: [ 
        {
          role?: string(name='Role', description='角色'),
          deviceNumber?: long(name='DeviceNumber', description='设备号'),
          vendor?: string(name='Vendor', description='厂商'),
          model?: string(name='Model', description='型号'),
        }
      ](name='Packages', description='套餐'),
      deliveryTime?: string(name='DeliveryTime', description='预计交付时间'),
      createTime?: string(name='CreateTime', description='创建时间'),
      spaceId?: string(name='SpaceId', description='物理空间uId'),
      setupProjectId?: string(name='SetupProjectId', description='资源一级ID'),
      nodes?: string(name='Nodes', description='节点'),
      description?: string(name='Description', description='描述'),
    }
  ](name='SetupProject', description='数组，返回示例目录。'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据量'),
}

model ListSetupProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSetupProjectsResponseBody(name='body'),
}

async function listSetupProjectsWithOptions(request: ListSetupProjectsRequest, runtime: Util.RuntimeOptions): ListSetupProjectsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListSetupProjects', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listSetupProjects(request: ListSetupProjectsRequest): ListSetupProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSetupProjectsWithOptions(request, runtime);
}

model ListTasksHistoriesRequest {
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  itemId?: string(name='ItemId', description='巡检项ID'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model ListTasksHistoriesResponseBody = {
  totalCount?: int32(name='TotalCount', description='总记录数。'),
  requestId?: string(name='RequestId', description='请求ID'),
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  inspectionTasks?: [ 
    {
      executionEndTime?: string(name='ExecutionEndTime', description='巡检结束时间'),
      executionBeginTime?: string(name='ExecutionBeginTime', description='巡检开始时间'),
      inspectionResult?: string(name='InspectionResult', description='巡检结果'),
      inspectionAlarmRules?: [ 
        {
          alarmExpression?: string(name='AlarmExpression', description='告警表达式'),
          alarmOperator?: string(name='AlarmOperator', description='告警操作符'),
          alarmValue?: string(name='AlarmValue', description='告警值'),
          actualValue?: string(name='ActualValue', description='告警实际值'),
          alarmLevel?: string(name='AlarmLevel', description='告警级别'),
        }
      ](name='InspectionAlarmRules', description='告警规则'),
      taskId?: string(name='TaskId', description='任务ID'),
    }
  ](name='InspectionTasks', description='数组，返回示例目录。'),
}

model ListTasksHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTasksHistoriesResponseBody(name='body'),
}

async function listTasksHistoriesWithOptions(request: ListTasksHistoriesRequest, runtime: Util.RuntimeOptions): ListTasksHistoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListTasksHistories', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listTasksHistories(request: ListTasksHistoriesRequest): ListTasksHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksHistoriesWithOptions(request, runtime);
}

model UpdateConfigurationSpecificationRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  specificationName?: string(name='SpecificationName', description='配置规范名字'),
  configurationSpecificationId?: string(name='ConfigurationSpecificationId', description='配置规范id'),
  architecture?: string(name='Architecture', description='架构类型'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  specificationContent?: string(name='SpecificationContent', description='配置规范内容'),
  relatedVariate?: [ bytes ](name='RelatedVariate', description='相关变量'),
}

model UpdateConfigurationSpecificationShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  specificationName?: string(name='SpecificationName', description='配置规范名字'),
  configurationSpecificationId?: string(name='ConfigurationSpecificationId', description='配置规范id'),
  architecture?: string(name='Architecture', description='架构类型'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  specificationContent?: string(name='SpecificationContent', description='配置规范内容'),
  relatedVariateShrink?: string(name='RelatedVariate', description='相关变量'),
}

model UpdateConfigurationSpecificationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateConfigurationSpecificationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigurationSpecificationResponseBody(name='body'),
}

async function updateConfigurationSpecificationWithOptions(tmpReq: UpdateConfigurationSpecificationRequest, runtime: Util.RuntimeOptions): UpdateConfigurationSpecificationResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateConfigurationSpecificationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.relatedVariate)) {
    request.relatedVariateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedVariate, 'RelatedVariate', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateConfigurationSpecification', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateConfigurationSpecification(request: UpdateConfigurationSpecificationRequest): UpdateConfigurationSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigurationSpecificationWithOptions(request, runtime);
}

model CreateOsVersionRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  createTime?: string(name='CreateTime', description='创建时间'),
  vendor?: string(name='Vendor', description='厂商'),
  model?: string(name='Model', description='型号'),
  osVersion?: string(name='OsVersion', description='系统版本'),
  status?: string(name='Status', description='状态'),
  fileName?: string(name='FileName', description='文件名'),
  filePath?: string(name='FilePath', description='文件路径'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
}

model CreateOsVersionResponseBody = {
  osVersionId?: string(name='OsVersionId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOsVersionResponseBody(name='body'),
}

async function createOsVersionWithOptions(request: CreateOsVersionRequest, runtime: Util.RuntimeOptions): CreateOsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOsVersion', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOsVersion(request: CreateOsVersionRequest): CreateOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOsVersionWithOptions(request, runtime);
}

model CreateIpBlockRecordRequest {
  instanceId?: string(name='InstanceId'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  title?: string(name='Title', description='工单名称'),
  creator?: string(name='Creator', description='创建人'),
  workNo?: string(name='WorkNo', description='工号'),
  netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE'),
  zoneLayer?: [ 
    {
      name?: string(name='Name', description='园区层级名称'),
      value?: string(name='Value', description='园区层级值'),
    }
  ](name='ZoneLayer', description='园区层级'),
  businessType?: [ 
    {
      name?: string(name='Name', description='地址业务类型名称'),
      number?: long(name='Number', description='地址业务类型数量'),
    }
  ](name='BusinessType', description='地址业务类型'),
  netBusiness?: string(name='NetBusiness', description='公网地址类型 INC GUEST VIP'),
  parentIpBlock?: string(name='ParentIpBlock', description='父段地址'),
  mask?: long(name='Mask', description='申请公网地址的掩码大小'),
  recordType?: string(name='RecordType', description='工单类型 Apply 申请工单 Recycle 释放工单'),
  ipBlockCode?: [ string ](name='IpBlockCode', description='要释放的IP段'),
}

model CreateIpBlockRecordShrinkRequest {
  instanceId?: string(name='InstanceId'),
  clientToken?: string(name='ClientToken', description='幂等参数'),
  title?: string(name='Title', description='工单名称'),
  creator?: string(name='Creator', description='创建人'),
  workNo?: string(name='WorkNo', description='工号'),
  netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE'),
  zoneLayerShrink?: string(name='ZoneLayer', description='园区层级'),
  businessTypeShrink?: string(name='BusinessType', description='地址业务类型'),
  netBusiness?: string(name='NetBusiness', description='公网地址类型 INC GUEST VIP'),
  parentIpBlock?: string(name='ParentIpBlock', description='父段地址'),
  mask?: long(name='Mask', description='申请公网地址的掩码大小'),
  recordType?: string(name='RecordType', description='工单类型 Apply 申请工单 Recycle 释放工单'),
  ipBlockCodeShrink?: string(name='IpBlockCode', description='要释放的IP段'),
}

model CreateIpBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  ipBlockRecordId?: string(name='IpBlockRecordId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
}

model CreateIpBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpBlockRecordResponseBody(name='body'),
}

async function createIpBlockRecordWithOptions(tmpReq: CreateIpBlockRecordRequest, runtime: Util.RuntimeOptions): CreateIpBlockRecordResponse {
  Util.validateModel(tmpReq);
  var request = new CreateIpBlockRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.zoneLayer)) {
    request.zoneLayerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.zoneLayer, 'ZoneLayer', 'json');
  }
  if (!Util.isUnset(tmpReq.businessType)) {
    request.businessTypeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.businessType, 'BusinessType', 'json');
  }
  if (!Util.isUnset(tmpReq.ipBlockCode)) {
    request.ipBlockCodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ipBlockCode, 'IpBlockCode', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIpBlockRecord', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIpBlockRecord(request: CreateIpBlockRecordRequest): CreateIpBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpBlockRecordWithOptions(request, runtime);
}

model UpdateIpBlockRequest {
  instanceId?: string(name='InstanceId'),
  clientToken?: string(name='ClientToken', description='用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一。只支持 ASCII 字符，且不能超过 64 个字符'),
  ipBlockId?: string(name='IpBlockId', description='资源一级ID'),
  businessTypeId?: string(name='BusinessTypeId', description='业务类型UID'),
  deviceName?: string(name='DeviceName', description='设备名称'),
  zoneName?: string(name='ZoneName', description='园区名称'),
  backupDeviceName?: string(name='BackupDeviceName', description='备份设备名称'),
  netBusiness?: string(name='NetBusiness', description='公网地址类型 INC GUEST VIP'),
  ownership?: string(name='Ownership', description='IP归属'),
  application?: string(name='Application', description='IP用途'),
  description?: string(name='Description', description='备注'),
  updateType?: string(name='UpdateType', description='更新类型 update 更新 split 拆分'),
  status?: string(name='Status', description='状态： using available lock'),
}

model UpdateIpBlockResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateIpBlockResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIpBlockResponseBody(name='body'),
}

async function updateIpBlockWithOptions(request: UpdateIpBlockRequest, runtime: Util.RuntimeOptions): UpdateIpBlockResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateIpBlock', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateIpBlock(request: UpdateIpBlockRequest): UpdateIpBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpBlockWithOptions(request, runtime);
}

model CreateDevicePropertyRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  propertyName?: string(name='PropertyName', description='属性名称'),
  propertyKey?: string(name='PropertyKey', description='属性主键'),
  propertyFormat?: string(name='PropertyFormat', description='属性格式'),
  propertyContent?: string(name='PropertyContent', description='属性内容'),
  clientToken?: string(name='ClientToken', description='幂等校验 token'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model CreateDevicePropertyResponseBody = {
  devicePropertyId?: string(name='DevicePropertyId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevicePropertyResponseBody(name='body'),
}

async function createDevicePropertyWithOptions(request: CreateDevicePropertyRequest, runtime: Util.RuntimeOptions): CreateDevicePropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeviceProperty', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeviceProperty(request: CreateDevicePropertyRequest): CreateDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDevicePropertyWithOptions(request, runtime);
}

model UpdateIpBlockRecordRequest {
  instanceId?: string(name='InstanceId'),
  clientToken?: string(name='ClientToken', description='用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一。只支持 ASCII 字符，且不能超过 64 个字符'),
  ipBlockRecordId?: string(name='IpBlockRecordId', description='资源一级ID'),
  status?: string(name='Status', description='工单状态'),
}

model UpdateIpBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateIpBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIpBlockRecordResponseBody(name='body'),
}

async function updateIpBlockRecordWithOptions(request: UpdateIpBlockRecordRequest, runtime: Util.RuntimeOptions): UpdateIpBlockRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateIpBlockRecord', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateIpBlockRecord(request: UpdateIpBlockRecordRequest): UpdateIpBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpBlockRecordWithOptions(request, runtime);
}

model RetryTasksRequest {
  retryTasks?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      scriptId?: string(name='ScriptId', description='脚本ID'),
    }
  ](name='RetryTasks', description='重执行任务的数组'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model RetryTasksShrinkRequest {
  retryTasksShrink?: string(name='RetryTasks', description='重执行任务的数组'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model RetryTasksResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model RetryTasksResponse = {
  headers: map[string]string(name='headers'),
  body: RetryTasksResponseBody(name='body'),
}

async function retryTasksWithOptions(tmpReq: RetryTasksRequest, runtime: Util.RuntimeOptions): RetryTasksResponse {
  Util.validateModel(tmpReq);
  var request = new RetryTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.retryTasks)) {
    request.retryTasksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.retryTasks, 'RetryTasks', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('RetryTasks', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function retryTasks(request: RetryTasksRequest): RetryTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryTasksWithOptions(request, runtime);
}

model GetPhysicalSpaceTopoRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间id'),
  topoType?: string(name='TopoType', description='拓扑类型'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetPhysicalSpaceTopoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  topoData?: {
    updateTime?: string(name='UpdateTime', description='更新时间'),
    links?: [ 
      {
        sourceDeviceId?: string(name='SourceDeviceId', description='源设备id'),
        sourcePort?: string(name='SourcePort', description='源设备端口'),
        targetDeviceId?: string(name='TargetDeviceId', description='目标设备id'),
        targetPort?: string(name='TargetPort', description='目标设备端口'),
        sourceDeviceName?: string(name='SourceDeviceName', description='源设备名'),
        targetDeviceName?: string(name='TargetDeviceName', description='目标设备名'),
      }
    ](name='Links'),
    devices?: [ 
      {
        deviceId?: string(name='DeviceId', description='设备id'),
        deviceRole?: string(name='DeviceRole', description='设备角色'),
        hostName?: string(name='HostName', description='设备主机名'),
        ip?: string(name='Ip', description='设备ip'),
      }
    ](name='Devices'),
  }(name='TopoData', description='拓扑数据'),
}

model GetPhysicalSpaceTopoResponse = {
  headers: map[string]string(name='headers'),
  body: GetPhysicalSpaceTopoResponseBody(name='body'),
}

async function getPhysicalSpaceTopoWithOptions(request: GetPhysicalSpaceTopoRequest, runtime: Util.RuntimeOptions): GetPhysicalSpaceTopoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPhysicalSpaceTopo', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPhysicalSpaceTopo(request: GetPhysicalSpaceTopoRequest): GetPhysicalSpaceTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalSpaceTopoWithOptions(request, runtime);
}

model GetOssPolicyRequest {
  instanceId?: string(name='InstanceId'),
}

model GetOssPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  ossPolicy?: {
    accessId?: string(name='AccessId', description='通行id'),
    policy?: string(name='Policy', description='通行规则'),
    signature?: string(name='Signature', description='签名'),
    directory?: string(name='Directory', description='目录'),
    host?: string(name='Host', description='主机名'),
    expireTime?: string(name='ExpireTime', description='过期时间'),
  }(name='OssPolicy', description='资源上传规则'),
}

model GetOssPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetOssPolicyResponseBody(name='body'),
}

async function getOssPolicyWithOptions(request: GetOssPolicyRequest, runtime: Util.RuntimeOptions): GetOssPolicyResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetOssPolicy', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getOssPolicy(request: GetOssPolicyRequest): GetOssPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOssPolicyWithOptions(request, runtime);
}

model DeleteDeviceFormRequest {
  deviceFormId?: string(name='DeviceFormId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeleteDeviceFormResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceFormResponseBody(name='body'),
}

async function deleteDeviceFormWithOptions(request: DeleteDeviceFormRequest, runtime: Util.RuntimeOptions): DeleteDeviceFormResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceForm', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceForm(request: DeleteDeviceFormRequest): DeleteDeviceFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceFormWithOptions(request, runtime);
}

model UpdateDeviceFormRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
  accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
  attributeList?: [ 
    {
      attributeKey?: string(name='AttributeKey', description='设备形态属性主键'),
      attributeName?: string(name='AttributeName', description='设备形态属性名称'),
      attributeRequirement?: boolean(name='AttributeRequirement', description='设备形态属性是否必填'),
      attributeUniqueness?: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一'),
      attributeFormat?: string(name='AttributeFormat', description='设备形态属性值格式'),
      attributeType?: string(name='AttributeType', description='设备形态属性值类型'),
      attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象'),
      attributeTableDisplay?: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见'),
      attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符'),
      attributeQuery?: boolean(name='AttributeQuery', description='前端展示搜索控件'),
      attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', description='查询支持模糊搜索'),
    }
  ](name='AttributeList', description='设备形态属性列表'),
  detailDisplay?: boolean(name='DetailDisplay', description='是否展示设备详情'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDeviceFormShrinkRequest {
  deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
  configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成'),
  accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置'),
  attributeListShrink?: string(name='AttributeList', description='设备形态属性列表'),
  detailDisplay?: boolean(name='DetailDisplay', description='是否展示设备详情'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDeviceFormResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceFormResponseBody(name='body'),
}

async function updateDeviceFormWithOptions(tmpReq: UpdateDeviceFormRequest, runtime: Util.RuntimeOptions): UpdateDeviceFormResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDeviceFormShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.attributeList)) {
    request.attributeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attributeList, 'AttributeList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceForm', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceForm(request: UpdateDeviceFormRequest): UpdateDeviceFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceFormWithOptions(request, runtime);
}

model UpdateDeviceRequest {
  deviceId?: string(name='DeviceId', description='设备ID'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间'),
  hostName?: string(name='HostName', description='主机名'),
  ip?: string(name='Ip', description='设备IP'),
  sn?: string(name='Sn', description='设备SN'),
  mac?: string(name='Mac', description='设备MAC地址'),
  vendor?: string(name='Vendor', description='设备厂商'),
  model?: string(name='Model', description='设备型号'),
  serviceStatus?: string(name='ServiceStatus', description='设备状态'),
  securityDomain?: string(name='SecurityDomain', description='设备安全域'),
  loginType?: string(name='LoginType', description='登录类型'),
  loginUsername?: string(name='LoginUsername', description='登录账号'),
  loginPassword?: string(name='LoginPassword', description='登录密码'),
  enablePassword?: string(name='EnablePassword', description='enable密码'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP 版本号'),
  snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
  snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
  snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='Auth Protocol'),
  snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='Privacy Passphase'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='Privacy Protocol'),
  extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model UpdateDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceResponseBody(name='body'),
}

async function updateDeviceWithOptions(request: UpdateDeviceRequest, runtime: Util.RuntimeOptions): UpdateDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDevice', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDevice(request: UpdateDeviceRequest): UpdateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceWithOptions(request, runtime);
}

model GetDeviceRequest {
  deviceId?: string(name='DeviceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDeviceResponseBody = {
  device?: {
    deviceId?: string(name='DeviceId', description='设备ID'),
    deviceFormId?: string(name='DeviceFormId', description='设备形态ID'),
    deviceFormName?: string(name='DeviceFormName', description='设备形态名称'),
    physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID'),
    physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称'),
    hostName?: string(name='HostName', description='主机名'),
    ip?: string(name='Ip', description='设备IP'),
    sn?: string(name='Sn', description='设备SN'),
    mac?: string(name='Mac', description='设备MAC地址'),
    vendor?: string(name='Vendor', description='设备厂商'),
    model?: string(name='Model', description='设备型号'),
    securityDomain?: string(name='SecurityDomain', description='设备安全域'),
    serviceStatus?: string(name='ServiceStatus', description='设备状态'),
    loginType?: string(name='LoginType', description='登录类型'),
    loginUsername?: string(name='LoginUsername', description='登录账号'),
    loginPassword?: string(name='LoginPassword', description='登录密码'),
    enablePassword?: string(name='EnablePassword', description='enable密码'),
    snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号'),
    snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community'),
    snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型'),
    snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别'),
    snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名'),
    snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase'),
    snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol'),
    snmpPrivacyPassphase?: string(name='SnmpPrivacyPassphase', description='SNMP Privacy Passphase'),
    snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol'),
    extAttributes?: string(name='ExtAttributes', description='设备额外属性'),
  }(name='Device', description='设备详情'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceResponseBody(name='body'),
}

async function getDeviceWithOptions(request: GetDeviceRequest, runtime: Util.RuntimeOptions): GetDeviceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDevice', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDevice(request: GetDeviceRequest): GetDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceWithOptions(request, runtime);
}

model UpdateSetupProjectRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  setupProjectId?: string(name='SetupProjectId', description='资源一级ID'),
  spaceId?: string(name='SpaceId', description='物理空间uId'),
  description?: string(name='Description', description='描述'),
  architectureId?: string(name='ArchitectureId', description='架构id'),
  deliveryTime?: string(name='DeliveryTime', description='预计交付时间'),
  nodes?: string(name='Nodes', description='节点'),
  packages?: [ 
    {
      role?: string(name='Role', description='角色'),
      deviceNumber?: long(name='DeviceNumber', description='设备号'),
      vendor?: string(name='Vendor', description='厂商'),
      model?: string(name='Model', description='型号'),
    }
  ](name='Packages', description='套餐'),
}

model UpdateSetupProjectShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  setupProjectId?: string(name='SetupProjectId', description='资源一级ID'),
  spaceId?: string(name='SpaceId', description='物理空间uId'),
  description?: string(name='Description', description='描述'),
  architectureId?: string(name='ArchitectureId', description='架构id'),
  deliveryTime?: string(name='DeliveryTime', description='预计交付时间'),
  nodes?: string(name='Nodes', description='节点'),
  packagesShrink?: string(name='Packages', description='套餐'),
}

model UpdateSetupProjectResponseBody = {
  setupProjectName?: string(name='SetupProjectName', description='实例的名称'),
  setupProjectId?: string(name='SetupProjectId', description='资源实例ID，如ECS实例的创建接口CreateInstance应返回InstanceId。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  setupProjectSpecification?: string(name='SetupProjectSpecification', description='实例的规格。'),
}

model UpdateSetupProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSetupProjectResponseBody(name='body'),
}

async function updateSetupProjectWithOptions(tmpReq: UpdateSetupProjectRequest, runtime: Util.RuntimeOptions): UpdateSetupProjectResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSetupProjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.packages)) {
    request.packagesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.packages, 'Packages', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSetupProject', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSetupProject(request: UpdateSetupProjectRequest): UpdateSetupProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSetupProjectWithOptions(request, runtime);
}

model UpdateSpaceModelRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  spaceType?: string(name='SpaceType', description='物理空间类型'),
  spaceModelId?: string(name='SpaceModelId', description='资源uuid'),
  sort?: [ 
    {
      levelName?: string(name='LevelName', description='层级名称'),
      level?: long(name='Level', description='层级'),
    }
  ](name='Sort', description='层级'),
}

model UpdateSpaceModelShrinkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  spaceType?: string(name='SpaceType', description='物理空间类型'),
  spaceModelId?: string(name='SpaceModelId', description='资源uuid'),
  sortShrink?: string(name='Sort', description='层级'),
}

model UpdateSpaceModelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSpaceModelResponseBody(name='body'),
}

async function updateSpaceModelWithOptions(tmpReq: UpdateSpaceModelRequest, runtime: Util.RuntimeOptions): UpdateSpaceModelResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSpaceModelShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sort)) {
    request.sortShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sort, 'Sort', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSpaceModel', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSpaceModel(request: UpdateSpaceModelRequest): UpdateSpaceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSpaceModelWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
  message?: string(name='Message'),
  code?: string(name='Code'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListRegions', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model DeleteSpaceModelRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  spaceModelId?: string(name='SpaceModelId', description='实例 ID。'),
}

model DeleteSpaceModelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpaceModelResponseBody(name='body'),
}

async function deleteSpaceModelWithOptions(request: DeleteSpaceModelRequest, runtime: Util.RuntimeOptions): DeleteSpaceModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSpaceModel', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSpaceModel(request: DeleteSpaceModelRequest): DeleteSpaceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpaceModelWithOptions(request, runtime);
}

model DisableNotificationRequest {
  expiryTime?: string(name='ExpiryTime', description='到期时间'),
  reason?: string(name='Reason', description='关闭原因'),
  list?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      type?: string(name='Type', description='类型'),
      dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
      portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
      appId?: string(name='AppId', description='应用ID'),
    }
  ](name='List', description='关闭通知的对象'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DisableNotificationResponseBody = {
  requestId?: string(name='RequestId', description='request id'),
}

model DisableNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableNotificationResponseBody(name='body'),
}

async function disableNotificationWithOptions(request: DisableNotificationRequest, runtime: Util.RuntimeOptions): DisableNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableNotification', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableNotification(request: DisableNotificationRequest): DisableNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableNotificationWithOptions(request, runtime);
}

model GetDeviceConfigDiffRequest {
  deviceId?: string(name='DeviceId', description='实例 ID。'),
  startDate?: string(name='StartDate', description='查询日期1，格式 yyyy-MM-dd'),
  endDate?: string(name='EndDate', description='查询日期2，格式 yyyy-MM-dd'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetDeviceConfigDiffResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  deviceConfigDiff?: {
    extractDiff?: string(name='ExtractDiff', description='差异提取'),
    totalDiff?: string(name='TotalDiff', description='全量比对'),
  }(name='DeviceConfigDiff'),
}

model GetDeviceConfigDiffResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceConfigDiffResponseBody(name='body'),
}

async function getDeviceConfigDiffWithOptions(request: GetDeviceConfigDiffRequest, runtime: Util.RuntimeOptions): GetDeviceConfigDiffResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDeviceConfigDiff', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDeviceConfigDiff(request: GetDeviceConfigDiffRequest): GetDeviceConfigDiffResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceConfigDiffWithOptions(request, runtime);
}

model GetInspectionTaskRequest {
  taskId?: string(name='TaskId', description='巡检项ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetInspectionTaskResponseBody = {
  space?: string(name='Space', description='物理空间'),
  requestId?: string(name='RequestId', description='请求ID'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  inspectionResult?: string(name='InspectionResult', description='巡检结果'),
  inspectionAlarmRules?: [ 
    {
      expression?: string(name='Expression', description='告警符号'),
      operator?: string(name='Operator', description='告警操作符'),
      value?: string(name='Value', description='告警值'),
      actualValue?: string(name='ActualValue', description='告警实际值'),
      level?: string(name='Level', description='告警级别'),
    }
  ](name='InspectionAlarmRules', description='告警规则'),
  IP?: string(name='IP', description='IP地址'),
  hostName?: string(name='HostName', description='主机名'),
  vendor?: string(name='Vendor', description='厂商'),
  taskStatus?: string(name='TaskStatus', description='任务状态'),
  itemId?: string(name='ItemId', description='巡检项ID'),
  executionEndTime?: string(name='ExecutionEndTime', description='巡检结束时间'),
  executionBeginTime?: string(name='ExecutionBeginTime', description='巡检开始时间'),
  model?: [ string ](name='Model', description='型号'),
  itemName?: string(name='ItemName', description='巡检项名字'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  scriptId?: string(name='ScriptId', description='模板ID'),
  taskId?: string(name='TaskId', description='任务ID'),
}

model GetInspectionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetInspectionTaskResponseBody(name='body'),
}

async function getInspectionTaskWithOptions(request: GetInspectionTaskRequest, runtime: Util.RuntimeOptions): GetInspectionTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetInspectionTask', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getInspectionTask(request: GetInspectionTaskRequest): GetInspectionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInspectionTaskWithOptions(request, runtime);
}

model ListAlarmStatusRequest {
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  space?: string(name='Space', description='物理空间'),
  deviceForm?: string(name='DeviceForm', description='设备形态'),
  status?: string(name='Status', description='告警状态'),
  deviceId?: string(name='DeviceId', description='设备ID'),
  monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
  type?: string(name='Type', description='数据类型'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  dedicatedLineName?: string(name='DedicatedLineName', description='专线名称'),
  region?: string(name='Region', description='设备所属地域'),
}

model ListAlarmStatusResponseBody = {
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  alarmStatus?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID'),
      collectionTime?: string(name='CollectionTime', description='检测时间'),
      receiveTime?: string(name='ReceiveTime', description='接收时间'),
      alarmRule?: string(name='AlarmRule', description='命中告警规则'),
      alarmStatus?: string(name='AlarmStatus', description='告警状态'),
      result?: string(name='Result', description='采集结果'),
      abnormalDataItem?: string(name='AbnormalDataItem', description='异常数据项'),
      uniqueKey?: string(name='UniqueKey', description='索引'),
      responseCode?: string(name='ResponseCode', description='采集状态码'),
      resourceDevice?: {
        hostName?: string(name='HostName', description='设备名'),
      }(name='ResourceDevice', description='设备'),
      monitorItem?: {
        monitorItemName?: string(name='MonitorItemName', description='监控项名称'),
      }(name='MonitorItem', description='监控项'),
      firstAbnormalTime?: string(name='FirstAbnormalTime', description='首次异常时间'),
      notificationSwitch?: {
        reason?: string(name='Reason', description='关闭原因'),
        expiryTime?: string(name='ExpiryTime', description='关闭到期时间'),
      }(name='NotificationSwitch', description='告警开关配置'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID'),
      aggregateData?: {
        aggregateDataName?: string(name='AggregateDataName', description='聚合数据名称'),
        dataItem?: string(name='DataItem', description='数据项'),
      }(name='AggregateData', description='聚合数据'),
      dedicatedLineId?: string(name='DedicatedLineId', description='专线ID'),
      dedicatedLine?: {
        dedicatedLineName?: string(name='DedicatedLineName', description='专线名称'),
      }(name='DedicatedLine', description='专线'),
      portCollectionId?: string(name='PortCollectionId', description='端口集ID'),
      portCollection?: {
        portCollectionName?: string(name='PortCollectionName', description='端口集名称'),
      }(name='PortCollection', description='端口集'),
      agentIp?: string(name='AgentIp', description='采集探针IP'),
      appId?: string(name='AppId', description='应用ID'),
      resourceApp?: {
        domain?: string(name='Domain', description='监控域名'),
        appId?: string(name='AppId', description='应用ID'),
        port?: string(name='Port', description='端口'),
        type?: string(name='Type', description='资源类型'),
        securityDomain?: string(name='SecurityDomain', description='所属探针'),
      }(name='ResourceApp', description='应用资源'),
    }
  ](name='AlarmStatus', description='告警状态列表'),
  statistics?: [ 
    {
      count?: long(name='Count', description='数量'),
      status?: string(name='Status', description='告警状态'),
    }
  ](name='Statistics', description='告警状态统计'),
}

model ListAlarmStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlarmStatusResponseBody(name='body'),
}

async function listAlarmStatusWithOptions(request: ListAlarmStatusRequest, runtime: Util.RuntimeOptions): ListAlarmStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAlarmStatus', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAlarmStatus(request: ListAlarmStatusRequest): ListAlarmStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlarmStatusWithOptions(request, runtime);
}

model ListArchitectureAttributeRequest {
  instanceId?: string(name='InstanceId'),
  architectureId?: string(name='ArchitectureId', description='架构id'),
  role?: string(name='Role', description='角色'),
  vendor?: string(name='Vendor', description='厂商'),
}

model ListArchitectureAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  architecture?: [ 
    {
      role?: [ string ](name='Role', description='角色'),
      vendor?: [ string ](name='Vendor', description='厂商'),
      model?: [ string ](name='Model', description='型号'),
    }
  ](name='Architecture', description='架构对象'),
}

model ListArchitectureAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ListArchitectureAttributeResponseBody(name='body'),
}

async function listArchitectureAttributeWithOptions(request: ListArchitectureAttributeRequest, runtime: Util.RuntimeOptions): ListArchitectureAttributeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListArchitectureAttribute', '2020-08-25', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listArchitectureAttribute(request: ListArchitectureAttributeRequest): ListArchitectureAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listArchitectureAttributeWithOptions(request, runtime);
}

model DeleteOsVersionRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  osVersionId?: string(name='OsVersionId', description='实例 ID。'),
}

model DeleteOsVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOsVersionResponseBody(name='body'),
}

async function deleteOsVersionWithOptions(request: DeleteOsVersionRequest, runtime: Util.RuntimeOptions): DeleteOsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteOsVersion', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteOsVersion(request: DeleteOsVersionRequest): DeleteOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOsVersionWithOptions(request, runtime);
}

model DeleteScheduleTypeRequest {
  scheduleTypeId?: string(name='ScheduleTypeId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='instanceId'),
}

model DeleteScheduleTypeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteScheduleTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScheduleTypeResponseBody(name='body'),
}

async function deleteScheduleTypeWithOptions(request: DeleteScheduleTypeRequest, runtime: Util.RuntimeOptions): DeleteScheduleTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScheduleType', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScheduleType(request: DeleteScheduleTypeRequest): DeleteScheduleTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduleTypeWithOptions(request, runtime);
}

model DeletePhysicalSpaceRequest {
  physicalSpaceId?: string(name='PhysicalSpaceId', description='实例 ID。'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model DeletePhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeletePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePhysicalSpaceResponseBody(name='body'),
}

async function deletePhysicalSpaceWithOptions(request: DeletePhysicalSpaceRequest, runtime: Util.RuntimeOptions): DeletePhysicalSpaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePhysicalSpace', '2020-08-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePhysicalSpace(request: DeletePhysicalSpaceRequest): DeletePhysicalSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePhysicalSpaceWithOptions(request, runtime);
}

