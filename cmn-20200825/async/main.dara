/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cmn';
  @version = '2020-08-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Agent {
  agentId?: string(name='AgentId'),
  agentName?: string(name='AgentName'),
  agentVersion?: string(name='AgentVersion'),
  cpuUsage?: string(name='CpuUsage'),
  diskUsage?: string(name='DiskUsage'),
  gmtModify?: string(name='GmtModify'),
  ip?: string(name='Ip'),
  kernelVersion?: string(name='KernelVersion'),
  memoryUsage?: string(name='MemoryUsage'),
  securityDomain?: string(name='SecurityDomain'),
  status?: string(name='Status'),
}

model AgentsTask {
  actionType?: string(name='ActionType'),
  agentType?: string(name='AgentType'),
  agentsTaskId?: string(name='AgentsTaskId'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  params?: string(name='Params'),
  status?: string(name='Status'),
}

model AggregateData {
  aggregateDataDescription?: string(name='AggregateDataDescription'),
  aggregateDataId?: string(name='AggregateDataId'),
  aggregateDataName?: string(name='AggregateDataName'),
  aggregateModeList?: [ string ](name='AggregateModeList'),
  dataItem?: string(name='DataItem'),
  deviceIdList?: [ string ](name='DeviceIdList'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  isAllDevice?: int32(name='IsAllDevice'),
  monitorItemId?: string(name='MonitorItemId'),
}

model AlarmOverview {
  alarmOverviewId?: string(name='AlarmOverviewId', example='ao-cd9qef1w3dfv'),
  alarmOverviewName?: string(name='AlarmOverviewName', example='Example Name'),
  conditionList?: [ 
    {
      conditionName?: string(name='ConditionName', example='AlarmStatus'),
      conditionValue?: string(name='ConditionValue', example='WARNING'),
    }
  ](name='ConditionList'),
  serialNumber?: int32(name='SerialNumber', example='0'),
}

model AtomicStep {
  description?: string(name='Description'),
  input?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Input'),
  output?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Output'),
  stepId?: string(name='StepId'),
  stepName?: string(name='StepName'),
  stepType?: string(name='StepType'),
}

model BusinessType {
  abbr?: string(name='Abbr', example='abbr'),
  actionFlag?: string(name='ActionFlag', example='DHCP'),
  businessTypeId?: string(name='BusinessTypeId'),
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  direction?: long(name='Direction', example='0'),
  gateway?: long(name='Gateway', example='0'),
  leaseTime?: string(name='LeaseTime', example='1440'),
  mask?: string(name='Mask', example='24'),
  name?: string(name='Name', example='互联地址'),
  reserveNumber?: long(name='ReserveNumber', example='0'),
  sharing?: string(name='Sharing', example='reuse/single'),
  type?: string(name='Type', example='other'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  vlan?: string(name='Vlan', example='100'),
  zoneType?: string(name='ZoneType', example='办公区'),
}

model CliTask {
  agentIp?: string(name='AgentIp'),
  cliTaskId?: string(name='CliTaskId'),
  command?: string(name='Command'),
  deviceId?: string(name='DeviceId'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  output?: string(name='Output'),
  protocol?: string(name='Protocol'),
  responseCode?: string(name='ResponseCode'),
  result?: string(name='Result'),
  sessionId?: string(name='SessionId'),
  status?: string(name='Status'),
  timeout?: int32(name='Timeout'),
}

model ConfigurationSpecification {
  architecture?: string(name='Architecture', example='5.0'),
  configurationSpecificationId?: string(name='ConfigurationSpecificationId', example='xxxyyy'),
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  model?: string(name='Model', example='3601'),
  relatedVariate?: [ string ](name='RelatedVariate'),
  role?: string(name='Role', example='DSW'),
  specificationContent?: string(name='SpecificationContent', example='{{hostname}}'),
  specificationName?: string(name='SpecificationName', example='ConfigurationSpecificationName'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  vendor?: string(name='Vendor', example='Alibaba'),
}

model ConfigurationVariate {
  comment?: string(name='Comment', example='项目变量'),
  configurationVariateId?: string(name='ConfigurationVariateId'),
  createTime?: string(name='CreateTime'),
  formatFunction?: string(name='FormatFunction', example='def main():'),
  updateTime?: string(name='UpdateTime'),
  variateName?: string(name='VariateName', example='project'),
}

model ConnectionPolicy {
  algorithm?: string(name='Algorithm', example='笛卡尔互联'),
  connectionPolicyId?: string(name='ConnectionPolicyId'),
  createTime?: string(name='CreateTime'),
  downlinkDeviceId?: string(name='DownlinkDeviceId', example='1e0rlfc3358e8h8f'),
  downlinkModuleId?: string(name='DownlinkModuleId', example='1e0rlfc3358e8h8f'),
  id?: string(name='Id', example='1e0rlfc3358e8h8f'),
  linkCount?: long(name='LinkCount', example='2'),
  name?: string(name='Name', example='pswtoasw'),
  networkArchitectureIterationId?: string(name='NetworkArchitectureIterationId', example='1e0rlfc3358e8h8f'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  uplinkDeviceId?: string(name='UplinkDeviceId', example='1e0rlfc3358e8h8f'),
  uplinkModelId?: string(name='UplinkModelId', example='1e0rlfc3358e8h8f'),
}

model DataView {
  dataViewChartList?: [
    DataViewChart
  ](name='DataViewChartList'),
  dataViewDescription?: string(name='DataViewDescription'),
  dataViewId?: string(name='DataViewId'),
  dataViewName?: string(name='DataViewName'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
}

model DataViewChart {
  chartType?: string(name='ChartType'),
  dataViewId?: string(name='DataViewId'),
  dataViewSource?: string(name='DataViewSource'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  grid?: string(name='Grid'),
}

model DedicatedLine {
  bandwidth?: int32(name='Bandwidth'),
  deviceId?: string(name='DeviceId'),
  devicePort?: string(name='DevicePort'),
  isp?: string(name='Isp'),
  lineGateway?: string(name='LineGateway'),
  lineId?: string(name='LineId'),
  lineIp?: string(name='LineIp'),
  lineRole?: string(name='LineRole'),
}

model Device {
  accountType?: string(name='AccountType'),
  accountVersion?: string(name='AccountVersion'),
  authPassPhrase?: string(name='AuthPassPhrase'),
  authProtocol?: string(name='AuthProtocol'),
  community?: string(name='Community'),
  deviceForm?: string(name='DeviceForm'),
  deviceId?: string(name='DeviceId'),
  deviceIp?: string(name='DeviceIp'),
  deviceMac?: string(name='DeviceMac'),
  deviceSn?: string(name='DeviceSn'),
  hostname?: string(name='Hostname'),
  model?: string(name='Model'),
  privacyPassPhrase?: string(name='PrivacyPassPhrase'),
  privacyProtocol?: string(name='PrivacyProtocol'),
  securityDomain?: string(name='SecurityDomain'),
  securityLevel?: string(name='SecurityLevel'),
  space?: string(name='Space'),
  sshAccount?: string(name='SshAccount'),
  sshPassword?: string(name='SshPassword'),
  status?: string(name='Status'),
  telnetAccount?: string(name='TelnetAccount'),
  telnetPassword?: string(name='TelnetPassword'),
  userName?: string(name='UserName'),
  vendor?: string(name='Vendor'),
}

model DeviceForm {
  accountConfig?: string(name='AccountConfig'),
  configCompare?: string(name='ConfigCompare'),
  formId?: string(name='FormId'),
  formName?: string(name='FormName'),
  propertiesList?: [
    DeviceFormProperty
  ](name='PropertiesList'),
}

model DeviceFormProperty {
  content?: string(name='Content'),
  keyword?: string(name='Keyword'),
  placeholder?: boolean(name='Placeholder'),
  required?: boolean(name='Required'),
  searchSupported?: boolean(name='SearchSupported'),
  sequence?: int32(name='Sequence'),
  tableVisible?: boolean(name='TableVisible'),
  uniqueness?: boolean(name='Uniqueness'),
  valueReference?: string(name='ValueReference'),
  valueSource?: string(name='ValueSource'),
  valueType?: string(name='ValueType'),
}

model DeviceProperty {
  content?: string(name='Content'),
  deviceForm?: string(name='DeviceForm'),
  format?: string(name='Format'),
  nameCn?: string(name='NameCn'),
  nameEn?: string(name='NameEn'),
  propertyId?: string(name='PropertyId'),
}

model DeviceResource {
  archId?: string(name='ArchId', example='archIdxxxyyy'),
  businessType?: string(name='BusinessType', example='LOOPBACK、BUSINESS、  INTERCONNECTION'),
  businessTypeId?: string(name='BusinessTypeId', example='businessTypeId'),
  businessTypeParams?: string(name='BusinessTypeParams', example='{}'),
  createTime?: string(name='CreateTime', example='2020-02-01'),
  data?: string(name='Data', example='zzz'),
  deviceResource?: [ 
    {
      blockNumber?: string(name='BlockNumber'),
      business?: string(name='Business'),
      config?: string(name='Config'),
      configGenerate?: boolean(name='ConfigGenerate'),
      configTaskStatus?: string(name='ConfigTaskStatus'),
      deliveryIp?: string(name='DeliveryIp'),
      deviceNumber?: string(name='DeviceNumber'),
      deviceResourceId?: string(name='DeviceResourceId'),
      hostName?: string(name='HostName'),
      interConnection?: string(name='InterConnection'),
      location?: string(name='Location'),
      loopback?: string(name='Loopback'),
      managerIp?: string(name='ManagerIp'),
      model?: string(name='Model'),
      role?: string(name='Role'),
      setupProjectId?: string(name='SetupProjectId'),
      sn?: string(name='Sn'),
      stack?: boolean(name='Stack'),
      vendor?: string(name='Vendor'),
    }
  ](name='DeviceResource'),
  deviceResourceId?: string(name='DeviceResourceId', example='deviceResourceId315'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds'),
  downloadType?: string(name='DownloadType', example='CONNECTION'),
  ipType?: string(name='IpType', example='Loopback'),
  listType?: string(name='ListType', example='NORMAL、APPLY、RELEASE'),
  loopbackPort?: string(name='LoopbackPort', example='1'),
  netLocation?: string(name='NetLocation', example='[]'),
  setupProjectId?: string(name='SetupProjectId', example='xxx_zzz'),
  type?: string(name='Type', example='LOCATION、HOSTNAME、IP_ADDRESS、  CONFIGURATION_GENERATOR'),
}

model DeviceTask {
  deviceId?: string(name='DeviceId'),
  deviceIp?: string(name='DeviceIp'),
  deviceName?: string(name='DeviceName'),
  deviceTaskId?: string(name='DeviceTaskId'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  output?: string(name='Output'),
  params?: string(name='Params'),
  responseCode?: string(name='ResponseCode'),
  result?: string(name='Result'),
  scriptId?: string(name='ScriptId'),
  scriptVersion?: string(name='ScriptVersion'),
  status?: string(name='Status'),
  templateId?: string(name='TemplateId'),
  templateName?: string(name='TemplateName'),
}

model Event {
  alarmStatus?: string(name='AlarmStatus', example='WARNING'),
  count?: long(name='Count', example='10'),
  createTime?: string(name='CreateTime', example='2021-10-01 01:00:00'),
  deviceId?: string(name='DeviceId', example='device-dcfv2fob0g'),
  eventName?: string(name='EventName', example='探针掉线事件'),
  eventObject?: string(name='EventObject', example='xxx设备'),
  eventObjectId?: string(name='EventObjectId', example='device-12345'),
  eventType?: string(name='EventType', example='AGENT_EVENT'),
  message?: string(name='Message', example='xxx事件发生，请关注'),
  resourceDevice?: {
    hostName?: string(name='HostName', example='ASW-1'),
    physicalSpace?: string(name='PhysicalSpace', example='杭州X空间'),
  }(name='ResourceDevice'),
  templateId?: string(name='TemplateId', example='temp-1dcvf2911wdc'),
  updateTime?: string(name='UpdateTime', example='2021-10-01 01:00:00'),
}

model EventDefinition {
  createTime?: string(name='CreateTime', example='2021-10-01 00:00:00'),
  eventId?: string(name='EventId', example='e-12dc0qfv13df0'),
  eventName?: string(name='EventName', example='探针掉线事件'),
  eventType?: string(name='EventType', example='AGENT_TYPE'),
  templateId?: string(name='TemplateId', example='temp-12dc0qfv13df0'),
  updateTime?: string(name='UpdateTime', example='2021-10-01 00:00:00'),
}

model InspectionItem {
  inspectionCrontab?: string(name='InspectionCrontab'),
  itemDescription?: string(name='ItemDescription'),
  itemId?: string(name='ItemId'),
  itemName?: string(name='ItemName'),
}

model InspectionScript {
  inspectionAlarmRules?: [ 
    {
      alarmExpression?: string(name='AlarmExpression'),
      alarmLevel?: string(name='AlarmLevel'),
      alarmOperator?: string(name='AlarmOperator'),
      alarmValue?: string(name='AlarmValue'),
    }
  ](name='InspectionAlarmRules'),
  inspectionCrontab?: string(name='InspectionCrontab'),
  itemDescription?: string(name='ItemDescription'),
  itemId?: string(name='ItemId'),
  itemName?: string(name='ItemName'),
  model?: string(name='Model'),
  role?: string(name='Role'),
  script?: string(name='Script'),
  scriptId?: string(name='ScriptId'),
  scriptStatus?: string(name='ScriptStatus'),
  vendor?: string(name='Vendor'),
}

model InspectionTask {
  deviceId?: string(name='DeviceId'),
  errorCode?: string(name='ErrorCode'),
  executionBeginTime?: string(name='ExecutionBeginTime'),
  executionEndTime?: string(name='ExecutionEndTime'),
  hostname?: string(name='Hostname'),
  ip?: string(name='IP'),
  inspectionAlarmRules?: [ 
    {
      actualValue?: string(name='ActualValue'),
      expression?: string(name='Expression'),
      level?: string(name='Level'),
      operator?: string(name='Operator'),
      value?: string(name='Value'),
    }
  ](name='InspectionAlarmRules'),
  inspectionResult?: string(name='InspectionResult'),
  itemId?: string(name='ItemId'),
  itemName?: string(name='ItemName'),
  model?: string(name='Model'),
  role?: string(name='Role'),
  space?: string(name='Space'),
  taskStatus?: string(name='TaskStatus'),
  templateId?: string(name='TemplateId'),
  vendor?: string(name='Vendor'),
}

model Ip {
  businessTypeId?: string(name='BusinessTypeId', example='123'),
  businessTypeName?: string(name='BusinessTypeName', example='互联地址'),
  createTime?: string(name='CreateTime'),
  deviceMac?: string(name='DeviceMac', example='10:11:10:10:10:10'),
  deviceName?: string(name='DeviceName', example='ASW-1'),
  ipAddress?: string(name='IpAddress', example='10.0.0.1'),
  ipId?: string(name='IpId'),
  ipName?: string(name='IpName'),
  parentIpBlock?: string(name='ParentIpBlock', example='10.0.0.0/8'),
  port?: string(name='Port', example='vlan100'),
  status?: string(name='Status', example='using'),
  zoneLayer?: [ 
    {
      name?: string(name='Name', example='小型园区'),
      value?: string(name='Value', example='西安-百城'),
    }
  ](name='ZoneLayer'),
}

model IpBlock {
  application?: string(name='Application', example='员工出口IP'),
  backupDeviceName?: string(name='BackupDeviceName', example='ASW-2'),
  block?: string(name='Block', example='10.0.0.0'),
  businessTypeId?: string(name='BusinessTypeId', example='asdaasd'),
  category?: string(name='Category', example='IPV4'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  deviceName?: string(name='DeviceName', example='ASW-1'),
  ipBlockId?: string(name='IpBlockId'),
  mask?: string(name='Mask', example='8'),
  netBusiness?: string(name='NetBusiness', example='INC'),
  netType?: string(name='NetType', example='24'),
  ownership?: string(name='Ownership', example='阿里'),
  parentId?: string(name='ParentId', example='父地址段'),
  reserveParentBlock?: string(name='ReserveParentBlock', example='true'),
  resourceGroupId?: string(name='ResourceGroupId'),
  updateType?: string(name='UpdateType', example='update'),
  zoneLayer?: [ 
    {
      name?: string(name='Name', example='小型园区'),
      value?: string(name='Value', example='西安-百城'),
    }
  ](name='ZoneLayer'),
  zoneName?: string(name='ZoneName', example='西溪园区'),
}

model IpBlockRecord {
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  creator?: long(name='Creator', example='张三'),
  description?: string(name='Description', example='""'),
  detail?: [ 
    {
      businessTypeName?: string(name='BusinessTypeName', example='互联地址'),
      deviceName?: string(name='DeviceName', example='ASW-1'),
      gateway?: string(name='Gateway', example='10.0.0.1'),
      parentIpBlocks?: [ string ](name='ParentIpBlocks'),
      zoneLayer?: [ 
        {
          name?: string(name='Name', example='小型园区'),
          value?: string(name='Value', example='西安-百城'),
        }
      ](name='ZoneLayer'),
    }
  ](name='Detail'),
  ipBlockCode?: [ string ](name='IpBlockCode'),
  ipBlockRecordId: string(name='IpBlockRecordId', example='adaieaoweif_s3834'),
  netType?: string(name='NetType', example='PRIVATE'),
  recordType?: string(name='RecordType', example='Apply'),
  status?: string(name='Status', example='running'),
  title?: string(name='Title', example='申请xx地址'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  workNo?: string(name='WorkNo', example='123'),
  zoneName?: string(name='ZoneName', example='西安-百城'),
}

model IpRecord {
  businessTypeName?: string(name='BusinessTypeName', example='互联地址'),
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  creator?: string(name='Creator', example='张三'),
  description?: string(name='Description', example='备注'),
  detail?: [ 
    {
      deviceMac?: string(name='DeviceMac', example='10:10:10:10:10:10'),
      deviceName?: string(name='DeviceName', example='ASW-1'),
      gateway?: string(name='Gateway', example='10.0.0.1'),
      ip?: string(name='Ip', example='10.0.0.1'),
      parentIpBlocks?: [ string ](name='ParentIpBlocks'),
      port?: string(name='Port', example='TE-1'),
      remoteDeviceName?: string(name='RemoteDeviceName', example='PSW-1'),
      remoteIp?: string(name='RemoteIp', example='10.0.0.2'),
      remotePort?: string(name='RemotePort', example='TE-1'),
      zoneLayer?: [ 
        {
          name?: string(name='Name', example='小型园区'),
          value?: string(name='Value', example='西安百城'),
        }
      ](name='ZoneLayer'),
    }
  ](name='Detail'),
  ipBlock?: string(name='IpBlock', example='10.0.0.0/8'),
  ipCode?: [ string ](name='IpCode'),
  ipRecordId?: string(name='IpRecordId', example='adaieaoweif_s3834'),
  recodeType?: string(name='RecodeType', example='Apply'),
  status?: string(name='Status', example='running'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  zoneName?: string(name='ZoneName', example='西安百城'),
}

model ModelToRole {
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  id?: string(name='Id', example='1e0rlfc3358e8h8f'),
  model?: string(name='Model', example='CE6001'),
  modelToRoleId?: string(name='ModelToRoleId'),
  networkArchitectureIterationId?: string(name='NetworkArchitectureIterationId', example='1e0rlfc3358e8h8f'),
  role?: string(name='Role', example='ASW'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  vendor?: string(name='Vendor', example='huawei'),
}

model Module {
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  device?: {
    count?: long(name='Count', example='2'),
    createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
    deviceCount?: long(name='DeviceCount', example='2'),
    deviceRole?: string(name='DeviceRole', example='ASW'),
    deviceX?: string(name='DeviceX', example='2.222'),
    deviceY?: string(name='DeviceY', example='1.222'),
    id?: string(name='Id', example='xxxxxx'),
    role?: string(name='Role', example='ASW'),
    updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
    x?: string(name='X', example='2.222'),
    y?: string(name='Y', example='1.222'),
  }(name='Device'),
  id?: string(name='Id', example='1e0rlfc3358e8h8f'),
  maxCount?: long(name='MaxCount', example='10'),
  minCount?: long(name='MinCount', example='1'),
  moduleDetails?: [ 
    {
      deviceDetails?: [ 
        {
          orderNumber?: long(name='OrderNumber', example='2'),
        }
      ](name='DeviceDetails'),
      orderNumber?: long(name='OrderNumber', example='2'),
    }
  ](name='ModuleDetails'),
  moduleId?: string(name='ModuleId'),
  moduleType?: string(name='ModuleType', example='根模块/单角色模块/组合模块'),
  name?: string(name='Name', example='asw-2*25G'),
  parentModuleId?: string(name='ParentModuleId', example='1e0rlfc3358e8h8f'),
  stack?: boolean(name='Stack', example='true'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
}

model MonitorItem {
  analysisCode?: string(name='AnalysisCode'),
  collectionType?: string(name='CollectionType'),
  config?: string(name='Config'),
  enable?: int32(name='Enable', minimum=0, maximum=1),
  execInterval?: string(name='ExecInterval'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  monitorItemDescription?: string(name='MonitorItemDescription'),
  monitorItemId?: string(name='MonitorItemId'),
  monitorItemName?: string(name='MonitorItemName'),
  securityDomain?: string(name='SecurityDomain'),
}

model NetworkArchitecture {
  archVersionIterationId?: string(name='ArchVersionIterationId', example='1e0rlfc3358e8h8f'),
  availabe?: boolean(name='Availabe', example='true'),
  children?: [ string ](name='Children'),
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  description?: string(name='Description', example='5.0架构'),
  deviceNumber?: long(name='DeviceNumber', example='1'),
  groupNumber?: long(name='GroupNumber', example='1'),
  id?: string(name='Id', example='1e0rlfc3358e8h8f'),
  name?: string(name='Name', example='5.0'),
  networkArchitectureId?: string(name='NetworkArchitectureId'),
  role?: string(name='Role', example='ASW'),
  selected?: boolean(name='Selected', example='true'),
  stack?: boolean(name='Stack', example='true'),
  status?: string(name='Status', example='USED、UNUSED、DEFINNIG'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  version?: string(name='Version', example='V1'),
}

model NotificationGroup {
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  notificationGroupDescription?: string(name='NotificationGroupDescription'),
  notificationGroupId?: string(name='NotificationGroupId'),
  notificationGroupName?: string(name='NotificationGroupName'),
  notificationGroupType?: string(name='NotificationGroupType'),
  webhook?: string(name='Webhook'),
}

model Order {
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  orderId?: string(name='OrderId'),
  output?: string(name='Output'),
  params?: string(name='Params'),
  schemeId?: string(name='SchemeId'),
  schemeName?: string(name='SchemeName'),
  status?: string(name='Status'),
  title?: string(name='Title'),
}

model OrderStep {
  displayMethod?: string(name='DisplayMethod'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  jobKwargs?: string(name='JobKwargs'),
  jobMessage?: string(name='JobMessage'),
  jobReturnStatus?: string(name='JobReturnStatus'),
  jobReturnValues?: string(name='JobReturnValues'),
  jobSystem?: string(name='JobSystem'),
  orderId?: string(name='OrderId'),
  orderStepId?: string(name='OrderStepId'),
  realNextStep?: string(name='RealNextStep'),
  restriction?: [ 
    {
      label?: string(name='Label'),
      value?: string(name='Value'),
    }
  ](name='Restriction'),
  stepName?: string(name='StepName'),
  stepStatus?: string(name='StepStatus'),
  stepTitle?: string(name='StepTitle'),
  stepType?: string(name='StepType'),
}

model OsVersion {
  accessId?: string(name='AccessId', example='accessId'),
  createTime?: string(name='CreateTime', example='2020-02-01'),
  directory?: string(name='Directory', example='/sdkajd'),
  expireTime?: string(name='ExpireTime', example='2020-02-01'),
  fileName?: string(name='FileName', example='file'),
  filePath?: string(name='FilePath', example='/filePath'),
  host?: string(name='Host', example='daldk'),
  model?: string(name='Model', example='5750'),
  osVersion?: string(name='OsVersion', example='1.0'),
  osVersionId?: string(name='OsVersionId', example='osVersionId'),
  policy?: string(name='Policy', example='sjfoae'),
  signature?: string(name='Signature', example='dkfja'),
  status?: string(name='Status', example='USED'),
  vendor?: string(name='Vendor', example='HUAWEI'),
}

model PhysicalSpace {
  address?: string(name='Address'),
  city?: string(name='City'),
  country?: string(name='Country'),
  province?: string(name='Province'),
  spaceId?: string(name='SpaceId'),
  spaceName?: string(name='SpaceName'),
}

model PhysicalSpaceDto {
  address?: string(name='Address'),
  children?: [
    PhysicalSpaceDto
  ](name='Children'),
  city?: string(name='City'),
  country?: string(name='Country'),
  fullParentPath?: string(name='FullParentPath'),
  instance?: string(name='Instance'),
  owner?: string(name='Owner'),
  parentUid?: string(name='ParentUid'),
  physicalSpaceId?: string(name='PhysicalSpaceId'),
  physicalSpaceName?: string(name='PhysicalSpaceName'),
  province?: string(name='Province'),
  remark?: string(name='Remark'),
  securityDomainList?: [ string ](name='SecurityDomainList'),
  spaceAbbreviation?: string(name='SpaceAbbreviation'),
  spaceType?: string(name='SpaceType'),
}

model Port {
  deviceId?: string(name='DeviceId'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  portCollectionId?: string(name='PortCollectionId'),
  portName?: string(name='PortName'),
}

model PortCollection {
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  portCollectionDescription?: string(name='PortCollectionDescription'),
  portCollectionId?: string(name='PortCollectionId'),
  portCollectionName?: string(name='PortCollectionName'),
  portList?: [
    Port
  ](name='PortList'),
}

model ResourceInformation {
  architectureId?: string(name='ArchitectureId', example='architectureId'),
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  information?: [ 
    {
      key?: string(name='Key', example='ip'),
      keyAction?: string(name='KeyAction', example='/xxx/zzz'),
      keyAttribute?: string(name='KeyAttribute', example='IP地址'),
      keyDescription?: string(name='KeyDescription', example='IP地址'),
    }
  ](name='Information'),
  resourceAttribute?: string(name='ResourceAttribute', example='6510'),
  resourceInformationId?: string(name='ResourceInformationId'),
  resourceType?: string(name='ResourceType', example='CMDB'),
  setupProjectId?: string(name='SetupProjectId', example='adaieaoweif_s3834'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
}

model ScheduleDuty {
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  endDate?: string(name='EndDate', example='2020-12-22'),
  scheduleDutyId?: string(name='ScheduleDutyId'),
  scheduleTypeIds?: [ string ](name='ScheduleTypeIds'),
  startDate?: string(name='StartDate', example='2020-12-22'),
  typeWorkerList?: [ 
    {
      scheduleTypeId?: string(name='ScheduleTypeId', example='scheduleTypeIdcccc'),
      scheduleWorkerName?: [ string ](name='ScheduleWorkerName'),
    }
  ](name='TypeWorkerList'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  workDate?: string(name='WorkDate', example='2020-12-22'),
  workType?: string(name='WorkType', example='夜班'),
  workerId?: string(name='WorkerId', example='123456'),
  workerName?: string(name='WorkerName', example='张三'),
}

model ScheduleType {
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  key?: string(name='Key', example='1234567'),
  relatedWorker?: [ string ](name='RelatedWorker'),
  scheduleTypeId?: string(name='ScheduleTypeId', example='scheduleTypeIdxxx'),
  status?: string(name='Status', example='xxx'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  value?: string(name='Value', example='张三'),
}

model ScheduleWorker {
  createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
  scheduleWorkerId?: string(name='ScheduleWorkerId', example='scheduleWorkerId'),
  updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  workerContact?: string(name='WorkerContact', example='135'),
  workerId?: string(name='WorkerId', example='1234567'),
  workerName?: string(name='WorkerName', example='张三'),
}

model Scheme {
  category?: string(name='Category'),
  content?: string(name='Content'),
  description?: string(name='Description'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  input?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Input'),
  output?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Output'),
  schemeId?: string(name='SchemeId'),
  schemeName?: string(name='SchemeName'),
  status?: string(name='Status'),
  view?: string(name='View'),
}

model Script {
  content?: string(name='Content'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  input?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Input'),
  output?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Output'),
  rules?: [
    ScriptRule
  ](name='Rules'),
  scriptId?: string(name='ScriptId'),
  templateId?: string(name='TemplateId'),
  versionId?: string(name='VersionId'),
}

model ScriptHistory {
  comment?: string(name='Comment'),
  content?: string(name='Content'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  input?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Input'),
  output?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Output'),
  scriptId?: string(name='ScriptId'),
  versionId?: string(name='VersionId'),
}

model ScriptRule {
  arch?: string(name='Arch'),
  domain?: string(name='Domain'),
  model?: string(name='Model'),
  os?: string(name='Os'),
  role?: string(name='Role'),
  ruleId?: string(name='RuleId'),
  scriptId?: string(name='ScriptId'),
  vendor?: string(name='Vendor'),
}

model SetupProject {
  archId?: string(name='ArchId', example='xxxyyy'),
  archVersion?: string(name='ArchVersion', example='5.0'),
  architectureId?: string(name='ArchitectureId', example='archId'),
  createTime?: string(name='CreateTime', example='2020-02-01'),
  deliveryTime?: string(name='DeliveryTime', example='2021-03-27 00:00:00'),
  description?: string(name='Description', example='建设交付项目'),
  nodes?: string(name='Nodes', example='[]'),
  packages?: [ 
    {
      deviceNumber?: string(name='DeviceNumber', example='1'),
      model?: string(name='Model', example='6510'),
      role?: string(name='Role', example='DSW'),
      vendor?: string(name='Vendor', example='Ruijie'),
    }
  ](name='Packages'),
  setupProjectId?: string(name='SetupProjectId', example='xxxyyy'),
  setupProjectName?: string(name='SetupProjectName', example='Project'),
  spaceId?: string(name='SpaceId', example='xxxyyy'),
  spaceName?: string(name='SpaceName', example='大型园区'),
  spaceType?: string(name='SpaceType', example='园区'),
  status?: string(name='Status', example='USED'),
}

model SpaceModel {
  createTime?: string(name='CreateTime', example='2020-02-01'),
  instance?: string(name='Instance', example='{}'),
  operateType?: string(name='OperateType', example='CMDB'),
  sort?: {
    level?: long(name='Level', example='2'),
    levelName?: string(name='LevelName', example='核心机房'),
  }(name='Sort'),
  spaceId?: string(name='SpaceId', example='spaceIdxxxyyy'),
  spaceModel?: {
    createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
    sort?: {
      level?: long(name='Level', example='1'),
      levleName?: string(name='LevleName', example='园区'),
    }(name='Sort'),
    spaceModelId?: string(name='SpaceModelId', example='xxx_yyy'),
    spaceType?: string(name='SpaceType', example='园区'),
    status?: string(name='Status', example='LOCK'),
    updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
  }(name='SpaceModel'),
  spaceModelId?: string(name='SpaceModelId', example='spaceModelIdsdad'),
  spaceModelName?: string(name='SpaceModelName', example='2020-02-01'),
  spaceType?: string(name='SpaceType', example='园区'),
  status?: string(name='Status', example='USE'),
}

model SubscriptionItem {
  alarmStatus?: string(name='AlarmStatus'),
  language?: string(name='Language'),
  monitorItemId?: string(name='MonitorItemId'),
  notificationGroupId?: string(name='NotificationGroupId'),
  notificationMode?: string(name='NotificationMode'),
  recoveryNotice?: int32(name='RecoveryNotice'),
  subscriptionItemId?: string(name='SubscriptionItemId'),
  subscriptionType?: string(name='SubscriptionType'),
  suppressionStrategy?: string(name='SuppressionStrategy'),
  triggerTimes?: int32(name='TriggerTimes'),
}

model Task {
  category?: string(name='Category'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  params?: string(name='Params'),
  responseCode?: string(name='ResponseCode'),
  result?: string(name='Result'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
  templateId?: string(name='TemplateId'),
  templateName?: string(name='TemplateName'),
}

model TaskLog {
  funcName?: string(name='FuncName'),
  gmtCreate?: string(name='GmtCreate'),
  level?: string(name='Level'),
  lineNo?: int32(name='LineNo'),
  logId?: string(name='LogId'),
  message?: string(name='Message'),
  taskId?: string(name='TaskId'),
}

model Template {
  category?: string(name='Category'),
  comment?: string(name='Comment'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModify?: string(name='GmtModify'),
  input?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Input'),
  output?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      sample?: string(name='Sample'),
      type?: string(name='Type'),
    }
  ](name='Output'),
  templateName?: string(name='TemplateName'),
  templateType?: string(name='TemplateType'),
}

model TimePeriod {
  cronExpression?: string(name='CronExpression'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  source?: string(name='Source'),
  timePeriodDescription?: string(name='TimePeriodDescription'),
  timePeriodId?: string(name='TimePeriodId'),
  timePeriodName?: string(name='TimePeriodName'),
}

model ZoneType {
  createTime?: string(name='CreateTime'),
  name?: string(name='Name', example='办公区'),
  zoneTypeId?: string(name='ZoneTypeId'),
  zoneTypeLayer?: [ 
    {
      mask?: long(name='Mask', example='24'),
      name?: string(name='Name', example='办公区'),
    }
  ](name='ZoneTypeLayer'),
  zoneTypeName?: string(name='ZoneTypeName'),
}

model ApplyIPRequest {
  businessTypeId?: string(name='BusinessTypeId', example='xxxyyy', position='Query'),
  businessTypeParams?: string(name='BusinessTypeParams', example='{}', position='Query'),
  deviceResourceId?: string(name='DeviceResourceId', example='deviceResourceId', position='Query'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds', shrink='json', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  ipType: string(name='IpType', example='LOOPBACK_SEGMENT、INTERCONNECTION_SEGMENT  LOOPBACK、BUSINESS、  INTERCONNECTION', position='Query'),
  loopbackPort?: string(name='LoopbackPort', example='0', position='Query'),
  netLocation?: string(name='NetLocation', example='{}', position='Query'),
  setupProjectId: string(name='SetupProjectId', example='xxxyyy', position='Query'),
}

model ApplyIPResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApplyIPResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyIPResponseBody(name='body'),
}

async function applyIP(request: ApplyIPRequest): ApplyIPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyIP', 'POST', '/', 'json', false, 'json', request);
}

model AutoDutyRequest {
  dutyBatch?: string(name='DutyBatch', position='Body'),
  dutyName?: string(name='DutyName', position='Body'),
  endDate?: string(name='EndDate', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
}

model AutoDutyResponseBody = {
  requestId?: string(name='RequestId'),
}

model AutoDutyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AutoDutyResponseBody(name='body'),
}

async function autoDuty(request: AutoDutyRequest): AutoDutyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AutoDuty', 'POST', '/', 'json', true, 'form', request);
}

model CloseEventRequest {
  eventName: string(name='EventName', example='探针掉线事件', position='Body'),
  eventObjectId: string(name='EventObjectId', example='agent', position='Body'),
  eventType: string(name='EventType', example='AGENT_EVENT', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Body'),
}

model CloseEventResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='86AD5F3A-5D42-5104-82B2-BB75255B29B5'),
}

model CloseEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseEventResponseBody(name='body'),
}

async function closeEvent(request: CloseEventRequest): CloseEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseEvent', 'POST', '/', 'json', true, 'form', request);
}

model CreateConfigurationSpecificationRequest {
  architecture: string(name='Architecture', example='5.0', position='Body'),
  clientToken?: string(name='ClientToken', example='clientToken', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  model: string(name='Model', example='3601', position='Body'),
  relatedVariate?: [ bytes ](name='RelatedVariate', shrink='json', position='Body'),
  role: string(name='Role', example='DSW', position='Body'),
  specificationContent: string(name='SpecificationContent', example='{{hostname}}', position='Body'),
  specificationName: string(name='SpecificationName', example='ConfigurationSpecificationName', position='Body'),
  vendor: string(name='Vendor', example='Alibaba', position='Body'),
}

model CreateConfigurationSpecificationResponseBody = {
  configurationSpecificationId?: string(name='ConfigurationSpecificationId', example='adaieaoweif_s3834'),
  requestId?: string(name='RequestId', example='requestId'),
}

model CreateConfigurationSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConfigurationSpecificationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createConfigurationSpecification(request: CreateConfigurationSpecificationRequest): CreateConfigurationSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConfigurationSpecification', 'POST', '/', 'json', true, 'form', request);
}

model CreateConfigurationVariateRequest {
  clientToken?: string(name='ClientToken', example='clientToken', position='Body'),
  comment?: string(name='Comment', example='项目变量', position='Body'),
  formatFunction?: string(name='FormatFunction', example='def main():', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  variateName: string(name='VariateName', description='代表资源名称的资源属性字段', example='variateName', position='Body'),
}

model CreateConfigurationVariateResponseBody = {
  configurationVariateId?: string(name='ConfigurationVariateId', example='configurationVariateId'),
  requestId?: string(name='RequestId', example='requestId'),
}

model CreateConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConfigurationVariateResponseBody(name='body'),
}

async function createConfigurationVariate(request: CreateConfigurationVariateRequest): CreateConfigurationVariateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConfigurationVariate', 'POST', '/', 'json', true, 'form', request);
}

model CreateDedicatedLineRequest {
  bandwidth: int32(name='Bandwidth', example='100', minimum=1, maximum=3000000, position='Body'),
  clientToken: string(name='ClientToken', example='e33320bc-7b29-4d0b-abe1-f15804c1c567', position='Body'),
  contact?: string(name='Contact', example='张三', position='Body'),
  dedicatedLineGateway?: string(name='DedicatedLineGateway', example='111.111.xxx.xxx', position='Body'),
  dedicatedLineIp?: string(name='DedicatedLineIp', example='111.111.xxx.xxx', position='Body'),
  dedicatedLineRole: string(name='DedicatedLineRole', example='主', position='Body'),
  description?: string(name='Description', example='备注', position='Body'),
  deviceId?: string(name='DeviceId', example='device-evve560juend5owh', position='Body'),
  devicePort?: string(name='DevicePort', example='GigabitEthernet1/0/0', position='Body'),
  expirationDate?: string(name='ExpirationDate', example='2022-06-14 04:00:00', position='Body'),
  extAttributes?: string(name='ExtAttributes', example='{"Location":"cdc"}', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  isp?: string(name='Isp', example='电信', position='Body'),
  ispFormId?: string(name='IspFormId', example='space_isp_form-garigikip9zrog', position='Body'),
  ispId?: string(name='IspId', example='isp-dhyw2lxfpcs80d9', position='Body'),
  keyword?: string(name='Keyword', example='测试专线', position='Body'),
  onlineDate?: string(name='OnlineDate', example='2022-06-13 12:00:00', position='Body'),
  phone?: string(name='Phone', example='133xxxxxxxx', position='Body'),
  physicalSpaceId: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Body'),
}

model CreateDedicatedLineResponseBody = {
  dedicatedLineId?: string(name='DedicatedLineId', example='space_isp-6dk5xpoyoopr6obf'),
  requestId?: string(name='RequestId', example='8de935f6-90c7-444e-a2b4-bb4185153435'),
}

model CreateDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedLineResponseBody(name='body'),
}

async function createDedicatedLine(request: CreateDedicatedLineRequest): CreateDedicatedLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedLine', 'POST', '/', 'json', true, 'form', request);
}

model CreateDeviceRequest {
  clientToken: string(name='ClientToken', example='9388616d-2d78-48c9-87b7-3d1083c91a79', position='Body'),
  deviceFormId: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf', position='Body'),
  enablePassword?: string(name='EnablePassword', description='enable密码', example='pass****', position='Body'),
  extAttributes?: string(name='ExtAttributes', description='设备额外属性(JSON)', example='{"role":"ASW"}', position='Body'),
  hostName?: string(name='HostName', description='主机名', example='HZYT_USG6620_A', position='Body'),
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-xxx', position='Query'),
  ip?: string(name='Ip', description='设备IP', example='10.17.101.1', position='Body'),
  loginPassword?: string(name='LoginPassword', description='设备TELNET账号', example='123456', position='Body'),
  loginType?: string(name='LoginType', description='设备SSH登录账号', example='SSH,TELNET', position='Body'),
  loginUsername?: string(name='LoginUsername', description='设备SSH登录密码', example='admin', position='Body'),
  mac?: string(name='Mac', description='设备MAC地址', example='b8:27:eb:34:3b:a2', position='Body'),
  model?: string(name='Model', description='设备型号', example='USG6620', position='Body'),
  physicalSpaceId: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Body'),
  securityDomain?: string(name='SecurityDomain', description='设备安全域', example='IT', position='Body'),
  serviceStatus?: string(name='ServiceStatus', description='设备状态', example='online', position='Body'),
  sn?: string(name='Sn', description='设备SN', example='210235951910K7000016', position='Body'),
  snmpAccountType?: string(name='SnmpAccountType', description='账号类型', example='get', position='Body'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号', example='v3', position='Body'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase', example='123456', position='Body'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol', example='MD5', position='Body'),
  snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community', example='123456', position='Body'),
  snmpPrivacyPassphrase?: string(name='SnmpPrivacyPassphrase', description='SNMP Privacy Passphrase', example='145c44bb2f34610154e84dbe2a7ade04', position='Body'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol', example='DES', position='Body'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='安全级别', example='AUTH_PRIV', position='Body'),
  snmpUsername?: string(name='SnmpUsername', description='用户名', example='admin', position='Body'),
  vendor?: string(name='Vendor', description='设备厂商', example='Huawei', position='Body'),
}

model CreateDeviceResponseBody = {
  deviceId?: string(name='DeviceId', example='device-evve560juend5owh'),
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevice', 'POST', '/', 'json', true, 'form', request);
}

model CreateDeviceFormRequest {
  accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置', example='true', position='Body'),
  clientToken: string(name='ClientToken', example='c6aaac41-8cfa-4952-bb1c-1ad9617ab23f', position='Body'),
  configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成', example='true', position='Body'),
  detailDisplay?: boolean(name='DetailDisplay', example='true', position='Body'),
  deviceFormName: string(name='DeviceFormName', description='设备形态名称', example='网络设备', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  relatedDeviceFormId?: string(name='RelatedDeviceFormId', example='form-u4ilnhu64h026lrf', position='Body'),
  resourceUse?: string(name='ResourceUse', example='ASSET', position='Body'),
  script?: string(name='Script', example='def func(dev):\\n    \\n    return datetime.datetime.strptime(datetime.datetime.now(), \\"%Y\\")', position='Body'),
  uniqueKey?: string(name='UniqueKey', example='SN', position='Body'),
}

model CreateDeviceFormResponseBody = {
  deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf'),
  requestId?: string(name='RequestId', example='6d439436-ddde-4f26-aaf6-0470099b5c35'),
}

model CreateDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceFormResponseBody(name='body'),
}

async function createDeviceForm(request: CreateDeviceFormRequest): CreateDeviceFormResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceForm', 'POST', '/', 'json', true, 'form', request);
}

model CreateDevicePropertyRequest {
  clientToken: string(name='ClientToken', example='a611d038-2047-4e5b-91f2-f184c295df45', position='Body'),
  deviceFormId: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  propertyContent: string(name='PropertyContent', example='{   "H3C": [     "H3C S6800",     "S6850-56HF"   ],   "Huawei": [     "CE6851-48S6Q"   ] }', position='Body'),
  propertyFormat: string(name='PropertyFormat', example='JSON', position='Body'),
  propertyKey: string(name='PropertyKey', example='device_model', position='Body'),
  propertyName: string(name='PropertyName', example='厂商型号', position='Body'),
}

model CreateDevicePropertyResponseBody = {
  devicePropertyId?: string(name='DevicePropertyId', example='property-z50wex75a1lkx7vx'),
  requestId?: string(name='RequestId', example='1f598491-db6d-4276-a83a-3b5f57d4a4e1'),
}

model CreateDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDevicePropertyResponseBody(name='body'),
}

async function createDeviceProperty(request: CreateDevicePropertyRequest): CreateDevicePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceProperty', 'POST', '/', 'json', true, 'form', request);
}

model CreateDevicesRequest {
  clientToken: string(name='ClientToken', position='Body'),
  deviceFormId: string(name='DeviceFormId', position='Body'),
  deviceParamModelList?: [ 
    {
      enablePassword?: string(name='EnablePassword'),
      extAttributes?: string(name='ExtAttributes'),
      hostName?: string(name='HostName'),
      ip?: string(name='Ip'),
      loginPassword?: string(name='LoginPassword'),
      loginType?: string(name='LoginType'),
      loginUsername?: string(name='LoginUsername'),
      mac?: string(name='Mac'),
      model?: string(name='Model'),
      physicalSpaceName: string(name='PhysicalSpaceName'),
      securityDomain?: string(name='SecurityDomain'),
      serviceStatus?: string(name='ServiceStatus'),
      sn?: string(name='Sn'),
      snmpAccountType?: string(name='SnmpAccountType'),
      snmpAccountVersion?: string(name='SnmpAccountVersion'),
      snmpAuthPassphrase?: string(name='SnmpAuthPassphrase'),
      snmpAuthProtocol?: string(name='SnmpAuthProtocol'),
      snmpCommunity?: string(name='SnmpCommunity'),
      snmpPrivacyPassphrase?: string(name='SnmpPrivacyPassphrase'),
      snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol'),
      snmpSecurityLevel?: string(name='SnmpSecurityLevel'),
      snmpUsername?: string(name='SnmpUsername'),
      vendor?: string(name='Vendor'),
    }
  ](name='DeviceParamModelList', shrink='json', position='Body'),
  instanceId: string(name='InstanceId', position='Query'),
}

model CreateDevicesResponseBody = {
  deviceId?: string(name='DeviceId', example='device-evve560juend5owh'),
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model CreateDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDevicesResponseBody(name='body'),
}

async function createDevices(request: CreateDevicesRequest): CreateDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevices', 'POST', '/', 'json', true, 'form', request);
}

model CreateEventDefinitionRequest {
  clientToken: string(name='ClientToken', position='Body'),
  eventName: string(name='EventName', position='Body'),
  eventType: string(name='EventType', position='Body'),
  instanceId: string(name='InstanceId', position='Body'),
  templateId?: string(name='TemplateId', position='Body'),
}

model CreateEventDefinitionResponseBody = {
  eventId?: string(name='EventId'),
  requestId?: string(name='RequestId'),
}

model CreateEventDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEventDefinitionResponseBody(name='body'),
}

async function createEventDefinition(request: CreateEventDefinitionRequest): CreateEventDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEventDefinition', 'POST', '/', 'json', true, 'form', request);
}

model CreateLinkJobRequest {
  autoConfirm?: boolean(name='AutoConfirm', description='是否自动确认', position='Body'),
  doubleConvertStrategy?: string(name='DoubleConvertStrategy', description='双端链路转换策略', position='Body'),
  instanceId: string(name='InstanceId', position='Query'),
  jobId?: string(name='JobId', description='任务ID', position='Body'),
  singleStrategy?: string(name='SingleStrategy', description='单端链路发现策略', position='Body'),
}

model CreateLinkJobResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model CreateLinkJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLinkJobResponseBody(name='body'),
}

async function createLinkJob(request: CreateLinkJobRequest): CreateLinkJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLinkJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateMonitorItemRequest {
  alarmRuleList?: [ 
    {
      alarmStatus: string(name='AlarmStatus', example='CRITICAL'),
      expression: string(name='Expression', example='>'),
      value: string(name='Value', example='100'),
      variable: string(name='Variable', example='avg_latency'),
    }
  ](name='AlarmRuleList', shrink='json', position='Body'),
  analysisCode: string(name='AnalysisCode', example='/**\\n** Parsing logic\\n** @param: output :Collect raw data\\n\\n1.3.6.1.4.1.12356.101.13.2.1.1.12\\n**/\\n\\n\\nfunction parse(output){\\n  \\tvar results = {}', position='Body'),
  clientToken: string(name='ClientToken', example='c6aaac41-8cfa-4952-bb1c-1ad9617ab23f', position='Body'),
  collectionType: string(name='CollectionType', example='SNMP', position='Body'),
  config: string(name='Config', example='{\\"Type\\":\\"snmpwalk\\"}', maxLength=255, position='Body'),
  dataItem?: string(name='DataItem', example='avg_latency', position='Body'),
  deviceForm?: string(name='DeviceForm', position='Body'),
  effective: int32(name='Effective', example='1', minimum=0, maximum=1, position='Body'),
  execInterval: int32(name='ExecInterval', example='60', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  monitorItemDescription: string(name='MonitorItemDescription', maxLength=255, position='Body'),
  monitorItemName: string(name='MonitorItemName', maxLength=255, position='Body'),
  securityDomain: string(name='SecurityDomain', example='*', position='Body'),
  type: string(name='Type', example='SINGLE', position='Body'),
}

model CreateMonitorItemResponseBody = {
  monitorItemId?: string(name='MonitorItemId', example='m-c4k8xcdlxxc1x0p2'),
  requestId?: string(name='RequestId', description='Id of the request', example='BC7E67AB-7653-505E-BB78-45486035E137'),
}

model CreateMonitorItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMonitorItemResponseBody(name='body'),
}

async function createMonitorItem(request: CreateMonitorItemRequest): CreateMonitorItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorItem', 'POST', '/', 'json', true, 'form', request);
}

model CreateOsVersionRequest {
  bootPatch?: string(name='BootPatch', example='{"name":"xxx/yyy"}', position='Body'),
  clientToken: string(name='ClientToken', example='clientToken', position='Body'),
  createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='createTime', position='Body'),
  featurePatch?: string(name='FeaturePatch', example='{"name":"xxx/yyy"}', position='Body'),
  fileName: string(name='FileName', description='文件名', example='zzz', position='Body'),
  filePath: string(name='FilePath', description='文件路径', example='/xxx/zzz', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  model: string(name='Model', description='型号', example='6510', position='Body'),
  osVersion: string(name='OsVersion', description='系统版本', example='1.0', position='Body'),
  status: string(name='Status', description='状态', example='USED、UNUSED', position='Body'),
  systemPatch?: string(name='SystemPatch', example='{"name":"xxx/yyy"}', position='Body'),
  vendor: string(name='Vendor', description='厂商', example='Ruijie', position='Body'),
}

model CreateOsVersionResponseBody = {
  osVersionId?: string(name='OsVersionId', example='osVersionId'),
  requestId?: string(name='RequestId', example='requestId'),
}

model CreateOsVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOsVersionResponseBody(name='body'),
}

async function createOsVersion(request: CreateOsVersionRequest): CreateOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOsVersion', 'POST', '/', 'json', true, 'form', request);
}

model CreatePhysicalSpaceRequest {
  address?: string(name='Address', example='文一西路969号', position='Body'),
  city?: string(name='City', example='杭州市', position='Body'),
  clientToken: string(name='ClientToken', example='8e61b7dd-fc6c-44e4-bb9c-427b0a09a6f3', position='Body'),
  country?: string(name='Country', example='中国', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  owner?: string(name='Owner', example='张三', position='Body'),
  parentUid?: string(name='ParentUid', example='space-twnepeeloclxxxxx', position='Body'),
  physicalSpaceName: string(name='PhysicalSpaceName', example='阿里巴巴西溪园区', position='Body'),
  province?: string(name='Province', example='浙江省', position='Body'),
  remark?: string(name='Remark', position='Body'),
  securityDomainList?: [ string ](name='SecurityDomainList', shrink='json', position='Body'),
  spaceAbbreviation?: string(name='SpaceAbbreviation', example='yq', position='Body'),
  spaceType?: string(name='SpaceType', example='园区', position='Body'),
}

model CreatePhysicalSpaceResponseBody = {
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4'),
  requestId?: string(name='RequestId', example='a1c7e2b4-174e-4557-a96d-d4cbf83988a6'),
}

model CreatePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePhysicalSpaceResponseBody(name='body'),
}

async function createPhysicalSpace(request: CreatePhysicalSpaceRequest): CreatePhysicalSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalSpace', 'POST', '/', 'json', true, 'form', request);
}

model CreateRealtimeTaskRequest {
  checkDuplicatePolicy?: string(name='CheckDuplicatePolicy', description='检查策略，是否进行已有设备ID和巡检项的检查。
- ERROR：不忽略，如果有运行中则报错。
- IGNORE：忽略重复检查。
- CURRENT：不忽略，如果有运行中则返回运行中。', example='CURRENT', position='Body'),
  clientToken?: string(name='ClientToken', description='幂等校验 token。', example='2dbeba0-555c-1a3f-8e11-3a235e4412', position='Query'),
  deviceId?: string(name='DeviceId', example='DEVICE-sd-389-sd', position='Body'),
  instanceId: string(name='InstanceId', description='实例ID。', example='cmn-cn-xxx', position='Query'),
  itemName?: string(name='ItemName', description='巡检项名字。', example='test', position='Body'),
  script?: string(name='Script', example='import json', position='Body'),
}

model CreateRealtimeTaskResponseBody = {
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4ABE-B75E-A6539A9BAAA8'),
  taskId?: string(name='TaskId', example='TASKwef-weds'),
}

model CreateRealtimeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRealtimeTaskResponseBody(name='body'),
}

async function createRealtimeTask(request: CreateRealtimeTaskRequest): CreateRealtimeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRealtimeTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateResourceInformationRequest {
  architectureId?: string(name='ArchitectureId', example='architectureId', position='Body'),
  clientToken: string(name='ClientToken', example='clientToken', position='Query'),
  information?: [ 
    {
      key: string(name='Key', description='键', example='IP'),
      keyAction?: string(name='KeyAction', description='键动作', example='/xxx/zzz'),
      keyAttribute?: string(name='KeyAttribute', description='键属性', example='IP地址'),
      keyDescription?: string(name='KeyDescription', description='键描述', example='Ip地址'),
    }
  ](name='Information', description='信息', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  resourceAttribute?: string(name='ResourceAttribute', description='资源属性', example='6510', position='Body'),
  resourceType: string(name='ResourceType', description='资源类型', example='CMDB', position='Body'),
}

model CreateResourceInformationResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
  resourceInformationId?: string(name='ResourceInformationId', example='resourceInformationId'),
}

model CreateResourceInformationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceInformationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createResourceInformation(request: CreateResourceInformationRequest): CreateResourceInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceInformation', 'POST', '/', 'json', true, 'form', request);
}

model CreateSetupProjectRequest {
  deliveryTime?: string(name='DeliveryTime', description='代表创建时间的资源属性字段', example='2021-02-01', position='Body'),
  description?: string(name='Description', description='描述', example='建设交付项目', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  spaceId: string(name='SpaceId', description='物理空间uId', example='xxxyyy', position='Body'),
}

model CreateSetupProjectResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
  setupProjectId?: string(name='SetupProjectId', example='setupProjectId'),
}

model CreateSetupProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSetupProjectResponseBody(name='body'),
}

async function createSetupProject(request: CreateSetupProjectRequest): CreateSetupProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSetupProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateSpaceModelRequest {
  clientToken?: string(name='ClientToken', example='clientToken', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  sort?: [ 
    {
      level?: long(name='Level', example='1'),
      levelName?: string(name='LevelName', example='园区'),
    }
  ](name='Sort', shrink='json', position='Body'),
  spaceType: string(name='SpaceType', description='物理空间类型', example='园区', position='Body'),
}

model CreateSpaceModelResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
  spaceModelId?: string(name='SpaceModelId', example='spaceModelId'),
}

model CreateSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSpaceModelResponseBody(name='body'),
}

async function createSpaceModel(request: CreateSpaceModelRequest): CreateSpaceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSpaceModel', 'POST', '/', 'json', true, 'form', request);
}

model CreateTaskRequest {
  clientToken?: string(name='ClientToken', position='Body'),
  instanceId: string(name='InstanceId', position='Query'),
  params: string(name='Params', maxLength=65532, position='Body'),
  templateId: string(name='TemplateId', position='Body'),
}

model CreateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateTimePeriodRequest {
  clientToken: string(name='ClientToken', position='Body'),
  expression: string(name='Expression', position='Body'),
  instanceId: string(name='InstanceId', position='Query'),
  timePeriodDescription: string(name='TimePeriodDescription', position='Body'),
  timePeriodName: string(name='TimePeriodName', position='Body'),
}

model CreateTimePeriodResponseBody = {
  requestId?: string(name='RequestId'),
  timePeriodId?: string(name='TimePeriodId'),
}

model CreateTimePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTimePeriodResponseBody(name='body'),
}

async function createTimePeriod(request: CreateTimePeriodRequest): CreateTimePeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTimePeriod', 'POST', '/', 'json', true, 'form', request);
}

model DeleteConfigurationSpecificationRequest {
  configurationSpecificationId: string(name='ConfigurationSpecificationId', example='configurationSpecificationId', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
}

model DeleteConfigurationSpecificationResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model DeleteConfigurationSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConfigurationSpecificationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteConfigurationSpecification(request: DeleteConfigurationSpecificationRequest): DeleteConfigurationSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConfigurationSpecification', 'POST', '/', 'json', true, 'form', request);
}

model DeleteConfigurationVariateRequest {
  configurationVariateId: string(name='ConfigurationVariateId', example='configurationVariateId', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
}

model DeleteConfigurationVariateResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model DeleteConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConfigurationVariateResponseBody(name='body'),
}

async function deleteConfigurationVariate(request: DeleteConfigurationVariateRequest): DeleteConfigurationVariateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConfigurationVariate', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDedicatedLineRequest {
  dedicatedLineId: string(name='DedicatedLineId', example='space_isp-6dk5xpoyoopr6obf', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
}

model DeleteDedicatedLineResponseBody = {
  requestId?: string(name='RequestId', example='8de935f6-90c7-444e-a2b4-bb4185153435'),
}

model DeleteDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDedicatedLineResponseBody(name='body'),
}

async function deleteDedicatedLine(request: DeleteDedicatedLineRequest): DeleteDedicatedLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDedicatedLine', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeliveryArchVersionRequest {
  deliveryArchVersionId: string(name='DeliveryArchVersionId', position='Body'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteDeliveryArchVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeliveryArchVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeliveryArchVersionResponseBody(name='body'),
}

async function deleteDeliveryArchVersion(request: DeleteDeliveryArchVersionRequest): DeleteDeliveryArchVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeliveryArchVersion', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeliveryProjectRequest {
  deliveryProjectId: string(name='DeliveryProjectId', position='Body'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteDeliveryProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeliveryProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeliveryProjectResponseBody(name='body'),
}

async function deleteDeliveryProject(request: DeleteDeliveryProjectRequest): DeleteDeliveryProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeliveryProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeviceRequest {
  deviceId: string(name='DeviceId', example='device-evve560juend5owh', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeviceFormRequest {
  deviceFormId: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
}

model DeleteDeviceFormResponseBody = {
  requestId?: string(name='RequestId', example='6d439436-ddde-4f26-aaf6-0470099b5c35'),
}

model DeleteDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceFormResponseBody(name='body'),
}

async function deleteDeviceForm(request: DeleteDeviceFormRequest): DeleteDeviceFormResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceForm', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDevicePropertyRequest {
  devicePropertyId: string(name='DevicePropertyId', example='property-z50wex75a1lkx7vx', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
}

model DeleteDevicePropertyResponseBody = {
  requestId?: string(name='RequestId', example='1f598491-db6d-4276-a83a-3b5f57d4a4e1'),
}

model DeleteDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDevicePropertyResponseBody(name='body'),
}

async function deleteDeviceProperty(request: DeleteDevicePropertyRequest): DeleteDevicePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceProperty', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeviceResourceRequest {
  deviceResourceId: string(name='DeviceResourceId', example='deviceResourceId', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
}

model DeleteDeviceResourceResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model DeleteDeviceResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceResourceResponseBody(name='body'),
}

async function deleteDeviceResource(request: DeleteDeviceResourceRequest): DeleteDeviceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDevicesRequest {
  deviceIds: [ string ](name='DeviceIds', example='device-evve560juend5owh', shrink='json', position='Body'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteDevicesResponseBody = {
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model DeleteDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDevicesResponseBody(name='body'),
}

async function deleteDevices(request: DeleteDevicesRequest): DeleteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevices', 'POST', '/', 'json', true, 'form', request);
}

model DeleteEventDefinitionRequest {
  eventId: string(name='EventId', example='e-1dc19dc0v', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Body'),
}

model DeleteEventDefinitionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEventDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEventDefinitionResponseBody(name='body'),
}

async function deleteEventDefinition(request: DeleteEventDefinitionRequest): DeleteEventDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventDefinition', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInspectionTaskRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  taskId: string(name='TaskId', example='TASK0489b577-33b3-4991-bdc5-1cdabc1a82e2', position='Query'),
}

model DeleteInspectionTaskResponseBody = {
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4ABE-B75E-A6539A9BAAA8'),
}

model DeleteInspectionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInspectionTaskResponseBody(name='body'),
}

async function deleteInspectionTask(request: DeleteInspectionTaskRequest): DeleteInspectionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInspectionTask', 'GET', '/', 'json', false, 'json', request);
}

model DeleteOsVersionRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  osVersionId: string(name='OsVersionId', example='osVersionId', position='Body'),
}

model DeleteOsVersionResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model DeleteOsVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOsVersionResponseBody(name='body'),
}

async function deleteOsVersion(request: DeleteOsVersionRequest): DeleteOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOsVersion', 'POST', '/', 'json', true, 'form', request);
}

model DeletePhysicalSpaceRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  physicalSpaceId: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Body'),
}

model DeletePhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', example='a1c7e2b4-174e-4557-a96d-d4cbf83988a6'),
}

model DeletePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePhysicalSpaceResponseBody(name='body'),
}

async function deletePhysicalSpace(request: DeletePhysicalSpaceRequest): DeletePhysicalSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePhysicalSpace', 'POST', '/', 'json', true, 'form', request);
}

model DeleteResourceInformationRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  resourceInformationId: string(name='ResourceInformationId', example='resourceInformationId', position='Body'),
}

model DeleteResourceInformationResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model DeleteResourceInformationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceInformationResponseBody(name='body'),
}

async function deleteResourceInformation(request: DeleteResourceInformationRequest): DeleteResourceInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResourceInformation', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSetupProjectRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  setupProjectId: string(name='SetupProjectId', example='setupProjectId', position='Body'),
}

model DeleteSetupProjectResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model DeleteSetupProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSetupProjectResponseBody(name='body'),
}

async function deleteSetupProject(request: DeleteSetupProjectRequest): DeleteSetupProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSetupProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSpaceModelRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  spaceModelId: string(name='SpaceModelId', example='spaceModelId', position='Query'),
}

model DeleteSpaceModelResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model DeleteSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSpaceModelResponseBody(name='body'),
}

async function deleteSpaceModel(request: DeleteSpaceModelRequest): DeleteSpaceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSpaceModel', 'POST', '/', 'json', false, 'json', request);
}

model DisableNotificationRequest {
  expiryTime: string(name='ExpiryTime', example='2021-01-01 00:01:00', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  list: [ 
    {
      aggregateDataId?: string(name='AggregateDataId', example='a-52gmqniln3u53n32'),
      appId?: string(name='AppId', example='app-52gmqniln3u53n32'),
      dedicatedLineId?: string(name='DedicatedLineId', example='d-52gmqniln3u53n32'),
      deviceId?: string(name='DeviceId', example='device-jrjb476ub06'),
      eventId?: string(name='EventId', example='e-f641qv4eg6u4fgd6'),
      eventObjectId?: string(name='EventObjectId', example='192.xxx.xxx.xxx【100GE2/2/0/8】:linkDown'),
      monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6'),
      portCollectionId?: string(name='PortCollectionId', example='p-52gmqniln3u53n32'),
      type: string(name='Type', example='SINGLE'),
    }
  ](name='List', example='Temporarily Closed', shrink='json', position='Body'),
  reason: string(name='Reason', example='Temporarily Closed', position='Body'),
}

model DisableNotificationResponseBody = {
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4AAE-B75E-A6539A9BAAA8'),
}

model DisableNotificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableNotificationResponseBody(name='body'),
}

async function disableNotification(request: DisableNotificationRequest): DisableNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableNotification', 'POST', '/', 'json', true, 'form', request);
}

model DownloadDeviceResourceRequest {
  deviceResourceId?: string(name='DeviceResourceId', example='deviceResourceId', position='Query'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds', shrink='json', position='Query'),
  downloadType: string(name='DownloadType', example='CONNECTION', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  setupProjectId: string(name='SetupProjectId', example='zzz', position='Query'),
}

model DownloadDeviceResourceResponseBody = {
  downloadUrl?: string(name='DownloadUrl', example='https://xxxyyy'),
  requestId?: string(name='RequestId', example='requestId'),
}

model DownloadDeviceResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadDeviceResourceResponseBody(name='body'),
}

async function downloadDeviceResource(request: DownloadDeviceResourceRequest): DownloadDeviceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadDeviceResource', 'GET', '/', 'json', false, 'json', request);
}

model EnableNotificationRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Body'),
  list: [ 
    {
      aggregateDataId?: string(name='AggregateDataId', example='a-52gmqniln3u53n32'),
      appId?: string(name='AppId', example='app-52gmqniln3u53n32'),
      dedicatedLineId?: string(name='DedicatedLineId', example='d-jrjb476ub06'),
      deviceId?: string(name='DeviceId', example='device-jrjb476ub06'),
      eventId?: string(name='EventId', example='e-f641qv4eg6u4fgd6'),
      eventObjectId?: string(name='EventObjectId', example='192.xxx.xxx.xxx【100GE2/2/0/8】:linkDown'),
      monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6'),
      portCollectionId?: string(name='PortCollectionId', example='p-52gmqniln3u53n32'),
      type: string(name='Type', example='SINGLE'),
    }
  ](name='List', example='EnableNotification', shrink='json', position='Body'),
}

model EnableNotificationResponseBody = {
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4AAE-B75E-A6539A9BAAA8'),
}

model EnableNotificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableNotificationResponseBody(name='body'),
}

async function enableNotification(request: EnableNotificationRequest): EnableNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableNotification', 'POST', '/', 'json', true, 'form', request);
}

model GetAlarmStatusRequest {
  aggregateDataId?: string(name='AggregateDataId', example='a-52gmqniln3u53n32', position='Query'),
  appId?: string(name='AppId', example='app-52gmqniln3u53n32', position='Query'),
  dedicatedLineId?: string(name='DedicatedLineId', example='d-52gmqniln3u53n32', position='Query'),
  deviceId?: string(name='DeviceId', example='device-jrjb476ub06', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6', position='Query'),
  portCollectionId?: string(name='PortCollectionId', example='p-52gmqniln3u53n32', position='Query'),
  type: string(name='Type', example='SINGLE', position='Query'),
}

model GetAlarmStatusResponseBody = {
  alarmStatus?: {
    abnormalDataItem?: string(name='AbnormalDataItem', example='[{"avg_latency":4.51}]'),
    agentIp?: string(name='AgentIp', example='127.0.0.1'),
    aggregateData?: {
      aggregateDataDescription?: string(name='AggregateDataDescription', description='描述', example='avg latency avg'),
      aggregateDataId?: string(name='AggregateDataId', description='聚合数据ID', example='a-52gmqniln3u53n32'),
      aggregateDataName?: string(name='AggregateDataName', description='聚合数据名称', example='avg_latency_avg'),
      aggregateMode?: string(name='AggregateMode', description='聚合方式', example='SUM'),
      dataItem?: string(name='DataItem', description='数据项', example='latency'),
      deviceId?: string(name='DeviceId', description='设备ID', example='device-jrjb476ub06'),
      isAllDevice?: int32(name='IsAllDevice', description='是否聚合全部设备', example='0'),
      monitorItemId?: string(name='MonitorItemId', description='监控项ID', example='m-22ut5sn54o35wsz6'),
    }(name='AggregateData'),
    aggregateDataId?: string(name='AggregateDataId', example='a-52gmqniln3u53n32'),
    alarmRule?: string(name='AlarmRule', example='{"alarmStatus":"WARNING","expression":">=","variable":"avg-latency","monitorItemId":"m-52gmqniln3u53n32","type":"SINGLE","value":"0"}'),
    alarmStatus?: string(name='AlarmStatus', example='WARNING'),
    appId?: string(name='AppId', example='app-52gmqniln3u53n32'),
    collectionTime?: string(name='CollectionTime', example='2021-01-01 00:01:00'),
    dedicatedLine?: {
      bandwidth?: string(name='Bandwidth', example='100'),
      dedicatedLineGateway?: string(name='DedicatedLineGateway', example='127.0.0.1'),
      dedicatedLineName?: string(name='DedicatedLineName', example='银泰武林店_电信'),
      deviceId?: string(name='DeviceId', example='device-jrjb476ub06'),
      ip?: string(name='Ip', example='127.0.0.1'),
      portName?: string(name='PortName', example='GigabitEthernet1/0/0'),
      space?: string(name='Space', example='银泰武林店'),
    }(name='DedicatedLine'),
    dedicatedLineId?: string(name='DedicatedLineId', example='d-52gmqniln3u53n32'),
    deviceId?: string(name='DeviceId', example='device-jrjb476ub06'),
    firstAbnormalTime?: string(name='FirstAbnormalTime', example='2021-01-01 00:01:00'),
    monitorItem?: {
      collectionType?: string(name='CollectionType', example='PING'),
      deviceForm?: string(name='DeviceForm', example='网络设备'),
      effective?: long(name='Effective', example='1'),
      execInterval?: string(name='ExecInterval', example='60'),
      monitorItemDescription?: string(name='MonitorItemDescription', example='连通性监控'),
      monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6'),
      monitorItemName?: string(name='MonitorItemName', example='Ping_Monitor'),
      securityDomain?: string(name='SecurityDomain', example='YT'),
    }(name='MonitorItem'),
    monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6'),
    notificationSwitch?: {
      expiryTime?: string(name='ExpiryTime', example='2021-01-01 00:01:00'),
      reason?: string(name='Reason', example='Temporarily Closed'),
    }(name='NotificationSwitch'),
    portCollection?: {
      portCollectionDescription?: string(name='PortCollectionDescription', example='端口集描述'),
      portCollectionId?: string(name='PortCollectionId', example='p-l3oo18oaz1n1cnfp'),
      portCollectionName?: string(name='PortCollectionName', example='端口集'),
      portList?: [ 
        {
          deviceId?: string(name='DeviceId', example='device-9jv4joxowp43whjx'),
          portName?: string(name='PortName', example='端口名'),
          resourceDevice?: {
            hostName?: string(name='HostName', example='设备名'),
            ip?: string(name='Ip', example='127.0.0.1'),
            securityDomain?: string(name='SecurityDomain', example='HZ'),
          }(name='ResourceDevice'),
        }
      ](name='PortList'),
    }(name='PortCollection'),
    portCollectionId?: string(name='PortCollectionId', example='p-fwq29cmatva28'),
    receiveTime?: string(name='ReceiveTime', example='2021-01-01 00:01:00'),
    resourceApp?: {
      appId?: string(name='AppId', example='app-0ijhb6yujk'),
      domain?: string(name='Domain', example='www.example.com'),
      port?: string(name='Port', example='3306'),
      securityDomain?: string(name='SecurityDomain', example='TEST002'),
      type?: string(name='Type', example='SINGLE'),
    }(name='ResourceApp'),
    resourceDevice?: {
      deviceForm?: string(name='DeviceForm', example='网络设备'),
      deviceId?: string(name='DeviceId', example='device-jrjb476ub06'),
      hostName?: string(name='HostName', example='CSW-HZ3.YT'),
      ip?: string(name='Ip', example='127.0.0.1'),
      model?: string(name='Model', example='H3C-7500'),
      securityDomain?: string(name='SecurityDomain', example='YT'),
      sn?: string(name='Sn', example='123456'),
      space?: string(name='Space', example='银泰武林店'),
      status?: string(name='Status', example='online'),
      vendor?: string(name='Vendor', example='H3C'),
    }(name='ResourceDevice'),
    responseCode?: string(name='ResponseCode', example='OK'),
    result?: string(name='Result', example='{"loss_rate":"0","avg-latency":"4.51"}'),
    uniqueKey?: string(name='UniqueKey', example='d-fwq29cmatva28_m-52gmqniln3u53n32'),
  }(name='AlarmStatus'),
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4AAE-B75E-A6539A9BAAA8'),
}

model GetAlarmStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAlarmStatusResponseBody(name='body'),
}

async function getAlarmStatus(request: GetAlarmStatusRequest): GetAlarmStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlarmStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetConfigurationSpecificationRequest {
  configurationSpecificationId: string(name='ConfigurationSpecificationId', example='configurationSpecificationId', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
}

model GetConfigurationSpecificationResponseBody = {
  configurationSpecification?: {
    architecture?: string(name='Architecture', example='5.0'),
    configurationSpecificationId?: string(name='ConfigurationSpecificationId', example='configurationSpecificationId'),
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2020-02-01'),
    mode?: string(name='Mode', example='5750'),
    relatedVariate?: [ string ](name='RelatedVariate'),
    role?: string(name='Role', example='ASW'),
    specificationContent?: string(name='SpecificationContent', example='config'),
    specificationName?: string(name='SpecificationName', example='config'),
    updateTime?: string(name='UpdateTime', example='2020-02-01'),
    vendor?: string(name='Vendor', example='HUAWEI'),
  }(name='ConfigurationSpecification'),
  requestId?: string(name='RequestId', example='requestId'),
}

model GetConfigurationSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConfigurationSpecificationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getConfigurationSpecification(request: GetConfigurationSpecificationRequest): GetConfigurationSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConfigurationSpecification', 'GET', '/', 'json', false, 'json', request);
}

model GetConfigurationVariateRequest {
  configurationVariateId: string(name='ConfigurationVariateId', example='configurationVariateId', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
}

model GetConfigurationVariateResponseBody = {
  configurationVariate?: {
    comment?: string(name='Comment', example='项目信息'),
    formatFunction?: string(name='FormatFunction', example='def main():'),
    variateName?: string(name='VariateName', example='变量名字'),
  }(name='ConfigurationVariate'),
  requestId?: string(name='RequestId', example='requestId'),
}

model GetConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConfigurationVariateResponseBody(name='body'),
}

async function getConfigurationVariate(request: GetConfigurationVariateRequest): GetConfigurationVariateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConfigurationVariate', 'GET', '/', 'json', false, 'json', request);
}

model GetDedicatedLineRequest {
  dedicatedLineId: string(name='DedicatedLineId', example='space_isp-6dk5xpoyoopr6obf', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxxx', position='Query'),
}

model GetDedicatedLineResponseBody = {
  dedicatedLine?: {
    bandwidth?: int32(name='Bandwidth', example='100'),
    dedicatedLineGateway?: string(name='DedicatedLineGateway', example='111.111.xxx.xxx'),
    dedicatedLineId?: string(name='DedicatedLineId', example='space_isp-6dk5xpoyoopr6obf'),
    dedicatedLineIp?: string(name='DedicatedLineIp', example='111.111.xxx.xxx'),
    dedicatedLineRole?: string(name='DedicatedLineRole', example='主'),
    description?: string(name='Description'),
    deviceId?: string(name='DeviceId', example='device-evve560juend5owh'),
    deviceName?: string(name='DeviceName', example='HZYT_USG6620_A'),
    devicePort?: string(name='DevicePort', example='GigabitEthernet1/0/0'),
    isp?: string(name='Isp', example='电信'),
    physicalSpaceId?: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4'),
  }(name='DedicatedLine'),
  requestId?: string(name='RequestId', example='8de935f6-90c7-444e-a2b4-bb4185153435'),
}

model GetDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDedicatedLineResponseBody(name='body'),
}

async function getDedicatedLine(request: GetDedicatedLineRequest): GetDedicatedLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDedicatedLine', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceRequest {
  deviceId: string(name='DeviceId', example='device-evve560juend5owh', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-xxx', position='Query'),
}

model GetDeviceResponseBody = {
  device?: {
    deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf'),
    deviceFormName?: string(name='DeviceFormName', example='网络设备'),
    deviceId?: string(name='DeviceId', description='设备ID', example='device-evve560juend5owh'),
    enablePassword?: string(name='EnablePassword', description='enable密码', example='123456'),
    extAttributes?: string(name='ExtAttributes', description='设备额外属性(JSON)', example='{"role":"ASW"}'),
    hostName?: string(name='HostName', description='主机名', example='HZYT_USG6620_A'),
    ip?: string(name='Ip', description='设备IP', example='10.17.101.1'),
    loginPassword?: string(name='LoginPassword', description='登录账号', example='123456'),
    loginType?: string(name='LoginType', description='登录类型，SSH或者TELNET', example='SSH,TELNET'),
    loginUsername?: string(name='LoginUsername', description='登录账号', example='admin'),
    mac?: string(name='Mac', description='设备MAC地址', example='b8:27:eb:34:3b:a2'),
    model?: string(name='Model', description='设备型号', example='USG6620'),
    physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID', example='space-ez6zd3w68ma4fsd4'),
    physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称', example='阿里巴巴西溪园区'),
    securityDomain?: string(name='SecurityDomain', description='设备安全域', example='IT'),
    serviceStatus?: string(name='ServiceStatus', description='设备状态', example='online'),
    sn?: string(name='Sn', description='设备SN', example='210235951910K7000016'),
    snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型', example='get'),
    snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号', example='v3'),
    snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase', example='123456'),
    snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol', example='MD5'),
    snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community', example='123456'),
    snmpPrivacyPassphrase?: string(name='SnmpPrivacyPassphrase', description='SNMP Privacy Passphrase', example='123456'),
    snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol', example='DES'),
    snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别', example='AUTH_PRIV'),
    snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名', example='admin'),
    vendor?: string(name='Vendor', description='设备厂商', example='Huawei'),
  }(name='Device'),
  requestId?: string(name='RequestId', description='Id of the request', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model GetDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceResponseBody(name='body'),
}

async function getDevice(request: GetDeviceRequest): GetDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevice', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceConfigRequest {
  date?: string(name='Date', example='2021-01-01', position='Query'),
  deviceId: string(name='DeviceId', example='device-evve560juend5owh', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-xxx', position='Query'),
}

model GetDeviceConfigResponseBody = {
  deviceConfig?: string(name='DeviceConfig', description='设备配置内容', example='hostname 	HZYT_USG6620_A'),
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model GetDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceConfigResponseBody(name='body'),
}

async function getDeviceConfig(request: GetDeviceConfigRequest): GetDeviceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceConfig', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceConfigDateRequest {
  deviceId: string(name='DeviceId', example='device-evve560juend5owh', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model GetDeviceConfigDateResponseBody = {
  deviceConfigDate?: [ string ](name='DeviceConfigDate', description='设备配置内容'),
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model GetDeviceConfigDateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceConfigDateResponseBody(name='body'),
}

async function getDeviceConfigDate(request: GetDeviceConfigDateRequest): GetDeviceConfigDateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceConfigDate', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceConfigDiffRequest {
  deviceId: string(name='DeviceId', example='device-evve560juend5owh', position='Query'),
  endDate: string(name='EndDate', example='2021-01-02', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  startDate: string(name='StartDate', example='2021-01-01', position='Query'),
}

model GetDeviceConfigDiffResponseBody = {
  deviceConfigDiff?: {
    extractDiff?: string(name='ExtractDiff', example='--- 2021-01-01 / 2021-01-02 差异提取 +++ 2021-01-01 / 2021-01-02 差异提取 @@ -1,1 +1,1 @@ -hostname HZYT_USG6620_A +hostname HZYT_USG6620_B'),
    totalDiff?: string(name='TotalDiff', example='--- 2021-01-01 / 2021-01-02 全量比对 +++ 2021-01-01 / 2021-01-02 全量比对 @@ -1,1 +1,1 @@ -hostname HZYT_USG6620_A +hostname HZYT_USG6620_B'),
  }(name='DeviceConfigDiff'),
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model GetDeviceConfigDiffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceConfigDiffResponseBody(name='body'),
}

async function getDeviceConfigDiff(request: GetDeviceConfigDiffRequest): GetDeviceConfigDiffResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceConfigDiff', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceFormRequest {
  deviceFormId: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
}

model GetDeviceFormResponseBody = {
  deviceForm?: {
    accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置', example='true'),
    attributeList?: [ 
      {
        attributeBuiltIn?: boolean(name='AttributeBuiltIn', description='内置属性不可修改和删除', example='true'),
        attributeFormat?: string(name='AttributeFormat', description='设备形态属性值格式', example='STRING'),
        attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', description='前端查询控件是否支持模糊搜索', example='false'),
        attributeKey?: string(name='AttributeKey', description='设备形态属性主键', example='serviceStatus'),
        attributeName?: string(name='AttributeName', description='设备形态属性名称', example='服务状态'),
        attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符', example='前端占位符说明'),
        attributeQuery?: boolean(name='AttributeQuery', description='前端是否展示对应的查询控件', example='false'),
        attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象', example='status'),
        attributeRequirement?: boolean(name='AttributeRequirement', description='设备形态属性是否必填', example='true'),
        attributeSequence?: int32(name='AttributeSequence', example='1'),
        attributeTableDisplay?: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见', example='true'),
        attributeType?: string(name='AttributeType', description='设备形态属性值类型', example='ENUMS'),
        attributeUniqueness?: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一', example='false'),
      }
    ](name='AttributeList', description='设备形态属性列表'),
    configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成', example='true'),
    detailDisplay?: boolean(name='DetailDisplay', example='true'),
    deviceFormId?: string(name='DeviceFormId', description='设备形态ID', example='form-u4ilnhu64h026lrf'),
    deviceFormName?: string(name='DeviceFormName', description='设备形态名称', example='网络设备'),
    formBuiltIn?: boolean(name='FormBuiltIn', description='内置形态不可修改和删除', example='true'),
    resourceUse?: string(name='ResourceUse', example='DEV_OPS'),
    script?: string(name='Script', example='@login_device\\r\\ndef config_backup():\\r\\n    exec_cli(\\"config\\", strict=False, timeout=120)\\r\\n    return exec_cli(\\"show configuration interface ethernet0/1\\", timeout=180)'),
    uniqueKey?: string(name='UniqueKey', example='SN'),
  }(name='DeviceForm'),
  requestId?: string(name='RequestId', example='6d439436-ddde-4f26-aaf6-0470099b5c35'),
}

model GetDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceFormResponseBody(name='body'),
}

async function getDeviceForm(request: GetDeviceFormRequest): GetDeviceFormResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceForm', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceOpLogRequest {
  deviceId?: string(name='DeviceId', example='device-s77qblesbyyef845', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=0, maximum=100000, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
}

model GetDeviceOpLogResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='10'),
  operationLogs?: [ 
    {
      deviceId?: string(name='DeviceId', description='设备ID'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      keyword?: string(name='Keyword', description='SNMP Privacy Protocol', example='role'),
      newValue?: string(name='NewValue', example='FW'),
      oldValue?: string(name='OldValue', description='设备额外属性(JSON)', example='ASW'),
      operator?: string(name='Operator', description='SNMP Privacy Passphrase', example='UpdateDevice'),
    }
  ](name='OperationLogs'),
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model GetDeviceOpLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceOpLogResponseBody(name='body'),
}

async function getDeviceOpLog(request: GetDeviceOpLogRequest): GetDeviceOpLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceOpLog', 'GET', '/', 'json', false, 'json', request);
}

model GetDevicePropertyRequest {
  deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf', position='Query'),
  devicePropertyId?: string(name='DevicePropertyId', example='property-z50wex75a1lkx7vx', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  propertyKey?: string(name='PropertyKey', example='device_model', position='Query'),
}

model GetDevicePropertyResponseBody = {
  deviceProperty?: {
    builtIn?: boolean(name='BuiltIn', example='true'),
    deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf'),
    deviceFormName?: string(name='DeviceFormName', example='网络设备'),
    devicePropertyId?: string(name='DevicePropertyId', example='property-z50wex75a1lkx7vx'),
    propertyContent?: string(name='PropertyContent', example='{   "H3C": [     "H3C S6800",     "S6850-56HF"   ],   "Huawei": [     "CE6851-48S6Q"   ] }'),
    propertyFormat?: string(name='PropertyFormat', example='JSON'),
    propertyKey?: string(name='PropertyKey', example='device_model'),
    propertyName?: string(name='PropertyName', example='厂商型号'),
  }(name='DeviceProperty'),
  requestId?: string(name='RequestId', example='1f598491-db6d-4276-a83a-3b5f57d4a4e1'),
}

model GetDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDevicePropertyResponseBody(name='body'),
}

async function getDeviceProperty(request: GetDevicePropertyRequest): GetDevicePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceProperty', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceResourceRequest {
  deviceResourceId: string(name='DeviceResourceId', example='deviceResourceId', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
}

model GetDeviceResourceResponseBody = {
  deviceResource?: {
    blockNumber?: string(name='BlockNumber'),
    business?: string(name='Business', example='{}'),
    config?: string(name='Config'),
    configTaskStatus?: string(name='ConfigTaskStatus', example='UNDO, RUNNING, SUCCESS, FAILURE'),
    deliveryIp?: string(name='DeliveryIp', example='192.168.1.1'),
    deviceNum?: string(name='DeviceNum', example='ConfigurationSpecificationName'),
    deviceResourceId?: string(name='DeviceResourceId'),
    generateConfig?: string(name='GenerateConfig', example='true'),
    hostName?: string(name='HostName', example='DSW-xxxyyy'),
    interConnection?: string(name='InterConnection', example='{}'),
    location?: string(name='Location', example='杭州-EFC'),
    loopback?: string(name='Loopback', example='{}'),
    managerIp?: string(name='ManagerIp', example='11.12.13.54'),
    model?: string(name='Model', example='5566'),
    role?: string(name='Role'),
    setupProjectId?: string(name='SetupProjectId', description='建设项目id', example='xxx_zzz'),
    sn?: string(name='Sn', example='123'),
    stack?: boolean(name='Stack', example='false'),
    vendor?: string(name='Vendor', example='Ruijie'),
  }(name='DeviceResource', example='ConfigurationSpecificationName'),
  requestId?: string(name='RequestId', example='requestId'),
}

model GetDeviceResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceResourceResponseBody(name='body'),
}

async function getDeviceResource(request: GetDeviceResourceRequest): GetDeviceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceResource', 'GET', '/', 'json', false, 'json', request);
}

model GetInspectionTaskRequest {
  deviceId?: string(name='DeviceId', example='device-ak0rnxtulk******', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  itemName?: string(name='ItemName', example='config_backup', position='Query'),
  taskId?: string(name='TaskId', example='Task-sdaldsd-3r-4234', position='Query'),
}

model GetInspectionTaskResponseBody = {
  inspectionTask?: {
    deviceDisplay?: string(name='DeviceDisplay', example='device output sample'),
    deviceId?: string(name='DeviceId', example='device-ak0rnxtulk******'),
    errorCode?: string(name='ErrorCode', example='AGENT_LOGIN_FAIL'),
    executionBeginTime?: string(name='ExecutionBeginTime', example='2020-12-23 03:18:22'),
    executionEndTime?: string(name='ExecutionEndTime', example='2020-12-23 03:18:22'),
    hostName?: string(name='HostName', example='ASW-S-3F1-1.CD1'),
    ip?: string(name='IP', example='127.0.0.1'),
    inspectionAlarmRules?: [ 
      {
        actualValue?: string(name='ActualValue', example='11'),
        expression?: string(name='Expression', example='>'),
        level?: string(name='Level', example='WARNING'),
        operator?: string(name='Operator', example='A'),
        value?: string(name='Value', example='10'),
      }
    ](name='InspectionAlarmRules'),
    inspectionResult?: string(name='InspectionResult', example='{}'),
    itemId?: string(name='ItemId', example='INSPECTION_ITEM-sjds-23'),
    itemName?: string(name='ItemName', example='config_backup'),
    model?: [ string ](name='Model', example='F101'),
    scriptId?: string(name='ScriptId', example='INSPECTION_TEMPLATE-sdsld'),
    space?: string(name='Space', example='XX门店'),
    taskId?: string(name='TaskId', example='TASK-skd-32-sd'),
    taskStatus?: string(name='TaskStatus', example='SUCCESS'),
    vendor?: string(name='Vendor', example='Alibaba'),
  }(name='InspectionTask'),
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4ABE-B75E-A6539A9BAAA8'),
}

model GetInspectionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInspectionTaskResponseBody(name='body'),
}

async function getInspectionTask(request: GetInspectionTaskRequest): GetInspectionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInspectionTask', 'GET', '/', 'json', false, 'json', request);
}

model GetMonitorItemRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  monitorItemId: string(name='MonitorItemId', example='m-598zb0r9z3f44cfr', position='Query'),
}

model GetMonitorItemResponseBody = {
  monitorItem?: {
    alarmRuleList?: [ 
      {
        alarmStatus?: string(name='AlarmStatus', example='CRITICAL'),
        expression?: string(name='Expression', example='>='),
        value?: string(name='Value', example='10'),
        variable?: string(name='Variable', example='loss_rate'),
      }
    ](name='AlarmRuleList'),
    analysisCode?: string(name='AnalysisCode', example='/**\\n** Parsing logic\\n** @param: output :Collect raw data\\n**/\\nfunction parse(output){\\n    var results = {}'),
    collectionType?: string(name='CollectionType', example='PING'),
    config?: string(name='Config', example='{\\"Interval\\":1000,\\"PackNum\\":30}'),
    createTime?: string(name='CreateTime', example='2023-06-22 02:37:19'),
    dataItem?: string(name='DataItem', example='avg_latency'),
    deviceForm?: string(name='DeviceForm'),
    effective?: int32(name='Effective', example='1'),
    execInterval?: int32(name='ExecInterval', example='60'),
    monitorItemDescription?: string(name='MonitorItemDescription'),
    monitorItemId?: string(name='MonitorItemId', example='m-598zb0r9z3f44cfr'),
    monitorItemName?: string(name='MonitorItemName'),
    personalizedAlarmRuleList?: [ 
      {
        alarmStatus?: string(name='AlarmStatus', example='CRITICAL'),
        expression?: string(name='Expression', example='>='),
        fieldName?: string(name='FieldName', example='role'),
        fieldValue?: string(name='FieldValue', example='ASW'),
        value?: string(name='Value', example='20'),
        variable?: string(name='Variable', example='loss_rate'),
      }
    ](name='PersonalizedAlarmRuleList'),
    securityDomain?: string(name='SecurityDomain', example='*'),
    type?: string(name='Type', example='SINGLE'),
    updateTime?: string(name='UpdateTime', example='2023-06-22 02:37:19'),
  }(name='MonitorItem'),
  requestId?: string(name='RequestId', description='Id of the request', example='94EDA8CB-57C7-57F6-9193-26E701348ADB'),
}

model GetMonitorItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMonitorItemResponseBody(name='body'),
}

async function getMonitorItem(request: GetMonitorItemRequest): GetMonitorItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMonitorItem', 'GET', '/', 'json', false, 'json', request);
}

model GetOsDownloadPathRequest {
  instanceId?: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  osVersionId: string(name='OsVersionId', example='xxxyyy', position='Query'),
}

model GetOsDownloadPathResponseBody = {
  osVersion?: {
    downloadPath?: string(name='DownloadPath', example='htts://xxxkkk'),
  }(name='OsVersion'),
  requestId?: string(name='RequestId', description='Id of the request', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model GetOsDownloadPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOsDownloadPathResponseBody(name='body'),
}

async function getOsDownloadPath(request: GetOsDownloadPathRequest): GetOsDownloadPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOsDownloadPath', 'GET', '/', 'json', false, 'json', request);
}

model GetOsVersionRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  osVersionId: string(name='OsVersionId', position='Query'),
}

model GetOsVersionResponseBody = {
  osVersion?: [ 
    {
      downloadPath?: string(name='DownloadPath', description='系统版本', example='http//:ikkk'),
    }
  ](name='OsVersion'),
  requestId?: string(name='RequestId', example='requestId'),
}

model GetOsVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOsVersionResponseBody(name='body'),
}

async function getOsVersion(request: GetOsVersionRequest): GetOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOsVersion', 'GET', '/', 'json', false, 'json', request);
}

model GetOssPolicyRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  name?: string(name='Name', example='1674131/build.txt', position='Query'),
}

model GetOssPolicyResponseBody = {
  ossPolicy?: {
    accessId?: string(name='AccessId', description='通行id', example='fasd44sdf'),
    directory?: string(name='Directory', description='目录', example='/xxx/zzz'),
    expireTime?: string(name='ExpireTime', description='过期时间', example='120'),
    host?: string(name='Host', description='主机名', example='https://zzzxxx'),
    policy?: string(name='Policy', description='通行规则', example='gagfaf54we5'),
    signature?: string(name='Signature', description='签名', example='dfagweyghsfsa'),
  }(name='OssPolicy', description='资源上传规则'),
  requestId?: string(name='RequestId'),
}

model GetOssPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOssPolicyResponseBody(name='body'),
}

async function getOssPolicy(request: GetOssPolicyRequest): GetOssPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssPolicy', 'GET', '/', 'json', false, 'json', request);
}

model GetPhysicalSpaceRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  physicalSpaceId: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Query'),
}

model GetPhysicalSpaceResponseBody = {
  physicalSpace?: {
    address?: string(name='Address', example='文一西路969号'),
    city?: string(name='City', example='杭州市'),
    country?: string(name='Country', example='中国'),
    owner?: string(name='Owner', example='张三'),
    physicalSpaceId?: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4'),
    physicalSpaceName?: string(name='PhysicalSpaceName', example='阿里巴巴西溪园区'),
    province?: string(name='Province', example='浙江省'),
    remark?: string(name='Remark'),
    securityDomainList?: [ string ](name='SecurityDomainList'),
    spaceAbbreviation?: string(name='SpaceAbbreviation', example='yq'),
    spaceType?: string(name='SpaceType', example='园区'),
  }(name='PhysicalSpace'),
  requestId?: string(name='RequestId', example='a1c7e2b4-174e-4557-a96d-d4cbf83988a6'),
}

model GetPhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPhysicalSpaceResponseBody(name='body'),
}

async function getPhysicalSpace(request: GetPhysicalSpaceRequest): GetPhysicalSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalSpace', 'GET', '/', 'json', false, 'json', request);
}

model GetPhysicalSpaceTopoRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  physicalSpaceId: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Query'),
  topoType: string(name='TopoType', example='lldp', position='Query'),
}

model GetPhysicalSpaceTopoResponseBody = {
  requestId?: string(name='RequestId', example='F6EC6EAF-8C8F-5D72-BE74-FD03A1123450'),
  topoData?: {
    devices?: [ 
      {
        deviceId?: string(name='DeviceId', example='device-9i8867jzljw12345'),
        deviceRole?: string(name='DeviceRole', example='ASW'),
        hostName?: string(name='HostName', example='TEST-xxxx3'),
        ip?: string(name='Ip', example='127.0.xxx.xxx'),
      }
    ](name='Devices'),
    links?: [ 
      {
        sourceDeviceId?: string(name='SourceDeviceId', example='device-gbutctzxtuu7t122'),
        sourceDeviceName?: string(name='SourceDeviceName', example='TEST-xxxx1'),
        sourcePort?: string(name='SourcePort', example='GE2/3/0/1'),
        targetDeviceId?: string(name='TargetDeviceId', example='device-i2g2iaiao5ja12345'),
        targetDeviceName?: string(name='TargetDeviceName', example='TEST-xxxx2'),
        targetPort?: string(name='TargetPort', example='TE1/0/28'),
      }
    ](name='Links'),
    updateTime?: string(name='UpdateTime', example='2023-02-01 22:24:16'),
  }(name='TopoData'),
}

model GetPhysicalSpaceTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPhysicalSpaceTopoResponseBody(name='body'),
}

async function getPhysicalSpaceTopo(request: GetPhysicalSpaceTopoRequest): GetPhysicalSpaceTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalSpaceTopo', 'POST', '/', 'json', false, 'json', request);
}

model GetRealtimeTaskRequest {
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-xxx', position='Query'),
  taskId: string(name='TaskId', example='TASK0489b577-33b3-4991-bdc5-1cdabc1a82e2', position='Query'),
}

model GetRealtimeTaskResponseBody = {
  inspectionTask?: {
    errorCode?: string(name='ErrorCode', example='CONTROLLER_ERROR'),
    inspectionMessage?: string(name='InspectionMessage', example='error: No avaliable agents!, trace:'),
    inspectionResult?: string(name='InspectionResult', example='{}'),
    taskStatus?: string(name='TaskStatus', example='SUCCESS'),
  }(name='InspectionTask'),
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4ABE-B75E-A6539A9BAAA8'),
}

model GetRealtimeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRealtimeTaskResponseBody(name='body'),
}

async function getRealtimeTask(request: GetRealtimeTaskRequest): GetRealtimeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealtimeTask', 'GET', '/', 'json', false, 'json', request);
}

model GetScheduleWorkerRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  scheduleWorkerId: string(name='ScheduleWorkerId', position='Query'),
}

model GetScheduleWorkerResponseBody = {
  requestId?: string(name='RequestId'),
  scheduleWorker?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2020-12-22 10:39:17'),
    scheduleWorkerId?: string(name='ScheduleWorkerId', description='代表资源一级ID的资源属性字段'),
    updateTime?: string(name='UpdateTime', description='更新时间', example='2020-12-22 10:39:17'),
    workerContact?: string(name='WorkerContact'),
    workerId?: string(name='WorkerId', description='值班人员工号', example='1234567'),
    workerName?: string(name='WorkerName', description='值班人员姓名', example='张三'),
  }(name='ScheduleWorker'),
}

model GetScheduleWorkerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetScheduleWorkerResponseBody(name='body'),
}

async function getScheduleWorker(request: GetScheduleWorkerRequest): GetScheduleWorkerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScheduleWorker', 'GET', '/', 'json', false, 'json', request);
}

model GetSetupProjectRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  setupProjectId: string(name='SetupProjectId', example='setupProjectId', position='Query'),
}

model GetSetupProjectResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
  setupProject?: {
    createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2020-02-01'),
    deliveryTime?: string(name='DeliveryTime', description='预计交付时间', example='2021-03-27 00:00:00'),
    nodes?: string(name='Nodes', description='节点', example='[]'),
    packages?: [ 
      {
        deviceNumber?: string(name='DeviceNumber', description='设备号', example='1'),
        model?: string(name='Model', description='型号', example='6510'),
        role?: string(name='Role', description='角色', example='DSW'),
        vendor?: string(name='Vendor', description='厂商', example='Ruijie'),
      }
    ](name='Packages', description='套餐'),
    progress?: string(name='Progress', example='build'),
    setupProjectId?: string(name='SetupProjectId', description='代表资源一级ID的资源属性字段', example='xxxyyy'),
    spaceId?: string(name='SpaceId', description='物理空间uId', example='xxxyyy'),
    spaceName?: string(name='SpaceName', example='WHHM'),
    spaceType?: string(name='SpaceType', example='园区'),
  }(name='SetupProject'),
}

model GetSetupProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSetupProjectResponseBody(name='body'),
}

async function getSetupProject(request: GetSetupProjectRequest): GetSetupProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSetupProject', 'GET', '/', 'json', false, 'json', request);
}

model GetSpaceModelRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  spaceModelId: string(name='SpaceModelId', example='spaceModelId', position='Query'),
}

model GetSpaceModelResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
  spaceModel?: {
    createTime?: string(name='CreateTime', description='创建时间', example='2020-12-22 10:39:17'),
    sort?: [ 
      {
        level?: long(name='Level', example='1'),
        levelName?: string(name='LevelName', example='园区'),
      }
    ](name='Sort', description='模型实例', example='{}'),
    spaceModelId?: string(name='SpaceModelId', description='物理空间模型id', example='xxx_yyy'),
    spaceType?: string(name='SpaceType', description='物理空间类型', example='园区'),
    status?: string(name='Status', description='模型状态', example='LOCK'),
    updateTime?: string(name='UpdateTime', description='更新时间', example='2020-12-22 10:39:17'),
  }(name='SpaceModel', description='物理空间模型'),
}

model GetSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpaceModelResponseBody(name='body'),
}

async function getSpaceModel(request: GetSpaceModelRequest): GetSpaceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpaceModel', 'GET', '/', 'json', false, 'json', request);
}

model GetSpaceModelInstanceRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  operateType?: string(name='OperateType', example='CMDB、SETUP', position='Query'),
  spaceId?: string(name='SpaceId', example='spaceIdxxxyyy', position='Query'),
  spaceType?: string(name='SpaceType', example='园区', position='Query'),
}

model GetSpaceModelInstanceResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
  spaceModel?: {
    instance?: string(name='Instance', example='{}'),
  }(name='SpaceModel'),
}

model GetSpaceModelInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpaceModelInstanceResponseBody(name='body'),
}

async function getSpaceModelInstance(request: GetSpaceModelInstanceRequest): GetSpaceModelInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpaceModelInstance', 'GET', '/', 'json', false, 'json', request);
}

model GetSpaceModelSortRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  operateType: string(name='OperateType', example='CMDB、SETUP', position='Query'),
  spaceType: string(name='SpaceType', example='园区', position='Query'),
}

model GetSpaceModelSortResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
  spaceModel?: [ 
    {
      level?: long(name='Level'),
      levelName?: string(name='LevelName'),
    }
  ](name='SpaceModel', example='{}'),
}

model GetSpaceModelSortResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpaceModelSortResponseBody(name='body'),
}

async function getSpaceModelSort(request: GetSpaceModelSortRequest): GetSpaceModelSortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpaceModelSort', 'GET', '/', 'json', false, 'json', request);
}

model GetTaskRequest {
  instanceId: string(name='InstanceId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId'),
  task?: {
    category?: string(name='Category'),
    createTime?: string(name='CreateTime'),
    params?: string(name='Params'),
    responseCode?: string(name='ResponseCode'),
    result?: string(name='Result'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    templateId?: string(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    updateTime?: string(name='UpdateTime'),
  }(name='Task'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTask', 'GET', '/', 'json', false, 'json', request);
}

model ListAlarmStatusRequest {
  aggregateDataName?: string(name='AggregateDataName', example='聚合数据名称', position='Query'),
  city?: string(name='City', example='杭州市', position='Query'),
  country?: string(name='Country', example='中国', position='Query'),
  dedicatedLineId?: string(name='DedicatedLineId', example='space-isp_knbghjkl09u', position='Query'),
  dedicatedLineName?: string(name='DedicatedLineName', example='专线名称', position='Query'),
  deviceForm?: string(name='DeviceForm', example='网络设备', position='Query'),
  deviceId?: string(name='DeviceId', example='device-jrjb476ub06', position='Query'),
  domain?: string(name='Domain', example='www.example.com', position='Query'),
  hostName?: string(name='HostName', example='asw-1', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-13edefd2', position='Query'),
  manufacturer?: string(name='Manufacturer', example='H3C', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Query'),
  model?: string(name='Model', example='5800', position='Query'),
  monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6', position='Query'),
  nextToken?: string(name='NextToken', example='10', position='Query'),
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-123wefv243', position='Query'),
  portCollectionId?: string(name='PortCollectionId', example='p-08uhbnlo9ygbn', position='Query'),
  portCollectionName?: string(name='PortCollectionName', example='端口集名称', position='Query'),
  province?: string(name='Province', example='浙江省', position='Query'),
  region?: string(name='Region', example='Northeast China', position='Query'),
  role?: string(name='Role', example='ASW', position='Query'),
  securityDomain?: string(name='SecurityDomain', example='CMN-A01', position='Query'),
  serviceStatus?: string(name='ServiceStatus', example='online', position='Query'),
  space?: string(name='Space', example='银泰武林店', position='Query'),
  spaceType?: string(name='SpaceType', example='园区', position='Query'),
  status?: string(name='Status', example='WARNING', position='Query'),
  type?: string(name='Type', example='SINGLE', position='Query'),
  uniqueKey?: string(name='UniqueKey', example='a-iuhb098uyhbvgh', position='Query'),
}

model ListAlarmStatusResponseBody = {
  alarmStatus?: [ 
    {
      abnormalDataItem?: string(name='AbnormalDataItem', example='[{"avg_latency":4.51}]'),
      agentIp?: string(name='AgentIp', example='127.0.0.1'),
      aggregateData?: {
        aggregateDataName?: string(name='AggregateDataName', example='avg_latency_avg'),
        dataItem?: string(name='DataItem', example='avg_latency'),
      }(name='AggregateData'),
      aggregateDataId?: string(name='AggregateDataId', example='a-52gmqniln3u53n32'),
      alarmRule?: string(name='AlarmRule', example='{"alarmStatus":"WARNING","expression":">=","variable":"avg-latency","monitorItemId":"m-52gmqniln3u53n32","type":"SINGLE","value":"0"}'),
      alarmStatus?: string(name='AlarmStatus', example='WARNING'),
      appId?: string(name='AppId', example='app-0ijhb6yujk'),
      collectionTime?: string(name='CollectionTime', example='2021-01-01 00:01:00'),
      dedicatedLine?: {
        dedicatedLineName?: string(name='DedicatedLineName', example='银泰武林店_电信'),
        physicalSpace?: string(name='PhysicalSpace'),
      }(name='DedicatedLine'),
      dedicatedLineId?: string(name='DedicatedLineId', example='d-52gmqniln3u53n32'),
      deviceId?: string(name='DeviceId', example='device-jrjb476ub06'),
      firstAbnormalTime?: string(name='FirstAbnormalTime', example='2021-01-01 00:01:00'),
      monitorItem?: {
        collectionType?: string(name='CollectionType', example='SNMP'),
        monitorItemDescription?: string(name='MonitorItemDescription', example='ping monitor'),
        monitorItemName?: string(name='MonitorItemName', example='Ping_Monitor'),
      }(name='MonitorItem'),
      monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6'),
      notificationSwitch?: {
        expiryTime?: string(name='ExpiryTime', example='2021-01-01 00:01:00'),
        reason?: string(name='Reason', example='Temporarily Closed'),
      }(name='NotificationSwitch'),
      portCollection?: {
        portCollectionName?: string(name='PortCollectionName', example='端口集名称'),
      }(name='PortCollection'),
      portCollectionId?: string(name='PortCollectionId', example='p-09iuhbv456yj'),
      receiveTime?: string(name='ReceiveTime', example='2021-01-01 00:01:00'),
      resourceApp?: {
        appId?: string(name='AppId', example='app-0ijhb6yujk'),
        domain?: string(name='Domain', example='www.example.com'),
        port?: string(name='Port', example='3306'),
        securityDomain?: string(name='SecurityDomain', example='CMN-A01'),
        type?: string(name='Type', example='HTTP'),
      }(name='ResourceApp'),
      resourceDevice?: {
        city?: string(name='City', example='杭州'),
        deviceForm?: string(name='DeviceForm', example='网络设备'),
        hostName?: string(name='HostName', example='CSW-HZ3.YT'),
        physicalSpace?: string(name='PhysicalSpace'),
      }(name='ResourceDevice'),
      responseCode?: string(name='ResponseCode', example='OK'),
      result?: string(name='Result', example='{"loss_rate":"0","avg-latency":"4.51"}'),
      uniqueKey?: string(name='UniqueKey', example='d-fwq29cmatva28_m-52gmqniln3u53n32'),
    }
  ](name='AlarmStatus'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken: string(name='NextToken', example='10'),
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4AAE-B75E-A6539A9BAAA8'),
  statistics?: [ 
    {
      count?: long(name='Count', example='10'),
      status?: string(name='Status', example='WARNING'),
    }
  ](name='Statistics'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListAlarmStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlarmStatusResponseBody(name='body'),
}

async function listAlarmStatus(request: ListAlarmStatusRequest): ListAlarmStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlarmStatus', 'GET', '/', 'json', false, 'json', request);
}

model ListAlarmStatusHistoriesRequest {
  aggregateDataId?: string(name='AggregateDataId', example='a-cjqd1crux50udtt0', position='Query'),
  appId?: string(name='AppId', example='app-fwq29cmatva28', position='Query'),
  dedicatedLineId?: string(name='DedicatedLineId', example='d-fwq29cmatva28', position='Query'),
  deviceId?: string(name='DeviceId', example='d-fwq29cmatva28', position='Query'),
  end: long(name='End', example='1609431000', minimum=1604160000, maximum=2208960000, position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  monitorItemId?: string(name='MonitorItemId', example='m-52gmqniln3u53n32', position='Query'),
  portCollectionId?: string(name='PortCollectionId', example='p-fwq29cmatva28', position='Query'),
  start: long(name='Start', example='1609430400', minimum=1604160000, maximum=2208960000, position='Query'),
  type: string(name='Type', example='SINGLE', position='Query'),
}

model ListAlarmStatusHistoriesResponseBody = {
  alarmStatusHistories?: [ 
    {
      timestamp?: long(name='Timestamp', example='1609430460000'),
      value?: string(name='Value', example='1'),
    }
  ](name='AlarmStatusHistories'),
  requestId?: string(name='RequestId', example='15292160-382F-46F2-B241-95EFB54BA434'),
}

model ListAlarmStatusHistoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlarmStatusHistoriesResponseBody(name='body'),
}

async function listAlarmStatusHistories(request: ListAlarmStatusHistoriesRequest): ListAlarmStatusHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlarmStatusHistories', 'GET', '/', 'json', false, 'json', request);
}

model ListAlarmStatusStatisticsRequest {
  alarmStatus?: string(name='AlarmStatus', example='WARNING', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-2dfcv9v1e3', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-1dcfv0193efc', position='Query'),
  securityDomain?: string(name='SecurityDomain', example='CMN-TEST', position='Query'),
  type: string(name='Type', example='SINGLE', position='Query'),
}

model ListAlarmStatusStatisticsResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken: string(name='NextToken', example='1'),
  requestId?: string(name='RequestId'),
  statistics?: [ 
    {
      count?: long(name='Count', example='10'),
      name?: string(name='Name', example='xx物理空间'),
      resourceId?: string(name='ResourceId', example='space-1dcfv0193efc'),
    }
  ](name='Statistics'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListAlarmStatusStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlarmStatusStatisticsResponseBody(name='body'),
}

async function listAlarmStatusStatistics(request: ListAlarmStatusStatisticsRequest): ListAlarmStatusStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlarmStatusStatistics', 'GET', '/', 'json', false, 'json', request);
}

model ListArchitectureAttributeRequest {
  architectureId: string(name='ArchitectureId', example='1e0rlfc3358e8h8f', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  role?: string(name='Role', example='ASW', position='Query'),
  vendor?: string(name='Vendor', example='Ruijie', position='Query'),
}

model ListArchitectureAttributeResponseBody = {
  architecture?: [ 
    {
      model?: [ string ](name='Model'),
      role?: [ string ](name='Role', example='ASW'),
      vendor?: [ string ](name='Vendor'),
    }
  ](name='Architecture'),
  requestId?: string(name='RequestId'),
}

model ListArchitectureAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListArchitectureAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function listArchitectureAttribute(request: ListArchitectureAttributeRequest): ListArchitectureAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListArchitectureAttribute', 'GET', '/', 'json', false, 'json', request);
}

model ListConfigurationSpecificationsRequest {
  architecture?: string(name='Architecture', example='5.0', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  maxResults?: int32(name='MaxResults', example='100', minimum=0, maximum=100, position='Query'),
  model?: string(name='Model', example='3601', position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  role?: string(name='Role', example='DSW', position='Query'),
  specificationName?: string(name='SpecificationName', example='Specification_5.0', position='Query'),
  vendor?: string(name='Vendor', example='Alibaba', position='Query'),
}

model ListConfigurationSpecificationsResponseBody = {
  configurationSpecification?: [ 
    {
      architecture?: string(name='Architecture', example='5.0'),
      configurationSpecificationId?: string(name='ConfigurationSpecificationId', example='configurationSpecificationId'),
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2020-02-01'),
      model?: string(name='Model', example='5750'),
      relatedVariate?: [ string ](name='RelatedVariate'),
      role?: string(name='Role', example='DSW'),
      specificationContent?: string(name='SpecificationContent', example='config'),
      specificationName?: string(name='SpecificationName', example='ASW'),
      updateTime?: string(name='UpdateTime', example='2020-02-01'),
      vendor?: string(name='Vendor', example='HUAWEI'),
    }
  ](name='ConfigurationSpecification'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='1'),
  requestId?: string(name='RequestId', example='requestId'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListConfigurationSpecificationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConfigurationSpecificationsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function listConfigurationSpecifications(request: ListConfigurationSpecificationsRequest): ListConfigurationSpecificationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConfigurationSpecifications', 'GET', '/', 'json', false, 'json', request);
}

model ListConfigurationVariateRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  maxResults: int32(name='MaxResults', example='100', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  variateName?: string(name='VariateName', example='project', position='Query'),
}

model ListConfigurationVariateResponseBody = {
  configurationVariate?: [ 
    {
      comment?: string(name='Comment', example='主机名'),
      configurationVariateId?: string(name='ConfigurationVariateId', example='kkoo'),
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2020-12-22 10:39:17'),
      formatFunction?: string(name='FormatFunction', example='def main():'),
      updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
      variateName?: string(name='VariateName', example='hostname'),
    }
  ](name='ConfigurationVariate'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='1'),
  requestId?: string(name='RequestId', example='requestId'),
  totalCount?: int32(name='TotalCount', example='200'),
}

model ListConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConfigurationVariateResponseBody(name='body'),
}

async function listConfigurationVariate(request: ListConfigurationVariateRequest): ListConfigurationVariateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConfigurationVariate', 'GET', '/', 'json', false, 'json', request);
}

model ListConnectionPoliciesRequest {
  architectureIterationId: string(name='ArchitectureIterationId', description='架构迭代uid', example='1e0rlfc3358e8h8f', position='Body'),
  connectionPolicyId?: string(name='ConnectionPolicyId', description='连接策略名字', example='1e0rlfc3358e8h8f', position='Body'),
  downlinkArchitectureDeviceId?: string(name='DownlinkArchitectureDeviceId', description='下联设备uid', example='1e0rlfc3358e8h8f', position='Body'),
  downlinkArchitectureModuleId?: string(name='DownlinkArchitectureModuleId', description='下联模块uid', example='1e0rlfc3358e8h8f', position='Body'),
  instanceId?: string(name='InstanceId', position='Query'),
  maxResults: int32(name='MaxResults', minimum=0, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  uplinkArchitectureDeviceId?: string(name='UplinkArchitectureDeviceId', description='上联设备uid', example='1e0rlfc3358e8h8f', position='Body'),
  uplinkArchitectureModuleId?: string(name='UplinkArchitectureModuleId', description='上联模块uid', example='1e0rlfc3358e8h8f', position='Body'),
}

model ListConnectionPoliciesResponseBody = {
  connectionPolicy?: [ 
    {
      algorithm?: string(name='Algorithm', example='笛卡尔互联'),
      architectureIterationId?: string(name='ArchitectureIterationId', example='1e0rlfc3358e8h8f'),
      createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
      downlinkArchitectureDeviceId?: string(name='DownlinkArchitectureDeviceId', description='上联设备uid', example='1e0rlfc3358e8h8f'),
      downlinkArchitectureModuleId?: string(name='DownlinkArchitectureModuleId', description='下联设备uid', example='1e0rlfc3358e8h8f'),
      id?: string(name='Id', example='1e0rlfc3358e8h8f'),
      linkCount?: int32(name='LinkCount', example='2'),
      name?: string(name='Name', example='pswtoasw'),
      updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
      uplinkArchitectureDeviceId?: string(name='UplinkArchitectureDeviceId', description='上联模块uid', example='1e0rlfc3358e8h8f'),
      uplinkArchitectureModuleId?: string(name='UplinkArchitectureModuleId', description='下联模块uid', example='1e0rlfc3358e8h8f'),
    }
  ](name='ConnectionPolicy'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListConnectionPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConnectionPoliciesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function listConnectionPolicies(request: ListConnectionPoliciesRequest): ListConnectionPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnectionPolicies', 'POST', '/', 'json', true, 'form', request);
}

model ListDedicatedLinesRequest {
  bandwidth?: int32(name='Bandwidth', example='100', position='Query'),
  dedicatedLineGateway?: string(name='DedicatedLineGateway', example='111.111.xxx.xxx', position='Query'),
  dedicatedLineIp?: string(name='DedicatedLineIp', example='111.111.xxx.xxx', position='Query'),
  dedicatedLineRole?: string(name='DedicatedLineRole', example='主', position='Query'),
  description?: string(name='Description', example='备注', position='Query'),
  deviceId?: string(name='DeviceId', example='device-evve560juend5owh', position='Query'),
  deviceName?: string(name='DeviceName', example='HZYT_USG6620_A', position='Query'),
  devicePort?: string(name='DevicePort', example='GigabitEthernet1/0/0', position='Query'),
  expirationDate?: string(name='ExpirationDate', example='2022-06-14 04:00:00', position='Query'),
  extAttributes?: string(name='ExtAttributes', example='{"Location":"cdc"}', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  isp?: string(name='Isp', example='中国电信', position='Query'),
  ispFormId?: string(name='IspFormId', example='space_isp_form-garigikip9zrog', position='Query'),
  ispId?: string(name='IspId', example='isp-dhyw2lxfpcs80d9', position='Query'),
  keyword?: string(name='Keyword', example='飞天园区_中国电信_主', position='Query'),
  keywords?: string(name='Keywords', example='测试', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  onlineDate?: string(name='OnlineDate', example='2022-06-13 12:00:00', position='Query'),
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Query'),
  spaceName?: string(name='SpaceName', example='阿里巴巴西溪园区', position='Query'),
}

model ListDedicatedLinesResponseBody = {
  dedicatedLines?: [ 
    {
      bandwidth?: int32(name='Bandwidth', example='100'),
      contact?: [ 
        {
          description?: string(name='Description'),
          email?: string(name='Email', example='example@aliyun.com'),
          name?: string(name='Name', example='张三'),
          phone?: string(name='Phone', example='133xxxxxxx'),
        }
      ](name='Contact'),
      dedicatedLineGateway?: string(name='DedicatedLineGateway', example='111.111.xxx.xxx'),
      dedicatedLineId?: string(name='DedicatedLineId', example='space_isp-6dk5xpoyoopr6obf'),
      dedicatedLineIp?: string(name='DedicatedLineIp', example='111.111.xxx.xxx'),
      dedicatedLineRole?: string(name='DedicatedLineRole', example='主'),
      description?: string(name='Description', example='备注'),
      deviceId?: string(name='DeviceId', example='device-evve560juend5owh'),
      deviceName?: string(name='DeviceName', example='HZYT_USG6620_A'),
      devicePort?: string(name='DevicePort', example='GigabitEthernet1/0/0'),
      expirationDate?: string(name='ExpirationDate', example='2022-06-14 04:00:00'),
      ext?: string(name='Ext', example='{\\"location\\":\\"cdc\\"}'),
      isp?: string(name='Isp', example='电信'),
      ispFormId?: string(name='IspFormId', example='space_isp_form-garigikip9zrog'),
      ispFormName?: string(name='IspFormName', example='普通专线'),
      ispId?: string(name='IspId', example='isp-dhyw2lxfpcs80d9'),
      keyword?: string(name='Keyword', example='飞天园区_中国电信_主'),
      onlineDate?: string(name='OnlineDate', example='2022-06-13 12:00:00'),
      phone?: string(name='Phone', example='133********'),
      physicalSpaceId?: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4'),
      spaceName?: string(name='SpaceName', example='阿里巴巴西溪园区'),
    }
  ](name='DedicatedLines'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='10'),
  requestId?: string(name='RequestId', example='8de935f6-90c7-444e-a2b4-bb4185153435'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListDedicatedLinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDedicatedLinesResponseBody(name='body'),
}

async function listDedicatedLines(request: ListDedicatedLinesRequest): ListDedicatedLinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDedicatedLines', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceFormsRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
}

model ListDeviceFormsResponseBody = {
  deviceForms?: [ 
    {
      accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置', example='true'),
      attributeList?: [ 
        {
          attributeBuiltIn?: boolean(name='AttributeBuiltIn', description='内置属性不可修改和删除', example='true'),
          attributeContent?: string(name='AttributeContent', example='ASW,PSW,DSW,CSW,CR,FW,AC/AP,UNKNOWN,AP'),
          attributeFormat?: string(name='AttributeFormat', description='设备形态属性值格式', example='STRING'),
          attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', description='前端查询控件是否支持模糊搜索', example='false'),
          attributeKey?: string(name='AttributeKey', description='设备形态属性主键', example='serviceStatus'),
          attributeName?: string(name='AttributeName', description='设备形态属性名称', example='服务状态'),
          attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符', example='前端占位符说明'),
          attributeQuery?: boolean(name='AttributeQuery', description='前端是否展示对应的查询控件', example='false'),
          attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象', example='status'),
          attributeRequirement?: boolean(name='AttributeRequirement', description='设备形态属性是否必填', example='true'),
          attributeSequence?: int32(name='AttributeSequence', example='1'),
          attributeTableDisplay?: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见', example='true'),
          attributeType?: string(name='AttributeType', description='设备形态属性值类型', example='ENUMS'),
          attributeUniqueness?: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一', example='false'),
        }
      ](name='AttributeList', description='设备形态属性列表'),
      configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成', example='true'),
      detailDisplay?: boolean(name='DetailDisplay', example='true'),
      deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf'),
      deviceFormName?: string(name='DeviceFormName', example='网络设备'),
      formBuiltIn?: boolean(name='FormBuiltIn', description='内置形态不可修改和删除', example='true'),
      relatedDeviceFormId?: string(name='RelatedDeviceFormId', example='form-4gnk12c2pdp4qu42'),
      resourceUse?: string(name='ResourceUse', example='DEV_OPS'),
      script?: string(name='Script', example='@login_device\\r\\ndef config_backup():\\r\\n    exec_cli(\\"show license\\", timeout=120)\\r\\n    return exec_cli(\\"show config\\", timeout=180)'),
      uniqueKey?: string(name='UniqueKey', example='SN'),
    }
  ](name='DeviceForms'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='11'),
  requestId?: string(name='RequestId', example='6d439436-ddde-4f26-aaf6-0470099b5c35'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListDeviceFormsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceFormsResponseBody(name='body'),
}

async function listDeviceForms(request: ListDeviceFormsRequest): ListDeviceFormsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceForms', 'GET', '/', 'json', false, 'json', request);
}

model ListDevicePropertiesRequest {
  deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-xxx', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
}

model ListDevicePropertiesResponseBody = {
  deviceProperties?: [ 
    {
      builtIn?: boolean(name='BuiltIn', example='true'),
      deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf'),
      deviceFormName?: string(name='DeviceFormName', example='网络设备'),
      devicePropertyId?: string(name='DevicePropertyId', example='property-z50wex75a1lkx7vx'),
      propertyContent?: string(name='PropertyContent', example='{   "H3C": [     "H3C S6800",     "S6850-56HF"   ],   "Huawei": [     "CE6851-48S6Q"   ] }'),
      propertyFormat?: string(name='PropertyFormat', example='JSON'),
      propertyKey?: string(name='PropertyKey', example='device_model'),
      propertyName?: string(name='PropertyName', example='厂商型号'),
    }
  ](name='DeviceProperties'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='1f598491-db6d-4276-a83a-3b5f57d4a4e1'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListDevicePropertiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDevicePropertiesResponseBody(name='body'),
}

async function listDeviceProperties(request: ListDevicePropertiesRequest): ListDevicePropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceProperties', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceResourcesRequest {
  businessType?: string(name='BusinessType', example='LOOPBACK、BUSINESS、  INTERCONNECTION', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  listType?: string(name='ListType', example='NORMAL、APPLY、RELEASE', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  setupProjectId?: string(name='SetupProjectId', example='setupProjectId', position='Query'),
}

model ListDeviceResourcesResponseBody = {
  deviceResource?: [ 
    {
      blockNumber?: string(name='BlockNumber', example='1'),
      business?: string(name='Business', example='{}'),
      config?: string(name='Config', example='config'),
      configTaskId?: string(name='ConfigTaskId', example='config_task'),
      configTaskStatus?: string(name='ConfigTaskStatus', example='UNDO, RUNNING, SUCCESS, FAILURE'),
      deliveryIp?: string(name='DeliveryIp', example='192.168.1.1'),
      deviceNumber?: string(name='DeviceNumber', example='ConfigurationSpecificationName'),
      deviceResourceId?: string(name='DeviceResourceId', description='代表资源一级ID的资源属性字段', example='resourceId'),
      generateConfig?: string(name='GenerateConfig', example='true'),
      hostName?: string(name='HostName', example='DSW-xxxyyy'),
      interConnection?: string(name='InterConnection', example='{}'),
      location?: string(name='Location', example='杭州-EFC'),
      loopback?: string(name='Loopback', example='{}'),
      managerIp?: string(name='ManagerIp', example='11.12.13.54'),
      model?: string(name='Model', example='5566'),
      params?: string(name='Params', example='params'),
      role?: string(name='Role', example='DSW'),
      setupProjectId?: string(name='SetupProjectId', description='建设项目id', example='xxx_zzz'),
      sn?: string(name='Sn', example='123'),
      specification?: string(name='Specification', example='config'),
      stack?: boolean(name='Stack', example='false'),
      vendor?: string(name='Vendor', example='Ruijie'),
    }
  ](name='DeviceResource'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='""'),
  requestId?: string(name='RequestId', example='requestId'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListDeviceResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceResourcesResponseBody(name='body'),
}

async function listDeviceResources(request: ListDeviceResourcesRequest): ListDeviceResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceResources', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceValuesRequest {
  attributeGroup?: string(name='AttributeGroup', example='model', position='Query'),
  attributeKeyword: string(name='AttributeKeyword', example='vendor', position='Query'),
  deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf', position='Query'),
  deviceFormName?: string(name='DeviceFormName', example='网络形态', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-xxx', position='Query'),
}

model ListDeviceValuesResponseBody = {
  deviceValues?: [ string ](name='DeviceValues'),
  requestId?: string(name='RequestId', description='Id of the request', example='6d439436-ddde-4f26-aaf6-0470099b5c35'),
}

model ListDeviceValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceValuesResponseBody(name='body'),
}

async function listDeviceValues(request: ListDeviceValuesRequest): ListDeviceValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceValues', 'GET', '/', 'json', false, 'json', request);
}

model ListDevicesRequest {
  calculateAmount?: boolean(name='CalculateAmount', example='true', position='Query'),
  deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf', position='Query'),
  deviceFormName?: string(name='DeviceFormName', example='网络设备', position='Query'),
  deviceIds?: [ string ](name='DeviceIds', shrink='json', position='Query'),
  extAttributes?: string(name='ExtAttributes', example='{"role":"ASW"}', position='Query'),
  hostName?: [ string ](name='HostName', example='space-ez6zd3w68ma4fsd4', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  ip?: [ string ](name='Ip', shrink='json', position='Query'),
  keyword?: string(name='Keyword', example='G1QH55J******', position='Query'),
  mac?: [ string ](name='Mac', shrink='json', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=0, maximum=100000, position='Query'),
  model?: [ string ](name='Model', shrink='json', position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Query'),
  physicalSpaceIds?: [ string ](name='PhysicalSpaceIds', shrink='json', position='Query'),
  securityDomain?: [ string ](name='SecurityDomain', example='AH01', shrink='json', position='Query'),
  serviceStatus?: [ string ](name='ServiceStatus', shrink='json', position='Query'),
  sn?: [ string ](name='Sn', shrink='json', position='Query'),
  vendor?: [ string ](name='Vendor', shrink='json', position='Query'),
}

model ListDevicesResponseBody = {
  amountDetail?: string(name='AmountDetail', example='{"networkOnlineCount":11,"serverOnlineCount":7,"iotOnlineCount":2,"otherOnlineCount":0,"networkMaintainCount":0,"serverMaintainCount":0,"iotMaintainCount":0,"otherMaintainCount":0,"networkUdfStatusCount":5,"serverUdfStatusCount":0,"iotUdfStatusCount":0,"otherUdfStatusCount":0,"ratioNetworkCount":16,"ratioServerCount":3,"ratioIotCount":0,"ratioOtherCount":0}'),
  amountUsed?: int32(name='AmountUsed', example='10'),
  devices?: [ 
    {
      deviceFormId?: string(name='DeviceFormId', example='form-u4ilnhu64h026lrf'),
      deviceFormName?: string(name='DeviceFormName', example='网络设备'),
      deviceId?: string(name='DeviceId', description='设备ID', example='device-evve560juend5owh'),
      enablePassword?: string(name='EnablePassword', example='123456'),
      extAttributes?: string(name='ExtAttributes', description='设备额外属性(JSON)', example='{"role":"ASW"}'),
      gmtCreate?: string(name='GmtCreate', example='2022-11-08 09:00:58'),
      gmtModified?: string(name='GmtModified', example='2023-01-16 09:43:20'),
      hostName?: string(name='HostName', description='主机名', example='HZYT_USG6620_A'),
      ip?: string(name='Ip', description='设备IP', example='10.17.101.1'),
      loginPassword?: string(name='LoginPassword', description='登录账号', example='123456'),
      loginType?: string(name='LoginType', description='登录类型，SSH或者TELNET', example='SSH,TELNET'),
      loginUsername?: string(name='LoginUsername', description='登录账号', example='admin'),
      mac?: string(name='Mac', description='设备MAC地址', example='b8:27:eb:34:3b:a2'),
      model?: string(name='Model', description='设备型号', example='USG6620'),
      physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID', example='space-ez6zd3w68ma4fsd4'),
      physicalSpaceName?: string(name='PhysicalSpaceName', description='物理空间名称', example='阿里巴巴西溪园区'),
      securityDomain?: string(name='SecurityDomain', description='设备安全域', example='IT'),
      serviceStatus?: string(name='ServiceStatus', description='设备状态', example='online'),
      sn?: string(name='Sn', description='设备SN', example='210235951910K7000016'),
      snmpAccountType?: string(name='SnmpAccountType', description='SNMP 账号类型', example='get'),
      snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号', example='v3'),
      snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase', example='pass****'),
      snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='SNMP Auth Protocol', example='MD5'),
      snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community', example='123456'),
      snmpPrivacyPassphrase?: string(name='SnmpPrivacyPassphrase', description='SNMP Privacy Passphrase', example='pass****'),
      snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='SNMP Privacy Protocol', example='DES'),
      snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='SNMP 安全级别', example='AUTH_PRIV'),
      snmpUsername?: string(name='SnmpUsername', description='SNMP 用户名', example='admin'),
      vendor?: string(name='Vendor', description='设备厂商', example='Huawei'),
    }
  ](name='Devices'),
  iotCoefficient?: int32(name='IotCoefficient', example='1'),
  maxResults?: int32(name='MaxResults', example='10'),
  networkCoefficient?: int32(name='NetworkCoefficient', example='1'),
  networkMaintenanceCoefficient?: int32(name='NetworkMaintenanceCoefficient', example='1'),
  nextToken?: int32(name='NextToken', example='10'),
  otherCoefficient?: int32(name='OtherCoefficient', example='1'),
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
  serverCoefficient?: int32(name='ServerCoefficient', example='1'),
  serverMaintenanceCoefficient?: int32(name='ServerMaintenanceCoefficient', example='1'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevices', 'POST', '/', 'json', false, 'json', request);
}

model ListEventDefinitionsRequest {
  eventId?: string(name='EventId', example='e-l22277akor7iajno', position='Query'),
  eventName?: string(name='EventName', position='Query'),
  eventType?: string(name='EventType', example='SYSLOG_EVENT', position='Query'),
  instanceId?: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
}

model ListEventDefinitionsResponseBody = {
  eventDefinitions?: [
    EventDefinition
  ](name='EventDefinitions'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken: string(name='NextToken', example='21'),
  requestId?: string(name='RequestId', description='Id of the request', example='BC004409-9E71-57FC-8E9A-7929665BF39B'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListEventDefinitionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEventDefinitionsResponseBody(name='body'),
}

async function listEventDefinitions(request: ListEventDefinitionsRequest): ListEventDefinitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventDefinitions', 'GET', '/', 'json', false, 'json', request);
}

model ListEventsRequest {
  alarmStatus?: string(name='AlarmStatus', example='WARNING', position='Query'),
  deviceId?: string(name='DeviceId', example='device-23ecvcvf0', position='Query'),
  eventType?: string(name='EventType', example='SYSLOG_EVENT', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxxx', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=300, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-dcfv9cof4e', position='Query'),
}

model ListEventsResponseBody = {
  events?: [
    Event
  ](name='Events'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken: string(name='NextToken', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='403CDD53-2A04-55C9-822A-6EE4931C3332'),
  statistics?: [ 
    {
      count?: int32(name='Count', example='10'),
      status?: string(name='Status', example='WARNING'),
    }
  ](name='Statistics'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEventsResponseBody(name='body'),
}

async function listEvents(request: ListEventsRequest): ListEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEvents', 'GET', '/', 'json', false, 'json', request);
}

model ListInspectionDevicesRequest {
  appState?: string(name='AppState', example='online/offline', position='Query'),
  instanceId?: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  model?: [ string ](name='Model', shrink='json', position='Query'),
  role?: string(name='Role', example='ASW', position='Query'),
  space?: string(name='Space', example='阿里巴巴西溪园区', position='Query'),
  vendor?: string(name='Vendor', example='Huawei', position='Query'),
}

model ListInspectionDevicesResponseBody = {
  inspectionScripts?: [ 
    {
      appState?: string(name='AppState', example='online'),
      deviceId?: string(name='DeviceId', example='wew'),
      deviceState?: string(name='DeviceState', example='online'),
      hostName?: string(name='HostName', example='weq'),
      manageIp?: string(name='ManageIp', example='192.168.xxx.xxx'),
      model?: string(name='Model', example='5710'),
      role?: string(name='Role', example='ASW'),
      space?: string(name='Space', example='EFC'),
      vendor?: string(name='Vendor', example='Huawei'),
    }
  ](name='InspectionScripts', description='content'),
  requestId?: string(name='RequestId', description='Id of the request', example='B24B378C-6025-58E2-A1A5-A5E4FBBF2D64'),
}

model ListInspectionDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInspectionDevicesResponseBody(name='body'),
}

async function listInspectionDevices(request: ListInspectionDevicesRequest): ListInspectionDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInspectionDevices', 'GET', '/', 'json', false, 'json', request);
}

model ListInspectionTaskReportsRequest {
  inspectionItemId?: string(name='InspectionItemId', example='sssooo', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  vendor?: string(name='Vendor', example='Ruijie', position='Query'),
}

model ListInspectionTaskReportsResponseBody = {
  inspectionTask?: [ 
    {
      actualDeviceNumber?: long(name='ActualDeviceNumber', example='2'),
      alarmNumber?: long(name='AlarmNumber', example='21'),
      alarmStatistic?: [ 
        {
          criticalNumber?: long(name='CriticalNumber', example='21'),
          inspectionItem?: string(name='InspectionItem', example='get_interface'),
          model?: string(name='Model', example='5750'),
          vendor?: string(name='Vendor', example='Ruijie'),
          warningNumber?: long(name='WarningNumber', example='12'),
        }
      ](name='AlarmStatistic'),
      criticalNumber?: long(name='CriticalNumber', example='2'),
      criticalRate?: string(name='CriticalRate', example='1%'),
      deviceRate?: string(name='DeviceRate', example='1%'),
      failureStatistic?: string(name='FailureStatistic', example='“”'),
      failureTaskNumber?: long(name='FailureTaskNumber', example='2'),
      failureTaskRate?: string(name='FailureTaskRate', example='1%'),
      normalNumber?: long(name='NormalNumber', example='21'),
      normalRate?: string(name='NormalRate', example='1%'),
      runningTaskNumber?: long(name='RunningTaskNumber', example='2'),
      runningTaskRate?: string(name='RunningTaskRate', example='1%'),
      successTaskNumber?: long(name='SuccessTaskNumber', example='2'),
      successTaskRate?: string(name='SuccessTaskRate', example='1%'),
      taskNumber?: long(name='TaskNumber', example='12'),
      totalDeviceNumber?: long(name='TotalDeviceNumber', example='12'),
      warningNumber?: long(name='WarningNumber', example='65'),
      warningRate?: string(name='WarningRate', example='1%'),
    }
  ](name='InspectionTask'),
  requestId?: string(name='RequestId'),
}

model ListInspectionTaskReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInspectionTaskReportsResponseBody(name='body'),
}

async function listInspectionTaskReports(request: ListInspectionTaskReportsRequest): ListInspectionTaskReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInspectionTaskReports', 'GET', '/', 'json', false, 'json', request);
}

model ListInspectionTasksRequest {
  alarmStatus?: [ string ](name='AlarmStatus', shrink='json', position='Query'),
  deviceType?: string(name='DeviceType', example='NETWORK', position='Query'),
  hostName?: string(name='HostName', example='ASW-S-3F1-1.CD1', position='Query'),
  ip?: string(name='IP', example='127.0.0.1', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  itemId?: string(name='ItemId', example='ITEMsjie22342', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=0, maximum=1000, position='Query'),
  model?: string(name='Model', example='SAG-100WM', position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  role?: string(name='Role', example='ASW', position='Query'),
  space?: string(name='Space', example='XX门店', position='Query'),
  taskStatus?: string(name='TaskStatus', example='SUCCESS', position='Query'),
  vendor?: string(name='Vendor', example='Alibaba', position='Query'),
}

model ListInspectionTasksResponseBody = {
  inspectionTasks?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', example='WARNING'),
      deviceId?: string(name='DeviceId', example='DEVICEsljwo234'),
      deviceType?: string(name='DeviceType', example='NETWORK'),
      errorCode?: string(name='ErrorCode', example='AGENT_LOGIN_FAIL'),
      executionBeginTime?: string(name='ExecutionBeginTime', example='2020-12-23 10:01:05'),
      executionEndTime?: string(name='ExecutionEndTime', example='2020-12-23 10:01:05'),
      hostName?: string(name='HostName', example='30.20.128.2'),
      ip?: string(name='IP', example='30.20.128.2'),
      inspectionAlarmRules?: [ 
        {
          actualValue?: string(name='ActualValue', example='11'),
          alarmExpression?: string(name='AlarmExpression', example='>'),
          alarmLevel?: string(name='AlarmLevel', example='warning'),
          alarmOperator?: string(name='AlarmOperator', example='A'),
          alarmValue?: string(name='AlarmValue', example='10'),
        }
      ](name='InspectionAlarmRules'),
      inspectionMessage?: string(name='InspectionMessage', example='error: Telnet Login failed'),
      inspectionResult?: string(name='InspectionResult', example='{}'),
      isInspectionResultTruncation?: boolean(name='IsInspectionResultTruncation', example='true'),
      itemId?: string(name='ItemId', example='ITEMsjie22342'),
      itemName?: string(name='ItemName', example='get_status'),
      model?: [ string ](name='Model', example='F101'),
      role?: string(name='Role', example='ASW'),
      scriptId?: string(name='ScriptId', example='TEMPLATEsdjlsa2334-2343-23'),
      space?: string(name='Space', example='武汉光谷国际店'),
      taskId?: string(name='TaskId', example='TASK-swe-23-sds'),
      taskStatus?: string(name='TaskStatus', example='SUCCESS'),
      vendor?: string(name='Vendor', example='Alibaba'),
    }
  ](name='InspectionTasks'),
  nextToken?: int32(name='NextToken', example='""或"1"'),
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4ABE-B75E-A6539A9BAAA8'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListInspectionTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInspectionTasksResponseBody(name='body'),
}

async function listInspectionTasks(request: ListInspectionTasksRequest): ListInspectionTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInspectionTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      instanceDeviceMaxCount?: string(name='InstanceDeviceMaxCount', example='100'),
      instanceEndDate?: string(name='InstanceEndDate', example='2023-10-18 00:00:00'),
      instanceId?: string(name='InstanceId', example='cmn-cn-7mz2mh3tj02'),
      instanceName?: string(name='InstanceName'),
      instanceOpenDate?: string(name='InstanceOpenDate', example='2023-09-18 00:00:00'),
      instanceSpec?: string(name='InstanceSpec', example='profession'),
      instanceStatus?: string(name='InstanceStatus', example='RUNNING'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', description='Id of the request', example='23D11030-3611-5648-91A5-255A379E6ABA'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListIpBlocksRequest {
  bottomNode?: boolean(name='BottomNode', example='false', position='Query'),
  category?: string(name='Category', example='IPV4', position='Query'),
  extAttributes?: map[string]any(name='ExtAttributes', shrink='json', position='Query'),
  instanceId?: string(name='InstanceId', example='InstanceId', position='Query'),
  ip?: string(name='Ip', example='10.0.0.0', position='Query'),
  ipBlockCode?: string(name='IpBlockCode', example='10.0.0.0/8', position='Query'),
  ipList?: [ string ](name='IpList', shrink='json', position='Query'),
  leafNode?: boolean(name='LeafNode', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', example='50', minimum=0, maximum=100, position='Query'),
  netBusiness?: string(name='NetBusiness', example='GUSET', position='Query'),
  netType?: string(name='NetType', example='PRIVATE', position='Query'),
  nextToken?: string(name='NextToken', example='50', position='Query'),
  parentUid?: string(name='ParentUid', example='ip_block-12345aaaaabcd', position='Query'),
  status?: string(name='Status', example='using', position='Query'),
  subNetBusiness?: string(name='SubNetBusiness', example='static', position='Query'),
  topParent?: boolean(name='TopParent', example='false', position='Query'),
  treeType?: boolean(name='TreeType', example='true', position='Query'),
  zoneName?: string(name='ZoneName', example='xx园区', position='Query'),
}

model ListIpBlocksResponseBody = {
  ipBlock?: [ 
    {
      abbr?: string(name='Abbr', example='TEST-别名'),
      application?: string(name='Application', description='IP用途', example='员工出口IP'),
      backupDeviceName?: string(name='BackupDeviceName', description='备份设备名称', example='ASW-2'),
      businessTypeId?: string(name='BusinessTypeId', description='业务类型UID', example='asdaasd'),
      businessTypeName?: string(name='BusinessTypeName', example='互联地址'),
      category?: string(name='Category', example='IPV4/IPV6'),
      description?: string(name='Description', description='备注', example='Description'),
      deviceName?: string(name='DeviceName', description='设备名称', example='ASW-1'),
      extAttributes?: map[string]any(name='ExtAttributes'),
      ipBlockCode?: string(name='IpBlockCode', example='10.0.0.0/8'),
      ipBlockId?: string(name='IpBlockId', example='adaieaoweif_s3834'),
      ipBlocks?: [ string ](name='IpBlocks'),
      isLock?: long(name='IsLock', example='0'),
      limitZoneTypes?: string(name='LimitZoneTypes', example='zone-xxx'),
      netBusiness?: string(name='NetBusiness', description='公网地址类型 INC GUEST VIP', example='INC'),
      netType?: string(name='NetType', description='公网私网标志 PUBLIC PRIVATE', example='24'),
      ownership?: string(name='Ownership', description='IP归属', example='阿里'),
      parentId?: string(name='ParentId', example='123'),
      queryIpList?: [ string ](name='QueryIpList'),
      splitRate?: double(name='SplitRate', example='0.38'),
      status?: string(name='Status', example='using'),
      subBusinessTypeName?: string(name='SubBusinessTypeName', example='商业网'),
      tasks?: [ 
        {
          domain?: string(name='Domain', example='PING-TEST'),
          gmtCreateTime?: string(name='GmtCreateTime', example='2022-11-20 11:12:43'),
          gmtModifiedTime?: string(name='GmtModifiedTime', example='2022-11-20 11:12:43'),
          ip?: string(name='Ip', example='127.0.0.1/28'),
          ipList?: [ 
            {
              devId?: string(name='DevId', example='device_xxx'),
              devName?: string(name='DevName', example='TEST'),
              ip?: string(name='Ip', example='127.0.0.1'),
              origin?: string(name='Origin', example='DOMAIN'),
              ping?: string(name='Ping', example='FAIL/OK'),
            }
          ](name='IpList'),
          msg?: string(name='Msg', example='OK'),
          status?: string(name='Status', example='OK'),
          taskId?: string(name='TaskId', example='b302f0eb-c97a-44f8-8557-320e4da7a68c'),
          totalIpCount?: long(name='TotalIpCount', example='14'),
        }
      ](name='Tasks'),
      zoneLayer?: [ 
        {
          name?: string(name='Name', description='园区层级名称', example='小型园区'),
          value?: string(name='Value', description='园区层级值', example='xx-xx'),
        }
      ](name='ZoneLayer', description='园区层级'),
      zoneName?: string(name='ZoneName', example='西溪园区'),
    }
  ](name='IpBlock'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='10'),
  requestId?: string(name='RequestId', example='RequestId'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListIpBlocksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIpBlocksResponseBody(name='body'),
}

async function listIpBlocks(request: ListIpBlocksRequest): ListIpBlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpBlocks', 'GET', '/', 'json', false, 'json', request);
}

model ListLinksRequest {
  deviceNameA?: string(name='DeviceNameA', position='Query'),
  deviceNameB?: string(name='DeviceNameB', position='Query'),
  ipA?: string(name='IpA', position='Query'),
  ipB?: string(name='IpB', position='Query'),
  linkName?: string(name='LinkName', position='Query'),
  linkNo?: string(name='LinkNo', position='Query'),
  linkStatus?: string(name='LinkStatus', position='Query'),
  linkType?: string(name='LinkType', position='Query'),
  maxResults: int32(name='MaxResults', position='Query'),
  nextToken: string(name='NextToken', position='Query'),
  portA?: string(name='PortA', position='Query'),
  portB?: string(name='PortB', position='Query'),
}

model ListLinksResponseBody = {
  content?: [ 
    {
      deviceNameA?: string(name='DeviceNameA', description='A端设备名'),
      deviceNameB?: string(name='DeviceNameB', description='B端设备名'),
      gmtCreate?: string(name='GmtCreate', description='创建时间'),
      gmtModified?: string(name='GmtModified', description='修改时间'),
      idxA?: string(name='IdxA', description='A端端口索引'),
      idxB?: string(name='IdxB', description='B端端口索引'),
      ipA?: string(name='IpA', description='A端IP'),
      ipB?: string(name='IpB', description='B端IP'),
      jobId?: string(name='JobId', description='链路发现任务'),
      linkName?: string(name='LinkName', description='链路名称'),
      linkNo?: string(name='LinkNo', description='链路编号'),
      linkStatus?: string(name='LinkStatus', description='链路状态'),
      linkType?: string(name='LinkType', description='链路类型（单端、双端）'),
      message?: string(name='Message', description='报错信息或者日志'),
      portA?: string(name='PortA', description='A端端口名'),
      portB?: string(name='PortB', description='B端端口名'),
      portDescA?: string(name='PortDescA'),
      portDescB?: string(name='PortDescB'),
      portStatusA?: string(name='PortStatusA', description='A端端口状态'),
      portStatusB?: string(name='PortStatusB', description='B端端口状态'),
      portTypeA?: string(name='PortTypeA', description='A端端口类型'),
      portTypeB?: string(name='PortTypeB', description='B端端口类型'),
      regionId?: string(name='RegionId', description='代表region的资源属性字段'),
    }
  ](name='Content'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListLinksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLinksResponseBody(name='body'),
}

async function listLinks(request: ListLinksRequest): ListLinksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLinks', 'GET', '/', 'json', false, 'json', request);
}

model ListLogsRequest {
  alarmStatus?: string(name='AlarmStatus', example='WARNING', position='Query'),
  content?: string(name='Content', example='hostname', position='Query'),
  deviceId?: string(name='DeviceId', example='device-134e3e2vf', position='Query'),
  end: long(name='End', example='1669686840', minimum=1604160000, maximum=2208960000, position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-13ef013e', position='Query'),
  logType: string(name='LogType', example='SYSLOG', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=200, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  sort?: string(name='Sort', example='ReceiveTime desc', position='Query'),
  start: long(name='Start', example='1669686840', minimum=1604160000, maximum=2208960000, position='Query'),
}

model ListLogsResponseBody = {
  logs?: [ 
    {
      alarmObject?: string(name='AlarmObject', example='card'),
      alarmStatus?: string(name='AlarmStatus', example='WARNING'),
      alarmType?: string(name='AlarmType', example='AlarmType'),
      deviceId?: string(name='DeviceId', example='device-134e3e2vf'),
      log?: string(name='Log', example='LOG'),
      receiveTime?: string(name='ReceiveTime', example='1669688743'),
      resourceDevice?: {
        hostName?: string(name='HostName', example='hostname'),
        physicalSpace?: string(name='PhysicalSpace'),
      }(name='ResourceDevice'),
      time?: string(name='Time', example='1669688743'),
    }
  ](name='Logs'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken: string(name='NextToken', example='11'),
  requestId?: string(name='RequestId', example='14180954-5B8B-5E51-B35D-1879F09B06B6'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogsResponseBody(name='body'),
}

async function listLogs(request: ListLogsRequest): ListLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogs', 'GET', '/', 'json', false, 'json', request);
}

model ListMonitorDataRequest {
  aggregateDataId?: string(name='AggregateDataId', example='a-cjqd1crux50udtt0', position='Query'),
  aggregationType?: string(name='AggregationType', example='5m-sum', position='Query'),
  appId?: string(name='AppId', example='app-wgh09k2gam3k4ggm', position='Query'),
  dataItem: string(name='DataItem', example='avg_latency', position='Query'),
  dataType: string(name='DataType', example='SINGLE', position='Query'),
  dedicatedLineId?: string(name='DedicatedLineId', example='space_isp-wgh09k2gam3k4ggm', position='Query'),
  deviceId?: string(name='DeviceId', example='d-fwq29cmatva28', position='Query'),
  end: long(name='End', example='1609431000', minimum=1604160000, maximum=2208960000, position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  key?: string(name='Key', example='in_bps', position='Query'),
  monitorItemId?: string(name='MonitorItemId', example='m-52gmqniln3u53n32', position='Query'),
  portCollectionId?: string(name='PortCollectionId', example='p-26dlna3ez8gejgrz', position='Query'),
  start: long(name='Start', example='1609430400', minimum=1604160000, maximum=2208960000, position='Query'),
}

model ListMonitorDataResponseBody = {
  monitorData?: [ 
    {
      dataItem?: string(name='DataItem', example='avg_latency'),
      key?: string(name='Key', example='in_bps'),
      timestamp?: long(name='Timestamp', example='1609430460000'),
      value?: string(name='Value', example='10.1'),
    }
  ](name='MonitorData'),
  requestId?: string(name='RequestId', example='15292160-382F-46F2-B241-95EFB54BA434'),
}

model ListMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMonitorDataResponseBody(name='body'),
}

async function listMonitorData(request: ListMonitorDataRequest): ListMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMonitorData', 'GET', '/', 'json', false, 'json', request);
}

model ListNotificationHistoriesRequest {
  aggregateDataId?: string(name='AggregateDataId', example='a-52gmqniln3u53n32', position='Query'),
  alarmStatus?: string(name='AlarmStatus', description='监控状态', example='WARNING', position='Query'),
  appId?: string(name='AppId', description='应用ID', example='app-gh6b3a8yxtkb86yy', position='Query'),
  dedicatedLineId?: string(name='DedicatedLineId', example='d-52gmqniln3u53n32', position='Query'),
  deviceId?: string(name='DeviceId', example='device-jrjb476ub06', position='Query'),
  end?: long(name='End', description='查询结束时间戳', example='1659930240', minimum=1604160000, maximum=2208960000, position='Query'),
  eventItemId?: string(name='EventItemId', description='事件id', example='e-mkl2gnr3am3amlzz', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-tl3267yvz03', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  message?: string(name='Message', description='发送内容', example='Alarm', position='Query'),
  monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6', position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  notificationGroupId?: string(name='NotificationGroupId', description='通知组id', example='n-yqqqknft7kzemgwe', position='Query'),
  notificationMode?: string(name='NotificationMode', description='发送方式', example='DING_GROUP', position='Query'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间ID', example='space-h47sn4e6d59n5ooh', position='Query'),
  portCollectionId?: string(name='PortCollectionId', description='端口集ID', example='p-y12angok0gf881n1', position='Query'),
  start?: long(name='Start', description='查询开始时间戳', example='1667797440', minimum=1604160000, maximum=2208960000, position='Query'),
  status?: string(name='Status', description='发送状态', example='SUCCESS', position='Query'),
  type: string(name='Type', example='SINGLE', position='Query'),
}

model ListNotificationHistoriesResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken: string(name='NextToken', example='10'),
  notificationHistories?: [ 
    {
      aggregateDataId?: string(name='AggregateDataId', example='a-52gmqniln3u53n32'),
      alarmStatus?: string(name='AlarmStatus', description='监控状态', example='WARNING'),
      appId?: string(name='AppId', description='应用ID', example='a-52gmqniln3u53n32'),
      dedicatedLineId?: string(name='DedicatedLineId', example='d-52gmqniln3u53n32'),
      deviceId?: string(name='DeviceId', example='device-jrjb476ub06'),
      message?: string(name='Message', example='alarm content'),
      monitorItemId?: string(name='MonitorItemId', example='m-22ut5sn54o35wsz6'),
      notificationGroupId?: string(name='NotificationGroupId', example='n-22ut5sn54o35wsz6'),
      notificationGroupName?: string(name='NotificationGroupName', example='Notification Group'),
      notificationMode?: string(name='NotificationMode', example='DING_GROUP'),
      output?: string(name='Output', example='OK'),
      portCollectionId?: string(name='PortCollectionId', description='端口集ID', example='p-52gmqniln3u53n32'),
      status?: string(name='Status', example='SUCCESS'),
      time?: string(name='Time', example='2021-01-01 00:01:00'),
    }
  ](name='NotificationHistories'),
  requestId?: string(name='RequestId', description='request Id', example='AC8F05E6-AFBB-4AAE-B75E-A6539A9BAAA8'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListNotificationHistoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNotificationHistoriesResponseBody(name='body'),
}

async function listNotificationHistories(request: ListNotificationHistoriesRequest): ListNotificationHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNotificationHistories', 'GET', '/', 'json', false, 'json', request);
}

model ListNotificationHistoriesStatisticsRequest {
  end?: long(name='End', example='1609431000', minimum=1604160000, maximum=2208960000, position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  isDedicatedLine?: boolean(name='IsDedicatedLine', example='true', position='Query'),
  isDevice?: boolean(name='IsDevice', example='true', position='Query'),
  isMonitorItem?: boolean(name='IsMonitorItem', example='true', position='Query'),
  isPhysicalSpace?: boolean(name='IsPhysicalSpace', example='true', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-dec14rfcf1', position='Query'),
  start?: long(name='Start', example='1609431000', minimum=1604160000, maximum=2208960000, position='Query'),
  type?: string(name='Type', example='SINGLE', position='Query'),
}

model ListNotificationHistoriesStatisticsResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken: string(name='NextToken', example='10'),
  quota?: [ 
    {
      count?: string(name='Count', example='10'),
      mode?: string(name='Mode', example='SMS'),
      quota?: string(name='Quota', example='10'),
    }
  ](name='Quota'),
  requestId?: string(name='RequestId', description='Id of the request', example='0E47FBFF-DCF5-5636-80BD-FD67545FDD2A'),
  statistics?: [ 
    {
      count?: string(name='Count', example='10'),
      name?: string(name='Name'),
      resourceId?: string(name='ResourceId', example='space-1wedcwv13wdec'),
    }
  ](name='Statistics'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListNotificationHistoriesStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNotificationHistoriesStatisticsResponseBody(name='body'),
}

async function listNotificationHistoriesStatistics(request: ListNotificationHistoriesStatisticsRequest): ListNotificationHistoriesStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNotificationHistoriesStatistics', 'GET', '/', 'json', false, 'json', request);
}

model ListOsVersionsRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  maxResults: int32(name='MaxResults', example='10', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
}

model ListOsVersionsResponseBody = {
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='1'),
  osVersion?: [ 
    {
      bootPatch?: string(name='BootPatch', example='{"name":"xxx/yyy"}'),
      createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
      featurePatch?: string(name='FeaturePatch', example='{"name":"xxx/yyy"}'),
      fileName?: string(name='FileName', description='文件名', example='zzz'),
      filePath?: string(name='FilePath', description='文件路径', example='/xxx/zzz'),
      model?: string(name='Model', description='型号', example='6510'),
      osVersion?: string(name='OsVersion', description='系统版本', example='1.0'),
      osVersionId?: string(name='OsVersionId', example='xxx_yyy'),
      status?: string(name='Status', description='状态', example='USED、UNUSED'),
      systemPatch?: string(name='SystemPatch', example='{"name":"xxx/yyy"}'),
      updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
      vendor?: string(name='Vendor', description='厂商', example='Ruijie'),
    }
  ](name='OsVersion'),
  requestId?: string(name='RequestId', example='requestId'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListOsVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOsVersionsResponseBody(name='body'),
}

async function listOsVersions(request: ListOsVersionsRequest): ListOsVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOsVersions', 'GET', '/', 'json', false, 'json', request);
}

model ListPhysicalSpacesRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  physicalSpaceIds?: [ string ](name='PhysicalSpaceIds', example='1', shrink='json', position='Query'),
  physicalSpaceName?: string(name='PhysicalSpaceName', example='阿里巴巴西溪园区', position='Query'),
}

model ListPhysicalSpacesResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='11'),
  physicalSpaces?: [ 
    {
      address?: string(name='Address', example='文一西路969号'),
      city?: string(name='City', example='杭州市'),
      country?: string(name='Country', example='中国'),
      instance?: string(name='Instance', example='{}'),
      owner?: string(name='Owner', example='张三'),
      physicalSpaceId?: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4'),
      physicalSpaceName?: string(name='PhysicalSpaceName', example='阿里巴巴西溪园区'),
      province?: string(name='Province', example='浙江省'),
      remark?: string(name='Remark', example='备注'),
      securityDomainList?: [ string ](name='SecurityDomainList'),
      spaceAbbreviation?: string(name='SpaceAbbreviation', example='yq'),
      spaceType?: string(name='SpaceType', example='园区'),
    }
  ](name='PhysicalSpaces'),
  requestId?: string(name='RequestId', example='a1c7e2b4-174e-4557-a96d-d4cbf83988a6'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListPhysicalSpacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPhysicalSpacesResponseBody(name='body'),
}

async function listPhysicalSpaces(request: ListPhysicalSpacesRequest): ListPhysicalSpacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPhysicalSpaces', 'GET', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  code?: string(name='Code', example='ServiceUnavailable'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The request has failed due to a temporary failure of the server.'),
  requestId?: string(name='RequestId', description='Id of the request', example='4BED6D61-2EFC-5F03-B5D1-A2AA7009523D'),
  success?: boolean(name='Success', example='True'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListResourceInformationsRequest {
  architectureId?: string(name='ArchitectureId', example='arch_ewx', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='""', position='Query'),
}

model ListResourceInformationsResponseBody = {
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='1'),
  requestId?: string(name='RequestId', example='requestId'),
  resourceInformation?: [ 
    {
      information?: [ 
        {
          key?: string(name='Key', description='键', example='IP'),
          keyAction?: string(name='KeyAction', description='键动作', example='/xxx/zzz'),
          keyAttribute?: string(name='KeyAttribute', description='键属性', example='IP地址'),
          keyDescription?: string(name='KeyDescription', description='键描述', example='Ip地址'),
        }
      ](name='Information', description='信息'),
      resourceAttribute?: string(name='ResourceAttribute', description='资源属性', example='6510'),
      resourceInformationId?: string(name='ResourceInformationId', description='代表资源一级ID的资源属性字段'),
      resourceType?: string(name='ResourceType', description='资源类型', example='CMDB'),
    }
  ](name='ResourceInformation'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListResourceInformationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceInformationsResponseBody(name='body'),
}

async function listResourceInformations(request: ListResourceInformationsRequest): ListResourceInformationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceInformations', 'GET', '/', 'json', false, 'json', request);
}

model ListResourceInstancesRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  setupProjectId?: string(name='SetupProjectId', example='adaieaoweif_s3834', position='Query'),
}

model ListResourceInstancesResponseBody = {
  logicResource?: [ 
    {
      keyList?: [ 
        {
          key?: string(name='Key'),
          keyAction?: string(name='KeyAction'),
          keyAttribute?: string(name='KeyAttribute'),
          keyDescription?: string(name='KeyDescription'),
          value?: string(name='Value'),
        }
      ](name='KeyList'),
      resourceAttribute?: string(name='ResourceAttribute'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='LogicResource'),
  requestId?: string(name='RequestId', example='请求id'),
}

model ListResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceInstancesResponseBody(name='body'),
}

async function listResourceInstances(request: ListResourceInstancesRequest): ListResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListResourceTypesRequest {
}

model ListResourceTypesResponseBody = {
  requestId?: string(name='RequestId'),
  resourceType?: [ 
    {
      key?: string(name='Key'),
      resourceType?: string(name='ResourceType'),
      resourceTypeName?: string(name='ResourceTypeName'),
    }
  ](name='ResourceType'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceTypes', 'GET', '/', 'json', false, 'json', request);
}

model ListSetupProjectsRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  spaceId?: string(name='SpaceId', example='spaceIdxxxyyy', position='Query'),
  status?: string(name='Status', example='USED、USE', position='Query'),
}

model ListSetupProjectsResponseBody = {
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: int32(name='NextToken', example='1'),
  requestId?: string(name='RequestId', example='requestId'),
  setupProject?: [ 
    {
      archVersion?: string(name='ArchVersion', description='架构id', example='xxxyyy'),
      architectureId?: string(name='ArchitectureId', example='archVersionId'),
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2021-03-27 00:00:00'),
      deliveryTime?: string(name='DeliveryTime', description='预计交付时间', example='2021-03-27 00:00:00'),
      description?: string(name='Description', example='2021-03-27'),
      nodes?: string(name='Nodes', description='节点', example='[]'),
      packages?: [ 
        {
          deviceNumber?: long(name='DeviceNumber', description='设备号', example='1'),
          model?: string(name='Model', description='型号', example='6510'),
          role?: string(name='Role', description='角色', example='DSW'),
          vendor?: string(name='Vendor', description='厂商', example='Ruijie'),
        }
      ](name='Packages', description='套餐'),
      progress?: string(name='Progress', example='build'),
      setupProjectId?: string(name='SetupProjectId', description='代表资源一级ID的资源属性字段', example='setupProjectIdxxxyyy'),
      spaceId?: string(name='SpaceId', description='物理空间uId', example='spaceIdxxxyyy'),
      spaceName?: string(name='SpaceName', example='WHHM'),
      spaceType?: string(name='SpaceType', example='园区'),
    }
  ](name='SetupProject'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListSetupProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSetupProjectsResponseBody(name='body'),
}

async function listSetupProjects(request: ListSetupProjectsRequest): ListSetupProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSetupProjects', 'GET', '/', 'json', false, 'json', request);
}

model ListSpaceModelsRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
  spaceType?: string(name='SpaceType', example='XA1-CLUSTER-1', position='Query'),
  status?: string(name='Status', example='USED', position='Query'),
}

model ListSpaceModelsResponseBody = {
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  spaceModel?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-22 10:39:17'),
      sort?: [ 
        {
          level?: long(name='Level', example='1'),
          levelName?: string(name='LevelName', example='园区'),
        }
      ](name='Sort', description='层级'),
      spaceModelId?: string(name='SpaceModelId', description='代表资源一级ID的资源属性字段'),
      spaceType?: string(name='SpaceType', description='物理空间类型', example='xxxyyy'),
      status?: string(name='Status', example='LOCK'),
      updateTime?: string(name='UpdateTime', example='2020-12-22 10:39:17'),
    }
  ](name='SpaceModel'),
  totalCount?: int32(name='TotalCount'),
}

model ListSpaceModelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSpaceModelsResponseBody(name='body'),
}

async function listSpaceModels(request: ListSpaceModelsRequest): ListSpaceModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSpaceModels', 'GET', '/', 'json', false, 'json', request);
}

model ListTasksHistoriesRequest {
  deviceId?: string(name='DeviceId', example='DEVICE-4ABE-B75E-A6539A9BAAA8', position='Query'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  itemId?: string(name='ItemId', example='ITEM-4ABE-B75E-A6539A9BAAA8', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='1', position='Query'),
}

model ListTasksHistoriesResponseBody = {
  inspectionTasks?: [ 
    {
      deviceDisplay?: string(name='DeviceDisplay', example='{}'),
      errorCode?: string(name='ErrorCode', example='OK'),
      executionBeginTime?: string(name='ExecutionBeginTime', example='2020-10-22 02:00:02'),
      executionEndTime?: string(name='ExecutionEndTime', example='2020-10-22 02:00:02'),
      inspectionAlarmRules?: [ 
        {
          actualValue?: string(name='ActualValue', example='11'),
          alarmExpression?: string(name='AlarmExpression', example='A>10'),
          alarmLevel?: string(name='AlarmLevel', example='warning'),
          alarmOperator?: string(name='AlarmOperator', example='>'),
          alarmValue?: string(name='AlarmValue', example='10'),
        }
      ](name='InspectionAlarmRules'),
      inspectionResult?: string(name='InspectionResult', example='{}'),
      taskId?: string(name='TaskId', example='TASK-wews-nosa'),
    }
  ](name='InspectionTasks'),
  nextToken?: int32(name='NextToken', example='1'),
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4ABE-B75E-A6539A9BAAA8'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListTasksHistoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTasksHistoriesResponseBody(name='body'),
}

async function listTasksHistories(request: ListTasksHistoriesRequest): ListTasksHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasksHistories', 'GET', '/', 'json', false, 'json', request);
}

model ListTreePhysicalSpacesRequest {
  instanceId: string(name='InstanceId', position='Query'),
  maxResults?: string(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  physicalSpaceIds?: [ string ](name='PhysicalSpaceIds', shrink='json', position='Query'),
  physicalSpaceName?: string(name='PhysicalSpaceName', position='Query'),
  tree?: boolean(name='Tree', position='Query'),
}

model ListTreePhysicalSpacesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: int32(name='NextToken'),
  physicalSpaces?: [
    PhysicalSpaceDto
  ](name='PhysicalSpaces'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListTreePhysicalSpacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTreePhysicalSpacesResponseBody(name='body'),
}

async function listTreePhysicalSpaces(request: ListTreePhysicalSpacesRequest): ListTreePhysicalSpacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTreePhysicalSpaces', 'GET', '/', 'json', false, 'json', request);
}

model LockSpaceModelRequest {
  instanceId?: string(name='InstanceId', description='instanceId', example='instanceId', position='Query'),
  spaceModelId: string(name='SpaceModelId', example='xxxyyy', position='Query'),
}

model LockSpaceModelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='requestId'),
}

model LockSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockSpaceModelResponseBody(name='body'),
}

async function lockSpaceModel(request: LockSpaceModelRequest): LockSpaceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockSpaceModel', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseIPRequest {
  deviceResourceId?: string(name='DeviceResourceId', example='deviceResourceId', position='Query'),
  deviceResourceIds?: [ string ](name='DeviceResourceIds', shrink='json', position='Query'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  ipType?: string(name='IpType', example='LOOPBACK_SEGMENT、INTERCONNECTION_SEGMENT  LOOPBACK、BUSINESS、  INTERCONNECTION', position='Query'),
  setupProjectId: string(name='SetupProjectId', example='xxxyyy', position='Query'),
}

model ReleaseIPResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseIPResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseIPResponseBody(name='body'),
}

async function releaseIP(request: ReleaseIPRequest): ReleaseIPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseIP', 'POST', '/', 'json', false, 'json', request);
}

model RetryTasksRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  retryTasks: [ 
    {
      deviceId: string(name='DeviceId', example='DEVICE0489b577-33b3-4991-bdc5-1cdabc1a82e2'),
      itemName?: string(name='ItemName', example='config_backup'),
      scriptId?: string(name='ScriptId', example='SCRIPT0489b577-33b3-4991-bdc5-1cdabc1a82e2'),
    }
  ](name='RetryTasks', example='RetryTasks', shrink='json', position='Query'),
}

model RetryTasksResponseBody = {
  requestId?: string(name='RequestId', example='AC8F05E6-AFBB-4ABE-B75E-A6539A9BAAA8'),
}

model RetryTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryTasksResponseBody(name='body'),
}

async function retryTasks(request: RetryTasksRequest): RetryTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryTasks', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConfigurationSpecificationRequest {
  architecture: string(name='Architecture', example='5.0', position='Body'),
  configurationSpecificationId: string(name='ConfigurationSpecificationId', example='kkoo', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  model: string(name='Model', example='3601', position='Body'),
  relatedVariate?: [ bytes ](name='RelatedVariate', shrink='json', position='Body'),
  role: string(name='Role', example='DSW', position='Body'),
  specificationContent: string(name='SpecificationContent', example='{{hostname}}', position='Body'),
  specificationName: string(name='SpecificationName', example='ConfigurationSpecificationName', position='Body'),
  vendor: string(name='Vendor', example='Alibaba', position='Body'),
}

model UpdateConfigurationSpecificationResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model UpdateConfigurationSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConfigurationSpecificationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function updateConfigurationSpecification(request: UpdateConfigurationSpecificationRequest): UpdateConfigurationSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConfigurationSpecification', 'POST', '/', 'json', true, 'form', request);
}

model UpdateConfigurationVariateRequest {
  comment?: string(name='Comment', example='项目变量', position='Body'),
  configurationVariateId: string(name='ConfigurationVariateId', description='代表资源一级ID的资源属性字段', example='configurationVariateIdxxxyyy', position='Body'),
  formatFunction?: string(name='FormatFunction', example='def main():', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  variateName: string(name='VariateName', example='project', position='Body'),
}

model UpdateConfigurationVariateResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model UpdateConfigurationVariateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConfigurationVariateResponseBody(name='body'),
}

async function updateConfigurationVariate(request: UpdateConfigurationVariateRequest): UpdateConfigurationVariateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConfigurationVariate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDedicatedLineRequest {
  bandwidth: int32(name='Bandwidth', example='100', minimum=1, maximum=3000000, position='Body'),
  contact?: string(name='Contact', example='zs', position='Body'),
  dedicatedLineGateway?: string(name='DedicatedLineGateway', example='111.111.xxx.xxx', position='Body'),
  dedicatedLineId: string(name='DedicatedLineId', example='space_isp-6dk5xpoyoopr6obf', position='Body'),
  dedicatedLineIp?: string(name='DedicatedLineIp', example='111.111.xxx.xxx', position='Body'),
  dedicatedLineRole: string(name='DedicatedLineRole', example='主', position='Body'),
  description?: string(name='Description', example='备注', position='Body'),
  deviceId?: string(name='DeviceId', example='device-evve560juend5owh', position='Body'),
  devicePort?: string(name='DevicePort', example='GigabitEthernet1/0/0', position='Body'),
  expirationDate?: string(name='ExpirationDate', example='2022-06-14 04:00:00', position='Body'),
  extAttributes?: string(name='ExtAttributes', example='{"Location":"cdc"}', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  isp?: string(name='Isp', example='电信', position='Body'),
  ispId?: string(name='IspId', example='isp-dhyw2lxfpcs80d9', position='Body'),
  keyword?: string(name='Keyword', example='测试专线', position='Body'),
  onlineDate?: string(name='OnlineDate', example='2022-06-13 12:00:00', position='Body'),
  phone?: string(name='Phone', example='133xxxxxxxx', position='Body'),
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Body'),
}

model UpdateDedicatedLineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8de935f6-90c7-444e-a2b4-bb4185153435'),
}

model UpdateDedicatedLineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDedicatedLineResponseBody(name='body'),
}

async function updateDedicatedLine(request: UpdateDedicatedLineRequest): UpdateDedicatedLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDedicatedLine', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDeviceRequest {
  deviceId: string(name='DeviceId', description='设备ID', example='device-evve560juend5owh', position='Body'),
  enablePassword?: string(name='EnablePassword', description='enable密码', example='pass***', position='Body'),
  extAttributes?: string(name='ExtAttributes', description='设备额外属性(JSON)', example='{"role":"ASW"}', position='Body'),
  hostName?: string(name='HostName', description='主机名', example='HZYT_USG6620_A', position='Body'),
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-xxx', position='Query'),
  ip?: string(name='Ip', description='设备IP', example='10.17.101.1', position='Body'),
  loginPassword?: string(name='LoginPassword', description='设备TELNET账号', example='123456', position='Body'),
  loginType?: string(name='LoginType', description='设备SSH登录账号', example='SSH,TELNET', position='Body'),
  loginUsername?: string(name='LoginUsername', description='设备SSH登录密码', example='admin', position='Body'),
  mac?: string(name='Mac', description='设备MAC地址', example='b8:27:eb:34:3b:a2', position='Body'),
  model?: string(name='Model', description='设备型号', example='USG6620', position='Body'),
  physicalSpaceId?: string(name='PhysicalSpaceId', description='物理空间', example='space-ez6zd3w68ma4fsd4', position='Body'),
  securityDomain?: string(name='SecurityDomain', description='设备安全域', example='IT', position='Body'),
  serviceStatus?: string(name='ServiceStatus', description='设备状态', example='online', position='Body'),
  sn?: string(name='Sn', description='设备SN', example='210235951910K7000016', position='Body'),
  snmpAccountType?: string(name='SnmpAccountType', description='账号类型', example='get', position='Body'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号', example='v3', position='Body'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='SNMP Auth PassPhrase', example='123456', position='Body'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', description='Auth Protocol', example='MD5', position='Body'),
  snmpCommunity?: string(name='SnmpCommunity', description='SNMP Community', example='123456', position='Body'),
  snmpPrivacyPassphrase?: string(name='SnmpPrivacyPassphrase', description='SNMP Privacy Passphrase', example='pass***', position='Body'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='Privacy Protocol', example='DES', position='Body'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='安全级别', example='AUTH_PRIV', position='Body'),
  snmpUsername?: string(name='SnmpUsername', description='用户名', example='admin', position='Body'),
  vendor?: string(name='Vendor', description='设备厂商', example='Huawei', position='Body'),
}

model UpdateDeviceResponseBody = {
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model UpdateDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeviceResponseBody(name='body'),
}

async function updateDevice(request: UpdateDeviceRequest): UpdateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDevice', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDeviceFormRequest {
  accountConfig?: boolean(name='AccountConfig', description='是否需要账号配置', example='true', position='Body'),
  attributeList?: [ 
    {
      attributeFormat: string(name='AttributeFormat', description='设备形态属性值格式', example='STRING'),
      attributeFuzzyQuery?: boolean(name='AttributeFuzzyQuery', example='false'),
      attributeKey: string(name='AttributeKey', description='设备形态属性主键', example='serviceStatus'),
      attributeName: string(name='AttributeName', description='设备形态属性名称', example='服务状态'),
      attributePlaceholder?: string(name='AttributePlaceholder', description='前端查询控件占位符', example='前端占位符说明'),
      attributeQuery?: boolean(name='AttributeQuery', example='false'),
      attributeReference?: string(name='AttributeReference', description='设备形态属性关联对象', example='status'),
      attributeRequirement: boolean(name='AttributeRequirement', description='设备形态属性是否必填', example='true'),
      attributeSequence?: int32(name='AttributeSequence', example='1'),
      attributeTableDisplay: boolean(name='AttributeTableDisplay', description='设备形态属性是否表格可见', example='服务状态'),
      attributeType?: string(name='AttributeType', description='设备形态属性值类型', example='ENUMS'),
      attributeUniqueness: boolean(name='AttributeUniqueness', description='设备形态属性是否唯一', example='false'),
    }
  ](name='AttributeList', description='设备形态属性列表', example='true', shrink='json', position='Body'),
  configCompare?: boolean(name='ConfigCompare', description='是否支持配置生成', example='true', position='Body'),
  detailDisplay?: boolean(name='DetailDisplay', example='true', position='Body'),
  deviceFormId: string(name='DeviceFormId', description='设备形态ID', example='form-u4ilnhu64h026lrf', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  relatedDeviceFormId?: string(name='RelatedDeviceFormId', example='form-4gnk12c2pdp4qu42', position='Body'),
  script?: string(name='Script', example='@login_device\\r\\ndef config_backup():\\r\\n    exec_cli(\\"show license\\", timeout=120)\\r\\n    return exec_cli(\\"show config\\", timeout=180)', position='Body'),
}

model UpdateDeviceFormResponseBody = {
  requestId?: string(name='RequestId', example='15292160-382F-46F2-B241-95EFB54BA434'),
}

model UpdateDeviceFormResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeviceFormResponseBody(name='body'),
}

async function updateDeviceForm(request: UpdateDeviceFormRequest): UpdateDeviceFormResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceForm', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDevicePropertyRequest {
  devicePropertyId: string(name='DevicePropertyId', example='property-z50wex75a1lkx7vx', position='Body'),
  instanceId: string(name='InstanceId', description='实例ID', example='cmn-cn-xxx', position='Query'),
  propertyContent: string(name='PropertyContent', example='{   "H3C": [     "H3C S6800",     "S6850-56HF"   ],   "Huawei": [     "CE6851-48S6Q"   ] }', position='Body'),
  propertyFormat: string(name='PropertyFormat', example='JSON', position='Body'),
  propertyName: string(name='PropertyName', example='厂商型号', position='Body'),
}

model UpdateDevicePropertyResponseBody = {
  requestId?: string(name='RequestId', example='1f598491-db6d-4276-a83a-3b5f57d4a4e1'),
}

model UpdateDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDevicePropertyResponseBody(name='body'),
}

async function updateDeviceProperty(request: UpdateDevicePropertyRequest): UpdateDevicePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceProperty', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDeviceResourceRequest {
  data?: string(name='Data', description='更新数据', example='zzz', position='Body'),
  deviceResourceId?: string(name='DeviceResourceId', example='deviceResourceId', position='Body'),
  deviceResourceIds: [ string ](name='DeviceResourceIds', description='代表资源一级ID的资源属性字段', shrink='json', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  setupProjectId: string(name='SetupProjectId', description='建设项目id', example='xxx_zzz', position='Body'),
  updateType: string(name='UpdateType', description='操作类型', example='LOCATION、HOSTNAME、IP_ADDRESS、  CONFIGURATION_GENERATOR', position='Body'),
}

model UpdateDeviceResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDeviceResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeviceResourceResponseBody(name='body'),
}

async function updateDeviceResource(request: UpdateDeviceResourceRequest): UpdateDeviceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceResource', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDevicesRequest {
  deviceIds: [ string ](name='DeviceIds', description='设备ID', example='UpdateDevices', shrink='json', position='Body'),
  enablePassword?: string(name='EnablePassword', example='123456', position='Body'),
  extAttributes?: string(name='ExtAttributes', example='{\\"Role\\":\\"WIFI-ASW\\"}', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxx', position='Query'),
  loginPassword?: string(name='LoginPassword', description='设备TELNET账号', example='123456', position='Body'),
  loginType?: string(name='LoginType', description='设备SSH登录账号', example='SSH,TELNET', position='Body'),
  loginUsername?: string(name='LoginUsername', description='设备SSH登录密码', example='admin', position='Body'),
  model?: string(name='Model', example='RG-S5750-48GT4XS-HP-H', position='Body'),
  physicalSpaceId?: string(name='PhysicalSpaceId', example='space-1hk5p29yvvzuh9cp', position='Body'),
  physicalSpaceName?: string(name='PhysicalSpaceName', example='xxx园区', position='Body'),
  securityDomain?: string(name='SecurityDomain', example='CMN-IT', position='Body'),
  serviceStatus?: string(name='ServiceStatus', example='online', position='Body'),
  snmpAccountType?: string(name='SnmpAccountType', description='账号类型', example='get', position='Body'),
  snmpAccountVersion?: string(name='SnmpAccountVersion', description='SNMP版本号', example='v3', position='Body'),
  snmpAuthPassphrase?: string(name='SnmpAuthPassphrase', description='Auth PassPhrase', example='123456', position='Body'),
  snmpAuthProtocol?: string(name='SnmpAuthProtocol', example='MD5', position='Body'),
  snmpCommunity?: string(name='SnmpCommunity', description='Community', example='123456', position='Body'),
  snmpPrivacyPassphrase?: string(name='SnmpPrivacyPassphrase', description='Privacy Passphase', example='123456', position='Body'),
  snmpPrivacyProtocol?: string(name='SnmpPrivacyProtocol', description='Privacy Protocol', example='DES', position='Body'),
  snmpSecurityLevel?: string(name='SnmpSecurityLevel', description='安全级别', example='AUTH_PRIV', position='Body'),
  snmpUsername?: string(name='SnmpUsername', description='用户名', example='admin', position='Body'),
  vendor?: string(name='Vendor', example='H3C', position='Body'),
}

model UpdateDevicesResponseBody = {
  requestId?: string(name='RequestId', example='fdb2af01-bd56-4034-812b-f257f73b4690'),
}

model UpdateDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDevicesResponseBody(name='body'),
}

async function updateDevices(request: UpdateDevicesRequest): UpdateDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDevices', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEventDefinitionRequest {
  eventId: string(name='EventId', example='e-1dcscicdv', position='Body'),
  eventName: string(name='EventName', example='探针掉线事件', position='Body'),
  eventType: string(name='EventType', example='AGENT_EVENT', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxxx', position='Body'),
  templateId?: string(name='TemplateId', position='Body'),
}

model UpdateEventDefinitionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateEventDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEventDefinitionResponseBody(name='body'),
}

async function updateEventDefinition(request: UpdateEventDefinitionRequest): UpdateEventDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEventDefinition', 'POST', '/', 'json', true, 'form', request);
}

model UpdateInformationKeyActionRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  key?: string(name='Key', example='ip', position='Query'),
  keyAction?: string(name='KeyAction', example='AGENT_SYNC', position='Query'),
  resourceInformationId?: string(name='ResourceInformationId', position='Query'),
  setupProjectId?: string(name='SetupProjectId', example='adaieaoweif_s3834', position='Query'),
  value?: string(name='Value', example='192.168.1.1', position='Query'),
}

model UpdateInformationKeyActionResponseBody = {
  actionMessage?: string(name='ActionMessage', example='alsoeqwe'),
  requestId?: string(name='RequestId'),
}

model UpdateInformationKeyActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInformationKeyActionResponseBody(name='body'),
}

async function updateInformationKeyAction(request: UpdateInformationKeyActionRequest): UpdateInformationKeyActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInformationKeyAction', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Body'),
  instanceName: string(name='InstanceName', position='Body'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='AF24AC56-C4C0-5494-92E8-0B71BE4B3CCA'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstance', 'POST', '/', 'json', true, 'form', request);
}

model UpdateOsVersionRequest {
  bootPatch?: string(name='BootPatch', example='{"name":"xxx/yyy"}', position='Body'),
  featurePatch?: string(name='FeaturePatch', example='{"name":"xxx/yyy"}', position='Body'),
  fileName: string(name='FileName', description='文件名', example='zzz', position='Body'),
  filePath: string(name='FilePath', description='文件路径', example='/xxx/zzz', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  model: string(name='Model', description='型号', example='6510', position='Body'),
  osVersion: string(name='OsVersion', description='系统版本', example='1.0', position='Body'),
  osVersionId: string(name='OsVersionId', example='osVersionId', position='Body'),
  status: string(name='Status', description='状态', example='USED、UNUSED', position='Body'),
  systemPatch?: string(name='SystemPatch', example='{"name":"xxx/yyy"}', position='Body'),
  vendor: string(name='Vendor', description='厂商', example='Ruijie', position='Body'),
}

model UpdateOsVersionResponseBody = {
  requestId?: string(name='RequestId', example='kkrr'),
}

model UpdateOsVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateOsVersionResponseBody(name='body'),
}

async function updateOsVersion(request: UpdateOsVersionRequest): UpdateOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOsVersion', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePhysicalSpaceRequest {
  address?: string(name='Address', example='文一西路969号', position='Body'),
  city?: string(name='City', example='杭州市', position='Body'),
  country?: string(name='Country', example='中国', position='Body'),
  instanceId: string(name='InstanceId', example='cmn-cn-xxxx', position='Query'),
  moveAction?: string(name='MoveAction', example='BEFORE', position='Body'),
  owner?: string(name='Owner', example='张三', position='Body'),
  parentUid?: string(name='ParentUid', example='space-twnepeeloclxxxxx', position='Body'),
  physicalSpaceId: string(name='PhysicalSpaceId', example='space-ez6zd3w68ma4fsd4', position='Body'),
  physicalSpaceName?: string(name='PhysicalSpaceName', example='阿里巴巴西溪园区', position='Body'),
  province?: string(name='Province', example='浙江省', position='Body'),
  remark?: string(name='Remark', example='备注', position='Body'),
  securityDomainList?: [ string ](name='SecurityDomainList', shrink='json', position='Body'),
  spaceAbbreviation?: string(name='SpaceAbbreviation', example='yq', position='Body'),
  spaceType?: string(name='SpaceType', example='园区', position='Body'),
  targetUid?: string(name='TargetUid', example='space-twnepee1234xxxxx', position='Body'),
}

model UpdatePhysicalSpaceResponseBody = {
  requestId?: string(name='RequestId', example='a1c7e2b4-174e-4557-a96d-d4cbf83988a6'),
}

model UpdatePhysicalSpaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePhysicalSpaceResponseBody(name='body'),
}

async function updatePhysicalSpace(request: UpdatePhysicalSpaceRequest): UpdatePhysicalSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePhysicalSpace', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProjectProgressRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  progress: string(name='Progress', example='BUILD、PLAN、CANCEL、FINISH、ROLLBACK', position='Body'),
  setupProjectId: string(name='SetupProjectId', example='xxxyyy', position='Body'),
}

model UpdateProjectProgressResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateProjectProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProjectProgressResponseBody(name='body'),
}

async function updateProjectProgress(request: UpdateProjectProgressRequest): UpdateProjectProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProjectProgress', 'POST', '/', 'json', true, 'form', request);
}

model UpdateResourceInformationRequest {
  information?: [ 
    {
      key?: string(name='Key', description='键', example='IP'),
      keyAction?: string(name='KeyAction', description='键动作', example='/xxx/zzz'),
      keyAttribute?: string(name='KeyAttribute', description='键属性', example='IP地址'),
      keyDescription?: string(name='KeyDescription', description='键描述', example='Ip地址'),
      setupProjectId?: string(name='SetupProjectId', description='建设项目id', example='adaieaoweif_s3834'),
    }
  ](name='Information', description='信息', shrink='json', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  resourceAttribute?: string(name='ResourceAttribute', description='资源属性', example='6510', position='Body'),
  resourceInformationId: string(name='ResourceInformationId', example='resourceInformationId', position='Body'),
  resourceType?: string(name='ResourceType', description='资源类型', example='CMDB', position='Body'),
}

model UpdateResourceInformationResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model UpdateResourceInformationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceInformationResponseBody(name='body'),
}

async function updateResourceInformation(request: UpdateResourceInformationRequest): UpdateResourceInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResourceInformation', 'POST', '/', 'json', true, 'form', request);
}

model UpdateResourceInstanceRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  resourceInformation: [ 
    {
      key: string(name='Key', example='ip'),
      value?: string(name='Value', example='192.168.1.1'),
    }
  ](name='ResourceInformation', shrink='json', position='Query'),
  resourceInformationId?: string(name='ResourceInformationId', position='Query'),
  setupProjectId: string(name='SetupProjectId', example='adaieaoweif_s3834', position='Query'),
}

model UpdateResourceInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResourceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceInstanceResponseBody(name='body'),
}

async function updateResourceInstance(request: UpdateResourceInstanceRequest): UpdateResourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResourceInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSetupProjectRequest {
  architectureId: string(name='ArchitectureId', description='架构id', example='archIdxxxyyy', position='Body'),
  deliveryTime: string(name='DeliveryTime', description='预计交付时间', example='2021-03-27 00:00:00', position='Body'),
  description: string(name='Description', description='描述', example='建设交付项目', position='Body'),
  instanceId?: string(name='InstanceId', example='instanceId', position='Query'),
  nodes: string(name='Nodes', description='节点', example='[]', position='Body'),
  packages: [ 
    {
      deviceNumber?: long(name='DeviceNumber', description='设备号', example='1'),
      model?: string(name='Model', description='型号', example='6510'),
      role?: string(name='Role', description='角色', example='DSW'),
      vendor?: string(name='Vendor', description='厂商', example='Ruijie'),
    }
  ](name='Packages', description='套餐', shrink='json', position='Body'),
  setupProjectId: string(name='SetupProjectId', description='代表资源一级ID的资源属性字段', example='setupProjectIdxxxyyy', position='Body'),
  spaceId: string(name='SpaceId', description='物理空间uId', example='spaceIdxxxyyy', position='Body'),
}

model UpdateSetupProjectResponseBody = {
  requestId?: string(name='RequestId'),
  setupProjectId?: string(name='SetupProjectId'),
  setupProjectName?: string(name='SetupProjectName'),
  setupProjectSpecification?: string(name='SetupProjectSpecification'),
}

model UpdateSetupProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSetupProjectResponseBody(name='body'),
}

async function updateSetupProject(request: UpdateSetupProjectRequest): UpdateSetupProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSetupProject', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSpaceModelRequest {
  instanceId?: string(name='InstanceId', example='instanceId', position='Body'),
  sort?: [ 
    {
      level?: long(name='Level', example='1'),
      levelName?: string(name='LevelName', example='园区'),
    }
  ](name='Sort', description='层级', shrink='json', position='Body'),
  spaceModelId: string(name='SpaceModelId', example='spaceModelIdxxxyyy', position='Body'),
  spaceType?: string(name='SpaceType', example='园区', position='Body'),
}

model UpdateSpaceModelResponseBody = {
  requestId?: string(name='RequestId', example='requestId'),
}

model UpdateSpaceModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSpaceModelResponseBody(name='body'),
}

async function updateSpaceModel(request: UpdateSpaceModelRequest): UpdateSpaceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSpaceModel', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSpaceModelInstanceRequest {
  instance?: string(name='Instance', example='{}', position='Query'),
  spaceId?: string(name='SpaceId', example='spaceIdxxxyyy', position='Query'),
}

model UpdateSpaceModelInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSpaceModelInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSpaceModelInstanceResponseBody(name='body'),
}

async function updateSpaceModelInstance(request: UpdateSpaceModelInstanceRequest): UpdateSpaceModelInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSpaceModelInstance', 'POST', '/', 'json', false, 'json', request);
}

