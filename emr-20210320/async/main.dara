/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Emr';
  @version = '2021-03-20';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-beijing' = 'emr.aliyuncs.com',
    'cn-hangzhou' = 'emr.aliyuncs.com',
    'cn-shanghai' = 'emr.aliyuncs.com',
    'cn-shenzhen' = 'emr.aliyuncs.com',
    'ap-southeast-1' = 'emr.aliyuncs.com',
    'us-west-1' = 'emr.aliyuncs.com',
    'cn-shanghai-finance-1' = 'emr.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'emr.aliyuncs.com',
    'cn-north-2-gov-1' = 'emr.aliyuncs.com',
    'ap-northeast-2-pop' = 'emr.aliyuncs.com',
    'cn-beijing-finance-1' = 'emr.aliyuncs.com',
    'cn-beijing-finance-pop' = 'emr.aliyuncs.com',
    'cn-beijing-gov-1' = 'emr.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'emr.aliyuncs.com',
    'cn-edge-1' = 'emr.aliyuncs.com',
    'cn-fujian' = 'emr.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'emr.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'emr.aliyuncs.com',
    'cn-hangzhou-finance' = 'emr.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'emr.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'emr.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'emr.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'emr.aliyuncs.com',
    'cn-hangzhou-test-306' = 'emr.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'emr.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'emr.aliyuncs.com',
    'cn-qingdao-nebula' = 'emr.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'emr.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'emr.aliyuncs.com',
    'cn-shanghai-inner' = 'emr.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'emr.aliyuncs.com',
    'cn-shenzhen-inner' = 'emr.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'emr.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'emr.aliyuncs.com',
    'cn-wuhan' = 'emr.aliyuncs.com',
    'cn-yushanfang' = 'emr.aliyuncs.com',
    'cn-zhangbei' = 'emr.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'emr.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'emr.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'emr.aliyuncs.com',
    'eu-west-1-oxs' = 'emr.aliyuncs.com',
    'rus-west-1-pop' = 'emr.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AckConfig {
  ackInstanceId?: string(name='AckInstanceId', description='ack集群id'),
  customAnnotations?: [
    Tag
  ](name='CustomAnnotations'),
  customLabels?: [
    Tag
  ](name='CustomLabels'),
  dataDiskSize?: int32(name='DataDiskSize'),
  dataDiskStorageClass?: string(name='DataDiskStorageClass'),
  limitCpu?: float(name='LimitCpu', description='Pod的CPU限制值。'),
  limitMemory?: float(name='LimitMemory', description='Pod的内存限制值。'),
  mountHostCgroup?: boolean(name='MountHostCgroup'),
  namespace?: string(name='Namespace', description='ack 命名空间'),
  nodeAffinity?: string(name='NodeAffinity'),
  nodeSelectors?: [
    Tag
  ](name='NodeSelectors', description='ack的节点标签限制'),
  podAffinity?: string(name='PodAffinity'),
  podAntiAffinity?: string(name='PodAntiAffinity'),
  preStartCommand?: [ string ](name='PreStartCommand'),
  pvcs?: [ 
    {
      dataDiskSize?: long(name='DataDiskSize'),
      dataDiskStorageClass?: string(name='DataDiskStorageClass'),
      name?: string(name='Name'),
      path?: string(name='Path'),
    }
  ](name='Pvcs'),
  requestCpu?: float(name='RequestCpu', description='Pod的CPU请求值'),
  requestMemory?: float(name='RequestMemory', description='Pod的内存请求值。'),
  tolerations?: [
    Toleration
  ](name='Tolerations', description='ack的节点污点容忍'),
  volumeMounts?: [ 
    {
      name?: string(name='Name'),
      path?: string(name='Path'),
    }
  ](name='VolumeMounts'),
  volumes?: [ 
    {
      name?: string(name='Name'),
      path?: string(name='Path'),
      type?: string(name='Type'),
    }
  ](name='Volumes'),
}

model AckNode {
  nodeId?: string(name='NodeId', description='节点ID。', example='i-bp1cudc25w2bfwl5****'),
  nodeSelector?: AckNodeSelector(name='NodeSelector', description='ACK节点选择器。'),
}

model AckNodePool {
  nodePoolId?: string(name='NodePoolId', description='节点池ID。', example='npe76629caa1b14a73bf3e47c6d481****'),
  nodeSelector?: AckNodeSelector(name='NodeSelector', description='ACK节点选择器。'),
}

model AckNodeSelector {
  labels?: [ 
    {
      key?: string(name='Key', description='标签键。', example='emr'),
      value?: string(name='Value', description='标签值。', example='true'),
    }
  ](name='Labels', description='污点列表。'),
  taints?: [ 
    {
      effect?: string(name='Effect', description='污点效果。'),
      key?: string(name='Key', description='污点键。', example='emr'),
      value?: string(name='Value', description='污点值。', example='true'),
    }
  ](name='Taints', description='污点列表。'),
}

model ApiTemplate {
  apiName?: string(name='ApiName', description='接口名。', example='CreateCluster'),
  content?: string(name='Content', description='模版接口参数。'),
  regionId?: string(name='RegionId', description='区域ID。', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzabjyop****'),
  status?: string(name='Status', description='模板状态。', example='READY'),
  templateId?: string(name='TemplateId', description='模板ID。', example='AT-Af***'),
  templateName?: string(name='TemplateName', description='模板ID。', example='AT-Af***'),
}

model Application {
  applicationName: string(name='ApplicationName', description='应用名称。从EMR控制台集群创建页面可查看到指定发行版的应用名称列表。', example='HDFS'),
}

model ApplicationConfig {
  applicationName: string(name='ApplicationName', description='应用名称。从EMR控制台集群创建页面可查看到指定发行版的应用名称列表。', example='HDFS'),
  configFileName: string(name='ConfigFileName', description='应用配置文件名。', example='hdfs-site.xml'),
  configItemKey: string(name='ConfigItemKey', description='配置项键。', example='dfs.namenode.checkpoint.period'),
  configItemValue?: string(name='ConfigItemValue', description='配置项值。', example='3600s'),
  configScope?: string(name='ConfigScope', description='配置范围。取值范围：
- CLUSTER：集群级别。
- NODE_GROUP：节点组级别。

默认值：CLUSTER。', example='NODE_GROUP'),
  nodeGroupId?: string(name='NodeGroupId', description='节点组ID。ConfigScope取值NODE_GROUP时，该参数生效。NodeGroupId参数优先级高于NodeGroupName。', example='ng-869471354ecd****'),
  nodeGroupName?: string(name='NodeGroupName', description='节点组名称。ConfigScope取值NODE_GROUP时，且参数NodeGroupId为空时生效，该参数生效。', example='core-1'),
}

model ApplicationConfigFile {
  applicationName: string(name='ApplicationName', description='应用名称。', example='HDFS'),
  configFileName: string(name='ConfigFileName', description='配置文件名称。', example='core-site.xml'),
}

model ApplicationConfigParam {
  configAction?: string(name='ConfigAction', example='DELETE'),
  configFileName?: string(name='ConfigFileName', example='hdfs-site.xml'),
  configItemDescription?: string(name='ConfigItemDescription', example='namenode checkpoint period'),
  configItemKey?: string(name='ConfigItemKey', example='dfs.namenode.checkpoint.period'),
  configItemValue?: string(name='ConfigItemValue', example='3600s'),
  configScope?: string(name='ConfigScope'),
  effectiveActions?: string(name='EffectiveActions', example='RESTART'),
  effectiveType?: string(name='EffectiveType', example='MANUAL'),
  nodeGroupId?: string(name='NodeGroupId', example='G-DE1CF4661E09****'),
  nodeId?: string(name='NodeId', example='i-bp10h9rezawz1i4o****'),
}

model Attribute {
  key?: string(name='Key', description='键。', example='currentYarnRangerPluginState'),
  value?: string(name='Value', description='值。', example='true'),
}

model AutoRenewInstance {
  autoRenew?: boolean(name='AutoRenew', description='自动续费。', example='true'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='自动续费时长。', example='12'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit', description='自动付费时长单位。', example='Month'),
  emrAutoRenewDuration?: int32(name='EmrAutoRenewDuration', description='emr实例自动续费时长。', example='12'),
  emrAutoRenewDurationUnit?: string(name='EmrAutoRenewDurationUnit', description='emr实例自动续费时长单位。', example='Month'),
  instanceId: string(name='InstanceId', description='节点ID。', example='i-bp1cudc25w2bfwl5****'),
}

model AutoRenewInstanceParam {
  autoRenew?: string(name='AutoRenew'),
  autoRenewDuration?: string(name='AutoRenewDuration'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit'),
  instanceId?: string(name='InstanceId'),
}

model AutoScalingConstraints {
  autoScalingMetricUnits?: [
    MetricUnitValue
  ](name='AutoScalingMetricUnits', description='按负载伸缩指标单位描述。'),
  defaultMetricTriggeredRules?: [
    ScalingRule
  ](name='DefaultMetricTriggeredRules', description='默认按负载弹性伸缩规则列表'),
  maxAdjustmentValue?: int32(name='MaxAdjustmentValue', description='单次伸缩活动最大扩缩容节点数量。', example='1000'),
  maxByLoadRuleCount?: int32(name='MaxByLoadRuleCount', description='按负载规则数量最大值。', example='10'),
  maxByTimeRuleCount?: int32(name='MaxByTimeRuleCount', description='按时间规则数量最大值。', example='10'),
  supportMetricTags?: [ 
    {
      metricName?: string(name='MetricName', description='指标名称。'),
      tags?: [
        Tag
      ](name='Tags', description='指标Tag。'),
    }
  ](name='SupportMetricTags', description='支持的按负载弹性伸缩指标Tag列表。'),
  supportMetrics?: [ string ](name='SupportMetrics', description='支持的按负载弹性伸缩指标列表。', example='["YarnRootAvailableMemoryUsage","YarnRootAvailableVcores"]'),
  supportRuleTypes?: [ string ](name='SupportRuleTypes', description='支持的弹性伸缩规则类型。', example='["TIME_TRIGGER","METRICS_TRIGGER"]'),
}

model AutoScalingPolicy {
  constraints?: {
    maxCapacity?: int32(name='maxCapacity'),
    minCapacity?: int32(name='minCapacity'),
  }(name='constraints'),
  scalingRules?: [
    ScalingRule
  ](name='scalingRules'),
}

model ByLoadScalingRule {
  comparisonOperator: string(name='ComparisonOperator', description='比较符。', example='LT'),
  coolDownInterval?: int32(name='CoolDownInterval'),
  evaluationCount: int32(name='EvaluationCount', description='统计次数。', example='2'),
  metricName: string(name='MetricName', description='指标名称。指标名称需要在 ListAutoScalingMetrics 接口返回的指标名称列表中。', example='yarn_resourcemanager_root_availablememoryusage'),
  statistics: string(name='Statistics', description='统计量名称。', example='AVG'),
  threshold: double(name='Threshold', description='阈值。', example='12.5'),
  timeWindow: int32(name='TimeWindow', description='统计窗口。单位为秒。', example='30'),
}

model ByLoadScalingRuleSpec {
  comparisonOperator: string(name='ComparisonOperator', description='比较符。', example='LT'),
  evaluationCount: int32(name='EvaluationCount', description='统计次数。', example='2'),
  metricName: string(name='MetricName', description='指标名称。指标名称需要在 ListAutoScalingMetrics 接口返回的指标名称列表中。', example='yarn_resourcemanager_root_availablememoryusage'),
  statistics: string(name='Statistics', description='统计量名称。', example='AVG'),
  threshold: double(name='Threshold', description='阈值。', example='12.5'),
  timeWindow: int32(name='TimeWindow', description='统计窗口。单位为秒。', example='30'),
}

model ByTimeScalingRule {
  endTime?: long(name='EndTime', description='重复执行定时任务的结束时间戳。单位为毫秒。', example='1639714800000'),
  launchExpirationTime?: int32(name='LaunchExpirationTime', description='定时任务触发操作失败后，在此时间内重试。单位为秒，取值范围：0~3600。', example='600'),
  launchTime: long(name='LaunchTime', description='启动时间戳。单位为毫秒。', example='1639714634819'),
  recurrenceType?: string(name='RecurrenceType', description='指定时间规则的执行类型。', example='WEEKLY'),
  recurrenceValue?: string(name='RecurrenceValue', description='重复执行定时任务的数值。具体取值取决于 recurrenceType 设置。
- recurrenceType 取 MINUTELY 时，只能填一个数值，取值范围：1~1440。
- recurrenceType 取 HOURLY 时，只能填一个数值，取值范围：1~24。
- recurrenceType 取 DAILY 时，只能填一个数值，取值范围：1~31。
- recurrenceType 取 WEEKLY 时，可以填入多个值，填多个值时使用英文逗号（,）分隔。周一到周天分别用MON，TUE，WED，THU，FRI，SAT，SUN代替。 比如 MON,FRI,SUN 代表周一、周五、周天。
- recurrenceType 取 MONTHLY 时，格式为A-B或者A,B。A、B的取值范围为1~31，如果使用A-B时B必须大于A。', example='MON,FRI,SUN'),
}

model ByTimeScalingRuleSpec {
  endTime?: long(name='EndTime', description='重复执行定时任务的结束时间戳。单位为毫秒。', example='1639714800000'),
  launchTime: long(name='LaunchTime', description='启动时间戳。单位为毫秒。', example='1639714634819'),
  recurrenceType?: string(name='RecurrenceType', description='指定时间规则的执行类型。', example='WEEKLY'),
  recurrenceValue?: string(name='RecurrenceValue', description='重复执行定时任务的数值。具体取值取决于 recurrenceType 设置。', example='MON,FRI,SUN'),
}

model ClickhouseConf {
  initialReplica?: int32(name='InitialReplica'),
  initialShard?: int32(name='InitialShard'),
  newNodeCount?: int32(name='NewNodeCount'),
  resizeType?: string(name='ResizeType'),
}

model Cluster {
  clusterId?: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****'),
  clusterName?: string(name='ClusterName', description='集群名称。', example='emrtest'),
  clusterState?: string(name='ClusterState', description='集群状态。', example='RUNNING'),
  clusterType?: string(name='ClusterType', description='集群类型。', example='DATALAKE'),
  createTime?: long(name='CreateTime', description='创建时间。', example='1592837465784'),
  deployMode?: string(name='DeployMode', description='部署模式。', example='HA'),
  description?: string(name='Description'),
  emrDefaultRole?: string(name='EmrDefaultRole', description='EMR默认角色。', example='AliyunEMRDefaultRole'),
  endTime?: long(name='EndTime', description='删除时间。', example='1592837465784'),
  expireTime?: long(name='ExpireTime', description='过期时间。', example='1592837465784'),
  nodeAttributes?: NodeAttributes(name='NodeAttributes', description='节点属性。'),
  paymentType?: string(name='PaymentType', description='付费类型。', example='PayAsYouGo'),
  readyTime?: long(name='ReadyTime', description='可用时间。', example='1592837465784'),
  regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou'),
  releaseVersion?: string(name='ReleaseVersion', description='EMR发行版。', example='EMR-5.3.0'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzabjyop****'),
  securityMode?: string(name='SecurityMode', description='Kerberos安全模式。', example='NORMAL'),
  stateChangeReason?: ClusterStateChangeReason(name='StateChangeReason'),
  subscriptionConfig?: SubscriptionConfig(name='SubscriptionConfig', description='预付费配置。'),
  tags?: [
    Tag
  ](name='Tags', description='集群标签。'),
}

model ClusterScript {
  executionFailStrategy?: string(name='ExecutionFailStrategy', example='取值:FAILED_CONTINUE, FAILED_BLOCKED'),
  executionMoment?: string(name='ExecutionMoment', example='取值:BEFORE_INSTALL, AFTER_STARTED'),
  nodeSelect?: NodeSelector(name='NodeSelect'),
  priority?: int32(name='Priority'),
  scriptArgs?: string(name='ScriptArgs'),
  scriptName?: string(name='ScriptName'),
  scriptPath?: string(name='ScriptPath'),
}

model ClusterStateChangeReason {
  code?: string(name='Code', description='状态码。取值范围：
- UserRequest：用户请求。
- OutOfStock：请求的ECS实例类型无库存。
- NotAuthorized：无权限。
- QuotaExceeded：Quota超出。
- OperationDenied：操作被拒绝。
- AccountException：账号异常。
- NodeFailure：ECS节点异常。
- BootstrapFailure：引导失败。
- ValidationFail：业务逻辑校验失败。
- ServiceFailure：依赖的其他服务失败。
- InternalError：内部错误。', example='OutOfStock'),
  message?: string(name='Message', description='状态变化信息。', example='The requested resource is sold out in the specified zone, try other types of resources or other regions and zones.'),
}

model ClusterSummary {
  clusterId?: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****'),
  clusterName?: string(name='ClusterName', description='集群名称。', example='emrtest'),
  clusterState?: string(name='ClusterState', description='集群状态。取值范围：
- STARTING：启动中。
- START_FAILED：启动失败。
- BOOTSTRAPPING：引导操作初始化。
- RUNNING：运行中。
- TERMINATING：终止中。
- TERMINATED：已终止。
- TERMINATED_WITH_ERRORS：发生异常导致终止。
- TERMINATE_FAILED：终止失败。', example='RUNNING'),
  clusterType?: string(name='ClusterType', description='集群类型。取值范围：
- DATALAKE：新版数据湖。
- OLAP：数据分析。
- DATAFLOW：实时数据流。
- DATASERVING：数据服务。', example='DATALAKE'),
  createTime?: long(name='CreateTime', description='创建时间。', example='1592837465784'),
  description?: string(name='Description'),
  emrDefaultRole?: string(name='EmrDefaultRole', description='EMR服务角色。'),
  endTime?: long(name='EndTime', description='删除时间。', example='1592837465784'),
  expireTime?: long(name='ExpireTime', description='过期时间。', example='1592837465784'),
  paymentType?: string(name='PaymentType', description='付费类型。取值范围：
- PayAsYouGo：后付费。
- Subscription：预付费。', example='PayAsYouGo'),
  readyTime?: long(name='ReadyTime', description='可用时间。', example='1592837465784'),
  releaseVersion?: string(name='ReleaseVersion', description='EMR发行版。', example='EMR-5.8.0'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzabjyop****'),
  stateChangeReason?: ClusterStateChangeReason(name='StateChangeReason', description='失败原因。'),
  tags?: [
    Tag
  ](name='Tags', description='标签列表。'),
}

model ComponentInstanceSelector {
  actionScope?: string(name='ActionScope', deprecated='true'),
  applicationName?: string(name='ApplicationName', description='应用名称。', example='HDFS'),
  componentInstances?: [ 
    {
      applicationName?: string(name='ApplicationName', description='应用名称。', example='HDFS'),
      componentName?: string(name='ComponentName', description='组件名称。', example='DataNode'),
      nodeId?: string(name='NodeId', description='节点ID。', example='i-bp1cudc25w2bfwl5****'),
    }
  ](name='ComponentInstances', description='组件实例列表。actionScope为COPONENT_INSTANCE时使用。'),
  components?: [ 
    {
      applicationName?: string(name='ApplicationName', description='应用名称。', example='HDFS'),
      componentName?: string(name='ComponentName', description='组件名称。', example='DataNode'),
    }
  ](name='Components', description='组件列表。
actionScope为COPONENT时使用。'),
  runActionScope: string(name='RunActionScope', description='动作执行范围。取值范围：
- APPLICATION：应用级别。
- COMPONENT：组件级别。
- COMPONENT_INSTANCE：组件实例级别。', example='APPLICATION'),
}

model ComponentLayout {
  applicationName?: string(name='ApplicationName', description='应用名称。', example='HDFS'),
  componentName?: string(name='ComponentName', description='组件名称。', example='DataNode'),
  nodeSelector?: {
    nodeEndIndex?: int32(name='NodeEndIndex', description='节点结束编号，包含结束编号。', example='3'),
    nodeGroupId?: string(name='NodeGroupId', description='节点组ID。', example='G-F609686D45D4ABCD'),
    nodeGroupIndex?: int32(name='NodeGroupIndex', description='机器组下标编号。', example='1'),
    nodeGroupName?: string(name='NodeGroupName', description='机器组名。', example='master-1'),
    nodeGroupTypes?: [ string ](name='NodeGroupTypes', description='SelectType = NODE_GROUP 且 nodeGroupId 不存在时使用', example='[null]'),
    nodeNames?: [ string ](name='NodeNames', description='节点名称列表。', example='[null]'),
    nodeSelectType: string(name='NodeSelectType', description='节点选择类型。', example='CLUSTER'),
    nodeStartIndex?: int32(name='NodeStartIndex', description='节点开始编号，包含开始编号。', example='1'),
  }(name='NodeSelector', description='节点选择器。'),
}

model ConfigEffectActions {
  configEffectAction?: string(name='ConfigEffectAction', description='配置生效动作。', example='restart'),
  configFiles?: [ string ](name='ConfigFiles', description='配置生效配置文件。', example='null'),
}

model ConvertNodeGroup {
  nodeGroupId?: string(name='NodeGroupId', description='节点组ID。', example='ng-869471354ecd****'),
  paymentDuration?: int32(name='PaymentDuration', description='付费时长。', example='12'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', description='付费时长单位。', example='Month'),
  paymentType?: string(name='PaymentType', description='付费类型。', example='PayAsYouGo'),
}

model ConvertNodeGroupParam {
  nodeGroupId: string(name='NodeGroupId'),
  paymentDuration: long(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  paymentType: string(name='PaymentType'),
}

model CostOptimizedConfig {
  onDemandBaseCapacity: int32(name='OnDemandBaseCapacity', description='按量实例个数的最小值。节点组所需要按量实例个数的最小值，取值范围：0~1000。当按量实例个数少于该值时，将优先创建按量实例。', example='80'),
  onDemandPercentageAboveBaseCapacity: int32(name='OnDemandPercentageAboveBaseCapacity', description='节点组满足最小按量实例OnDemandBaseCapacity要求后，超出的实例中按量实例应占的比例，取值范围：0～100。', example='80'),
  spotInstancePools: int32(name='SpotInstancePools', description='指定可用实例规格的个数，伸缩组将按成本最低的多个规格均衡创建抢占式实例。取值范围：0~10。', example='2'),
}

model CreateNodeGroupParam {
  autoRenew?: boolean(name='AutoRenew', example='false'),
  autoRenewDuration?: int32(name='AutoRenewDuration', example='1'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit', example='Monthly'),
  dataDisks?: [
    DiskInfo
  ](name='DataDisks'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  nodeCount?: int32(name='NodeCount', example='2'),
  nodeGroupName?: string(name='NodeGroupName', example='core-1'),
  nodeGroupType?: string(name='NodeGroupType', example='CORE'),
  nodeKeyPairName?: string(name='NodeKeyPairName', example='sshkey'),
  nodeRamRole?: string(name='NodeRamRole', example='AliyunEmrEcsDefaultRole'),
  nodeRootPassword?: string(name='NodeRootPassword', example='*******'),
  paymentDuration?: int32(name='PaymentDuration', example='1'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', example='Monthly'),
  paymentType?: string(name='PaymentType', example='Subscription'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-hp3abbae8lb6lmb1****'),
  spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
  systemDisk?: SystemDiskParam(name='SystemDisk'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  withPublicIp?: boolean(name='WithPublicIp', example='true'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-e'),
}

model DataDisk {
  category: string(name='Category', description='磁盘类型。', example='cloud_essd'),
  count?: int32(name='Count', description='每个节点磁盘数量。', example='5'),
  performanceLevel?: string(name='PerformanceLevel', description='创建ESSD云盘作为数据盘使用时，设置云盘的性能等级。取值范围：
- PL0：单盘最高随机读写IOPS 1万。
- PL1（默认）：单盘最高随机读写IOPS 5万。
- PL2：单盘最高随机读写IOPS 10万。
- PL3：单盘最高随机读写IOPS 100万。

默认值：PL1。', example='PL1'),
  size: int32(name='Size', description='单位GB。', example='80'),
}

model DecreaseNodeGroupParam {
  nodeGroupId: string(name='NodeGroupId', example='G-21E39B11837E****'),
  releaseInstanceIds: [ string ](name='ReleaseInstanceIds'),
}

model DeploymentLayout {
  applicationName?: string(name='ApplicationName'),
  componentName?: string(name='ComponentName'),
  nodeSelector?: NodeSelector(name='NodeSelector'),
}

model DeploymentSetConstraints {
  defaultValue?: string(name='DefaultValue', description='默认值。', example='CLUSTER'),
  enableState?: string(name='EnableState', example='是否启用部署集限制策略'),
  replacementStrategy?: ReplacementStrategy(name='ReplacementStrategy', description='替换策略。'),
  values?: [ string ](name='Values', description='枚举值。', example='["CLUSTER","NODE_GROUP","NONE"]'),
}

model Disk {
  category?: string(name='Category', description='磁盘类型。', example='cloud_essd'),
  count?: int32(name='Count', description='每个节点磁盘数量。', example='5'),
  performanceLevel?: string(name='PerformanceLevel', description='性能级别。', example='S0'),
  size?: int32(name='Size', description='单位GB。', example='80'),
}

model DiskConstraints {
  categories?: [ string ](name='Categories', description='支持的磁盘类型。', example='["cloud_efficiency","cloud_ssd","cloud_essd","local_disk"]'),
  countConstraint?: ValueConstraints(name='CountConstraint', description='磁盘数量最小值。'),
  sizeConstraint?: ValueConstraints(name='SizeConstraint', description='磁盘容量限制。'),
}

model DiskInfo {
  category?: string(name='Category'),
  count?: int32(name='Count'),
  performanceLevel?: string(name='PerformanceLevel'),
  size?: int32(name='Size'),
}

model DiskSize {
  category: string(name='Category', description='磁盘类型。', example='cloud_essd'),
  size?: int32(name='Size', description='单位GB。', example='80'),
}

model FailedReason {
  errorCode?: string(name='ErrorCode', description='错误码。', example='MissingParameter.InstanceType'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。', example='The instance type is required.'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944abcd'),
}

model HealthSummary {
  badCount?: long(name='BadCount', example='2'),
  goodCount?: long(name='GoodCount', example='2'),
  noneCount?: long(name='NoneCount', example='0'),
  stoppedCount?: long(name='StoppedCount', example='2'),
  totalCount?: long(name='TotalCount', example='8'),
  unknownCount?: long(name='UnknownCount', example='0'),
  warningCount?: long(name='WarningCount', example='2'),
}

model IncreaseNodeGroup {
  description?: string(name='Description', description='描述。', example='描述'),
  nodeCount: int32(name='NodeCount', description='节点数量。', example='3'),
  nodeGroupId: string(name='NodeGroupId', description='节点组ID。', example='ng-869471354ecd****'),
  paymentDuration?: int32(name='PaymentDuration', description='付费时长。', example='12'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', description='付费时长单位。', example='Month'),
  vSwitchId?: string(name='VSwitchId', description='虚拟机交换机ID。', example='vsw-hp35g7ya5ymw68mmg****'),
}

model IncreaseNodeGroupParam {
  nodeCount?: long(name='NodeCount'),
  nodeGroupId?: string(name='NodeGroupId'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  vSwitchId?: string(name='VSwitchId'),
}

model InstanceCategory {
  defaultValue?: string(name='DefaultValue', description='默认值。', example='CLUSTER'),
  keys?: [ string ](name='Keys', example='null'),
  values?: [ string ](name='Values', example='null'),
}

model InstanceType {
  cpuArchitecture?: string(name='CpuArchitecture', description='cpu架构。', example='X86'),
  cpuCore?: int32(name='CpuCore', description='vCPU内核数目。', example='4'),
  instanceCategory?: string(name='InstanceCategory', description='实例规格分类。取值范围：
- General-purpose： 通用型。
- Compute-optimized：计算型。
- Memory-optimized：内存型。
- Big data：大数据型。
- Local SSDs ：本地SSD型。
- High Clock Speed ：高主频型。
- Enhanced ：增强型。
- Shared：共享型。
- Compute-optimized with GPU ：GPU计算型。
- Visual Compute-optimized ：视觉计算型。
- Heterogeneous Service ：异构服务型。
- Compute-optimized with FPGA ：FPGA计算型。
- Compute-optimized with NPU ：NPU计算型。
- ECS Bare Metal ：弹性裸金属服务器。
- Super Computing Cluster：超级计算集群。', example='Compute-optimized'),
  instanceType?: string(name='InstanceType', description='实例规格。', example='ecs.g6.large'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='实例规格所属的实例规格族。取值请参见DescribeInstanceTypeFamilies。', example='ecs.g6'),
  localStorageAmount?: int32(name='LocalStorageAmount', description='实例挂载的本地盘的数量。', example='8'),
  localStorageCapacity?: long(name='LocalStorageCapacity', description='实例挂载的本地盘的单盘容量。单位：GiB', example='40'),
  optimized?: boolean(name='Optimized', description='是否IO优化类型。', example='true'),
}

model KeyValue {
  key?: string(name='Key', description='键。', example='key'),
  value?: string(name='Value', description='值。', example='value'),
}

model ListApiTemplatesDTO {
  apiName?: string(name='ApiName'),
  content?: string(name='Content'),
  gmtCreate?: long(name='GmtCreate'),
  gmtModified?: long(name='GmtModified'),
  id?: long(name='Id'),
  operatorId?: string(name='OperatorId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status'),
  templateId?: string(name='TemplateId'),
  templateName?: string(name='TemplateName'),
  userId?: string(name='UserId'),
}

model MetaStoreConf {
  dbPassword?: string(name='DbPassword'),
  dbUrl?: string(name='DbUrl'),
  dbUserName?: string(name='DbUserName'),
}

model MetricUnitValue {
  metricName?: string(name='MetricName', description='指标名称。'),
  metricUnit?: string(name='MetricUnit', description='指标单位。'),
}

model MetricsTrigger {
  conditionLogicOperator?: string(name='ConditionLogicOperator', description='多指标逻辑关系。默认：Or。取值范围：
- And:与
- Or：或', example='Or'),
  conditions?: [
    TriggerCondition
  ](name='Conditions', description='指标触发条件列表。'),
  coolDownInterval?: int32(name='CoolDownInterval', description='冷却时间。 单位为秒', example='300'),
  evaluationCount: int32(name='EvaluationCount', description='统计次数。', example='2'),
  timeConstraints?: [
    TimeConstraint
  ](name='TimeConstraints', description='时间限制。'),
  timeWindow: int32(name='TimeWindow', description='统计窗口。单位为秒。', example='30'),
}

model Node {
  autoRenew?: boolean(name='AutoRenew', description='节点是否自动续费。', example='false'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='节点自动续费时长。', example='1'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit', description='节点自动续费时长单位。', example='Month'),
  createTime?: long(name='CreateTime'),
  expireTime?: long(name='ExpireTime', description='节点过期时间。', example='1603728394857'),
  instanceType?: string(name='InstanceType', description='实例类型。', example='ecs.g6e.xlarge'),
  maintenanceStatus?: string(name='MaintenanceStatus', description='运维模式状态。取值范围：
- ON：处于运维模式。
- OFF：处于非运维模式。

为空表示处于非运维模式。'),
  nodeGroupId?: string(name='NodeGroupId', description='节点组ID。', example='ng-869471354ecd****'),
  nodeGroupType?: string(name='NodeGroupType', description='节点组类型。', example='CORE'),
  nodeId?: string(name='NodeId', description='节点ID。', example='i-bp1cudc25w2bfwl5****'),
  nodeName?: string(name='NodeName', description='节点名称。', example='core1-1'),
  nodeState?: string(name='NodeState', description='节点状态。取值范围：
- Pending：创建中。
- Starting：启动中。
- Running：运行中。
- Stopping：停止中。
- Stopped：已停止。
- Terminated：已终止。', example='Running'),
  privateIp?: string(name='PrivateIp', description='私网IP。', example='10.10.10.1'),
  publicIp?: string(name='PublicIp', description='公网IP。', example='42.120.75.***'),
  zoneId?: string(name='ZoneId', description='可用区ID。', example='cn-beijing-h'),
}

model NodeAttributes {
  keyPairName?: string(name='KeyPairName', description='ECS ssh登录秘钥。', example='emr_login'),
  masterRootPassword?: string(name='MasterRootPassword', description='MASTER节点root密码。', example='Adxefswfd****'),
  ramRole?: string(name='RamRole', description='ECS访问资源绑定的角色。', example='AliyunECSInstanceForEMRRole'),
  securityGroupId: string(name='SecurityGroupId', description='安全组ID。EMR只支持普通安全组，不支持企业安全组。', example='sg-hp3abbae8lb6lmb1****'),
  vpcId: string(name='VpcId', description='专有网络ID。', example='vpc-bp1tgey2p0ytxmdo5****'),
  zoneId: string(name='ZoneId', description='可用区ID。', example='cn-beijing-h'),
}

model NodeCountConstraint {
  max?: int32(name='Max', example='100'),
  min?: int32(name='Min', example='1'),
  type: string(name='Type', example='range'),
  values?: [ int32 ](name='Values'),
}

model NodeGroup {
  additionalSecurityGroupIds?: [ string ](name='AdditionalSecurityGroupIds', description='安全组ID。', example='["sg-hp3abbae8lb6lmb1****"]'),
  costOptimizedConfig?: CostOptimizedConfig(name='CostOptimizedConfig', description='成本优化模式配置。'),
  dataDisks?: [
    DataDisk
  ](name='DataDisks', description='数据盘列表。'),
  deploymentSetStrategy?: string(name='DeploymentSetStrategy', description='部署集策略。取值范围：
- NONE：不适用部署集。
- CLUSTER：使用集群级别部署集。
- NODE_GROUP：使用节点组级别部署集。

默认值：NONE。', example='NONE'),
  gracefulShutdown?: boolean(name='GracefulShutdown', description='节点组上部署的组件是否开启优雅下线。取值范围：
- true：开启优雅下线。
- false：不开启优雅下线。', example='false'),
  instanceTypes?: [ string ](name='InstanceTypes', description='实例类型列表。', example='["ecs.g6.4xlarge"]'),
  nodeGroupId?: string(name='NodeGroupId', description='节点组ID。', example='ng-869471354ecd****'),
  nodeGroupName?: string(name='NodeGroupName', description='节点组名称。最大长度128个字符。', example='core-1'),
  nodeGroupState?: string(name='NodeGroupState', description='节点组状态。', example='CREATED'),
  nodeGroupType?: string(name='NodeGroupType', description='节点组类型。取值范围：
- MASTER：管理类型节点组。
- CORE：存储类型节点组。
- TASK：计算类型节点组。', example='CORE'),
  nodeResizeStrategy?: string(name='NodeResizeStrategy', description='- COST_OPTIMIZED：成本优化策略。
- PRIORITY：优先级策略。', example='PRIORITY'),
  paymentType?: string(name='PaymentType', description='节点组付费类型。取值范围：
- PayAsYouGo：后付费，按量付费。
- Subscription：预付费，包年包月。', example='PayAsYouGo'),
  runningNodeCount?: int32(name='RunningNodeCount', description='存活节点数量。', example='3'),
  spotBidPrices?: [
    SpotBidPrice
  ](name='SpotBidPrices'),
  spotInstanceRemedy?: boolean(name='SpotInstanceRemedy', description='开启补齐抢占式实例后，当收到抢占式实例将被回收的系统消息时，伸缩组将尝试创建新的实例，替换掉将被回收的抢占式实例。取值范围：
- true：开启补齐抢占式实例。
- false：不开启补齐抢占式实例。

默认值：false。', example='true'),
  spotStrategy?: string(name='SpotStrategy', description='是否支持竞价实例。', example='NoSpot'),
  stateChangeReason?: NodeGroupStateChangeReason(name='StateChangeReason', description='状态变化原因。'),
  status?: string(name='Status', description='节点组状态，NodeGroupState别名。', example='CREATED'),
  systemDisk?: SystemDisk(name='SystemDisk', description='系统盘信息。'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='虚拟机交换机ID列表。', example='["vsw-hp35g7ya5ymw68mmg****"]'),
  withPublicIp?: boolean(name='WithPublicIp', description='是否开公网IP。取值范围：
- true：开公网。
- false：不开公网。', example='false'),
  zoneId?: string(name='ZoneId', description='可用区ID。', example='cn-beijing-h'),
}

model NodeGroupConfig {
  additionalSecurityGroupIds?: [ string ](name='AdditionalSecurityGroupIds', description='附加安全组。除集群设置的安全组外，为节点组单独设置的附加安全组。数组元数个数N的取值范围：0~2。', example='["sg-hp3abbae8lb6lmb1****"]'),
  autoScalingPolicy?: AutoScalingPolicy(name='AutoScalingPolicy'),
  componentTags?: [ string ](name='ComponentTags'),
  costOptimizedConfig?: CostOptimizedConfig(name='CostOptimizedConfig', description='成本优化模式配置。'),
  dataDisks?: [
    DataDisk
  ](name='DataDisks', description='数据盘。当前数据盘只支持一种磁盘类型，即数组元数个数N的取值范围：1~1。'),
  deploymentSetStrategy?: string(name='DeploymentSetStrategy', description='部署集策略。取值范围：
- NONE：不适用部署集。
- CLUSTER：使用集群级别部署集。
- NODE_GROUP：使用节点组级别部署集。

默认值：NONE。', example='NONE'),
  gracefulShutdown?: boolean(name='GracefulShutdown', description='节点组上部署的组件是否开启优雅下线。取值范围：
- true：开启优雅下线。
- false：不开启优雅下线。

默认值：false。', example='false'),
  instanceTypes?: [ string ](name='InstanceTypes', description='节点实例类型列表。数组元数个数N的取值范围：1~100。', example='["ecs.g6.xlarge"]'),
  nodeCount?: int32(name='NodeCount', description='节点数量。取值范围：1~1000。', example='3'),
  nodeGroupName?: string(name='NodeGroupName', description='节点组名称。最大长度128个字符。集群内要求节点组名称唯一。', example='core-1'),
  nodeGroupType: string(name='NodeGroupType', description='节点组类型。取值范围：
- MASTER：管理类型节点组。
- CORE：存储类型节点组。
- TASK：计算类型节点组。', example='CORE'),
  nodeResizeStrategy?: string(name='NodeResizeStrategy', description='节点扩容策略。取值范围：
- COST_OPTIMIZED：成本优化策略。
- PRIORITY：优先级策略。

默认值：PRIORITY。', example='PRIORITY'),
  paymentType?: string(name='PaymentType', description='节点组付费类型。不传入时默认和集群付费类型一致。取值范围：
- PayAsYouGo：后付费，按量付费。
- Subscription：预付费，包年包月。

默认值：PayAsYouGo。', example='PayAsYouGo'),
  spotBidPrices?: [
    SpotBidPrice
  ](name='SpotBidPrices', description='抢占式Spot实例出价价格。参数SpotStrategy取值为SpotWithPriceLimit时生效。数组元数个数N的取值范围：0~100。'),
  spotInstanceRemedy?: boolean(name='SpotInstanceRemedy', description='开启后，当收到抢占式实例将被回收的系统消息时，伸缩组将尝试创建新的实例，替换掉将被回收的抢占式实例。取值范围：
- true：开启补齐抢占式实例。
- false：不开启补齐抢占式实例。

默认值：false。', example='true'),
  spotStrategy?: string(name='SpotStrategy', description='抢占式Spot实例策略。取值范围：
- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置最高出价的抢占式实例。
- SpotAsPriceGo：系统自动出价，最高按量付费价格的抢占式实例。

默认值：NoSpot。', example='NoSpot'),
  subscriptionConfig?: SubscriptionConfig(name='SubscriptionConfig', description='节点组预付费配置。不传入时默认和集群预付费配置一致。'),
  systemDisk?: SystemDisk(name='SystemDisk', description='系统盘。'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='虚拟机交换机ID列表。数组元数个数N的取值范围：1~20。', example='["vsw-hp35g7ya5ymw68mmg****"]'),
  withPublicIp?: boolean(name='WithPublicIp', description='是否开公网IP。取值范围：
- true：开公网。
- false：不开公网。

默认值：false。', example='false'),
}

model NodeGroupParam {
  autoPayOrder?: boolean(name='AutoPayOrder'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit'),
  dataDisks?: [
    DiskInfo
  ](name='DataDisks'),
  description?: string(name='Description'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  nodeCount?: int32(name='NodeCount'),
  nodeGroupIndex?: int32(name='NodeGroupIndex'),
  nodeGroupName?: string(name='NodeGroupName'),
  nodeGroupType?: string(name='NodeGroupType'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  paymentType?: string(name='PaymentType'),
  systemDisk?: SystemDiskParam(name='SystemDisk'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  zoneId?: string(name='ZoneId'),
}

model NodeGroupStateChangeReason {
  code?: string(name='Code', description='状态码。', example='MissingParameter'),
  message?: string(name='Message', description='描述信息。', example='The instance type is required.'),
}

model NodeSelector {
  nodeGroupId?: string(name='NodeGroupId', description='节点组ID。当NodeSelectType取值NodeGroup时，该参数生效。', example='ng-869471354ecd****', deprecated='true'),
  nodeGroupIds?: [ string ](name='NodeGroupIds'),
  nodeGroupName?: string(name='NodeGroupName', description='节点组名称。当NodeSelectType取值NodeGroup，且参数NodeGroupId为空时生效，该参数生效。', example='master-1', deprecated='true'),
  nodeGroupNames?: [ string ](name='NodeGroupNames'),
  nodeGroupTypes?: [ string ](name='NodeGroupTypes', description='节点组类型。当NodeSelectType取值NodeGroup，且参数NodeGroupId为空时生效。数组元数个数N取值范围：0~10。', example='["CORE","TASK"]'),
  nodeNames?: [ string ](name='NodeNames', description='节点名称列表。当NodeSelectType取值Node时，该参数生效。', example='["core1-1"]'),
  nodeSelectType: string(name='NodeSelectType', description='节点选择类型。取值范围：
- CLUSTER：集群。
- NODE_GROUP：节点组。
- NODE：节点。', example='CLUSTER'),
}

model OSUser {
  group?: string(name='Group', description='用户组。', example='hadoop'),
  password?: string(name='Password', description='用户密码。', example='12345****'),
  user?: string(name='User', description='用户名称。', example='王五'),
}

model OnKubeClusterResource {
  cpu?: string(name='Cpu'),
  memory?: string(name='Memory'),
}

model Operation {
  clusterId?: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****'),
  createTime?: long(name='CreateTime', description='创建时间。', example='1628589439114'),
  description?: string(name='Description', description='描述。', example='start'),
  endTime?: long(name='EndTime', description='结束时间。', example='1628589439114'),
  operationId?: string(name='OperationId', description='操作ID。', example='op-13c37a77c505****'),
  operationState?: string(name='OperationState', description='操作状态。', example='COMPLETED'),
  operationType?: string(name='OperationType', description='操作类型。', example='CLUSTER'),
  startTime?: long(name='StartTime', description='开始时间。', example='1628589439114'),
  stateChangeReason?: OperationStateChangeReason(name='StateChangeReason', description='状态转换原因。'),
}

model OperationData {
  actualDeliveredAmounts?: int32(name='actualDeliveredAmounts'),
  toBeDeliveredAmounts?: int32(name='toBeDeliveredAmounts'),
}

model OperationStateChangeReason {
  code?: string(name='Code', description='状态码。', example='OutOfStock'),
  message?: string(name='Message', description='状态变化信息。', example='The requested resource is sold out in the specified zone, try other types of resources or other regions and zones.'),
}

model Order {
  createTime?: string(name='CreateTime'),
  orderId?: string(name='OrderId'),
}

model Page {
  items?: [ string ](name='Items'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  totalCount?: long(name='TotalCount'),
}

model Pod {
  message?: string(name='Message'),
  podName?: string(name='PodName'),
  podStatus?: string(name='PodStatus'),
  reason?: string(name='Reason'),
}

model PriceInfo {
  currency?: string(name='Currency'),
  discountPrice?: string(name='DiscountPrice'),
  originalPrice?: string(name='OriginalPrice'),
  payType?: string(name='PayType'),
  promotionResults?: [
    PromotionInfo
  ](name='PromotionResults'),
  resourceType?: string(name='ResourceType'),
  spotInstanceTypeOriginalPrice?: string(name='SpotInstanceTypeOriginalPrice'),
  spotInstanceTypePrice?: string(name='SpotInstanceTypePrice'),
  spotOriginalPrice?: string(name='SpotOriginalPrice'),
  spotPrice?: string(name='SpotPrice'),
  taxPrice?: string(name='TaxPrice'),
  tradePrice?: string(name='TradePrice'),
}

model Promotion {
  productCode?: string(name='ProductCode', description='产品码。', example='ecs'),
  promotionDesc?: string(name='PromotionDesc', description='优惠券描述。', example='5元优惠券（有效期至23年8月11日）'),
  promotionName?: string(name='PromotionName', description='优惠券名称。', example='5元优惠券'),
  promotionOptionCode?: string(name='PromotionOptionCode', description='优惠券码。', example='youhui_quan'),
  promotionOptionNo: string(name='PromotionOptionNo', description='优惠券号。', example='ABC123'),
}

model PromotionInfo {
  canPromFee?: string(name='CanPromFee'),
  isSelected?: string(name='IsSelected'),
  promotionDesc?: string(name='PromotionDesc'),
  promotionName?: string(name='PromotionName'),
  promotionOptionCode?: string(name='PromotionOptionCode'),
  promotionOptionNo?: string(name='PromotionOptionNo'),
}

model PromotionParam {
  productCode?: string(name='ProductCode'),
  promotionOptionCode?: string(name='PromotionOptionCode'),
  promotionOptionNo?: string(name='PromotionOptionNo'),
}

model RecommendScalingRule {
  activityType: string(name='ActivityType', description='伸缩活动类型。取值范围：
- SCALE_OUT：扩容。
- SCALE_IN：缩容。', example='SCALE_IN'),
  adjustmentValue: int32(name='AdjustmentValue', description='调整值。需要为正数，代表需要扩容或者缩容的实例数量。', example='100'),
  instanceType?: string(name='InstanceType', description='推荐的规格类型。'),
  maxSave?: float(name='MaxSave', description='最大节约成本。', example='0.12'),
  metricsTrigger?: MetricsTrigger(name='MetricsTrigger', description='按照负载伸缩描述。
<p>'),
  ruleName: string(name='RuleName', description='规则名称。', example='scale-out-memory'),
  timeTrigger?: TimeTrigger(name='TimeTrigger', description='按照时间伸缩描述。
<p>'),
  triggerType: string(name='TriggerType', description='伸缩规则类型。 取值范围：
- TIME_TRIGGER: 按时间伸缩。
- METRICS_TRIGGER: 按负载伸缩。', example='TIME_TRIGGER'),
}

model RenewInstance {
  emrRenewDuration?: int32(name='EmrRenewDuration', description='emr实例续费时长。', example='12'),
  emrRenewDurationUnit?: string(name='EmrRenewDurationUnit', description='emr实例续费时长单位。', example='Month'),
  instanceId: string(name='InstanceId', description='节点ID。', example='i-bp1cudc25w2bfwl5****'),
  renewDuration?: int32(name='RenewDuration', description='续费时长。', example='12'),
  renewDurationUnit?: string(name='RenewDurationUnit', description='付费时长单位。', example='Month'),
}

model RenewInstanceParam {
  instanceId?: string(name='InstanceId'),
  renewDuration?: long(name='RenewDuration'),
  renewDurationUnit?: string(name='RenewDurationUnit'),
}

model ReplacementStrategy {
  instanceCategories?: [
    InstanceCategory
  ](name='InstanceCategories'),
}

model RequestTag {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model ResizeDiskNodeGroupParam {
  dataDiskCapacity?: long(name='DataDiskCapacity'),
  nodeGroupId?: string(name='NodeGroupId'),
  rollingRestart?: boolean(name='RollingRestart'),
}

model ScalingActivity {
  cause?: string(name='Cause'),
  description?: string(name='Description'),
  endTime?: long(name='EndTime'),
  essScalingRuleId?: string(name='EssScalingRuleId'),
  expectNum?: int32(name='ExpectNum'),
  hostGroupName?: string(name='HostGroupName'),
  id?: string(name='Id'),
  instanceIds?: string(name='InstanceIds'),
  scalingGroupId?: string(name='ScalingGroupId'),
  scalingRuleName?: string(name='ScalingRuleName'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
  totalCapacity?: int32(name='TotalCapacity'),
  transition?: string(name='Transition'),
}

model ScalingActivityResult {
  instanceId?: string(name='InstanceId', description='实例ID。', example='i-bp1cudc25w2bfwl5****'),
}

model ScalingActivityResultDTO {
  instanceId?: string(name='InstanceId', description='实例ID。', example='i-bp1cudc25w2bfwl5****'),
}

model ScalingAnalyzeResult {
  actualUsage?: float(name='ActualUsage', description='实际资源利用率。', example='0.12'),
  idealUsage?: float(name='IdealUsage', description='理想资源用量。', example='0.12'),
  releaseCores?: int32(name='ReleaseCores', description='固定资源释放核数（非master）core。', example='1'),
  reservedCores?: int32(name='ReservedCores', description='固定资源保留核数（非master）core。', example='1'),
}

model ScalingAnalyzeTimeRange {
  endTime?: long(name='EndTime', description='结束时间。', example='1676441972000'),
  startTime?: long(name='StartTime', description='起始时间。', example='1676441971000'),
  type?: string(name='Type', description='峰谷类型。 peak/valley', example='peak'),
}

model ScalingConstraints {
  maxCapacity?: int32(name='MaxCapacity', description='最大值。', example='2000'),
  minCapacity?: int32(name='MinCapacity', description='最小值。', example='0'),
}

model ScalingGroupConfig {
  dataDiskCategory?: string(name='DataDiskCategory', description='数据盘类型。', example='cloud_essd'),
  dataDiskCount?: int32(name='DataDiskCount', description='数据盘个数。', example='4'),
  dataDiskSize?: long(name='DataDiskSize', description='数据盘大小,单位GB。', example='40'),
  defaultCoolDownTime?: long(name='DefaultCoolDownTime', description='默认冷却时间。', example='0'),
  instanceTypeList?: [ 
    {
      instanceType?: string(name='InstanceType', description='Ecs类型。', example='ecs.c5.xlarge'),
      spotPriceLimit?: float(name='SpotPriceLimit', description='抢占价格上限,可空。', example='0.79'),
    }
  ](name='InstanceTypeList', description='抢占实例列表。'),
  multiAvailablePolicy?: {
    policyParam?: {
      onDemandBaseCapacity?: int32(name='OnDemandBaseCapacity', description='按需实例最小个数。', example='1'),
      onDemandPercentageAboveBaseCapacity?: int32(name='OnDemandPercentageAboveBaseCapacity', description='按需实例百分比。', example='10'),
      spotInstancePools?: int32(name='SpotInstancePools', description='抢占实例类型池规模。', example='10'),
      spotInstanceRemedy?: boolean(name='SpotInstanceRemedy', description='是否使用按量补偿。', example='false'),
    }(name='PolicyParam', description='资源可用性策略(成本优化参数)。'),
    policyType?: string(name='PolicyType', description='策略类型。', example='PRIORITY'),
  }(name='MultiAvailablePolicy', description='资源可用性策略(成本优化参数)。'),
  nodeOfflinePolicy?: {
    mode?: string(name='Mode', description='下线模式,是否为优雅下线。', example='DEFAULT'),
    timeoutMs?: long(name='TimeoutMs', description='下线超时时间,单位毫秒。', example='1000'),
  }(name='NodeOfflinePolicy', description='节点下线策略。'),
  privatePoolOptions?: {
    id?: string(name='Id', description='私有池id。', example='eap-bp67acfmxazb4****'),
    matchCriteria?: string(name='MatchCriteria', description='实例启动的私有池容量选项。。', example='Open'),
  }(name='PrivatePoolOptions', description='私有池选项	。'),
  scalingMaxSize?: int32(name='ScalingMaxSize', description='伸缩组节点最大个数。', example='10'),
  scalingMinSize?: int32(name='ScalingMinSize', description='伸缩组节点最小个数。', example='1'),
  spotStrategy?: string(name='SpotStrategy', description='抢占式Spot实例策略。', example='NoSpot'),
  sysDiskCategory?: string(name='SysDiskCategory', description='系统盘类型。', example='cloud_essd'),
  sysDiskSize?: long(name='SysDiskSize', description='系统盘大小,单位GB。', example='80'),
  triggerMode?: string(name='TriggerMode', description='伸缩活动触发模式。', example='ByLoad'),
}

model ScalingRule {
  activityType: string(name='ActivityType', description='伸缩活动类型。取值范围：
- SCALE_OUT：扩容。
- SCALE_IN：缩容。', example='SCALE_IN'),
  adjustmentValue: int32(name='AdjustmentValue', description='调整值。需要为正数，代表需要扩容或者缩容的实例数量。', example='100'),
  metricsTrigger?: MetricsTrigger(name='MetricsTrigger', description='按照负载伸缩描述。
<p>'),
  ruleName: string(name='RuleName', description='规则名称。', example='scale-out-memory'),
  timeTrigger?: TimeTrigger(name='TimeTrigger', description='按照时间伸缩描述。
<p>'),
  triggerType: string(name='TriggerType', description='伸缩规则类型。 取值范围：
- TIME_TRIGGER: 按时间伸缩。
- METRICS_TRIGGER: 按负载伸缩。', example='TIME_TRIGGER'),
}

model ScalingRuleSpec {
  adjustmentValue: int32(name='AdjustmentValue', description='调整值。需要为正数，代表需要扩容或者缩容的实例数量。', example='100'),
  byLoadScalingRuleSpec?: {
    comparisonOperator: string(name='ComparisonOperator', description='比较符。', example='LT'),
    evaluationCount: int32(name='EvaluationCount', description='统计次数。', example='2'),
    metricName: string(name='MetricName', description='指标名称。指标名称需要在 ListAutoScalingMetrics 接口返回的指标名称列表中。', example='yarn_resourcemanager_root_availablememoryusage'),
    statistics: string(name='Statistics', description='统计量名称。', example='AVG'),
    threshold: double(name='Threshold', description='阈值。', example='12.5'),
    timeWindow: int32(name='TimeWindow', description='统计窗口。单位为秒。', example='30'),
  }(name='ByLoadScalingRuleSpec', description='按照负载伸缩描述。'),
  byTimeScalingRuleSpec?: {
    endTime?: long(name='EndTime', description='重复执行定时任务的结束时间戳。单位为毫秒。', example='1639714800000'),
    launchTime: long(name='LaunchTime', description='启动时间戳。单位为毫秒。', example='1639714634819'),
    recurrenceType?: string(name='RecurrenceType', description='指定时间规则的执行类型。', example='WEEKLY'),
    recurrenceValue?: string(name='RecurrenceValue', description='重复执行定时任务的数值。具体取值取决于 recurrenceType 设置。', example='MON,FRI,SUN'),
  }(name='ByTimeScalingRuleSpec', description='按照时间伸缩描述。'),
  coolDownInterval: int32(name='CoolDownInterval', description='冷却时间。单位为秒，取值范围在30~10800秒之间。', example='60'),
  scalingActivityType: string(name='ScalingActivityType', description='伸缩活动类型。', example='SCALE_IN'),
  scalingRuleName: string(name='ScalingRuleName', description='规则名称。', example='scale-out-memory'),
  scalingRuleType: string(name='ScalingRuleType', description='伸缩规则类型。', example='BY_TIME'),
}

model ScalingRuleV1 {
  adjustmentType?: string(name='AdjustmentType', description='调整类型。', example='QUANTITY_CHANGE_IN_CAPACITY'),
  adjustmentValue?: int32(name='AdjustmentValue', description='调整值,正数为扩容,负数为缩容。', example='1'),
  coolDownTime?: int32(name='CoolDownTime', description='冷却时间,单位秒。', example='4'),
  ruleName?: string(name='RuleName', description='规则名称。', example='tule1'),
  ruleParam?: {
    comparisonOperator?: string(name='ComparisonOperator', description='[负载触发参数] 比较符。', example='>'),
    evaluationCount?: int32(name='EvaluationCount', description='[负载触发参数] 统计次数。', example='1'),
    launchExpirationTime?: int32(name='LaunchExpirationTime', description='[时间调度参数] 周期类型周期过期时间。', example='0'),
    launchTime?: string(name='LaunchTime', description='[时间调度参数] 周期类型周期开始时间。', example='2021-09-15T04:02Z'),
    metricName?: string(name='MetricName', description='[负载触发参数] 度量名称。', example='YarnRootAvailableVCores'),
    period?: int32(name='Period', description='[负载触发参数] 统计时长,单位分钟。', example='5'),
    recurrenceEndTime?: string(name='RecurrenceEndTime', description='[时间调度参数] 周期类型周期结束时间。', example='2021-09-16T05:02Z'),
    recurrenceType?: string(name='RecurrenceType', description='[时间调度参数] 周期类型。', example='Daily'),
    recurrenceValue?: string(name='RecurrenceValue', description='[时间调度参数] 周期类型周期值。', example='1'),
    statistics?: string(name='Statistics', description='[负载触发参数] 统计方式。', example='Average'),
    threshold?: int32(name='Threshold', description='[负载触发参数] 阈值。', example='1'),
  }(name='RuleParam', description='规则参数。'),
  ruleType?: string(name='RuleType', description='规则类型。', example='BY_LOAD'),
  scalingConfigBizId?: string(name='ScalingConfigBizId', description='弹性规则配置ID。', example='SCB-DCD96BCCFED1****'),
}

model Script {
  executionFailStrategy?: string(name='ExecutionFailStrategy', description='执行失败策略。', example='FAILED_CONTINUE'),
  executionMoment?: string(name='ExecutionMoment', description='脚本的执行时机。', example='BEFORE_INSTALL'),
  nodeSelector: NodeSelector(name='NodeSelector', description='节点选择器。'),
  priority?: int32(name='Priority', description='脚本执行优先级。取值范围：1~100。', example='1', deprecated='true'),
  scriptArgs?: string(name='ScriptArgs', description='脚本执行参数。', example='-host 10.0.10.5 -m 30'),
  scriptName: string(name='ScriptName', description='脚本名称。长度为1~64个字符，必须以大小字母或中文开头，不能以http://和https://开头。可以包含中文、英文、数字、下划线（_）、或者短划线（-）', example='脚本名-1'),
  scriptPath: string(name='ScriptPath', description='脚本所在OSS路径。', example='oss://bucket1/update_hosts.sh'),
}

model SpotBidPrice {
  bidPrice?: double(name='BidPrice', description='实例的每小时最高出价。支持最大3位小数，参数SpotStrategy=SpotWithPriceLimit时，该参数生效。', example='1000.0'),
  instanceType?: string(name='InstanceType', description='实例类型。', example='ecs.g7.2xlarge'),
}

model SpotPriceLimit {
  instanceType?: string(name='InstanceType'),
  priceLimit?: double(name='PriceLimit'),
}

model StateChangeReason {
  code?: string(name='Code', description='状态码。', example='MissingParameter'),
  message?: string(name='Message', description='描述信息。', example='The instance type is required.'),
}

model SubscriptionConfig {
  autoRenew?: boolean(name='AutoRenew', description='自动续费。取值范围：
- true：开启启动续费。
- false：不开启自动续费。
默认值：false。', example='true'),
  autoRenewDuration?: int32(name='AutoRenewDuration', description='自动续费时长。当AutoRenew取值为true时生效。当AutoRenewDurationUnit取值为Month时，取值：1、2、3、4、5、6、7、8、9、12、24、36、48、60。', example='12'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit', description='- Month：月。', example='Month'),
  paymentDuration: int32(name='PaymentDuration', description='付费时长。PaymentDurationUnit取值为Month时，取值：1、2、3、4、5、6、7、8、9、12、24、36、48、60。', example='12'),
  paymentDurationUnit: string(name='PaymentDurationUnit', description='付费时长单位。取值范围：
- Month：月。', example='Month'),
}

model SystemDisk {
  category: string(name='Category', description='磁盘类型。', example='cloud_essd'),
  count?: int32(name='Count', description='每个节点系统盘数量，默认值为1。', example='1'),
  performanceLevel?: string(name='PerformanceLevel', description='创建ESSD云盘作为系统盘使用时，设置云盘的性能等级。取值范围：
- PL0：单盘最高随机读写IOPS 1万。
- PL1（默认）：单盘最高随机读写IOPS 5万。
- PL2：单盘最高随机读写IOPS 10万。
- PL3：单盘最高随机读写IOPS 100万。

默认值：PL1。', example='PL1'),
  size: int32(name='Size', description='单位GB。', example='60'),
}

model SystemDiskParam {
  category?: string(name='Category'),
  performanceLevel?: string(name='PerformanceLevel'),
  size?: int32(name='Size'),
}

model Tag {
  key: string(name='Key', description='标签键。必填参数，不允许为空字符串。最多支持128个字符，不能以aliyun和acs:开头，不能包含http://或https://。', example='department'),
  value?: string(name='Value', description='标签值。非必填，可以为空字符串。最多支持128个字符，不能以acs:开头，不能包含http://或者https://。', example='IT'),
}

model TagResource {
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: string(name='TagKey'),
  tagValue?: string(name='TagValue'),
}

model TimeConstraint {
  endTime?: string(name='EndTime', description='结束时间。取值范围：00:00:00至23:59:59', example='23:59:59'),
  startTime?: string(name='StartTime', description='开始时间。取值范围：00:00:00至23:59:59', example='06:00:00'),
}

model TimeRange {
  endTime?: string(name='EndTime', description='结束时间。', example='1676441972000'),
  startTime?: string(name='StartTime', description='起始时间。', example='1676441971000'),
}

model TimeTrigger {
  endTime?: long(name='EndTime', description='结束时间戳。单位为毫秒。', example='1639714800000'),
  launchExpirationTime?: int32(name='LaunchExpirationTime', description='定时任务触发操作失败后，在此时间内重试。单位为秒，取值范围：0~3600。', example='600'),
  launchTime: string(name='LaunchTime', description='启动时间。'),
  recurrenceType?: string(name='RecurrenceType', description='指定时间规则的执行类型。', example='WEEKLY'),
  recurrenceValue?: string(name='RecurrenceValue', description='重复执行定时任务的数值。具体取值取决于 recurrenceType 设置。
- recurrenceType 取 MINUTELY 时，只能填一个数值，取值范围：1~1440。
- recurrenceType 取 HOURLY 时，只能填一个数值，取值范围：1~24。
- recurrenceType 取 DAILY 时，只能填一个数值，取值范围：1~31。
- recurrenceType 取 WEEKLY 时，可以填入多个值，填多个值时使用英文逗号（,）分隔。周一到周天分别用MON，TUE，WED，THU，FRI，SAT，SUN代替。 比如 MON,FRI,SUN 代表周一、周五、周天。
- recurrenceType 取 MONTHLY 时，格式为A-B或者A,B。A、B的取值范围为1~31，如果使用A-B时B必须大于A。', example='MON,FRI,SUN'),
  startTime?: long(name='StartTime', description='开始时间戳。单位为毫秒。', example='1639714800000'),
}

model Toleration {
  effect?: string(name='Effect'),
  key?: string(name='Key'),
  operator?: string(name='Operator'),
  value?: string(name='Value'),
}

model TriggerCondition {
  comparisonOperator: string(name='ComparisonOperator', description='比较符。取值范围：
- EQ:等于。
- NE:不等于。
- GT:大于。
- LT:小于。
- GE:大于等于。
- LE:小于等于。', example='LT'),
  metricName: string(name='MetricName', description='指标名称。指标名称需要在 ListAutoScalingMetrics 接口返回的指标名称列表中。', example='yarn_resourcemanager_root_availablememoryusage'),
  statistics: string(name='Statistics', description='统计量名称。取值范围：
- MAX：最大值。
- MIN：最小值。
- AVG：平均值。', example='AVG'),
  tags?: [
    Tag
  ](name='Tags', description='指标Tag。'),
  threshold: double(name='Threshold', description='阈值。', example='12.5'),
}

model UpdateApplicationConfig {
  configDescription?: string(name='ConfigDescription', description='修改描述。', example='dfs.namenode.checkpoint.period'),
  configFileName?: string(name='ConfigFileName', description='应用配置文件名。', example='hdfs-site.xml'),
  configItemKey?: string(name='ConfigItemKey', description='配置项键。', example='dfs.namenode.checkpoint.period'),
  configItemValue?: string(name='ConfigItemValue', description='配置项值。', example='3600s'),
}

model UpdateSpecNodeGroup {
  newInstanceType: string(name='NewInstanceType', description='新实例类型。', example='ecs.g7.xlarge'),
  nodeGroupId: string(name='NodeGroupId', description='节点组ID。', example='ng-869471354ecd****'),
}

model UpdateSpecNodeGroupParam {
  newInstanceType?: string(name='NewInstanceType'),
  nodeGroupId?: string(name='NodeGroupId'),
}

model User {
  group?: string(name='Group', description='用户组。', example='hadoop'),
  password: string(name='Password', description='用户密码。', example='12345****'),
  userId: string(name='UserId', description='用户ID。', example='1238539****'),
  userName: string(name='UserName', description='用户名称。', example='王五'),
  userType?: string(name='UserType', description='用户类型。', example='LDAP'),
}

model UserParam {
  password?: string(name='Password'),
  userId?: string(name='UserId'),
  userName?: string(name='UserName'),
}

model ValueConstraints {
  defaultValue?: int32(name='DefaultValue', description='默认值。'),
  end?: int32(name='End', description='结束值。'),
  start?: int32(name='Start', description='起始值。'),
  step?: int32(name='Step', description='步长。'),
  type?: string(name='Type', description='值限制类型。'),
  values?: [ int32 ](name='Values', description='枚举值。', example='null'),
}

model CreateApiTemplateRequest {
  apiName: string(name='ApiName', description='The name of the API operation. You can create only a cluster API operation template. Set the value to CreateCluster.', example='CreateCluster', position='Query'),
  content: string(name='Content', description='The content of the cluster API operation template. Set the value to JSON strings of the request parameters of the [CreateCluster](https://help.aliyun.com/zh/emr/emr-on-ecs/developer-reference/api-emr-2021-03-20-createcluster) API operation for creating a cluster.', example='content', position='Query'),
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzabjyop****', position='Query'),
  templateName: string(name='TemplateName', description='集群模板名字。', example='DATALAKE模板', position='Query'),
}

model CreateApiTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: string(name='Success', example='at-41b4c6a0fc63****'),
  templateId?: string(name='TemplateId', example='at-41b4c6a0fc63****'),
}

model CreateApiTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiTemplateResponseBody(name='body'),
}

async function createApiTemplate(request: CreateApiTemplateRequest): CreateApiTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  applicationConfigs?: [
    ApplicationConfig
  ](name='ApplicationConfigs', description='The application configurations. You can specify a maximum of 1,000 items.', position='Query'),
  applications: [
    Application
  ](name='Applications', description='The applications. You can specify a maximum of 100 items.', position='Query'),
  bootstrapScripts?: [
    Script
  ](name='BootstrapScripts', description='The bootstrap actions. You can specify a maximum of 10 items.', position='Query'),
  clientToken?: string(name='ClientToken', description='The idempotent client token. If you call the same ClientToken multiple times, the returned results are the same. Only one cluster can be created with the same ClientToken.', example='A7D960FA-6DBA-5E07-8746-A63E3E4D****', position='Query'),
  clusterName: string(name='ClusterName', description='The name of the cluster. The name must be 1 to 128 characters in length. It must start with a letter and cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='emrtest', position='Query'),
  clusterType: string(name='ClusterType', description='The type of the cluster. Valid values:

*   DATALAKE: data lake
*   OLAP: online analytical processing (OLAP)
*   DATAFLOW: Dataflow
*   DATASERVING: DataServing
*   CUSTOM: a custom hybrid cluster.
*   HADOOP: the old data lake. We recommend that you use the new data lake.

If you create an EMR cluster for the first time after 17:00 (UTC +8) on December 19, 2022, you cannot select the HADOOP, DATA_SCIENCE, PRESTO, or ZOOKEEPER cluster type.', example='DATALAKE', position='Query'),
  deployMode?: string(name='DeployMode', description='The deployment mode of master nodes in the cluster. Valid values:

*   NORMAL: regular mode. This is the default value. A cluster that contains only one master node is created.
*   HA: high availability (HA) mode. A cluster that contains three master nodes is created.', example='HA', position='Query'),
  description?: string(name='Description', position='Query'),
  nodeAttributes: NodeAttributes(name='NodeAttributes', description='The attributes of all ECS instances.', position='Query'),
  nodeGroups: [
    NodeGroupConfig
  ](name='NodeGroups', description='The node groups. You can specify a maximum of 100 items.', example='NORMAL', position='Query'),
  paymentType?: string(name='PaymentType', description='The billing cycle of the instance. Valid values:

*   PayAsYouGo: pay-as-you-go
*   Subscription: subscription

Default value: PayAsYouGo.', example='PayAsYouGo', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  releaseVersion: string(name='ReleaseVersion', description='The version of EMR. You can view the EMR release version on the EMR cluster purchase page.', example='EMR-5.8.0', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the ENI.', example='rg-acfmzabjyop****', position='Query'),
  securityMode?: string(name='SecurityMode', description='The security mode of the cluster. Valid values:

*   NORMAL: disables Kerberos authentication for the cluster. This is the default value.
*   KERBEROS: enables Kerberos authentication for the cluster.', example='NORMAL', position='Query'),
  subscriptionConfig?: SubscriptionConfig(name='SubscriptionConfig', description='The subscription configurations. This parameter is required only if you set the PaymentType parameter to Subscription.', position='Query'),
  tags?: [
    Tag
  ](name='Tags', description='The tags. You can specify a maximum of 20 items.', example='A7D960FA-6DBA-5E07-8746-A63E3E4D****', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of cluster.', example='c-b933c5aac7f7***'),
  operationId?: string(name='OperationId', description='The ID of the operation.', example='op-13c37a77c505****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateNodeGroupRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='C-E525E04F3914****', position='Query'),
  nodeGroup: NodeGroupConfig(name='NodeGroup', description='The information about the node group.', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model CreateNodeGroupResponseBody = {
  nodeGroupId?: string(name='NodeGroupId', description='The ID of the machine group.', example='G-21E39B11837E****'),
  requestId?: string(name='RequestId', description='The request ID.', example='9E3A7161-EB7B-172B-8D18-FFB06BA3****'),
}

model CreateNodeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeGroupResponseBody(name='body'),
}

/**
  * 创建节点组。
  *
 */
async function createNodeGroup(request: CreateNodeGroupRequest): CreateNodeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNodeGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateScriptRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  scriptType: string(name='ScriptType', description='The type of the script. Valid values:

*   BOOTSTRAP: indicates a bootstrap action of the Elastic Compute Service (ECS) instance.
*   NORMAL: indicates a common script.', example='BOOTSTRAP', position='Query'),
  scripts: [
    Script
  ](name='Scripts', description='The scripts.', position='Query'),
}

model CreateScriptResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  scriptId?: string(name='ScriptId', description='The script ID.', example='cs-d6d6bc841c0d415fb81808bc6d09****'),
}

model CreateScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScriptResponseBody(name='body'),
}

async function createScript(request: CreateScriptRequest): CreateScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScript', 'POST', '/', 'json', false, 'json', request);
}

model DecreaseNodesRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  decreaseNodeCount?: int32(name='DecreaseNodeCount', description='The number of nodes to scale in. The number of nodes to be scaled in. The value should be less than the number of surviving nodes in the current node group.', example='3', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The ID of the node group.', example='ng-869471354ecd****', position='Query'),
  nodeIds?: [ string ](name='NodeIds', description='The array of node IDs. Valid values of array element N: 1 to 500.', example='["i-bp1cudc25w2bfwl5****"]', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
}

model DecreaseNodesResponseBody = {
  operationId?: string(name='OperationId', description='Operation ID.', example='op-13c37a77c505****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='44430037-E59A-3E66-A2B0-97D155346F22'),
}

model DecreaseNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DecreaseNodesResponseBody(name='body'),
}

async function decreaseNodes(request: DecreaseNodesRequest): DecreaseNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DecreaseNodes', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiTemplateRequest {
  apiName: string(name='ApiName', description='接口名。', example='CreateCluster', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzabjyop****', position='Query'),
  templateId: string(name='TemplateId', description='集群模板id。', example='at-****', position='Query'),
}

model DeleteApiTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: boolean(name='Success', example='true', deprecated='true'),
}

model DeleteApiTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiTemplateResponseBody(name='body'),
}

/**
  * 创建集群模板
  *
 */
async function deleteApiTemplate(request: DeleteApiTemplateRequest): DeleteApiTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
}

model DeleteClusterResponseBody = {
  operationId?: string(name='OperationId', description='The ID of the operation.', example='op-13c37a77c505****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScriptRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  scriptId: string(name='ScriptId', description='The script ID.', example='cs-da7476a7679a4d4c9cede62ebe09****', position='Query'),
  scriptType: string(name='ScriptType', description='The type of the script. Valid values:

*   BOOTSTRAP: indicates a bootstrap action of the Elastic Compute Service (ECS) instance.
*   NORMAL: indicates a common script.', example='BOOTSTRAP', position='Query'),
}

model DeleteScriptResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DeleteScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScriptResponseBody(name='body'),
}

async function deleteScript(request: DeleteScriptRequest): DeleteScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScript', 'POST', '/', 'json', false, 'json', request);
}

model GetApiTemplateRequest {
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
  templateId: string(name='TemplateId', description='集群模板id。', example='at-41b4c6a0fc63****', position='Query'),
}

model GetApiTemplateResponseBody = {
  data?: ApiTemplate(name='Data', description='The content of the API operation template.', deprecated='true'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetApiTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApiTemplateResponseBody(name='body'),
}

async function getApiTemplate(request: GetApiTemplateRequest): GetApiTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApiTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationRequest {
  applicationName: string(name='ApplicationName', description='应用名称。', example='HDFS', position='Query'),
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Query'),
}

model GetApplicationResponseBody = {
  application?: {
    actions?: [ 
      {
        actionName?: string(name='ActionName', description='操作名称。', example='START'),
        actionParams?: [ 
          {
            description?: string(name='Description', description='动作参数描述。', example='start'),
            key?: string(name='Key', description='动作参数KEY。'),
            valueAttribute?: {
              description?: string(name='Description', description='值表述。', example='描述'),
              valueIncrementStep?: string(name='ValueIncrementStep', description='值步长。', example='2'),
              valueMaximum?: string(name='ValueMaximum', description='最大值。', example='20'),
              valueMinimum?: string(name='ValueMinimum', description='最小值。', example='1'),
              valueType?: string(name='ValueType', description='属性值类型。', example='STRING'),
              valueUnit?: string(name='ValueUnit', description='值单位。', example='number'),
            }(name='ValueAttribute', description='动作参数属性。'),
          }
        ](name='ActionParams', description='操作参数。'),
        command?: string(name='Command', description='命令。', example='START'),
        componentName?: string(name='ComponentName', description='组件名称。', example='DataNode'),
        description?: string(name='Description', description='操作描述。', example='描述'),
        runActionScope?: string(name='RunActionScope', description='执行范围。', example='CLUSTER'),
      }
    ](name='Actions', description='操作列表。'),
    applicationName?: string(name='ApplicationName', description='应用名称。', example='HDFS'),
    applicationState?: string(name='ApplicationState', description='应用操作状态。'),
    applicationVersion?: string(name='ApplicationVersion', description='应用版本。', example='2.8.5'),
    communityVersion?: string(name='CommunityVersion', description='社区版本。', example='2.8.5'),
  }(name='Application'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationResponseBody(name='body'),
}

/**
  * 查询应用详情。
  *
 */
async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetAutoScalingActivityRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  scalingActivityId: string(name='ScalingActivityId', description='The ID of the scaling activity.', example='asa-36373b084d6b4b13aa50f4129a9e****', position='Query'),
}

model GetAutoScalingActivityResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  scalingActivity?: {
    activityId?: string(name='ActivityId', description='The ID of the scaling activity.', example='asa-36373b084d6b4b13aa50f4129a9e****'),
    activityResults?: [
      ScalingActivityResult
    ](name='ActivityResults', description='The instances that correspond to the scaling activity.'),
    activityState?: string(name='ActivityState', description='The status of the scaling activity. Valid values:

*   REJECTED
*   SUCCESSFUL
*   FAILED
*   IN_PROGRESS', example='IN_PROGRESS'),
    activityType?: string(name='ActivityType', description='The type of the scaling activity. Valid value:

*   SCALE_OUT
*   SCALE_IN', example='SCALE_OUT'),
    clusterId?: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****'),
    description?: string(name='Description', description='The description of the scaling activity.', example='clusterId not exist'),
    endTime?: long(name='EndTime', description='The time when scaling ended.', example='1639715634819'),
    expectNum?: int32(name='ExpectNum', description='The number of added or removed instances.', example='10'),
    nodeGroupId?: string(name='NodeGroupId', description='The ID of the node group.', example='ng-869471354ecd****'),
    nodeGroupName?: string(name='NodeGroupName', description='The name of the node group.', example='task-01'),
    operationId?: string(name='OperationId', description='The operation ID.', example='op-13c37a77c505****'),
    ruleDetail?: ScalingRule(name='RuleDetail', description='The description of the scaling rule.'),
    ruleName?: string(name='RuleName', description='The name of the scaling rule.', example='scaling-out-memory'),
    startTime?: long(name='StartTime', description='The time when scaling started.', example='1639714634819'),
  }(name='ScalingActivity', description='The information about the scaling activity.'),
}

model GetAutoScalingActivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAutoScalingActivityResponseBody(name='body'),
}

/**
  * 获取弹性伸缩活动详情。
  *
 */
async function getAutoScalingActivity(request: GetAutoScalingActivityRequest): GetAutoScalingActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoScalingActivity', 'POST', '/', 'json', false, 'json', request);
}

model GetAutoScalingPolicyRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The ID of the node group.', example='ng-869471354ecd****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetAutoScalingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  scalingPolicy?: {
    clusterId?: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****'),
    constraints?: {
      maxCapacity?: int32(name='MaxCapacity', description='The maximum number of nodes in the node group. Default value: 2000.', example='2000'),
      minCapacity?: int32(name='MinCapacity', description='The minimum number of nodes in the node group. Default value: 0.', example='0'),
    }(name='Constraints', description='The maximum and minimum number of nodes in the node group.'),
    nodeGroupId?: string(name='NodeGroupId', description='The ID of the node group.', example='ng-869471354ecd****'),
    scalingPolicyId?: string(name='ScalingPolicyId', description='The ID of the scaling policy.', example='asp-asduwe23znl***'),
    scalingRules?: [ 
      {
        activityType?: string(name='ActivityType', description='The scaling type. Valid values:

*   SCALE_OUT
*   SCALE_IN', example='SCALE_OUT'),
        adjustmentType?: string(name='AdjustmentType', description='The adjustment type.', example='CHANGE_IN_CAPACITY'),
        adjustmentValue?: int32(name='AdjustmentValue', description='The adjustment value. The parameter value must be a positive integer, which indicates the number of instances that you want to add or remove.', example='100'),
        metricsTrigger?: MetricsTrigger(name='MetricsTrigger', description='The description of load-based scaling.'),
        ruleName?: string(name='RuleName', description='The name of the auto scaling rule.', example='scaling-out-memory'),
        timeTrigger?: TimeTrigger(name='TimeTrigger', description='The description of time-based scaling.'),
        triggerType?: string(name='TriggerType', description='The type of the auto scaling rule. Valid values:

*   TIME_TRIGGER: time-based scaling
*   METRICS_TRIGGER: load-based scaling', example='TIME_TRIGGER'),
      }
    ](name='ScalingRules', description='The auto scaling rules.'),
  }(name='ScalingPolicy', description='The information about the auto scaling policy.'),
}

model GetAutoScalingPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAutoScalingPolicyResponseBody(name='body'),
}

async function getAutoScalingPolicy(request: GetAutoScalingPolicyRequest): GetAutoScalingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoScalingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetClusterResponseBody = {
  cluster?: Cluster(name='Cluster', description='The details of the cluster.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCluster', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterCloneMetaRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetClusterCloneMetaResponseBody = {
  clusterCloneMeta?: {
    applicationConfigs?: [
      ApplicationConfig
    ](name='ApplicationConfigs', description='The modified configuration items.'),
    applications?: [
      Application
    ](name='Applications', description='The services deployed in the cluster.'),
    bootstrapScripts?: [
      Script
    ](name='BootstrapScripts', description='The bootstrap actions. Number of elements in the array: 1 to 10.'),
    clusterId?: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac7f7****'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='emrtest'),
    clusterState?: string(name='ClusterState', description='The status of the cluster. Valid values:

*   STARTING
*   START_FAILED
*   BOOTSTRAPPING
*   RUNNING
*   TERMINATING
*   TERMINATED
*   TERMINATED_WITH_ERRORS
*   TERMINATE_FAILED', example='RUNNING'),
    clusterType?: string(name='ClusterType', description='The cluster type. Valid values:

*   DATALAKE
*   OLAP
*   DATAFLOW
*   DATASERVING
*   CUSTOM
*   HADOOP', example='DATALAKE'),
    deployMode?: string(name='DeployMode', description='The deployment mode of master nodes in the cluster. Valid values:

*   NORMAL: regular mode.
*   HA: high availability mode.', example='HA'),
    emrDefaultRole?: string(name='EmrDefaultRole', description='The EMR service role.', example='AliyunEMRDefaultRole'),
    existCloneConfig?: boolean(name='ExistCloneConfig', description='Indicates whether the service configurations of a Hadoop cluster that you made during cluster creation can be cloned. Valid values:

*   False
*   True'),
    nodeAttributes?: NodeAttributes(name='NodeAttributes', description='The attributes of the node.'),
    nodeGroups?: [
      NodeGroup
    ](name='NodeGroups', description='The node groups. Number of elements in the array: 1 to 100.'),
    paymentType?: string(name='PaymentType', description='The billing method of the cluster. Valid values:

*   PayAsYouGo
*   Subscription', example='PayAsYouGo'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    releaseVersion?: string(name='ReleaseVersion', description='The EMR version.', example='EMR-5.6.0'),
    resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzabjyop****'),
    scalingPolicies?: [ 
      {
        clusterId?: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****'),
        constraints?: {
          maxCapacity?: int32(name='MaxCapacity', description='The maximum number of nodes in the node group. Default value: 2000.', example='200'),
          minCapacity?: int32(name='MinCapacity', description='The minimum number of nodes in the node group. Default value: 0.', example='50'),
        }(name='Constraints', description='The maximum and minimum number of nodes in the node group.'),
        nodeGroupId?: string(name='NodeGroupId', description='The node group ID.', example='ng-869471354ecd****'),
        scalingPolicyId?: string(name='ScalingPolicyId', description='The ID of the auto scaling policy.', example='asp-asduwe23znl***'),
        scalingRules?: [ 
          {
            activityType?: string(name='ActivityType', description='The scaling type. This parameter is required. Valid values:

*   SCALE_OUT
*   SCALE_IN', example='SCALE_OUT'),
            adjustmentValue?: int32(name='AdjustmentValue', description='The adjustment value of the auto scaling rule. This parameter is required. The parameter value must be a positive integer, which indicates the number of instances to be added or removed.', example='100'),
            metricsTrigger?: MetricsTrigger(name='MetricsTrigger', description='The description of load-based scaling.'),
            ruleName?: string(name='RuleName', description='The name of the auto scaling rule.', example='scaling-out-memory'),
            timeTrigger?: TimeTrigger(name='TimeTrigger', description='The description of time-based scaling.'),
            triggerType?: string(name='TriggerType', description='The trigger mode of the auto scaling rule. This parameter is required. Valid values:

*   TIME_TRIGGER: time-based scaling.
*   METRICS_TRIGGER: load-based scaling.', example='TIME_TRIGGER'),
          }
        ](name='ScalingRules', description='The list of auto scaling rules.'),
      }
    ](name='ScalingPolicies', description='The auto scaling policies of each node group in the cluster.'),
    securityMode?: string(name='SecurityMode', description='The security mode of the cluster. Valid values:

*   NORMAL: regular mode. Kerberos is not enabled.
*   KERBEROS: Kerberos mode. Kerberos is enabled.', example='NORMAL'),
    subscriptionConfig?: SubscriptionConfig(name='SubscriptionConfig', description='The subscription configurations.'),
    tags?: [
      Tag
    ](name='Tags', description='The list of tags.'),
  }(name='ClusterCloneMeta', description='The metadata of the cluster that you want to clone.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetClusterCloneMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterCloneMetaResponseBody(name='body'),
}

async function getClusterCloneMeta(request: GetClusterCloneMetaRequest): GetClusterCloneMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClusterCloneMeta', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorApplicationRequest {
  appId: string(name='AppId', description='The ID of the job that is submitted to YARN.', example='application_1542620905989_****', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetDoctorApplicationResponseBody = {
  data?: {
    analysis?: {
      score?: int32(name='Score', description='The score of the job.', example='67'),
      suggestion?: string(name='Suggestion', description='The suggestion for running the job.'),
    }(name='Analysis', description='The job analysis result.'),
    appName?: string(name='AppName', description='The name of the job.', example='CREATE TABLE test...ranks=1 (Stage-1)'),
    endTime?: long(name='EndTime', description='The end time of the job. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1666213200000'),
    ids?: [ string ](name='Ids', description='The job IDs. Multiple job IDs are separated with commas (,).', example='null'),
    metrics?: {
      memSeconds?: {
        description?: string(name='Description', description='The description of the metric.', example='Total memory usage over time in seconds'),
        name?: string(name='Name', description='The name of the metric.', example='memSeconds'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB * Sec'),
        value?: long(name='Value', description='The value of the metric.', example='12312312'),
      }(name='MemSeconds', description='The aggregated amount of memory that is allocated to the job multiplied by the number of seconds the job has been running.'),
      memUtilization?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of used memory to total available memory'),
        name?: string(name='Name', description='The name of the metric.', example='memUtilization'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: float(name='Value', description='The value of the metric.', example='0.82'),
      }(name='MemUtilization', description='The memory usage.'),
      vcoreSeconds?: {
        description?: string(name='Description', description='The description of the metric.', example='Total vcore usage over time in seconds'),
        name?: string(name='Name', description='The name of the metric.', example='vcoreSeconds'),
        unit?: string(name='Unit', description='The unit of the metric.', example='VCores * Sec'),
        value?: long(name='Value', description='The value of the metric.', example='11123'),
      }(name='VcoreSeconds', description='The aggregated number of vCPUs that are allocated to the job multiplied by the number of seconds the job has been running.'),
      vcoreUtilization?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of used vcore to total available cores'),
        name?: string(name='Name', description='The name of the metric.', example='vcoreUtilization'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: float(name='Value', description='The value of the metric.', example='32.1'),
      }(name='VcoreUtilization', description='The CPU utilization. The meaning is the same as that of the %CPU command in the output of the Linux top command.'),
    }(name='Metrics', description='The metric information.'),
    querySql?: string(name='QuerySql', description='The SQL statement of the job. This parameter is left empty for non-SQL jobs.', example='SELECT id, count(1) FROM test group by id;'),
    queue?: string(name='Queue', description='The YARN queue to which the job was submitted.', example='DW'),
    startTime?: long(name='StartTime', description='The time when the job was submitted. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1677465658275'),
    type?: string(name='Type', description='The type of the compute engine.', example='SPARK'),
    user?: string(name='User', description='The username that is used to submit the job.', example='DW'),
  }(name='Data', description='The details of the job.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorApplicationResponseBody(name='body'),
}

/**
  * get one doctor analysis app
  *
 */
async function getDoctorApplication(request: GetDoctorApplicationRequest): GetDoctorApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorComputeSummaryRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  componentInfo?: {
    componentName?: string(name='ComponentName', description='Set the filter condition name based on the value of ComponentType. For example, if you set ComponentType to queue, you can specify a specific queue name to obtain the resource usage of a specific queue.', example='MAPREDUCE'),
    componentType?: string(name='ComponentType', description='The resource type for filtering. Valid values:

*   engine: filters results by engine.
*   queue: filters results by queue.
*   cluster: displays the results at the cluster level.

If you do not specify this parameter, the information at the cluster level is displayed by default.', example='engine'),
  }(name='ComponentInfo', description='The resource information, which is used to filter the results.', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetDoctorComputeSummaryResponseBody = {
  data?: {
    analysis?: {
      healthyJobCount?: long(name='HealthyJobCount', description='The total number of healthy jobs.', example='3'),
      needAttentionJobCount?: long(name='NeedAttentionJobCount', description='The total number of jobs that require attention.', example='234'),
      score?: int32(name='Score', description='The score for jobs.', example='73'),
      scoreDayGrowthRatio?: float(name='ScoreDayGrowthRatio', description='The day-to-day growth rate of the score for jobs.', example='0.02'),
      subHealthyJobCount?: long(name='SubHealthyJobCount', description='The total number of sub-healthy jobs.', example='1123'),
      unhealthyJobCount?: long(name='UnhealthyJobCount', description='The total number of unhealthy jobs.', example='23'),
    }(name='Analysis', description='The resource analysis information.'),
    metrics?: {
      memSeconds?: {
        description?: string(name='Description', description='The description of the metric.', example='Total memory usage over time in seconds'),
        name?: string(name='Name', description='The name of the metric.', example='memSeconds'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB * Sec'),
        value?: long(name='Value', description='The value of the metric.', example='12312312'),
      }(name='MemSeconds', description='The total memory consumption over time in seconds.'),
      memSecondsDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Growth ratio of memory usage in seconds per day'),
        name?: string(name='Name', description='The name of the metric.', example='memSecondsDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: float(name='Value', description='The value of the metric.', example='0.36'),
      }(name='MemSecondsDayGrowthRatio', description='The day-to-day growth rate of the total memory consumption over time in seconds.'),
      memUtilization?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of used memory to total available memory'),
        name?: string(name='Name', description='The name of the metric.', example='memUtilization'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.82'),
      }(name='MemUtilization', description='The average memory usage.'),
      readSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total cumulative size of data read in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='readSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='504888659968'),
      }(name='ReadSize', description='The total amount of data read from the file system.'),
      vcoreSeconds?: {
        description?: string(name='Description', description='The description of the metric.', example='Total vcore usage over time in seconds'),
        name?: string(name='Name', description='The name of the metric.', example='vcoreSeconds'),
        unit?: string(name='Unit', description='The unit of the metric.', example='VCores * Sec'),
        value?: long(name='Value', description='The value of the metric.', example='1231412'),
      }(name='VcoreSeconds', description='The total CPU consumption over time in seconds.'),
      vcoreSecondsDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Growth ratio of virtual core usage in seconds per day'),
        name?: string(name='Name', description='The name of the metric.', example='vcoreSecondsDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: float(name='Value', description='The value of the metric.', example='0.22'),
      }(name='VcoreSecondsDayGrowthRatio', description='The day-to-day growth rate of the total CPU consumption over time in seconds.'),
      vcoreUtilization?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of used vcore to total available cores'),
        name?: string(name='Name', description='The name of the metric.', example='vcoreUtilization'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: float(name='Value', description='The value of the metric.', example='32.1'),
      }(name='VcoreUtilization', description='The average CPU utilization. The meaning is the same as the %CPU parameter in the output of the top command in Linux.'),
      writeSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total cumulative size of data written in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='writeSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='6294093393920'),
      }(name='WriteSize', description='The total amount of data written to the file system.'),
    }(name='Metrics', description='The metrics.'),
  }(name='Data', description='The details of resource usage.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorComputeSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorComputeSummaryResponseBody(name='body'),
}

/**
  * get one specific luster engine queue by <type, name>
  *
 */
async function getDoctorComputeSummary(request: GetDoctorComputeSummaryRequest): GetDoctorComputeSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorComputeSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHBaseClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='The date.', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetDoctorHBaseClusterResponseBody = {
  data?: {
    analysis?: {
      hbaseScore?: int32(name='HbaseScore', description='The overall score of the HBase cluster.', example='85'),
    }(name='Analysis', description='The analysis result.'),
    metrics?: {
      avgLoad?: {
        description?: string(name='Description', description='The description of the metric.', example='The average load under normal working conditions'),
        name?: string(name='Name', description='The name of the metric.', example='avgLoad'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='36.0'),
      }(name='AvgLoad', description='The average load.'),
      dailyReadRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of read requests per day'),
        name?: string(name='Name', description='The name of the metric.', example='dailyReadRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='430'),
      }(name='DailyReadRequest', description='The number of read requests in a day.'),
      dailyWriteRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of write requests per day'),
        name?: string(name='Name', description='The name of the metric.', example='dailyWriteRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='128'),
      }(name='DailyWriteRequest', description='The number of write requests in a day.'),
      memHeap?: {
        description?: string(name='Description', description='The description of the metric.', example='Memory heap usage in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='memHeap'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='240'),
      }(name='MemHeap', description='The memory size.'),
      normalAvgLoad?: {
        description?: string(name='Description', description='The description of the metric.', example='The average load under normal working conditions'),
        name?: string(name='Name', description='The name of the metric.', example='normalAvgLoad'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='526.4'),
      }(name='NormalAvgLoad', description='The normal average load.'),
      regionBalance?: {
        description?: string(name='Description', description='The description of the metric.', example='The ability to evenly distribute Regions on different RegionServer nodes'),
        name?: string(name='Name', description='The name of the metric.', example='regionBalance'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='1.0'),
      }(name='RegionBalance', description='The region balance degree.'),
      regionCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of regions count'),
        name?: string(name='Name', description='The name of the metric.', example='regionCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='161'),
      }(name='RegionCount', description='The number of regions.'),
      regionServerCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of region servers count'),
        name?: string(name='Name', description='The name of the metric.', example='regionServerCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='6'),
      }(name='RegionServerCount', description='The number of region servers.'),
      storeFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of store files'),
        name?: string(name='Name', description='The name of the metric.', example='storeFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='298'),
      }(name='StoreFileCount', description='The number of StoreFiles.'),
      tableCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of tables'),
        name?: string(name='Name', description='The name of the metric.', example='tableCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='10'),
      }(name='TableCount', description='The number of tables.'),
      totalDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='256'),
      }(name='TotalDataSize', description='The size of the cluster.'),
      totalReadRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Total number of read requests'),
        name?: string(name='Name', description='The name of the metric.', example='totalReadRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='430'),
      }(name='TotalReadRequest', description='The total number of read requests.'),
      totalRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Total number of requests'),
        name?: string(name='Name', description='The name of the metric.', example='totalRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='576'),
      }(name='TotalRequest', description='The total number of requests in the cluster.'),
      totalWriteRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Total number of write requests'),
        name?: string(name='Name', description='The name of the metric.', example='totalWriteRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='520'),
      }(name='TotalWriteRequest', description='The total number of write requests.'),
    }(name='Metrics', description='The metric information.'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHBaseClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHBaseClusterResponseBody(name='body'),
}

/**
  * get Doctor HBaseCluster
  *
 */
async function getDoctorHBaseCluster(request: GetDoctorHBaseClusterRequest): GetDoctorHBaseClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHBaseCluster', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHBaseRegionRequest {
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', example='2023-01-01', position='Query'),
  hbaseRegionId: string(name='HbaseRegionId', description='Region ID。', example='67f6808f60a8c357103a3a95fe00610e', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
}

model GetDoctorHBaseRegionResponseBody = {
  data?: {
    metrics?: {
      dailyReadRequest?: {
        description?: string(name='Description', example='Number of read requests per day'),
        name?: string(name='Name', example='dailyReadRequest'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='1000'),
      }(name='DailyReadRequest'),
      dailyWriteRequest?: {
        description?: string(name='Description', example='Number of write requests per day'),
        name?: string(name='Name', example='dailyWriteRequest'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='1000'),
      }(name='DailyWriteRequest'),
      storeFileCount?: {
        description?: string(name='Description', example='Number of store file'),
        name?: string(name='Name', description='The name of the metric.', example='storeFileCount'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='100'),
      }(name='StoreFileCount', description='The number of StoreFiles.'),
      totalReadRequest?: {
        description?: string(name='Description', example='Total read request'),
        name?: string(name='Name', example='totalReadRequest'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='1000'),
      }(name='TotalReadRequest'),
      totalWriteRequest?: {
        description?: string(name='Description', example='Total Write Request'),
        name?: string(name='Name', example='totalWriteRequest'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='1000'),
      }(name='TotalWriteRequest'),
    }(name='Metrics', description='The metric information.'),
    regionServerHost?: string(name='RegionServerHost', example='emr-worker-2.cluster-20****'),
    tableName?: string(name='TableName', example='tb_item'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHBaseRegionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHBaseRegionResponseBody(name='body'),
}

/**
  * list Doctor HBaseRegions
  *
 */
async function getDoctorHBaseRegion(request: GetDoctorHBaseRegionRequest): GetDoctorHBaseRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHBaseRegion', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHBaseRegionServerRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='The date.', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  regionServerHost: string(name='RegionServerHost', description='The host of the region server.', example='emr-worker-4.cluster-20****', position='Query'),
}

model GetDoctorHBaseRegionServerResponseBody = {
  data?: {
    metrics?: {
      avgGc?: {
        description?: string(name='Description', description='The description of the metric.', example='The efficiency of garbage collection in the system'),
        name?: string(name='Name', description='The name of the metric.', example='avgGc'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='42.3'),
      }(name='AvgGc', description='The average garbage collection (GC) duration.'),
      cacheRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of the BlockCache memory size'),
        name?: string(name='Name', description='The name of the metric.', example='cacheRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='95.3'),
      }(name='CacheRatio', description='The cache hit ratio.'),
      dailyReadRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of read requests per day'),
        name?: string(name='Name', description='The name of the metric.', example='dailyReadRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='DailyReadRequest', description='The number of daily read requests.'),
      dailyReadRequestDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='The growth rate of daily read request quantity.'),
        name?: string(name='Name', description='The name of the metric.', example='dailyReadRequestDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='1.0'),
      }(name='DailyReadRequestDayGrowthRatio', description='The day-to-day increment rate of the number of daily read requests.'),
      dailyWriteRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of write requests per day'),
        name?: string(name='Name', description='The name of the metric.', example='dailyWriteRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='DailyWriteRequest', description='The number of daily write requests.'),
      dailyWriteRequestDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='The growth rate of daily write request quantity.'),
        name?: string(name='Name', description='The name of the metric.', example='dailyWriteRequestDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='1.0'),
      }(name='DailyWriteRequestDayGrowthRatio', description='The day-to-day increment rate of the number of daily write requests.'),
      regionCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of regions count'),
        name?: string(name='Name', description='The name of the metric.', example='regionCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='15'),
      }(name='RegionCount', description='The number of regions.'),
      totalReadRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Total number of read requests'),
        name?: string(name='Name', description='The name of the metric.', example='totalReadRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalReadRequest', description='The cumulative number of read requests.'),
      totalRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Total number of requests'),
        name?: string(name='Name', description='The name of the metric.', example='totalRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalRequest', description='The cumulative number of total requests.'),
      totalWriteRequest?: {
        description?: string(name='Description', description='The description of the metric.', example='Total number of write requests'),
        name?: string(name='Name', description='The name of the metric.', example='totalWriteRequest'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalWriteRequest', description='The cumulative number of write requests.'),
    }(name='Metrics', description='The metric information.'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHBaseRegionServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHBaseRegionServerResponseBody(name='body'),
}

/**
  * get Doctor HBaseRegionServer
  *
 */
async function getDoctorHBaseRegionServer(request: GetDoctorHBaseRegionServerRequest): GetDoctorHBaseRegionServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHBaseRegionServer', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHBaseTableRequest {
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
  tableName: string(name='TableName', example='namespace1:tb_item', position='Query'),
}

model GetDoctorHBaseTableResponseBody = {
  data?: {
    analysis?: {
      readRequestHotspotRegionList?: [ string ](name='ReadRequestHotspotRegionList', example='null'),
      readRequestUnbalanceSuggestion?: string(name='ReadRequestUnbalanceSuggestion', description='The description of read imbalance.'),
      requestHotspotRegionList?: [ string ](name='RequestHotspotRegionList', example='null'),
      requestUnbalanceSuggestion?: string(name='RequestUnbalanceSuggestion', description='The description of read/write imbalance.'),
      tableScore?: int32(name='TableScore', example='85'),
      writeRequestHotspotRegionList?: [ string ](name='WriteRequestHotspotRegionList', example='null'),
      writeRequestUnbalanceSuggestion?: string(name='WriteRequestUnbalanceSuggestion', description='The description of write imbalance.'),
    }(name='Analysis', description='The diagnosis result.'),
    metrics?: {
      coldAccessDay?: {
        description?: string(name='Description', example='Cold access day'),
        name?: string(name='Name', example='coldAccessDay'),
        unit?: string(name='Unit', example='day'),
        value?: long(name='Value', example='3'),
      }(name='ColdAccessDay'),
      coldConfigDay?: {
        description?: string(name='Description', example='Cold config day'),
        name?: string(name='Name', example='coldConfigDay'),
        unit?: string(name='Unit', example='day'),
        value?: long(name='Value', example='10'),
      }(name='ColdConfigDay'),
      coldDataSize?: {
        description?: string(name='Description', example='Size of the cold data size'),
        name?: string(name='Name', example='coldDataSize'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='1000'),
      }(name='ColdDataSize'),
      dailyReadRequest?: {
        description?: string(name='Description', example='test-update'),
        name?: string(name='Name', example='dailyReadRequest'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='1000'),
      }(name='DailyReadRequest'),
      dailyReadRequestDayGrowthRatio?: {
        description?: string(name='Description', example='Day growth ratio of table size'),
        name?: string(name='Name', example='dailyReadRequestDayGrowthRatio'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='1.5'),
      }(name='DailyReadRequestDayGrowthRatio'),
      dailyWriteRequest?: {
        description?: string(name='Description', example='Number of write requests per day'),
        name?: string(name='Name', example='dailyWriteRequest'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='1000'),
      }(name='DailyWriteRequest'),
      dailyWriteRequestDayGrowthRatio?: {
        description?: string(name='Description', example='The balance of distributing requests'),
        name?: string(name='Name', example='dailyWriteRequestDayGrowthRatio'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='0.5'),
      }(name='DailyWriteRequestDayGrowthRatio'),
      freezeConfigDay?: {
        description?: string(name='Description', example='Freeze config day'),
        name?: string(name='Name', example='freezeConfigDay'),
        unit?: string(name='Unit', example='day'),
        value?: long(name='Value', example='10'),
      }(name='FreezeConfigDay'),
      freezeDataSize?: {
        description?: string(name='Description', example='Size of the freeze data size'),
        name?: string(name='Name', example='freezeDataSize'),
        unit?: string(name='Unit', example='MB'),
        value?: long(name='Value', example='1000'),
      }(name='FreezeDataSize'),
      hotDataSize?: {
        description?: string(name='Description', example='Size of the hot data size'),
        name?: string(name='Name', example='hotDataSize'),
        unit?: string(name='Unit', example='MB'),
        value?: long(name='Value', example='1000'),
      }(name='HotDataSize'),
      locality?: {
        description?: string(name='Description', example='The locality of data'),
        name?: string(name='Name', example='locality'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='0.5'),
      }(name='Locality'),
      readRequestBalance?: {
        description?: string(name='Description', example='The balance of distributing read requests'),
        name?: string(name='Name', example='readRequestBalance'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='0.5'),
      }(name='ReadRequestBalance'),
      regionBalance?: {
        description?: string(name='Description', example='The ability to evenly distribute Regions on different RegionServer nodes'),
        name?: string(name='Name', example='regionBalance'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='1.0'),
      }(name='RegionBalance'),
      regionCount?: {
        description?: string(name='Description', example='Number of regions count'),
        name?: string(name='Name', example='regionCount'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='10'),
      }(name='RegionCount'),
      regionCountDayGrowthRatio?: {
        description?: string(name='Description', example='Day growth ratio of region count'),
        name?: string(name='Name', example='regionCountDayGrowthRatio'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='0.8'),
      }(name='RegionCountDayGrowthRatio'),
      regionServerCount?: {
        description?: string(name='Description', example='Number of region servers count'),
        name?: string(name='Name', example='regionServerCount'),
        unit?: string(name='Unit', example='“”'),
        value?: long(name='Value', example='10'),
      }(name='RegionServerCount'),
      requestBalance?: {
        description?: string(name='Description', example='The balance of distributing requests'),
        name?: string(name='Name', example='requestBalance'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='1.0'),
      }(name='RequestBalance'),
      storeFileCount?: {
        description?: string(name='Description', example='Number of store files'),
        name?: string(name='Name', example='storeFileCount'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='1000'),
      }(name='StoreFileCount'),
      storeFileCountDayGrowthRatio?: {
        description?: string(name='Description', example='Day growth ratio of store file count'),
        name?: string(name='Name', example='storeFileCountDayGrowthRatio'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='1.5'),
      }(name='StoreFileCountDayGrowthRatio'),
      tableSize?: {
        description?: string(name='Description', example='Size of the table'),
        name?: string(name='Name', example='tableSize'),
        unit?: string(name='Unit', example='""'),
        value?: long(name='Value', example='tb_item'),
      }(name='TableSize'),
      tableSizeDayGrowthRatio?: {
        description?: string(name='Description', example='Day growth ratio of table size'),
        name?: string(name='Name', example='tableSizeDayGrowthRatio'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='1.5'),
      }(name='TableSizeDayGrowthRatio'),
      warmConfigDay?: {
        description?: string(name='Description', example='Size of the warm data size'),
        name?: string(name='Name', example='warmConfigDay'),
        unit?: string(name='Unit', example='MB'),
        value?: long(name='Value', example='1000'),
      }(name='WarmConfigDay'),
      warmDataSize?: {
        description?: string(name='Description', example='Size of the warm data size'),
        name?: string(name='Name', example='warmDataSize'),
        unit?: string(name='Unit', example='MB'),
        value?: long(name='Value', example='1000'),
      }(name='WarmDataSize'),
      writeRequestBalance?: {
        description?: string(name='Description', example='The balance of distributing write requests'),
        name?: string(name='Name', example='writeRequestBalance'),
        unit?: string(name='Unit', example='""'),
        value?: float(name='Value', example='0.5'),
      }(name='WriteRequestBalance'),
    }(name='Metrics'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHBaseTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHBaseTableResponseBody(name='body'),
}

/**
  * get Doctor HBaseTable
  *
 */
async function getDoctorHBaseTable(request: GetDoctorHBaseTableRequest): GetDoctorHBaseTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHBaseTable', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHDFSClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetDoctorHDFSClusterResponseBody = {
  data?: {
    analysis?: {
      hdfsScore?: int32(name='HdfsScore', description='The overall score of HDFS storage resources.', example='55'),
    }(name='Analysis', description='The analysis results.'),
    metrics?: {
      coldDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of cold data'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='-182636577752'),
      }(name='ColdDataDayGrowthSize', description='The daily increment of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
      coldDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Cold data ratio'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='ColdDataRatio', description='The proportion of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
      coldDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the cold data size'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='5570958082267'),
      }(name='ColdDataSize', description='The amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
      coldDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of cold data size'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='-0.03'),
      }(name='ColdDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
      emptyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='15595897'),
      }(name='EmptyFileCount', description='The number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.005'),
      }(name='EmptyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='114'),
      }(name='EmptyFileDayGrowthCount', description='The daily increment of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.3'),
      }(name='EmptyFileRatio', description='The proportion of empty files. Empty files are those with a size of 0 MB.'),
      freezeDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='-167683929450'),
      }(name='FreezeDataDayGrowthSize', description='The daily increment of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.12'),
      }(name='FreezeDataRatio', description='The proportion of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the freeze data size'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1231312431'),
      }(name='FreezeDataSize', description='The amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of freeze data size'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='-0.09'),
      }(name='FreezeDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      hotDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of hot data'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='123154'),
      }(name='HotDataDayGrowthSize', description='The daily increment of the amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
      hotDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Hot data ratio'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.22'),
      }(name='HotDataRatio', description='The proportion of hot data. Hot data refers to data that is accessed in recent seven days.'),
      hotDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the hot data size'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='6701531944206'),
      }(name='HotDataSize', description='The amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
      hotDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of hot data size'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.1114'),
      }(name='HotDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
      largeFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='123'),
      }(name='LargeFileCount', description='The number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.39'),
      }(name='LargeFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: long(name='Value', description='The value of the metric.', example='2'),
      }(name='LargeFileDayGrowthCount', description='The daily increment of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.22'),
      }(name='LargeFileRatio', description='The proportion of large files. Large files are those with a size greater than 1 GB.'),
      mediumFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='234'),
      }(name='MediumFileCount', description='The number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.19'),
      }(name='MediumFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='176'),
      }(name='MediumFileDayGrowthCount', description='The daily increment of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.21'),
      }(name='MediumFileRatio', description='The proportion of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      smallFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='12345'),
      }(name='SmallFileCount', description='The number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.02'),
      }(name='SmallFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='12321'),
      }(name='SmallFileDayGrowthCount', description='The daily increment of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.19'),
      }(name='SmallFileRatio', description='The proportion of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      tinyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='232131'),
      }(name='TinyFileCount', description='The number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.003'),
      }(name='TinyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='-123'),
      }(name='TinyFileDayGrowthCount', description='The daily increment of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.19'),
      }(name='TinyFileRatio', description='The proportion of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      totalDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of total data'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='256482228248'),
      }(name='TotalDataDayGrowthSize', description='The daily incremental of the total data volume.'),
      totalDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='62086342083623'),
      }(name='TotalDataSize', description='The total amount of data.'),
      totalDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total data size'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.14'),
      }(name='TotalDataSizeDayGrowthRatio', description='The day-to-day growth rate of the total data volume.'),
      totalFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='51683279'),
      }(name='TotalFileCount', description='The total number of files.'),
      totalFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.02'),
      }(name='TotalFileCountDayGrowthRatio', description='The day-to-day growth rate of the total number of files.'),
      totalFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: long(name='Value', description='The value of the metric.', example='27809'),
      }(name='TotalFileDayGrowthCount', description='The daily increment of the total number of files.'),
      warmDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='-64806998319'),
      }(name='WarmDataDayGrowthSize', description='The daily increment of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
      warmDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.12'),
      }(name='WarmDataRatio', description='The proportion of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
      warmDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the warm data size'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='4062349775577'),
      }(name='WarmDataSize', description='The amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
      warmDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of warm data size'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='-0.015'),
      }(name='WarmDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
    }(name='Metrics', description='The metric information.'),
  }(name='Data', description='The HDFS analysis results.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHDFSClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHDFSClusterResponseBody(name='body'),
}

/**
  * list Doctor HBaseTableRegions
  *
 */
async function getDoctorHDFSCluster(request: GetDoctorHDFSClusterRequest): GetDoctorHDFSClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHDFSCluster', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHDFSDirectoryRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  dirPath: string(name='DirPath', description='The directory name. The depth of the directory is not greater than five.', example='/tmp/test', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetDoctorHDFSDirectoryResponseBody = {
  data?: {
    depth?: int32(name='Depth', description='The directory level.', example='2'),
    group?: string(name='Group', description='The group to which the directory belongs.', example='DW'),
    metrics?: {
      coldDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of cold data'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='-182636577752'),
      }(name='ColdDataDayGrowthSize', description='The daily increment of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      coldDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the cold data size'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='5570958082267'),
      }(name='ColdDataSize', description='The amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      coldDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of cold data size'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='-0.03'),
      }(name='ColdDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      emptyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='15595897'),
      }(name='EmptyFileCount', description='The number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.005'),
      }(name='EmptyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='114'),
      }(name='EmptyFileDayGrowthCount', description='The daily increment of the number of empty files. Empty files are those with a size of 0 MB.'),
      freezeDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='-167683929450'),
      }(name='FreezeDataDayGrowthSize', description='The daily increment of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the freeze data size'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1231312431'),
      }(name='FreezeDataSize', description='The amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of freeze data size'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='-0.09'),
      }(name='FreezeDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      hotDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of hot data'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='123154'),
      }(name='HotDataDayGrowthSize', description='The daily increment of the amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      hotDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the hot data size'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='6701531944206'),
      }(name='HotDataSize', description='The amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      hotDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of hot data size'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.1114'),
      }(name='HotDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      largeFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='123'),
      }(name='LargeFileCount', description='The number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.39'),
      }(name='LargeFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='2'),
      }(name='LargeFileDayGrowthCount', description='The daily increment of the number of large files. Large files are those with a size greater than 1 GB.'),
      mediumFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='234'),
      }(name='MediumFileCount', description='The number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.19'),
      }(name='MediumFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='176'),
      }(name='MediumFileDayGrowthCount', description='The daily increment of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      smallFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='12345'),
      }(name='SmallFileCount', description='The number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.02'),
      }(name='SmallFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='12345'),
      }(name='SmallFileDayGrowthCount', description='The daily increment of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      tinyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='232131'),
      }(name='TinyFileCount', description='The number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.003'),
      }(name='TinyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='-123'),
      }(name='TinyFileDayGrowthCount', description='The daily increment of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      totalDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of total data'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='256482228248'),
      }(name='TotalDataDayGrowthSize', description='The daily incremental of the total amount of data.'),
      totalDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='62086342083623'),
      }(name='TotalDataSize', description='The total amount of data.'),
      totalDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total data size'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.14'),
      }(name='TotalDataSizeDayGrowthRatio', description='The day-to-day growth rate of the total data volume.'),
      totalFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='51683279'),
      }(name='TotalFileCount', description='The total number of files.'),
      totalFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.02'),
      }(name='TotalFileCountDayGrowthRatio', description='The day-to-day growth rate of the total number of files.'),
      totalFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='27809'),
      }(name='TotalFileDayGrowthCount', description='The daily increment of the total number of files.'),
      warmDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='-64806998319'),
      }(name='WarmDataDayGrowthSize', description='The daily increment of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      warmDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the warm data size'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='4062349775577'),
      }(name='WarmDataSize', description='The amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      warmDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of warm data size'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='-0.015'),
      }(name='WarmDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
    }(name='Metrics', description='The metric information.'),
    user?: string(name='User', description='The directory owner.', example='DW'),
  }(name='Data', description='The analysis results of the HDFS directory.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHDFSDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHDFSDirectoryResponseBody(name='body'),
}

/**
  * get Doctor HDFSNode
  *
 */
async function getDoctorHDFSDirectory(request: GetDoctorHDFSDirectoryRequest): GetDoctorHDFSDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHDFSDirectory', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHDFSUGIRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  name: string(name='Name', description='Set this parameter based on the value of Type.', example='DW', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The filter condition. Valid values:

*   user
*   group', example='user', position='Query'),
}

model GetDoctorHDFSUGIResponseBody = {
  data?: {
    metrics?: {
      totalDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
        unit?: string(name='Unit', description='The unit.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='40440503'),
      }(name='TotalDataSize', description='The total data size.'),
      totalDirCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of total dirs'),
        name?: string(name='Name', description='The name of the metric.', example='totalDirCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='123'),
      }(name='TotalDirCount', description='The total number of directories.'),
      totalFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='34'),
      }(name='TotalFileCount', description='The total number of files.'),
    }(name='Metrics', description='The metric information.'),
  }(name='Data', description='The results of HDFS analysis.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHDFSUGIResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHDFSUGIResponseBody(name='body'),
}

/**
  * get Doctor HDFS UGI
  *
 */
async function getDoctorHDFSUGI(request: GetDoctorHDFSUGIRequest): GetDoctorHDFSUGIResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHDFSUGI', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHiveClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetDoctorHiveClusterResponseBody = {
  data?: {
    analysis?: {
      hiveDistributionScore?: int32(name='HiveDistributionScore', description='The score for the distribution of files of different sizes stored in the Hive cluster.', example='80'),
      hiveFormatScore?: int32(name='HiveFormatScore', description='The score for the distribution of files stored in different formats in the Hive cluster.', example='80'),
      hiveFrequencyScore?: int32(name='HiveFrequencyScore', description='The score for the access frequency of the Hive cluster.', example='80'),
      hiveScore?: int32(name='HiveScore', description='The overall score of the Hive cluster.', example='80'),
    }(name='Analysis', description='The analysis results.'),
    formats?: [ 
      {
        formatName?: string(name='FormatName', description='The name of the storage format.', example='TextInputFormat'),
        formatRatio?: float(name='FormatRatio', description='The proportion of the data in the format.', example='0.5'),
        formatSize?: long(name='FormatSize', description='The amount of data in the format.', example='100'),
        formatSizeUnit?: string(name='FormatSizeUnit', description='The unit of the amount of data in the format.', example='MB'),
      }
    ](name='Formats', description='The information from the perspective of storage formats.'),
    metrics?: {
      coldDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of cold data'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='ColdDataDayGrowthSize', description='The daily increment of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      coldDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Cold data ratio'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='ColdDataRatio', description='The proportion of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      coldDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of cold files'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='ColdDataSize', description='The amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      coldDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of cold data size'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='ColdDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      databaseCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of databases'),
        name?: string(name='Name', description='The name of the metric.', example='databaseCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='DatabaseCount', description='The number of databases.'),
      emptyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='EmptyFileCount', description='The number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='EmptyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='EmptyFileDayGrowthCount', description='The daily increment of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='EmptyFileRatio', description='The proportion of empty files. Empty files are those with a size of 0 MB.'),
      freezeDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='FreezeDataDayGrowthSize', description='The daily increment of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.12'),
      }(name='FreezeDataRatio', description='The proportion of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze files'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='FreezeDataSize', description='The amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of freeze data size'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='FreezeDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      hotDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of hot data'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='HotDataDayGrowthSize', description='The daily increment of the amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      hotDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Hot data ratio'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='HotDataRatio', description='The proportion of hot data. Hot data refers to data that is accessed in previous seven days.'),
      hotDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of hot files'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='HotDataSize', description='The amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      hotDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of hot data size'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='HotDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      largeFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='LargeFileCount', description='The number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='LargeFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='LargeFileDayGrowthCount', description='The daily increment of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='LargeFileRatio', description='The proportion of large files. Large files are those with a size greater than 1 GB.'),
      mediumFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='MediumFileCount', description='The number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='MediumFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: long(name='Value', description='The value of the metric.', example='178'),
      }(name='MediumFileDayGrowthCount', description='The daily increment of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='MediumFileRatio', description='The proportion of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      partitionNum?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of partitions'),
        name?: string(name='Name', description='The name of the metric.', example='partitionNum'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='PartitionNum', description='The number of partitions.'),
      smallFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='SmallFileCount', description='The number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='SmallFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='SmallFileDayGrowthCount', description='The daily increment of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='SmallFileRatio', description='The proportion of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      tableCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of tables'),
        name?: string(name='Name', description='The name of the metric.', example='tableCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TableCount', description='The number of tables.'),
      tinyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TinyFileCount', description='The number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='TinyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='day growth count of tiny files'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TinyFileDayGrowthCount', description='The daily increment of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='TinyFileRatio', description='The proportion of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      totalDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of total data'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalDataDayGrowthSize', description='The daily incremental of the amount of total data.'),
      totalDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalDataSize', description='The total amount of data.'),
      totalDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total data size'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='TotalDataSizeDayGrowthRatio', description='The day-to-day growth rate of the total data volume.'),
      totalFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalFileCount', description='The total number of files.'),
      totalFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='TotalFileCountDayGrowthRatio', description='The day-to-day growth rate of the total number of files.'),
      totalFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='27800'),
      }(name='TotalFileDayGrowthCount', description='The daily increment of the total number of files.'),
      warmDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='-100'),
      }(name='WarmDataDayGrowthSize', description='The daily increment of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      warmDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='WarmDataRatio', description='The proportion of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      warmDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of warm files'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='WarmDataSize', description='The amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      warmDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of warm data size'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='WarmDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
    }(name='Metrics', description='The metric information.'),
  }(name='Data', description='The analysis results of the Hive cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHiveClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHiveClusterResponseBody(name='body'),
}

/**
  * list Doctor Hive Cluster
  *
 */
async function getDoctorHiveCluster(request: GetDoctorHiveClusterRequest): GetDoctorHiveClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHiveCluster', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHiveDatabaseRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  databaseName: string(name='DatabaseName', description='The database name.', example='db1', position='Query'),
  dateTime: string(name='DateTime', description='The query date.', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetDoctorHiveDatabaseResponseBody = {
  data?: {
    analysis?: {
      hiveDistributionScore?: int32(name='HiveDistributionScore', description='The score for the file sizes of the Hive database.', example='85'),
      hiveFormatScore?: int32(name='HiveFormatScore', description='The score for the data formats of the Hive database.', example='85'),
      hiveFrequencyScore?: int32(name='HiveFrequencyScore', description='The score for the access frequency of the Hive database.', example='85'),
      hiveScore?: int32(name='HiveScore', description='The overall score of the Hive database.', example='85'),
    }(name='Analysis', description='The analysis results.'),
    formats?: [ 
      {
        formatDayGrowthSize?: long(name='FormatDayGrowthSize', description='The daily increment of data in the format.', example='1000'),
        formatName?: string(name='FormatName', description='The name of the storage format.', example='TextInputFormat'),
        formatRatio?: float(name='FormatRatio', description='The proportion of the data in the format.', example='0.5'),
        formatSize?: long(name='FormatSize', description='The amount of data in the format.', example='1000'),
        formatSizeDayGrowthRatio?: float(name='FormatSizeDayGrowthRatio', description='The day-to-day growth rate of data in the format.', example='0.5'),
        formatSizeUnit?: string(name='FormatSizeUnit', description='The unit of the amount of data in the format.', example='MB'),
      }
    ](name='Formats', description='The information from the perspective of storage formats.'),
    metrics?: {
      coldDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of cold data'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='ColdDataDayGrowthSize', description='The daily increment of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      coldDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Cold data ratio'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='ColdDataRatio', description='The proportion of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      coldDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of cold files'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='ColdDataSize', description='The amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      coldDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of cold data size'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='ColdDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
      emptyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='EmptyFileCount', description='The number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='EmptyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='EmptyFileDayGrowthCount', description='The daily increment of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='EmptyFileRatio', description='The proportion of empty files. Empty files are those with a size of 0 MB.'),
      freezeDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='FreezeDataDayGrowthSize', description='The daily increment of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='FreezeDataRatio', description='The proportion of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze files'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='FreezeDataSize', description='The amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of freeze data size'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='FreezeDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      hotDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of hot data'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='HotDataDayGrowthSize', description='The daily increment of the amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      hotDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Hot data ratio'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='HotDataRatio', description='The proportion of hot data. Hot data refers to data that is accessed in previous seven days.'),
      hotDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of hot files'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='HotDataSize', description='The amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      hotDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of hot data size'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='HotDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
      largeFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='LargeFileCount', description='The number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='LargeFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='LargeFileDayGrowthCount', description='The daily increment of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='LargeFileRatio', description='The proportion of large files. Large files are those with a size greater than 1 GB.'),
      mediumFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='MediumFileCount', description='The number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='MediumFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='MediumFileDayGrowthCount', description='The daily increment of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='MediumFileRatio', description='The proportion of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      partitionNum?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of partitions'),
        name?: string(name='Name', description='The name of the metric.', example='partitionNum'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='PartitionNum', description='The number of partitions.'),
      smallFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='SmallFileCount', description='The number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='SmallFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='SmallFileDayGrowthCount', description='The daily increment of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='SmallFileRatio', description='The proportion of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      tableCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of tables'),
        name?: string(name='Name', description='The name of the metric.', example='tableCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TableCount', description='The number of tables.'),
      tinyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TinyFileCount', description='The number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='TinyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TinyFileDayGrowthCount', description='The daily increment of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='TinyFileRatio', description='The proportion of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      totalDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of total data'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalDataDayGrowthSize', description='The daily incremental of the total amount of data.'),
      totalDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalDataSize', description='The total amount of data.'),
      totalDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total data size'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='TotalDataSizeDayGrowthRatio', description='The day-to-day growth rate of the total data volume.'),
      totalFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalFileCount', description='The total number of files.'),
      totalFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='TotalFileCountDayGrowthRatio', description='The day-to-day growth rate of the total number of files.'),
      totalFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='TotalFileDayGrowthCount', description='The daily increment of the total number of files.'),
      warmDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='WarmDataDayGrowthSize', description='The daily increment of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      warmDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='WarmDataRatio', description='The proportion of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      warmDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of warm files'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='1000'),
      }(name='WarmDataSize', description='The amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      warmDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of warm data size'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.5'),
      }(name='WarmDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
    }(name='Metrics', description='The metric information.'),
  }(name='Data', description='The analysis results of the Hive database.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHiveDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHiveDatabaseResponseBody(name='body'),
}

/**
  * get Doctor Hive Database
  *
 */
async function getDoctorHiveDatabase(request: GetDoctorHiveDatabaseRequest): GetDoctorHiveDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHiveDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorHiveTableRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  tableName: string(name='TableName', description='The table name. The table name must follow the rule in Hive. A name in the {database name.table identifier} format uniquely identifies a table.', example='dw.dwd_creta_service_order_long_renew_long_da', position='Query'),
}

model GetDoctorHiveTableResponseBody = {
  data?: {
    analysis?: {
      hiveDistributionScore?: int32(name='HiveDistributionScore', description='The score for the distribution of files of different sizes stored in the Hive table.', example='80'),
      hiveFormatScore?: int32(name='HiveFormatScore', description='The score for the distribution of files stored in different formats in the Hive table.', example='60'),
      hiveFrequencyScore?: int32(name='HiveFrequencyScore', description='The score for the access frequency of the Hive table.', example='70'),
      hiveScore?: int32(name='HiveScore', description='The overall score of the Hive table.', example='80'),
    }(name='Analysis', description='The analysis results.'),
    formats?: [ 
      {
        formatDayGrowthSize?: long(name='FormatDayGrowthSize', description='The daily amount increment of the data in a specific storage format.', example='1232124'),
        formatName?: string(name='FormatName', description='The name of the storage format.', example='TextInputFormat'),
        formatRatio?: float(name='FormatRatio', description='The ratio of the data in a specific storage format.', example='0.23'),
        formatSize?: long(name='FormatSize', description='The size of storage format-specific data.', example='506930200'),
        formatSizeDayGrowthRatio?: float(name='FormatSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of the data in a specific storage format.', example='0.04'),
        formatSizeUnit?: string(name='FormatSizeUnit', description='The unit of the data size.', example='MB'),
      }
    ](name='Formats', description='The information from the perspective of formats.'),
    metrics?: {
      coldDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of cold data'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='217715'),
      }(name='ColdDataDayGrowthSize', description='The daily increment of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
      coldDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Cold data ratio'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='ColdDataRatio', description='The proportion of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
      coldDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the cold data size'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='217715'),
      }(name='ColdDataSize', description='The amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
      coldDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of cold data size'),
        name?: string(name='Name', description='The name of the metric.', example='coldDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='ColdDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
      emptyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='3123'),
      }(name='EmptyFileCount', description='The number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='EmptyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='-20'),
      }(name='EmptyFileDayGrowthCount', description='The daily increment of the number of empty files. Empty files are those with a size of 0 MB.'),
      emptyFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of empty files'),
        name?: string(name='Name', description='The name of the metric.', example='emptyFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='EmptyFileRatio', description='The proportion of empty files. Empty files are those with a size of 0 MB.'),
      freezeDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='33229309'),
      }(name='FreezeDataDayGrowthSize', description='The daily increment of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze data'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.98'),
      }(name='FreezeDataRatio', description='The proportion of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the freeze data size'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='33229309'),
      }(name='FreezeDataSize', description='The amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      freezeDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of freeze data size'),
        name?: string(name='Name', description='The name of the metric.', example='freezeDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='FreezeDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
      hotDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of hot data'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='203431'),
      }(name='HotDataDayGrowthSize', description='The daily increment of the amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
      hotDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Hot data ratio'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='HotDataRatio', description='The proportion of hot data. Hot data refers to data that is accessed in recent seven days.'),
      hotDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the hot data size'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='203431'),
      }(name='HotDataSize', description='The amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
      hotDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of hot data size'),
        name?: string(name='Name', description='The name of the metric.', example='hotDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='HotDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
      largeFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: long(name='Value', description='The value of the metric.', example='123'),
      }(name='LargeFileCount', description='The number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='LargeFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='40'),
      }(name='LargeFileDayGrowthCount', description='The daily increment of the number of large files. Large files are those with a size greater than 1 GB.'),
      largeFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of large files'),
        name?: string(name='Name', description='The name of the metric.', example='largeFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.02'),
      }(name='LargeFileRatio', description='The proportion of large files. Large files are those with a size greater than 1 GB.'),
      mediumFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: long(name='Value', description='The value of the metric.', example='5'),
      }(name='MediumFileCount', description='The number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='MediumFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='20'),
      }(name='MediumFileDayGrowthCount', description='The daily increment of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      mediumFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of medium files'),
        name?: string(name='Name', description='The name of the metric.', example='mediumFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.80'),
      }(name='MediumFileRatio', description='The proportion of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
      partitionNum?: {
        description?: string(name='Description', description='The description of the metric.', example='number of partitions'),
        name?: string(name='Name', description='The name of the metric.', example='partitionNum'),
        unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
        value?: long(name='Value', description='The value of the metric.', example='441'),
      }(name='PartitionNum', description='The number of partitions.'),
      smallFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='"“'),
        value?: long(name='Value', description='The value of the metric.', example='18'),
      }(name='SmallFileCount', description='The number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='SmallFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='18'),
      }(name='SmallFileDayGrowthCount', description='The daily increment of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      smallFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of small files'),
        name?: string(name='Name', description='The name of the metric.', example='smallFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.04'),
      }(name='SmallFileRatio', description='The proportion of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
      tinyFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='451'),
      }(name='TinyFileCount', description='The number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.04'),
      }(name='TinyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='482'),
      }(name='TinyFileDayGrowthCount', description='The daily increment of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      tinyFileRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of tiny files'),
        name?: string(name='Name', description='The name of the metric.', example='tinyFileRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.96'),
      }(name='TinyFileRatio', description='The proportion of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
      totalDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of total data'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='33800296'),
      }(name='TotalDataDayGrowthSize', description='The daily incremental of the total data volume.'),
      totalDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='33800296'),
      }(name='TotalDataSize', description='The total amount of data.'),
      totalDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total data size'),
        name?: string(name='Name', description='The name of the metric.', example='totalDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='TotalDataSizeDayGrowthRatio', description='The day-to-day growth rate of the total data volume.'),
      totalFileCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Number of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: long(name='Value', description='The value of the metric.', example='123'),
      }(name='TotalFileCount', description='The total number of files.'),
      totalFileCountDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileCountDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='TotalFileCountDayGrowthRatio', description='The day-to-day growth rate of the total number of files.'),
      totalFileDayGrowthCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth count of total files'),
        name?: string(name='Name', description='The name of the metric.', example='totalFileDayGrowthCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='100'),
      }(name='TotalFileDayGrowthCount', description='The daily increment of the total number of files.'),
      warmDataDayGrowthSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth size of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataDayGrowthSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='149841'),
      }(name='WarmDataDayGrowthSize', description='The daily increment of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
      warmDataRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Ratio of warm data'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: float(name='Value', description='The value of the metric.', example='0.1'),
      }(name='WarmDataRatio', description='The proportion of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
      warmDataSize?: {
        description?: string(name='Description', description='The description of the metric.', example='Size of the warm data size'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSize'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
        value?: long(name='Value', description='The value of the metric.', example='14981'),
      }(name='WarmDataSize', description='The amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
      warmDataSizeDayGrowthRatio?: {
        description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of warm data size'),
        name?: string(name='Name', description='The name of the metric.', example='warmDataSizeDayGrowthRatio'),
        unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
        value?: float(name='Value', description='The value of the metric.', example='0.01'),
      }(name='WarmDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
    }(name='Metrics', description='The metric information.'),
    owner?: string(name='Owner', description='The owner.', example='DW'),
  }(name='Data', description='The analysis results of the Hive table.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorHiveTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorHiveTableResponseBody(name='body'),
}

/**
  * get Doctor Hive Table
  *
 */
async function getDoctorHiveTable(request: GetDoctorHiveTableRequest): GetDoctorHiveTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorHiveTable', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorJobRequest {
  appId: string(name='AppId', description='The ID of the job that is submitted to YARN.', example='application_1542620905989_****', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetDoctorJobResponseBody = {
  data?: {
    appId?: string(name='AppId', description='The ID of the job that was submitted to YARN.', example='application_1542620905989_****'),
    appName?: string(name='AppName', description='The name of the job.', example='CREATE TABLE test...ranks=1 (Stage-1)'),
    elapsedTime?: long(name='ElapsedTime', description='The total running time of the job. Unit: milliseconds.', example='278'),
    finalStatus?: string(name='FinalStatus', description='The final state of the job. Valid values:

*   SUCCEEDED
*   FAILED
*   KILLED
*   ENDED
*   UNDEFINED', example='KILLED'),
    finishTime?: long(name='FinishTime', description='The time when the job ended. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1658388322000'),
    launchTime?: long(name='LaunchTime', description='The time when the job was started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1665014400000'),
    metrics?: {
      memSeconds?: {
        description?: string(name='Description', description='The description of the metric.', example='Total memory usage over time in seconds'),
        name?: string(name='Name', description='The name of the metric.', example='memSeconds'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB * Sec'),
        value?: long(name='Value', description='The value of the metric.', example='12312312'),
      }(name='MemSeconds', description='The amount of memory consumed.'),
      vcoreSeconds?: {
        description?: string(name='Description', description='The description of the metric.', example='Total vcore usage over time in seconds'),
        name?: string(name='Name', description='The name of the metric.', example='vcoreSeconds'),
        unit?: string(name='Unit', description='The unit of the metric.', example='VCores * Sec'),
        value?: long(name='Value', description='The value of the metric.', example='11123'),
      }(name='VcoreSeconds', description='The CPU usage.'),
    }(name='Metrics', description='The data about metrics.'),
    queue?: string(name='Queue', description='The YARN queue to which the job was submitted.', example='DW'),
    startTime?: long(name='StartTime', description='The time when the job was submitted. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1673946000000'),
    state?: string(name='State', description='The running state of the job. Valid values:

*   FINISHED
*   FAILED
*   KILLED', example='FINISHED'),
    type?: string(name='Type', description='The type of the compute engine.', example='SPARK'),
    user?: string(name='User', description='The username that was used to submit the job.', example='DW'),
  }(name='Data', description='The information about the job.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorJobResponseBody(name='body'),
}

/**
  * Get realtime job by yarn
  *
 */
async function getDoctorJob(request: GetDoctorJobRequest): GetDoctorJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorJob', 'POST', '/', 'json', false, 'json', request);
}

model GetDoctorReportComponentSummaryRequest {
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  componentType: string(name='ComponentType', description='component type', example='compute', position='Query'),
  dateTime: string(name='DateTime', description='dateTime for specify report', example='2023-01-01', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
}

model GetDoctorReportComponentSummaryResponseBody = {
  data?: {
    score?: int32(name='Score', example='88'),
    suggestion?: string(name='Suggestion'),
    summary?: string(name='Summary', description='The summary of the report.'),
  }(name='Data', description='The content of the report.'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetDoctorReportComponentSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoctorReportComponentSummaryResponseBody(name='body'),
}

/**
  * get specify component's report analysis by emr doctor
  *
 */
async function getDoctorReportComponentSummary(request: GetDoctorReportComponentSummaryRequest): GetDoctorReportComponentSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoctorReportComponentSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetNodeGroupRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c-b933c5aac8fe****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The ID of the node group.', example='ng-869471354ecd****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
}

model GetNodeGroupResponseBody = {
  nodeGroup?: NodeGroup(name='NodeGroup', description='The node group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model GetNodeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeGroupResponseBody(name='body'),
}

/**
  * 获取节点组详情。
  *
 */
async function getNodeGroup(request: GetNodeGroupRequest): GetNodeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNodeGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetOperationRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster that you want to query.', example='c-b933c5aac8fe****', position='Query'),
  operationId: string(name='OperationId', description='The operation ID.

References:

*   [CreateCluster](~~454393~~)
*   [IncreaseNodes](~~454397~~)', example='op-13c37a77c505****', position='Query'),
  regionId: string(name='RegionId', description='The district ID.', example='cn-hangzhou', position='Query'),
}

model GetOperationResponseBody = {
  operation?: Operation(name='Operation', description='The operation that was performed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9E3A7161-EB7B-172B-8D18-FFB06BA3896A'),
}

model GetOperationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOperationResponseBody(name='body'),
}

async function getOperation(request: GetOperationRequest): GetOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOperation', 'POST', '/', 'json', false, 'json', request);
}

model IncreaseNodesRequest {
  applicationConfigs?: [
    ApplicationConfig
  ](name='ApplicationConfigs', description='The application configurations. You can specify a maximum of 1,000 items.', example='Month', position='Query'),
  autoPayOrder?: boolean(name='AutoPayOrder', description='Indicates whether to automatically pay for the orders involved in the scale-out operation. This parameter takes effect only when the PaymentType parameter is set to Subscription. Valid values:

*   true: automatically pays for the order involved in this operation.
*   false: does not automatically pay for the orders involved in this operation.

Default value: false', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for nodes. Valid values:

*   true
*   false (default value)', example='false', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c-b933c5aac8fe****', position='Query'),
  increaseNodeCount: int32(name='IncreaseNodeCount', description='The number of nodes. The number of incremental nodes for this scale-out. Valid values: 1 to 500.', example='3', position='Query'),
  minIncreaseNodeCount?: int32(name='MinIncreaseNodeCount', description='The minimum number of nodes that can be added. Valid values: 1 to 500.

*   If you configure this parameter, and the number of available Elastic Compute Service (ECS) instances is less than the value of the IncreaseNodeCount parameter, the system tries to add nodes based on the number specified by the `MinIncreaseNodeCount` parameter. If the minimum number of nodes are added, the scale-out status is `PARTIAL_COMPLETED`.
*   If you do not configure this parameter, and the number of available ECS instances is less than the value of the IncreaseNodeCount parameter, the scale-out process fails. The scale-out status is `FAILED`.', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The ID of the node group. The target node group to which you want to scale out the cluster.', example='ng-869471354ecd****', position='Query'),
  paymentDuration?: int32(name='PaymentDuration', description='The subscription duration. Valid values when the PaymentDurationUnit value is Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='12', position='Query'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', description='The unit of the subscription duration. Valid values:

*   Month', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
}

model IncreaseNodesResponseBody = {
  operationId?: string(name='OperationId', description='The ID of the operation.', example='op-13c37a77c505****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model IncreaseNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IncreaseNodesResponseBody(name='body'),
}

async function increaseNodes(request: IncreaseNodesRequest): IncreaseNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IncreaseNodes', 'POST', '/', 'json', false, 'json', request);
}

model JoinResourceGroupRequest {
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzabjyop****', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource.', example='c-c95f0a39d8ff****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   cluster: cluster', example='cluster', position='Query'),
}

model JoinResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9E3A7161-EB7B-172B-8D18-FFB06BA3****'),
}

model JoinResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinResourceGroupResponseBody(name='body'),
}

async function joinResourceGroup(request: JoinResourceGroupRequest): JoinResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListApiTemplatesRequest {
  apiName: string(name='ApiName', description='接口名。', example='CreateCluster', position='Query'),
  maxResults?: int32(name='MaxResults', description='一次获取的最大记录数。', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzabjyop****', position='Query'),
  templateId?: string(name='TemplateId', description='集群模板id。', example='at-41b4c6a0fc63****', position='Query'),
  templateIds?: [ string ](name='TemplateIds', description='集群模板id列表。', example='["AT-****"]', position='Query'),
  templateName?: string(name='TemplateName', description='集群模板名字。', example='DATALAKE模板', position='Query'),
}

model ListApiTemplatesResponseBody = {
  apiTemplates?: [
    ApiTemplate
  ](name='ApiTemplates', description='The API operation templates.', deprecated='true'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='NextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListApiTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApiTemplatesResponseBody(name='body'),
}

async function listApiTemplates(request: ListApiTemplatesRequest): ListApiTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApiTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationConfigsRequest {
  applicationName?: string(name='ApplicationName', description='The name of the application.', example='HDFS', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-e6a9d46e9267****', position='Query'),
  configFileName?: string(name='ConfigFileName', description='The name of the configuration file.', example='hdfs-site.xml', position='Query'),
  configItemKey?: string(name='ConfigItemKey', description='The name of the configuration item.', example='dfs.replication', position='Query'),
  configItemValue?: string(name='ConfigItemValue', description='The value of the configuration item.', example='2', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='100', position='Query'),
  nextToken?: string(name='NextToken', description='The page number of the next page returned.', example='1', position='Query'),
  nodeGroupId?: string(name='NodeGroupId', description='The ID of the node group.', example='ng-d555335ced5c****', position='Query'),
  nodeId?: string(name='NodeId', description='The node ID.', example='i-bp10h9rezawz1i4o****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListApplicationConfigsResponseBody = {
  applicationConfigs?: [ 
    {
      applicationName?: string(name='ApplicationName', description='The name of the application.', example='HDFS'),
      configEffectState?: string(name='ConfigEffectState', description='The status of the configuration value.', example='EFFECT'),
      configFileName?: string(name='ConfigFileName', description='The name of the configuration file.', example='hdfs-site.xml'),
      configItemKey?: string(name='ConfigItemKey', description='The key of the configuration item.', example='dfs.replication'),
      configItemValue?: string(name='ConfigItemValue', description='The value of the configuration item.', example='2'),
      createTime?: long(name='CreateTime', description='The creation time.', example='1628589439114'),
      custom?: boolean(name='Custom', description='Indicates whether the configurations are custom.', example='false'),
      description?: string(name='Description', description='The description.', example='dfs.replication description'),
      initValue?: string(name='InitValue', description='The initial value.', example='2'),
      modifier?: string(name='Modifier', description='The person who modified the configurations.', example='170906468757****'),
      nodeGroupId?: string(name='NodeGroupId', description='The node group ID.', example='ng-d555335ced5****'),
      nodeId?: string(name='NodeId', description='The node ID.', example='i-bp18y0ng3qqxog4mw****'),
      updateTime?: long(name='UpdateTime', description='The update time.', example='1628589439114'),
    }
  ](name='ApplicationConfigs', description='The application configurations.'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='100'),
  nextToken?: string(name='NextToken', description='The page number of the next page returned.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='9E3A7161-EB7B-172B-8D18-FFB06BA3****'),
  totalCount?: int32(name='TotalCount', description='The total number of pages returned.', example='100'),
}

model ListApplicationConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationConfigsResponseBody(name='body'),
}

/**
  * 查询应用配置。
  *
 */
async function listApplicationConfigs(request: ListApplicationConfigsRequest): ListApplicationConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationConfigs', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsRequest {
  applicationNames?: [ string ](name='ApplicationNames', description='The application names.', example='c-b933c5aac8fe****', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-e6a9d46e92675****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The total number of pages.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The page number of the next page returned.', example='0', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListApplicationsResponseBody = {
  applications?: [ 
    {
      applicationName?: string(name='ApplicationName', description='The application name.', example='HDFS'),
      applicationState?: string(name='ApplicationState', description='The status of the applications. Valid values:

*   STOPPED: At least one application is in the Stopped state.
*   RUNNING: All applications are in the Running state.

This parameter is returned only for DataLake, OLAP, Dataflow, DataServing, and custom clusters. For other types of clusters, no value is returned for this parameter.', example='RUNNING'),
      applicationVersion?: string(name='ApplicationVersion', description='The version of the application.', example='2.8.1', deprecated='true'),
      communityVersion?: string(name='CommunityVersion', description='The community edition.', example='2.8.5'),
    }
  ](name='Applications', description='The applications.'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='The page number of the next page returned.', example='2'),
  requestId?: string(name='RequestId', description='The request ID.', example='9E3A7161-EB7B-172B-8D18-FFB06BA3****'),
  totalCount?: int32(name='TotalCount', description='The total number of pages.', example='20'),
}

model ListApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsResponseBody(name='body'),
}

async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListAutoScalingActivitiesRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1639718634819', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  nodeGroupId?: string(name='NodeGroupId', description='The ID of the node group.', example='ng-869471354ecd****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  scalingActivityStates?: [ string ](name='ScalingActivityStates', description='The status of the scaling activity. Number of elements in the array: 1-20.', example='["REJECTED","SUCCESSFUL"]', position='Query'),
  scalingActivityType?: string(name='ScalingActivityType', description='The type of the scaling activity. Valid values:

*   SCALE_OUT
*   SCALE_IN', example='SCALE_IN', position='Query'),
  scalingRuleName?: string(name='ScalingRuleName', description='The name of the scaling rule.', example='scale-out-by-memroy', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1639714634819', position='Query'),
}

model ListAutoScalingActivitiesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  scalingActivities?: [ 
    {
      activityId?: string(name='ActivityId', description='The ID of the scaling activity.', example='asa-36373b084d6b4b13aa50f4129a9e****'),
      activityState?: string(name='ActivityState', description='The status of the scaling activity. Valid values:

*   REJECTED
*   SUCCESSFUL
*   FAILED
*   IN_PROGRESS', example='IN_PROGRESS'),
      activityType?: string(name='ActivityType', description='The type of the scaling activity. Valid values:

*   SCALE_OUT
*   SCALE_IN', example='SCALE_OUT'),
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****'),
      description?: string(name='Description', description='The description of the scaling activity.', example='clusterId not exist'),
      endTime?: long(name='EndTime', description='The end time of the scaling. Unit: milliseconds.', example='1639715634819'),
      expectNum?: int32(name='ExpectNum', description='The number of added or removed instances.', example='10'),
      nodeGroupId?: string(name='NodeGroupId', description='The ID of the node group.', example='ng-869471354ecd****'),
      nodeGroupName?: string(name='NodeGroupName', description='The name of the node group.', example='task-01'),
      operationId?: string(name='OperationId', description='The operation ID.', example='op-13c37a77c505****'),
      ruleName?: string(name='RuleName', description='The name of the scaling rule.', example='scaling-out-memory'),
      startTime?: long(name='StartTime', description='The start time of the scaling. Unit: milliseconds.', example='1639714634819'),
    }
  ](name='ScalingActivities', description='The scaling activities.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListAutoScalingActivitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAutoScalingActivitiesResponseBody(name='body'),
}

/**
  * 查询弹性伸缩活动列表。
  *
 */
async function listAutoScalingActivities(request: ListAutoScalingActivitiesRequest): ListAutoScalingActivitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutoScalingActivities', 'POST', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  clusterIds?: [ string ](name='ClusterIds', description='The IDs of the clusters. You can specify a maximum of 100 items.', example='rg-acfmzabjyop****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='emrtest', position='Query'),
  clusterStates?: [ string ](name='ClusterStates', description='The states of clusters. You can specify a maximum of 100 items.', example='["HADOOP"]', position='Query'),
  clusterTypes?: [ string ](name='ClusterTypes', description='The types of the clusters. You can specify a maximum of 100 items.', example='["c-b933c5aac8fe****"]', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 1 to 100.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The starting point of the current query. If you do not configure this parameter, the query starts from the beginning.', example='eyJlY21OZXh0VG9rZW4iOiIxIiwidGFpaGFvTmV4dFRva2VuIjoiNTYiLCJ0YWloYW9OZXh0VG9rZW5JbnQiOjU2LCJlY21OZXh0VG9rZW5JbnQiOjF9', position='Query'),
  paymentTypes?: [ string ](name='PaymentTypes', description='The billing methods. You can specify a maximum of 2 items.', example='["ECS"]', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

Valid values:

*   cn-qingdao
*   cn-beijing
*   cn-zhangjiakou
*   cn-huhehaote
*   cn-hangzhou
*   cn-shanghai
*   cn-shenzhen
*   cn-chengdu
*   cn-hongkong
*   cn-wulanchabu
*   cn-heyuan-acdr-1
*   cn-qingdao-acdr-ut-1
*   ap-northeast-1
*   ap-southeast-1
*   ap-southeast-2
*   ap-southeast-3
*   ap-southeast-5
*   ap-south-1
*   us-east-1
*   us-west-1
*   me-east-1
*   me-central-1
*   eu-central-1
*   eu-west-1
*   cn-north-2-gov-1', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzabjyop****', position='Query'),
  tags?: [
    Tag
  ](name='Tags', description='The tags. Number of elements in the array: 1 to 20.', example='["PayAsYouGo"]', position='Query'),
}

model ListClustersResponseBody = {
  clusters?: [
    ClusterSummary
  ](name='Clusters', description='The clusters.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The page number of the next page returned.', example='eyJlY21OZXh0VG9rZW4iOiIxIiwidGFpaGFvTmV4dFRva2VuIjoiNTYiLCJ0YWloYW9OZXh0VG9rZW5JbnQiOjU2LCJlY21OZXh0VG9rZW5JbnQiOjF9'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9E3A7161-EB7B-172B-8D18-FFB06BA3896A'),
  totalCount?: int32(name='TotalCount', description='The total number of pages.', example='1000'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListComponentInstancesRequest {
  applicationNames?: [ string ](name='ApplicationNames', description='应用名称列表。', example='["HDFS"]', position='Query'),
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  componentNames?: [ string ](name='ComponentNames', description='组件名称列表。', example='["DataNode"]', position='Query'),
  componentStates?: [ string ](name='ComponentStates', example='null', position='Query'),
  maxResults?: int32(name='MaxResults', description='一次获取的最大记录数。取值范围：1~100。', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  nodeIds?: [ string ](name='NodeIds', description='节点ID列表。', example='["i-bp1cudc25w2bfwl5****"]', position='Query'),
  nodeNames?: [ string ](name='NodeNames', description='节点名称列表。', example='["core1-1"]', position='Query'),
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Query'),
}

model ListComponentInstancesResponseBody = {
  componentInstances?: [ 
    {
      applicationName?: string(name='ApplicationName', description='应用名称。', example='HDFS'),
      bizState?: string(name='BizState', description='组件服务状态，取值如下：
- active：主服务
- standby：备用服务。', example='active'),
      commissionState?: string(name='CommissionState', description='Commission状态，取值如下：
- COMMISSIONED：已上线
- COMMISSIONING：上线中
- DECOMMISSIONED：已下线
- DECOMMISSIONINPROGRESS：下线进程中
- DECOMMISSIONFAILED：下线失败
- INSERVICE：服务中
- UNKNOWN：未知状态。
<p>', example='INSERVICE'),
      componentInstanceState?: string(name='ComponentInstanceState', description='组件实例操作状态，取值如下：
- WAITING：等待中
- INSTALLING：安装中
- INSTALLED：已安装
- INSTALL_FAILED：安装失败
- STARTING：启动中
- STARTED：已启动
- START_FAILED：启动失败
- STOPPING：停止中
- STOPPED：已停止
- STOP_FAILED：停止失败'),
      componentName?: string(name='ComponentName', description='组件名称。', example='DataNode'),
      createTime?: long(name='CreateTime', description='安装时间戳。', example='1628248947000'),
      desiredState?: string(name='DesiredState', description='期望状态，取值如下：
- WAITING：等待中
- INSTALLING：安装中
- INSTALLED：已安装
- INSTALL_FAILED：安装失败
- STARTING：启动中
- STARTED：已启动
- START_FAILED：启动失败
- STOPPING：停止中
- STOPPED：已停止
- STOP_FAILED：停止失败。', example='STARTED'),
      nodeId?: string(name='NodeId', description='节点ID。', example='i-bp1cudc25w2bfwl5****'),
      nodeName?: string(name='NodeName', description='节点名称。', example='core1-1'),
    }
  ](name='ComponentInstances'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='NextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListComponentInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListComponentInstancesResponseBody(name='body'),
}

/**
  * 查询组件实例列表。
  *
 */
async function listComponentInstances(request: ListComponentInstancesRequest): ListComponentInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListComponentInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListComponentsRequest {
  applicationNames?: [ string ](name='ApplicationNames', description='应用名称列表。', example='["HDFS"]', position='Query'),
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  componentNames?: [ string ](name='ComponentNames', description='组件名称列表。', example='["DataNode"]', position='Query'),
  componentStates?: [ string ](name='ComponentStates', example='null', position='Query'),
  maxResults?: int32(name='MaxResults', description='一次获取的最大记录数。取值范围：1~100。', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Query'),
}

model ListComponentsResponseBody = {
  components?: [ 
    {
      applicationName?: string(name='ApplicationName', description='应用名称。', example='HDFS'),
      attributes?: [
        Attribute
      ](name='Attributes', description='属性列表。'),
      componentName?: string(name='ComponentName', description='组件名称。', example='DataNode'),
      namespace?: string(name='Namespace', description='命名空间。'),
      replica?: int32(name='Replica', description='安装该组件的机器总数。', example='1'),
    }
  ](name='Components'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='NextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListComponentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListComponentsResponseBody(name='body'),
}

async function listComponents(request: ListComponentsRequest): ListComponentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListComponents', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorApplicationsRequest {
  appIds?: [ string ](name='AppIds', description='The IDs of jobs that are submitted to YARN.', example='null', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The field that you use to sort the query results. Valid values:

1.  startTime: the time when the job starts
2.  endTime: the time when the job ends
3.  vcoreUtilization: the vCPU utilization of the job
4.  memUtilization: the memory usage of the job
5.  vcoreSeconds: the aggregated number of vCPUs that are allocated to the job multiplied by the number of seconds the job has been running
6.  memSeconds: the aggregated amount of memory that is allocated to the job multiplied by the number of seconds the job has been running
7.  score: the score of the job', example='score', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: the ascending order
*   DESC: the descending order', example='ASC', position='Query'),
  queues?: [ string ](name='Queues', description='The YARN queues to which the jobs are submitted.', example='null', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  types?: [ string ](name='Types', description='The YARN engines to which the jobs are submitted.', example='null', position='Query'),
  users?: [ string ](name='Users', description='The users who submit the jobs.', example='null', position='Query'),
}

model ListDoctorApplicationsResponseBody = {
  data?: [ 
    {
      analysis?: {
        score?: int32(name='Score', description='The score of the job.', example='23'),
        suggestion?: string(name='Suggestion', description='The suggestion on executing the job.'),
      }(name='Analysis', description='The analysis results of the jobs.'),
      appId?: string(name='AppId', description='The job ID in YARN. The value of QueryID or SessionID is returned for a Hive job.', example='application_1665056147236_*****'),
      appName?: string(name='AppName', description='The name of the job.', example='data-upload'),
      endTime?: long(name='EndTime', description='The time when the job ended. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1682049088086'),
      ids?: [ string ](name='Ids', description='The job IDs. Multiple job IDs are separated with commas (,).', example='null'),
      metrics?: {
        memSeconds?: {
          description?: string(name='Description', description='The description of the metric.', example='Total memory usage over time in seconds'),
          name?: string(name='Name', description='The name of the metric.', example='memSeconds'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB * Sec'),
          value?: long(name='Value', description='The value of the metric.', example='12312312'),
        }(name='MemSeconds', description='The amount of memory consumed.'),
        memUtilization?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of used memory to total available memory'),
          name?: string(name='Name', description='The name of the metric.', example='memUtilization'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.23'),
        }(name='MemUtilization', description='The memory usage'),
        vcoreSeconds?: {
          description?: string(name='Description', description='The description of the metric.', example='Total vcore usage over time in seconds'),
          name?: string(name='Name', description='The name of the metric.', example='vcoreSeconds'),
          unit?: string(name='Unit', description='The unit of the metric.', example='VCores * Sec'),
          value?: long(name='Value', description='The value of the metric.', example='11123'),
        }(name='VcoreSeconds', description='The CPU usage.'),
        vcoreUtilization?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of used vcore to total available cores'),
          name?: string(name='Name', description='The name of the metric.', example='vcoreUtilization'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='23.1'),
        }(name='VcoreUtilization', description='The CPU utilization. This parameter has the same meaning as %CPU in the Linux top command.'),
      }(name='Metrics', description='The data about metrics.'),
      querySql?: string(name='QuerySql', description='The query statement. This parameter is left empty for non-SQL jobs.', example='SELECT id, count(1) FROM test group by id;'),
      queue?: string(name='Queue', description='The YARN queue to which the job was submitted.', example='DW'),
      startTime?: long(name='StartTime', description='The time when the job was submitted. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1677465658275'),
      type?: string(name='Type', description='The type of the compute engine.', example='TEZ'),
      user?: string(name='User', description='The username that was used to submit the job.', example='DW'),
    }
  ](name='Data', description='The details of jobs.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorApplicationsResponseBody(name='body'),
}

/**
  * list all doctor analysis apps
  *
 */
async function listDoctorApplications(request: ListDoctorApplicationsRequest): ListDoctorApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorComputeSummaryRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  componentTypes?: [ string ](name='ComponentTypes', description='The resource types, which are used to filter query results. Valid values:

*   engine: filters results by engine.
*   queue: filters results by queue.
*   cluster: displays the results at the cluster level.

If you do not specify this parameter, the information at the cluster level is displayed by default. Currently, only one resource type is supported. If you specify multiple resource types, the first resource type is used by default.', example='null', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The basis on which you want to sort the query results. Valid values:

1.  vcoreSeconds: the total CPU consumption over time in seconds.
2.  memSeconds: the total memory consumption over time in seconds.
3.  vcoreUtilization: the average CPU utilization. The meaning is the same as the %CPU parameter in the output of the top command in Linux.
4.  memUtilization: the average memory usage.
5.  vcoreSecondsDayGrowthRatio: the day-to-day growth rate of the total CPU consumption over time in seconds.
6.  memSecondsDayGrowthRatio: the day-to-day growth rate of the total memory consumption over time in seconds.
7.  readSize: the total amount of data read from the file system.
8.  writeSize: the total amount of data written to the file system.
9.  healthyJobCount: the total number of healthy jobs.
10. subHealthyJobCount: the total number of sub-healthy jobs.
11. unhealthyJobCount: the total number of unhealthy jobs.
12. needAttentionJobCount: the total number of jobs that require attention.
13. score: the score for jobs.
14. scoreDayGrowthRatio: the day-to-day growth rate of the score for jobs.', example='score', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: in ascending order.
*   DESC: in descending order.', example='ASC', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListDoctorComputeSummaryResponseBody = {
  data?: [ 
    {
      analysis?: {
        healthyJobCount?: long(name='HealthyJobCount', description='The total number of healthy jobs.', example='3'),
        needAttentionJobCount?: long(name='NeedAttentionJobCount', description='The total number of jobs that require attention.', example='23'),
        score?: int32(name='Score', description='The score for jobs.', example='56'),
        scoreDayGrowthRatio?: float(name='ScoreDayGrowthRatio', description='The day-to-day growth rate of the score for jobs.', example='0.03'),
        subHealthyJobCount?: long(name='SubHealthyJobCount', description='The total number of sub-healthy jobs.', example='13'),
        unhealthyJobCount?: long(name='UnhealthyJobCount', description='The total number of unhealthy jobs.', example='123'),
      }(name='Analysis', description='The resource analysis results.'),
      componentName?: string(name='ComponentName', description='The name of the resource whose details are obtained based on the value of ComponentTypes. For example, if the value of ComponentTypes is Queue, the value of this parameter is a queue, such as DW.', example='DW'),
      metrics?: {
        memSeconds?: {
          description?: string(name='Description', description='The description of the metric.', example='Total memory usage over time in seconds'),
          name?: string(name='Name', description='The name of the metric.', example='memSeconds'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB * Sec'),
          value?: long(name='Value', description='The value of the metric.', example='12312312'),
        }(name='MemSeconds', description='The total memory consumption over time in seconds.'),
        memSecondsDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Growth ratio of memory usage in seconds per day'),
          name?: string(name='Name', description='The name of the metric.', example='memSecondsDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: float(name='Value', description='The value of the metric.', example='0.36'),
        }(name='MemSecondsDayGrowthRatio', description='The day-to-day growth rate of the total memory consumption over time in seconds.'),
        memUtilization?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of used memory to total available memory'),
          name?: string(name='Name', description='The name of the metric.', example='memUtilization'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: float(name='Value', description='The value of the metric.', example='0.82'),
        }(name='MemUtilization', description='The average memory usage.'),
        readSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Total cumulative size of data read in megabytes (MB)'),
          name?: string(name='Name', description='The name of the metric.', example='readSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='504888659968'),
        }(name='ReadSize', description='The total amount of data read from the file system.'),
        vcoreSeconds?: {
          description?: string(name='Description', description='The description of the metric.', example='Total vcore usage over time in seconds'),
          name?: string(name='Name', description='The name of the metric.', example='vcoreSeconds'),
          unit?: string(name='Unit', description='The unit of the metric.', example='VCores * Sec'),
          value?: long(name='Value', description='The value of the metric.', example='1231412'),
        }(name='VcoreSeconds', description='The total CPU consumption over time in seconds.'),
        vcoreSecondsDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Growth ratio of virtual core usage in seconds per day'),
          name?: string(name='Name', description='The name of the metric.', example='vcoreSecondsDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: float(name='Value', description='The value of the metric.', example='0.22'),
        }(name='VcoreSecondsDayGrowthRatio', description='The day-to-day growth rate of the total CPU consumption over time in seconds.'),
        vcoreUtilization?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of used vcore to total available cores'),
          name?: string(name='Name', description='The name of the metric.', example='vcoreUtilization'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: float(name='Value', description='The value of the metric.', example='32.1'),
        }(name='VcoreUtilization', description='The average CPU utilization. The meaning is the same as the %CPU parameter in the output of the top command in Linux.'),
        writeSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Total cumulative size of data written in megabytes (MB)'),
          name?: string(name='Name', description='The name of the metric.', example='writeSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='6294093393920'),
        }(name='WriteSize', description='The total amount of data written to the file system.'),
      }(name='Metrics', description='The metric information.'),
    }
  ](name='Data', description='The details of resource usage.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries that are returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorComputeSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorComputeSummaryResponseBody(name='body'),
}

/**
  * list Doctor analysis result of cluster engine queue view
  *
 */
async function listDoctorComputeSummary(request: ListDoctorComputeSummaryRequest): ListDoctorComputeSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorComputeSummary', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorHBaseRegionServersRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='The query date.', example='2023-01-01', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The field that you use to sort the query results. Valid value:

*   regionCount: the number of regions.', example='regionCount', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid value:

*   ASC: in ascending order
*   DESC: in descending order', example='ASC', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  regionServerHosts?: [ string ](name='RegionServerHosts', description='The RegionServer hosts.', example='null', position='Query'),
}

model ListDoctorHBaseRegionServersResponseBody = {
  data?: [ 
    {
      metrics?: {
        avgGc?: {
          description?: string(name='Description', description='The description of the metric.', example='The efficiency of garbage collection in the system'),
          name?: string(name='Name', description='The name of the metric.', example='avgGc'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='37.9'),
        }(name='AvgGc', description='The average garbage collection (GC) duration.'),
        cacheRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of the BlockCache memory size'),
          name?: string(name='Name', description='The name of the metric.', example='cacheRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='96.7'),
        }(name='CacheRatio', description='The cache hit ratio.'),
        dailyReadRequest?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of read requests per day'),
          name?: string(name='Name', description='The name of the metric.', example='dailyReadRequest'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='42571'),
        }(name='DailyReadRequest', description='The number of daily read requests.'),
        dailyReadRequestDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='The growth rate of daily read request quantity.'),
          name?: string(name='Name', description='The name of the metric.', example='dailyReadRequestDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='1.0'),
        }(name='DailyReadRequestDayGrowthRatio', description='The growth rate of the number of daily read requests.'),
        dailyWriteRequest?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of write requests per day'),
          name?: string(name='Name', description='The name of the metric.', example='dailyWriteRequest'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='23124'),
        }(name='DailyWriteRequest', description='The number of daily write requests.'),
        dailyWriteRequestDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='The growth rate of daily write request quantity.'),
          name?: string(name='Name', description='The name of the metric.', example='dailyWriteRequestDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='1.0'),
        }(name='DailyWriteRequestDayGrowthRatio', description='The growth rate of the number of daily write requests.'),
        regionCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of regions count'),
          name?: string(name='Name', description='The name of the metric.', example='regionCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='81'),
        }(name='RegionCount', description='The number of regions.'),
        totalReadRequest?: {
          description?: string(name='Description', description='The description of the metric.', example='Total number of read requests'),
          name?: string(name='Name', description='The name of the metric.', example='totalReadRequest'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='170500567'),
        }(name='TotalReadRequest', description='The cumulative number of read requests.'),
        totalRequest?: {
          description?: string(name='Description', description='The description of the metric.', example='Total number of requests'),
          name?: string(name='Name', description='The name of the metric.', example='totalRequest'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='89499511'),
        }(name='TotalRequest', description='The cumulative number of all requests.'),
        totalWriteRequest?: {
          description?: string(name='Description', description='The description of the metric.', example='Total number of write requests'),
          name?: string(name='Name', description='The name of the metric.', example='totalWriteRequest'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='30109837'),
        }(name='TotalWriteRequest', description='The cumulative number of write requests.'),
      }(name='Metrics', description='The metric information.'),
      regionServerHost?: string(name='RegionServerHost', description='The RegionServer host.', example='emr-worker-4.cluster-20****'),
    }
  ](name='Data', description='The returned data.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries that are returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorHBaseRegionServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorHBaseRegionServersResponseBody(name='body'),
}

/**
  * list Doctor HBaseRegionServers
  *
 */
async function listDoctorHBaseRegionServers(request: ListDoctorHBaseRegionServersRequest): ListDoctorHBaseRegionServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorHBaseRegionServers', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorHBaseTablesRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='The query date.', example='2023-01-01', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries that are returned.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='Marks the current position to start reading. If this field is empty, the data is read from the beginning.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The field that you use to sort the query results.

Valid values:

*   tableSize', example='tableSize', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid value:

*   ASC: in ascending order
*   DESC: in descending order', example='ASC', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  tableNames?: [ string ](name='TableNames', description='The table names, which are used to filter the query results.', example='null', position='Query'),
}

model ListDoctorHBaseTablesResponseBody = {
  data?: [ 
    {
      analysis?: {
        readRequestHotspotRegionList?: [ string ](name='ReadRequestHotspotRegionList', description='The regions that have read hotspot issues.', example='null'),
        readRequestUnbalanceSuggestion?: string(name='ReadRequestUnbalanceSuggestion', description='The description of read imbalance.', example='read request unbalance is <p class=\\"report-detail-topic\\">'),
        requestHotspotRegionList?: [ string ](name='RequestHotspotRegionList', description='The regions that have read/write hotspot issues.', example='null'),
        requestUnbalanceSuggestion?: string(name='RequestUnbalanceSuggestion', description='The description of read/write imbalance.', example='read request unbalance is <p class=\\"report-detail-topic\\">'),
        tableScore?: int32(name='TableScore', description='The score of the table.', example='67'),
        writeRequestHotspotRegionList?: [ string ](name='WriteRequestHotspotRegionList', description='The regions that have write hotspot issues.', example='null'),
        writeRequestUnbalanceSuggestion?: string(name='WriteRequestUnbalanceSuggestion', description='The description of write imbalance.', example='write request unbalance is <p class=\\"report-detail-topic\\">'),
      }(name='Analysis', description='The diagnosis result.'),
      metrics?: {
        coldAccessDay?: {
          description?: string(name='Description', description='The description of the metric.', example='Cold access day'),
          name?: string(name='Name', description='The name of the metric.', example='coldAccessDay'),
          unit?: string(name='Unit', description='The unit of the metric.', example='day'),
          value?: long(name='Value', description='The value of the metric.', example='1'),
        }(name='ColdAccessDay', description='The number of days during which the table was not accessed.'),
        coldConfigDay?: {
          description?: string(name='Description', description='The description of the metric.', example='Cold config day'),
          name?: string(name='Name', description='The name of the metric.', example='coldConfigDay'),
          unit?: string(name='Unit', description='The unit of the metric.', example='dat'),
          value?: long(name='Value', description='The value of the metric.', example='1'),
        }(name='ColdConfigDay', description='The number of consecutive days without access to data before the data is considered as very cold data.'),
        coldDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the cold data size'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='100'),
        }(name='ColdDataSize', description='The size of cold data.'),
        dailyReadRequest?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of read requests per day'),
          name?: string(name='Name', description='The name of the metric.', example='dailyReadRequest'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='DailyReadRequest', description='The total number of read requests for the table in a day.'),
        dailyReadRequestDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of read requests'),
          name?: string(name='Name', description='The name of the metric.', example='dailyReadRequestDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.8'),
        }(name='DailyReadRequestDayGrowthRatio', description='The daily increment ratio of the number of read requests in a day.'),
        dailyWriteRequest?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of write requests per day'),
          name?: string(name='Name', description='The name of the metric.', example='dailyWriteRequest'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='DailyWriteRequest', description='The total number of write requests for the table in a day.'),
        dailyWriteRequestDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='The balance of distributing requests'),
          name?: string(name='Name', description='The name of the metric.', example='dailyWriteRequestDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.8'),
        }(name='DailyWriteRequestDayGrowthRatio', description='The daily increment ratio of the number of write requests in a day.'),
        freezeConfigDay?: {
          description?: string(name='Description', description='The description of the metric.', example='Freeze config day'),
          name?: string(name='Name', description='The name of the metric.', example='freezeConfigDay'),
          unit?: string(name='Unit', description='The unit of the metric.', example='day'),
          value?: long(name='Value', description='The value of the metric.', example='1'),
        }(name='FreezeConfigDay', description='The number of consecutive days without access to data before the data was considered as very cold data.'),
        freezeDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the freeze data size'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='100'),
        }(name='FreezeDataSize', description='The size of very cold data.'),
        hotDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the hot data size'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='100'),
        }(name='HotDataSize', description='The size of hot data.'),
        locality?: {
          description?: string(name='Description', description='The description of the metric.', example='The locality of data'),
          name?: string(name='Name', description='The name of the metric.', example='locality'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0'),
        }(name='Locality', description='The localization rate.'),
        readRequestBalance?: {
          description?: string(name='Description', description='The description of the metric.', example='The balance of distributing read requests'),
          name?: string(name='Name', description='The name of the metric.', example='readRequestBalance'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='1.0'),
        }(name='ReadRequestBalance', description='The read balancing degree.'),
        regionBalance?: {
          description?: string(name='Description', description='The description of the metric.', example='The ability to evenly distribute Regions on different RegionServer nodes'),
          name?: string(name='Name', description='The name of the metric.', example='regionBalance'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: float(name='Value', description='The value of the metric.', example='1.0'),
        }(name='RegionBalance', description='The balancing degree.'),
        regionCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of regions count'),
          name?: string(name='Name', description='The name of the metric.', example='regionCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='3'),
        }(name='RegionCount', description='The number of regions that host the table.'),
        regionCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of region count'),
          name?: string(name='Name', description='The name of the metric.', example='regionCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='1.0'),
        }(name='RegionCountDayGrowthRatio', description='The daily increment ratio of the number of regions.'),
        regionServerCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of region servers count'),
          name?: string(name='Name', description='The name of the metric.', example='regionServerCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='2'),
        }(name='RegionServerCount', description='The number of region servers that host the table.'),
        requestBalance?: {
          description?: string(name='Description', description='The description of the metric.', example='The balance of distributing requests'),
          name?: string(name='Name', description='The name of the metric.', example='requestBalance'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: float(name='Value', description='The value of the metric.', example='0.9'),
        }(name='RequestBalance', description='The request balancing degree.'),
        storeFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of store files'),
          name?: string(name='Name', description='The name of the metric.', example='storeFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='36'),
        }(name='StoreFileCount', description='The number of StoreFiles.'),
        storeFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of store file count'),
          name?: string(name='Name', description='The name of the metric.', example='storeFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.7'),
        }(name='StoreFileCountDayGrowthRatio', description='The daily increment ratio of the number of StoreFiles.'),
        tableSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the table'),
          name?: string(name='Name', description='The name of the metric.', example='tableSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='678'),
        }(name='TableSize', description='The size of the table.'),
        tableSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of table size'),
          name?: string(name='Name', description='The name of the metric.', example='tableSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='\\""'),
          value?: float(name='Value', description='The value of the metric.', example='1.0'),
        }(name='TableSizeDayGrowthRatio', description='The daily increment ratio of the table size.'),
        warmConfigDay?: {
          description?: string(name='Description', description='The description of the metric.', example='Warm config day'),
          name?: string(name='Name', description='The name of the metric.', example='warmConfigDay'),
          unit?: string(name='Unit', description='The unit of the metric.', example='day'),
          value?: long(name='Value', description='The value of the metric.', example='1'),
        }(name='WarmConfigDay', description='The number of consecutive days without access to data before the data is considered as cold data.'),
        warmDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the warm data size'),
          name?: string(name='Name', description='The name of the metric.', example='warmDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='100'),
        }(name='WarmDataSize', description='The size of warm data.'),
        writeRequestBalance?: {
          description?: string(name='Description', description='The description of the metric.', example='The balance of distributing write requests'),
          name?: string(name='Name', description='The name of the metric.', example='writeRequestBalance'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='1.0'),
        }(name='WriteRequestBalance', description='The write balancing degree.'),
      }(name='Metrics', description='The metric information.'),
      tableName?: string(name='TableName', description='The name of the table.', example='tb_item'),
    }
  ](name='Data', description='The response parameters.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='The page number of the next page returned.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorHBaseTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorHBaseTablesResponseBody(name='body'),
}

/**
  * list Doctor HBaseTables
  *
 */
async function listDoctorHBaseTables(request: ListDoctorHBaseTablesRequest): ListDoctorHBaseTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorHBaseTables', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorHDFSDirectoriesRequest {
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', example='2023-01-01', position='Query'),
  dirPath?: string(name='DirPath', example='/tmp/test', position='Query'),
  maxResults?: int32(name='MaxResults', description='一次获取的最大记录数。取值范围：1~100。', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', example='smallFileCount', position='Query'),
  orderType?: string(name='OrderType', example='ASC', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
}

model ListDoctorHDFSDirectoriesResponseBody = {
  data?: [ 
    {
      depth?: int32(name='Depth', example='2'),
      dirPath?: string(name='DirPath', example='/tmp/test'),
      group?: string(name='Group', example='DW'),
      metrics?: {
        coldDataDayGrowthSize?: {
          description?: string(name='Description', example='Day growth size of cold data'),
          name?: string(name='Name', example='coldDataDayGrowthSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='-182636577752'),
        }(name='ColdDataDayGrowthSize'),
        coldDataSize?: {
          description?: string(name='Description', example='Size of the cold data size'),
          name?: string(name='Name', example='coldDataSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='5570958082267'),
        }(name='ColdDataSize'),
        coldDataSizeDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of cold data size'),
          name?: string(name='Name', example='coldDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='-0.03'),
        }(name='ColdDataSizeDayGrowthRatio'),
        emptyFileCount?: {
          description?: string(name='Description', example='Number of empty files'),
          name?: string(name='Name', example='emptyFileCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='15595897'),
        }(name='EmptyFileCount'),
        emptyFileCountDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of empty files'),
          name?: string(name='Name', example='emptyFileCountDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='0.005'),
        }(name='EmptyFileCountDayGrowthRatio'),
        emptyFileDayGrowthCount?: {
          description?: string(name='Description', example='Day growth count of empty files'),
          name?: string(name='Name', example='emptyFileDayGrowthCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='114'),
        }(name='EmptyFileDayGrowthCount'),
        freezeDataDayGrowthSize?: {
          description?: string(name='Description', example='Day growth size of freeze data'),
          name?: string(name='Name', example='freezeDataDayGrowthSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='-167683929450'),
        }(name='FreezeDataDayGrowthSize'),
        freezeDataSize?: {
          description?: string(name='Description', example='Size of the freeze data size'),
          name?: string(name='Name', example='freezeDataSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='1231312431'),
        }(name='FreezeDataSize'),
        freezeDataSizeDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of freeze data size'),
          name?: string(name='Name', example='freezeDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='-0.09'),
        }(name='FreezeDataSizeDayGrowthRatio'),
        hotDataDayGrowthSize?: {
          description?: string(name='Description', example='Day growth size of hot data'),
          name?: string(name='Name', example='hotDataDayGrowthSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='123154'),
        }(name='HotDataDayGrowthSize'),
        hotDataSize?: {
          description?: string(name='Description', example='Size of the hot data size'),
          name?: string(name='Name', example='hotDataSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='6701531944206'),
        }(name='HotDataSize'),
        hotDataSizeDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of hot data size'),
          name?: string(name='Name', example='hotDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='0.1114'),
        }(name='HotDataSizeDayGrowthRatio'),
        largeFileCount?: {
          description?: string(name='Description', example='Number of large files'),
          name?: string(name='Name', example='largeFileCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='123'),
        }(name='LargeFileCount'),
        largeFileCountDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of large files'),
          name?: string(name='Name', example='largeFileCountDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='0.39'),
        }(name='LargeFileCountDayGrowthRatio'),
        largeFileDayGrowthCount?: {
          description?: string(name='Description', example='Day growth count of large files'),
          name?: string(name='Name', example='largeFileDayGrowthCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='2'),
        }(name='LargeFileDayGrowthCount'),
        mediumFileCount?: {
          description?: string(name='Description', example='Number of medium files'),
          name?: string(name='Name', example='mediumFileCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='323'),
        }(name='MediumFileCount'),
        mediumFileCountDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of medium files'),
          name?: string(name='Name', example='mediumFileCountDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='0.19'),
        }(name='MediumFileCountDayGrowthRatio'),
        mediumFileDayGrowthCount?: {
          description?: string(name='Description', example='Day growth count of medium files'),
          name?: string(name='Name', example='mediumFileDayGrowthCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='176'),
        }(name='MediumFileDayGrowthCount'),
        smallFileCount?: {
          description?: string(name='Description', example='Number of small files'),
          name?: string(name='Name', example='smallFileCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='12345'),
        }(name='SmallFileCount'),
        smallFileCountDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of small files'),
          name?: string(name='Name', example='smallFileCountDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='0.02'),
        }(name='SmallFileCountDayGrowthRatio'),
        smallFileDayGrowthCount?: {
          description?: string(name='Description', example='Day growth count of small files'),
          name?: string(name='Name', example='smallFileDayGrowthCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='12345'),
        }(name='SmallFileDayGrowthCount'),
        tinyFileCount?: {
          description?: string(name='Description', example='Number of tiny files'),
          name?: string(name='Name', example='tinyFileCount'),
          unit?: string(name='Unit', example='""'),
          value?: long(name='Value', example='232131'),
        }(name='TinyFileCount'),
        tinyFileCountDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of tiny files'),
          name?: string(name='Name', example='tinyFileCountDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='0.003'),
        }(name='TinyFileCountDayGrowthRatio'),
        tinyFileDayGrowthCount?: {
          description?: string(name='Description', example='Day growth count of tiny files'),
          name?: string(name='Name', example='tinyFileDayGrowthCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='-123'),
        }(name='TinyFileDayGrowthCount'),
        totalDataDayGrowthSize?: {
          description?: string(name='Description', example='Day growth size of total data'),
          name?: string(name='Name', example='totalDataDayGrowthSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='256482228248'),
        }(name='TotalDataDayGrowthSize'),
        totalDataSize?: {
          description?: string(name='Description', example='Total data size in megabytes (MB)'),
          name?: string(name='Name', example='totalDataSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='62086342083623'),
        }(name='TotalDataSize'),
        totalDataSizeDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of total data size'),
          name?: string(name='Name', example='totalDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='0.14'),
        }(name='TotalDataSizeDayGrowthRatio'),
        totalFileCount?: {
          description?: string(name='Description', example='Number of total files'),
          name?: string(name='Name', example='totalFileCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='51683279'),
        }(name='TotalFileCount'),
        totalFileCountDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of total files'),
          name?: string(name='Name', example='totalFileCountDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='0.02'),
        }(name='TotalFileCountDayGrowthRatio'),
        totalFileDayGrowthCount?: {
          description?: string(name='Description', example='Day growth count of total files'),
          name?: string(name='Name', example='totalFileDayGrowthCount'),
          unit?: string(name='Unit', example='”“'),
          value?: long(name='Value', example='27809'),
        }(name='TotalFileDayGrowthCount'),
        warmDataDayGrowthSize?: {
          description?: string(name='Description', example='Day growth size of warm data'),
          name?: string(name='Name', example='warmDataDayGrowthSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='-64806998319'),
        }(name='WarmDataDayGrowthSize'),
        warmDataSize?: {
          description?: string(name='Description', example='Size of the warm data size'),
          name?: string(name='Name', example='warmDataSize'),
          unit?: string(name='Unit', example='MB'),
          value?: long(name='Value', example='4062349775577'),
        }(name='WarmDataSize'),
        warmDataSizeDayGrowthRatio?: {
          description?: string(name='Description', example='Day growth ratio of warm data size'),
          name?: string(name='Name', example='warmDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', example='”“'),
          value?: float(name='Value', example='-0.015'),
        }(name='WarmDataSizeDayGrowthRatio'),
      }(name='Metrics'),
      user?: string(name='User', example='DW'),
    }
  ](name='Data'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='NextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListDoctorHDFSDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorHDFSDirectoriesResponseBody(name='body'),
}

/**
  * list Doctor HDFSNodes
  *
 */
async function listDoctorHDFSDirectories(request: ListDoctorHDFSDirectoriesRequest): ListDoctorHDFSDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorHDFSDirectories', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorHDFSUGIRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The basis on which you want to sort the query results. Valid values:

*   totalFileCount: the total number of files
*   totalDataSize: the total data size
*   totalDirCount: the total number of directories', example='totalFileCount', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: in ascending order
*   DESC: in descending order', example='ASC', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The filter condition. Valid values:

*   user
*   group', example='group', position='Query'),
}

model ListDoctorHDFSUGIResponseBody = {
  data?: [ 
    {
      metrics?: {
        totalDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
          name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='40440503'),
        }(name='TotalDataSize', description='The total data size.'),
        totalDirCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of total dirs'),
          name?: string(name='Name', description='The name of the metric.', example='totalDirCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: long(name='Value', description='The value of the metric.', example='123'),
        }(name='TotalDirCount', description='The total number of directories.'),
        totalFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of total files'),
          name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: long(name='Value', description='The value of the metric.', example='34'),
        }(name='TotalFileCount', description='The total number of files.'),
      }(name='Metrics', description='The metric information.'),
      name?: string(name='Name', description='The actual name of the owner or group returned based on the value of Type.', example='DW'),
    }
  ](name='Data', description='The results of batch HDFS analysis.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries that are returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorHDFSUGIResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorHDFSUGIResponseBody(name='body'),
}

/**
  * list Doctor HDFS UGIs
  *
 */
async function listDoctorHDFSUGI(request: ListDoctorHDFSUGIRequest): ListDoctorHDFSUGIResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorHDFSUGI', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorHiveDatabasesRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  databaseNames?: [ string ](name='DatabaseNames', description='The database names.', example='null', position='Query'),
  dateTime: string(name='DateTime', description='The query date.', example='2023-01-01', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The basis on which you want to sort the query results. Valid values:

*   tableCount: the number of tables', example='tableCount', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: in ascending order
*   DESC: in descending order', example='ASC', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListDoctorHiveDatabasesResponseBody = {
  data?: [ 
    {
      analysis?: {
        hiveDistributionScore?: int32(name='HiveDistributionScore', description='The score for the distribution of files of different sizes stored in the Hive database.', example='85'),
        hiveFormatScore?: int32(name='HiveFormatScore', description='The score for the distribution of files stored in different formats in the Hive database.', example='85'),
        hiveFrequencyScore?: int32(name='HiveFrequencyScore', description='The score for the access frequency of the Hive database.', example='85'),
        hiveScore?: int32(name='HiveScore', description='The overall score of the Hive database.', example='85'),
      }(name='Analysis', description='The analysis results.'),
      databaseName?: string(name='DatabaseName', description='The database name.', example='db1'),
      formats?: [ 
        {
          formatDayGrowthSize?: long(name='FormatDayGrowthSize', description='The daily increment of storage format-specific data.', example='1000'),
          formatName?: string(name='FormatName', description='The name of the storage format.', example='TextInputFormat'),
          formatRatio?: float(name='FormatRatio', description='The proportion of data in a specific storage format.', example='0.5'),
          formatSize?: long(name='FormatSize', description='The amount of storage format-specific data.', example='1000'),
          formatSizeDayGrowthRatio?: float(name='FormatSizeDayGrowthRatio', description='The day-to-day growth rate of storage format-specific data.', example='0.5'),
          formatSizeUnit?: string(name='FormatSizeUnit', description='The unit of the amount of storage format-specific data.', example='MB'),
        }
      ](name='Formats', description='The information from the perspective of storage formats.'),
      metrics?: {
        coldDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of cold data'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='ColdDataDayGrowthSize', description='The daily increment of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
        coldDataRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Cold data ratio'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='ColdDataRatio', description='The proportion of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
        coldDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of cold files'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='ColdDataSize', description='The amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
        coldDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of cold data size'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='ColdDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in 90 days.'),
        emptyFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of empty files'),
          name?: string(name='Name', description='The name of the metric.', example='emptyFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='EmptyFileCount', description='The number of empty files. Empty files are those with a size of 0 MB.'),
        emptyFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of empty files'),
          name?: string(name='Name', description='The name of the metric.', example='emptyFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='EmptyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of empty files. Empty files are those with a size of 0 MB.'),
        emptyFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of empty files'),
          name?: string(name='Name', description='The name of the metric.', example='emptyFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='EmptyFileDayGrowthCount', description='The daily increment of the number of empty files. Empty files are those with a size of 0 MB.'),
        emptyFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of empty files'),
          name?: string(name='Name', description='The name of the metric.', example='emptyFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='EmptyFileRatio', description='The proportion of empty files. Empty files are those with a size of 0 MB.'),
        freezeDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of freeze data'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='FreezeDataDayGrowthSize', description='The daily increment of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
        freezeDataRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze data'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='FreezeDataRatio', description='The proportion of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
        freezeDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze files'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='FreezeDataSize', description='The amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
        freezeDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of freeze data size'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='FreezeDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
        hotDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of hot data'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='HotDataDayGrowthSize', description='The daily increment of the amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
        hotDataRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Hot data ratio'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='HotDataRatio', description='The proportion of hot data. Hot data refers to data that is accessed in recent seven days.'),
        hotDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of hot files'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='HotDataSize', description='The amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
        hotDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of hot data size'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='HotDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of hot data. Hot data refers to data that is accessed in recent seven days.'),
        largeFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of large files'),
          name?: string(name='Name', description='The name of the metric.', example='largeFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='LargeFileCount', description='The number of large files. Large files are those with a size greater than 1 GB.'),
        largeFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of large files'),
          name?: string(name='Name', description='The name of the metric.', example='largeFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='LargeFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of large files. Large files are those with a size greater than 1 GB.'),
        largeFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of large files'),
          name?: string(name='Name', description='The name of the metric.', example='largeFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='LargeFileDayGrowthCount', description='The daily increment of the number of large files. Large files are those with a size greater than 1 GB.'),
        largeFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of large files'),
          name?: string(name='Name', description='The name of the metric.', example='largeFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='LargeFileRatio', description='The proportion of large files. Large files are those with a size greater than 1 GB.'),
        mediumFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of medium files'),
          name?: string(name='Name', description='The name of the metric.', example='mediumFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='MediumFileCount', description='The number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
        mediumFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of medium files'),
          name?: string(name='Name', description='The name of the metric.', example='mediumFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='MediumFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
        mediumFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of medium files'),
          name?: string(name='Name', description='The name of the metric.', example='mediumFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='MediumFileDayGrowthCount', description='The daily increment of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
        mediumFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of medium files'),
          name?: string(name='Name', description='The name of the metric.', example='mediumFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='MediumFileRatio', description='The proportion of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
        partitionNum?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of partitions'),
          name?: string(name='Name', description='The name of the metric.', example='ppartitionNum'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='PartitionNum', description='The number of partitions.'),
        smallFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of small files'),
          name?: string(name='Name', description='The name of the metric.', example='smallFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='SmallFileCount', description='The number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
        smallFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of small files'),
          name?: string(name='Name', description='The name of the metric.', example='smallFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='SmallFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
        smallFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of small files'),
          name?: string(name='Name', description='The name of the metric.', example='smallFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='SmallFileDayGrowthCount', description='The daily increment of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
        smallFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of small files'),
          name?: string(name='Name', description='The name of the metric.', example='smallFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='SmallFileRatio', description='The proportion of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
        tableCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of tables'),
          name?: string(name='Name', description='The name of the metric.', example='TableCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='TableCount', description='The number of tables.'),
        tinyFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of tiny files'),
          name?: string(name='Name', description='The name of the metric.', example='tinyFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='TinyFileCount', description='The number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
        tinyFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of tiny files'),
          name?: string(name='Name', description='The name of the metric.', example='tinyFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='TinyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
        tinyFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of tiny files'),
          name?: string(name='Name', description='The name of the metric.', example='tinyFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='TinyFileDayGrowthCount', description='The daily increment of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
        tinyFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of tiny files'),
          name?: string(name='Name', description='The name of the metric.', example='tinyFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='TinyFileRatio', description='The proportion of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
        totalDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of total data'),
          name?: string(name='Name', description='The name of the metric.', example='totalDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='TotalDataDayGrowthSize', description='The daily incremental of the total data volume.'),
        totalDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
          name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='TotalDataSize', description='The total amount of data.'),
        totalDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total data size'),
          name?: string(name='Name', description='The name of the metric.', example='totalDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='TotalDataSizeDayGrowthRatio', description='The day-to-day growth rate of the total data volume.'),
        totalFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of total files'),
          name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='TotalFileCount', description='The total number of files.'),
        totalFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total files'),
          name?: string(name='Name', description='The name of the metric.', example='totalFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='TotalFileCountDayGrowthRatio', description='The day-to-day growth rate of the total number of files.'),
        totalFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of total files'),
          name?: string(name='Name', description='The name of the metric.', example='totalFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='TotalFileDayGrowthCount', description='The daily increment of the total number of files.'),
        warmDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of warm data'),
          name?: string(name='Name', description='The name of the metric.', example='warmDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='WarmDataDayGrowthSize', description='The daily increment of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
        warmDataRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of warm data'),
          name?: string(name='Name', description='The name of the metric.', example='warmDataRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='WarmDataRatio', description='The proportion of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
        warmDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of warm files'),
          name?: string(name='Name', description='The name of the metric.', example='warmDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='1000'),
        }(name='WarmDataSize', description='The amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
        warmDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of warm data size'),
          name?: string(name='Name', description='The name of the metric.', example='WarmDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.5'),
        }(name='WarmDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in 30 days.'),
      }(name='Metrics', description='The metric information.'),
    }
  ](name='Data', description='The analysis results of Hive databases.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries that are returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorHiveDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorHiveDatabasesResponseBody(name='body'),
}

/**
  * list Doctor Hive Databases
  *
 */
async function listDoctorHiveDatabases(request: ListDoctorHiveDatabasesRequest): ListDoctorHiveDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorHiveDatabases', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorHiveTablesRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  dateTime: string(name='DateTime', description='Specify the date in the ISO 8601 standard. For example, 2023-01-01 represents January 1, 2023.', example='2023-01-01', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The basis on which you want to sort the query results. Valid values:

*   partitionNum: the number of partitions.
*   totalFileCount: the total number of files.
*   largeFileCount: the number of large files. Large files are those with a size greater than 1 GB.
*   mediumFileCount: the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.
*   smallFileCount: the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.
*   tinyFileCount: the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.
*   emptyFileCount: the number of empty files. Empty files are those with a size of 0 MB.
*   largeFileRatio: the proportion of large files. Large files are those with a size greater than 1 GB.
*   mediumFileRatio: the proportion of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.
*   smallFileRatio: the proportion of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.
*   tinyFileRatio: the proportion of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.
*   emptyFileRatio: the proportion of empty files. Empty files are those with a size of 0 MB.
*   hotDataSize: the amount of hot data. Hot data refers to data that is accessed in previous seven days.
*   WarmDataSize: the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.
*   coldDataSize: the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.
*   freezeDataSize: the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.
*   totalDataSize: the total amount of data.
*   hotDataRatio: the proportion of hot data. Hot data refers to data that is accessed in previous seven days.
*   WarmDataRatio: the proportion of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.
*   coldDataRatio: the proportion of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.
*   freezeDataRatio: the proportion of very cold data. Very cold data refers to data that is not accessed for more than 90 days.
*   totalFileDayGrowthCount: the daily increment of the total number of files.
*   largeFileDayGrowthCount: the daily increment of the number of large files. Large files are those with a size greater than 1 GB.
*   mediumFileDayGrowthCount: the daily increment of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.
*   smallFileDayGrowthCount: the daily increment of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.
*   tinyFileDayGrowthCount: the daily increment of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.
*   emptyFileDayGrowthCount: the daily increment of the number of empty files. Empty files are those with a size of 0 MB.
*   hotDataDayGrowthSize: the daily increment of the amount of hot data. Hot data refers to data that is accessed in previous seven days.
*   warmDataDayGrowthSize: the daily increment of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.
*   coldDataDayGrowthSize: the daily increment of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.
*   freezeDataDayGrowthSize: the daily increment of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.
*   totalDataDayGrowthSize: the daily increment of the amount of total data.
*   totalFileCountDayGrowthRatio: the day-to-day growth rate of the total number of files.
*   largeFileCountDayGrowthRatio: the day-to-day growth rate of the number of large files. Large files are those with a size greater than 1 GB.
*   mediumFileCountDayGrowthRatio: the day-to-day growth rate of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.
*   smallFileCountDayGrowthRatio: the day-to-day growth rate of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.
*   tinyFileCountDayGrowthRatio: the day-to-day growth rate of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.
*   emptyFileCountDayGrowthRatio: the day-to-day growth rate of the number of empty files. Empty files are those with a size of 0 MB.
*   hotDataSizeDayGrowthRatio: the day-to-day growth rate of the amount of hot data. Hot data refers to data that is accessed in previous seven days.
*   warmDataSizeDayGrowthRatio: the day-to-day growth rate of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.
*   coldDataSizeDayGrowthRatio: the day-to-day growth rate of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.
*   freezeDataSizeDayGrowthRatio: the day-to-day growth rate of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.
*   totalDataSizeDayGrowthRatio: the day-to-day growth rate of the total amount of data.', example='totalFileCount', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid value:

*   ASC: in ascending order
*   DESC: in descending order', example='ASC', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  tableNames?: [ string ](name='TableNames', description='The table names, which are used to filter the query results.', example='null', position='Query'),
}

model ListDoctorHiveTablesResponseBody = {
  data?: [ 
    {
      analysis?: {
        hiveDistributionScore?: int32(name='HiveDistributionScore', description='The score for the file sizes of the Hive table.', example='80'),
        hiveFormatScore?: int32(name='HiveFormatScore', description='The score for the data formats of the Hive table.', example='60'),
        hiveFrequencyScore?: int32(name='HiveFrequencyScore', description='The score for the access frequency of the Hive table.', example='70'),
        hiveScore?: int32(name='HiveScore', description='The overall score of the Hive table.', example='80'),
      }(name='Analysis', description='The analysis results.'),
      formats?: [ 
        {
          formatDayGrowthSize?: long(name='FormatDayGrowthSize', description='The daily increment of data in the format.', example='1232124'),
          formatName?: string(name='FormatName', description='The name of the storage format.', example='TextInputFormat'),
          formatRatio?: float(name='FormatRatio', description='The proportion of the data in the format.', example='0.23'),
          formatSize?: long(name='FormatSize', description='The amount of data in the format.', example='506930200'),
          formatSizeDayGrowthRatio?: float(name='FormatSizeDayGrowthRatio', description='The day-to-day growth rate of data in the format.', example='0.04'),
          formatSizeUnit?: string(name='FormatSizeUnit', description='The unit of the amount of data in the format.', example='MB'),
        }
      ](name='Formats', description='The table format information.'),
      metrics?: {
        coldDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of cold data'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='217715'),
        }(name='ColdDataDayGrowthSize', description='The daily increment of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
        coldDataRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Cold data ratio'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='ColdDataRatio', description='The proportion of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
        coldDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the cold data size'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='217715'),
        }(name='ColdDataSize', description='The amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
        coldDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of cold data size'),
          name?: string(name='Name', description='The name of the metric.', example='coldDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='ColdDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of cold data. Cold data refers to data that is not accessed for more than 30 days but is accessed in previous 90 days.'),
        emptyFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of empty files'),
          name?: string(name='Name', description='The name of the metric.', example='emptyFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: long(name='Value', description='The value of the metric.', example='3123'),
        }(name='EmptyFileCount', description='The number of empty files. Empty files are those with a size of 0 MB.'),
        emptyFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of empty files'),
          name?: string(name='Name', description='The name of the metric.', example='emptyFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='EmptyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of empty files. Empty files are those with a size of 0 MB.'),
        emptyFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of empty files'),
          name?: string(name='Name', description='The name of the metric.', example='emptyFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: long(name='Value', description='The value of the metric.', example='-20'),
        }(name='EmptyFileDayGrowthCount', description='The daily increment of the number of empty files. Empty files are those with a size of 0 MB.'),
        emptyFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of empty files'),
          name?: string(name='Name', description='The name of the metric.', example='emptyFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='EmptyFileRatio', description='The proportion of empty files. Empty files are those with a size of 0 MB.'),
        freezeDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of freeze data'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='33229309'),
        }(name='FreezeDataDayGrowthSize', description='The daily increment of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
        freezeDataRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of freeze data'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.98'),
        }(name='FreezeDataRatio', description='The proportion of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
        freezeDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the freeze data size'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='33229309'),
        }(name='FreezeDataSize', description='The amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
        freezeDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of freeze data size'),
          name?: string(name='Name', description='The name of the metric.', example='freezeDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='FreezeDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of very cold data. Very cold data refers to data that is not accessed for more than 90 days.'),
        hotDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of hot data'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='203431'),
        }(name='HotDataDayGrowthSize', description='The daily increment of the amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
        hotDataRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Hot data ratio'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='HotDataRatio', description='The proportion of hot data. Hot data refers to data that is accessed in previous seven days.'),
        hotDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the hot data size'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='203431'),
        }(name='HotDataSize', description='The amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
        hotDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of hot data size'),
          name?: string(name='Name', description='The name of the metric.', example='hotDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='HotDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of hot data. Hot data refers to data that is accessed in previous seven days.'),
        largeFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of large files'),
          name?: string(name='Name', description='The name of the metric.', example='largeFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: long(name='Value', description='The value of the metric.', example='132'),
        }(name='LargeFileCount', description='The number of large files. Large files are those with a size greater than 1 GB.'),
        largeFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of large files'),
          name?: string(name='Name', description='The name of the metric.', example='largeFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='LargeFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of large files. Large files are those with a size greater than 1 GB.'),
        largeFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of large files'),
          name?: string(name='Name', description='The name of the metric.', example='largeFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='40'),
        }(name='LargeFileDayGrowthCount', description='The daily increment of the number of large files. Large files are those with a size greater than 1 GB.'),
        largeFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of large files'),
          name?: string(name='Name', description='The name of the metric.', example='largeFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.02'),
        }(name='LargeFileRatio', description='The proportion of large files. Large files are those with a size greater than 1 GB.'),
        mediumFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of medium files'),
          name?: string(name='Name', description='The name of the metric.', example='mediumFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: long(name='Value', description='The value of the metric.', example='5'),
        }(name='MediumFileCount', description='The number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
        mediumFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of medium files'),
          name?: string(name='Name', description='The name of the metric.', example='mediumFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='MediumFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
        mediumFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of medium files'),
          name?: string(name='Name', description='The name of the metric.', example='mediumFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='20'),
        }(name='MediumFileDayGrowthCount', description='The daily increment of the number of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
        mediumFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of medium files'),
          name?: string(name='Name', description='The name of the metric.', example='mediumFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.8'),
        }(name='MediumFileRatio', description='The proportion of medium files. Medium files are those with a size greater than or equal to 128 MB and less than or equal to 1 GB.'),
        partitionNum?: {
          description?: string(name='Description', description='The description of the metric.', example='number of partitions'),
          name?: string(name='Name', description='The name of the metric.', example='partitionNum'),
          unit?: string(name='Unit', description='The unit of the metric.', example='“”'),
          value?: long(name='Value', description='The value of the metric.', example='331'),
        }(name='PartitionNum', description='The number of partitions.'),
        smallFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of small files'),
          name?: string(name='Name', description='The name of the metric.', example='smallFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='"“'),
          value?: long(name='Value', description='The value of the metric.', example='18'),
        }(name='SmallFileCount', description='The number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
        smallFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of small files'),
          name?: string(name='Name', description='The name of the metric.', example='smallFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='SmallFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
        smallFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of small files'),
          name?: string(name='Name', description='The name of the metric.', example='smallFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: long(name='Value', description='The value of the metric.', example='18'),
        }(name='SmallFileDayGrowthCount', description='The daily increment of the number of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
        smallFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of small files'),
          name?: string(name='Name', description='The name of the metric.', example='smallFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.04'),
        }(name='SmallFileRatio', description='The proportion of small files. Small files are those with a size greater than or equal to 10 MB and less than 128 MB.'),
        tinyFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of tiny files'),
          name?: string(name='Name', description='The name of the metric.', example='tinyFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: long(name='Value', description='The value of the metric.', example='451'),
        }(name='TinyFileCount', description='The number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
        tinyFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of tiny files'),
          name?: string(name='Name', description='The name of the metric.', example='tinyFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.04'),
        }(name='TinyFileCountDayGrowthRatio', description='The day-to-day growth rate of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
        tinyFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of tiny files'),
          name?: string(name='Name', description='The name of the metric.', example='tinyFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: long(name='Value', description='The value of the metric.', example='482'),
        }(name='TinyFileDayGrowthCount', description='The daily increment of the number of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
        tinyFileRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of tiny files'),
          name?: string(name='Name', description='The name of the metric.', example='tinyFileRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.96'),
        }(name='TinyFileRatio', description='The proportion of very small files. Very small files are those with a size greater than 0 MB and less than 10 MB.'),
        totalDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of total data'),
          name?: string(name='Name', description='The name of the metric.', example='totalDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='33800296'),
        }(name='TotalDataDayGrowthSize', description='The daily increment of the total amount of data.'),
        totalDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Total data size in megabytes (MB)'),
          name?: string(name='Name', description='The name of the metric.', example='totalDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='33800296'),
        }(name='TotalDataSize', description='The total amount of data.'),
        totalDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total data size'),
          name?: string(name='Name', description='The name of the metric.', example='totalDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='TotalDataSizeDayGrowthRatio', description='The day-to-day growth rate of the total amount of data.'),
        totalFileCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Number of total files'),
          name?: string(name='Name', description='The name of the metric.', example='totalFileCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: long(name='Value', description='The value of the metric.', example='123'),
        }(name='TotalFileCount', description='The total number of files.'),
        totalFileCountDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of total files'),
          name?: string(name='Name', description='The name of the metric.', example='totalFileCountDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='TotalFileCountDayGrowthRatio', description='The day-to-day growth rate of the total number of files.'),
        totalFileDayGrowthCount?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth count of total files'),
          name?: string(name='Name', description='The name of the metric.', example='totalFileDayGrowthCount'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: long(name='Value', description='The value of the metric.', example='100'),
        }(name='TotalFileDayGrowthCount', description='The daily increment of the total number of files.'),
        warmDataDayGrowthSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth size of warm data'),
          name?: string(name='Name', description='The name of the metric.', example='warmDataDayGrowthSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='149841'),
        }(name='WarmDataDayGrowthSize', description='The daily increment of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
        warmDataRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Ratio of warm data'),
          name?: string(name='Name', description='The name of the metric.', example='warmDataRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='""'),
          value?: float(name='Value', description='The value of the metric.', example='0.1'),
        }(name='WarmDataRatio', description='The proportion of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
        warmDataSize?: {
          description?: string(name='Description', description='The description of the metric.', example='Size of the warm data size'),
          name?: string(name='Name', description='The name of the metric.', example='warmDataSize'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB'),
          value?: long(name='Value', description='The value of the metric.', example='14981'),
        }(name='WarmDataSize', description='The amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
        warmDataSizeDayGrowthRatio?: {
          description?: string(name='Description', description='The description of the metric.', example='Day growth ratio of warm data size'),
          name?: string(name='Name', description='The name of the metric.', example='warmDataSizeDayGrowthRatio'),
          unit?: string(name='Unit', description='The unit of the metric.', example='”“'),
          value?: float(name='Value', description='The value of the metric.', example='0.01'),
        }(name='WarmDataSizeDayGrowthRatio', description='The day-to-day growth rate of the amount of warm data. Warm data refers to data that is not accessed for more than 7 days but is accessed in previous 30 days.'),
      }(name='Metrics', description='The metric information.'),
      owner?: string(name='Owner', description='The owner.', example='DW'),
      tableName?: string(name='TableName', description='The table name. The table name must follow the naming rule in Hive. A name in the {Database name.Table name} format uniquely identifies a table.', example='dw.dwd_creta_service_order_long_renew_long_da'),
    }
  ](name='Data', description='The analysis results of Hive tables.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries that are returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorHiveTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorHiveTablesResponseBody(name='body'),
}

/**
  * list Doctor Hive Tables
  *
 */
async function listDoctorHiveTables(request: ListDoctorHiveTablesRequest): ListDoctorHiveTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorHiveTables', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorJobsRequest {
  appIds?: [ string ](name='AppIds', description='The IDs of the jobs that are submitted to YARN.', example='null', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  endRange?: {
    endTime?: long(name='EndTime', description='The end of the time range during which jobs ended. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1666865137099'),
    startTime?: long(name='StartTime', description='The beginning of the time range during which jobs ended. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1679135111960'),
  }(name='EndRange', description='The range of end time. You can filter jobs whose end time falls within the specified time range.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The field that you use to sort the query results. Valid values:

*   vcoreSeconds: the aggregated number of vCPUs that are allocated to the job multiplied by the number of seconds the job has been running
*   memSeconds: the aggregated amount of memory that is allocated to the job multiplied by the number of seconds the job has been running', example='vcoreSeconds', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: the ascending order
*   DESC: the descending order', example='ASC', position='Query'),
  queues?: [ string ](name='Queues', description='The YARN queues to which the jobs are submitted.', example='null', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startRange?: {
    endTime?: long(name='EndTime', description='The end of the time range during which jobs were submitted. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1683340662020'),
    startTime?: long(name='StartTime', description='The beginning of the time range during which jobs were submitted. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1683340662016'),
  }(name='StartRange', description='The range of start time. You can filter jobs whose start time falls within the specified time range.', position='Query'),
  types?: [ string ](name='Types', description='The YARN engines to which the jobs are submitted.', example='null', position='Query'),
  users?: [ string ](name='Users', description='The users who submit the jobs.', example='null', position='Query'),
}

model ListDoctorJobsResponseBody = {
  data?: [ 
    {
      appId?: string(name='AppId', description='The ID of the job that was submitted to YARN.', example='application_1607584549220_*****'),
      appName?: string(name='AppName', description='The name of the job.', example='tpcds'),
      elapsedTime?: long(name='ElapsedTime', description='The total running time of the job. Unit: milliseconds.', example='242'),
      finalStatus?: string(name='FinalStatus', description='The final state of the job. Valid values:

*   SUCCEEDED
*   FAILED
*   KILLED
*   ENDED
*   UNDEFINED', example='KILLED'),
      finishTime?: long(name='FinishTime', description='The end time of the job. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1683690929000'),
      launchTime?: long(name='LaunchTime', description='The time when the job was started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1672148400000'),
      metrics?: {
        memSeconds?: {
          description?: string(name='Description', description='The description of the metric.', example='Total memory usage over time in seconds'),
          name?: string(name='Name', description='The name of the metric.', example='memSeconds'),
          unit?: string(name='Unit', description='The unit of the metric.', example='MB * Sec'),
          value?: long(name='Value', description='The value of the metric.', example='12312312'),
        }(name='MemSeconds', description='The amount of memory consumed.'),
        vcoreSeconds?: {
          description?: string(name='Description', description='The description of the metric.', example='Total vcore usage over time in seconds'),
          name?: string(name='Name', description='The name of the metric.', example='vcoreSeconds'),
          unit?: string(name='Unit', description='The unit of the metric.', example='VCores * Sec'),
          value?: long(name='Value', description='The value of the metric.', example='11123'),
        }(name='VcoreSeconds', description='The CPU usage.'),
      }(name='Metrics', description='The data about the metrics.'),
      queue?: string(name='Queue', description='The YARN queue to which the job was submitted.', example='DW'),
      startTime?: long(name='StartTime', description='The time when the job was submitted. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1675180800000'),
      state?: string(name='State', description='The running state of the job. Valid values:

*   FINISHED
*   FAILED
*   KILLED', example='FINISHED'),
      type?: string(name='Type', description='The type of the compute engine.', example='SPARK'),
      user?: string(name='User', description='The username that was used to submit the job.', example='DW'),
    }
  ](name='Data', description='The information about the jobs.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorJobsResponseBody(name='body'),
}

/**
  * list realtime jobs by yarn
  *
 */
async function listDoctorJobs(request: ListDoctorJobsRequest): ListDoctorJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorJobsStatsRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  endRange?: {
    endTime?: long(name='EndTime', description='The end of the time range during which jobs ended. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1680019200000'),
    startTime?: long(name='StartTime', description='The beginning of the time range during which jobs ended. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1675180800000'),
  }(name='EndRange', description='The range of end time. You can filter jobs whose end time falls within the specified time range.', position='Query'),
  groupBy?: [ string ](name='GroupBy', description='The fields that are used for grouping data.

Currently, only the first value is used for grouping data. Combinations of multiple values will be supported in the future.', example='null', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  orderBy?: string(name='OrderBy', description='The field that you use to sort the query results. Valid values:

*   vcoreSeconds: the aggregated number of vCPUs that are allocated to the job multiplied by the number of seconds the job has been running
*   memSeconds: the aggregated amount of memory that is allocated to the job multiplied by the number of seconds the job has been running', example='vcoreSeconds', position='Query'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: in ascending order
*   DESC: in descending order', example='ASC', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startRange?: {
    endTime?: long(name='EndTime', description='The end of the time range during which jobs were submitted. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1666406820000'),
    startTime?: long(name='StartTime', description='The beginning of the time range during which jobs were submitted. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Unit: milliseconds.', example='1679036826987'),
  }(name='StartRange', description='The range of start time. You can filter jobs whose start time falls within the specified time range.', position='Query'),
}

model ListDoctorJobsStatsResponseBody = {
  data?: [ 
    {
      appsCount?: {
        description?: string(name='Description', description='The description of the metric.', example='Total apps count'),
        name?: string(name='Name', description='The name of the metric.', example='appsCount'),
        unit?: string(name='Unit', description='The unit of the metric.', example='""'),
        value?: long(name='Value', description='The value of the metric.', example='123'),
      }(name='AppsCount', description='The total number of jobs.'),
      memSeconds?: {
        description?: string(name='Description', description='The description of the metric.', example='Total memory usage over time in seconds'),
        name?: string(name='Name', description='The name of the metric.', example='memSeconds'),
        unit?: string(name='Unit', description='The unit of the metric.', example='MB * Sec'),
        value?: long(name='Value', description='The value of the metric.', example='12312312'),
      }(name='MemSeconds', description='The aggregated amount of memory that is allocated to the job multiplied by the number of seconds the job has been running.'),
      queue?: string(name='Queue', description='The YARN queue to which the job was submitted.', example='DW'),
      type?: string(name='Type', description='The type of the compute engine.', example='SPARK'),
      user?: string(name='User', description='The username that is used to submit the job.', example='DW'),
      vcoreSeconds?: {
        description?: string(name='Description', description='The description of the metric.', example='Total vcore usage over time in seconds'),
        name?: string(name='Name', description='The name of the metric.', example='vcoreSeconds'),
        unit?: string(name='Unit', description='The unit of the metric.', example='VCores * Sec'),
        value?: long(name='Value', description='The value of the metric.', example='11123'),
      }(name='VcoreSeconds', description='The aggregated number of vCPUs that are allocated to the job multiplied by the number of seconds the job has been running.'),
    }
  ](name='Data', description='The summary of job information.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorJobsStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorJobsStatsResponseBody(name='body'),
}

/**
  * list stats groupBy jobs by yarn
  *
 */
async function listDoctorJobsStats(request: ListDoctorJobsStatsRequest): ListDoctorJobsStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorJobsStats', 'POST', '/', 'json', false, 'json', request);
}

model ListDoctorReportsRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListDoctorReportsResponseBody = {
  data?: [ 
    {
      componentTypes?: [ string ](name='ComponentTypes', description='The component types.

Valid values:

*   compute

    <!-- -->

    <!-- -->

    <!-- -->

*   hive

    <!-- -->

    <!-- -->

    <!-- -->

*   hdfs

    <!-- -->

    <!-- -->

    <!-- -->

*   yarn

    <!-- -->

    <!-- -->

    <!-- -->

*   oss

    <!-- -->

    <!-- -->

    <!-- -->

*   hbase

    <!-- -->

    <!-- -->

    <!-- -->', example='null'),
      dateTime?: string(name='DateTime', description='The date on which the report was generated.', example='2023-06-29'),
      summaryReport?: {
        score?: int32(name='Score', description='The score.', example='88'),
        suggestion?: string(name='Suggestion', description='The optimization suggestion.', example='block'),
        summary?: string(name='Summary', description='The summary of the report.', example='eastbuy-mse-plugin-auth'),
      }(name='SummaryReport', description='The summary of the report.'),
    }
  ](name='Data', description='The reports.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListDoctorReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoctorReportsResponseBody(name='body'),
}

/**
  * list all reports analysis by emr doctor
  *
 */
async function listDoctorReports(request: ListDoctorReportsRequest): ListDoctorReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoctorReports', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceTypesRequest {
  clusterId?: string(name='ClusterId', description='集群ID，仅升配场景使用。', example='c-b933c5aac8fe****', position='Query'),
  clusterType: string(name='ClusterType', description='创建的EMR集群类型。取值范围：
- DATALAKE：新版数据湖。
- OLAP：数据分析。
- DATAFLOW：实时数据流。
- DATASERVING：数据服务。
- CUSTOM：自定义集群。
- HADOOP：旧版数据湖（不推荐使用，建议使用新版数据湖）。', example='DATALAKE', position='Query'),
  deployMode?: string(name='DeployMode', description='集群中的应用部署模式。取值范围：
- NORMAL：非高可用部署。集群1个MASTER节点。
- HA：高可用部署。高可用部署要求至少3个MASTER节点。

默认值：NORMAL。', example='HA', position='Query'),
  instanceType?: string(name='InstanceType', description='机型', example='ecs.g6.xlarge', position='Query'),
  isModification?: boolean(name='IsModification', description='是否变配。', example='false', position='Query'),
  nodeGroupId?: string(name='NodeGroupId', description='节点组ID。', example='G-F06C4B47966A****', position='Query'),
  nodeGroupType: string(name='NodeGroupType', description='节点组类型。取值范围：
- MASTER：管理类型节点组。
- CORE：存储类型节点组。
- TASK：计算类型节点组。', example='CORE', position='Query'),
  paymentType: string(name='PaymentType', description='集群的付费类型。取值范围：
- PayAsYouGo：后付费。
- Subscription：预付费。

默认值：PayAsYouGo。', example='PayAsYouGo', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
  releaseVersion?: string(name='ReleaseVersion', description='EMR发行版。', example='EMR-5.3.0', position='Query'),
  zoneId: string(name='ZoneId', description='可用区ID。', example='cn-beijing-h', position='Query'),
}

model ListInstanceTypesResponseBody = {
  instanceTypes?: [
    InstanceType
  ](name='InstanceTypes', description='The instance types.'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。', example='20'),
  nextToken?: string(name='NextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListInstanceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceTypesResponseBody(name='body'),
}

async function listInstanceTypes(request: ListInstanceTypesRequest): ListInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListNodeGroupsRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of maximum number of records to obtain at a time. Valid values: 1 to 100.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='Marks the current position where reading starts. If you set this value to null, you can start from the beginning.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  nodeGroupIds?: [ string ](name='NodeGroupIds', description='The IDs of node groups. Valid values of the number of array elements N: 1 to 100.', example='c-b933c5aac8fe****', position='Query'),
  nodeGroupNames?: [ string ](name='NodeGroupNames', description='The list of node group names. Valid values of the number of array elements N: 1 to 100.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  nodeGroupStates?: [ string ](name='NodeGroupStates', description='The status of the node group. Valid values of the number of array elements N: 1 to 100.', example='["CORE"]', position='Query'),
  nodeGroupTypes?: [ string ](name='NodeGroupTypes', description='The list of node group types. Valid values of the number of array elements N: 1 to 100.', example='20', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
}

model ListNodeGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='Returns the location of the data that was read. Empty indicates that the data has been read.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  nodeGroups?: [
    NodeGroup
  ](name='NodeGroups', description='The array of node groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListNodeGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeGroupsResponseBody(name='body'),
}

async function listNodeGroups(request: ListNodeGroupsRequest): ListNodeGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListNodesRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c-b933c5aac8fe****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of maximum number of records to obtain at a time. Valid values: 1 to 100.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='Marks the current position where reading starts. If you set this value to null, you can start from the beginning.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  nodeGroupIds?: [ string ](name='NodeGroupIds', description='The IDs of node groups.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  nodeIds?: [ string ](name='NodeIds', description='An array that consists of information about the ID of the node.', example='c-b933c5aac8fe****', position='Query'),
  nodeNames?: [ string ](name='NodeNames', description='The names of the nodes.', example='20', position='Query'),
  nodeStates?: [ string ](name='NodeStates', description='The status of the node.', example='["CREATED"]', position='Query'),
  privateIps?: [ string ](name='PrivateIps', description='The private IP address.', example='["172.12.0.91"]', position='Query'),
  publicIps?: [ string ](name='PublicIps', description='The public IP address.', example='["120.13.14.38"]', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
  tags?: [
    Tag
  ](name='Tags', description='The list of tags to be bound.', position='Query'),
}

model ListNodesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='The position at which the next read starts. If null is returned, the data has been read.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  nodes?: [
    Node
  ](name='Nodes', description='Details about nodes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of records in this request.', example='200'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'POST', '/', 'json', false, 'json', request);
}

model ListReleaseVersionsRequest {
  clusterType: string(name='ClusterType', description='The type of the cluster.', example='DATALAKE', position='Query'),
  iaasType?: string(name='IaasType', description='The type of the IaaS resource.', example='ECS', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListReleaseVersionsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='Returns the location of the data that was read.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  releaseVersions?: [ 
    {
      iaasType?: string(name='IaasType', description='The IaaS type.', example='ECS'),
      releaseVersion?: string(name='ReleaseVersion', description='The EMR version.', example='EMR-5.3.0'),
      series?: string(name='Series', description='The version series.', example='EMR-6.X'),
    }
  ](name='ReleaseVersions', description='The major EMR versions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListReleaseVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReleaseVersionsResponseBody(name='body'),
}

/**
  * 查询主版本。
  *
 */
async function listReleaseVersions(request: ListReleaseVersionsRequest): ListReleaseVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListReleaseVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListScriptsRequest {
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  maxResults?: int32(name='MaxResults', description='一次获取的最大记录数。取值范围：1~100。', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始。', example='dd6b1b2a-5837-5237-abe4-ff0c89568980', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
  scriptType: string(name='ScriptType', description='集群脚本类型。', example='BOOTSTRAP', position='Query'),
}

model ListScriptsResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。', example='10'),
  nextToken?: string(name='NextToken', description='返回读取到的数据位置，空代表数据已经读取完毕。', example='dd6b1b2a-5837-5237-abe4-ff0c89568982'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  scripts?: [ 
    {
      action?: string(name='Action', description='The name of the API operation.', example='ListScripts'),
      endTime?: long(name='EndTime', description='The time when the system finishes the running of the script. This parameter is returned only if the ScriptType parameter is set to NORMAL.', example='1639715635819'),
      executionFailStrategy?: string(name='ExecutionFailStrategy', description='The policy that is used to handle execution failures of the script. Valid values:

*   FAILED_CONTINUE
*   FAILED_BLOCK', example='FAILED_CONTINUE'),
      executionMoment?: string(name='ExecutionMoment', description='The time based on which the system runs the script. Valid values:

*   BEFORE_INSTALL
*   AFTER_STARTED', example='BEFORE_INSTALL'),
      executionState?: string(name='ExecutionState', description='The status of the script. This parameter is returned only if the `ScriptType` parameter is set to `NORMAL`. Valid values:

*   SCRIPT_COMPLETED
*   SCRIPT_SUBMISSION_FAILED
*   SCRIPT_RUNNING', example='SCRIPT_COMPLETED'),
      lastUpdateTime?: long(name='LastUpdateTime', description='The time when the script was last modified.', example='1639714634819'),
      nodeSelector?: NodeSelector(name='NodeSelector', description='The node selector.'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      scriptArgs?: string(name='ScriptArgs', description='The runtime parameters of the script.', example='--mode=client -h -p'),
      scriptId?: string(name='ScriptId', description='The script ID.', example='cs-bf25219d103043a0820613e32781****'),
      scriptName?: string(name='ScriptName', description='The name of the script.', example='check_env'),
      scriptPath?: string(name='ScriptPath', description='The path in which the script is stored.', example='oss://bucket1/check_evn.sh'),
      startTime?: long(name='StartTime', description='The time when the system starts to run the script. This parameter is returned only if the ScriptType parameter is set to NORMAL.', example='1639714634000'),
    }
  ](name='Scripts', description='The scripts.'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。', example='200'),
}

model ListScriptsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScriptsResponseBody(name='body'),
}

async function listScripts(request: ListScriptsRequest): ListScriptsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScripts', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of maximum number of records to obtain at a time.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results. If NextToken is empty, the query starts from the beginning.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
  resourceIds: [ string ](name='ResourceIds', description='The list of resource IDs. Number of array elements N Valid values: 1 to 1', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to cluster.', example='cluster', position='Query'),
  tags?: [
    Tag
  ](name='Tags', description='The array of tags. The number of array elements N. Valid values: 1 to 20.', example='20', position='Query'),
}

model ListTagResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='Returns the location of the data that was read. Empty indicates that the data has been read.', example='DD6B1B2A-5837-5237-ABE4-FF0C89568980'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='372D4E9B-2509-5EFA-846B-B34FBF143F56'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='Indicates the ID of a resource.', example='c-b933c5aac8fe****'),
      resourceType?: string(name='ResourceType', description='The resource type.', example='cluster'),
      tagKey?: string(name='TagKey', description='The tag key of the ENI.', example='Department'),
      tagValue?: string(name='TagValue', description='The tag value of the ENI.', example='Dev'),
    }
  ](name='TagResources', description='The details about the tag. Contains the resource ID, resource type, and tag key-value information.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model PutAutoScalingPolicyRequest {
  clusterId: string(name='ClusterId', description='集群ID。', example='c-b933c5aac8fe****', position='Query'),
  constraints?: ScalingConstraints(name='Constraints', description='The maximum and minimum numbers of nodes in a node group.', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='节点组ID。节点组 Id-针对 ACK 集群，此字段为空。', example='ng-869471354ecd****', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
  scalingRules?: [
    ScalingRule
  ](name='ScalingRules', description='The auto scaling rules. Number of elements in the array: 0 to 100.', position='Query'),
}

model PutAutoScalingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model PutAutoScalingPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutAutoScalingPolicyResponseBody(name='body'),
}

/**
  * You can call this operation to configure auto scaling policies.
  *
 */
async function putAutoScalingPolicy(request: PutAutoScalingPolicyRequest): PutAutoScalingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutAutoScalingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAutoScalingPolicyRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The ID of the node group.', example='ng-869471354ecd****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model RemoveAutoScalingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model RemoveAutoScalingPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAutoScalingPolicyResponseBody(name='body'),
}

async function removeAutoScalingPolicy(request: RemoveAutoScalingPolicyRequest): RemoveAutoScalingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAutoScalingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model RunApiTemplateRequest {
  apiName: string(name='ApiName', description='接口名。', example='CreateCluster', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等客户端TOKEN。', example='A7D960FA-6DBA-5E07-8746-A63E3E4D****', position='Query'),
  regionId: string(name='RegionId', description='地域ID。', example='cn-hangzhou', position='Query'),
  templateId: string(name='TemplateId', description='集群模板id。', example='AT-****', position='Query'),
}

model RunApiTemplateResponseBody = {
  data?: string(name='Data', example='{\\"clusterId\\":\\"c-b7be171f1928****\\",\\"operationId\\":\\"op-61126efe629d****\\"}'),
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model RunApiTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunApiTemplateResponseBody(name='body'),
}

async function runApiTemplate(request: RunApiTemplateRequest): RunApiTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunApiTemplate', 'POST', '/', 'json', false, 'json', request);
}

model RunApplicationActionRequest {
  actionName: string(name='ActionName', description='The name of the action. Valid values:

*   start
*   stop
*   config
*   restart
*   refresh_queues
*   refresh_labels', example='start', position='Query'),
  batchSize?: int32(name='BatchSize', description='The number of applications in each batch.', example='1', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='C-C95F0A39D8FF****', position='Query'),
  componentInstanceSelector: ComponentInstanceSelector(name='ComponentInstanceSelector', description='The operation object.', position='Query'),
  description?: string(name='Description', description='The description of the execution.', example='运行描述', position='Query'),
  executeStrategy?: string(name='ExecuteStrategy', description='The execution policy. Valid values:

*   FAILED_BLOCK: The system stops the execution if the execution fails.
*   FAILED_CONTINUE: The system continues the execution if the execution fails.', example='FAILED_CONTINUE', position='Query'),
  interval?: long(name='Interval', description='The interval for rolling execution. Unit: seconds.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  rollingExecute?: boolean(name='RollingExecute', description='Specifies whether to enable rolling execution.', example='true', position='Query'),
}

model RunApplicationActionResponseBody = {
  abnInstances?: [ 
    {
      nodeId?: string(name='NodeId', description='The ID of the abnormal node.', example='i-bp1cudc25w2bfwl5****'),
      nodeName?: string(name='NodeName', description='The name of the abnormal node.', example='core1-1'),
    }
  ](name='AbnInstances', description='The abnormal nodes.'),
  operationId?: string(name='OperationId', description='The operation ID.', example='op-13c37a77c505****'),
  requestId?: string(name='RequestId', description='The request ID.', example='9E3A7161-EB7B-172B-8D18-FFB06BA3****'),
}

model RunApplicationActionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunApplicationActionResponseBody(name='body'),
}

async function runApplicationAction(request: RunApplicationActionRequest): RunApplicationActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunApplicationAction', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
  resourceIds: [ string ](name='ResourceIds', description='The list of resource IDs. Valid values of N: 1 to 1.', example='cluster', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource to which the tag belongs. Valid values:

*   cluster: cluster', example='cluster', position='Query'),
  tags: [
    Tag
  ](name='Tags', description='The tags.', example='[null]', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A964BDB2-0FDA-1037-AF3F-2633D5C3F20F'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags. This parameter is valid only when the **Tagkeys** is empty. Valid values:

*   true: All the data is deleted.
*   false: Not all of them are deleted.

Default value: false', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to create the instance.', example='cn-hangzhou', position='Query'),
  resourceIds: [ string ](name='ResourceIds', description='The list of resource IDs.', example='cluster', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to cluster.', example='cluster', position='Query'),
  tagKeys?: [ string ](name='TagKeys', description='The key of the label. Valid values of N: 1 to 20.', example='["c-b933c5aac8fe****"]', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='17A6A3D5-4B13-1DAD-9A23-66EA5FC83B50'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApiTemplateRequest {
  apiName: string(name='ApiName', description='The name of the API. You can create only a cluster API operation template. Set the value to CreateCluster.', example='CreateCluster', position='Query'),
  content: string(name='Content', description='The content of the cluster API operation template. Set the value to JSON strings of the request parameters of the [CreateCluster](~~454393~~) API for creating a cluster.', example='CreateCluster', position='Query'),
  regionId: string(name='RegionId', description='区域ID。', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzabjyop****', position='Query'),
  templateId: string(name='TemplateId', description='集群模板id。', example='AT-****', position='Query'),
  templateName: string(name='TemplateName', description='集群模板名字。', example='DATALAKE模板', position='Query'),
}

model UpdateApiTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: boolean(name='Success', example='true', deprecated='true'),
}

model UpdateApiTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApiTemplateResponseBody(name='body'),
}

/**
  * 修改集群模板
  *
 */
async function updateApiTemplate(request: UpdateApiTemplateRequest): UpdateApiTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApiTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationConfigsRequest {
  applicationConfigs: [
    UpdateApplicationConfig
  ](name='ApplicationConfigs', description='应用配置列表。', position='Body'),
  applicationName: string(name='ApplicationName', description='The application name.', example='HDFS', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-e6a9d46e9267****', position='Query'),
  configAction?: string(name='ConfigAction', description='The operation performed on configuration items. Valid values:

*   ADD
*   UPDATE
*   DELETE', example='ADD', position='Query'),
  configScope?: string(name='ConfigScope', description='The operation scope. Valid values:

*   CLUSTER
*   NODE_GROUP', example='CLUSTER', position='Query'),
  description?: string(name='Description', description='The description.', example='更新YARN内存配置。', position='Query'),
  nodeGroupId?: string(name='NodeGroupId', description='The node group ID.', example='ng-869471354ecd****', position='Query'),
  nodeId?: string(name='NodeId', description='The node ID.', example='i-bp1cudc25w2bfwl5****', position='Query'),
  refreshConfig?: boolean(name='RefreshConfig', description='Specifies whether to refresh the configurations. Default value: True.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model UpdateApplicationConfigsResponseBody = {
  operationId?: string(name='OperationId', description='The operation ID.', example='op-13c37a77c505****'),
  requestId?: string(name='RequestId', description='The request ID.', example='9E3A7161-EB7B-172B-8D18-FFB06BA3****'),
}

model UpdateApplicationConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApplicationConfigsResponseBody(name='body'),
}

async function updateApplicationConfigs(request: UpdateApplicationConfigsRequest): UpdateApplicationConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationConfigs', 'POST', '/', 'json', true, 'form', request);
}

model UpdateScriptRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c-b933c5aac8fe****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  script: Script(name='Script', description='The script.', shrink='json', position='Query'),
  scriptId: string(name='ScriptId', description='The script ID.', example='cs-da7476a7679a4d4c9cede62ebe09****', position='Query'),
  scriptType: string(name='ScriptType', description='The type of the script. Valid values:

*   BOOTSTRAP: indicates a bootstrap action of the Elastic Compute Service (ECS) instance.
*   NORMAL: indicates a common script.', example='BOOTSTRAP', position='Query'),
}

model UpdateScriptResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model UpdateScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScriptResponseBody(name='body'),
}

async function updateScript(request: UpdateScriptRequest): UpdateScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScript', 'POST', '/', 'json', false, 'json', request);
}

