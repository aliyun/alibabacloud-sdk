/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'emr.aliyuncs.com',
    cn-hangzhou = 'emr.aliyuncs.com',
    cn-shanghai = 'emr.aliyuncs.com',
    cn-shenzhen = 'emr.aliyuncs.com',
    ap-southeast-1 = 'emr.aliyuncs.com',
    us-west-1 = 'emr.aliyuncs.com',
    cn-hangzhou-finance = 'emr.aliyuncs.com',
    cn-shenzhen-finance-1 = 'emr.aliyuncs.com',
    cn-shanghai-finance-1 = 'emr.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('emr', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AckNode {
  nodeId?: string(name='NodeId'),
  nodeSelector?: {
    labels?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Labels'),
    taints?: [ 
      {
        effect?: string(name='Effect'),
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Taints'),
  }(name='NodeSelector'),
}

model AckNodePool {
  nodePoolId?: string(name='NodePoolId'),
  nodeSelector?: {
    labels?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Labels'),
    taints?: [ 
      {
        effect?: string(name='Effect'),
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Taints'),
  }(name='NodeSelector'),
}

model AckNodeSelector {
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
  taints?: [ 
    {
      effect?: string(name='Effect'),
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Taints'),
}

model Application {
  applicationName?: string(name='ApplicationName'),
}

model ApplicationConfig {
  applicationName?: string(name='ApplicationName'),
  configFileName?: string(name='ConfigFileName'),
  configItemKey?: string(name='ConfigItemKey'),
  configItemValue?: string(name='ConfigItemValue'),
  configScope?: string(name='ConfigScope'),
  nodeGroupId?: string(name='NodeGroupId'),
  nodeGroupName?: string(name='NodeGroupName'),
}

model ApplicationConfigParam {
  configAction?: string(name='ConfigAction'),
  configFileName?: string(name='ConfigFileName'),
  configItemDescription?: string(name='ConfigItemDescription'),
  configItemKey?: string(name='ConfigItemKey'),
  configItemValue?: string(name='ConfigItemValue'),
  configScope?: string(name='ConfigScope'),
  effectiveActions?: string(name='EffectiveActions'),
  effectiveType?: string(name='EffectiveType'),
  nodeGroupId?: string(name='NodeGroupId'),
  nodeId?: string(name='NodeId'),
}

model AutoRenewInstance {
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit'),
  instanceId?: string(name='InstanceId'),
}

model AutoRenewInstanceParam {
  autoRenew?: string(name='AutoRenew'),
  autoRenewDuration?: string(name='AutoRenewDuration'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit'),
  instanceId?: string(name='InstanceId'),
}

model ByLoadScalingRule {
  comparisonOperator?: string(name='ComparisonOperator'),
  coolDownInterval?: int32(name='CoolDownInterval'),
  evaluationCount?: int32(name='EvaluationCount'),
  metricName?: string(name='MetricName'),
  statistics?: string(name='Statistics'),
  threshold?: double(name='Threshold'),
  timeWindow?: int32(name='TimeWindow'),
}

model ByLoadScalingRuleSpec {
  comparisonOperator?: string(name='ComparisonOperator'),
  evaluationCount?: int32(name='EvaluationCount'),
  metricName?: string(name='MetricName'),
  statistics?: string(name='Statistics'),
  threshold?: double(name='Threshold'),
  timeWindow?: int32(name='TimeWindow'),
}

model ByTimeScalingRule {
  endTime?: long(name='EndTime'),
  launchExpirationTime?: int32(name='LaunchExpirationTime'),
  launchTime?: long(name='LaunchTime'),
  recurrenceType?: string(name='RecurrenceType'),
  recurrenceValue?: string(name='RecurrenceValue'),
}

model ByTimeScalingRuleSpec {
  endTime?: long(name='EndTime'),
  launchTime?: long(name='LaunchTime'),
  recurrenceType?: string(name='RecurrenceType'),
  recurrenceValue?: string(name='RecurrenceValue'),
}

model ClickhouseConf {
  initialReplica?: int32(name='InitialReplica'),
  initialShard?: int32(name='InitialShard'),
  newNodeCount?: int32(name='NewNodeCount'),
  resizeType?: string(name='ResizeType'),
}

model Cluster {
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  clusterState?: string(name='ClusterState'),
  clusterType?: string(name='ClusterType'),
  createTime?: long(name='CreateTime'),
  deployMode?: string(name='DeployMode'),
  emrDefaultRole?: string(name='EmrDefaultRole'),
  endTime?: long(name='EndTime'),
  expireTime?: long(name='ExpireTime'),
  nodeAttributes?: NodeAttributes(name='NodeAttributes'),
  paymentType?: string(name='PaymentType'),
  readyTime?: long(name='ReadyTime'),
  regionId?: string(name='RegionId'),
  releaseVersion?: string(name='ReleaseVersion'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityMode?: string(name='SecurityMode'),
  stateChangeReason?: ClusterStateChangeReason(name='StateChangeReason'),
  subscriptionConfig?: SubscriptionConfig(name='SubscriptionConfig'),
  tags?: [
    Tag
  ](name='Tags'),
}

model ClusterScript {
  executionFailStrategy?: string(name='ExecutionFailStrategy'),
  executionMoment?: string(name='ExecutionMoment'),
  nodeSelect?: NodeSelector(name='NodeSelect'),
  priority?: int32(name='Priority'),
  scriptArgs?: string(name='ScriptArgs'),
  scriptName?: string(name='ScriptName'),
  scriptPath?: string(name='ScriptPath'),
}

model ClusterStateChangeReason {
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model ClusterSummary {
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  clusterState?: string(name='ClusterState'),
  clusterType?: string(name='ClusterType'),
  createTime?: long(name='CreateTime'),
  emrDefaultRole?: string(name='EmrDefaultRole'),
  endTime?: long(name='EndTime'),
  expireTime?: long(name='ExpireTime'),
  paymentType?: string(name='PaymentType'),
  readyTime?: long(name='ReadyTime'),
  releaseVersion?: string(name='ReleaseVersion'),
  resourceGroupId?: string(name='ResourceGroupId'),
  stateChangeReason?: ClusterStateChangeReason(name='StateChangeReason'),
  tags?: [
    Tag
  ](name='Tags'),
}

model ComponentInstanceSelector {
  actionScope?: string(name='ActionScope'),
  applicationNames?: [ string ](name='ApplicationNames'),
  componentInstances?: [ 
    {
      applicationName?: string(name='ApplicationName'),
      componentName?: string(name='ComponentName'),
      nodeId?: string(name='NodeId'),
    }
  ](name='ComponentInstances'),
  components?: [ 
    {
      applicationName?: string(name='ApplicationName'),
      componentName?: string(name='ComponentName'),
    }
  ](name='Components'),
  nodeGroupIds?: [ string ](name='NodeGroupIds'),
  nodeIds?: [ string ](name='NodeIds'),
  runActionScope?: string(name='RunActionScope'),
}

model ComponentLayout {
  applicationName?: string(name='ApplicationName'),
  componentName?: string(name='ComponentName'),
  nodeSelector?: {
    nodeEndIndex?: int32(name='NodeEndIndex'),
    nodeGroupId?: string(name='NodeGroupId'),
    nodeGroupIndex?: int32(name='NodeGroupIndex'),
    nodeGroupName?: string(name='NodeGroupName'),
    nodeGroupTypes?: [ string ](name='NodeGroupTypes'),
    nodeNames?: [ string ](name='NodeNames'),
    nodeSelectType?: string(name='NodeSelectType'),
    nodeStartIndex?: int32(name='NodeStartIndex'),
  }(name='NodeSelector'),
}

model ConvertNodeGroup {
  nodeGroupId?: string(name='NodeGroupId'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  paymentType?: string(name='PaymentType'),
}

model ConvertNodeGroupParam {
  nodeGroupId?: string(name='NodeGroupId'),
  paymentDuration?: long(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  paymentType?: string(name='PaymentType'),
}

model CostOptimizedConfig {
  onDemandBaseCapacity?: int32(name='OnDemandBaseCapacity'),
  onDemandPercentageAboveBaseCapacity?: int32(name='OnDemandPercentageAboveBaseCapacity'),
  spotInstancePools?: int32(name='SpotInstancePools'),
}

model CreateNodeGroupParam {
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit'),
  dataDisks?: [
    DiskInfo
  ](name='DataDisks'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  nodeCount?: int32(name='NodeCount'),
  nodeGroupName?: string(name='NodeGroupName'),
  nodeGroupType?: string(name='NodeGroupType'),
  nodeKeyPairName?: string(name='NodeKeyPairName'),
  nodeRamRole?: string(name='NodeRamRole'),
  nodeRootPassword?: string(name='NodeRootPassword'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  paymentType?: string(name='PaymentType'),
  securityGroupId?: string(name='SecurityGroupId'),
  spotStrategy?: string(name='SpotStrategy'),
  systemDisk?: SystemDiskParam(name='SystemDisk'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  withPublicIp?: boolean(name='WithPublicIp'),
  zoneId?: string(name='ZoneId'),
}

model DataDisk {
  category?: string(name='Category'),
  count?: int32(name='Count'),
  performanceLevel?: string(name='PerformanceLevel'),
  size?: int32(name='Size'),
}

model DecreaseNodeGroupParam {
  nodeGroupId?: string(name='NodeGroupId'),
  releaseInstanceIds?: [ string ](name='ReleaseInstanceIds'),
}

model DeploymentLayout {
  applicationName?: string(name='ApplicationName'),
  componentName?: string(name='ComponentName'),
  nodeSelector?: NodeSelector(name='NodeSelector'),
}

model Disk {
  category?: string(name='Category'),
  count?: int32(name='Count'),
  performanceLevel?: string(name='PerformanceLevel'),
  size?: int32(name='Size'),
}

model DiskInfo {
  category?: string(name='Category'),
  count?: int32(name='Count'),
  performanceLevel?: string(name='PerformanceLevel'),
  size?: int32(name='Size'),
}

model DiskSize {
  category?: string(name='Category'),
  size?: int32(name='Size'),
}

model FailedReason {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  service?: string(name='Service'),
}

model HealthSummary {
  badCount?: long(name='BadCount'),
  goodCount?: long(name='GoodCount'),
  noneCount?: long(name='NoneCount'),
  stoppedCount?: long(name='StoppedCount'),
  totalCount?: long(name='TotalCount'),
  unknownCount?: long(name='UnknownCount'),
  warningCount?: long(name='WarningCount'),
}

model IncreaseNodeGroup {
  description?: string(name='Description'),
  nodeCount?: int32(name='NodeCount'),
  nodeGroupId?: string(name='NodeGroupId'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  vSwitchId?: string(name='VSwitchId'),
}

model IncreaseNodeGroupParam {
  nodeCount?: long(name='NodeCount'),
  nodeGroupId?: string(name='NodeGroupId'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  vSwitchId?: string(name='VSwitchId'),
}

model KeyValue {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model MetaStoreConf {
  dbPassword?: string(name='DbPassword'),
  dbUrl?: string(name='DbUrl'),
  dbUserName?: string(name='DbUserName'),
}

model MetricsTrigger {
  comparisonOperator?: string(name='ComparisonOperator'),
  coolDownInterval?: int32(name='CoolDownInterval'),
  evaluationCount?: int32(name='EvaluationCount'),
  metricName?: string(name='MetricName'),
  statistics?: string(name='Statistics'),
  threshold?: double(name='Threshold'),
  timeWindow?: int32(name='TimeWindow'),
}

model Node {
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit'),
  expireTime?: long(name='ExpireTime'),
  instanceType?: string(name='InstanceType'),
  maintenanceStatus?: string(name='MaintenanceStatus'),
  nodeGroupId?: string(name='NodeGroupId'),
  nodeGroupType?: string(name='NodeGroupType'),
  nodeId?: string(name='NodeId'),
  nodeName?: string(name='NodeName'),
  nodeState?: string(name='NodeState'),
  privateIp?: string(name='PrivateIp'),
  publicIp?: string(name='PublicIp'),
  zoneId?: string(name='ZoneId'),
}

model NodeAttributes {
  keyPairName?: string(name='KeyPairName'),
  ramRole?: string(name='RamRole'),
  securityGroupId?: string(name='SecurityGroupId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model NodeCountConstraint {
  max?: int32(name='Max'),
  min?: int32(name='Min'),
  type?: string(name='Type'),
  values?: [ int32 ](name='Values'),
}

model NodeGroup {
  additionalSecurityGroupIds?: [ string ](name='AdditionalSecurityGroupIds'),
  costOptimizedConfig?: CostOptimizedConfig(name='CostOptimizedConfig'),
  dataDisks?: [
    DataDisk
  ](name='DataDisks'),
  deploymentSetStrategy?: string(name='DeploymentSetStrategy'),
  gracefulShutdown?: boolean(name='GracefulShutdown'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  nodeGroupId?: string(name='NodeGroupId'),
  nodeGroupName?: string(name='NodeGroupName'),
  nodeGroupState?: string(name='NodeGroupState'),
  nodeGroupType?: string(name='NodeGroupType'),
  nodeResizeStrategy?: string(name='NodeResizeStrategy'),
  paymentType?: string(name='PaymentType'),
  runningNodeCount?: int32(name='RunningNodeCount'),
  spotBidPrices?: [
    SpotBidPrice
  ](name='SpotBidPrices'),
  spotInstanceRemedy?: boolean(name='SpotInstanceRemedy'),
  spotStrategy?: string(name='SpotStrategy'),
  stateChangeReason?: NodeGroupStateChangeReason(name='StateChangeReason'),
  systemDisk?: SystemDisk(name='SystemDisk'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  withPublicIp?: boolean(name='WithPublicIp'),
  zoneId?: string(name='ZoneId'),
}

model NodeGroupConfig {
  additionalSecurityGroupIds?: [ string ](name='AdditionalSecurityGroupIds'),
  costOptimizedConfig?: CostOptimizedConfig(name='CostOptimizedConfig'),
  dataDisks?: [
    DataDisk
  ](name='DataDisks'),
  deploymentSetStrategy?: string(name='DeploymentSetStrategy'),
  gracefulShutdown?: boolean(name='GracefulShutdown'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  nodeCount?: int32(name='NodeCount'),
  nodeGroupName?: string(name='NodeGroupName'),
  nodeGroupType?: string(name='NodeGroupType'),
  nodeResizeStrategy?: string(name='NodeResizeStrategy'),
  paymentType?: string(name='PaymentType'),
  spotBidPrices?: [
    SpotBidPrice
  ](name='SpotBidPrices'),
  spotInstanceRemedy?: boolean(name='SpotInstanceRemedy'),
  spotStrategy?: string(name='SpotStrategy'),
  subscriptionConfig?: SubscriptionConfig(name='SubscriptionConfig'),
  systemDisk?: SystemDisk(name='SystemDisk'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  withPublicIp?: boolean(name='WithPublicIp'),
}

model NodeGroupParam {
  autoPayOrder?: boolean(name='AutoPayOrder'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit'),
  dataDisks?: [
    DiskInfo
  ](name='DataDisks'),
  description?: string(name='Description'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  nodeCount?: int32(name='NodeCount'),
  nodeGroupIndex?: int32(name='NodeGroupIndex'),
  nodeGroupName?: string(name='NodeGroupName'),
  nodeGroupType?: string(name='NodeGroupType'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  paymentType?: string(name='PaymentType'),
  systemDisk?: SystemDiskParam(name='SystemDisk'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  zoneId?: string(name='ZoneId'),
}

model NodeGroupStateChangeReason {
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model NodeSelector {
  nodeGroupId?: string(name='NodeGroupId'),
  nodeGroupName?: string(name='NodeGroupName'),
  nodeGroupTypes?: [ string ](name='NodeGroupTypes'),
  nodeNames?: [ string ](name='NodeNames'),
  nodeSelectType?: string(name='NodeSelectType'),
}

model OSUser {
  group?: string(name='Group'),
  password?: string(name='Password'),
  user?: string(name='User'),
}

model OnKubeClusterResource {
  cpu?: string(name='Cpu'),
  memory?: string(name='Memory'),
}

model Operation {
  clusterId?: string(name='ClusterId'),
  createTime?: long(name='CreateTime'),
  description?: string(name='Description'),
  endTime?: long(name='EndTime'),
  operationId?: string(name='OperationId'),
  operationState?: string(name='OperationState'),
  operationType?: string(name='OperationType'),
  startTime?: long(name='StartTime'),
  stateChangeReason?: OperationStateChangeReason(name='StateChangeReason'),
}

model OperationStateChangeReason {
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model Order {
  createTime?: string(name='CreateTime'),
  orderId?: string(name='OrderId'),
}

model Page {
  items?: [ string ](name='Items'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  totalCount?: long(name='TotalCount'),
}

model Pod {
  message?: string(name='Message'),
  podName?: string(name='PodName'),
  podStatus?: string(name='PodStatus'),
  reason?: string(name='Reason'),
}

model PriceInfo {
  currency?: string(name='Currency'),
  discountPrice?: string(name='DiscountPrice'),
  originalPrice?: string(name='OriginalPrice'),
  payType?: string(name='PayType'),
  promotionResults?: [
    PromotionInfo
  ](name='PromotionResults'),
  resourceType?: string(name='ResourceType'),
  spotInstanceTypeOriginalPrice?: string(name='SpotInstanceTypeOriginalPrice'),
  spotInstanceTypePrice?: string(name='SpotInstanceTypePrice'),
  spotOriginalPrice?: string(name='SpotOriginalPrice'),
  spotPrice?: string(name='SpotPrice'),
  taxPrice?: string(name='TaxPrice'),
  tradePrice?: string(name='TradePrice'),
}

model Promotion {
  productCode?: string(name='ProductCode'),
  promotionOptionCode?: string(name='PromotionOptionCode'),
  promotionOptionNo?: string(name='PromotionOptionNo'),
}

model PromotionInfo {
  canPromFee?: string(name='CanPromFee'),
  isSelected?: string(name='IsSelected'),
  promotionDesc?: string(name='PromotionDesc'),
  promotionName?: string(name='PromotionName'),
  promotionOptionCode?: string(name='PromotionOptionCode'),
  promotionOptionNo?: string(name='PromotionOptionNo'),
}

model PromotionParam {
  productCode?: string(name='ProductCode'),
  promotionOptionCode?: string(name='PromotionOptionCode'),
  promotionOptionNo?: string(name='PromotionOptionNo'),
}

model RenewInstance {
  instanceId?: string(name='InstanceId'),
  renewDuration?: int32(name='RenewDuration'),
  renewDurationUnit?: string(name='RenewDurationUnit'),
}

model RenewInstanceParam {
  instanceId?: string(name='InstanceId'),
  renewDuration?: long(name='RenewDuration'),
  renewDurationUnit?: string(name='RenewDurationUnit'),
}

model RequestTag {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model ResizeDiskNodeGroupParam {
  dataDiskCapacity?: long(name='DataDiskCapacity'),
  nodeGroupId?: string(name='NodeGroupId'),
  rollingRestart?: boolean(name='RollingRestart'),
}

model ScalingActivity {
  cause?: string(name='Cause'),
  description?: string(name='Description'),
  endTime?: long(name='EndTime'),
  essScalingRuleId?: string(name='EssScalingRuleId'),
  expectNum?: int32(name='ExpectNum'),
  hostGroupName?: string(name='HostGroupName'),
  id?: string(name='Id'),
  instanceIds?: string(name='InstanceIds'),
  scalingGroupId?: string(name='ScalingGroupId'),
  scalingRuleName?: string(name='ScalingRuleName'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
  totalCapacity?: int32(name='TotalCapacity'),
  transition?: string(name='Transition'),
}

model ScalingConstraints {
  maxCapacity?: int32(name='MaxCapacity'),
  minCapacity?: int32(name='MinCapacity'),
}

model ScalingGroupConfig {
  dataDiskCategory?: string(name='DataDiskCategory'),
  dataDiskCount?: int32(name='DataDiskCount'),
  dataDiskSize?: long(name='DataDiskSize'),
  defaultCoolDownTime?: long(name='DefaultCoolDownTime'),
  instanceTypeList?: [ 
    {
      instanceType?: string(name='InstanceType'),
      spotPriceLimit?: float(name='SpotPriceLimit'),
    }
  ](name='InstanceTypeList'),
  multiAvailablePolicy?: {
    policyParam?: {
      onDemandBaseCapacity?: int32(name='OnDemandBaseCapacity'),
      onDemandPercentageAboveBaseCapacity?: int32(name='OnDemandPercentageAboveBaseCapacity'),
      spotInstancePools?: int32(name='SpotInstancePools'),
      spotInstanceRemedy?: boolean(name='SpotInstanceRemedy'),
    }(name='PolicyParam'),
    policyType?: string(name='PolicyType'),
  }(name='MultiAvailablePolicy'),
  nodeOfflinePolicy?: {
    mode?: string(name='Mode'),
    timeoutMs?: long(name='TimeoutMs'),
  }(name='NodeOfflinePolicy'),
  privatePoolOptions?: {
    id?: string(name='Id'),
    matchCriteria?: string(name='MatchCriteria'),
  }(name='PrivatePoolOptions'),
  scalingMaxSize?: int32(name='ScalingMaxSize'),
  scalingMinSize?: int32(name='ScalingMinSize'),
  spotStrategy?: string(name='SpotStrategy'),
  sysDiskCategory?: string(name='SysDiskCategory'),
  sysDiskSize?: long(name='SysDiskSize'),
  triggerMode?: string(name='TriggerMode'),
}

model ScalingRule {
  activityType?: string(name='ActivityType'),
  adjustmentType?: string(name='AdjustmentType'),
  adjustmentValue?: int32(name='AdjustmentValue'),
  byLoadScalingRule?: MetricsTrigger(name='ByLoadScalingRule'),
  byTimeScalingRule?: TimeTrigger(name='ByTimeScalingRule'),
  coolDownInterval?: int32(name='CoolDownInterval'),
  metricsTrigger?: MetricsTrigger(name='MetricsTrigger'),
  ruleName?: string(name='RuleName'),
  scalingActivityType?: string(name='ScalingActivityType'),
  scalingRuleName?: string(name='ScalingRuleName'),
  scalingRuleType?: string(name='ScalingRuleType'),
  timeTrigger?: TimeTrigger(name='TimeTrigger'),
  triggerType?: string(name='TriggerType'),
}

model ScalingRuleSpec {
  adjustmentValue?: int32(name='AdjustmentValue'),
  byLoadScalingRuleSpec?: {
    comparisonOperator?: string(name='ComparisonOperator'),
    evaluationCount?: int32(name='EvaluationCount'),
    metricName?: string(name='MetricName'),
    statistics?: string(name='Statistics'),
    threshold?: double(name='Threshold'),
    timeWindow?: int32(name='TimeWindow'),
  }(name='ByLoadScalingRuleSpec'),
  byTimeScalingRuleSpec?: {
    endTime?: long(name='EndTime'),
    launchTime?: long(name='LaunchTime'),
    recurrenceType?: string(name='RecurrenceType'),
    recurrenceValue?: string(name='RecurrenceValue'),
  }(name='ByTimeScalingRuleSpec'),
  coolDownInterval?: int32(name='CoolDownInterval'),
  scalingActivityType?: string(name='ScalingActivityType'),
  scalingRuleName?: string(name='ScalingRuleName'),
  scalingRuleType?: string(name='ScalingRuleType'),
}

model ScalingRuleV1 {
  adjustmentType?: string(name='AdjustmentType'),
  adjustmentValue?: int32(name='AdjustmentValue'),
  coolDownTime?: int32(name='CoolDownTime'),
  ruleName?: string(name='RuleName'),
  ruleParam?: {
    comparisonOperator?: string(name='ComparisonOperator'),
    evaluationCount?: int32(name='EvaluationCount'),
    launchExpirationTime?: int32(name='LaunchExpirationTime'),
    launchTime?: string(name='LaunchTime'),
    metricName?: string(name='MetricName'),
    period?: int32(name='Period'),
    recurrenceEndTime?: string(name='RecurrenceEndTime'),
    recurrenceType?: string(name='RecurrenceType'),
    recurrenceValue?: string(name='RecurrenceValue'),
    statistics?: string(name='Statistics'),
    threshold?: int32(name='Threshold'),
  }(name='RuleParam'),
  ruleType?: string(name='RuleType'),
  scalingConfigBizId?: string(name='ScalingConfigBizId'),
}

model Script {
  executionFailStrategy?: string(name='ExecutionFailStrategy'),
  executionMoment?: string(name='ExecutionMoment'),
  nodeSelector?: NodeSelector(name='NodeSelector'),
  priority?: int32(name='Priority'),
  scriptArgs?: string(name='ScriptArgs'),
  scriptName?: string(name='ScriptName'),
  scriptPath?: string(name='ScriptPath'),
}

model SpotBidPrice {
  bidPrice?: double(name='BidPrice'),
  instanceType?: string(name='InstanceType'),
}

model SpotPriceLimit {
  instanceType?: string(name='InstanceType'),
  priceLimit?: double(name='PriceLimit'),
}

model StateChangeReason {
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model SubscriptionConfig {
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
  autoRenewDurationUnit?: string(name='AutoRenewDurationUnit'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
}

model SystemDisk {
  category?: string(name='Category'),
  count?: int32(name='Count'),
  performanceLevel?: string(name='PerformanceLevel'),
  size?: int32(name='Size'),
}

model SystemDiskParam {
  category?: string(name='Category'),
  performanceLevel?: string(name='PerformanceLevel'),
  size?: int32(name='Size'),
}

model Tag {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model TagResource {
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: string(name='TagKey'),
  tagValue?: string(name='TagValue'),
}

model TimeTrigger {
  endTime?: long(name='EndTime'),
  launchExpirationTime?: int32(name='LaunchExpirationTime'),
  launchTime?: long(name='LaunchTime'),
  recurrenceType?: string(name='RecurrenceType'),
  recurrenceValue?: string(name='RecurrenceValue'),
}

model UpdateApplicationConfig {
  configAction?: string(name='ConfigAction'),
  configDescription?: string(name='ConfigDescription'),
  configFileName?: string(name='ConfigFileName'),
  configItemKey?: string(name='ConfigItemKey'),
  configItemValue?: string(name='ConfigItemValue'),
  configScope?: string(name='ConfigScope'),
  effectiveActions?: string(name='EffectiveActions'),
  effectiveType?: string(name='EffectiveType'),
  nodeGroupId?: string(name='NodeGroupId'),
  nodeId?: string(name='NodeId'),
}

model UpdateSpecNodeGroup {
  newInstanceType?: string(name='NewInstanceType'),
  nodeGroupId?: string(name='NodeGroupId'),
}

model UpdateSpecNodeGroupParam {
  newInstanceType?: string(name='NewInstanceType'),
  nodeGroupId?: string(name='NodeGroupId'),
}

model User {
  group?: string(name='Group'),
  password?: string(name='Password'),
  userId?: string(name='UserId'),
  userName?: string(name='UserName'),
  userType?: string(name='UserType'),
}

model UserParam {
  password?: string(name='Password'),
  userId?: string(name='UserId'),
  userName?: string(name='UserName'),
}

model CreateClusterRequest {
  applicationConfigs?: [
    ApplicationConfig
  ](name='ApplicationConfigs'),
  applications?: [
    Application
  ](name='Applications'),
  bootstrapScripts?: [
    Script
  ](name='BootstrapScripts'),
  clientToken?: string(name='ClientToken'),
  clusterName?: string(name='ClusterName'),
  clusterType?: string(name='ClusterType'),
  deployMode?: string(name='DeployMode'),
  nodeAttributes?: NodeAttributes(name='NodeAttributes'),
  nodeGroups?: [
    NodeGroupConfig
  ](name='NodeGroups'),
  paymentType?: string(name='PaymentType'),
  regionId?: string(name='RegionId'),
  releaseVersion?: string(name='ReleaseVersion'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityMode?: string(name='SecurityMode'),
  subscriptionConfig?: SubscriptionConfig(name='SubscriptionConfig'),
  tags?: [
    Tag
  ](name='Tags'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterResponseBody(name='body'),
}

/**
 * 调用CreateCluster创建集群。
 */
async function createClusterWithOptions(request: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationConfigs)) {
    query['ApplicationConfigs'] = request.applicationConfigs;
  }
  if (!Util.isUnset(request.applications)) {
    query['Applications'] = request.applications;
  }
  if (!Util.isUnset(request.bootstrapScripts)) {
    query['BootstrapScripts'] = request.bootstrapScripts;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.deployMode)) {
    query['DeployMode'] = request.deployMode;
  }
  if (!Util.isUnset(request.nodeAttributes)) {
    query['NodeAttributes'] = request.nodeAttributes;
  }
  if (!Util.isUnset(request.nodeGroups)) {
    query['NodeGroups'] = request.nodeGroups;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['PaymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.releaseVersion)) {
    query['ReleaseVersion'] = request.releaseVersion;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityMode)) {
    query['SecurityMode'] = request.securityMode;
  }
  if (!Util.isUnset(request.subscriptionConfig)) {
    query['SubscriptionConfig'] = request.subscriptionConfig;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model DecreaseNodesRequest {
  clusterId?: string(name='ClusterId'),
  decreaseNodeCount?: int32(name='DecreaseNodeCount'),
  nodeGroupId?: string(name='NodeGroupId'),
  nodeIds?: [ string ](name='NodeIds'),
  regionId?: string(name='RegionId'),
}

model DecreaseNodesResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model DecreaseNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DecreaseNodesResponseBody(name='body'),
}

/**
 * 缩容节点。
 */
async function decreaseNodesWithOptions(request: DecreaseNodesRequest, runtime: Util.RuntimeOptions): DecreaseNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.decreaseNodeCount)) {
    query['DecreaseNodeCount'] = request.decreaseNodeCount;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.nodeIds)) {
    query['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DecreaseNodes',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function decreaseNodes(request: DecreaseNodesRequest): DecreaseNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return decreaseNodesWithOptions(request, runtime);
}

model DeleteClusterRequest {
  clusterId?: string(name='ClusterId'),
  regionId?: string(name='RegionId'),
}

model DeleteClusterResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterResponseBody(name='body'),
}

/**
 * 删除集群。
 */
async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCluster',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model GetClusterRequest {
  clusterId?: string(name='ClusterId'),
  regionId?: string(name='RegionId'),
}

model GetClusterResponseBody = {
  cluster?: Cluster(name='Cluster'),
  requestId?: string(name='RequestId'),
}

model GetClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterResponseBody(name='body'),
}

/**
 * 调用GetCluster获取集群详情。
 */
async function getClusterWithOptions(request: GetClusterRequest, runtime: Util.RuntimeOptions): GetClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCluster',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCluster(request: GetClusterRequest): GetClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterWithOptions(request, runtime);
}

model GetNodeGroupRequest {
  clusterId?: string(name='ClusterId'),
  nodeGroupId?: string(name='NodeGroupId'),
  regionId?: string(name='RegionId'),
}

model GetNodeGroupResponseBody = {
  nodeGroup?: NodeGroup(name='NodeGroup'),
  requestId?: string(name='RequestId'),
}

model GetNodeGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeGroupResponseBody(name='body'),
}

/**
 * 获取节点组详情。
 */
async function getNodeGroupWithOptions(request: GetNodeGroupRequest, runtime: Util.RuntimeOptions): GetNodeGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeGroup',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeGroup(request: GetNodeGroupRequest): GetNodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeGroupWithOptions(request, runtime);
}

model GetOperationRequest {
  clusterId?: string(name='ClusterId'),
  operationId?: string(name='OperationId'),
  regionId?: string(name='RegionId'),
}

model GetOperationResponseBody = {
  operation?: Operation(name='Operation'),
  requestId?: string(name='RequestId'),
}

model GetOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOperationResponseBody(name='body'),
}

/**
 * 获取操作详情。
 */
async function getOperationWithOptions(request: GetOperationRequest, runtime: Util.RuntimeOptions): GetOperationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.operationId)) {
    query['OperationId'] = request.operationId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOperation',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOperation(request: GetOperationRequest): GetOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOperationWithOptions(request, runtime);
}

model IncreaseNodesRequest {
  applicationConfigs?: [
    ApplicationConfig
  ](name='ApplicationConfigs'),
  autoPayOrder?: boolean(name='AutoPayOrder'),
  clusterId?: string(name='ClusterId'),
  increaseNodeCount?: int32(name='IncreaseNodeCount'),
  nodeGroupId?: string(name='NodeGroupId'),
  paymentDuration?: int32(name='PaymentDuration'),
  paymentDurationUnit?: string(name='PaymentDurationUnit'),
  regionId?: string(name='RegionId'),
}

model IncreaseNodesResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model IncreaseNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IncreaseNodesResponseBody(name='body'),
}

async function increaseNodesWithOptions(request: IncreaseNodesRequest, runtime: Util.RuntimeOptions): IncreaseNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationConfigs)) {
    query['ApplicationConfigs'] = request.applicationConfigs;
  }
  if (!Util.isUnset(request.autoPayOrder)) {
    query['AutoPayOrder'] = request.autoPayOrder;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.increaseNodeCount)) {
    query['IncreaseNodeCount'] = request.increaseNodeCount;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.paymentDuration)) {
    query['PaymentDuration'] = request.paymentDuration;
  }
  if (!Util.isUnset(request.paymentDurationUnit)) {
    query['PaymentDurationUnit'] = request.paymentDurationUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IncreaseNodes',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function increaseNodes(request: IncreaseNodesRequest): IncreaseNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return increaseNodesWithOptions(request, runtime);
}

model JoinResourceGroupRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model JoinResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: JoinResourceGroupResponseBody(name='body'),
}

async function joinResourceGroupWithOptions(request: JoinResourceGroupRequest, runtime: Util.RuntimeOptions): JoinResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinResourceGroup',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function joinResourceGroup(request: JoinResourceGroupRequest): JoinResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinResourceGroupWithOptions(request, runtime);
}

model ListNodeGroupsRequest {
  clusterId?: string(name='ClusterId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  nodeGroupIds?: [ string ](name='NodeGroupIds'),
  nodeGroupNames?: [ string ](name='NodeGroupNames'),
  nodeGroupStates?: [ string ](name='NodeGroupStates'),
  nodeGroupTypes?: [ string ](name='NodeGroupTypes'),
  regionId?: string(name='RegionId'),
}

model ListNodeGroupsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  nodeGroups?: [
    NodeGroup
  ](name='NodeGroups'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListNodeGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeGroupsResponseBody(name='body'),
}

/**
 * 查询节点组。
 */
async function listNodeGroupsWithOptions(request: ListNodeGroupsRequest, runtime: Util.RuntimeOptions): ListNodeGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.nodeGroupIds)) {
    query['NodeGroupIds'] = request.nodeGroupIds;
  }
  if (!Util.isUnset(request.nodeGroupNames)) {
    query['NodeGroupNames'] = request.nodeGroupNames;
  }
  if (!Util.isUnset(request.nodeGroupStates)) {
    query['NodeGroupStates'] = request.nodeGroupStates;
  }
  if (!Util.isUnset(request.nodeGroupTypes)) {
    query['NodeGroupTypes'] = request.nodeGroupTypes;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeGroups',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeGroups(request: ListNodeGroupsRequest): ListNodeGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeGroupsWithOptions(request, runtime);
}

model ListNodesRequest {
  clusterId?: string(name='ClusterId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  nodeGroupIds?: [ string ](name='NodeGroupIds'),
  nodeIds?: [ string ](name='NodeIds'),
  nodeNames?: [ string ](name='NodeNames'),
  nodeStates?: [ string ](name='NodeStates'),
  privateIps?: [ string ](name='PrivateIps'),
  publicIps?: [ string ](name='PublicIps'),
  regionId?: string(name='RegionId'),
  tags?: [
    Tag
  ](name='Tags'),
}

model ListNodesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  nodes?: [
    Node
  ](name='Nodes'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesResponseBody(name='body'),
}

/**
 * 查询节点。
 */
async function listNodesWithOptions(request: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.nodeGroupIds)) {
    query['NodeGroupIds'] = request.nodeGroupIds;
  }
  if (!Util.isUnset(request.nodeIds)) {
    query['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.nodeNames)) {
    query['NodeNames'] = request.nodeNames;
  }
  if (!Util.isUnset(request.nodeStates)) {
    query['NodeStates'] = request.nodeStates;
  }
  if (!Util.isUnset(request.privateIps)) {
    query['PrivateIps'] = request.privateIps;
  }
  if (!Util.isUnset(request.publicIps)) {
    query['PublicIps'] = request.publicIps;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2021-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

