/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('sasti', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeDomainReportRequest {
  domain?: string(name='Domain'),
  field?: string(name='Field'),
}

model DescribeDomainReportResponseBody = {
  attackCntByThreatType?: string(name='AttackCntByThreatType'),
  attackPreferenceTop5?: string(name='AttackPreferenceTop5'),
  basic?: string(name='Basic'),
  confidence?: string(name='Confidence'),
  context?: string(name='Context'),
  domain?: string(name='Domain'),
  group?: string(name='Group'),
  intelligences?: string(name='Intelligences'),
  requestId?: string(name='RequestId'),
  scenario?: string(name='Scenario'),
  sslCert?: string(name='SslCert'),
  threatLevel?: string(name='ThreatLevel'),
  threatTypes?: string(name='ThreatTypes'),
  whois?: string(name='Whois'),
}

model DescribeDomainReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainReportResponseBody(name='body'),
}

async function describeDomainReportWithOptions(request: DescribeDomainReportRequest, runtime: Util.RuntimeOptions): DescribeDomainReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.field)) {
    query['Field'] = request.field;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainReport',
    version = '2020-05-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainReport(request: DescribeDomainReportRequest): DescribeDomainReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainReportWithOptions(request, runtime);
}

