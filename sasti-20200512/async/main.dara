/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sasti';
  @version = '2020-05-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeDomainReportRequest {
  domain: string(name='Domain', position='Query'),
  field?: string(name='Field', position='Query'),
}

model DescribeDomainReportResponseBody = {
  attackCntByThreatType?: string(name='AttackCntByThreatType'),
  attackPreferenceTop5?: string(name='AttackPreferenceTop5'),
  basic?: string(name='Basic'),
  confidence?: string(name='Confidence'),
  context?: string(name='Context'),
  domain?: string(name='Domain'),
  group?: string(name='Group'),
  intelligences?: string(name='Intelligences'),
  requestId?: string(name='RequestId'),
  scenario?: string(name='Scenario'),
  sslCert?: string(name='SslCert'),
  threatLevel?: string(name='ThreatLevel'),
  threatTypes?: string(name='ThreatTypes'),
  whois?: string(name='Whois'),
}

model DescribeDomainReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainReportResponseBody(name='body'),
}

async function describeDomainReport(request: DescribeDomainReportRequest): DescribeDomainReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainReport', 'POST', '/', 'json', false, 'json', request);
}

