/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sasti';
  @version = '2020-05-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeDomainReportRequest {
  domain: string(name='Domain', example='example.com', position='Query'),
  field?: string(name='Field', example='ThreatTypes,Intelligences,AttackPreferenceTop5,AttackCntByThreatType', position='Query'),
  serviceLang?: string(name='ServiceLang', position='Query'),
}

model DescribeDomainReportResponseBody = {
  attackCntByThreatType?: string(name='AttackCntByThreatType'),
  attackPreferenceTop5?: string(name='AttackPreferenceTop5', example='[{"event_cnt":586,"industry_name":"Gaming","gmt_last_attack":"2020-06-14 21:54:04"}]'),
  basic?: string(name='Basic', example='{ "ip_cnt": "36", "domain": "example.com", "child_domain_cnt": "18", "sld_domain": "example.com", "malicious_ip_cnt": "28", "malicious_child_domain_cnt": "4" }'),
  confidence?: string(name='Confidence', example='95'),
  context?: string(name='Context', example='""'),
  domain?: string(name='Domain', example='example.com'),
  group?: string(name='Group', example='""'),
  intelligences?: string(name='Intelligences'),
  requestId?: string(name='RequestId', example='718747A4-9A75-4130-88F9-C9B47350B7F5'),
  scenario?: string(name='Scenario'),
  sslCert?: string(name='SslCert', example='{   "serial_number": "18395475168054001104",   "validity_end": "2029-12-02 06:00:31",   "issuer": "example.ca",...}'),
  threatLevel?: string(name='ThreatLevel', example='2'),
  threatTypes?: string(name='ThreatTypes'),
  whois?: string(name='Whois'),
}

model DescribeDomainReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainReportResponseBody(name='body'),
}

async function describeDomainReport(request: DescribeDomainReportRequest): DescribeDomainReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFileReportRequest {
  field?: string(name='Field', example='ThreatTypes,Intelligences,AttackPreferenceTop5,AttackCntByThreatType', position='Query'),
  fileHash: string(name='FileHash', position='Query'),
  serviceLang?: string(name='ServiceLang', position='Query'),
}

model DescribeFileReportResponseBody = {
  basic?: string(name='Basic'),
  fileHash?: string(name='FileHash', example='02e6b7cf0d34c6eac059f754b751208b'),
  intelligences?: string(name='Intelligences'),
  requestId?: string(name='RequestId', example='3F2BBCA2-4EE5-456F-93B1-DE0B69CAFD71'),
  sandbox?: string(name='Sandbox', example='""'),
  threatLevel?: string(name='ThreatLevel', example='2'),
  threatTypes?: string(name='ThreatTypes'),
}

model DescribeFileReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFileReportResponseBody(name='body'),
}

async function describeFileReport(request: DescribeFileReportRequest): DescribeFileReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFileReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpReportRequest {
  field?: string(name='Field', example='TagsThreatTypes,Intelligences,AttackPreferenceTop5,AttackCntByThreatType', position='Query'),
  ip: string(name='Ip', example='192.0.XX.XX', position='Query'),
  serviceLang?: string(name='ServiceLang', position='Query'),
}

model DescribeIpReportResponseBody = {
  attackCntByThreatType?: string(name='AttackCntByThreatType'),
  attackPreferenceTop5?: string(name='AttackPreferenceTop5'),
  confidence?: string(name='Confidence', example='"98"'),
  context?: string(name='Context', example='""'),
  group?: string(name='Group', example='""'),
  intelligences?: string(name='Intelligences'),
  ip?: string(name='Ip'),
  requestId?: string(name='RequestId', example='BE036526-FE84-46A8-9165-F086E9810E2F'),
  scenario?: string(name='Scenario'),
  threatLevel?: string(name='ThreatLevel', example='"3"'),
  threatTypes?: string(name='ThreatTypes'),
  whois?: string(name='Whois', example='{   "serial_number": "18395475168054001104",...}'),
}

model DescribeIpReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpReportResponseBody(name='body'),
}

async function describeIpReport(request: DescribeIpReportRequest): DescribeIpReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpReport', 'POST', '/', 'json', false, 'json', request);
}

