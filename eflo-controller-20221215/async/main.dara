/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eflo-controller';
  @version = '2022-12-15';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApproveOperationRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId?: string(name='NodeId', example='e01-cn-zvp2tgykr08', position='Body'),
  operationType?: string(name='OperationType', example='RepairMachine', position='Body'),
}

model ApproveOperationResponseBody = {
  errorMessage?: string(name='ErrorMessage', example='Resource not found'),
  requestId?: string(name='RequestId', example='8F065DDD-6996-5973-9691-9EC57BD0072E'),
}

model ApproveOperationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveOperationResponseBody(name='body'),
}

async function approveOperation(request: ApproveOperationRequest): ApproveOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveOperation', 'POST', '/', 'json', true, 'form', request);
}

model ChangeResourceGroupRequest {
  resourceGroupId: string(name='ResourceGroupId', example='rg-aekzyqdwnfabx6q', position='Query'),
  resourceId: string(name='ResourceId', example='i118099391667548921125', position='Query'),
  resourceRegionId: string(name='ResourceRegionId', example='cn-wulanchabu', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8F065DDD-6996-5973-9691-9EC57BD0072E'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterDescription?: string(name='ClusterDescription', position='Body'),
  clusterName?: string(name='ClusterName', example='Standard_Cluster', position='Body'),
  clusterType?: string(name='ClusterType', example='Lite', position='Body'),
  components?: [ 
    {
      componentConfig?: {
        basicArgs?: any(name='BasicArgs', example='{
      "EndpointPublicAccess": false,
      "ContainerCidr": "10.4.0.0/24",
      "KeyPair": "test",
      "NodeCidrMask": "25",
      "ResourceGroupId": "rg-axsadm3sdzsdvdsndstdisd",
      "WorkerSystemDiskCategory": "da",
      "WorkerSystemDiskSize": 40,
      "DeletionProtection": false,
      "KubeProxy": "iptables",
      "Name": "da",
      "LoadBalancerSpec": "slb.s1.small",
      "Runtime": {
            "Version": "19.03.15",
            "Name": "docker"
      },
      "IsEnterpriseSecurityGroup": true,
      "Vpcid": "192.168.23.0/24",
      "NumOfNodes": 1,
      "VswitchIds": [
            "dad"
      ],
      "ServiceCidr": "10.0.0.0/16",
      "SnatEntry": false,
      "kubernetesVersion": "1.20.11-aliyunedge.1",
      "WorkerInstanceTypes": [
            "da"
      ]
}'),
        nodeUnits?: [ any ](name='NodeUnits'),
      }(name='ComponentConfig'),
      componentType?: string(name='ComponentType', example='ACKEdge'),
    }
  ](name='Components', shrink='json', position='Body'),
  hpnZone?: string(name='HpnZone', position='Body'),
  ignoreFailedNodeTasks?: boolean(name='IgnoreFailedNodeTasks', example='False', position='Body'),
  networks?: {
    ipAllocationPolicy?: [ 
      {
        bondPolicy?: {
          bondDefaultSubnet?: string(name='BondDefaultSubnet'),
          bonds?: [ 
            {
              name?: string(name='Name'),
              subnet?: string(name='Subnet'),
            }
          ](name='Bonds'),
        }(name='BondPolicy'),
        machineTypePolicy?: [ 
          {
            bonds?: [ 
              {
                name?: string(name='Name'),
                subnet?: string(name='Subnet'),
              }
            ](name='Bonds'),
            machineType?: string(name='MachineType'),
          }
        ](name='MachineTypePolicy'),
        nodePolicy?: [ 
          {
            bonds?: [ 
              {
                name?: string(name='Name'),
                subnet?: string(name='Subnet'),
              }
            ](name='Bonds'),
            nodeId?: string(name='NodeId'),
          }
        ](name='NodePolicy'),
      }
    ](name='IpAllocationPolicy'),
    newVpdInfo?: {
      cenId?: string(name='CenId', example='cen-1gb1eftc5qp2ao75fo'),
      cloudLinkCidr?: string(name='CloudLinkCidr', example='172.16.0.0/24'),
      cloudLinkId?: string(name='CloudLinkId', example='vcc-cn-c4dtycm5i08'),
      monitorVpcId?: string(name='MonitorVpcId', example='vpc-0jl2x45apm6odc2c10h25'),
      monitorVswitchId?: string(name='MonitorVswitchId', example='vsw-0jl2w3ffbghkss0x2foff'),
      vpdCidr?: string(name='VpdCidr', example='192.168.0.0/16'),
      vpdSubnets?: [ 
        {
          subnetCidr?: string(name='SubnetCidr'),
          subnetType?: string(name='SubnetType'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='VpdSubnets'),
    }(name='NewVpdInfo'),
    securityGroupId?: string(name='SecurityGroupId'),
    tailIpVersion?: string(name='TailIpVersion'),
    vSwitchId?: string(name='VSwitchId'),
    vSwitchZoneId?: string(name='VSwitchZoneId'),
    vpcId?: string(name='VpcId'),
    vpdInfo?: {
      vpdId?: string(name='VpdId', description='专有网络 id', example='vpd-vfuz6ejv'),
      vpdSubnets?: [ string ](name='VpdSubnets', description='集群子网id列表'),
    }(name='VpdInfo', description='复用VPD信息'),
  }(name='Networks', shrink='json', position='Body'),
  nimizVSwitches?: [ string ](name='NimizVSwitches', shrink='json', position='Body'),
  nodeGroups?: [ 
    {
      imageId?: string(name='ImageId', example='i190297201634099844192'),
      machineType?: string(name='MachineType', example='efg1.nvga1'),
      nodeGroupDescription?: string(name='NodeGroupDescription'),
      nodeGroupName?: string(name='NodeGroupName', example='emr-default'),
      nodes?: [ 
        {
          hostname?: string(name='Hostname', example='8d13b784-17a9-11ed-bc7b-acde48001122'),
          loginPassword?: string(name='LoginPassword', example='***'),
          nodeId?: string(name='NodeId', example='e01poc-cn-i7m2wnivf0d'),
          vSwitchId?: string(name='VSwitchId'),
          vpcId?: string(name='VpcId'),
        }
      ](name='Nodes'),
      userData?: string(name='UserData'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
    }
  ](name='NodeGroups', shrink='json', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2xdkc6icwfha', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', example='env-name'),
      value?: string(name='Value', example='dev'),
    }
  ](name='Tag', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', example='i116913051663373010974'),
  requestId?: string(name='RequestId', example='3C683243-7915-57FB-9570-A2932C1C0F78'),
  taskId?: string(name='TaskId', example='i159809891662373011015'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', example='i116913051662373010974', position='Body'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId', example='0FC4A1C7-421C-5EAB-9361-4C0338EFA287'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', true, 'form', request);
}

model DescribeClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', example='i119982311660892626523', position='Body'),
}

model DescribeClusterResponseBody = {
  clusterDescription?: string(name='ClusterDescription'),
  clusterId?: string(name='ClusterId', example='i116913051662373010974'),
  clusterName?: string(name='ClusterName', example='Eflo-YJ-Test-Cluster'),
  clusterType?: string(name='ClusterType', example='AckEdgPro'),
  components?: [ 
    {
      componentId?: string(name='ComponentId', example='i149549021660892626529'),
      componentType?: string(name='ComponentType', example='ACKEdge'),
    }
  ](name='Components'),
  computingIpVersion?: string(name='ComputingIpVersion'),
  createTime?: string(name='CreateTime', example='2022-06-08T07:05:11Z'),
  hpnZone?: string(name='HpnZone'),
  networks?: [ 
    {
      vpdId?: string(name='VpdId', example='vpd-iqd7xunc'),
    }
  ](name='Networks'),
  nodeCount?: long(name='NodeCount', example='2'),
  nodeGroupCount?: long(name='NodeGroupCount', example='2'),
  operatingState?: string(name='OperatingState', example='running'),
  requestId?: string(name='RequestId', example='887FA855-89F4-5DB3-B305-C5879EC480E6'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2k3rqlvv6ytq'),
  taskId?: string(name='TaskId', example='i152609221670466904596'),
  updateTime?: string(name='UpdateTime', example='2022-08-23T06:36:17.000Z'),
  vpcId?: string(name='VpcId'),
}

model DescribeClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterResponseBody(name='body'),
}

async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCluster', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInvocationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  contentEncoding?: string(name='ContentEncoding', example='PlainText', position='Body'),
  includeOutput?: boolean(name='IncludeOutput', example='true', position='Body'),
  invokeId: string(name='InvokeId', example='t-cd03crwys0lrls0', position='Body'),
  nodeId?: string(name='NodeId', example='e01-cn-zvp2tgykr08', position='Body'),
}

model DescribeInvocationsResponseBody = {
  invocations?: {
    invocation?: [ 
      {
        commandContent?: string(name='CommandContent', example='cnBtIC1xYSB8IGdyZXAgdnNm****'),
        commandDescription?: string(name='CommandDescription', example='testDescription'),
        commandName?: string(name='CommandName', example='CommandTestName'),
        creationTime?: string(name='CreationTime', example='2020-01-19T09:15:46Z'),
        frequency?: string(name='Frequency', example='0 */20 * * * *'),
        invocationStatus?: string(name='InvocationStatus', example='Success'),
        invokeId?: string(name='InvokeId', example='t-ind3k9ytvvduoe8'),
        invokeNodes?: {
          invokeNode?: [ 
            {
              creationTime?: string(name='CreationTime', example='2023-02-06T07:12:50Z'),
              dropped?: int32(name='Dropped', example='0'),
              errorCode?: boolean(name='ErrorCode', example='NodeNotExists：'),
              errorInfo?: string(name='ErrorInfo', example='the specified node does not exists'),
              exitCode?: int32(name='ExitCode', example='0'),
              finishTime?: string(name='FinishTime', example='2023-02-06T07:12:50Z'),
              invocationStatus?: string(name='InvocationStatus', example='Pending'),
              nodeId?: string(name='NodeId', example='e01-cn-lbj36wkp70b'),
              nodeInvokeStatus?: string(name='NodeInvokeStatus', example='Finished'),
              output?: string(name='Output', example='OutPutTestmsg'),
              repeats?: int32(name='Repeats', example='0'),
              startTime?: string(name='StartTime', example='2019-12-20T06:15:55Z'),
              stopTime?: string(name='StopTime', example='2019-12-20T06:15:55Z'),
              timed?: string(name='Timed', example='false'),
              updateTime?: string(name='UpdateTime', example='2023-02-06T07:12:50Z'),
            }
          ](name='InvokeNode'),
        }(name='InvokeNodes'),
        invokeStatus?: string(name='InvokeStatus', example='Running'),
        parameters?: string(name='Parameters', example='{}'),
        repeatMode?: string(name='RepeatMode', example='Once'),
        timeout?: int32(name='Timeout', example='60'),
        username?: string(name='Username', example='root'),
        workingDir?: string(name='WorkingDir', example='/home'),
      }
    ](name='Invocation'),
  }(name='Invocations'),
  requestId?: string(name='RequestId', example='4FD06DF0-9167-5C6F-A145-F30CA4A15D54'),
}

model DescribeInvocationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvocationsResponseBody(name='body'),
}

async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocations', 'POST', '/', 'json', true, 'form', request);
}

model DescribeNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', example='mock-sn-2060', position='Body'),
}

model DescribeNodeResponseBody = {
  clusterId?: string(name='ClusterId', example='i116913051662373010974'),
  clusterName?: string(name='ClusterName', example='Standard_Cluster'),
  createTime?: string(name='CreateTime', example='2022-09-30T03:35:53Z'),
  expiredTime?: string(name='ExpiredTime', example='2022-06-23T16:00:00Z'),
  hostname?: string(name='Hostname', example='31d38530-241e-11ed-bc63-acde48001122'),
  hpnZone?: string(name='HpnZone'),
  imageId?: string(name='ImageId', example='i190297201634099844192'),
  imageName?: string(name='ImageName', description='镜像名称', example='Centos7.9_all_0811'),
  machineType?: string(name='MachineType', example='efg1.nvga1'),
  networks?: [ 
    {
      bondName?: string(name='BondName', example='Bond0'),
      ip?: string(name='Ip', example='47.254.235.44'),
      subnetId?: string(name='SubnetId', example='vsw-uf68v51fldm5egmui5a6k'),
      vpdId?: string(name='VpdId', example='vpd-xcuhjyrj'),
    }
  ](name='Networks'),
  nodeGroupId?: string(name='NodeGroupId', example='ng-ec3c96ff0aa4c60d'),
  nodeGroupName?: string(name='NodeGroupName', example='emr-default'),
  nodeId?: string(name='NodeId', example='e01-cn-zvp2tgykr08'),
  operatingState?: string(name='OperatingState'),
  requestId?: string(name='RequestId', example='AC4F0004-7BCE-52E0-891B-CAC7D64E3368'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sn?: string(name='Sn', example='sag42ckf4jx'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model DescribeNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNodeResponseBody(name='body'),
}

async function describeNode(request: DescribeNodeRequest): DescribeNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='1D2FBB36-C39B-5EBB-9928-FCC1A236D65D'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSendFileResultsRequest {
  regionId?: string(name='RegionId', position='Host'),
  invokeId: string(name='InvokeId', example='t-bj038i0d6r8zoqo', position='Body'),
  nodeId?: string(name='NodeId', example='e01-cn-zvp2tgykr08', position='Body'),
}

model DescribeSendFileResultsResponseBody = {
  invocations?: {
    invocation?: [ 
      {
        content?: string(name='Content', example='Base64'),
        contentType?: string(name='ContentType', example='PlainText'),
        creationTime?: string(name='CreationTime', example='2023-04-10T10:53:46.156+08:00'),
        description?: string(name='Description'),
        fileGroup?: string(name='FileGroup', example='root'),
        fileMode?: string(name='FileMode', example='0644'),
        fileOwner?: string(name='FileOwner', example='root'),
        invocationStatus?: string(name='InvocationStatus', example='Pending'),
        invokeNodes?: {
          invokeNode?: [ 
            {
              creationTime?: string(name='CreationTime', example='2023-02-06T07:12:50Z'),
              errorCode?: string(name='ErrorCode', example='AccountNotExists'),
              errorInfo?: string(name='ErrorInfo', example='the specified instance does not exists'),
              finishTime?: string(name='FinishTime', example='2023-04-10T10:53:46.156+08:00'),
              invocationStatus?: string(name='InvocationStatus', example='Success'),
              nodeId?: string(name='NodeId', example='e01-cn-9lb3c15m81j'),
              startTime?: string(name='StartTime', example='2023-03-30T16:00:00Z'),
              updateTime?: string(name='UpdateTime', example='2023-03-30T16:00:00Z'),
            }
          ](name='InvokeNode'),
        }(name='InvokeNodes'),
        name?: string(name='Name', example='test'),
        nodeCount?: int32(name='NodeCount', example='3'),
        overwrite?: boolean(name='Overwrite', example='true'),
        targetDir?: string(name='TargetDir', example='/home/user'),
      }
    ](name='Invocation'),
  }(name='Invocations'),
  requestId?: string(name='RequestId', description='Id of the request', example='4FD06DF0-9167-5C6F-A145-F30CA4A15D54'),
  totalCount?: string(name='TotalCount', example='1'),
}

model DescribeSendFileResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSendFileResultsResponseBody(name='body'),
}

async function describeSendFileResults(request: DescribeSendFileResultsRequest): DescribeSendFileResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSendFileResults', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  taskId: string(name='TaskId', example='i156331731670384438138', position='Body'),
}

model DescribeTaskResponseBody = {
  clusterId?: string(name='ClusterId', example='i119982311660892626523'),
  clusterName?: string(name='ClusterName', example='Standard_Cluster'),
  createTime?: string(name='CreateTime', example='2022-11-30T02:00:00.852Z'),
  message?: string(name='Message', example='Releasing [prod_main_mid_26e234cf] in region [cn-beijing] with weight [0]'),
  nodeIds?: [ string ](name='NodeIds'),
  requestId?: string(name='RequestId', example='A7FD7411-9395-52E8-AF42-EB3A4A55446D'),
  steps?: [ 
    {
      message?: string(name='Message', example='get taskinfo failed'),
      stageTag?: string(name='StageTag'),
      startTime?: string(name='StartTime', example='2022-11-30T2:00:00.852Z'),
      stepName?: string(name='StepName', example='create_vpd'),
      stepState?: string(name='StepState', example='execution_success'),
      stepType?: string(name='StepType', example='normal'),
      subTasks?: [ 
        {
          createTime?: string(name='CreateTime', example='2022-11-30T2:00:00.852Z'),
          message?: string(name='Message', example='Releasing [prod_main_mid_26e234cf] in region [cn-beijing] with weight [0]'),
          taskId?: string(name='TaskId', example='i158805051661047928377'),
          taskState?: string(name='TaskState', example='running'),
          taskType?: string(name='TaskType', example='cut_node_sub_task'),
          updateTime?: string(name='UpdateTime', example='2022-11-30T02:20:14.852Z'),
        }
      ](name='SubTasks'),
      updateTime?: string(name='UpdateTime', example='2022-11-30T02:20:14.852Z'),
    }
  ](name='Steps'),
  taskState?: string(name='TaskState', example='running'),
  taskType?: string(name='TaskType', example='cut_cluster'),
  updateTime?: string(name='UpdateTime', example='2022-11-30T03:40:14.852Z'),
}

model DescribeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskResponseBody(name='body'),
}

async function describeTask(request: DescribeTaskRequest): DescribeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTask', 'POST', '/', 'json', true, 'form', request);
}

model DescribeZonesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', example='E9116F2D-82F8-501E-9ADB-2BE0C02B6A84'),
  zones?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
    }
  ](name='Zones'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', true, 'form', request);
}

model ExtendClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId?: string(name='ClusterId', example='i15b480fbd2fcdbc2869cd80', position='Body'),
  ignoreFailedNodeTasks?: boolean(name='IgnoreFailedNodeTasks', example='False', position='Body'),
  ipAllocationPolicy?: [ 
    {
      bondPolicy?: {
        bondDefaultSubnet?: string(name='BondDefaultSubnet', example='subnet-3od2fe'),
        bonds?: [ 
          {
            name?: string(name='Name', example='Bond0'),
            subnet?: string(name='Subnet', example='subnet-3od2fe'),
          }
        ](name='Bonds'),
      }(name='BondPolicy'),
      machineTypePolicy?: [ 
        {
          bonds?: [ 
            {
              name?: string(name='Name', example='Bond0'),
              subnet?: string(name='Subnet', example='subnet-fdo3dv'),
            }
          ](name='Bonds'),
          machineType?: string(name='MachineType', example='efg1.nvga1'),
        }
      ](name='MachineTypePolicy'),
      nodePolicy?: [ 
        {
          bonds?: [ 
            {
              name?: string(name='Name', example='Bond0'),
              subnet?: string(name='Subnet', example='subnet-fdo3dv'),
            }
          ](name='Bonds'),
          nodeId?: string(name='NodeId', example='i-3fdodw2'),
        }
      ](name='NodePolicy'),
    }
  ](name='IpAllocationPolicy', shrink='json', position='Body'),
  nodeGroups?: [ 
    {
      nodeGroupId?: string(name='NodeGroupId', example='i16d4883a46cbadeb4bc9'),
      nodes?: [ 
        {
          hostname?: string(name='Hostname', example='d044d220-33fd-11ed-86a6'),
          loginPassword?: string(name='LoginPassword', example='***'),
          nodeId?: string(name='NodeId', example='e01-cn-zvp2zdpy601'),
          vSwitchId?: string(name='VSwitchId'),
          vpcId?: string(name='VpcId'),
        }
      ](name='Nodes'),
      userData?: string(name='UserData'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='NodeGroups', shrink='json', position='Body'),
  vSwitchZoneId?: string(name='VSwitchZoneId', position='Body'),
  vpdSubnets?: [ string ](name='VpdSubnets', shrink='json', position='Body'),
}

model ExtendClusterResponseBody = {
  requestId?: string(name='RequestId', example='03668372-18FF-5959-98D9-6B36A4643C7A'),
  taskId?: string(name='TaskId', example='i158475611663639202234'),
}

model ExtendClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExtendClusterResponseBody(name='body'),
}

async function extendCluster(request: ExtendClusterRequest): ExtendClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExtendCluster', 'POST', '/', 'json', true, 'form', request);
}

model ListClusterNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', example='i15b480fbd2fcdbc2869cd80', position='Body'),
  maxResults?: long(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAdQ3Z+oPlg49gsr2y8jb6wY=', position='Body'),
  nodeGroupId?: string(name='NodeGroupId', example='ng-ec3c96ff0aa4c60d', position='Body'),
}

model ListClusterNodesResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAXW/ZB9TBvH+0ZK0phtCibQgQmu1RbqplAI6Velo2OKR'),
  nodes?: [ 
    {
      createTime?: string(name='CreateTime', example='1642472468000'),
      expiredTime?: string(name='ExpiredTime', example='1762185600000'),
      hostname?: string(name='Hostname', example='72432f80-273e-11ed-b57a-acde48001122'),
      hpnZone?: string(name='HpnZone'),
      imageId?: string(name='ImageId', example='i190297201669099844192'),
      machineType?: string(name='MachineType', example='cn-wulanchabu-b11'),
      networks?: [ 
        {
          bondName?: string(name='BondName'),
          ip?: string(name='Ip'),
          subnetId?: string(name='SubnetId'),
          vpdId?: string(name='VpdId'),
        }
      ](name='Networks'),
      nodeGroupId?: string(name='NodeGroupId', example='ng-e9b74f4d450cf18d'),
      nodeGroupName?: string(name='NodeGroupName', example='emr_master'),
      nodeId?: string(name='NodeId', example='e01-cn-2r42tmj4z02'),
      operatingState?: string(name='OperatingState', example='Extending'),
      sn?: string(name='Sn', example='sn_tOuUk'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId', example='2BA76272-6608-5AEC-BBA8-B6F0D3D14CDB'),
}

model ListClusterNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterNodesResponseBody(name='body'),
}

async function listClusterNodes(request: ListClusterNodesRequest): ListClusterNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterNodes', 'POST', '/', 'json', true, 'form', request);
}

model ListClustersRequest {
  regionId?: string(name='RegionId', position='Host'),
  maxResults?: long(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='a3f2224a5ec7224116c4f5246120abe4', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2bg6wyoox6jq', position='Body'),
}

model ListClustersResponseBody = {
  clusters?: [ 
    {
      clusterDescription?: string(name='ClusterDescription'),
      clusterId?: string(name='ClusterId', example='i137590131672134915401'),
      clusterName?: string(name='ClusterName', example='cnp_test_cluster'),
      clusterType?: string(name='ClusterType', example='AckEdgPro'),
      components?: any(name='Components', example='{}'),
      computingIpVersion?: string(name='ComputingIpVersion'),
      createTime?: string(name='CreateTime', example='1672134938'),
      hpnZone?: string(name='HpnZone'),
      nodeCount?: long(name='NodeCount', example='12'),
      nodeGroupCount?: long(name='NodeGroupCount', example='2'),
      operatingState?: string(name='OperatingState', example='initializing'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2ajbjoloa23q'),
      taskId?: string(name='TaskId', example='i156365121663149566024'),
      updateTime?: string(name='UpdateTime', example='1672134968'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Clusters'),
  nextToken?: string(name='NextToken', example='f4f9a292c17072a2'),
  requestId?: string(name='RequestId', example='2FE2B22C-CF9D-59DE-BF63-DC9B9B33A9D1'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', true, 'form', request);
}

model ListFreeNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  hpnZone?: string(name='HpnZone', position='Body'),
  machineType?: string(name='MachineType', example='mock-machine-type2', position='Body'),
  maxResults?: long(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='a3f2224a5ec7224116c4f5246120abe4', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
}

model ListFreeNodesResponseBody = {
  nextToken?: string(name='NextToken', example='a3f2224a5ec7224116c4f5246120abe4'),
  nodes?: [ 
    {
      createTime?: string(name='CreateTime', example='1652321554'),
      expiredTime?: string(name='ExpiredTime', example='1673107200'),
      hpnZone?: string(name='HpnZone'),
      machineType?: string(name='MachineType', example='efg1.nvga1'),
      nodeId?: string(name='NodeId', example='e01-cn-7pp2x193801'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sn?: string(name='Sn', example='sn_pozkHBgicd'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-j'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId', example='AA14CB86-70C4-5CB7-9E7B-6CCA77F3512B'),
}

model ListFreeNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFreeNodesResponseBody(name='body'),
}

async function listFreeNodes(request: ListFreeNodesRequest): ListFreeNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFreeNodes', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='AAAAAdQ3Z+oPlg49gsr2y8jb6wY=', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='Node', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='PodName'),
      value?: string(name='Value', example='WFT-OTC'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAdQ3Z+oPlg49gsr2y8jb6wY='),
  requestId?: string(name='RequestId', example='8F208B6D-4C42-5FD3-B6BE-E826E92A44DD'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='i15azeddnvf7uhw2oij57o0'),
      resourceType?: string(name='ResourceType', example='Cluster'),
      tagKey?: string(name='TagKey', example='env'),
      tagValue?: string(name='TagValue', example='dev'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model RebootNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId?: string(name='ClusterId', example='i15b480fbd2fcdbc2869cd80', position='Body'),
  ignoreFailedNodeTasks?: boolean(name='IgnoreFailedNodeTasks', example='False', position='Body'),
  nodes?: [ string ](name='Nodes', shrink='json', position='Body'),
}

model RebootNodesResponseBody = {
  requestId?: string(name='RequestId', example='4FD06DF0-9167-5C6F-A145-F30CA4A15D54'),
  taskId?: string(name='TaskId', example='i158475611663639202234'),
}

model RebootNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootNodesResponseBody(name='body'),
}

async function rebootNodes(request: RebootNodesRequest): RebootNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootNodes', 'POST', '/', 'json', true, 'form', request);
}

model ReimageNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId?: string(name='ClusterId', example='i15dfa12e8f27c44f4a006c2c8bb', position='Body'),
  ignoreFailedNodeTasks?: boolean(name='IgnoreFailedNodeTasks', example='False', position='Body'),
  nodes?: [ 
    {
      hostname?: string(name='Hostname', example='457db5ca-241d-11ed-9fd7-acde48001122'),
      imageId?: string(name='ImageId', example='m-8vbf8rpv2nn14y7oybjy'),
      loginPassword?: string(name='LoginPassword', example='***'),
      nodeId?: string(name='NodeId', example='e01-cn-zvp2tgykr0b'),
    }
  ](name='Nodes', shrink='json', position='Body'),
  userData?: string(name='UserData', position='Body'),
}

model ReimageNodesResponseBody = {
  requestId?: string(name='RequestId', example='15FBCD9B-C93F-54E8-A168-AADE7E66DAD2'),
  taskId?: string(name='TaskId', example='i158782151663841517926'),
}

model ReimageNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReimageNodesResponseBody(name='body'),
}

async function reimageNodes(request: ReimageNodesRequest): ReimageNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReimageNodes', 'POST', '/', 'json', true, 'form', request);
}

model RunCommandRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  commandContent: string(name='CommandContent', example='ZWNobyAxMjM=', position='Body'),
  contentEncoding?: string(name='ContentEncoding', example='Base64', position='Body'),
  description?: string(name='Description', example='testDescription', position='Body'),
  enableParameter?: boolean(name='EnableParameter', example='false', position='Body'),
  frequency?: string(name='Frequency', example='0 */20 * * * ?', position='Body'),
  name?: string(name='Name', example='testName', position='Body'),
  nodeIdList?: [ string ](name='NodeIdList', shrink='json', position='Body'),
  parameters?: map[string]any(name='Parameters', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}', shrink='json', position='Body'),
  repeatMode?: string(name='RepeatMode', example='Once', position='Body'),
  timeout?: int32(name='Timeout', example='3600', position='Body'),
  username?: string(name='Username', example='root', position='Body'),
  workingDir?: string(name='WorkingDir', example='/home/user', position='Body'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', example='t-7d2a745b412b4601b2d47f6a768d*'),
  requestId?: string(name='RequestId', description='Id of the request', example='2FE2B22C-CF9D-59DE-BF63-DC9B9B33A9D1'),
}

model RunCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCommandResponseBody(name='body'),
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommand', 'POST', '/', 'json', true, 'form', request);
}

model SendFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='Content', example='#!/bin/bash echo "Current User is :" echo $(ps | grep "$$" | awk \\"{print $2}\\") -------- oss://bucketName/objectName', position='Body'),
  contentType?: string(name='ContentType', example='PlainText', position='Body'),
  description?: string(name='Description', example='This is a test file.', position='Body'),
  fileGroup?: string(name='FileGroup', example='test', position='Body'),
  fileMode?: string(name='FileMode', example='0644', position='Body'),
  fileOwner?: string(name='FileOwner', example='root', position='Body'),
  name: string(name='Name', example='file.txt', position='Body'),
  nodeIdList: [ string ](name='NodeIdList', shrink='json', position='Body'),
  overwrite?: boolean(name='Overwrite', example='True', position='Body'),
  targetDir: string(name='TargetDir', example='/home', position='Body'),
  timeout?: int32(name='Timeout', example='600', position='Body'),
}

model SendFileResponseBody = {
  invokeId?: string(name='InvokeId', example='t-hz03la52z1zkvls'),
  requestId?: string(name='RequestId', description='Id of the request', example='3C683243-7915-57FB-9570-A2932C1C0F78'),
}

model SendFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendFileResponseBody(name='body'),
}

async function sendFile(request: SendFileRequest): SendFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendFile', 'POST', '/', 'json', true, 'form', request);
}

model ShrinkClusterRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId?: string(name='ClusterId', example='i15dfa12e8f27c44f4a006c2c8bb', position='Body'),
  ignoreFailedNodeTasks?: boolean(name='IgnoreFailedNodeTasks', example='False', position='Body'),
  nodeGroups?: [ 
    {
      nodeGroupId?: string(name='NodeGroupId', example='ng-3b6fbd24b1b845a0'),
      nodes?: [ 
        {
          nodeId?: string(name='NodeId', example='e01poc-cn-zmb2ypjdc01'),
        }
      ](name='Nodes'),
    }
  ](name='NodeGroups', shrink='json', position='Body'),
}

model ShrinkClusterResponseBody = {
  requestId?: string(name='RequestId', example='CC9FEF89-9BE5-5E03-845E-238B48D7599B'),
  taskId?: string(name='TaskId', example='i159136551662516768776'),
}

model ShrinkClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ShrinkClusterResponseBody(name='body'),
}

async function shrinkCluster(request: ShrinkClusterRequest): ShrinkClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ShrinkCluster', 'POST', '/', 'json', true, 'form', request);
}

model StopInvocationRequest {
  regionId?: string(name='RegionId', position='Host'),
  invokeId: string(name='InvokeId', example='f-hz044748dzepds0', position='Body'),
  nodeIdList?: [ string ](name='NodeIdList', shrink='json', position='Body'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A7FD7411-9395-52E8-AF42-EB3A4A55446D'),
}

model StopInvocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInvocationResponseBody(name='body'),
}

async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInvocation', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='Cluster', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', example='app'),
      value?: string(name='Value', example='v3'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='E7BB53E1-0B08-5C4E-BA66-9225548C3151'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='False', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='Cluster', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='81F648D0-5570-5351-AE98-6F501C7E957F'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

