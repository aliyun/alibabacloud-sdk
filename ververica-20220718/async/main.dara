/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ververica';
  @version = '2022-07-18';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Artifact {
  jarArtifact?: JarArtifact(name='jarArtifact'),
  kind?: string(name='kind', example='SQLSCRIPT'),
  pythonArtifact?: PythonArtifact(name='pythonArtifact'),
  sqlArtifact?: SqlArtifact(name='sqlArtifact'),
}

model AsyncResourcePlanOperationResult {
  message?: string(name='message', example='""'),
  plan?: string(name='plan', example='{\\"ssgProfiles\\":[{\\"name\\":\\"default\\",\\"cpu\\":1.13,\\"heap\\":\\"1 gb\\",\\"offHeap\\":\\"32 mb\\",\\"managed\\":{},\\"extended\\":{}}],\\"nodes\\":[{\\"id\\":1,\\"type\\":\\"StreamExecTableSourceScan\\",\\"desc\\":\\"Source: datagen_source[78]\\",\\"profile\\":{\\"group\\":\\"default\\",\\"parallelism\\":1,\\"maxParallelism\\":32768,\\"minParallelism\\":1}},{\\"id\\":2,\\"type\\":\\"StreamExecSink\\",\\"desc\\":\\"Sink: blackhole_sink[79]\\",\\"profile\\":{\\"group\\":\\"default\\",\\"parallelism\\":1,\\"maxParallelism\\":32768,\\"minParallelism\\":1}}],\\"edges\\":[{\\"source\\":1,\\"target\\":2,\\"mode\\":\\"PIPELINED\\",\\"strategy\\":\\"FORWARD\\"}],\\"vertices\\":{\\"717c7b8afebbfb7137f6f0f99beb2a94\\":[1,2]}}'),
  ticketStatus?: string(name='ticketStatus', example='FINISHED'),
}

model BasicResourceSetting {
  jobmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='jobmanagerResourceSettingSpec'),
  parallelism?: long(name='parallelism', example='4'),
  taskmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='taskmanagerResourceSettingSpec'),
}

model BasicResourceSettingSpec {
  cpu?: double(name='cpu', example='2.0'),
  memory?: string(name='memory', example='4Gi'),
}

model BatchResourceSetting {
  basicResourceSetting?: BasicResourceSetting(name='basicResourceSetting'),
  maxSlot?: long(name='maxSlot', example='10'),
}

model BriefDeploymentTarget {
  mode?: string(name='mode'),
  name?: string(name='name'),
}

model BriefResourceSetting {
  batchResourceSetting?: BatchResourceSetting(name='batchResourceSetting'),
  flinkConf?: map[string]any(name='flinkConf'),
  streamingResourceSetting?: StreamingResourceSetting(name='streamingResourceSetting'),
}

model Deployment {
  artifact?: Artifact(name='artifact'),
  batchResourceSetting?: BatchResourceSetting(name='batchResourceSetting'),
  creator?: string(name='creator', example='27846363877456****'),
  creatorName?: string(name='creatorName', example='****@streamcompute.onaliyun.com'),
  deploymentHasChanged?: boolean(name='deploymentHasChanged', example='true'),
  deploymentId?: string(name='deploymentId', example='00000000-0000-0000-0000-000000000001'),
  deploymentTarget?: BriefDeploymentTarget(name='deploymentTarget'),
  description?: string(name='description', example='this is a deployment description'),
  engineVersion?: string(name='engineVersion', example='vvr-6.0.0-flink-1.15'),
  executionMode?: string(name='executionMode', example='STREAMING | BATCH'),
  flinkConf?: map[string]any(name='flinkConf', example='{"taskmanager.numberOfTaskSlots":"1"}'),
  jobSummary?: JobSummary(name='jobSummary'),
  logging?: Logging(name='logging'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  name?: string(name='name', example='deploymentName'),
  namespace?: string(name='namespace', example='default-namespace'),
  streamingResourceSetting?: StreamingResourceSetting(name='streamingResourceSetting'),
}

model DeploymentRestoreStrategy {
  allowNonRestoredState?: boolean(name='allowNonRestoredState', example='TRUE'),
  jobStartTimeInMs?: long(name='jobStartTimeInMs', example='1660293803155'),
  kind?: string(name='kind', example='LATEST_STATE'),
  savepointId?: string(name='savepointId', example='354dde66-a3ae-463e-967a-0b4107fd****'),
}

model DeploymentTarget {
  name?: string(name='name', example='deployment target'),
  namespace?: string(name='namespace', example='namespace'),
}

model EngineVersionMetadata {
  engineVersion: string(name='engineVersion', example='vvr-6.0.0-flink-1.15'),
  features?: EngineVersionSupportedFeatures(name='features'),
  status: string(name='status', example='STABLE'),
}

model EngineVersionMetadataIndex {
  defaultEngineVersion?: string(name='defaultEngineVersion', example='vvr-6.0.1-flink-1.15'),
  engineVersionMetadata?: [
    EngineVersionMetadata
  ](name='engineVersionMetadata'),
}

model EngineVersionSupportedFeatures {
  supportNativeSavepoint?: boolean(name='supportNativeSavepoint', example='true'),
  useForSqlDeployments?: boolean(name='useForSqlDeployments', example='true'),
}

model ExpertResourceSetting {
  jobmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='jobmanagerResourceSettingSpec'),
  resourcePlan?: string(name='resourcePlan'),
}

model JarArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  entryClass?: string(name='entryClass', example='org.apapche.flink.test'),
  jarUri?: string(name='jarUri', example='https://oss//bucket//test.jar'),
  mainArgs?: string(name='mainArgs'),
}

model Job {
  artifact?: Artifact(name='artifact'),
  batchResourceSetting?: BatchResourceSetting(name='batchResourceSetting'),
  creator?: string(name='creator', example='27846363877456****'),
  creatorName?: string(name='creatorName', example='****@streamcompute.onaliyun.com'),
  deploymentId?: string(name='deploymentId', example='354dde66-a3ae-463e-967a-0b4107fd****'),
  deploymentName?: string(name='deploymentName', example='flinktest'),
  endTime?: long(name='endTime', example='1660277235'),
  engineVersion?: string(name='engineVersion', example='vvr-4.0.14-flink-1.13'),
  executionMode?: string(name='executionMode', example='BATCH'),
  flinkConf?: map[string]any(name='flinkConf'),
  jobId?: string(name='jobId', example='354dde66-a3ae-463e-967a-0b4107fd****'),
  logging?: Logging(name='logging'),
  metric?: JobMetric(name='metric'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  namespace?: string(name='namespace', example='namespacetest'),
  restoreStrategy?: DeploymentRestoreStrategy(name='restoreStrategy'),
  sessionClusterName?: string(name='sessionClusterName', example='preview'),
  startTime?: long(name='startTime', example='1660190835'),
  status?: JobStatus(name='status'),
  streamingResourceSetting?: StreamingResourceSetting(name='streamingResourceSetting'),
  userFlinkConf?: map[string]any(name='userFlinkConf'),
}

model JobFailure {
  failedAt?: long(name='failedAt', example='1660120062'),
  message?: string(name='message'),
  reason?: string(name='reason'),
}

model JobMetric {
  totalCpu?: double(name='totalCpu', example='2'),
  totalMemoryByte?: long(name='totalMemoryByte', example='4096'),
}

model JobStartParameters {
  deploymentId?: string(name='deploymentId'),
  restoreStrategy?: DeploymentRestoreStrategy(name='restoreStrategy'),
}

model JobStatus {
  currentJobStatus?: string(name='currentJobStatus', example='RUNNING'),
  failure?: JobFailure(name='failure'),
  running?: JobStatusRunning(name='running'),
}

model JobStatusRunning {
  observedFlinkJobRestarts?: long(name='observedFlinkJobRestarts', example='4'),
  observedFlinkJobStatus?: string(name='observedFlinkJobStatus', example='RUNNING'),
}

model JobSummary {
  cancelled?: int32(name='cancelled', example='1'),
  cancelling?: int32(name='cancelling', example='1'),
  failed?: int32(name='failed', example='1'),
  finished?: int32(name='finished', example='1'),
  running?: int32(name='running', example='1'),
  starting?: int32(name='starting', example='1'),
}

model Log4jLogger {
  loggerLevel?: string(name='loggerLevel', example='ERROR'),
  loggerName?: string(name='loggerName', example='StdOutErrConsoleAppender'),
}

model LogReservePolicy {
  expirationDays?: long(name='expirationDays', example='7'),
  openHistory?: boolean(name='openHistory', example='true'),
}

model Logging {
  log4j2ConfigurationTemplate?: string(name='log4j2ConfigurationTemplate', example='xml格式文本'),
  log4jLoggers?: [
    Log4jLogger
  ](name='log4jLoggers'),
  logReservePolicy?: LogReservePolicy(name='logReservePolicy'),
  loggingProfile?: string(name='loggingProfile', example='oss'),
}

model Member {
  member: string(name='member', example='user: 181319557522****'),
  role?: string(name='role', example='VIEWER'),
}

model PythonArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  additionalPythonArchives?: [ string ](name='additionalPythonArchives'),
  additionalPythonLibraries?: [ string ](name='additionalPythonLibraries'),
  entryModule?: string(name='entryModule'),
  mainArgs?: string(name='mainArgs'),
  pythonArtifactUri?: string(name='pythonArtifactUri', example='https://oss//bucket//test.py'),
}

model Savepoint {
  createdAt?: long(name='createdAt', example='1659066711'),
  deploymentId?: string(name='deploymentId', example='1d716b22-6aad-4be2-85c2-50cfc757****'),
  description?: string(name='description'),
  jobId?: string(name='jobId', example='5af678c0-7db0-4650-94c2-d2604f0a****'),
  modifiedAt?: long(name='modifiedAt', example='1659069473'),
  namespace?: string(name='namespace', example='namespacetest'),
  nativeFormat?: boolean(name='nativeFormat', example='TRUE'),
  savepointId?: string(name='savepointId', example='354dde66-a3ae-463e-967a-0b4107fd****'),
  savepointLocation?: string(name='savepointLocation', example='https://oss/bucket/flink/flink-jobs/namespaces/vvp-team/deployments/5a19a71b-1c42-4f34-94fd-86cf60782c81/checkpoints/sp-3285'),
  savepointOrigin?: string(name='savepointOrigin', example='USER_REQUEST'),
  status?: SavepointStatus(name='status'),
  stopWithDrainEnabled?: boolean(name='stopWithDrainEnabled', example='TRUE'),
}

model SavepointFailure {
  failedAt?: long(name='failedAt', example='1655006835'),
  message?: string(name='message'),
  reason?: string(name='reason'),
}

model SavepointStatus {
  failure?: SavepointFailure(name='failure'),
  state?: string(name='state', example='COMPLETED'),
}

model SqlArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  sqlScript?: string(name='sqlScript'),
}

model StartJobRequestBody {
  deploymentId?: string(name='deploymentId', example='5a19a71b-1c42-4f34-94fd-86cf60782c81'),
  resourceSettingSpec?: BriefResourceSetting(name='resourceSettingSpec'),
  restoreStrategy?: DeploymentRestoreStrategy(name='restoreStrategy'),
}

model StopJobRequestBody {
  stopStrategy: string(name='stopStrategy', example='NONE'),
}

model StreamingResourceSetting {
  basicResourceSetting?: BasicResourceSetting(name='basicResourceSetting'),
  expertResourceSetting?: ExpertResourceSetting(name='expertResourceSetting'),
  resourceSettingMode?: string(name='resourceSettingMode', example='EXPERT'),
}

model Variable {
  description?: string(name='description', example='This is a variable description'),
  kind: string(name='kind', example='Plain'),
  name: string(name='name', example='variableName'),
  value: string(name='value', example='variableValue'),
}

model CreateDeploymentRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body: Deployment(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model CreateDeploymentResponseBody = {
  data?: Deployment(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model CreateDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeploymentResponseBody(name='body'),
}

async function createDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeployment', 'POST', '/api/v2/namespaces/{namespace}/deployments', 'json', false, 'json', request);
}

model CreateMemberRequest {
  namespace: string(name='namespace', example='u-gs3rgla9-default', position='Path'),
  body?: Member(name='body', position='Body'),
  workspace: string(name='workspace', example='ca84d539167d4d', position='Header'),
}

model CreateMemberResponseBody = {
  data?: Member(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='F989CA70-2925-5A94-92B7-20F5762B71C8'),
  success?: boolean(name='success', example='True'),
}

model CreateMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMemberResponseBody(name='body'),
}

async function createMember(request: CreateMemberRequest): CreateMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMember', 'POST', '/gateway/v2/namespaces/{namespace}/members', 'json', false, 'json', request);
}

model CreateSavepointRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Body'),
  description?: string(name='description', position='Body'),
  nativeFormat?: boolean(name='nativeFormat', example='true', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model CreateSavepointResponseBody = {
  data?: Savepoint(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model CreateSavepointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSavepointResponseBody(name='body'),
}

async function createSavepoint(request: CreateSavepointRequest): CreateSavepointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSavepoint', 'POST', '/api/v2/namespaces/{namespace}/savepoints', 'json', false, 'json', request);
}

model CreateVariableRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body: Variable(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bda1c4a****', position='Header'),
}

model CreateVariableResponseBody = {
  data?: Variable(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-ABCD-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model CreateVariableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVariableResponseBody(name='body'),
}

async function createVariable(request: CreateVariableRequest): CreateVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVariable', 'POST', '/api/v2/namespaces/{namespace}/variables', 'json', false, 'json', request);
}

model DeleteDeploymentRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', example='5737ef81-d2f1-49cf-8752-30910809****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteDeploymentResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeploymentResponseBody(name='body'),
}

async function deleteDeployment(request: DeleteDeploymentRequest): DeleteDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDeployment', 'DELETE', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}', 'json', false, 'json', request);
}

model DeleteJobRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  jobId: string(name='jobId', example='5af678c0-7db0-4650-94c2-d2604f0a****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteJobResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteJob', 'DELETE', '/api/v2/namespaces/{namespace}/jobs/{jobId}', 'json', false, 'json', request);
}

model DeleteMemberRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  member: string(name='member', example='user:223769', position='Path'),
  workspace: string(name='workspace', example='710d6a64d8c34d', position='Header'),
}

model DeleteMemberResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMemberResponseBody(name='body'),
}

async function deleteMember(request: DeleteMemberRequest): DeleteMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMember', 'DELETE', '/gateway/v2/namespaces/{namespace}/members/{member}', 'json', false, 'json', request);
}

model DeleteSavepointRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  savepointId: string(name='savepointId', example='907a8f0e-4f6c-412b-8a5e-7d4a065b****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteSavepointResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteSavepointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSavepointResponseBody(name='body'),
}

async function deleteSavepoint(request: DeleteSavepointRequest): DeleteSavepointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSavepoint', 'DELETE', '/api/v2/namespaces/{namespace}/savepoints/{savepointId}', 'json', false, 'json', request);
}

model DeleteVariableRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  name: string(name='name', example='variableName', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteVariableResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteVariableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVariableResponseBody(name='body'),
}

async function deleteVariable(request: DeleteVariableRequest): DeleteVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVariable', 'DELETE', '/api/v2/namespaces/{namespace}/variables/{name}', 'json', false, 'json', request);
}

model FlinkApiProxyRequest {
  flinkApiPath: string(name='flinkApiPath', example='/jobs/4df35f8e54554b23bf7dcd38a151****', position='Query'),
  namespace: string(name='namespace', example='default-namespace', position='Query'),
  resourceId: string(name='resourceId', example='5a27a3aa-c5b9-4dc1-8c86-be57d2d6****', position='Query'),
  resourceType: string(name='resourceType', example='jobs', position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model FlinkApiProxyResponseBody = {
  data?: string(name='data', example='{ "jobs": [ { "jid": "4df35f8e54554b23bf7dcd38a151****", "name": "69d001d5-419a-4bfc-9c2e-849cacd3****", "state": "RUNNING", "start-time": 1659154942068, "end-time": -1, "duration": 188161756, "last-modification": 1659154968305, "tasks": { "total": 2, "created": 0, "scheduled": 0, "deploying": 0, "running": 2, "finished": 0, "canceling": 0, "canceled": 0, "failed": 0, "reconciling": 0, "initializing": 0 } } ] }'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model FlinkApiProxyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlinkApiProxyResponseBody(name='body'),
}

async function flinkApiProxy(request: FlinkApiProxyRequest): FlinkApiProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FlinkApiProxy', 'GET', '/flink-ui/v2/proxy', 'json', false, 'json', request);
}

model GenerateResourcePlanWithFlinkConfAsyncRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', example='737d0921-c5ac-47fc-9ba9-07a1e0b4****', position='Path'),
  body?: map[string]any(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GenerateResourcePlanWithFlinkConfAsyncResponseBody = {
  data?: {
    ticketId?: string(name='ticketId', example='b3dcdb25-bf36-457d-92ba-a36077e8****'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GenerateResourcePlanWithFlinkConfAsyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateResourcePlanWithFlinkConfAsyncResponseBody(name='body'),
}

async function generateResourcePlanWithFlinkConfAsync(request: GenerateResourcePlanWithFlinkConfAsyncRequest): GenerateResourcePlanWithFlinkConfAsyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateResourcePlanWithFlinkConfAsync', 'POST', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}/resource-plan:asyncGenerate', 'json', false, 'json', request);
}

model GetDeploymentRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetDeploymentResponseBody = {
  data?: Deployment(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeploymentResponseBody(name='body'),
}

async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeployment', 'GET', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}', 'json', false, 'json', request);
}

model GetGenerateResourcePlanResultRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  ticketId: string(name='ticketId', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetGenerateResourcePlanResultResponseBody = {
  data?: AsyncResourcePlanOperationResult(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetGenerateResourcePlanResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGenerateResourcePlanResultResponseBody(name='body'),
}

async function getGenerateResourcePlanResult(request: GetGenerateResourcePlanResultRequest): GetGenerateResourcePlanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGenerateResourcePlanResult', 'GET', '/api/v2/namespaces/{namespace}/deployments/tickets/{ticketId}/resource-plan:asyncGenerate', 'json', false, 'json', request);
}

model GetJobRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  jobId: string(name='jobId', example='5af678c0-7db0-4650-94c2-d2604f0a****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetJobResponseBody = {
  data?: Job(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobResponseBody(name='body'),
}

async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJob', 'GET', '/api/v2/namespaces/{namespace}/jobs/{jobId}', 'json', false, 'json', request);
}

model GetMemberRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  member: string(name='member', example='user:223769', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetMemberResponseBody = {
  data?: Member(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMemberResponseBody(name='body'),
}

async function getMember(request: GetMemberRequest): GetMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMember', 'GET', '/gateway/v2/namespaces/{namespace}/members/{member}', 'json', false, 'json', request);
}

model GetSavepointRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  savepointId: string(name='savepointId', description='Savepoint ID。', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetSavepointResponseBody = {
  data?: Savepoint(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetSavepointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSavepointResponseBody(name='body'),
}

async function getSavepoint(request: GetSavepointRequest): GetSavepointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSavepoint', 'GET', '/api/v2/namespaces/{namespace}/savepoints/{savepointId}', 'json', false, 'json', request);
}

model ListDeploymentTargetsRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListDeploymentTargetsResponseBody = {
  data?: [
    DeploymentTarget
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='1'),
}

model ListDeploymentTargetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeploymentTargetsResponseBody(name='body'),
}

async function listDeploymentTargets(request: ListDeploymentTargetsRequest): ListDeploymentTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeploymentTargets', 'GET', '/api/v2/namespaces/{namespace}/deployment-targets', 'json', false, 'json', request);
}

model ListDeploymentsRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  executionMode?: string(name='executionMode', position='Query'),
  name?: string(name='name', position='Query'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListDeploymentsResponseBody = {
  data?: [
    Deployment
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='1'),
}

model ListDeploymentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeploymentsResponseBody(name='body'),
}

async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeployments', 'GET', '/api/v2/namespaces/{namespace}/deployments', 'json', false, 'json', request);
}

model ListEngineVersionMetadataRequest {
  regionId?: string(name='RegionId', position='Host'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListEngineVersionMetadataResponseBody = {
  data?: EngineVersionMetadataIndex(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model ListEngineVersionMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEngineVersionMetadataResponseBody(name='body'),
}

async function listEngineVersionMetadata(request: ListEngineVersionMetadataRequest): ListEngineVersionMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEngineVersionMetadata', 'GET', '/api/v2/engine-version-meta.json', 'json', false, 'json', request);
}

model ListJobsRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Query'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListJobsResponseBody = {
  data?: [
    Job
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='1'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobs', 'GET', '/api/v2/namespaces/{namespace}/jobs', 'json', false, 'json', request);
}

model ListMembersRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListMembersResponseBody = {
  data?: [
    Member
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='50'),
}

model ListMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMembersResponseBody(name='body'),
}

async function listMembers(request: ListMembersRequest): ListMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMembers', 'GET', '/gateway/v2/namespaces/{namespace}/members', 'json', false, 'json', request);
}

model ListSavepointsRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId?: string(name='deploymentId', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Query'),
  jobId?: string(name='jobId', example='99a8fc49-e090-430a-85d8-3ee8c79c****', position='Query'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListSavepointsResponseBody = {
  data?: [
    Savepoint
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='1'),
}

model ListSavepointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSavepointsResponseBody(name='body'),
}

async function listSavepoints(request: ListSavepointsRequest): ListSavepointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSavepoints', 'GET', '/api/v2/namespaces/{namespace}/savepoints', 'json', false, 'json', request);
}

model ListVariablesRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bda1c4a****', position='Header'),
}

model ListVariablesResponseBody = {
  data?: [
    Variable
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-ABCF-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='1'),
}

model ListVariablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVariablesResponseBody(name='body'),
}

async function listVariables(request: ListVariablesRequest): ListVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVariables', 'GET', '/api/v2/namespaces/{namespace}/variables', 'json', false, 'json', request);
}

model StartJobRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body: StartJobRequestBody(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model StartJobResponseBody = {
  data?: Job(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model StartJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartJobResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function startJob(request: StartJobRequest): StartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartJob', 'POST', '/api/v2/namespaces/{namespace}/jobs', 'json', false, 'json', request);
}

model StartJobWithParamsRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body?: JobStartParameters(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model StartJobWithParamsResponseBody = {
  data?: Job(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model StartJobWithParamsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartJobWithParamsResponseBody(name='body'),
}

async function startJobWithParams(request: StartJobWithParamsRequest): StartJobWithParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartJobWithParams', 'POST', '/api/v2/namespaces/{namespace}/jobs:start', 'json', false, 'json', request);
}

model StopJobRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  jobId: string(name='jobId', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Path'),
  body: StopJobRequestBody(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model StopJobResponseBody = {
  data?: Job(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model StopJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopJobResponseBody(name='body'),
}

async function stopJob(request: StopJobRequest): StopJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopJob', 'POST', '/api/v2/namespaces/{namespace}/jobs/{jobId}:stop', 'json', false, 'json', request);
}

model UpdateDeploymentRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Path'),
  body: Deployment(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model UpdateDeploymentResponseBody = {
  data?: Deployment(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model UpdateDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeploymentResponseBody(name='body'),
}

async function updateDeployment(request: UpdateDeploymentRequest): UpdateDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDeployment', 'PUT', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}', 'json', false, 'json', request);
}

model UpdateMemberRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body?: Member(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model UpdateMemberResponseBody = {
  data?: Member(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model UpdateMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMemberResponseBody(name='body'),
}

async function updateMember(request: UpdateMemberRequest): UpdateMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMember', 'PUT', '/gateway/v2/namespaces/{namespace}/members', 'json', false, 'json', request);
}

