/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ververica';
  @version = '2022-07-18';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Artifact {
  jarArtifact?: JarArtifact(name='jarArtifact'),
  kind?: string(name='kind', example='SQLSCRIPT'),
  pythonArtifact?: PythonArtifact(name='pythonArtifact'),
  sqlArtifact?: SqlArtifact(name='sqlArtifact'),
}

model AsyncDraftDeployResult {
  artifactValidationDetail?: ValidateStatementResult(name='artifactValidationDetail'),
  deploymentId?: string(name='deploymentId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  message?: string(name='message', example='"Validation error: SQL validate failed"'),
  success?: boolean(name='success', example='true'),
  ticketStatus?: string(name='ticketStatus', example='FINISHED'),
}

model AsyncResourcePlanOperationResult {
  message?: string(name='message', example='""'),
  plan?: string(name='plan', example='{\\"ssgProfiles\\":[{\\"name\\":\\"default\\",\\"cpu\\":1.13,\\"heap\\":\\"1 gb\\",\\"offHeap\\":\\"32 mb\\",\\"managed\\":{},\\"extended\\":{}}],\\"nodes\\":[{\\"id\\":1,\\"type\\":\\"StreamExecTableSourceScan\\",\\"desc\\":\\"Source: datagen_source[78]\\",\\"profile\\":{\\"group\\":\\"default\\",\\"parallelism\\":1,\\"maxParallelism\\":32768,\\"minParallelism\\":1}},{\\"id\\":2,\\"type\\":\\"StreamExecSink\\",\\"desc\\":\\"Sink: blackhole_sink[79]\\",\\"profile\\":{\\"group\\":\\"default\\",\\"parallelism\\":1,\\"maxParallelism\\":32768,\\"minParallelism\\":1}}],\\"edges\\":[{\\"source\\":1,\\"target\\":2,\\"mode\\":\\"PIPELINED\\",\\"strategy\\":\\"FORWARD\\"}],\\"vertices\\":{\\"717c7b8afebbfb7137f6f0f99beb2a94\\":[1,2]}}'),
  ticketStatus?: string(name='ticketStatus', example='FINISHED'),
}

model BasicResourceSetting {
  jobmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='jobmanagerResourceSettingSpec'),
  parallelism?: long(name='parallelism', example='4'),
  taskmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='taskmanagerResourceSettingSpec'),
}

model BasicResourceSettingSpec {
  cpu?: double(name='cpu', example='2.0'),
  memory?: string(name='memory', example='4Gi'),
}

model BatchResourceSetting {
  basicResourceSetting?: BasicResourceSetting(name='basicResourceSetting'),
  maxSlot?: long(name='maxSlot', example='10'),
}

model BriefDeploymentTarget {
  mode?: string(name='mode'),
  name?: string(name='name'),
}

model BriefResourceSetting {
  batchResourceSetting?: BatchResourceSetting(name='batchResourceSetting'),
  flinkConf?: map[string]any(name='flinkConf'),
  streamingResourceSetting?: StreamingResourceSetting(name='streamingResourceSetting'),
}

model Catalog {
  name?: string(name='name'),
  properties?: map[string]any(name='properties'),
}

model Connector {
  creator?: string(name='creator'),
  creatorName?: string(name='creatorName'),
  dependencies?: [ string ](name='dependencies'),
  lookup?: boolean(name='lookup'),
  modifier?: string(name='modifier'),
  modifierName?: string(name='modifierName'),
  name?: string(name='name'),
  properties?: [
    Property
  ](name='properties'),
  sink?: boolean(name='sink'),
  source?: boolean(name='source'),
  supportedFormats?: [ string ](name='supportedFormats'),
  type?: string(name='type'),
}

model CreateUdfArtifactResult {
  collidingClasses?: [
    UdfClass
  ](name='collidingClasses'),
  createSuccess?: boolean(name='createSuccess'),
  message?: string(name='message'),
  udfArtifact?: UdfArtifact(name='udfArtifact'),
}

model Database {
  comment?: string(name='comment'),
  name?: string(name='name'),
  properties?: map[string]any(name='properties'),
}

model DeleteUdfArtifactResult {
  deleteSuccess?: boolean(name='deleteSuccess'),
  message?: string(name='message'),
  referencedClasses?: [
    UdfClass
  ](name='referencedClasses'),
}

model Deployment {
  artifact?: Artifact(name='artifact'),
  batchResourceSetting?: BatchResourceSetting(name='batchResourceSetting'),
  createdAt?: string(name='createdAt'),
  creator?: string(name='creator', example='27846363877456****'),
  creatorName?: string(name='creatorName', example='****@streamcompute.onaliyun.com'),
  deploymentHasChanged?: boolean(name='deploymentHasChanged', example='true'),
  deploymentId?: string(name='deploymentId', example='00000000-0000-0000-0000-000000000001'),
  deploymentTarget?: BriefDeploymentTarget(name='deploymentTarget'),
  description?: string(name='description', example='this is a deployment description'),
  engineVersion?: string(name='engineVersion', example='vvr-6.0.0-flink-1.15'),
  executionMode?: string(name='executionMode', example='STREAMING | BATCH'),
  flinkConf?: map[string]any(name='flinkConf', example='{"taskmanager.numberOfTaskSlots":"1"}'),
  jobSummary?: JobSummary(name='jobSummary'),
  labels?: map[string]any(name='labels'),
  localVariables?: [
    LocalVariable
  ](name='localVariables'),
  logging?: Logging(name='logging'),
  modifiedAt?: string(name='modifiedAt'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  name?: string(name='name', example='deploymentName'),
  namespace?: string(name='namespace', example='default-namespace'),
  referencedDeploymentDraftId?: string(name='referencedDeploymentDraftId', example='00000000-0000-0000-0000-000000000003'),
  streamingResourceSetting?: StreamingResourceSetting(name='streamingResourceSetting'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model DeploymentDraft {
  artifact?: Artifact(name='artifact'),
  createdAt?: long(name='createdAt'),
  creator?: string(name='creator', example='27846363877456****'),
  creatorName?: string(name='creatorName', example='****@streamcompute.onaliyun.com'),
  deploymentDraftId?: string(name='deploymentDraftId', example='00000000-0000-0000-0000-00000012****'),
  engineVersion?: string(name='engineVersion', example='vvr-6.0.7-flink-1.15'),
  executionMode?: string(name='executionMode', example='STREAMING'),
  labels?: map[string]any(name='labels'),
  localVariables?: [
    LocalVariable
  ](name='localVariables'),
  lock?: Lock(name='lock'),
  modifiedAt?: long(name='modifiedAt'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  name?: string(name='name', example='test-draft'),
  namespace?: string(name='namespace', example='default-namespace'),
  parentId?: string(name='parentId', example='00000000-0000-0000-0000-00000013****'),
  referencedDeploymentId?: string(name='referencedDeploymentId', example='00000000-0000-0000-0000-0000012312****'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model DeploymentRestoreStrategy {
  allowNonRestoredState?: boolean(name='allowNonRestoredState', example='TRUE'),
  jobStartTimeInMs?: long(name='jobStartTimeInMs', example='1660293803155'),
  kind?: string(name='kind', example='LATEST_STATE'),
  savepointId?: string(name='savepointId', example='354dde66-a3ae-463e-967a-0b4107fd****'),
}

model DeploymentTarget {
  name?: string(name='name', example='deployment target'),
  namespace?: string(name='namespace', example='namespace'),
  quota?: ResourceQuota(name='quota'),
}

model DraftDeployParams {
  deploymentDraftId?: string(name='deploymentDraftId'),
  deploymentTarget?: BriefDeploymentTarget(name='deploymentTarget'),
  skipValidate?: boolean(name='skipValidate', example='false'),
}

model DraftDeployResult {
  artifactValidationDetail?: ValidateStatementResult(name='artifactValidationDetail'),
  deploymentId?: string(name='deploymentId', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****'),
  message?: string(name='message', example='""'),
  success?: boolean(name='success', example='true'),
}

model Edge {
  columnLineage?: [
    Relation
  ](name='columnLineage'),
  tableLineage?: [
    Relation
  ](name='tableLineage'),
}

model EditableNamespace {
  namespace?: string(name='Namespace'),
  role?: string(name='Role'),
  workspaceId?: string(name='WorkspaceId'),
}

model EngineVersionMetadata {
  engineVersion: string(name='engineVersion', example='vvr-6.0.0-flink-1.15'),
  features?: EngineVersionSupportedFeatures(name='features'),
  status: string(name='status', example='STABLE'),
}

model EngineVersionMetadataIndex {
  defaultEngineVersion?: string(name='defaultEngineVersion', example='vvr-6.0.1-flink-1.15'),
  engineVersionMetadata?: [
    EngineVersionMetadata
  ](name='engineVersionMetadata'),
}

model EngineVersionSupportedFeatures {
  supportNativeSavepoint?: boolean(name='supportNativeSavepoint', example='true'),
  useForSqlDeployments?: boolean(name='useForSqlDeployments', example='true'),
}

model ErrorDetails {
  columnNumber?: string(name='columnNumber'),
  endColumnNumber?: string(name='endColumnNumber'),
  endLineNumber?: string(name='endLineNumber'),
  invalidflinkConf?: [ string ](name='invalidflinkConf'),
  lineNumber?: string(name='lineNumber'),
  message?: string(name='message'),
}

model Event {
  createdAt?: long(name='createdAt'),
  deploymentId?: string(name='deploymentId', example='00000000-0000-0000-0000-000000680003'),
  eventId?: string(name='eventId', example='00000000-0000-0000-0000-000000000001'),
  eventName?: string(name='eventName', example='STATE_TRANSITION_IS_COMPLETED'),
  jobId?: string(name='jobId', example='00000000-0000-0000-0000-000000005043'),
  message?: string(name='message'),
  namespace?: string(name='namespace', example='default-namespace'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model ExpertResourceSetting {
  jobmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='jobmanagerResourceSettingSpec'),
  resourcePlan?: string(name='resourcePlan'),
}

model Folder {
  createdAt?: long(name='createdAt'),
  folderId?: string(name='folderId', example='00000000-0000-0000-0000-0000012312****'),
  modifiedAt?: long(name='modifiedAt'),
  name?: string(name='name', example='test'),
  namespace?: string(name='namespace', example='default-namespace'),
  parentId?: string(name='parentId', example='00000000-0000-0000-0000-0000012390****'),
  subFolder?: [
    SubFolder
  ](name='subFolder'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model GetLineageInfoParams {
  depth?: long(name='depth'),
  direction?: string(name='direction'),
  id?: string(name='id'),
  idType?: string(name='idType'),
  isColumnLevel?: boolean(name='isColumnLevel'),
  isTemporary?: boolean(name='isTemporary'),
  namespace?: string(name='namespace'),
  workspace?: string(name='workspace'),
}

model HotUpdateJobFailureInfo {
  failureSeverity?: string(name='failureSeverity'),
  message?: string(name='message'),
  reason?: string(name='reason'),
}

model HotUpdateJobParams {
  rescaleJobParam?: RescaleJobParam(name='rescaleJobParam'),
  updateJobConfigParam?: UpdateJobConfigParam(name='updateJobConfigParam'),
}

model HotUpdateJobResult {
  hotUpdateParams?: HotUpdateJobParams(name='hotUpdateParams'),
  jobHotUpdateId?: string(name='jobHotUpdateId'),
  jobId?: string(name='jobId'),
  status?: HotUpdateJobStatus(name='status'),
  targetResourceSetting?: BriefResourceSetting(name='targetResourceSetting'),
}

model HotUpdateJobStatus {
  failure?: HotUpdateJobFailureInfo(name='failure'),
  requestId?: string(name='requestId'),
  status?: string(name='status'),
}

model JarArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  entryClass?: string(name='entryClass', example='org.apapche.flink.test'),
  jarUri?: string(name='jarUri', example='https://oss//bucket//test.jar'),
  mainArgs?: string(name='mainArgs'),
}

model Job {
  artifact?: Artifact(name='artifact'),
  batchResourceSetting?: BatchResourceSetting(name='batchResourceSetting'),
  createdAt?: string(name='createdAt'),
  creator?: string(name='creator', example='27846363877456****'),
  creatorName?: string(name='creatorName', example='****@streamcompute.onaliyun.com'),
  deploymentId?: string(name='deploymentId', example='354dde66-a3ae-463e-967a-0b4107fd****'),
  deploymentName?: string(name='deploymentName', example='flinktest'),
  endTime?: long(name='endTime', example='1660277235'),
  engineVersion?: string(name='engineVersion', example='vvr-4.0.14-flink-1.13'),
  executionMode?: string(name='executionMode', example='BATCH'),
  flinkConf?: map[string]any(name='flinkConf'),
  jobId?: string(name='jobId', example='354dde66-a3ae-463e-967a-0b4107fd****'),
  localVariables?: [
    LocalVariable
  ](name='localVariables'),
  logging?: Logging(name='logging'),
  metric?: JobMetric(name='metric'),
  modifiedAt?: string(name='modifiedAt'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  namespace?: string(name='namespace', example='namespacetest'),
  restoreStrategy?: DeploymentRestoreStrategy(name='restoreStrategy'),
  sessionClusterName?: string(name='sessionClusterName', example='preview'),
  startTime?: long(name='startTime', example='1660190835'),
  status?: JobStatus(name='status'),
  streamingResourceSetting?: StreamingResourceSetting(name='streamingResourceSetting'),
  userFlinkConf?: map[string]any(name='userFlinkConf'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model JobFailure {
  failedAt?: long(name='failedAt', example='1660120062'),
  message?: string(name='message'),
  reason?: string(name='reason'),
}

model JobInfo {
  id?: string(name='id'),
  properties?: map[string]any(name='properties'),
}

model JobMetric {
  totalCpu?: double(name='totalCpu', example='2'),
  totalMemoryByte?: long(name='totalMemoryByte', example='4096'),
}

model JobStartParameters {
  deploymentId?: string(name='deploymentId'),
  jobId?: string(name='jobId'),
  localVariables?: [
    LocalVariable
  ](name='localVariables'),
  resourceQueueName?: string(name='resourceQueueName', example='default-queue'),
  restoreStrategy?: DeploymentRestoreStrategy(name='restoreStrategy'),
}

model JobStatus {
  currentJobStatus?: string(name='currentJobStatus', example='RUNNING'),
  failure?: JobFailure(name='failure'),
  running?: JobStatusRunning(name='running'),
}

model JobStatusRunning {
  observedFlinkJobRestarts?: long(name='observedFlinkJobRestarts', example='4'),
  observedFlinkJobStatus?: string(name='observedFlinkJobStatus', example='RUNNING'),
}

model JobSummary {
  cancelled?: int32(name='cancelled', example='1'),
  cancelling?: int32(name='cancelling', example='1'),
  failed?: int32(name='failed', example='1'),
  finished?: int32(name='finished', example='1'),
  running?: int32(name='running', example='1'),
  starting?: int32(name='starting', example='1'),
}

model LineageColumn {
  columnName?: string(name='columnName'),
  columnNativeType?: string(name='columnNativeType'),
  columnType?: string(name='columnType'),
  createdAt?: long(name='createdAt'),
  creator?: string(name='creator'),
  description?: string(name='description'),
  id?: string(name='id'),
  modifiedAt?: long(name='modifiedAt'),
  modifier?: string(name='modifier'),
  nullable?: boolean(name='nullable'),
}

model LineageInfo {
  edges?: Edge(name='edges'),
  jobInfos?: [
    JobInfo
  ](name='jobInfos'),
  nodes?: [
    Node
  ](name='nodes'),
}

model LineageTable {
  columns?: [
    LineageColumn
  ](name='columns'),
  id?: string(name='id'),
  properties?: map[string]any(name='properties'),
  tableName?: string(name='tableName'),
  with?: map[string]any(name='with'),
}

model LocalVariable {
  name?: string(name='name', example='test'),
  value?: string(name='value', example='datagen'),
}

model Lock {
  holderId?: string(name='holderId'),
  holderName?: string(name='holderName'),
  id?: string(name='id'),
  namespace?: string(name='namespace'),
  workspace?: string(name='workspace'),
}

model Log4jLogger {
  loggerLevel?: string(name='loggerLevel', example='ERROR'),
  loggerName?: string(name='loggerName', example='StdOutErrConsoleAppender'),
}

model LogReservePolicy {
  expirationDays?: long(name='expirationDays', example='7'),
  openHistory?: boolean(name='openHistory', example='true'),
}

model Logging {
  log4j2ConfigurationTemplate?: string(name='log4j2ConfigurationTemplate', example='xml格式文本'),
  log4jLoggers?: [
    Log4jLogger
  ](name='log4jLoggers'),
  logReservePolicy?: LogReservePolicy(name='logReservePolicy'),
  loggingProfile?: string(name='loggingProfile', example='oss'),
}

model Member {
  member: string(name='member', example='user: 181319557522****'),
  role?: string(name='role', example='VIEWER'),
}

model MetadataInfo {
  key?: string(name='key'),
  virtual?: boolean(name='virtual'),
}

model Node {
  catalogName?: string(name='catalogName'),
  connector?: string(name='connector'),
  databaseName?: string(name='databaseName'),
  id?: string(name='id'),
  isTemporary?: boolean(name='isTemporary'),
  tables?: [
    LineageTable
  ](name='tables'),
}

model PeriodicSchedulingPolicy {
  isFinished?: boolean(name='isFinished'),
  onlyOnceTriggerTime?: long(name='onlyOnceTriggerTime', example='1723195800000'),
  onlyOnceTriggerTimeIsExpired?: boolean(name='onlyOnceTriggerTimeIsExpired', example='true'),
  periodicSchedulingLevel?: string(name='periodicSchedulingLevel', example='DAY'),
  periodicSchedulingValues?: [ int32 ](name='periodicSchedulingValues'),
  periodicTriggerTime?: long(name='periodicTriggerTime', example='1723199340000'),
  resourceSetting?: BriefResourceSetting(name='resourceSetting'),
}

model PrimaryKey {
  columns?: [ string ](name='columns'),
  constraintName?: string(name='constraintName'),
}

model Property {
  defaultValue?: string(name='defaultValue'),
  definesFormat?: boolean(name='definesFormat'),
  description?: string(name='description'),
  key?: string(name='key'),
  required?: boolean(name='required'),
  sensitive?: boolean(name='sensitive'),
}

model PythonArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  additionalPythonArchives?: [ string ](name='additionalPythonArchives'),
  additionalPythonLibraries?: [ string ](name='additionalPythonLibraries'),
  entryModule?: string(name='entryModule'),
  mainArgs?: string(name='mainArgs'),
  pythonArtifactUri?: string(name='pythonArtifactUri', example='https://oss//bucket//test.py'),
}

model Relation {
  destination?: string(name='destination'),
  jobId?: string(name='jobId'),
  source?: string(name='source'),
}

model RescaleJobParam {
  jobParallelism?: long(name='jobParallelism'),
}

model ResourceQuota {
  limit?: ResourceSpec(name='limit'),
  used?: ResourceSpec(name='used'),
}

model ResourceSpec {
  cpu?: double(name='cpu', example='1.0'),
  memory?: string(name='memory', example='4Gi'),
}

model Savepoint {
  createdAt?: long(name='createdAt', example='1659066711'),
  deploymentId?: string(name='deploymentId', example='1d716b22-6aad-4be2-85c2-50cfc757****'),
  description?: string(name='description'),
  jobId?: string(name='jobId', example='5af678c0-7db0-4650-94c2-d2604f0a****'),
  modifiedAt?: long(name='modifiedAt', example='1659069473'),
  namespace?: string(name='namespace', example='namespacetest'),
  nativeFormat?: boolean(name='nativeFormat', example='TRUE'),
  savepointId?: string(name='savepointId', example='354dde66-a3ae-463e-967a-0b4107fd****'),
  savepointLocation?: string(name='savepointLocation', example='https://oss/bucket/flink/flink-jobs/namespaces/vvp-team/deployments/5a19a71b-1c42-4f34-94fd-86cf60782c81/checkpoints/sp-3285'),
  savepointOrigin?: string(name='savepointOrigin', example='USER_REQUEST'),
  status?: SavepointStatus(name='status'),
  stopWithDrainEnabled?: boolean(name='stopWithDrainEnabled', example='TRUE'),
}

model SavepointFailure {
  failedAt?: long(name='failedAt', example='1655006835'),
  message?: string(name='message'),
  reason?: string(name='reason'),
}

model SavepointStatus {
  failure?: SavepointFailure(name='failure'),
  state?: string(name='state', example='COMPLETED'),
}

model ScheduledPlan {
  createdAt?: string(name='createdAt', example='1723197248'),
  creator?: string(name='creator', example='27846363877456****'),
  creatorName?: string(name='creatorName', example='****@streamcompute.onaliyun.com'),
  deploymentId?: string(name='deploymentId', example='00000000-0000-0000-0000-000000000001'),
  modifiedAt?: string(name='modifiedAt', example='1723197248'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  name?: string(name='name', example='test-scheduled-plan'),
  namespace?: string(name='namespace', example='default-namespace'),
  origin?: string(name='origin', example='USER_DEFINED'),
  periodicSchedulingPolicies?: [
    PeriodicSchedulingPolicy
  ](name='periodicSchedulingPolicies'),
  scheduledPlanId?: string(name='scheduledPlanId', example='f3b4ec1e-85dc-4b1d-9726-1d7f4c37****'),
  status?: string(name='status', example='FINISHED'),
  updatedByUser?: boolean(name='updatedByUser', example='true'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model ScheduledPlanAppliedInfo {
  deploymentId?: string(name='deploymentId', example='00000000-0000-0000-0000-000000000001'),
  expectedState?: string(name='expectedState', example='RUNNING'),
  modifiedAt?: string(name='modifiedAt', example='1723197248'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  namespace?: string(name='namespace', example='default-namespace'),
  scheduledPlanId?: string(name='scheduledPlanId', example='f3b4ec1e-85dc-4b1d-9726-1d7f4c37****'),
  scheduledPlanName?: string(name='scheduledPlanName', example='test-scheduled-plan'),
  statusState?: string(name='statusState', example='WAITING'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model ScheduledPlanExecutedInfo {
  createdAt?: string(name='createdAt', example='1723197248'),
  creator?: string(name='creator', example='27846363877456****'),
  creatorName?: string(name='creatorName', example='****@streamcompute.onaliyun.com'),
  deploymentId?: string(name='deploymentId', example='00000000-0000-0000-0000-000000000001'),
  jobResourceUpgradingId?: string(name='jobResourceUpgradingId', example='0e6d3bab-2277-4ed1-b573-9de6413d****'),
  modifiedAt?: string(name='modifiedAt', example='1723197248'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  name?: string(name='name', example='test-scheduled-plan'),
  namespace?: string(name='namespace', example='default-namespace'),
  origin?: string(name='origin', example='SCHEDULED_PLAN'),
  originJobId?: string(name='originJobId', example='f8a2d5d9-9fc5-4273-bfcc-2a3cd354****'),
  status?: ScheduledPlanExecutedStatus(name='status'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model ScheduledPlanExecutedStatus {
  restartType?: string(name='restartType', example='HOT_UPDATE'),
  statusState?: string(name='statusState', example='UPGRADED'),
}

model Schema {
  columns?: [
    TableColumn
  ](name='columns'),
  primaryKey?: PrimaryKey(name='primaryKey'),
  watermarkSpecs?: [
    WatermarkSpec
  ](name='watermarkSpecs'),
}

model SessionCluster {
  basicResourceSetting?: BasicResourceSetting(name='basicResourceSetting'),
  createdAt?: long(name='createdAt'),
  creator?: string(name='creator', example='27846363877456****'),
  creatorName?: string(name='creatorName', example='****@streamcompute.onaliyun.com'),
  deploymentTargetName?: string(name='deploymentTargetName', example='default-queue'),
  engineVersion?: string(name='engineVersion', example='vvr-6.0.7-flink-1.15'),
  flinkConf?: map[string]any(name='flinkConf', example='{"taskmanager.numberOfTaskSlots":"1"}'),
  labels?: map[string]any(name='labels'),
  logging?: Logging(name='logging'),
  modifiedAt?: long(name='modifiedAt'),
  modifier?: string(name='modifier', example='27846363877456****'),
  modifierName?: string(name='modifierName', example='****@streamcompute.onaliyun.com'),
  name?: string(name='name', example='test-sessionCluster'),
  namespace?: string(name='namespace', example='default-namespace'),
  sessionClusterId?: string(name='sessionClusterId', example='1f68a52c-1760-43c6-97fb-afe0674b****'),
  status?: SessionClusterStatus(name='status'),
  workspace?: string(name='workspace', example='edcef******b4f'),
}

model SessionClusterFailureInfo {
  failedAt?: long(name='failedAt'),
  message?: string(name='message'),
  reason?: string(name='reason'),
}

model SessionClusterRunningInfo {
  lastUpdateTime?: long(name='lastUpdateTime'),
  referenceDeploymentIds?: [ string ](name='referenceDeploymentIds'),
  startedAt?: long(name='startedAt'),
}

model SessionClusterStatus {
  currentSessionClusterStatus?: string(name='currentSessionClusterStatus'),
  failure?: SessionClusterFailureInfo(name='failure'),
  running?: SessionClusterRunningInfo(name='running'),
}

model SqlArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  sqlScript?: string(name='sqlScript'),
}

model SqlStatementExecuteResult {
  errorDetails?: ErrorDetails(name='errorDetails'),
  executeSuccess?: boolean(name='executeSuccess'),
  statement?: string(name='statement'),
}

model SqlStatementValidationResult {
  errorDetails?: ErrorDetails(name='errorDetails'),
  message?: string(name='message'),
  success?: boolean(name='success'),
  validationResult?: string(name='validationResult'),
}

model SqlStatementWithContext {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  batchMode: boolean(name='batchMode'),
  flinkConfiguration?: map[string]any(name='flinkConfiguration'),
  statement: string(name='statement'),
  versionName?: string(name='versionName'),
}

model StartJobRequestBody {
  deploymentId?: string(name='deploymentId', example='5a19a71b-1c42-4f34-94fd-86cf60782c81'),
  resourceSettingSpec?: BriefResourceSetting(name='resourceSettingSpec'),
  restoreStrategy?: DeploymentRestoreStrategy(name='restoreStrategy'),
}

model StopJobRequestBody {
  stopStrategy: string(name='stopStrategy', example='NONE'),
}

model StreamingResourceSetting {
  basicResourceSetting?: BasicResourceSetting(name='basicResourceSetting'),
  expertResourceSetting?: ExpertResourceSetting(name='expertResourceSetting'),
  resourceSettingMode?: string(name='resourceSettingMode', example='EXPERT'),
}

model SubFolder {
  folderId?: string(name='folderId', example='a579aec9-1d5e-3382-9d65-9887ff6cfaff'),
  name?: string(name='name', example='test'),
  parentId?: string(name='parentId', example='95c0787c-408f-4e1f-88ba-ef0a84a2c2ee'),
}

model Table {
  comment?: string(name='comment'),
  name?: string(name='name'),
  partitionKeys?: [ string ](name='partitionKeys'),
  properties?: map[string]any(name='properties'),
  schema?: Schema(name='schema'),
}

model TableColumn {
  expression?: string(name='expression'),
  metadataInfo?: MetadataInfo(name='metadataInfo'),
  name?: string(name='name'),
  nullable?: boolean(name='nullable'),
  type?: string(name='type'),
}

model TableMeta {
  catalogName?: string(name='catalogName'),
  databaseName?: string(name='databaseName'),
  tableName?: string(name='tableName'),
}

model UdfArtifact {
  artifactType?: string(name='artifactType'),
  createdAt?: long(name='createdAt'),
  creator?: string(name='creator'),
  dependencyJarUris?: [ string ](name='dependencyJarUris'),
  jarUrl?: string(name='jarUrl'),
  modifiedAt?: long(name='modifiedAt'),
  name?: string(name='name'),
  namespace?: string(name='namespace'),
  udfClasses?: [
    UdfClass
  ](name='udfClasses'),
}

model UdfClass {
  className?: string(name='className'),
  classType?: string(name='classType'),
  functionNames?: [ string ](name='functionNames'),
  udfArtifactName?: string(name='udfArtifactName'),
}

model UdfFunction {
  className?: string(name='className'),
  functionName?: string(name='functionName'),
  udfArtifactName?: string(name='udfArtifactName'),
}

model UpdateJobConfigParam {
  newFlinkConf?: map[string]any(name='newFlinkConf'),
}

model UpdateUdfArtifactResult {
  collidingClasses?: [
    UdfClass
  ](name='collidingClasses'),
  message?: string(name='message'),
  missingClasses?: [
    UdfClass
  ](name='missingClasses'),
  udfArtifact?: UdfArtifact(name='udfArtifact'),
  updateSuccess?: boolean(name='updateSuccess'),
}

model ValidateStatementResult {
  errorDetails?: ValidationErrorDetails(name='errorDetails'),
  validationResult?: string(name='validationResult', example='"there have some errors""'),
}

model ValidationErrorDetails {
  columnNumber?: string(name='columnNumber'),
  endColumnNumber?: string(name='endColumnNumber'),
  endLineNumber?: string(name='endLineNumber'),
  lineNumber?: string(name='lineNumber'),
  message?: string(name='message'),
}

model Variable {
  description?: string(name='description', example='This is a variable description'),
  kind: string(name='kind', example='Plain'),
  name: string(name='name', example='variableName'),
  value: string(name='value', example='variableValue'),
}

model WatermarkSpec {
  column?: string(name='column'),
  watermarkExpression?: string(name='watermarkExpression'),
}

model ApplyScheduledPlanRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  scheduledPlanId: string(name='scheduledPlanId', example='f420c2e7-6d3f-4683-81d0-3ea8585*****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ApplyScheduledPlanResponseBody = {
  data?: ScheduledPlanAppliedInfo(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model ApplyScheduledPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyScheduledPlanResponseBody(name='body'),
}

async function applyScheduledPlan(request: ApplyScheduledPlanRequest): ApplyScheduledPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyScheduledPlan', 'POST', '/api/v2/namespaces/{namespace}/scheduled-plans/{scheduledPlanId}:apply', 'json', false, 'json', request);
}

model CreateDeploymentRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  body: Deployment(name='body', description='The content of the deployment.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model CreateDeploymentResponseBody = {
  data?: Deployment(name='data', description='*   If the value of success was true, the deployment that you created was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeploymentResponseBody(name='body'),
}

async function createDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeployment', 'POST', '/api/v2/namespaces/{namespace}/deployments', 'json', false, 'json', request);
}

model CreateDeploymentDraftRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body: DeploymentDraft(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model CreateDeploymentDraftResponseBody = {
  data?: DeploymentDraft(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model CreateDeploymentDraftResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeploymentDraftResponseBody(name='body'),
}

async function createDeploymentDraft(request: CreateDeploymentDraftRequest): CreateDeploymentDraftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeploymentDraft', 'POST', '/api/v2/namespaces/{namespace}/deployment-drafts', 'json', false, 'json', request);
}

model CreateDeploymentTargetRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body?: ResourceSpec(name='body', position='Body'),
  deploymentTargetName: string(name='deploymentTargetName', example='test-dt', position='Query'),
  workspace: string(name='workspace', example='a14bda1c4a****', position='Header'),
}

model CreateDeploymentTargetResponseBody = {
  data?: DeploymentTarget(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model CreateDeploymentTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeploymentTargetResponseBody(name='body'),
}

async function createDeploymentTarget(request: CreateDeploymentTargetRequest): CreateDeploymentTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeploymentTarget', 'POST', '/api/v2/namespaces/{namespace}/deployment-targets', 'json', false, 'json', request);
}

model CreateFolderRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body?: Folder(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bda1c4a****', position='Header'),
}

model CreateFolderResponseBody = {
  data?: Folder(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model CreateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFolderResponseBody(name='body'),
}

async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFolder', 'POST', '/api/v2/namespaces/{namespace}/folder', 'json', false, 'json', request);
}

model CreateMemberRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='u-gs3rgla9-default', position='Path'),
  body?: Member(name='body', description='The mappings between the ID and permissions of the member.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='ca84d539167d4d', position='Header'),
}

model CreateMemberResponseBody = {
  data?: Member(name='data', description='*   If the value of success was false, a null value was returned.
*   If the value of success was true, the authorization information was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='F989CA70-2925-5A94-92B7-20F5762B71C8'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
}

model CreateMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemberResponseBody(name='body'),
}

async function createMember(request: CreateMemberRequest): CreateMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMember', 'POST', '/gateway/v2/namespaces/{namespace}/members', 'json', false, 'json', request);
}

model CreateSavepointRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', description='The deployment ID.', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Body'),
  description?: string(name='description', description='The description of the savepoint.', position='Body'),
  nativeFormat?: boolean(name='nativeFormat', description='Specifies whether to use the native format mode. Valid values:

*   true: The native format mode is used.
*   false: The native format mode is not used.', example='true', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model CreateSavepointResponseBody = {
  data?: Savepoint(name='data', description='*   If the value of success was true, the savepoint that was created was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model CreateSavepointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSavepointResponseBody(name='body'),
}

async function createSavepoint(request: CreateSavepointRequest): CreateSavepointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSavepoint', 'POST', '/api/v2/namespaces/{namespace}/savepoints', 'json', false, 'json', request);
}

model CreateScheduledPlanRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body?: ScheduledPlan(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model CreateScheduledPlanResponseBody = {
  data?: ScheduledPlan(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-ABCD-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='True'),
}

model CreateScheduledPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPlanResponseBody(name='body'),
}

async function createScheduledPlan(request: CreateScheduledPlanRequest): CreateScheduledPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScheduledPlan', 'POST', '/api/v2/namespaces/{namespace}/scheduled-plans', 'json', false, 'json', request);
}

model CreateSessionClusterRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body?: SessionCluster(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model CreateSessionClusterResponseBody = {
  data?: SessionCluster(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model CreateSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSessionClusterResponseBody(name='body'),
}

async function createSessionCluster(request: CreateSessionClusterRequest): CreateSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSessionCluster', 'POST', '/api/v2/namespaces/{namespace}/sessionclusters', 'json', false, 'json', request);
}

model CreateUdfArtifactRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='u-gs3rgla9-default', position='Path'),
  body: UdfArtifact(name='body', description='The resource file of the UDF.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model CreateUdfArtifactResponseBody = {
  data?: CreateUdfArtifactResult(name='data', description='The result of creating an artifact configuration for the UDF.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='True'),
}

model CreateUdfArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUdfArtifactResponseBody(name='body'),
}

async function createUdfArtifact(request: CreateUdfArtifactRequest): CreateUdfArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUdfArtifact', 'POST', '/api/v2/namespaces/{namespace}/udfartifacts', 'json', false, 'json', request);
}

model CreateVariableRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  body: Variable(name='body', description='The parameter that is used to create the variable.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bda1c4a****', position='Header'),
}

model CreateVariableResponseBody = {
  data?: Variable(name='data', description='*   If the value of success was true, the variable that you created was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-ABCD-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model CreateVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVariableResponseBody(name='body'),
}

async function createVariable(request: CreateVariableRequest): CreateVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVariable', 'POST', '/api/v2/namespaces/{namespace}/variables', 'json', false, 'json', request);
}

model DeleteCustomConnectorRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='test-flink-bigdata-default', position='Path'),
  connectorName: string(name='connectorName', description='The name of the custom connector.', example='mysql-test', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model DeleteCustomConnectorResponseBody = {
  data?: [
    TableMeta
  ](name='data', description='If the value of success was true, a list of deployments in which custom connectors were deleted was returned. If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteCustomConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomConnectorResponseBody(name='body'),
}

async function deleteCustomConnector(request: DeleteCustomConnectorRequest): DeleteCustomConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCustomConnector', 'DELETE', '/api/v2/namespaces/{namespace}/connectors/{connectorName}', 'json', false, 'json', request);
}

model DeleteDeploymentRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', description='The deployment ID.', example='5737ef81-d2f1-49cf-8752-30910809****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model DeleteDeploymentResponseBody = {
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDeploymentResponseBody(name='body'),
}

async function deleteDeployment(request: DeleteDeploymentRequest): DeleteDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDeployment', 'DELETE', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}', 'json', false, 'json', request);
}

model DeleteDeploymentDraftRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentDraftId: string(name='deploymentDraftId', example='c84d73be-40ad-4627-8bdd-fa1eba51b234', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteDeploymentDraftResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteDeploymentDraftResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDeploymentDraftResponseBody(name='body'),
}

async function deleteDeploymentDraft(request: DeleteDeploymentDraftRequest): DeleteDeploymentDraftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDeploymentDraft', 'DELETE', '/api/v2/namespaces/{namespace}/deployment-drafts/{deploymentDraftId}', 'json', false, 'json', request);
}

model DeleteDeploymentTargetRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentTargetName: string(name='deploymentTargetName', example='test-dt', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteDeploymentTargetResponseBody = {
  data?: DeploymentTarget(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteDeploymentTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDeploymentTargetResponseBody(name='body'),
}

async function deleteDeploymentTarget(request: DeleteDeploymentTargetRequest): DeleteDeploymentTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDeploymentTarget', 'DELETE', '/api/v2/namespaces/{namespace}/deployment-targets/{deploymentTargetName}', 'json', false, 'json', request);
}

model DeleteFolderRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  folderId: string(name='folderId', example='13803', position='Path'),
  workspace: string(name='workspace', example='c96306e2b****', position='Header'),
}

model DeleteFolderResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFolderResponseBody(name='body'),
}

async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFolder', 'DELETE', '/api/v2/namespaces/{namespace}/folder/{folderId}', 'json', false, 'json', request);
}

model DeleteJobRequest {
  namespace: string(name='namespace', description='The namespace ID.', example='default-namespace', position='Path'),
  jobId: string(name='jobId', description='The job ID.', example='5af678c0-7db0-4650-94c2-d2604f0a****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model DeleteJobResponseBody = {
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteJobResponseBody(name='body'),
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteJob', 'DELETE', '/api/v2/namespaces/{namespace}/jobs/{jobId}', 'json', false, 'json', request);
}

model DeleteMemberRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  member: string(name='member', description='The member ID.', example='user:223769', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='710d6a64d8c34d', position='Header'),
}

model DeleteMemberResponseBody = {
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemberResponseBody(name='body'),
}

async function deleteMember(request: DeleteMemberRequest): DeleteMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMember', 'DELETE', '/gateway/v2/namespaces/{namespace}/members/{member}', 'json', false, 'json', request);
}

model DeleteSavepointRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  savepointId: string(name='savepointId', description='The ID of the savepoint that you want to delete.', example='907a8f0e-4f6c-412b-8a5e-7d4a065b****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model DeleteSavepointResponseBody = {
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteSavepointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSavepointResponseBody(name='body'),
}

async function deleteSavepoint(request: DeleteSavepointRequest): DeleteSavepointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSavepoint', 'DELETE', '/api/v2/namespaces/{namespace}/savepoints/{savepointId}', 'json', false, 'json', request);
}

model DeleteScheduledPlanRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  scheduledPlanId: string(name='scheduledPlanId', example='f420c2e7-6d3f-4683-81d0-3ea8585*****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteScheduledPlanResponseBody = {
  data?: ScheduledPlan(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteScheduledPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPlanResponseBody(name='body'),
}

async function deleteScheduledPlan(request: DeleteScheduledPlanRequest): DeleteScheduledPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteScheduledPlan', 'DELETE', '/api/v2/namespaces/{namespace}/scheduled-plans/{scheduledPlanId}', 'json', false, 'json', request);
}

model DeleteSessionClusterRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  sessionClusterName: string(name='sessionClusterName', example='test-session', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteSessionClusterResponseBody = {
  data?: SessionCluster(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-ABCD-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSessionClusterResponseBody(name='body'),
}

async function deleteSessionCluster(request: DeleteSessionClusterRequest): DeleteSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSessionCluster', 'DELETE', '/api/v2/namespaces/{namespace}/sessionclusters/{sessionClusterName}', 'json', false, 'json', request);
}

model DeleteUdfArtifactRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  udfArtifactName: string(name='udfArtifactName', example='check', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeleteUdfArtifactResponseBody = {
  data?: DeleteUdfArtifactResult(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-ABCF-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeleteUdfArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUdfArtifactResponseBody(name='body'),
}

async function deleteUdfArtifact(request: DeleteUdfArtifactRequest): DeleteUdfArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUdfArtifact', 'DELETE', '/api/v2/namespaces/{namespace}/udfartifacts/{udfArtifactName}', 'json', false, 'json', request);
}

model DeleteUdfFunctionRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='u-gs3rgla9-default', position='Path'),
  functionName: string(name='functionName', description='The name of the UDF that you want to delete.', example='category', position='Path'),
  className: string(name='className', description='The name of the class that corresponds to the UDF.', example='Category', position='Query'),
  udfArtifactName: string(name='udfArtifactName', description='The name of the resource that corresponds to the UDF that you want to delete.', example='test-udf', position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model DeleteUdfFunctionResponseBody = {
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteUdfFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUdfFunctionResponseBody(name='body'),
}

async function deleteUdfFunction(request: DeleteUdfFunctionRequest): DeleteUdfFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUdfFunction', 'DELETE', '/api/v2/namespaces/{namespace}/udfartifacts/function/{functionName}', 'json', false, 'json', request);
}

model DeleteVariableRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  name: string(name='name', description='The name of the variable that you want to delete.', example='variableName', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model DeleteVariableResponseBody = {
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVariableResponseBody(name='body'),
}

async function deleteVariable(request: DeleteVariableRequest): DeleteVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVariable', 'DELETE', '/api/v2/namespaces/{namespace}/variables/{name}', 'json', false, 'json', request);
}

model DeployDeploymentDraftAsyncRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body: DraftDeployParams(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model DeployDeploymentDraftAsyncResponseBody = {
  data?: {
    ticketId?: string(name='ticketId', example='b3dcdb25-bf36-457d-92ba-a36077e8****'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model DeployDeploymentDraftAsyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployDeploymentDraftAsyncResponseBody(name='body'),
}

async function deployDeploymentDraftAsync(request: DeployDeploymentDraftAsyncRequest): DeployDeploymentDraftAsyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeployDeploymentDraftAsync', 'POST', '/api/v2/namespaces/{namespace}/deployment-drafts/async-deploy', 'json', false, 'json', request);
}

model ExecuteSqlStatementRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  body?: SqlStatementWithContext(name='body', position='Body'),
  workspace: string(name='workspace', example='710d6a64d8c34d', position='Header'),
}

model ExecuteSqlStatementResponseBody = {
  data?: SqlStatementExecuteResult(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model ExecuteSqlStatementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteSqlStatementResponseBody(name='body'),
}

async function executeSqlStatement(request: ExecuteSqlStatementRequest): ExecuteSqlStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteSqlStatement', 'POST', '/api/v2/namespaces/{namespace}/sql-statement/execute', 'json', false, 'json', request);
}

model FlinkApiProxyRequest {
  flinkApiPath: string(name='flinkApiPath', description='The path of the Flink UI.', example='/jobs/4df35f8e54554b23bf7dcd38a151****', position='Query'),
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Query'),
  resourceId: string(name='resourceId', description='The resource ID.', example='5a27a3aa-c5b9-4dc1-8c86-be57d2d6****', position='Query'),
  resourceType: string(name='resourceType', description='The type of the resource. Valid values:

*   jobs
*   sessionclusters', example='jobs', position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model FlinkApiProxyResponseBody = {
  data?: string(name='data', description='*   If the value of success was true, the result of the proxy request was returned.
*   If the value of success was false, a null value was returned.', example='{ "jobs": [ { "jid": "4df35f8e54554b23bf7dcd38a151****", "name": "69d001d5-419a-4bfc-9c2e-849cacd3****", "state": "RUNNING", "start-time": 1659154942068, "end-time": -1, "duration": 188161756, "last-modification": 1659154968305, "tasks": { "total": 2, "created": 0, "scheduled": 0, "deploying": 0, "running": 2, "finished": 0, "canceling": 0, "canceled": 0, "failed": 0, "reconciling": 0, "initializing": 0 } } ] }'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model FlinkApiProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlinkApiProxyResponseBody(name='body'),
}

async function flinkApiProxy(request: FlinkApiProxyRequest): FlinkApiProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FlinkApiProxy', 'GET', '/flink-ui/v2/proxy', 'json', false, 'json', request);
}

model GenerateResourcePlanWithFlinkConfAsyncRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', description='The deployment ID, which is the unique identifier of the deployment.', example='737d0921-c5ac-47fc-9ba9-07a1e0b4****', position='Path'),
  body?: map[string]any(name='body', description='The Flink configuration that is used to generate a resource plan.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model GenerateResourcePlanWithFlinkConfAsyncResponseBody = {
  data?: {
    ticketId?: string(name='ticketId', description='The ID of the ticket for you to query the asynchronous generation result.', example='b3dcdb25-bf36-457d-92ba-a36077e8****'),
  }(name='data', description='*   If the value of success was true, the asynchronous generation result was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GenerateResourcePlanWithFlinkConfAsyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateResourcePlanWithFlinkConfAsyncResponseBody(name='body'),
}

async function generateResourcePlanWithFlinkConfAsync(request: GenerateResourcePlanWithFlinkConfAsyncRequest): GenerateResourcePlanWithFlinkConfAsyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateResourcePlanWithFlinkConfAsync', 'POST', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}/resource-plan:asyncGenerate', 'json', false, 'json', request);
}

model GetAppliedScheduledPlanRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', example='5737ef81-d2f1-49cf-8752-30910809****', position='Query'),
  workspace: string(name='workspace', example='a14bda1c4a****', position='Header'),
}

model GetAppliedScheduledPlanResponseBody = {
  data?: ScheduledPlanAppliedInfo(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetAppliedScheduledPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppliedScheduledPlanResponseBody(name='body'),
}

async function getAppliedScheduledPlan(request: GetAppliedScheduledPlanRequest): GetAppliedScheduledPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedScheduledPlan', 'GET', '/api/v2/namespaces/{namespace}/scheduled-plans:getExecutedScheduledPlan', 'json', false, 'json', request);
}

model GetCatalogsRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  catalogName?: string(name='catalogName', example='paimon', position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetCatalogsResponseBody = {
  data?: [
    Catalog
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-ABCD-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='True'),
}

model GetCatalogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCatalogsResponseBody(name='body'),
}

async function getCatalogs(request: GetCatalogsRequest): GetCatalogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCatalogs', 'GET', '/api/v2/namespaces/{namespace}/catalogs', 'json', false, 'json', request);
}

model GetDatabasesRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  catalogName: string(name='catalogName', example='paimon', position='Path'),
  databaseName?: string(name='databaseName', example='paimon-ods', position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetDatabasesResponseBody = {
  data?: [
    Database
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabasesResponseBody(name='body'),
}

async function getDatabases(request: GetDatabasesRequest): GetDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatabases', 'GET', '/api/v2/namespaces/{namespace}/catalogs/{catalogName}/databases', 'json', false, 'json', request);
}

model GetDeployDeploymentDraftResultRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  ticketId: string(name='ticketId', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Path'),
  workspace: string(name='workspace', example='710d6a64d8****', position='Header'),
}

model GetDeployDeploymentDraftResultResponseBody = {
  data?: AsyncDraftDeployResult(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetDeployDeploymentDraftResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeployDeploymentDraftResultResponseBody(name='body'),
}

async function getDeployDeploymentDraftResult(request: GetDeployDeploymentDraftResultRequest): GetDeployDeploymentDraftResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeployDeploymentDraftResult', 'GET', '/api/v2/namespaces/{namespace}/deployment-drafts/tickets/{ticketId}/async-deploy', 'json', false, 'json', request);
}

model GetDeploymentRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', description='The deployment ID.', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model GetDeploymentResponseBody = {
  data?: Deployment(name='data', description='*   If the value of success was true, the details of the deployment were returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentResponseBody(name='body'),
}

async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeployment', 'GET', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}', 'json', false, 'json', request);
}

model GetDeploymentDraftRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentDraftId: string(name='deploymentDraftId', example='c84d73be-40ad-4627-8bdd-fa1eba51b234', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetDeploymentDraftResponseBody = {
  data?: DeploymentDraft(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetDeploymentDraftResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentDraftResponseBody(name='body'),
}

async function getDeploymentDraft(request: GetDeploymentDraftRequest): GetDeploymentDraftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeploymentDraft', 'GET', '/api/v2/namespaces/{namespace}/deployment-drafts/{deploymentDraftId}', 'json', false, 'json', request);
}

model GetDeploymentDraftLockRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentDraftId: string(name='deploymentDraftId', example='c84d73be-40ad-4627-8bdd-fa1eba51b234', position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetDeploymentDraftLockResponseBody = {
  data?: Lock(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetDeploymentDraftLockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentDraftLockResponseBody(name='body'),
}

async function getDeploymentDraftLock(request: GetDeploymentDraftLockRequest): GetDeploymentDraftLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeploymentDraftLock', 'POST', '/api/v2/namespaces/{namespace}/deployment-drafts/getLock', 'json', false, 'json', request);
}

model GetEventsRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId?: string(name='deploymentId', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Query'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetEventsResponseBody = {
  data?: [
    Event
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='4'),
}

model GetEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventsResponseBody(name='body'),
}

async function getEvents(request: GetEventsRequest): GetEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEvents', 'GET', '/api/v2/namespaces/{namespace}/events', 'json', false, 'json', request);
}

model GetFolderRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  folderId?: string(name='folderId', example='89097', position='Query'),
  workspace: string(name='workspace', example='a14bda1c4a****', position='Header'),
}

model GetFolderResponseBody = {
  data?: Folder(name='data', description='The data structure of the folder.'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFolderResponseBody(name='body'),
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFolder', 'GET', '/api/v2/namespaces/{namespace}/folder', 'json', false, 'json', request);
}

model GetGenerateResourcePlanResultRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  ticketId: string(name='ticketId', description='The ID of the asynchronous ticket. You can submit an application for an asynchronous operation to obtain this ticket ID.', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model GetGenerateResourcePlanResultResponseBody = {
  data?: AsyncResourcePlanOperationResult(name='data', description='*   If the value of success was true, the asynchronous generation result was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetGenerateResourcePlanResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGenerateResourcePlanResultResponseBody(name='body'),
}

async function getGenerateResourcePlanResult(request: GetGenerateResourcePlanResultRequest): GetGenerateResourcePlanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGenerateResourcePlanResult', 'GET', '/api/v2/namespaces/{namespace}/deployments/tickets/{ticketId}/resource-plan:asyncGenerate', 'json', false, 'json', request);
}

model GetHotUpdateJobResultRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  jobHotUpdateId: string(name='jobHotUpdateId', example='123hashd****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetHotUpdateJobResultResponseBody = {
  data?: HotUpdateJobResult(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-ABCF-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetHotUpdateJobResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotUpdateJobResultResponseBody(name='body'),
}

async function getHotUpdateJobResult(request: GetHotUpdateJobResultRequest): GetHotUpdateJobResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotUpdateJobResult', 'GET', '/api/v2/namespaces/{namespace}/jobs/hot-updates/{jobHotUpdateId}', 'json', false, 'json', request);
}

model GetJobRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  jobId: string(name='jobId', description='The job ID.', example='5af678c0-7db0-4650-94c2-d2604f0a****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model GetJobResponseBody = {
  data?: Job(name='data', description='*   If the value of success was true, the details of the job was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJob', 'GET', '/api/v2/namespaces/{namespace}/jobs/{jobId}', 'json', false, 'json', request);
}

model GetLatestJobStartLogRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', description='The deployment ID.', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model GetLatestJobStartLogResponseBody = {
  data?: string(name='data', description='If the value of success was false, the latest logs of the deployment were returned. If the value of success was true, a null value was returned.', example='"[main] INFO  org.apache.flink.runtime.entrypoint.ClusterEntrypoint        [] - --------------------------------------------------------------------------------\\n2024-05-22 11:46:39,871 [main] INFO  org.apache.flink.runtime.entrypoint.ClusterEntrypoint"'),
  errorCode?: string(name='errorCode', description='If the value of success was false, an error code was returned. If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='If the value of success was false, an error message was returned. If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetLatestJobStartLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLatestJobStartLogResponseBody(name='body'),
}

async function getLatestJobStartLog(request: GetLatestJobStartLogRequest): GetLatestJobStartLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLatestJobStartLog', 'GET', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}/latest_jobmanager_start_log', 'json', false, 'json', request);
}

model GetLineageInfoRequest {
  body?: GetLineageInfoParams(name='body', description='The parameters about the lineage information.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='710d6a64d8****', position='Header'),
}

model GetLineageInfoResponseBody = {
  data?: LineageInfo(name='data', description='The lineage information.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetLineageInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLineageInfoResponseBody(name='body'),
}

async function getLineageInfo(request: GetLineageInfoRequest): GetLineageInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLineageInfo', 'POST', '/meta/v2/lineage', 'json', false, 'json', request);
}

model GetMemberRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  member: string(name='member', description='The display name of the member.', example='user:223769', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model GetMemberResponseBody = {
  data?: Member(name='data', description='*   If the value of success was false, a null value was returned.
*   If the value of success was true, the authorization information was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemberResponseBody(name='body'),
}

async function getMember(request: GetMemberRequest): GetMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMember', 'GET', '/gateway/v2/namespaces/{namespace}/members/{member}', 'json', false, 'json', request);
}

model GetSavepointRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  savepointId: string(name='savepointId', description='The savepoint ID.', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model GetSavepointResponseBody = {
  data?: Savepoint(name='data', description='*   If the value of success was true, the savepoint information was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetSavepointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSavepointResponseBody(name='body'),
}

async function getSavepoint(request: GetSavepointRequest): GetSavepointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSavepoint', 'GET', '/api/v2/namespaces/{namespace}/savepoints/{savepointId}', 'json', false, 'json', request);
}

model GetSessionClusterRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  sessionClusterName: string(name='sessionClusterName', example='test-session', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetSessionClusterResponseBody = {
  data?: SessionCluster(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model GetSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSessionClusterResponseBody(name='body'),
}

async function getSessionCluster(request: GetSessionClusterRequest): GetSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSessionCluster', 'GET', '/api/v2/namespaces/{namespace}/sessionclusters/{sessionClusterName}', 'json', false, 'json', request);
}

model GetTablesRequest {
  namespace: string(name='namespace', example='u-gs3rgla9-default', position='Path'),
  catalogName: string(name='catalogName', example='paimon', position='Path'),
  databaseName: string(name='databaseName', example='paimon-ods', position='Path'),
  tableName?: string(name='tableName', example='item', position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model GetTablesResponseBody = {
  data?: [
    Table
  ](name='data', description='If the value of success was true, the list and details of tables that meet the condition were returned. If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='ECE641B2-AB0B-4174-9C3B-885881558637'),
  success?: boolean(name='success', example='true'),
}

model GetTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTablesResponseBody(name='body'),
}

async function getTables(request: GetTablesRequest): GetTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTables', 'GET', '/api/v2/namespaces/{namespace}/catalogs/{catalogName}/databases/{databaseName}/tables', 'json', false, 'json', request);
}

model GetUdfArtifactsRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  udfArtifactName?: string(name='udfArtifactName', description='The name of the JAR or Python file that corresponds to the UDF.', example='test-udf', position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='710d6a64d8c34d', position='Header'),
}

model GetUdfArtifactsResponseBody = {
  data?: [
    UdfArtifact
  ](name='data', description='If the value of success was true, the details of the JAR or Python file that corresponds to the UDF were returned. If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetUdfArtifactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUdfArtifactsResponseBody(name='body'),
}

async function getUdfArtifacts(request: GetUdfArtifactsRequest): GetUdfArtifactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUdfArtifacts', 'GET', '/api/v2/namespaces/{namespace}/udfartifacts', 'json', false, 'json', request);
}

model HotUpdateJobRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  jobId: string(name='jobId', description='The job ID.', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model HotUpdateJobResponseBody = {
  data?: HotUpdateJobResult(name='data', description='The dynamic update result.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model HotUpdateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotUpdateJobResponseBody(name='body'),
}

async function hotUpdateJob(request: HotUpdateJobRequest): HotUpdateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HotUpdateJob', 'POST', '/api/v2/namespaces/{namespace}/jobs/{jobId}:hotUpdate', 'json', false, 'json', request);
}

model ListCustomConnectorsRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model ListCustomConnectorsResponseBody = {
  data?: [
    Connector
  ](name='data', description='If the value of success was true, the list of custom connectors in the namespace was returned. If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ListCustomConnectorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomConnectorsResponseBody(name='body'),
}

async function listCustomConnectors(request: ListCustomConnectorsRequest): ListCustomConnectorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCustomConnectors', 'GET', '/api/v2/namespaces/{namespace}/connectors', 'json', false, 'json', request);
}

model ListDeploymentDraftsRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListDeploymentDraftsResponseBody = {
  data?: [
    DeploymentDraft
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='69'),
}

model ListDeploymentDraftsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentDraftsResponseBody(name='body'),
}

async function listDeploymentDrafts(request: ListDeploymentDraftsRequest): ListDeploymentDraftsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeploymentDrafts', 'GET', '/api/v2/namespaces/{namespace}/deployment-drafts', 'json', false, 'json', request);
}

model ListDeploymentTargetsRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  pageIndex?: int32(name='pageIndex', description='The page number. Minimum value: 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model ListDeploymentTargetsResponseBody = {
  data?: [
    DeploymentTarget
  ](name='data', description='*   If the value of success was true, a list of clusters in which the deployment is deployed was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  pageIndex?: int32(name='pageIndex', description='The page number.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
  totalSize?: int32(name='totalSize', description='The total number of entries returned.', example='1'),
}

model ListDeploymentTargetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentTargetsResponseBody(name='body'),
}

async function listDeploymentTargets(request: ListDeploymentTargetsRequest): ListDeploymentTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeploymentTargets', 'GET', '/api/v2/namespaces/{namespace}/deployment-targets', 'json', false, 'json', request);
}

model ListDeploymentsRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  creator?: string(name='creator', description='The ID of the user who creates the deployment.', example='183899668*******', position='Query'),
  executionMode?: string(name='executionMode', description='The execution mode of the deployment.

Valid values:

*   BATCH
*   STREAMING', example='STREAMING', position='Query'),
  labelKey?: string(name='labelKey', description='The tag key.', example='key', position='Query'),
  labelValueArray?: string(name='labelValueArray', description='The tag value. Separate multiple values with semicolon (;).', example='value1,value2', position='Query'),
  modifier?: string(name='modifier', description='The ID of the user who modifies the deployment.', example='183899668*******', position='Query'),
  name?: string(name='name', description='The name of the deployment.', example='vvp_ds_0522', position='Query'),
  pageIndex?: int32(name='pageIndex', description='The page number. Minimum value: 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  status?: string(name='status', description='The latest status of the deployment.

Valid values:

*   CANCELLED
*   FAILED
*   RUNNING
*   TRANSITIONING
*   FINISHED', example='RUNNING', position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model ListDeploymentsResponseBody = {
  data?: [
    Deployment
  ](name='data', description='*   If the value of success was true, the list of all deployments was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  pageIndex?: int32(name='pageIndex', description='The page number.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
  totalSize?: int32(name='totalSize', description='The total number of entries returned.', example='1'),
}

model ListDeploymentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentsResponseBody(name='body'),
}

async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeployments', 'GET', '/api/v2/namespaces/{namespace}/deployments', 'json', false, 'json', request);
}

model ListEditableNamespaceRequest {
  namespace?: string(name='namespace', position='Query'),
  pageIndex?: string(name='pageIndex', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  regionId: string(name='regionId', position='Query'),
  workspaceId?: string(name='workspaceId', position='Query'),
}

model ListEditableNamespaceResponseBody = {
  data?: {
    editableNamespaces?: [
      EditableNamespace
    ](name='editableNamespaces'),
    pageIndex?: string(name='pageIndex'),
    pageSize?: string(name='pageSize'),
    total?: string(name='total'),
  }(name='data'),
  httpCode?: int32(name='httpCode'),
  message?: string(name='message'),
  reason?: string(name='reason'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model ListEditableNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEditableNamespaceResponseBody(name='body'),
}

async function listEditableNamespace(request: ListEditableNamespaceRequest): ListEditableNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEditableNamespace', 'GET', '/gateway/v2/namespaces/editable', 'json', false, 'json', request);
}

model ListEngineVersionMetadataRequest {
  regionId?: string(name='RegionId', position='Host'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model ListEngineVersionMetadataResponseBody = {
  data?: EngineVersionMetadataIndex(name='data', description='*   If the value of success was true, the engine versions that are supported by Realtime Compute for Apache Flink were returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ListEngineVersionMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEngineVersionMetadataResponseBody(name='body'),
}

async function listEngineVersionMetadata(request: ListEngineVersionMetadataRequest): ListEngineVersionMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEngineVersionMetadata', 'GET', '/api/v2/engine-version-meta.json', 'json', false, 'json', request);
}

model ListJobsRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', description='The deployment ID.', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Query'),
  pageIndex?: int32(name='pageIndex', description='The page number. Minimum value: 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  sortName?: string(name='sortName', description='The collation.

Valid values:

*   gmt_create
*   job_id
*   status', example='gmt_create', position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model ListJobsResponseBody = {
  data?: [
    Job
  ](name='data', description='*   If the value of success was true, all jobs that meet the condition were returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  pageIndex?: int32(name='pageIndex', description='The page number.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
  totalSize?: int32(name='totalSize', description='The total number of entries returned.', example='1'),
}

model ListJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobs', 'GET', '/api/v2/namespaces/{namespace}/jobs', 'json', false, 'json', request);
}

model ListMembersRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  pageIndex?: int32(name='pageIndex', description='The page number. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model ListMembersResponseBody = {
  data?: [
    Member
  ](name='data', description='*   If the value of success was false, a null value was returned.
*   If the value of success was true, the authorization information was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  pageIndex?: int32(name='pageIndex', description='The page number.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
  totalSize?: int32(name='totalSize', description='The total number of entries returned.', example='50'),
}

model ListMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMembersResponseBody(name='body'),
}

async function listMembers(request: ListMembersRequest): ListMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMembers', 'GET', '/gateway/v2/namespaces/{namespace}/members', 'json', false, 'json', request);
}

model ListSavepointsRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  deploymentId?: string(name='deploymentId', description='The deployment ID. This parameter is optional.', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Query'),
  jobId?: string(name='jobId', description='The job ID. This parameter is optional.', example='99a8fc49-e090-430a-85d8-3ee8c79c****', position='Query'),
  pageIndex?: int32(name='pageIndex', description='The page number. Minimum value: 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model ListSavepointsResponseBody = {
  data?: [
    Savepoint
  ](name='data', description='*   If the value of success was true, a list of savepoints was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  pageIndex?: int32(name='pageIndex', description='The page number.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
  totalSize?: int32(name='totalSize', description='The total number of entries returned.', example='1'),
}

model ListSavepointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSavepointsResponseBody(name='body'),
}

async function listSavepoints(request: ListSavepointsRequest): ListSavepointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSavepoints', 'GET', '/api/v2/namespaces/{namespace}/savepoints', 'json', false, 'json', request);
}

model ListScheduledPlanRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId?: string(name='deploymentId', example='737d0921-c5ac-47fc-9ba9-07a1e0b4****', position='Query'),
  pageIndex?: int32(name='pageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListScheduledPlanResponseBody = {
  data?: [
    ScheduledPlan
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize', example='4'),
}

model ListScheduledPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPlanResponseBody(name='body'),
}

async function listScheduledPlan(request: ListScheduledPlanRequest): ListScheduledPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListScheduledPlan', 'GET', '/api/v2/namespaces/{namespace}/scheduled-plans', 'json', false, 'json', request);
}

model ListScheduledPlanExecutedHistoryRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Query'),
  origin?: string(name='origin', example='SCHEDULED_PLAN', position='Query'),
  workspace: string(name='workspace', example='a14bda1c4a****', position='Header'),
}

model ListScheduledPlanExecutedHistoryResponseBody = {
  data?: [
    ScheduledPlanExecutedInfo
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  pageIndex?: int32(name='pageIndex', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
  totalSize?: int32(name='totalSize'),
}

model ListScheduledPlanExecutedHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPlanExecutedHistoryResponseBody(name='body'),
}

async function listScheduledPlanExecutedHistory(request: ListScheduledPlanExecutedHistoryRequest): ListScheduledPlanExecutedHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListScheduledPlanExecutedHistory', 'GET', '/api/v2/namespaces/{namespace}/job-resource-upgradings', 'json', false, 'json', request);
}

model ListSessionClustersRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model ListSessionClustersResponseBody = {
  data?: [
    SessionCluster
  ](name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-ABCD-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model ListSessionClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSessionClustersResponseBody(name='body'),
}

async function listSessionClusters(request: ListSessionClustersRequest): ListSessionClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSessionClusters', 'GET', '/api/v2/namespaces/{namespace}/sessionclusters', 'json', false, 'json', request);
}

model ListVariablesRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  pageIndex?: int32(name='pageIndex', description='The page number. Minimum value: 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bda1c4a****', position='Header'),
}

model ListVariablesResponseBody = {
  data?: [
    Variable
  ](name='data', description='*   If the value of success was true, a list of variables was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  pageIndex?: int32(name='pageIndex', description='The page number.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-ABCF-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
  totalSize?: int32(name='totalSize', description='The total number of entries returned.', example='1'),
}

model ListVariablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVariablesResponseBody(name='body'),
}

async function listVariables(request: ListVariablesRequest): ListVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVariables', 'GET', '/api/v2/namespaces/{namespace}/variables', 'json', false, 'json', request);
}

model RegisterCustomConnectorRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  jarUrl: string(name='jarUrl', description='The URL in which the JAR package of the custom connector is stored. The platform must be able to access this address.', example='oss://flink/connector/mysql123', position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model RegisterCustomConnectorResponseBody = {
  data?: [
    Connector
  ](name='data', description='If the value of success was true, a list of deployments in which custom connectors were deleted was returned. If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model RegisterCustomConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterCustomConnectorResponseBody(name='body'),
}

async function registerCustomConnector(request: RegisterCustomConnectorRequest): RegisterCustomConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RegisterCustomConnector', 'POST', '/api/v2/namespaces/{namespace}/connectors:register', 'json', false, 'json', request);
}

model RegisterUdfFunctionRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  className: string(name='className', description='The name of the class that corresponds to the UDF.', example='orderRank', position='Query'),
  functionName: string(name='functionName', description='The name of the UDF. In most cases, the name of the UDF is the same as the class name. You can specify a name for the UDF.', example='orderRank', position='Query'),
  udfArtifactName: string(name='udfArtifactName', description='The name of the JAR or Python file that corresponds to the UDF.', example='test-udf', position='Query'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model RegisterUdfFunctionResponseBody = {
  data?: UdfFunction(name='data', description='The information about the UDF.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-ABCD-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model RegisterUdfFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterUdfFunctionResponseBody(name='body'),
}

async function registerUdfFunction(request: RegisterUdfFunctionRequest): RegisterUdfFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RegisterUdfFunction', 'POST', '/api/v2/namespaces/{namespace}/udfartifacts/function:registerUdfFunction', 'json', false, 'json', request);
}

model StartJobRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  body: StartJobRequestBody(name='body', description='The parameter that is used to start the job.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model StartJobResponseBody = {
  data?: Job(name='data', description='*   If the value of success was true, the job that you created was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model StartJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartJobResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function startJob(request: StartJobRequest): StartJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartJob', 'POST', '/api/v2/namespaces/{namespace}/jobs', 'json', false, 'json', request);
}

model StartJobWithParamsRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  body?: JobStartParameters(name='body', description='The parameter that is used to start the job.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model StartJobWithParamsResponseBody = {
  data?: Job(name='data', description='The details of the job of the deployment returned.'),
  errorCode?: string(name='errorCode', description='If the value of success was false, an error code was returned. If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='If the value of success was false, an error message was returned. If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model StartJobWithParamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartJobWithParamsResponseBody(name='body'),
}

async function startJobWithParams(request: StartJobWithParamsRequest): StartJobWithParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartJobWithParams', 'POST', '/api/v2/namespaces/{namespace}/jobs:start', 'json', false, 'json', request);
}

model StartSessionClusterRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  sessionClusterName: string(name='sessionClusterName', example='test-session', position='Path'),
  workspace: string(name='workspace', example='a14bda1c4a****', position='Header'),
}

model StartSessionClusterResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-ABCF-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model StartSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSessionClusterResponseBody(name='body'),
}

async function startSessionCluster(request: StartSessionClusterRequest): StartSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartSessionCluster', 'POST', '/api/v2/namespaces/{namespace}/sessionclusters/{sessionClusterName}:start', 'json', false, 'json', request);
}

model StopApplyScheduledPlanRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  scheduledPlanId: string(name='scheduledPlanId', example='f420c2e7-6d3f-4683-81d0-3ea8585*****', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model StopApplyScheduledPlanResponseBody = {
  data?: ScheduledPlanAppliedInfo(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model StopApplyScheduledPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopApplyScheduledPlanResponseBody(name='body'),
}

async function stopApplyScheduledPlan(request: StopApplyScheduledPlanRequest): StopApplyScheduledPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopApplyScheduledPlan', 'PATCH', '/api/v2/namespaces/{namespace}/scheduled-plans/{scheduledPlanId}:stop', 'json', false, 'json', request);
}

model StopJobRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  jobId: string(name='jobId', description='The job ID.', example='88a8fc49-e090-430a-85d8-3ee8c79c****', position='Path'),
  body: StopJobRequestBody(name='body', description='The parameter that is used to stop the job.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model StopJobResponseBody = {
  data?: Job(name='data', description='*   If the value of success was true, the job that you stopped was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model StopJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopJobResponseBody(name='body'),
}

async function stopJob(request: StopJobRequest): StopJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopJob', 'POST', '/api/v2/namespaces/{namespace}/jobs/{jobId}:stop', 'json', false, 'json', request);
}

model StopSessionClusterRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  sessionClusterName: string(name='sessionClusterName', example='test-session', position='Path'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model StopSessionClusterResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model StopSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopSessionClusterResponseBody(name='body'),
}

async function stopSessionCluster(request: StopSessionClusterRequest): StopSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopSessionCluster', 'POST', '/api/v2/namespaces/{namespace}/sessionclusters/{sessionClusterName}:stop', 'json', false, 'json', request);
}

model UpdateDeploymentRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  deploymentId: string(name='deploymentId', description='The deployment ID.', example='58718c99-3b29-4c5e-93bb-c9fc4ec6****', position='Path'),
  body: Deployment(name='body', description='The information about the deployment that you want to update.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model UpdateDeploymentResponseBody = {
  data?: Deployment(name='data', description='*   If the value of success was true, the information about the deployment after the update was returned.
*   If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDeploymentResponseBody(name='body'),
}

async function updateDeployment(request: UpdateDeploymentRequest): UpdateDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDeployment', 'PUT', '/api/v2/namespaces/{namespace}/deployments/{deploymentId}', 'json', false, 'json', request);
}

model UpdateDeploymentDraftRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentDraftId: string(name='deploymentDraftId', example='c84d73be-40ad-4627-8bdd-fa1eba51b234', position='Path'),
  body: DeploymentDraft(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model UpdateDeploymentDraftResponseBody = {
  data?: DeploymentDraft(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='True'),
}

model UpdateDeploymentDraftResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDeploymentDraftResponseBody(name='body'),
}

async function updateDeploymentDraft(request: UpdateDeploymentDraftRequest): UpdateDeploymentDraftResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDeploymentDraft', 'PATCH', '/api/v2/namespaces/{namespace}/deployment-drafts/{deploymentDraftId}', 'json', false, 'json', request);
}

model UpdateDeploymentTargetRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  deploymentTargetName: string(name='deploymentTargetName', example='test-dt', position='Path'),
  body?: ResourceSpec(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model UpdateDeploymentTargetResponseBody = {
  data?: DeploymentTarget(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model UpdateDeploymentTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDeploymentTargetResponseBody(name='body'),
}

async function updateDeploymentTarget(request: UpdateDeploymentTargetRequest): UpdateDeploymentTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDeploymentTarget', 'PUT', '/api/v2/namespaces/{namespace}/deployment-targets/{deploymentTargetName}', 'json', false, 'json', request);
}

model UpdateFolderRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  folderId: string(name='folderId', example='13803', position='Path'),
  body: Folder(name='body', position='Body'),
  workspace: string(name='workspace', example='f89a0c1ca8****', position='Header'),
}

model UpdateFolderResponseBody = {
  data?: Folder(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model UpdateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFolderResponseBody(name='body'),
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFolder', 'PATCH', '/api/v2/namespaces/{namespace}/folder/{folderId}', 'json', false, 'json', request);
}

model UpdateMemberRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  body?: Member(name='body', description='The permission information about the member.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model UpdateMemberResponseBody = {
  data?: Member(name='data', description='If the value of success was true, the member that was created was returned. If the value of success was false, a null value was returned.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemberResponseBody(name='body'),
}

async function updateMember(request: UpdateMemberRequest): UpdateMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMember', 'PUT', '/gateway/v2/namespaces/{namespace}/members', 'json', false, 'json', request);
}

model UpdateScheduledPlanRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  scheduledPlanId: string(name='scheduledPlanId', example='f420c2e7-6d3f-4683-81d0-3ea8585*****', position='Path'),
  body?: ScheduledPlan(name='body', position='Body'),
  workspace: string(name='workspace', example='a14bd5d90a****', position='Header'),
}

model UpdateScheduledPlanResponseBody = {
  data?: ScheduledPlan(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='CBC799F0-AS7S-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', example='true'),
}

model UpdateScheduledPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduledPlanResponseBody(name='body'),
}

async function updateScheduledPlan(request: UpdateScheduledPlanRequest): UpdateScheduledPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateScheduledPlan', 'PUT', '/api/v2/namespaces/{namespace}/scheduled-plans/{scheduledPlanId}', 'json', false, 'json', request);
}

model UpdateSessionClusterRequest {
  namespace: string(name='namespace', example='default-namespace', position='Path'),
  sessionClusterName: string(name='sessionClusterName', example='test-session', position='Path'),
  body?: SessionCluster(name='body', position='Body'),
  workspace: string(name='workspace', example='710d6a64d8c34d', position='Header'),
}

model UpdateSessionClusterResponseBody = {
  data?: SessionCluster(name='data'),
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='1EF03B0C-F44F-47AD-BB48-D002D0F7B8C9'),
  success?: boolean(name='success', example='true'),
}

model UpdateSessionClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSessionClusterResponseBody(name='body'),
}

async function updateSessionCluster(request: UpdateSessionClusterRequest): UpdateSessionClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSessionCluster', 'PATCH', '/api/v2/namespaces/{namespace}/sessionclusters/{sessionClusterName}', 'json', false, 'json', request);
}

model UpdateUdfArtifactRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  udfArtifactName: string(name='udfArtifactName', description='The name of the JAR file of the UDF.', example='test-udf', position='Path'),
  body: UdfArtifact(name='body', description='The details of the JAR file of the UDF.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model UpdateUdfArtifactResponseBody = {
  data?: UpdateUdfArtifactResult(name='data', description='The result of updating the JAR file of the UDF.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='*   If the value of success was false, an error message was returned.
*   If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200. The status code 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-ABCD-1D30-8A4F-882ED4DD****'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateUdfArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUdfArtifactResponseBody(name='body'),
}

async function updateUdfArtifact(request: UpdateUdfArtifactRequest): UpdateUdfArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUdfArtifact', 'PUT', '/api/v2/namespaces/{namespace}/udfartifacts/{udfArtifactName}', 'json', false, 'json', request);
}

model ValidateSqlStatementRequest {
  namespace: string(name='namespace', description='The name of the namespace.', example='default-namespace', position='Path'),
  body: SqlStatementWithContext(name='body', description='The content of the code that you want to verify.', position='Body'),
  workspace: string(name='workspace', description='The workspace ID.', example='a14bd5d90a****', position='Header'),
}

model ValidateSqlStatementResponseBody = {
  data?: SqlStatementValidationResult(name='data', description='The returned data, which represents the details of SQL validation results.'),
  errorCode?: string(name='errorCode', description='If the value of success was false, an error code was returned. If the value of success was true, a null value was returned.', example='""'),
  errorMessage?: string(name='errorMessage', description='If the value of success was false, an error message was returned. If the value of success was true, a null value was returned.', example='""'),
  httpCode?: int32(name='httpCode', description='The status code returned. The value was fixed to 200.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='CBC799F0-****-1D30-8A4F-882ED4DD5E02'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ValidateSqlStatementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateSqlStatementResponseBody(name='body'),
}

async function validateSqlStatement(request: ValidateSqlStatementRequest): ValidateSqlStatementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ValidateSqlStatement', 'POST', '/api/v2/namespaces/{namespace}/sql-statement/validate', 'json', false, 'json', request);
}

