/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ververica', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Artifact {
  jarArtifact?: JarArtifact(name='jarArtifact'),
  kind?: string(name='kind'),
  pythonArtifact?: PythonArtifact(name='pythonArtifact'),
  sqlArtifact?: SqlArtifact(name='sqlArtifact'),
}

model AsyncResourcePlanOperationResult {
  message?: string(name='message'),
  plan?: string(name='plan'),
  ticketStatus?: string(name='ticketStatus'),
}

model BasicResourceSetting {
  jobmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='jobmanagerResourceSettingSpec'),
  parallelism?: long(name='parallelism'),
  taskmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='taskmanagerResourceSettingSpec'),
}

model BasicResourceSettingSpec {
  cpu?: double(name='cpu'),
  memory?: string(name='memory'),
}

model BatchResourceSetting {
  basicResourceSetting?: BasicResourceSetting(name='basicResourceSetting'),
  maxSlot?: long(name='maxSlot'),
}

model BriefDeploymentTarget {
  mode?: string(name='mode'),
  name?: string(name='name'),
}

model BriefResourceSetting {
  batchResourceSetting?: BatchResourceSetting(name='batchResourceSetting'),
  flinkConf?: map[string]any(name='flinkConf'),
  streamingResourceSetting?: StreamingResourceSetting(name='streamingResourceSetting'),
}

model Deployment {
  artifact?: Artifact(name='artifact'),
  deploymentHasChanged?: boolean(name='deploymentHasChanged'),
  deploymentId?: string(name='deploymentId'),
  deploymentTarget?: BriefDeploymentTarget(name='deploymentTarget'),
  description?: string(name='description'),
  engineVersion?: string(name='engineVersion'),
  executionMode?: string(name='executionMode'),
  flinkConf?: map[string]any(name='flinkConf'),
  jobSummary?: JobSummary(name='jobSummary'),
  logging?: Logging(name='logging'),
  name?: string(name='name'),
  namespace?: string(name='namespace'),
}

model DeploymentRestoreStrategy {
  allowNonRestoredState?: boolean(name='allowNonRestoredState'),
  jobStartTimeInMs?: long(name='jobStartTimeInMs'),
  kind?: string(name='kind'),
  savepointId?: string(name='savepointId'),
}

model DeploymentTarget {
  name?: string(name='name'),
  namespace?: string(name='namespace'),
}

model EngineVersionMetadata {
  engineVersion?: string(name='engineVersion'),
  features?: EngineVersionSupportedFeatures(name='features'),
  status?: string(name='status'),
}

model EngineVersionMetadataIndex {
  defaultEngineVersion?: string(name='defaultEngineVersion'),
  engineVersionMetadata?: [
    EngineVersionMetadata
  ](name='engineVersionMetadata'),
}

model EngineVersionSupportedFeatures {
  supportNativeSavepoint?: boolean(name='supportNativeSavepoint'),
  useForSqlDeployments?: boolean(name='useForSqlDeployments'),
}

model ExpertResourceSetting {
  jobmanagerResourceSettingSpec?: BasicResourceSettingSpec(name='jobmanagerResourceSettingSpec'),
  resourcePlan?: string(name='resourcePlan'),
}

model JarArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  entryClass?: string(name='entryClass'),
  jarUri?: string(name='jarUri'),
  mainArgs?: string(name='mainArgs'),
}

model Job {
  artifact?: Artifact(name='artifact'),
  batchResourceSetting?: BatchResourceSetting(name='batchResourceSetting'),
  deploymentId?: string(name='deploymentId'),
  deploymentName?: string(name='deploymentName'),
  endTime?: long(name='endTime'),
  engineVersion?: string(name='engineVersion'),
  executionMode?: string(name='executionMode'),
  flinkConf?: map[string]any(name='flinkConf'),
  jobId?: string(name='jobId'),
  logging?: Logging(name='logging'),
  metric?: JobMetric(name='metric'),
  namespace?: string(name='namespace'),
  restoreStrategy?: DeploymentRestoreStrategy(name='restoreStrategy'),
  sessionClusterName?: string(name='sessionClusterName'),
  startTime?: long(name='startTime'),
  status?: JobStatus(name='status'),
  streamingResourceSetting?: StreamingResourceSetting(name='streamingResourceSetting'),
}

model JobFailure {
  failedAt?: long(name='failedAt'),
  message?: string(name='message'),
  reason?: string(name='reason'),
}

model JobMetric {
  totalCpu?: double(name='totalCpu'),
  totalMemoryByte?: long(name='totalMemoryByte'),
}

model JobStatus {
  currentJobStatus?: string(name='currentJobStatus'),
  failure?: JobFailure(name='failure'),
  running?: JobStatusRunning(name='running'),
}

model JobStatusRunning {
  observedFlinkJobRestarts?: long(name='observedFlinkJobRestarts'),
  observedFlinkJobStatus?: string(name='observedFlinkJobStatus'),
}

model JobSummary {
  cancelled?: int32(name='cancelled'),
  cancelling?: int32(name='cancelling'),
  failed?: int32(name='failed'),
  finished?: int32(name='finished'),
  running?: int32(name='running'),
  starting?: int32(name='starting'),
}

model Log4jLogger {
  loggerLevel?: string(name='loggerLevel'),
  loggerName?: string(name='loggerName'),
}

model LogReservePolicy {
  expirationDays?: long(name='expirationDays'),
  openHistory?: boolean(name='openHistory'),
}

model Logging {
  log4j2ConfigurationTemplate?: string(name='log4j2ConfigurationTemplate'),
  log4jLoggers?: [
    Log4jLogger
  ](name='log4jLoggers'),
  logReservePolicy?: LogReservePolicy(name='logReservePolicy'),
  loggingProfile?: string(name='loggingProfile'),
}

model PythonArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  additionalPythonArchives?: [ string ](name='additionalPythonArchives'),
  additionalPythonLibraries?: [ string ](name='additionalPythonLibraries'),
  entryModule?: string(name='entryModule'),
  mainArgs?: string(name='mainArgs'),
  pythonArtifactUri?: string(name='pythonArtifactUri'),
}

model Savepoint {
  createdAt?: long(name='createdAt'),
  deploymentId?: string(name='deploymentId'),
  description?: string(name='description'),
  jobId?: string(name='jobId'),
  modifiedAt?: long(name='modifiedAt'),
  namespace?: string(name='namespace'),
  nativeFormat?: boolean(name='nativeFormat'),
  savepointId?: string(name='savepointId'),
  savepointLocation?: string(name='savepointLocation'),
  savepointOrigin?: string(name='savepointOrigin'),
  status?: SavepointStatus(name='status'),
  stopWithDrainEnabled?: boolean(name='stopWithDrainEnabled'),
}

model SavepointFailure {
  failedAt?: long(name='failedAt'),
  message?: string(name='message'),
  reason?: string(name='reason'),
}

model SavepointStatus {
  failure?: SavepointFailure(name='failure'),
  state?: string(name='state'),
}

model SqlArtifact {
  additionalDependencies?: [ string ](name='additionalDependencies'),
  sqlScript?: string(name='sqlScript'),
}

model StartJobRequestBody {
  deploymentId?: string(name='deploymentId'),
  resourceSettingSpec?: BriefResourceSetting(name='resourceSettingSpec'),
  restoreStrategy?: DeploymentRestoreStrategy(name='restoreStrategy'),
}

model StopJobRequestBody {
  stopStrategy?: string(name='stopStrategy'),
}

model StreamingResourceSetting {
  basicResourceSetting?: BasicResourceSetting(name='basicResourceSetting'),
  expertResourceSetting?: ExpertResourceSetting(name='expertResourceSetting'),
  resourceSettingMode?: string(name='resourceSettingMode'),
}

model Variable {
  description?: string(name='description'),
  kind?: string(name='kind'),
  name?: string(name='name'),
  value?: string(name='value'),
}

