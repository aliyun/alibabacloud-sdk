/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('alb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListAclsRequest {
  aclIds?: [ string ](name='AclIds', description='访问控制策略Id'),
  aclNames?: [ string ](name='AclNames', description='访问控制策略名称'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  addressIPVersion?: string(name='AddressIPVersion', description='IP版本'),
}

model ListAclsResponseBody = {
  acls?: [ 
    {
      aclId?: string(name='AclId', description='访问控制策略id'),
      aclName?: string(name='AclName', description='访问控制策略名称'),
      aclStatus?: string(name='AclStatus', description='状态'),
      addressIPVersion?: string(name='AddressIPVersion', description='IP版本'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
    }
  ](name='Acls', description='访问控制列表'),
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListAclsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAclsResponseBody(name='body'),
}

async function listAclsWithOptions(request: ListAclsRequest, runtime: Util.RuntimeOptions): ListAclsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAcls', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAcls(request: ListAclsRequest): ListAclsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAclsWithOptions(request, runtime);
}

model CreateHealthCheckTemplateRequest {
  clientToken?: string(name='ClientToken', description='幂等参数'),
  healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='名称'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口号'),
  healthCheckHost?: string(name='HealthCheckHost', description='域名'),
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='时间间隔'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间'),
  healthCheckPath?: string(name='HealthCheckPath', description='uri'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='方法'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model CreateHealthCheckTemplateResponseBody = {
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板ID'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateHealthCheckTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHealthCheckTemplateResponseBody(name='body'),
}

async function createHealthCheckTemplateWithOptions(request: CreateHealthCheckTemplateRequest, runtime: Util.RuntimeOptions): CreateHealthCheckTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateHealthCheckTemplate', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createHealthCheckTemplate(request: CreateHealthCheckTemplateRequest): CreateHealthCheckTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHealthCheckTemplateWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceId?: [ string ](name='ResourceId', description='资源实例Id'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表'),
}

model ListTagResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源ID'),
      resourceType?: string(name='ResourceType', description='资源类型'),
      tagKey?: string(name='TagKey', description='标签Key'),
      tagValue?: string(name='TagValue', description='标签Value'),
    }
  ](name='TagResources', description='标签值列表'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model GetListenerAttributeRequest {
  listenerId?: string(name='ListenerId', description='监听标识'),
}

model GetListenerAttributeResponseBody = {
  aclConfig?: {
    aclRelations?: [ 
      {
        aclId?: string(name='AclId', description='ACL标识'),
        status?: string(name='Status', description='ACL与监听关联的状态'),
      }
    ](name='AclRelations', description='监听绑定的访问策略组'),
    aclType?: string(name='AclType', description='访问控制类型'),
  }(name='AclConfig', description='ACL相关配置信息'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='正式标识'),
    }
  ](name='Certificates', description='监听默认服务器证书列表，N当前取值范围为1'),
  caEnabled?: boolean(name='CaEnabled', description='是否开启双向认证'),
  defaultActions?: [ 
    {
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
          }
        ](name='ServerGroupTuples', description='服务器组列表'),
      }(name='ForwardGroupConfig', description='转发到服务器组'),
      type?: string(name='Type', description='类型'),
    }
  ](name='DefaultActions', description='默认动作'),
  gzipEnabled?: boolean(name='GzipEnabled', description='是否开启Gzip压缩'),
  http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP/2特性'),
  idleTimeout?: int32(name='IdleTimeout', description='连接空闲超时时间'),
  listenerDescription?: string(name='ListenerDescription', description='监听描述'),
  listenerId?: string(name='ListenerId', description='监听标识'),
  listenerPort?: int32(name='ListenerPort', description='监听端口'),
  listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
  listenerStatus?: string(name='ListenerStatus', description='监听状态'),
  loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
  logConfig?: {
    accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='访问日志是否开启携带自定义Header'),
    accessLogTracingConfig?: {
      tracingEnabled?: boolean(name='TracingEnabled', description='Xtrace功能状态'),
      tracingSample?: int32(name='TracingSample', description='Xtrace功能状态'),
      tracingType?: string(name='TracingType', description='xtrace的类型'),
    }(name='AccessLogTracingConfig', description='访问日志Xtrace相关的配置'),
  }(name='LogConfig', description='监听访问日志相关配置'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='需要关联的QUIC监听ID，HTTPS监听时有效，QuicUpgradeEnabled为true时必选'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='是否开启quic升级，HTTPS监听时有效'),
  }(name='QuicConfig', description='HTTPS启用QUIC时相关属性'),
  requestId?: string(name='RequestId', description='Id of the request'),
  requestTimeout?: int32(name='RequestTimeout', description='请求超时时间'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertClientVerifyEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='是否通过X-Forwarded-Clientcert-clientverify  头字段获取对访问负载均衡实例客户端证书的校验结果。HTTPS监听有效。'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertFingerprintEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='是否通过X-Forwarded-Clientcert-fingerprint 头字段获取访问负载均衡实例客户端证书的指纹取值，HTTPS监听有效。'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertIssuerDNEnabled的值为‘On’的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='是否通过 X-Forwarded-Clientcert-issuerdn 头字段获取访问负载均衡实例客户端证书的发行者信息。HTTPS监听有效。'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertSubjectDNEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='是否通过X-Forwarded-Clientcert-subjectdn  头字段获取访问负载均衡实例客户端证书的所有者信息。HTTPS监听有效。'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='是否通过X-Forwarded-Client-Port 头字段获取访问负载均衡实例客户端的端口。HTTPS监听有效。'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='是否通过X-Forwarded-Proto头字段获取负载均衡实例的监听协议。'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='是否通过SLB-ID头字段获取负载均衡实例ID。'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='是否通过X-Forwarded-Port 头字段获取负载均衡实例的监听端口。HTTPS监听有效。'),
  }(name='XForwardedForConfig', description='XForward字段相关的配置'),
}

model GetListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetListenerAttributeResponseBody(name='body'),
}

async function getListenerAttributeWithOptions(request: GetListenerAttributeRequest, runtime: Util.RuntimeOptions): GetListenerAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetListenerAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getListenerAttribute(request: GetListenerAttributeRequest): GetListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListenerAttributeWithOptions(request, runtime);
}

model UpdateHealthCheckTemplateAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等参数'),
  healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='名称'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口号'),
  healthCheckHost?: string(name='HealthCheckHost', description='域名'),
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='时间间隔'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间'),
  healthCheckPath?: string(name='HealthCheckPath', description='uri'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='方法'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板ID'),
}

model UpdateHealthCheckTemplateAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateHealthCheckTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHealthCheckTemplateAttributeResponseBody(name='body'),
}

async function updateHealthCheckTemplateAttributeWithOptions(request: UpdateHealthCheckTemplateAttributeRequest, runtime: Util.RuntimeOptions): UpdateHealthCheckTemplateAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateHealthCheckTemplateAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateHealthCheckTemplateAttribute(request: UpdateHealthCheckTemplateAttributeRequest): UpdateHealthCheckTemplateAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHealthCheckTemplateAttributeWithOptions(request, runtime);
}

model ListServerGroupServersRequest {
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  serverGroupId?: string(name='ServerGroupId', description='服务器组id'),
  serverIds?: [ string ](name='ServerIds'),
}

model ListServerGroupServersResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  servers?: [ 
    {
      description?: string(name='Description', description='描述信息'),
      port?: int32(name='Port', description='端口'),
      serverId?: string(name='ServerId', description='服务器id'),
      serverIp?: string(name='ServerIp', description='服务器ip'),
      serverType?: string(name='ServerType', description='后端服务器类型'),
      status?: string(name='Status', description='状态'),
      weight?: int32(name='Weight', description='权重'),
    }
  ](name='Servers', description='后端服务器'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListServerGroupServersResponse = {
  headers: map[string]string(name='headers'),
  body: ListServerGroupServersResponseBody(name='body'),
}

async function listServerGroupServersWithOptions(request: ListServerGroupServersRequest, runtime: Util.RuntimeOptions): ListServerGroupServersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListServerGroupServers', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listServerGroupServers(request: ListServerGroupServersRequest): ListServerGroupServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServerGroupServersWithOptions(request, runtime);
}

model RemoveEntriesFromAclRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  aclId?: string(name='AclId', description='访问控制策略Id'),
  entries?: [ string ](name='Entries', description='条目列表'),
}

model RemoveEntriesFromAclResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveEntriesFromAclResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveEntriesFromAclResponseBody(name='body'),
}

async function removeEntriesFromAclWithOptions(request: RemoveEntriesFromAclRequest, runtime: Util.RuntimeOptions): RemoveEntriesFromAclResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveEntriesFromAcl', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeEntriesFromAcl(request: RemoveEntriesFromAclRequest): RemoveEntriesFromAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEntriesFromAclWithOptions(request, runtime);
}

model DeleteSecurityPolicyRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略Id'),
}

model DeleteSecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteSecurityPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityPolicyResponseBody(name='body'),
}

async function deleteSecurityPolicyWithOptions(request: DeleteSecurityPolicyRequest, runtime: Util.RuntimeOptions): DeleteSecurityPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSecurityPolicy', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSecurityPolicy(request: DeleteSecurityPolicyRequest): DeleteSecurityPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityPolicyWithOptions(request, runtime);
}

model DisableLoadBalancerAccessLogRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  loadBalancerId?: string(name='LoadBalancerId', description='实例id'),
}

model DisableLoadBalancerAccessLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DisableLoadBalancerAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: DisableLoadBalancerAccessLogResponseBody(name='body'),
}

async function disableLoadBalancerAccessLogWithOptions(request: DisableLoadBalancerAccessLogRequest, runtime: Util.RuntimeOptions): DisableLoadBalancerAccessLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableLoadBalancerAccessLog', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableLoadBalancerAccessLog(request: DisableLoadBalancerAccessLogRequest): DisableLoadBalancerAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLoadBalancerAccessLogWithOptions(request, runtime);
}

model ListServerGroupsRequest {
  serverGroupIds?: [ string ](name='ServerGroupIds', description='服务器组Id列表'),
  serverGroupNames?: [ string ](name='ServerGroupNames', description='服务器组名称'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  vpcId?: string(name='VpcId', description='VpcId'),
}

model ListServerGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  serverGroups?: [ 
    {
      healthCheckConfig?: {
        healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口'),
        healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='是否启用健康检查'),
        healthCheckHost?: string(name='HealthCheckHost', description='域名'),
        healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码'),
        healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本'),
        healthCheckInterval?: int32(name='HealthCheckInterval', description='间隔时间'),
        healthCheckMethod?: string(name='HealthCheckMethod', description='方法'),
        healthCheckPath?: string(name='HealthCheckPath', description='uri'),
        healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议'),
        healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间'),
        healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值'),
        unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值'),
      }(name='HealthCheckConfig', description='健康检查配置'),
      protocol?: string(name='Protocol', description='服务器组协议'),
      relatedLoadBalancerIds?: [ string ](name='RelatedLoadBalancerIds', description='关联的实例id'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组id'),
      scheduler?: string(name='Scheduler', description='调度策略'),
      serverGroupId?: string(name='ServerGroupId', description='服务器组Id'),
      serverGroupName?: string(name='ServerGroupName', description='服务器组名称'),
      serverGroupStatus?: string(name='ServerGroupStatus', description='服务器组状态'),
      stickySessionConfig?: {
        cookie?: string(name='Cookie', description='Cookie'),
        cookieTimeout?: int32(name='CookieTimeout', description='Cookie超时时间'),
        stickySessionEnabled?: boolean(name='StickySessionEnabled', description='是否开启会话保持'),
        stickySessionType?: string(name='StickySessionType', description='会话保持类型'),
      }(name='StickySessionConfig', description='会话保持配置'),
      vpcId?: string(name='VpcId', description='服务器组所在VpcId'),
    }
  ](name='ServerGroups', description='服务器组'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServerGroupsResponseBody(name='body'),
}

async function listServerGroupsWithOptions(request: ListServerGroupsRequest, runtime: Util.RuntimeOptions): ListServerGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListServerGroups', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listServerGroups(request: ListServerGroupsRequest): ListServerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServerGroupsWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceId?: string(name='ResourceId', description='指定资源Id'),
  newResourceGroupId?: string(name='NewResourceGroupId', description='资源组id'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveResourceGroup', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model EnableDeletionProtectionRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  resourceId?: string(name='ResourceId', description='实例id'),
}

model EnableDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model EnableDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDeletionProtectionResponseBody(name='body'),
}

async function enableDeletionProtectionWithOptions(request: EnableDeletionProtectionRequest, runtime: Util.RuntimeOptions): EnableDeletionProtectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableDeletionProtection', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableDeletionProtection(request: EnableDeletionProtectionRequest): EnableDeletionProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDeletionProtectionWithOptions(request, runtime);
}

model GetListenerHealthStatusRequest {
  listenerId?: string(name='ListenerId', description='监听Id'),
  includeRule?: boolean(name='IncludeRule', description='是否包含转发规则健康检查结果'),
}

model GetListenerHealthStatusResponseBody = {
  listenerHealthStatus?: [ 
    {
      listenerId?: string(name='ListenerId', description='监听Id'),
      listenerPort?: int32(name='ListenerPort', description='监听的端口号'),
      listenerProtocol?: string(name='ListenerProtocol', description='监听的协议'),
      serverGroupInfos?: [ 
        {
          healthCheckEnabled?: string(name='HealthCheckEnabled', description='健康检查开启/关闭'),
          nonNormalServers?: [ 
            {
              port?: int32(name='Port', description='后端服务器端口'),
              reason?: {
                actualResponse?: string(name='ActualResponse', description='后端实际的返回码信息'),
                expectedResponse?: string(name='ExpectedResponse', description='用户预期的后端返回码信息'),
                reasonCode?: string(name='ReasonCode', description='失败reasonCode'),
              }(name='Reason', description='status为非正常状态时的详细异常原因'),
              serverId?: string(name='ServerId', description='后端服务器id'),
              serverIp?: string(name='ServerIp', description='后端服务器Ip'),
              status?: string(name='Status', description='健康检查状态'),
            }
          ](name='NonNormalServers', description='处于非正常状态的后端服务器'),
          serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
          actionType?: string(name='ActionType', description='服务器组使用类型'),
        }
      ](name='ServerGroupInfos', description='服务器组健康检查结果'),
    }
  ](name='ListenerHealthStatus', description='监听健康检查结果'),
  requestId?: string(name='RequestId', description='请求Id'),
  ruleHealthStatus?: [ 
    {
      ruleId?: string(name='RuleId', description='转发规则ID'),
      serverGroupInfos?: [ 
        {
          healthCheckEnabled?: string(name='HealthCheckEnabled', description='健康检查开启/关闭'),
          nonNormalServers?: [ 
            {
              port?: int32(name='Port', description='后端服务器端口'),
              reason?: {
                actualResponse?: string(name='ActualResponse', description='后端实际的返回码信息'),
                expectedResponse?: string(name='ExpectedResponse', description='用户预期的后端返回码信息'),
                reasonCode?: string(name='ReasonCode', description='失败reasonCode'),
              }(name='Reason', description='status为非正常状态时的详细异常原因'),
              serverId?: string(name='ServerId', description='后端服务器Id'),
              serverIp?: string(name='ServerIp', description='后端服务器ID'),
              status?: string(name='Status', description='健康检查状态'),
            }
          ](name='NonNormalServers', description='处于非正常状态的后端服务器'),
          serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
          actionType?: string(name='ActionType', description='服务器组使用类型'),
        }
      ](name='ServerGroupInfos', description='服务器组健康检查结果'),
    }
  ](name='RuleHealthStatus', description='转发规则健康检查结果'),
}

model GetListenerHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetListenerHealthStatusResponseBody(name='body'),
}

async function getListenerHealthStatusWithOptions(request: GetListenerHealthStatusRequest, runtime: Util.RuntimeOptions): GetListenerHealthStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetListenerHealthStatus', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getListenerHealthStatus(request: GetListenerHealthStatusRequest): GetListenerHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListenerHealthStatusWithOptions(request, runtime);
}

model UpdateListenerAttributeRequest {
  listenerId?: string(name='ListenerId', description='监听标识'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  listenerDescription?: string(name='ListenerDescription', description='监听描述'),
  requestTimeout?: int32(name='RequestTimeout', description='请求超时时间'),
  idleTimeout?: int32(name='IdleTimeout', description='连接空闲超时时间'),
  gzipEnabled?: boolean(name='GzipEnabled', description='是否开启Gzip压缩'),
  http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP/2特性'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertClientVerifyEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='是否通过X-Forwarded-Clientcert-clientverify  头字段获取对访问负载均衡实例客户端证书的校验结果。HTTPS监听有效。'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertFingerprintEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='是否通过X-Forwarded-Clientcert-fingerprint 头字段获取访问负载均衡实例客户端证书的指纹取值，HTTPS监听有效。'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertIssuerDNEnabled的值为‘On’的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='是否通过 X-Forwarded-Clientcert-issuerdn 头字段获取访问负载均衡实例客户端证书的发行者信息。HTTPS监听有效。'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertSubjectDNEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='是否通过X-Forwarded-Clientcert-subjectdn  头字段获取访问负载均衡实例客户端证书的所有者信息。HTTPS监听有效。'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='是否通过X-Forwarded-Client-Port 头字段获取访问负载均衡实例客户端的端口。HTTPS监听有效。'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='是否通过X-Forwarded-Proto头字段获取负载均衡实例的监听协议。'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='是否通过SLB-ID头字段获取负载均衡实例ID。'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='是否通过X-Forwarded-Port 头字段获取负载均衡实例的监听端口。HTTPS监听有效。'),
  }(name='XForwardedForConfig', description='XForward字段相关的配置'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='需要关联的QUIC监听ID，HTTPS监听时有效，QuicUpgradeEnabled为true时必选'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='是否开启quic升级，HTTPS监听时有效'),
  }(name='QuicConfig', description='HTTPS启用QUIC时相关属性'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='正式标识'),
    }
  ](name='Certificates', description='监听默认服务器证书列表，N当前取值范围为1'),
  defaultActions?: [ 
    {
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
          }
        ](name='ServerGroupTuples', description='服务器组列表'),
      }(name='ForwardGroupConfig', description='转发组'),
      type?: string(name='Type', description='动作类型'),
    }
  ](name='DefaultActions', description='监听默认动作'),
}

model UpdateListenerAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateListenerAttributeResponseBody(name='body'),
}

async function updateListenerAttributeWithOptions(request: UpdateListenerAttributeRequest, runtime: Util.RuntimeOptions): UpdateListenerAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateListenerAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateListenerAttribute(request: UpdateListenerAttributeRequest): UpdateListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateListenerAttributeWithOptions(request, runtime);
}

model CreateLoadBalancerRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  vpcId?: string(name='VpcId', description='负载均衡实例的专有网络ID。'),
  addressType?: string(name='AddressType', description='负载均衡的地址类型'),
  loadBalancerName?: string(name='LoadBalancerName', description='名称'),
  deletionProtectionEnabled?: boolean(name='DeletionProtectionEnabled', description='是否开启删除保护'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='设置修改保护状态的原因'),
    status?: string(name='Status', description='负载均衡修改保护状态'),
  }(name='ModificationProtectionConfig', description='负载均衡修改保护相关信息'),
  zoneMappings?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='交换机标识'),
      zoneId?: string(name='ZoneId', description='可用区'),
    }
  ](name='ZoneMappings', description='可用区及交换机映射列表'),
  addressAllocatedMode?: string(name='AddressAllocatedMode', description='地址模式'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组'),
  loadBalancerEdition?: string(name='LoadBalancerEdition', description='负载均衡的版本'),
  loadBalancerBillingConfig?: {
    payType?: string(name='PayType', description='实例的计费类型'),
  }(name='LoadBalancerBillingConfig', description='计费相关配置信息'),
}

model CreateLoadBalancerResponseBody = {
  loadBalancerId?: string(name='LoadBalancerId', description='负载均衡实例标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoadBalancerResponseBody(name='body'),
}

async function createLoadBalancerWithOptions(request: CreateLoadBalancerRequest, runtime: Util.RuntimeOptions): CreateLoadBalancerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLoadBalancer', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoadBalancerWithOptions(request, runtime);
}

model DeleteHealthCheckTemplatesRequest {
  healthCheckTemplateIds?: [ string ](name='HealthCheckTemplateIds', description='健康检查模板Id列表'),
  clientToken?: string(name='ClientToken', description='幂等token'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model DeleteHealthCheckTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteHealthCheckTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHealthCheckTemplatesResponseBody(name='body'),
}

async function deleteHealthCheckTemplatesWithOptions(request: DeleteHealthCheckTemplatesRequest, runtime: Util.RuntimeOptions): DeleteHealthCheckTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteHealthCheckTemplates', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteHealthCheckTemplates(request: DeleteHealthCheckTemplatesRequest): DeleteHealthCheckTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHealthCheckTemplatesWithOptions(request, runtime);
}

model UpdateServerGroupAttributeRequest {
  serverGroupName?: string(name='ServerGroupName', description='Acl名称'),
  scheduler?: string(name='Scheduler', description='调度策略'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  healthCheckConfig?: {
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查端口'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='是否启用健康检查'),
    healthCheckHost?: string(name='HealthCheckHost', description='健康检查域名'),
    healthCheckCodes?: [ string ](name='HealthCheckCodes', description='健康检查正常的状态码'),
    healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='健康检查HTTP协议版本'),
    healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查间隔'),
    healthCheckMethod?: string(name='HealthCheckMethod', description='健康检查方法'),
    healthCheckPath?: string(name='HealthCheckPath', description='健康检查Path'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', description='健康检查协议类型'),
    healthCheckTimeout?: int32(name='HealthCheckTimeout', description='健康检查超时时间'),
    healthyThreshold?: int32(name='HealthyThreshold', description='健康检查成功判定阈值'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查不成功判定阈值'),
  }(name='HealthCheckConfig', description='健康检查配置'),
  stickySessionConfig?: {
    cookie?: string(name='Cookie', description='服务器上配置的Cookie'),
    cookieTimeout?: int32(name='CookieTimeout', description='服务器上配置的Cookie'),
    stickySessionEnabled?: boolean(name='StickySessionEnabled', description='是否启用会话保持'),
    stickySessionType?: string(name='StickySessionType', description='会话保持类型'),
  }(name='StickySessionConfig', description='会话保持配置'),
  serverGroupId?: string(name='ServerGroupId', description='服务器组Id'),
}

model UpdateServerGroupAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateServerGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServerGroupAttributeResponseBody(name='body'),
}

async function updateServerGroupAttributeWithOptions(request: UpdateServerGroupAttributeRequest, runtime: Util.RuntimeOptions): UpdateServerGroupAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateServerGroupAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateServerGroupAttribute(request: UpdateServerGroupAttributeRequest): UpdateServerGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServerGroupAttributeWithOptions(request, runtime);
}

model CreateServerGroupRequest {
  serverGroupName?: string(name='ServerGroupName', description='Acl名称'),
  vpcId?: string(name='VpcId', description='VpcId'),
  scheduler?: string(name='Scheduler', description='调度策略'),
  protocol?: string(name='Protocol', description='后端协议类型'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组id'),
  healthCheckConfig?: {
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查端口'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='是否启用健康检查'),
    healthCheckHost?: string(name='HealthCheckHost', description='健康检查域名'),
    healthCheckCodes?: [ string ](name='HealthCheckCodes', description='健康检查正常的状态码'),
    healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='健康检查HTTP协议版本'),
    healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查间隔'),
    healthCheckMethod?: string(name='HealthCheckMethod', description='健康检查方法'),
    healthCheckPath?: string(name='HealthCheckPath', description='健康检查Path'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', description='健康检查协议类型'),
    healthCheckTimeout?: int32(name='HealthCheckTimeout', description='健康检查超时时间'),
    healthyThreshold?: int32(name='HealthyThreshold', description='健康检查成功判定阈值'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查不成功判定阈值'),
  }(name='HealthCheckConfig', description='健康检查配置'),
  stickySessionConfig?: {
    cookie?: string(name='Cookie', description='服务器上配置的Cookie'),
    cookieTimeout?: int32(name='CookieTimeout', description='服务器上配置的Cookie'),
    stickySessionEnabled?: boolean(name='StickySessionEnabled', description='是否启用会话保持'),
    stickySessionType?: string(name='StickySessionType', description='会话保持类型'),
  }(name='StickySessionConfig', description='会话保持配置'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
}

model CreateServerGroupResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  serverGroupId?: string(name='ServerGroupId', description='服务器组id'),
}

model CreateServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServerGroupResponseBody(name='body'),
}

async function createServerGroupWithOptions(request: CreateServerGroupRequest, runtime: Util.RuntimeOptions): CreateServerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateServerGroup', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServerGroup(request: CreateServerGroupRequest): CreateServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServerGroupWithOptions(request, runtime);
}

model AssociateAclsWithListenerRequest {
  aclIds?: [ string ](name='AclIds', description='访问控制策略Id'),
  listenerId?: string(name='ListenerId', description='监听Id'),
  aclType?: string(name='AclType', description='绑定类型'),
  dryRun?: boolean(name='DryRun', description='预检此次请求'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
}

model AssociateAclsWithListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model AssociateAclsWithListenerResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateAclsWithListenerResponseBody(name='body'),
}

async function associateAclsWithListenerWithOptions(request: AssociateAclsWithListenerRequest, runtime: Util.RuntimeOptions): AssociateAclsWithListenerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateAclsWithListener', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateAclsWithListener(request: AssociateAclsWithListenerRequest): AssociateAclsWithListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateAclsWithListenerWithOptions(request, runtime);
}

model DeleteRuleRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  ruleId?: string(name='RuleId', description='转发规则标识'),
}

model DeleteRuleResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRule', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model ListRulesRequest {
  nextToken?: string(name='NextToken', description='用来标记当前开始读取的位置，置空表示从头开始。'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量，此参数为可选参数，取值1-100，用户传入为空时，默认为20。'),
  ruleIds?: [ string ](name='RuleIds', description='转发规则ID列表，N最大支持20'),
  listenerIds?: [ string ](name='ListenerIds', description='监听ID列表'),
}

model ListRulesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置，空代表数据已经读取完毕。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  rules?: [ 
    {
      listenerId?: string(name='ListenerId', description='监听ID'),
      loadBalancerId?: string(name='LoadBalancerId', description='实例ID'),
      priority?: int32(name='Priority', description='转发规则优先级'),
      ruleActions?: [ 
        {
          fixedResponseConfig?: {
            content?: string(name='Content', description='内容'),
            contentType?: string(name='ContentType', description='内容类型'),
            httpCode?: string(name='HttpCode', description='HTTP响应码'),
          }(name='FixedResponseConfig', description='返回固定内容动作配置'),
          forwardGroupConfig?: {
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
              }
            ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
          }(name='ForwardGroupConfig', description='转发组动作配置'),
          insertHeaderConfig?: {
            key?: string(name='Key', description='HTTP标头'),
            value?: string(name='Value', description='HTTP标头内容'),
            valueType?: string(name='ValueType', description='取值类型'),
          }(name='InsertHeaderConfig', description='插入头部动作配置'),
          order?: int32(name='Order', description='优先级'),
          redirectConfig?: {
            host?: string(name='Host', description='要跳转的主机地址'),
            httpCode?: string(name='HttpCode', description='跳转方式'),
            path?: string(name='Path', description='要跳转的路径'),
            port?: string(name='Port', description='要跳转的端口'),
            protocol?: string(name='Protocol', description='要跳转的协议'),
            query?: string(name='Query', description='要跳转的查询字符串'),
          }(name='RedirectConfig', description='重定向动作配置'),
          rewriteConfig?: {
            host?: string(name='Host', description='主机名'),
            path?: string(name='Path', description='路径'),
            query?: string(name='Query', description='查询'),
          }(name='RewriteConfig', description='内部重定向动作配置'),
          type?: string(name='Type', description='转发规则动作类型'),
        }
      ](name='RuleActions', description='转发规则动作'),
      ruleConditions?: [ 
        {
          cookieConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='Cookie条件键'),
                value?: string(name='Value', description='Cookie条件值'),
              }
            ](name='Values', description='Cookie键值对列表'),
          }(name='CookieConfig', description='Cookie条件配置'),
          headerConfig?: {
            key?: string(name='Key', description='HTTP标头键'),
            values?: [ string ](name='Values', description='HTTP标头值列表'),
          }(name='HeaderConfig', description='HTTP标头条件配置'),
          hostConfig?: {
            values?: [ string ](name='Values', description='主机名列表'),
          }(name='HostConfig', description='主机名条件配置'),
          methodConfig?: {
            values?: [ string ](name='Values', description='HTTP请求方法列表'),
          }(name='MethodConfig', description='HTTP请求方法条件配置'),
          pathConfig?: {
            values?: [ string ](name='Values', description='路径条件列表'),
          }(name='PathConfig', description='路径条件配置'),
          queryStringConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='查询字符串条件键'),
                value?: string(name='Value', description='查询字符串条件值'),
              }
            ](name='Values', description='查询字符串条件键值对列表'),
          }(name='QueryStringConfig', description='查询字符串条件配置'),
          type?: string(name='Type', description='条件类型'),
        }
      ](name='RuleConditions', description='转发规则条件'),
      ruleId?: string(name='RuleId', description='转发规则标识'),
      ruleName?: string(name='RuleName', description='转发规则名称'),
      ruleStatus?: string(name='RuleStatus', description='转发规则状态'),
    }
  ](name='Rules', description='转发规则列表'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRulesResponseBody(name='body'),
}

async function listRulesWithOptions(request: ListRulesRequest, runtime: Util.RuntimeOptions): ListRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRules', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRulesWithOptions(request, runtime);
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='可用区名称'),
      zoneId?: string(name='ZoneId', description='可用区id'),
    }
  ](name='Zones', description='可用区列表'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(runtime: Util.RuntimeOptions): DescribeZonesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeZones', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeZones(): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(runtime);
}

model DeleteServerGroupRequest {
  clientToken?: string(name='ClientToken', description='幂等参数'),
  serverGroupId?: string(name='ServerGroupId', description='服务器组id'),
  dryRun?: boolean(name='DryRun', description='是否DryRun'),
}

model DeleteServerGroupResponseBody = {
  jobId?: string(name='JobId', description='job'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServerGroupResponseBody(name='body'),
}

async function deleteServerGroupWithOptions(request: DeleteServerGroupRequest, runtime: Util.RuntimeOptions): DeleteServerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteServerGroup', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteServerGroup(request: DeleteServerGroupRequest): DeleteServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServerGroupWithOptions(request, runtime);
}

model AddServersToServerGroupRequest {
  serverGroupId?: string(name='ServerGroupId', description='后端服务器Id'),
  servers?: [ 
    {
      description?: string(name='Description', description='描述信息'),
      port?: int32(name='Port', description='后端端口号'),
      serverId?: string(name='ServerId', description='后端服务器id'),
      serverIp?: string(name='ServerIp', description='后端服务器ip'),
      serverType?: string(name='ServerType', description='后端服务器类型'),
      weight?: int32(name='Weight', description='后端服务器权重'),
    }
  ](name='Servers', description='后端服务器'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model AddServersToServerGroupResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddServersToServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddServersToServerGroupResponseBody(name='body'),
}

async function addServersToServerGroupWithOptions(request: AddServersToServerGroupRequest, runtime: Util.RuntimeOptions): AddServersToServerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddServersToServerGroup', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addServersToServerGroup(request: AddServersToServerGroupRequest): AddServersToServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addServersToServerGroupWithOptions(request, runtime);
}

model DeleteLoadBalancerRequest {
  loadBalancerId?: string(name='LoadBalancerId', description='实例id'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
}

model DeleteLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLoadBalancerResponseBody(name='body'),
}

async function deleteLoadBalancerWithOptions(request: DeleteLoadBalancerRequest, runtime: Util.RuntimeOptions): DeleteLoadBalancerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLoadBalancer', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLoadBalancer(request: DeleteLoadBalancerRequest): DeleteLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLoadBalancerWithOptions(request, runtime);
}

model UpdateListenerLogConfigRequest {
  listenerId?: string(name='ListenerId', description='监听标识'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='是否开启携带自定义Header'),
  accessLogTracingConfig?: {
    tracingEnabled?: boolean(name='TracingEnabled', description='Xtrace功能状态'),
    tracingSample?: int32(name='TracingSample', description='xtrace的采样率'),
    tracingType?: string(name='TracingType', description='xtrace的类型'),
  }(name='AccessLogTracingConfig', description='访问日志xtrace字段相关的配置'),
}

model UpdateListenerLogConfigResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateListenerLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateListenerLogConfigResponseBody(name='body'),
}

async function updateListenerLogConfigWithOptions(request: UpdateListenerLogConfigRequest, runtime: Util.RuntimeOptions): UpdateListenerLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateListenerLogConfig', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateListenerLogConfig(request: UpdateListenerLogConfigRequest): UpdateListenerLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateListenerLogConfigWithOptions(request, runtime);
}

model UnTagResourcesRequest {
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceId?: [ string ](name='ResourceId', description='资源实例Id'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表'),
  tagKey?: [ string ](name='TagKey', description='标签键列表'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagResourcesResponseBody(name='body'),
}

async function unTagResourcesWithOptions(request: UnTagResourcesRequest, runtime: Util.RuntimeOptions): UnTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnTagResources', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unTagResourcesWithOptions(request, runtime);
}

model ListSystemSecurityPoliciesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  securityPolicies?: [ 
    {
      ciphers?: [ string ](name='Ciphers', description='加密套件'),
      securityPolicyId?: string(name='SecurityPolicyId', description='安全策略Id'),
      TLSVersions?: [ string ](name='TLSVersions', description='协议版本'),
    }
  ](name='SecurityPolicies', description='安全策略'),
}

model ListSystemSecurityPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSystemSecurityPoliciesResponseBody(name='body'),
}

async function listSystemSecurityPoliciesWithOptions(runtime: Util.RuntimeOptions): ListSystemSecurityPoliciesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListSystemSecurityPolicies', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSystemSecurityPolicies(): ListSystemSecurityPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemSecurityPoliciesWithOptions(runtime);
}

model AddEntriesToAclRequest {
  aclId?: string(name='AclId', description='AclId'),
  aclEntries?: [ 
    {
      description?: string(name='Description', description='描述信息'),
      entry?: string(name='Entry', description='条目'),
    }
  ](name='AclEntries', description='条目信息列表'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model AddEntriesToAclResponseBody = {
  jobId?: string(name='JobId', description='job'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddEntriesToAclResponse = {
  headers: map[string]string(name='headers'),
  body: AddEntriesToAclResponseBody(name='body'),
}

async function addEntriesToAclWithOptions(request: AddEntriesToAclRequest, runtime: Util.RuntimeOptions): AddEntriesToAclResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddEntriesToAcl', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addEntriesToAcl(request: AddEntriesToAclRequest): AddEntriesToAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEntriesToAclWithOptions(request, runtime);
}

model DeleteAclRequest {
  aclId?: string(name='AclId', description='访问控制策略id'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dryRun?: boolean(name='DryRun', description='DryRun'),
}

model DeleteAclResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAclResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAclResponseBody(name='body'),
}

async function deleteAclWithOptions(request: DeleteAclRequest, runtime: Util.RuntimeOptions): DeleteAclResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAcl', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAcl(request: DeleteAclRequest): DeleteAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAclWithOptions(request, runtime);
}

model DissociateAdditionalCertificatesFromListenerRequest {
  listenerId?: string(name='ListenerId', description='监听Id'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='证书Id'),
    }
  ](name='Certificates', description='证书列表'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model DissociateAdditionalCertificatesFromListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DissociateAdditionalCertificatesFromListenerResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateAdditionalCertificatesFromListenerResponseBody(name='body'),
}

async function dissociateAdditionalCertificatesFromListenerWithOptions(request: DissociateAdditionalCertificatesFromListenerRequest, runtime: Util.RuntimeOptions): DissociateAdditionalCertificatesFromListenerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DissociateAdditionalCertificatesFromListener', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dissociateAdditionalCertificatesFromListener(request: DissociateAdditionalCertificatesFromListenerRequest): DissociateAdditionalCertificatesFromListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateAdditionalCertificatesFromListenerWithOptions(request, runtime);
}

model UpdateLoadBalancerEditionRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  loadBalancerId?: string(name='LoadBalancerId', description='实例Id'),
  loadBalancerEdition?: string(name='LoadBalancerEdition', description='实例版本'),
}

model UpdateLoadBalancerEditionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLoadBalancerEditionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLoadBalancerEditionResponseBody(name='body'),
}

async function updateLoadBalancerEditionWithOptions(request: UpdateLoadBalancerEditionRequest, runtime: Util.RuntimeOptions): UpdateLoadBalancerEditionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLoadBalancerEdition', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLoadBalancerEdition(request: UpdateLoadBalancerEditionRequest): UpdateLoadBalancerEditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLoadBalancerEditionWithOptions(request, runtime);
}

model ListListenersRequest {
  nextToken?: string(name='NextToken', description='用来标记当前开始读取的位置，置空表示从头开始。'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量，此参数为可选参数，取值1-100，用户传入为空时，默认为20。'),
  listenerIds?: [ string ](name='ListenerIds', description='监听ID列表，N最大支持20'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='实例ID列表，N最大支持20'),
  listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
}

model ListListenersResponseBody = {
  listeners?: [ 
    {
      defaultActions?: [ 
        {
          forwardGroupConfig?: {
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
              }
            ](name='ServerGroupTuples', description='服务器组列表'),
          }(name='ForwardGroupConfig', description='转发到服务器组'),
          type?: string(name='Type', description='类型'),
        }
      ](name='DefaultActions', description='默认动作'),
      gzipEnabled?: boolean(name='GzipEnabled', description='是否开启Gzip压缩'),
      http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP/2特性'),
      idleTimeout?: int32(name='IdleTimeout', description='连接空闲超时时间'),
      listenerDescription?: string(name='ListenerDescription', description='监听描述'),
      listenerId?: string(name='ListenerId', description='监听标识'),
      listenerPort?: int32(name='ListenerPort', description='监听端口'),
      listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
      listenerStatus?: string(name='ListenerStatus', description='监听状态'),
      loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
      logConfig?: {
        accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='访问日志是否开启携带自定义Header'),
        accessLogTracingConfig?: {
          tracingEnabled?: boolean(name='TracingEnabled', description='Xtrace功能状态'),
          tracingSample?: int32(name='TracingSample', description='Xtrace功能状态'),
          tracingType?: string(name='TracingType', description='xtrace的类型'),
        }(name='AccessLogTracingConfig', description='访问日志Xtrace相关的配置'),
      }(name='LogConfig', description='监听访问日志相关配置'),
      quicConfig?: {
        quicListenerId?: string(name='QuicListenerId', description='需要关联的QUIC监听ID，HTTPS监听时有效，QuicUpgradeEnabled为true时必选'),
        quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='是否开启quic升级，HTTPS监听时有效'),
      }(name='QuicConfig', description='HTTPS启用QUIC时相关属性'),
      requestTimeout?: int32(name='RequestTimeout', description='请求超时时间'),
      securityPolicyId?: string(name='SecurityPolicyId', description='安全策略'),
      XForwardedForConfig?: {
        XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertClientVerifyEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
        XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='是否通过X-Forwarded-Clientcert-clientverify  头字段获取对访问负载均衡实例客户端证书的校验结果。HTTPS监听有效。'),
        XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertFingerprintEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
        XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='是否通过X-Forwarded-Clientcert-fingerprint 头字段获取访问负载均衡实例客户端证书的指纹取值，HTTPS监听有效。'),
        XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertIssuerDNEnabled的值为‘On’的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
        XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='是否通过 X-Forwarded-Clientcert-issuerdn 头字段获取访问负载均衡实例客户端证书的发行者信息。HTTPS监听有效。'),
        XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertSubjectDNEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
        XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='是否通过X-Forwarded-Clientcert-subjectdn  头字段获取访问负载均衡实例客户端证书的所有者信息。HTTPS监听有效。'),
        XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='是否通过X-Forwarded-Client-Port 头字段获取访问负载均衡实例客户端的端口。HTTPS监听有效。'),
        XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP'),
        XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='是否通过X-Forwarded-Proto头字段获取负载均衡实例的监听协议。'),
        XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='是否通过SLB-ID头字段获取负载均衡实例ID。'),
        XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='是否通过X-Forwarded-Port 头字段获取负载均衡实例的监听端口。HTTPS监听有效。'),
      }(name='XForwardedForConfig', description='XForward字段相关的配置'),
    }
  ](name='Listeners', description='监听列表'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置，空代表数据已经读取完毕。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。'),
}

model ListListenersResponse = {
  headers: map[string]string(name='headers'),
  body: ListListenersResponseBody(name='body'),
}

async function listListenersWithOptions(request: ListListenersRequest, runtime: Util.RuntimeOptions): ListListenersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListListeners', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listListeners(request: ListListenersRequest): ListListenersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenersWithOptions(request, runtime);
}

model ListAclRelationsRequest {
  aclIds?: [ string ](name='AclIds', description='访问控制策略Id'),
}

model ListAclRelationsResponseBody = {
  aclRelations?: [ 
    {
      aclId?: string(name='AclId', description='访问控制策略id'),
      relatedListeners?: [ 
        {
          listenerId?: string(name='ListenerId', description='监听ID'),
          listenerPort?: int32(name='ListenerPort', description='监听端口'),
          listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
          loadBalancerId?: string(name='LoadBalancerId', description='实例ID'),
          status?: string(name='Status', description='关联状态'),
        }
      ](name='RelatedListeners', description='关联的监听'),
    }
  ](name='AclRelations', description='访问控制列表'),
  requestId?: string(name='RequestId', description='请求id'),
}

model ListAclRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAclRelationsResponseBody(name='body'),
}

async function listAclRelationsWithOptions(request: ListAclRelationsRequest, runtime: Util.RuntimeOptions): ListAclRelationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAclRelations', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAclRelations(request: ListAclRelationsRequest): ListAclRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAclRelationsWithOptions(request, runtime);
}

model DeleteRulesRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  ruleIds?: [ string ](name='RuleIds', description='同一个监听下的转发规则标识列表'),
}

model DeleteRulesResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRulesResponseBody(name='body'),
}

async function deleteRulesWithOptions(request: DeleteRulesRequest, runtime: Util.RuntimeOptions): DeleteRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRules', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRules(request: DeleteRulesRequest): DeleteRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRulesWithOptions(request, runtime);
}

model DeleteListenerRequest {
  listenerId?: string(name='ListenerId', description='监听id'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
}

model DeleteListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteListenerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteListenerResponseBody(name='body'),
}

async function deleteListenerWithOptions(request: DeleteListenerRequest, runtime: Util.RuntimeOptions): DeleteListenerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteListener', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteListener(request: DeleteListenerRequest): DeleteListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteListenerWithOptions(request, runtime);
}

model ListTagKeysRequest {
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  resourceType?: string(name='ResourceType', description='资源类型'),
  category?: string(name='Category', description='标签类型'),
  keyword?: string(name='Keyword', description='具体的标签Key'),
}

model ListTagKeysResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  tagKeys?: [ 
    {
      category?: string(name='Category', description='标签类型'),
      tagKey?: string(name='TagKey', description='标签Key'),
    }
  ](name='TagKeys', description='标签Key列表'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagKeys', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model AssociateAdditionalCertificatesWithListenerRequest {
  listenerId?: string(name='ListenerId', description='监听Id'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='证书Id'),
    }
  ](name='Certificates', description='证书列表'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model AssociateAdditionalCertificatesWithListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AssociateAdditionalCertificatesWithListenerResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateAdditionalCertificatesWithListenerResponseBody(name='body'),
}

async function associateAdditionalCertificatesWithListenerWithOptions(request: AssociateAdditionalCertificatesWithListenerRequest, runtime: Util.RuntimeOptions): AssociateAdditionalCertificatesWithListenerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateAdditionalCertificatesWithListener', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateAdditionalCertificatesWithListener(request: AssociateAdditionalCertificatesWithListenerRequest): AssociateAdditionalCertificatesWithListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateAdditionalCertificatesWithListenerWithOptions(request, runtime);
}

model ListHealthCheckTemplatesRequest {
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  healthCheckTemplateIds?: [ string ](name='HealthCheckTemplateIds', description='健康检查模板ID列表'),
  healthCheckTemplateNames?: [ string ](name='HealthCheckTemplateNames', description='健康检查模板名称列表'),
}

model ListHealthCheckTemplatesResponseBody = {
  healthCheckTemplates?: [ 
    {
      healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口'),
      healthCheckHost?: string(name='HealthCheckHost', description='域名'),
      healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码'),
      healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本'),
      healthCheckInterval?: int32(name='HealthCheckInterval', description='间隔时间'),
      healthCheckMethod?: string(name='HealthCheckMethod', description='方法'),
      healthCheckPath?: string(name='HealthCheckPath', description='uri'),
      healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议'),
      healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板Id'),
      healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='名称'),
      healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间'),
      healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值'),
      unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值'),
    }
  ](name='HealthCheckTemplates', description='健康检查模板'),
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListHealthCheckTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListHealthCheckTemplatesResponseBody(name='body'),
}

async function listHealthCheckTemplatesWithOptions(request: ListHealthCheckTemplatesRequest, runtime: Util.RuntimeOptions): ListHealthCheckTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHealthCheckTemplates', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHealthCheckTemplates(request: ListHealthCheckTemplatesRequest): ListHealthCheckTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHealthCheckTemplatesWithOptions(request, runtime);
}

model GetLoadBalancerAttributeRequest {
  loadBalancerId?: string(name='LoadBalancerId', description='实例标识'),
}

model GetLoadBalancerAttributeResponseBody = {
  accessLogConfig?: {
    logProject?: string(name='LogProject', description='访问日志投递的logProject'),
    logStore?: string(name='LogStore', description='删除保护开启时间'),
  }(name='AccessLogConfig', description='访问日志属性'),
  addressAllocatedMode?: string(name='AddressAllocatedMode', description='地址分配方式'),
  addressType?: string(name='AddressType', description='地址类型'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='带宽包ID'),
  createTime?: string(name='CreateTime', description='资源创建时间'),
  DNSName?: string(name='DNSName', description='DNS域名'),
  deletionProtectionConfig?: {
    enabled?: boolean(name='Enabled', description='删除保护状态'),
    enabledTime?: string(name='EnabledTime', description='删除保护开启时间'),
  }(name='DeletionProtectionConfig', description='负载均衡删除保护相关信息'),
  loadBalancerBillingConfig?: {
    payType?: string(name='PayType', description='实例的计费类型'),
  }(name='LoadBalancerBillingConfig', description='计费相关属性'),
  loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='实例业务状态'),
  loadBalancerEdition?: string(name='LoadBalancerEdition', description='负载均衡的版本'),
  loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
  loadBalancerName?: string(name='LoadBalancerName', description='实例名称'),
  loadBalancerOperationLocks?: [ 
    {
      lockReason?: string(name='LockReason', description='锁定原因'),
      lockType?: string(name='LockType', description='锁定类型'),
    }
  ](name='LoadBalancerOperationLocks', description='锁定原因'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='实例状态'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='设置修改保护状态的原因'),
    status?: string(name='Status', description='负载均衡修改保护状态'),
  }(name='ModificationProtectionConfig', description='负载均衡修改保护相关信息'),
  regionId?: string(name='RegionId', description='地域'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resourceGroupId?: string(name='ResourceGroupId', description='企业资源组ID'),
  tags?: [ 
    {
      key?: string(name='Key', description='实例的标签键'),
      value?: string(name='Value', description='实例的标签值'),
    }
  ](name='Tags', description='标签列表'),
  vpcId?: string(name='VpcId', description='Vpc网络ID'),
  zoneMappings?: [ 
    {
      loadBalancerAddresses?: [ 
        {
          address?: string(name='Address', description='IP地址'),
        }
      ](name='LoadBalancerAddresses', description='固定VIP模式下，负载均衡在此可用区中的地址列表'),
      vSwitchId?: string(name='VSwitchId', description='交换机标识'),
      zoneId?: string(name='ZoneId', description='可用区标识'),
    }
  ](name='ZoneMappings', description='负载均衡的可用区资源'),
}

model GetLoadBalancerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoadBalancerAttributeResponseBody(name='body'),
}

async function getLoadBalancerAttributeWithOptions(request: GetLoadBalancerAttributeRequest, runtime: Util.RuntimeOptions): GetLoadBalancerAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLoadBalancerAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLoadBalancerAttribute(request: GetLoadBalancerAttributeRequest): GetLoadBalancerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoadBalancerAttributeWithOptions(request, runtime);
}

model ListTagValuesRequest {
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceId?: string(name='ResourceId', description='资源实例Id'),
  tagKey?: string(name='TagKey', description='具体的标签Key'),
}

model ListTagValuesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  tagValues?: [ string ](name='TagValues', description='标签值列表'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagValues', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model ListLoadBalancersRequest {
  nextToken?: string(name='NextToken', description='用来标记当前开始读取的位置，置空表示从头开始。'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量，此参数为可选参数，取值1-100，用户传入为空时，默认为20。'),
  zoneId?: string(name='ZoneId', description='可用区ID'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='实例状态'),
  loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='实例业务状态'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='实例ID列表，N最大支持20'),
  loadBalancerNames?: [ string ](name='LoadBalancerNames', description='实例Name列表，N最大支持10'),
  vpcIds?: [ string ](name='VpcIds', description='vpcId列表'),
  tag?: [ 
    {
      key?: string(name='Key', description='实例的标签键'),
      value?: string(name='Value', description='实例的标签值'),
    }
  ](name='Tag', description='tag列表'),
  addressType?: string(name='AddressType', description='负载均衡的地址类型'),
  payType?: string(name='PayType', description='付费类型'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
}

model ListLoadBalancersResponseBody = {
  loadBalancers?: [ 
    {
      accessLogConfig?: {
        logProject?: string(name='LogProject', description='访问日志投递的logProject'),
        logStore?: string(name='LogStore', description='删除保护开启时间'),
      }(name='AccessLogConfig', description='访问日志属性'),
      addressAllocatedMode?: string(name='AddressAllocatedMode', description='地址模式'),
      addressType?: string(name='AddressType', description='地址类型'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='带宽包ID'),
      createTime?: string(name='CreateTime', description='资源创建时间'),
      DNSName?: string(name='DNSName', description='DNS域名'),
      deletionProtectionConfig?: {
        enabled?: boolean(name='Enabled', description='删除保护状态'),
        enabledTime?: string(name='EnabledTime', description='删除保护开启时间'),
      }(name='DeletionProtectionConfig', description='负载均衡删除保护相关信息'),
      loadBalancerBillingConfig?: {
        payType?: string(name='PayType', description='实例的计费类型'),
      }(name='LoadBalancerBillingConfig', description='计费相关属性'),
      loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='实例业务状态'),
      loadBalancerEdition?: string(name='LoadBalancerEdition', description='负载均衡的版本'),
      loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
      loadBalancerName?: string(name='LoadBalancerName', description='实例名称'),
      loadBalancerOperationLocks?: [ 
        {
          lockReason?: string(name='LockReason', description='锁定的原因'),
          lockType?: string(name='LockType', description='锁定的类型'),
        }
      ](name='LoadBalancerOperationLocks', description='锁定的原因'),
      loadBalancerStatus?: string(name='LoadBalancerStatus', description='实例状态'),
      modificationProtectionConfig?: {
        reason?: string(name='Reason', description='设置修改保护状态的原因'),
        status?: string(name='Status', description='负载均衡修改保护状态'),
      }(name='ModificationProtectionConfig', description='负载均衡修改保护相关信息'),
      resourceGroupId?: string(name='ResourceGroupId', description='企业资源组ID'),
      tags?: [ 
        {
          key?: string(name='Key', description='实例的标签键'),
          value?: string(name='Value', description='实例的标签值'),
        }
      ](name='Tags', description='标签列表'),
      vpcId?: string(name='VpcId', description='Vpc网络ID'),
    }
  ](name='LoadBalancers', description='实例列表'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置，空代表数据已经读取完毕。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。'),
}

model ListLoadBalancersResponse = {
  headers: map[string]string(name='headers'),
  body: ListLoadBalancersResponseBody(name='body'),
}

async function listLoadBalancersWithOptions(request: ListLoadBalancersRequest, runtime: Util.RuntimeOptions): ListLoadBalancersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListLoadBalancers', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listLoadBalancers(request: ListLoadBalancersRequest): ListLoadBalancersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLoadBalancersWithOptions(request, runtime);
}

model EnableLoadBalancerAccessLogRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  loadBalancerId?: string(name='LoadBalancerId', description='实例id'),
  logProject?: string(name='LogProject', description='日志Project'),
  logStore?: string(name='LogStore', description='日志Store'),
}

model EnableLoadBalancerAccessLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model EnableLoadBalancerAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: EnableLoadBalancerAccessLogResponseBody(name='body'),
}

async function enableLoadBalancerAccessLogWithOptions(request: EnableLoadBalancerAccessLogRequest, runtime: Util.RuntimeOptions): EnableLoadBalancerAccessLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableLoadBalancerAccessLog', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableLoadBalancerAccessLog(request: EnableLoadBalancerAccessLogRequest): EnableLoadBalancerAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLoadBalancerAccessLogWithOptions(request, runtime);
}

model DissociateAclsFromListenerRequest {
  aclIds?: [ string ](name='AclIds', description='访问控制策略Id'),
  listenerId?: string(name='ListenerId', description='监听Id'),
  dryRun?: boolean(name='DryRun', description='预检此次请求'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
}

model DissociateAclsFromListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model DissociateAclsFromListenerResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateAclsFromListenerResponseBody(name='body'),
}

async function dissociateAclsFromListenerWithOptions(request: DissociateAclsFromListenerRequest, runtime: Util.RuntimeOptions): DissociateAclsFromListenerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DissociateAclsFromListener', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dissociateAclsFromListener(request: DissociateAclsFromListenerRequest): DissociateAclsFromListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateAclsFromListenerWithOptions(request, runtime);
}

model ListListenerCertificatesRequest {
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  listenerId?: string(name='ListenerId', description='监听Id'),
  certificateType?: string(name='CertificateType', description='证书类型'),
}

model ListListenerCertificatesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='证书Id'),
      isDefault?: boolean(name='IsDefault', description='是否为默认证书'),
      status?: string(name='Status', description='证书状态'),
      certificateType?: string(name='CertificateType', description='证书类型'),
    }
  ](name='Certificates', description='监听SSL证书列表'),
}

model ListListenerCertificatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListListenerCertificatesResponseBody(name='body'),
}

async function listListenerCertificatesWithOptions(request: ListListenerCertificatesRequest, runtime: Util.RuntimeOptions): ListListenerCertificatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListListenerCertificates', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listListenerCertificates(request: ListListenerCertificatesRequest): ListListenerCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenerCertificatesWithOptions(request, runtime);
}

model CreateAclRequest {
  aclName?: string(name='AclName', description='Acl名称'),
  addressIpVersion?: string(name='AddressIpVersion', description='地址协议版本'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组Id'),
}

model CreateAclResponseBody = {
  aclId?: string(name='AclId', description='AclId'),
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateAclResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAclResponseBody(name='body'),
}

async function createAclWithOptions(request: CreateAclRequest, runtime: Util.RuntimeOptions): CreateAclResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAcl', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAcl(request: CreateAclRequest): CreateAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAclWithOptions(request, runtime);
}

model GetHealthCheckTemplateAttributeRequest {
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板Id'),
}

model GetHealthCheckTemplateAttributeResponseBody = {
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口'),
  healthCheckHost?: string(name='HealthCheckHost', description='域名'),
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本'),
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板Id'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='间隔时间'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='方法'),
  healthCheckPath?: string(name='HealthCheckPath', description='uri'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议'),
  healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='名称'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值'),
  requestId?: string(name='RequestId', description='Id of the request'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值'),
}

model GetHealthCheckTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetHealthCheckTemplateAttributeResponseBody(name='body'),
}

async function getHealthCheckTemplateAttributeWithOptions(request: GetHealthCheckTemplateAttributeRequest, runtime: Util.RuntimeOptions): GetHealthCheckTemplateAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHealthCheckTemplateAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHealthCheckTemplateAttribute(request: GetHealthCheckTemplateAttributeRequest): GetHealthCheckTemplateAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHealthCheckTemplateAttributeWithOptions(request, runtime);
}

model UpdateSecurityPolicyAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略id'),
  TLSVersions?: [ string ](name='TLSVersions', description='TLS版本'),
  ciphers?: [ string ](name='Ciphers', description='加密套件'),
  securityPolicyName?: string(name='SecurityPolicyName', description='安全策略名称'),
}

model UpdateSecurityPolicyAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateSecurityPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSecurityPolicyAttributeResponseBody(name='body'),
}

async function updateSecurityPolicyAttributeWithOptions(request: UpdateSecurityPolicyAttributeRequest, runtime: Util.RuntimeOptions): UpdateSecurityPolicyAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSecurityPolicyAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSecurityPolicyAttribute(request: UpdateSecurityPolicyAttributeRequest): UpdateSecurityPolicyAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSecurityPolicyAttributeWithOptions(request, runtime);
}

model ListSecurityPolicyRelationsRequest {
  securityPolicyIds?: [ string ](name='SecurityPolicyIds', description='安全策略id'),
}

model ListSecurityPolicyRelationsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  secrityPolicyRelations?: [ 
    {
      relatedListeners?: [ 
        {
          listenerId?: string(name='ListenerId', description='监听id'),
          listenerPort?: long(name='ListenerPort', description='监听端口'),
          listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
          loadBalancerId?: string(name='LoadBalancerId', description='实例id'),
        }
      ](name='RelatedListeners', description='关联的监听列表'),
      securityPolicyId?: string(name='SecurityPolicyId', description='安全策略id'),
    }
  ](name='SecrityPolicyRelations', description='安全策略关联关系'),
}

model ListSecurityPolicyRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecurityPolicyRelationsResponseBody(name='body'),
}

async function listSecurityPolicyRelationsWithOptions(request: ListSecurityPolicyRelationsRequest, runtime: Util.RuntimeOptions): ListSecurityPolicyRelationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSecurityPolicyRelations', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSecurityPolicyRelations(request: ListSecurityPolicyRelationsRequest): ListSecurityPolicyRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecurityPolicyRelationsWithOptions(request, runtime);
}

model UpdateLoadBalancerAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  loadBalancerId?: string(name='LoadBalancerId', description='实例id'),
  loadBalancerName?: string(name='LoadBalancerName', description='名称'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='设置修改保护状态的原因'),
    status?: string(name='Status', description='负载均衡修改保护状态'),
  }(name='ModificationProtectionConfig', description='负载均衡修改保护相关信息'),
}

model UpdateLoadBalancerAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLoadBalancerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLoadBalancerAttributeResponseBody(name='body'),
}

async function updateLoadBalancerAttributeWithOptions(request: UpdateLoadBalancerAttributeRequest, runtime: Util.RuntimeOptions): UpdateLoadBalancerAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLoadBalancerAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLoadBalancerAttribute(request: UpdateLoadBalancerAttributeRequest): UpdateLoadBalancerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLoadBalancerAttributeWithOptions(request, runtime);
}

model ListAsynJobsRequest {
  jobIds?: [ string ](name='JobIds', description='任务ID列表'),
  resourceType?: string(name='ResourceType', description='资源类型类型'),
  resourceIds?: [ string ](name='ResourceIds', description='资源实例ID列表'),
  apiName?: string(name='ApiName', description='操作接口名'),
  beginTime?: long(name='BeginTime', description='任务过滤时间范围-开始时间'),
  endTime?: long(name='EndTime', description='任务过滤时间范围-结束时间'),
  nextToken?: string(name='NextToken', description='下一个查询开始Token'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据记录数量'),
}

model ListAsynJobsResponseBody = {
  jobs?: [ 
    {
      apiName?: string(name='ApiName', description='openapi名称'),
      createTime?: long(name='CreateTime', description='任务开始时间戳'),
      errorCode?: string(name='ErrorCode', description='如果Status为失败，则为错误码'),
      errorMessage?: string(name='ErrorMessage', description='如果Status为失败，则为错误信息'),
      id?: string(name='Id', description='任务ID'),
      modifyTime?: long(name='ModifyTime', description='任务结束时间戳'),
      operateType?: string(name='OperateType', description='操作类型'),
      resourceId?: string(name='ResourceId', description='关联的资源实例ID'),
      resourceType?: string(name='ResourceType', description='关联的资源类型'),
      status?: string(name='Status', description='任务状态'),
    }
  ](name='Jobs', description='任务列表'),
  maxResults?: long(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='总记录数	'),
}

model ListAsynJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAsynJobsResponseBody(name='body'),
}

async function listAsynJobsWithOptions(request: ListAsynJobsRequest, runtime: Util.RuntimeOptions): ListAsynJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAsynJobs', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAsynJobs(request: ListAsynJobsRequest): ListAsynJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAsynJobsWithOptions(request, runtime);
}

model CreateRuleRequest {
  listenerId?: string(name='ListenerId', description='监听标识'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  priority?: int32(name='Priority', description='转发规则优先级'),
  ruleActions?: [ 
    {
      fixedResponseConfig?: {
        content?: string(name='Content', description='内容'),
        contentType?: string(name='ContentType', description='内容类型'),
        httpCode?: string(name='HttpCode', description='HTTP响应码'),
      }(name='FixedResponseConfig', description='返回固定内容动作配置'),
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
          }
        ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
      }(name='ForwardGroupConfig', description='转发组动作配置'),
      insertHeaderConfig?: {
        key?: string(name='Key', description='HTTP标头'),
        value?: string(name='Value', description='HTTP标头内容'),
        valueType?: string(name='ValueType', description='取值类型'),
      }(name='InsertHeaderConfig', description='插入头部动作配置'),
      order?: int32(name='Order', description='优先级'),
      redirectConfig?: {
        host?: string(name='Host', description='要跳转的主机地址'),
        httpCode?: string(name='HttpCode', description='跳转方式'),
        path?: string(name='Path', description='要跳转的路径'),
        port?: string(name='Port', description='要跳转的端口'),
        protocol?: string(name='Protocol', description='要跳转的协议'),
        query?: string(name='Query', description='要跳转的查询字符串'),
      }(name='RedirectConfig', description='重定向动作配置'),
      rewriteConfig?: {
        host?: string(name='Host', description='主机名'),
        path?: string(name='Path', description='路径'),
        query?: string(name='Query', description='查询'),
      }(name='RewriteConfig', description='内部重定向动作配置'),
      type?: string(name='Type', description='转发规则动作类型'),
    }
  ](name='RuleActions', description='转发规则动作'),
  ruleConditions?: [ 
    {
      cookieConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='Cookie条件键'),
            value?: string(name='Value', description='Cookie条件值'),
          }
        ](name='Values', description='Cookie键值对列表'),
      }(name='CookieConfig', description='Cookie条件配置'),
      headerConfig?: {
        key?: string(name='Key', description='HTTP标头键'),
        values?: [ string ](name='Values', description='HTTP标头值列表'),
      }(name='HeaderConfig', description='HTTP标头条件配置'),
      hostConfig?: {
        values?: [ string ](name='Values', description='主机名列表'),
      }(name='HostConfig', description='主机名条件配置'),
      methodConfig?: {
        values?: [ string ](name='Values', description='HTTP请求方法列表'),
      }(name='MethodConfig', description='HTTP请求方法条件配置'),
      pathConfig?: {
        values?: [ string ](name='Values', description='路径条件列表'),
      }(name='PathConfig', description='路径条件配置'),
      queryStringConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='查询字符串条件键'),
            value?: string(name='Value', description='查询字符串条件值'),
          }
        ](name='Values', description='查询字符串条件键值对列表'),
      }(name='QueryStringConfig', description='查询字符串条件配置'),
      type?: string(name='Type', description='条件类型'),
    }
  ](name='RuleConditions', description='转发规则条件'),
  ruleName?: string(name='RuleName', description='转发规则名称'),
}

model CreateRuleResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  ruleId?: string(name='RuleId', description='转发规则标识'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRule', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model RemoveServersFromServerGroupRequest {
  serverGroupId?: string(name='ServerGroupId', description='后端服务器Id'),
  servers?: [ 
    {
      port?: int32(name='Port', description='后端端口号'),
      serverId?: string(name='ServerId', description='后端服务器id'),
      serverIp?: string(name='ServerIp', description='后端服务器ip'),
      serverType?: string(name='ServerType', description='后端服务器类型'),
    }
  ](name='Servers', description='后端服务器'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
}

model RemoveServersFromServerGroupResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveServersFromServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveServersFromServerGroupResponseBody(name='body'),
}

async function removeServersFromServerGroupWithOptions(request: RemoveServersFromServerGroupRequest, runtime: Util.RuntimeOptions): RemoveServersFromServerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveServersFromServerGroup', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeServersFromServerGroup(request: RemoveServersFromServerGroupRequest): RemoveServersFromServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeServersFromServerGroupWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='语言'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='名称'),
      regionEndpoint?: string(name='RegionEndpoint', description='endpoint'),
      regionId?: string(name='RegionId', description='RegionId'),
    }
  ](name='Regions', description='Region列表'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model CreateSecurityPolicyRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  TLSVersions?: [ string ](name='TLSVersions', description='tls版本'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组id'),
  securityPolicyName?: string(name='SecurityPolicyName', description='安全策略名称'),
  ciphers?: [ string ](name='Ciphers', description='加密套件'),
}

model CreateSecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略id'),
}

model CreateSecurityPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecurityPolicyResponseBody(name='body'),
}

async function createSecurityPolicyWithOptions(request: CreateSecurityPolicyRequest, runtime: Util.RuntimeOptions): CreateSecurityPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSecurityPolicy', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSecurityPolicy(request: CreateSecurityPolicyRequest): CreateSecurityPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityPolicyWithOptions(request, runtime);
}

model UpdateRuleAttributeRequest {
  ruleId?: string(name='RuleId', description='转发规则标识'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  ruleConditions?: [ 
    {
      cookieConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='Cookie条件键'),
            value?: string(name='Value', description='Cookie条件值'),
          }
        ](name='Values', description='Cookie键值对列表'),
      }(name='CookieConfig', description='Cookie条件配置'),
      headerConfig?: {
        key?: string(name='Key', description='HTTP标头键'),
        values?: [ string ](name='Values', description='HTTP标头值列表'),
      }(name='HeaderConfig', description='HTTP标头条件配置'),
      hostConfig?: {
        values?: [ string ](name='Values', description='主机名列表'),
      }(name='HostConfig', description='主机名条件配置'),
      methodConfig?: {
        values?: [ string ](name='Values', description='HTTP请求方法列表'),
      }(name='MethodConfig', description='HTTP请求方法条件配置'),
      pathConfig?: {
        values?: [ string ](name='Values', description='路径条件列表'),
      }(name='PathConfig', description='路径条件配置'),
      queryStringConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='查询字符串条件键'),
            value?: string(name='Value', description='查询字符串条件值'),
          }
        ](name='Values', description='查询字符串条件键值对列表'),
      }(name='QueryStringConfig', description='查询字符串条件配置'),
      type?: string(name='Type', description='条件类型'),
    }
  ](name='RuleConditions', description='转发规则条件'),
  ruleActions?: [ 
    {
      fixedResponseConfig?: {
        content?: string(name='Content', description='内容'),
        contentType?: string(name='ContentType', description='内容类型'),
        httpCode?: string(name='HttpCode', description='HTTP响应码'),
      }(name='FixedResponseConfig', description='返回固定内容动作配置'),
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
          }
        ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
      }(name='ForwardGroupConfig', description='转发组动作配置'),
      insertHeaderConfig?: {
        key?: string(name='Key', description='HTTP标头'),
        value?: string(name='Value', description='HTTP标头内容'),
        valueType?: string(name='ValueType', description='取值类型'),
      }(name='InsertHeaderConfig', description='插入头部动作配置'),
      order?: int32(name='Order', description='优先级'),
      redirectConfig?: {
        host?: string(name='Host', description='要跳转的主机地址'),
        httpCode?: string(name='HttpCode', description='跳转方式'),
        path?: string(name='Path', description='要跳转的路径'),
        port?: string(name='Port', description='要跳转的端口'),
        protocol?: string(name='Protocol', description='要跳转的协议'),
        query?: string(name='Query', description='要跳转的查询字符串'),
      }(name='RedirectConfig', description='重定向动作配置'),
      rewriteConfig?: {
        host?: string(name='Host', description='主机名'),
        path?: string(name='Path', description='路径'),
        query?: string(name='Query', description='查询'),
      }(name='RewriteConfig', description='内部重定向动作配置'),
      type?: string(name='Type', description='转发规则动作类型'),
    }
  ](name='RuleActions', description='转发规则动作'),
  ruleName?: string(name='RuleName', description='转发规则名称'),
  priority?: int32(name='Priority', description='转发规则优先级'),
}

model UpdateRuleAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleAttributeResponseBody(name='body'),
}

async function updateRuleAttributeWithOptions(request: UpdateRuleAttributeRequest, runtime: Util.RuntimeOptions): UpdateRuleAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRuleAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRuleAttribute(request: UpdateRuleAttributeRequest): UpdateRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleAttributeWithOptions(request, runtime);
}

model ListSecurityPoliciesRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  securityPolicyNames?: [ string ](name='SecurityPolicyNames', description='安全策略名称'),
  securityPolicyIds?: [ string ](name='SecurityPolicyIds', description='安全策略id'),
}

model ListSecurityPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  securityPolicies?: [ 
    {
      ciphers?: [ string ](name='Ciphers', description='加密套件'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组id'),
      securityPolicyId?: string(name='SecurityPolicyId', description='安全策略id'),
      securityPolicyName?: string(name='SecurityPolicyName', description='安全策略名称'),
      securityPolicyStatus?: string(name='SecurityPolicyStatus', description='状态'),
      TLSVersions?: [ string ](name='TLSVersions', description='TLS策略'),
    }
  ](name='SecurityPolicies', description='安全策略'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListSecurityPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecurityPoliciesResponseBody(name='body'),
}

async function listSecurityPoliciesWithOptions(request: ListSecurityPoliciesRequest, runtime: Util.RuntimeOptions): ListSecurityPoliciesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSecurityPolicies', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSecurityPolicies(request: ListSecurityPoliciesRequest): ListSecurityPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecurityPoliciesWithOptions(request, runtime);
}

model UpdateAclAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等参数'),
  aclId?: string(name='AclId', description='AclId'),
  aclName?: string(name='AclName', description='访问控制策略名称'),
  dryRun?: boolean(name='DryRun', description='是否预校验请求'),
}

model UpdateAclAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateAclAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAclAttributeResponseBody(name='body'),
}

async function updateAclAttributeWithOptions(request: UpdateAclAttributeRequest, runtime: Util.RuntimeOptions): UpdateAclAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAclAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAclAttribute(request: UpdateAclAttributeRequest): UpdateAclAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAclAttributeWithOptions(request, runtime);
}

model DisableDeletionProtectionRequest {
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  resourceId?: string(name='ResourceId', description='实例id'),
}

model DisableDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DisableDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDeletionProtectionResponseBody(name='body'),
}

async function disableDeletionProtectionWithOptions(request: DisableDeletionProtectionRequest, runtime: Util.RuntimeOptions): DisableDeletionProtectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableDeletionProtection', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableDeletionProtection(request: DisableDeletionProtectionRequest): DisableDeletionProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDeletionProtectionWithOptions(request, runtime);
}

model StopListenerRequest {
  listenerId?: string(name='ListenerId', description='监听id'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
}

model StopListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopListenerResponse = {
  headers: map[string]string(name='headers'),
  body: StopListenerResponseBody(name='body'),
}

async function stopListenerWithOptions(request: StopListenerRequest, runtime: Util.RuntimeOptions): StopListenerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopListener', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopListener(request: StopListenerRequest): StopListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopListenerWithOptions(request, runtime);
}

model CreateListenerRequest {
  loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
  listenerPort?: int32(name='ListenerPort', description='监听端口'),
  listenerDescription?: string(name='ListenerDescription', description='监听描述'),
  requestTimeout?: int32(name='RequestTimeout', description='请求超时时间'),
  idleTimeout?: int32(name='IdleTimeout', description='连接空闲超时时间'),
  gzipEnabled?: boolean(name='GzipEnabled', description='是否开启Gzip压缩'),
  http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP/2特性'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertClientVerifyEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='是否通过X-Forwarded-Clientcert-clientverify  头字段获取对访问负载均衡实例客户端证书的校验结果。HTTPS监听有效。'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertFingerprintEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='是否通过X-Forwarded-Clientcert-fingerprint 头字段获取访问负载均衡实例客户端证书的指纹取值，HTTPS监听有效。'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertIssuerDNEnabled的值为‘On’的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='是否通过 X-Forwarded-Clientcert-issuerdn 头字段获取访问负载均衡实例客户端证书的发行者信息。HTTPS监听有效。'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertSubjectDNEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='是否通过X-Forwarded-Clientcert-subjectdn  头字段获取访问负载均衡实例客户端证书的所有者信息。HTTPS监听有效。'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='是否通过X-Forwarded-Client-Port 头字段获取访问负载均衡实例客户端的端口。HTTPS监听有效。'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='是否通过X-Forwarded-Proto头字段获取负载均衡实例的监听协议。'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='是否通过SLB-ID头字段获取负载均衡实例ID。'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='是否通过X-Forwarded-Port 头字段获取负载均衡实例的监听端口。HTTPS监听有效。'),
  }(name='XForwardedForConfig', description='XForward字段相关的配置'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='需要关联的QUIC监听ID，HTTPS监听时有效，QuicUpgradeEnabled为true时必选'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='是否开启quic升级，HTTPS监听时有效'),
  }(name='QuicConfig', description='HTTPS启用QUIC时相关属性'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='正式标识'),
    }
  ](name='Certificates', description='监听默认服务器证书列表，N当前取值范围为1'),
  defaultActions?: [ 
    {
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
          }
        ](name='ServerGroupTuples', description='服务器组列表'),
      }(name='ForwardGroupConfig', description='转发组'),
      type?: string(name='Type', description='动作类型'),
    }
  ](name='DefaultActions', description='监听默认动作'),
}

model CreateListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  listenerId?: string(name='ListenerId', description='监听标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateListenerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateListenerResponseBody(name='body'),
}

async function createListenerWithOptions(request: CreateListenerRequest, runtime: Util.RuntimeOptions): CreateListenerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateListener', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createListener(request: CreateListenerRequest): CreateListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createListenerWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceType?: string(name='ResourceType', description='资源类型'),
  resourceId?: [ string ](name='ResourceId', description='资源实例Id'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UpdateServerGroupServersAttributeRequest {
  serverGroupId?: string(name='ServerGroupId', description='后端服务器Id'),
  servers?: [ 
    {
      description?: string(name='Description', description='后端服务器描述'),
      port?: int32(name='Port', description='后端端口号'),
      serverId?: string(name='ServerId', description='后端服务器id'),
      serverIp?: string(name='ServerIp', description='后端服务器ip'),
      serverType?: string(name='ServerType', description='后端服务器类型'),
      weight?: int32(name='Weight', description='后端服务器权重'),
    }
  ](name='Servers', description='后端服务器'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model UpdateServerGroupServersAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateServerGroupServersAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServerGroupServersAttributeResponseBody(name='body'),
}

async function updateServerGroupServersAttributeWithOptions(request: UpdateServerGroupServersAttributeRequest, runtime: Util.RuntimeOptions): UpdateServerGroupServersAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateServerGroupServersAttribute', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateServerGroupServersAttribute(request: UpdateServerGroupServersAttributeRequest): UpdateServerGroupServersAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServerGroupServersAttributeWithOptions(request, runtime);
}

model StartListenerRequest {
  listenerId?: string(name='ListenerId', description='监听id'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
}

model StartListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartListenerResponse = {
  headers: map[string]string(name='headers'),
  body: StartListenerResponseBody(name='body'),
}

async function startListenerWithOptions(request: StartListenerRequest, runtime: Util.RuntimeOptions): StartListenerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartListener', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startListener(request: StartListenerRequest): StartListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return startListenerWithOptions(request, runtime);
}

model CreateRulesRequest {
  listenerId?: string(name='ListenerId', description='监听标识'),
  clientToken?: string(name='ClientToken', description='幂等标识'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求'),
  rules?: [ 
    {
      priority?: int32(name='Priority', description='转发规则优先级'),
      ruleActions?: [ 
        {
          fixedResponseConfig?: {
            content?: string(name='Content', description='内容'),
            contentType?: string(name='ContentType', description='内容类型'),
            httpCode?: string(name='HttpCode', description='HTTP响应码'),
          }(name='FixedResponseConfig', description='返回固定内容动作配置'),
          forwardGroupConfig?: {
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
              }
            ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
          }(name='ForwardGroupConfig', description='转发组动作配置'),
          insertHeaderConfig?: {
            key?: string(name='Key', description='HTTP标头'),
            value?: string(name='Value', description='HTTP标头内容'),
            valueType?: string(name='ValueType', description='取值类型'),
          }(name='InsertHeaderConfig', description='插入头部动作配置'),
          order?: int32(name='Order', description='优先级'),
          redirectConfig?: {
            host?: string(name='Host', description='要跳转的主机地址'),
            httpCode?: string(name='HttpCode', description='跳转方式'),
            path?: string(name='Path', description='要跳转的路径'),
            port?: string(name='Port', description='要跳转的端口'),
            protocol?: string(name='Protocol', description='要跳转的协议'),
            query?: string(name='Query', description='要跳转的查询字符串'),
          }(name='RedirectConfig', description='重定向动作配置'),
          rewriteConfig?: {
            host?: string(name='Host', description='主机名'),
            path?: string(name='Path', description='路径'),
            query?: string(name='Query', description='查询'),
          }(name='RewriteConfig', description='内部重定向动作配置'),
          type?: string(name='Type', description='转发规则动作类型'),
        }
      ](name='RuleActions', description='转发规则动作'),
      ruleConditions?: [ 
        {
          cookieConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='Cookie条件键'),
                value?: string(name='Value', description='Cookie条件值'),
              }
            ](name='Values', description='Cookie键值对列表'),
          }(name='CookieConfig', description='Cookie条件配置'),
          headerConfig?: {
            key?: string(name='Key', description='HTTP标头键'),
            values?: [ string ](name='Values', description='HTTP标头值列表'),
          }(name='HeaderConfig', description='HTTP标头条件配置'),
          hostConfig?: {
            values?: [ string ](name='Values', description='主机名列表'),
          }(name='HostConfig', description='主机名条件配置'),
          methodConfig?: {
            values?: [ string ](name='Values', description='HTTP请求方法列表'),
          }(name='MethodConfig', description='HTTP请求方法条件配置'),
          pathConfig?: {
            values?: [ string ](name='Values', description='路径条件列表'),
          }(name='PathConfig', description='路径条件配置'),
          queryStringConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='查询字符串条件键'),
                value?: string(name='Value', description='查询字符串条件值'),
              }
            ](name='Values', description='查询字符串条件键值对列表'),
          }(name='QueryStringConfig', description='查询字符串条件配置'),
          responseHeaderConfig?: {
            key?: string(name='Key', description='返回HTTP标头键'),
            values?: [ string ](name='Values', description='返回HTTP标头值'),
          }(name='ResponseHeaderConfig', description='返回HTTP标头'),
          type?: string(name='Type', description='条件类型'),
        }
      ](name='RuleConditions', description='转发规则条件'),
      ruleName?: string(name='RuleName', description='转发规则名称'),
    }
  ](name='Rules', description='转发规则列表'),
}

model CreateRulesResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  ruleIds?: [ 
    {
      ruleId?: string(name='RuleId', description='转发规则标识'),
    }
  ](name='RuleIds', description='转发规则标识列表'),
}

model CreateRulesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRulesResponseBody(name='body'),
}

async function createRulesWithOptions(request: CreateRulesRequest, runtime: Util.RuntimeOptions): CreateRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRules', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRules(request: CreateRulesRequest): CreateRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRulesWithOptions(request, runtime);
}

model ListAclEntriesRequest {
  nextToken?: string(name='NextToken', description='分页查询标识'),
  maxResults?: int32(name='MaxResults', description='查询数量'),
  aclId?: string(name='AclId', description='访问控制策略Id'),
}

model ListAclEntriesResponseBody = {
  aclEntries?: [ 
    {
      description?: string(name='Description', description='描述信息'),
      entry?: string(name='Entry', description='IP条目'),
      status?: string(name='Status', description='状态'),
    }
  ](name='AclEntries', description='访问控制列表'),
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListAclEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAclEntriesResponseBody(name='body'),
}

async function listAclEntriesWithOptions(request: ListAclEntriesRequest, runtime: Util.RuntimeOptions): ListAclEntriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAclEntries', '2020-06-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAclEntries(request: ListAclEntriesRequest): ListAclEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAclEntriesWithOptions(request, runtime);
}

