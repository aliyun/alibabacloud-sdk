/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('alb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddEntriesToAclRequest {
  aclEntries?: [ 
    {
      description?: string(name='Description', description='The description of the IP entry. The description must be 2 to 256 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -.

You can add up to 20 IP entries in each call.', example='test-entry'),
      entry?: string(name='Entry', description='The CIDR block of the IP entry.

You can add up to 20 IP entries in each call.', example='10.0.1.0/24'),
    }
  ](name='AclEntries', description='The IP entries that you want to add. You can add up to 20 IP entries in each call.'),
  aclId?: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
}

model AddEntriesToAclResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model AddEntriesToAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddEntriesToAclResponseBody(name='body'),
}

/**
  * *   Each ACL can contain IP addresses or CIDR blocks. Take note of the following limits on ACLs:
  *     *   The maximum number of IP entries that can be added to an ACL with each Alibaba Cloud account at a time: 20
  *     *   The maximum number of IP entries that each ACL can contain: 1,000
  * *   **AddEntriesToAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAclEntries](~~213616~~) operation to query the status of the task.
  *     *   If the ACL is in the **Adding** state, the IP entries are being added.
  *     *   If the ACL is in the **Available** state, the IP entries are added.
  *
  * @param request AddEntriesToAclRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddEntriesToAclResponse
 */
async function addEntriesToAclWithOptions(request: AddEntriesToAclRequest, runtime: Util.RuntimeOptions): AddEntriesToAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclEntries)) {
    query['AclEntries'] = request.aclEntries;
  }
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddEntriesToAcl',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Each ACL can contain IP addresses or CIDR blocks. Take note of the following limits on ACLs:
  *     *   The maximum number of IP entries that can be added to an ACL with each Alibaba Cloud account at a time: 20
  *     *   The maximum number of IP entries that each ACL can contain: 1,000
  * *   **AddEntriesToAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAclEntries](~~213616~~) operation to query the status of the task.
  *     *   If the ACL is in the **Adding** state, the IP entries are being added.
  *     *   If the ACL is in the **Available** state, the IP entries are added.
  *
  * @param request AddEntriesToAclRequest
  * @return AddEntriesToAclResponse
 */
async function addEntriesToAcl(request: AddEntriesToAclRequest): AddEntriesToAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEntriesToAclWithOptions(request, runtime);
}

model AddServersToServerGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: prechecks the request, but does not add a backend server to a server group. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtop****'),
  servers?: [ 
    {
      description?: string(name='Description', description='The description of the backend server. The description must be 2 to 256 characters in length and can contain letters, digits, periods (.), underscores (\\_), hyphens (-), commas (,), semicolons (;), forward slashes (/), and at signs (@). You can specify up to 40 servers in each call.', example='test'),
      port?: int32(name='Port', description='The port used by the backend server. Valid values: **1** to **65535**. You can specify up to 40 server IDs in each call.

> This parameter is required if the **ServerType** parameter is set to **Ecs**, **Eni**, **Eci**, or **Ip**. You do not need to set this parameter if **ServerType** is set to **Fc**.', example='80'),
      remoteIpEnabled?: boolean(name='RemoteIpEnabled', description='Specifies whether to enable the remote IP address feature. You can specify up to 40 server IDs in each call. Valid values:

*   **true**
*   **false**

Regions that support the remote IP address feature: China (Hangzhou), China (Shenzhen), China (Qingdao), China (Beijing), China (Zhangjiakou), China (Ulanqab), China (Shanghai), China (Chengdu), China (Guangzhou), China (Hong Kong), US (Virginia), Japan (Tokyo), UK (London), US (Silicon Valley), Germany (Frankfurt), Indonesia (Jakarta), Singapore, Malaysia (Kuala Lumpur), Australia (Sydney), and India (Mumbai).

> If **ServerType** is set to **Ip**, this parameter is available.', example='false'),
      serverId?: string(name='ServerId', description='The backend server ID. You can specify up to 40 server IDs in each call.

*   If ServerType is set to **Instance**, set the ServerId parameter to the ID of an Elastic Compute Service (ECS) instance, an elastic network interface (ENI), or an elastic container instance. These backend servers are specified by **Ecs**, **Eni**, or **Eci**.
*   If ServerType is set to **Ip**, set the ServerId parameter to an IP address specified in the server group.
*   If the backend server group is of the **Fc** type, set this parameter to the Alibaba Cloud Resource Name (ARN) of a function.', example='ecs-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', description='The IP address in inclusive ENI mode. You can specify up to 40 server IDs in each call.

> You do not need to set this parameter if **ServerType** is set to **Fc**.', example='192.168.1.1'),
      serverType?: string(name='ServerType', description='The type of the backend server that you want to add to the server group. You can specify up to 40 server IDs in each call. Valid values:

*   **Ecs**
*   **Eni**
*   **Eci**
*   **Ip**
*   **fc**', example='Ecs'),
      weight?: int32(name='Weight', description='The weight of the backend server. Valid values: **0** to **100**. Default value: **100**. If the weight of a backend server is set to **0**, no requests are forwarded to the backend server. You can specify up to 40 server IDs in each call.

> You do not need to set this parameter if **ServerType** is set to **Fc**.', example='100'),
    }
  ](name='Servers', description='The backend servers that you want to add to the server group. You can specify up to 40 backend servers in each call.'),
}

model AddServersToServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous job.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model AddServersToServerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddServersToServerGroupResponseBody(name='body'),
}

/**
  * **AddServersToServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group.
  * *   If a server group is in the **Configuring** state, it indicates that the server group is being modified.
  * *   If a server group is in the **Available** state, it indicates that the server group is running.
  * 2.  You can call the [ListServerGroupServers](~~213628~~) operation to query the status of a backend server.
  * *   If a backend server is in the **Adding** state, it indicates that the backend server is being added to a server group.
  * *   If a backend server is in the **Available** state, it indicates that the server is running.
  *
  * @param request AddServersToServerGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddServersToServerGroupResponse
 */
async function addServersToServerGroupWithOptions(request: AddServersToServerGroupRequest, runtime: Util.RuntimeOptions): AddServersToServerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    query['ServerGroupId'] = request.serverGroupId;
  }
  if (!Util.isUnset(request.servers)) {
    query['Servers'] = request.servers;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddServersToServerGroup',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **AddServersToServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group.
  * *   If a server group is in the **Configuring** state, it indicates that the server group is being modified.
  * *   If a server group is in the **Available** state, it indicates that the server group is running.
  * 2.  You can call the [ListServerGroupServers](~~213628~~) operation to query the status of a backend server.
  * *   If a backend server is in the **Adding** state, it indicates that the backend server is being added to a server group.
  * *   If a backend server is in the **Available** state, it indicates that the server is running.
  *
  * @param request AddServersToServerGroupRequest
  * @return AddServersToServerGroupResponse
 */
async function addServersToServerGroup(request: AddServersToServerGroupRequest): AddServersToServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addServersToServerGroupWithOptions(request, runtime);
}

model ApplyHealthCheckTemplateToServerGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='The template ID.', example='hct-bp1qjwo61pqz3ahltv****'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-n80wyad08u0tox****'),
}

model ApplyHealthCheckTemplateToServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model ApplyHealthCheckTemplateToServerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyHealthCheckTemplateToServerGroupResponseBody(name='body'),
}

async function applyHealthCheckTemplateToServerGroupWithOptions(request: ApplyHealthCheckTemplateToServerGroupRequest, runtime: Util.RuntimeOptions): ApplyHealthCheckTemplateToServerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.healthCheckTemplateId)) {
    query['HealthCheckTemplateId'] = request.healthCheckTemplateId;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    query['ServerGroupId'] = request.serverGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyHealthCheckTemplateToServerGroup',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyHealthCheckTemplateToServerGroup(request: ApplyHealthCheckTemplateToServerGroupRequest): ApplyHealthCheckTemplateToServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyHealthCheckTemplateToServerGroupWithOptions(request, runtime);
}

model AssociateAclsWithListenerRequest {
  aclIds?: [ string ](name='AclIds', description='The ACL IDs. You can specify up to three IDs in each call.'),
  aclType?: string(name='AclType', description='The type of the ACL. Valid values:

*   **White**: a whitelist. Only requests from the IP addresses or CIDR blocks in the ACL are forwarded. The whitelist applies to scenarios in which you want to allow only specific IP addresses to access an application. Your service may be adversely affected if the whitelist is not properly configured. If a whitelist is configured for a listener, only requests from IP addresses that are added to the whitelist are forwarded by the listener. If you enable a whitelist but do not add an IP address to the whitelist, the listener forwards all requests.
*   **Black**: a blacklist. All requests from the IP addresses or CIDR blocks in the ACL are blocked. The blacklist applies to scenarios in which you want to block access from specific IP addresses to an application. If a blacklist is configured for a listener but no IP address is added to the blacklist, the listener forwards all requests.', example='White'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model AssociateAclsWithListenerResponseBody = {
  jobId?: string(name='JobId', description='The synchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model AssociateAclsWithListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateAclsWithListenerResponseBody(name='body'),
}

/**
  * **DeleteDhcpOptionsSet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAclRelations](~~213618~~) operation to query the status of the task.
  * *   If an ACL is in the **Associating** state, the ACL is being associated with a listener.
  * *   If an ACL is in the **Associated** state, the ACL is associated with a listener.
  *
  * @param request AssociateAclsWithListenerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AssociateAclsWithListenerResponse
 */
async function associateAclsWithListenerWithOptions(request: AssociateAclsWithListenerRequest, runtime: Util.RuntimeOptions): AssociateAclsWithListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclIds)) {
    query['AclIds'] = request.aclIds;
  }
  if (!Util.isUnset(request.aclType)) {
    query['AclType'] = request.aclType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateAclsWithListener',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteDhcpOptionsSet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAclRelations](~~213618~~) operation to query the status of the task.
  * *   If an ACL is in the **Associating** state, the ACL is being associated with a listener.
  * *   If an ACL is in the **Associated** state, the ACL is associated with a listener.
  *
  * @param request AssociateAclsWithListenerRequest
  * @return AssociateAclsWithListenerResponse
 */
async function associateAclsWithListener(request: AssociateAclsWithListenerRequest): AssociateAclsWithListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateAclsWithListenerWithOptions(request, runtime);
}

model AssociateAdditionalCertificatesWithListenerRequest {
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The certificate ID. Only server certificates are supported.', example='cert-123'),
    }
  ](name='Certificates', description='The additional certificates.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  listenerId?: string(name='ListenerId', description='The listener ID. You must specify the ID of an HTTPS listener or a QUIC listener.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model AssociateAdditionalCertificatesWithListenerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model AssociateAdditionalCertificatesWithListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateAdditionalCertificatesWithListenerResponseBody(name='body'),
}

/**
  * **AssociateAdditionalCertificatesWithListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetListenerAttribute](~~2254865~~) operation to query the status of the task:
  * *   If the HTTPS or QUIC listener is in the **Associating** state, the additional certificates are being associated.
  * *   If the HTTPS or QUIC listener is in the **Associated** state, the additional certificates are associated.
  *
  * @param request AssociateAdditionalCertificatesWithListenerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AssociateAdditionalCertificatesWithListenerResponse
 */
async function associateAdditionalCertificatesWithListenerWithOptions(request: AssociateAdditionalCertificatesWithListenerRequest, runtime: Util.RuntimeOptions): AssociateAdditionalCertificatesWithListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificates)) {
    query['Certificates'] = request.certificates;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateAdditionalCertificatesWithListener',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **AssociateAdditionalCertificatesWithListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetListenerAttribute](~~2254865~~) operation to query the status of the task:
  * *   If the HTTPS or QUIC listener is in the **Associating** state, the additional certificates are being associated.
  * *   If the HTTPS or QUIC listener is in the **Associated** state, the additional certificates are associated.
  *
  * @param request AssociateAdditionalCertificatesWithListenerRequest
  * @return AssociateAdditionalCertificatesWithListenerResponse
 */
async function associateAdditionalCertificatesWithListener(request: AssociateAdditionalCertificatesWithListenerRequest): AssociateAdditionalCertificatesWithListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateAdditionalCertificatesWithListenerWithOptions(request, runtime);
}

model AttachCommonBandwidthPackageToLoadBalancerRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The EIP bandwidth plan ID.', example='cbwp-bp1pzf0ym72pu3y76****'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='alb-d676fho813rmu3****'),
  regionId?: string(name='RegionId', description='The region ID of the ALB instance.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model AttachCommonBandwidthPackageToLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='2EF39708-974B-5E74-AFF5-3445263035A8'),
}

model AttachCommonBandwidthPackageToLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachCommonBandwidthPackageToLoadBalancerResponseBody(name='body'),
}

/**
  * **AttachCommonBandwidthPackageToLoadBalancer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  * *   If the ALB instance is in the **Configuring** state, the EIP bandwidth plan is being associated with the ALB instance.
  * *   If the ALB instance is in the **Active** state, the EIP bandwidth plan is associated with the ALB instance.
  *
  * @param request AttachCommonBandwidthPackageToLoadBalancerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachCommonBandwidthPackageToLoadBalancerResponse
 */
async function attachCommonBandwidthPackageToLoadBalancerWithOptions(request: AttachCommonBandwidthPackageToLoadBalancerRequest, runtime: Util.RuntimeOptions): AttachCommonBandwidthPackageToLoadBalancerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachCommonBandwidthPackageToLoadBalancer',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **AttachCommonBandwidthPackageToLoadBalancer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  * *   If the ALB instance is in the **Configuring** state, the EIP bandwidth plan is being associated with the ALB instance.
  * *   If the ALB instance is in the **Active** state, the EIP bandwidth plan is associated with the ALB instance.
  *
  * @param request AttachCommonBandwidthPackageToLoadBalancerRequest
  * @return AttachCommonBandwidthPackageToLoadBalancerResponse
 */
async function attachCommonBandwidthPackageToLoadBalancer(request: AttachCommonBandwidthPackageToLoadBalancerRequest): AttachCommonBandwidthPackageToLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachCommonBandwidthPackageToLoadBalancerWithOptions(request, runtime);
}

model CancelShiftLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance.', example='alb-o9ulmq5hgn68jk****'),
  zoneMappings?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the zone. By default, each zone uses one vSwitch and one subnet.', example='vsw-bp1rmcrwg3erh1fh8****'),
      zoneId?: string(name='ZoneId', description='The zone ID. You can call the [DescribeZones](~~189196~~) operation to query the most recent zone list.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The mappings between zones and vSwitches.

>  You can add only one zone in each call.'),
}

model CancelShiftLoadBalancerZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
}

model CancelShiftLoadBalancerZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelShiftLoadBalancerZonesResponseBody(name='body'),
}

/**
  * This operation is supported only by Application Load Balancer (ALB) instances that use static IP addresses. Before you call this operation, you must call the StartShiftLoadBalancerZones operation to remove the zone from the ALB instance.
  *
  * @param request CancelShiftLoadBalancerZonesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelShiftLoadBalancerZonesResponse
 */
async function cancelShiftLoadBalancerZonesWithOptions(request: CancelShiftLoadBalancerZonesRequest, runtime: Util.RuntimeOptions): CancelShiftLoadBalancerZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.zoneMappings)) {
    query['ZoneMappings'] = request.zoneMappings;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelShiftLoadBalancerZones',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is supported only by Application Load Balancer (ALB) instances that use static IP addresses. Before you call this operation, you must call the StartShiftLoadBalancerZones operation to remove the zone from the ALB instance.
  *
  * @param request CancelShiftLoadBalancerZonesRequest
  * @return CancelShiftLoadBalancerZonesResponse
 */
async function cancelShiftLoadBalancerZones(request: CancelShiftLoadBalancerZonesRequest): CancelShiftLoadBalancerZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelShiftLoadBalancerZonesWithOptions(request, runtime);
}

model CreateAScriptsRequest {
  AScripts?: [ 
    {
      AScriptName?: string(name='AScriptName', description='The name of the AScript rule.

The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the AScript rule. Valid values:

*   **true**
*   **false** (default)', example='false'),
      scriptContent?: string(name='ScriptContent', description='The content of the AScript rule.', example='if and(match_re($uri, \\"^/1.txt$\\"), $arg_type) {   rewrite(concat(\\"/1.\\", $arg_type), \\"break\\") }'),
    }
  ](name='AScripts', description='The AScript rules.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  listenerId?: string(name='ListenerId', description='The listener ID.', example='lsn-6hfq3zs0x04ibn****'),
}

model CreateAScriptsResponseBody = {
  AScriptIds?: [ 
    {
      AScriptId?: string(name='AScriptId', description='The AScript rule ID.', example='as-xvq5igaa7uv6vr****'),
    }
  ](name='AScriptIds', description='The AScript rule IDs.'),
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='5c607642-535e-4e06-9d77-df53049b****'),
  requestId?: string(name='RequestId', description='The request ID.', example='BF0FE763-9603-558F-A55B-0F4B9A3E3C02'),
}

model CreateAScriptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAScriptsResponseBody(name='body'),
}

/**
  * ### Prerequisites
  * *   A standard or WAF-enabled Application Load Balancer (ALB) instance is created. For more information, see [CreateLoadBalancer](~~214358~~).
  * *   By default, the feature to create and manage AScript rules is unavailable. Log on to the [Quota Center console](https://quotas.console.aliyun.com/white-list-products/alb/quotas?spm=a2c4g.11186623.0.0.6e8834f6IFiF2I). On the **Privileges** page, enter the quota ID `slb_user_visible_gray_label/ascript` and apply for the quota.
  * ### Usage notes
  * *   **CreateAScripts** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAScripts](~~472574~~) operation to query the status of the task:
  *     *   If an AScript rule is in the **Creating** state, the AScript rule is being created.
  *     *   If an AScript rule is in the **Available** state, the AScript rule is created.
  * *   In the following table, the value of **N** is **1**.
  *
  * @param request CreateAScriptsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAScriptsResponse
 */
async function createAScriptsWithOptions(request: CreateAScriptsRequest, runtime: Util.RuntimeOptions): CreateAScriptsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.AScripts)) {
    query['AScripts'] = request.AScripts;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAScripts',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### Prerequisites
  * *   A standard or WAF-enabled Application Load Balancer (ALB) instance is created. For more information, see [CreateLoadBalancer](~~214358~~).
  * *   By default, the feature to create and manage AScript rules is unavailable. Log on to the [Quota Center console](https://quotas.console.aliyun.com/white-list-products/alb/quotas?spm=a2c4g.11186623.0.0.6e8834f6IFiF2I). On the **Privileges** page, enter the quota ID `slb_user_visible_gray_label/ascript` and apply for the quota.
  * ### Usage notes
  * *   **CreateAScripts** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAScripts](~~472574~~) operation to query the status of the task:
  *     *   If an AScript rule is in the **Creating** state, the AScript rule is being created.
  *     *   If an AScript rule is in the **Available** state, the AScript rule is created.
  * *   In the following table, the value of **N** is **1**.
  *
  * @param request CreateAScriptsRequest
  * @return CreateAScriptsResponse
 */
async function createAScripts(request: CreateAScriptsRequest): CreateAScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAScriptsWithOptions(request, runtime);
}

model CreateAclRequest {
  aclName?: string(name='AclName', description='The name of the ACL. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test-acl'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. The value of **RequestId** may be different for each API request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the check, an HTTP 2xx status code is returned and the operation is performed.', example='true'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-atstuj3rtop****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.'),
}

model CreateAclResponseBody = {
  aclId?: string(name='AclId', description='The ID of the ACL.', example='nacl-hp34s2h0xx1ht4nwo****'),
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAclResponseBody(name='body'),
}

/**
  * ## Usage notes
  * The **CreateAcl** operation is asynchronous. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListAcls](~~213617~~) operation to query the status of an ACL:
  * *   If an ACL is in the **Creating** state, the ACL is being created.
  * *   If an ACL is in the **Available** state, the ACL is created.
  *
  * @param request CreateAclRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAclResponse
 */
async function createAclWithOptions(request: CreateAclRequest, runtime: Util.RuntimeOptions): CreateAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclName)) {
    query['AclName'] = request.aclName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAcl',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * The **CreateAcl** operation is asynchronous. After you send a request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListAcls](~~213617~~) operation to query the status of an ACL:
  * *   If an ACL is in the **Creating** state, the ACL is being created.
  * *   If an ACL is in the **Available** state, the ACL is created.
  *
  * @param request CreateAclRequest
  * @return CreateAclResponse
 */
async function createAcl(request: CreateAclRequest): CreateAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAclWithOptions(request, runtime);
}

model CreateHealthCheckTemplateRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of RequestId as the value of ClientToken. The request ID may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a **2xx** HTTP status code is returned and the operation is performed.', example='true'),
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='The HTTP status codes that are used to indicate whether the backend server passes the health check.', example='5'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks.

Valid values: **0 to 65535**.

Default value: **0**. If you set the value to 0, the port of a backend server is used for health checks.', example='80'),
  healthCheckHost?: string(name='HealthCheckHost', description='The domain name that you want to use for the health check.

Default value: **$SERVER_IP**. The domain name must be 1 to 80 characters in length. The domain name must meet the following requirements:

*   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).
*   The domain name must contain at least one period (.) but cannot start or end with a period (.).
*   The rightmost domain label can contain only letters but cannot contain digits or hyphens (-).
*   Other fields cannot start or end with a hyphen (-).

This parameter is required only if the **HealthCheckProtocol** parameter is set to **HTTP**.', example='$_ip'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='The HTTP version that is used for health checks.

Valid values: **HTTP 1.0** and **HTTP 1.1**.

Default value: **HTTP 1.1**.

> This parameter is valid only if the `HealthCheckProtocol` parameter is set to **HTTP**.', example='HTTP 1.0'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed.

Valid values: **1 to 50**.

Default value: **2**.', example='2'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The method that you want to use for the health check. Valid values:

*   **HEAD**: By default, the ALB instance sends HEAD requests to a backend server to perform HTTP health checks.
*   **POST**: gRPC health checks automatically use the POST method.
*   **GET**: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.

> This parameter takes effect only when the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.', example='HEAD'),
  healthCheckPath?: string(name='HealthCheckPath', description='The URL that is used for health checks.

It must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : \\" , +`. The URL must start with a forward slash (/).

> This parameter is valid only if the `HealthCheckProtocol` parameter is set to **HTTP**.', example='/test/index.html'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol that you want to use for health checks. Valid values:

*   **HTTP** (default): To perform HTTP health checks, ALB sends HEAD or GET requests to a backend server to check whether the backend server is healthy.
*   **TCP**: To perform TCP health checks, ALB sends SYN packets to a backend server to check whether the port of the backend server is available to receive requests.
*   **gRPC**: To perform gRPC health checks, ALB sends POST or GET requests to a backend server to check whether the backend server is healthy.', example='HTTP'),
  healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='The name of the health check template.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='HealthCheckTemplate1'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check. If a backend server does not respond within the specified timeout period, the backend server fails the health check.

Valid values: **1 to 300**.

Default value: **5**.

> If the value of the `HealthCheckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the timeout period specified by the `HealthCheckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is used as the timeout period.', example='5'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status is changed from **fail** to **success**.

Valid values: **2 to 10**.

Default value: **3**.', example='4'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status is changed from **success** to **fail**.

Valid values: **2 to 10**.

Default value: **3**.', example='4'),
}

model CreateHealthCheckTemplateResponseBody = {
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='The ID of the health check template.', example='hct-1224334'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model CreateHealthCheckTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHealthCheckTemplateResponseBody(name='body'),
}

async function createHealthCheckTemplateWithOptions(request: CreateHealthCheckTemplateRequest, runtime: Util.RuntimeOptions): CreateHealthCheckTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.healthCheckCodes)) {
    query['HealthCheckCodes'] = request.healthCheckCodes;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckHost)) {
    query['HealthCheckHost'] = request.healthCheckHost;
  }
  if (!Util.isUnset(request.healthCheckHttpVersion)) {
    query['HealthCheckHttpVersion'] = request.healthCheckHttpVersion;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckMethod)) {
    query['HealthCheckMethod'] = request.healthCheckMethod;
  }
  if (!Util.isUnset(request.healthCheckPath)) {
    query['HealthCheckPath'] = request.healthCheckPath;
  }
  if (!Util.isUnset(request.healthCheckProtocol)) {
    query['HealthCheckProtocol'] = request.healthCheckProtocol;
  }
  if (!Util.isUnset(request.healthCheckTemplateName)) {
    query['HealthCheckTemplateName'] = request.healthCheckTemplateName;
  }
  if (!Util.isUnset(request.healthCheckTimeout)) {
    query['HealthCheckTimeout'] = request.healthCheckTimeout;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHealthCheckTemplate',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHealthCheckTemplate(request: CreateHealthCheckTemplateRequest): CreateHealthCheckTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHealthCheckTemplateWithOptions(request, runtime);
}

model CreateListenerRequest {
  caCertificates?: [ 
    {
      certificateId?: string(name='CertificateId', example='12315790212_166f8204689_1714763408_70998****'),
    }
  ](name='CaCertificates'),
  caEnabled?: boolean(name='CaEnabled', description='Specifies whether to enable mutual authentication. Valid values:

*   **true**: enables mutual authentication.
*   **false** (default): disables mutual authentication.', example='false'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The ID of the certificate. Only server certificates are supported. You can specify up to 20 certificate IDs.', example='12315790212_166f8204689_1714763408_70998****'),
    }
  ](name='Certificates'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000'),
  defaultActions?: [ 
    {
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='The ID of the server group to which requests are forwarded.', example='rsp-cige6j****'),
          }
        ](name='ServerGroupTuples'),
      }(name='ForwardGroupConfig'),
      type?: string(name='Type', description='The action type. You can specify only one action type. Valid value:

**ForwardGroup**: forwards requests to multiple vServer groups.', example='ForwardGroup'),
    }
  ](name='DefaultActions'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a precheck. Valid values:

*   **true**: prechecks the request without creating a listener. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error code is returned based on the cause of the failure. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the API request. If the request passes the precheck, a 2xx HTTP status code is returned and the system proceeds to create a listener.', example='false'),
  gzipEnabled?: boolean(name='GzipEnabled', description='Specifies whether to enable `Gzip` compression to compress specific types of files. Valid values:

*   **true** (default): enables Gzip compression.
*   **false**: disables Gzip compression.', example='true'),
  http2Enabled?: boolean(name='Http2Enabled', description='Specifies whether to enable `HTTP/2`. Valid values:

*   **true** (default): enables HTTP/2.
*   **false**: disables HTTP/2.

>  Only HTTPS listeners support this parameter.', example='true'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period of an idle connection. Unit: seconds.

Valid values: **1 to 60**.

Default value: **15**.

If no requests are received within the specified timeout period, ALB closes the current connection. When a new request is received, ALB establishes a new connection.', example='3'),
  listenerDescription?: string(name='ListenerDescription', description='The name of the listener.

The description must be 2 to 256 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), and underscores (\\_). Regular expressions are supported.', example='HTTP_80'),
  listenerPort?: int32(name='ListenerPort', description='The frontend port that is used by the ALB instance.

Valid values: **1 to 65535**.', example='80'),
  listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol.

Valid values: **HTTP**, **HTTPS**, and **QUIC**.', example='HTTP'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance.', example='alb-n5qw04uq8vavfe****'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='The ID of the QUIC listener that you want to associate with the HTTPS listener. Only HTTPS listeners support this parameter. This parameter is required when **QuicUpgradeEnabled** is set to **true**.

>  The HTTPS listener and the QUIC listener must be added to the same ALB instance. Make sure that the QUIC listener is not associated with any other listeners.', example='lsr-bp1bpn0kn908w4nbw****'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='Specifies whether to enable QUIC upgrade. Valid values:

*   **true**: enables QUIC upgrade.
*   **false** (default): disables QUIC upgrade.

>  Only HTTPS listeners support this parameter.', example='false'),
  }(name='QuicConfig'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of a request. Unit: seconds.

Valid values: **1 to 180**.

Default value: **60**.

If no response is received from the backend server during the request timeout period, ALB sends an `HTTP 504` error code to the client.', example='60'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy. System security policies and custom security policies are supported.

Default value: **tls_cipher_policy\\_1\\_0** (system security policy).

>  Only HTTPS listeners support this parameter.', example='tls_cipher_policy_1_0'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertClientVerifyEnabled** is set to **true**.

The name must be 1 to 40 characters in length, and can contain lowercase letters, hyphens (-), underscores (\\_), and digits.

>  Only HTTPS listeners support this parameter.', example='test_client-verify-alias_123456'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='Specifies whether to use the `X-Forwarded-Clientcert-clientverify` header to retrieve the verification result of the client certificate. Valid values:

*   **true**: uses the X-Forwarded-Clientcert-clientverify header.
*   **false** (default): does not use the X-Forwarded-Clientcert-clientverify header.

>  Only HTTPS listeners support this parameter.', example='true'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertFingerprintEnabled** is set to **true**.

The name must be 1 to 40 characters in length, and can contain lowercase letters, hyphens (-), underscores (\\_), and digits.

>  Only HTTPS listeners support this parameter.', example='test_finger-print-alias_123456'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='Specifies whether to use the `X-Forwarded-Clientcert-fingerprint` header to retrieve the fingerprint of the client certificate. Valid values:

*   **true**: uses the X-Forwarded-Clientcert-fingerprint header.
*   **false** (default): does not use the X-Forwarded-Clientcert-fingerprint header.

>  Only HTTPS listeners support this parameter.', example='true'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertIssuerDNEnabled** is set to **true**.

The name must be 1 to 40 characters in length, and can contain lowercase letters, hyphens (-), underscores (\\_), and digits.

>  Only HTTPS listeners support this parameter.', example='test_issue-dn-alias_123456'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='Specifies whether to use the `X-Forwarded-Clientcert-issuerdn` header to retrieve information about the authority that issues the client certificate. Valid values:

*   **true**: uses the X-Forwarded-Clientcert-issuerdn header.
*   **false** (default): does not use the X-Forwarded-Clientcert-issuerdn header.

>  Only HTTPS listeners support this parameter.', example='true'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertSubjectDNEnabled** is set to **true**.

The name must be 1 to 40 characters in length, and can contain lowercase letters, hyphens (-), underscores (\\_), and digits.

>  Only HTTPS listeners support this parameter.', example='test_subject-dn-alias_123456'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='Specifies whether to use the `X-Forwarded-Clientcert-subjectdn` header to retrieve information about the owner of the client certificate. Valid values:

*   **true**: uses the X-Forwarded-Clientcert-subjectdn header.
*   **false** (default): does not use the X-Forwarded-Clientcert-subjectdn header.

>  Only HTTPS listeners support this parameter.', example='true'),
    XForwardedForClientSourceIpsEnabled?: boolean(name='XForwardedForClientSourceIpsEnabled', description='Specifies whether to use the `X-Forwarded-Client-Ip` header to obtain the source IP address of the ALB instance. Valid values:

*   **true**: uses the X-Forwarded-Client-Ip header.
*   **false** (default): does not use the X-Forwarded-Client-Ip header.

>  HTTP, HTTPS, and QUIC listeners support this parameter. The feature corresponding to this parameter is not available by default. If you want to use this feature, submit a ticket.', example='false'),
    XForwardedForClientSourceIpsTrusted?: string(name='XForwardedForClientSourceIpsTrusted', description='The trusted proxy IP address.

ALB traverses `X-Forwarded-For` backwards and selects the first IP address that is not in the trusted IP list as the originating IP address of the client, which will be throttled if source IP address throttling is enabled.', example='10.1.1.0/24'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='Specifies whether to use the `X-Forwarded-Client-Port` header to retrieve the client port. Valid values:

*   **true**: uses the X-Forwarded-Client-Port header.
*   **false** (default): does not use the X-Forwarded-Client-Port header.

>  HTTP and HTTPS listeners support this parameter.', example='true'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='Specifies whether to use the `X-Forwarded-For` header to retrieve client IP addresses. Valid values:

*   **true** (default): uses the X-Forwarded-For header.
*   **false**: does not use the X-Forwarded-For header.

>  HTTP and HTTPS listeners support this parameter.', example='true'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='Specifies whether to use the `X-Forwarded-Proto` header to retrieve the listening protocol of the ALB instance. Valid values:

*   **true**: uses the X-Forwarded-Proto header.
*   **false** (default): does not use the X-Forwarded-Proto header.

>  HTTP, HTTPS, and QUIC listeners support this parameter.', example='false'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='Specifies whether to use the `SLB-ID` header to retrieve the ID of the ALB instance. Valid values:

*   **true**: uses the SLB-ID header.
*   **false** (default): does not use the SLB-ID header.

>  HTTP, HTTPS, and QUIC listeners support this parameter.', example='false'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='Specifies whether to use the `X-Forwarded-Port` header to retrieve the listening port of the ALB instance. Valid values:

*   **true**: uses the X-Forwarded-Port header.
*   **false** (default): does not use the X-Forwarded-Port header.

>  HTTP, HTTPS, and QUIC listeners support this parameter.', example='false'),
  }(name='XForwardedForConfig'),
}

model CreateListenerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateListenerResponseBody(name='body'),
}

/**
  * ## Usage notes
  * **CreateListener** is an asynchronous operation. After you call this operation, the system returns a request ID. However, the operation is still being performed in the background. You can call the [GetListenerAttribute](~~214353~~) operation to query the status of the HTTP, HTTPS, or QUIC listener.
  * *   If the HTTP, HTTPS, or QUIC listener is in the **Provisioning** state, it indicates that the listener is being created.
  * *   If the HTTP, HTTPS, or QUIC listener is in the **Running** state, it indicates that the listener has been created successfully.
  *
  * @param request CreateListenerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateListenerResponse
 */
async function createListenerWithOptions(request: CreateListenerRequest, runtime: Util.RuntimeOptions): CreateListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caCertificates)) {
    query['CaCertificates'] = request.caCertificates;
  }
  if (!Util.isUnset(request.caEnabled)) {
    query['CaEnabled'] = request.caEnabled;
  }
  if (!Util.isUnset(request.certificates)) {
    query['Certificates'] = request.certificates;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.defaultActions)) {
    query['DefaultActions'] = request.defaultActions;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.gzipEnabled)) {
    query['GzipEnabled'] = request.gzipEnabled;
  }
  if (!Util.isUnset(request.http2Enabled)) {
    query['Http2Enabled'] = request.http2Enabled;
  }
  if (!Util.isUnset(request.idleTimeout)) {
    query['IdleTimeout'] = request.idleTimeout;
  }
  if (!Util.isUnset(request.listenerDescription)) {
    query['ListenerDescription'] = request.listenerDescription;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.listenerProtocol)) {
    query['ListenerProtocol'] = request.listenerProtocol;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.quicConfig)) {
    query['QuicConfig'] = request.quicConfig;
  }
  if (!Util.isUnset(request.requestTimeout)) {
    query['RequestTimeout'] = request.requestTimeout;
  }
  if (!Util.isUnset(request.securityPolicyId)) {
    query['SecurityPolicyId'] = request.securityPolicyId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.XForwardedForConfig)) {
    query['XForwardedForConfig'] = request.XForwardedForConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateListener',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * **CreateListener** is an asynchronous operation. After you call this operation, the system returns a request ID. However, the operation is still being performed in the background. You can call the [GetListenerAttribute](~~214353~~) operation to query the status of the HTTP, HTTPS, or QUIC listener.
  * *   If the HTTP, HTTPS, or QUIC listener is in the **Provisioning** state, it indicates that the listener is being created.
  * *   If the HTTP, HTTPS, or QUIC listener is in the **Running** state, it indicates that the listener has been created successfully.
  *
  * @param request CreateListenerRequest
  * @return CreateListenerResponse
 */
async function createListener(request: CreateListenerRequest): CreateListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createListenerWithOptions(request, runtime);
}

model CreateLoadBalancerRequest {
  addressAllocatedMode?: string(name='AddressAllocatedMode', description='The mode used to assign IP addresses to zones of the ALB instance. Default value: Dynamic. Valid values:

*   **Fixed:** assigns a static IP address to the ALB instance.
*   **Dynamic:** dynamically assigns an IP address to each zone of the ALB instance.', example='Dynamic'),
  addressIpVersion?: string(name='AddressIpVersion', description='The protocol version. Valid values:

*   **IPv4:** IPv4.
*   **DualStack:** dual stack.', example='IPv4'),
  addressType?: string(name='AddressType', description='The type of the address of the ALB instance. Valid values:

*   **Internet:** The ALB instance uses a public IP address. The domain name of the ALB instance is resolved to the public IP address. In this case, the ALB instance can be accessed over the Internet.
*   **Intranet:** The ALB instance uses a private IP address. The domain name of the ALB instance is resolved to the private IP address. In this case, the ALB instance can be accessed over the VPC in which the ALB instance is deployed.', example='Internet'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters.

>  If you do not specify this parameter, the system uses the value of **RequestId** as the value of **ClientToken**. The value of the **RequestId** parameter may be different for each API request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  deletionProtectionEnabled?: boolean(name='DeletionProtectionEnabled', description='Specifies whether to enable deletion protection. Default value: false. Valid values:

*   **true:** enables deletion protection.
*   **false:** disables deletion protection.', example='false'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default value: false. Valid values:

*   **true:** performs a dry run. The system checks the required parameters, request format, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false:** performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  loadBalancerBillingConfig?: {
    bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the Elastic IP Address (EIP) bandwidth plan that is associated with the ALB instance if the ALB instance uses a public IP address.', example='cbwp-bp1vevu8h3ieh****'),
    payType?: string(name='PayType', description='The billing method of the ALB instance.

Set the value to **PostPay**, which specifies the pay-as-you-go billing method.', example='PostPay'),
  }(name='LoadBalancerBillingConfig', description='The configuration of the billing method of the ALB instance.'),
  loadBalancerEdition?: string(name='LoadBalancerEdition', description='The edition of the ALB instance. The features and billing rules vary based on the edition of the ALB instance. Valid values:

*   **Basic:** basic.
*   **Standard:** standard.
*   **StandardWithWaf:** WAF-enabled.', example='Standard'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the ALB instance.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='alb1'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='The reason for enabling the configuration read-only mode. The reason must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The reason must start with a letter.

> This parameter takes effect only if `Status` is set to **ConsoleProtection**.'),
    status?: string(name='Status', description='Specifies whether to enable the configuration read-only mode. Valid values:

*   **NonProtection**: disables the configuration read-only mode. In this case, you cannot specify ModificationProtectionReason. If you specify ModificationProtectionReason, the value of the parameter is cleared.
*   **ConsoleProtection**: enables the configuration read-only mode. In this case, you can specify ModificationProtectionReason.

> If you set this parameter to **ConsoleProtection**, you cannot use the ALB console to modify instance configurations. However, you can call API operations to modify instance configurations.', example='ConsoleProtection'),
  }(name='ModificationProtectionConfig', description='The configuration of the configuration read-only mode.'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-atstuj3rtop****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key can be up to 128 characters in length, and cannot start with acs: or aliyun. It cannot contain http:// or https://.', example='env'),
      value?: string(name='Value', description='The tag value can be up to 128 characters in length, and cannot start with acs: or aliyun. It cannot contain http:// or https://.', example='product'),
    }
  ](name='Tag', description='The tags.'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which you want to create the ALB instance.', example='vpc-bp1b49rqrybk45nio****'),
  zoneMappings?: [ 
    {
      allocationId?: string(name='AllocationId', description='公网实例绑定的EIP实例ID。至少需要添加2个可用区，最多支持添加10个可用区。', example='eip-bp1aedxso6u80u0qf****'),
      intranetAddress?: string(name='IntranetAddress', description='The private IPv4 address. You must add at least two zones. You can add a maximum of 10 zones.', example='192.168.10.1'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an ALB instance. You can specify up to 10 zones.', example='vsw-sersdf****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the ALB instance. You can specify up to 10 zones for an ALB instance.

You can call the [DescribeZones](~~36064~~) operation to query the most recent zone list.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The zones and the vSwitches in the zones. You must specify at least two zones.'),
}

model CreateLoadBalancerResponseBody = {
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance.', example='alb-o9ulmq5hgn68jk****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLoadBalancerResponseBody(name='body'),
}

/**
  * **CreateLoadBalancer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the status of an ALB instance.
  * *   If an ALB instance is in the **Provisioning** state, it indicates that the ALB instance is being created.
  * *   If an ALB instance is in the **Active** state, it indicates that the ALB instance is created.
  *
  * @param request CreateLoadBalancerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateLoadBalancerResponse
 */
async function createLoadBalancerWithOptions(request: CreateLoadBalancerRequest, runtime: Util.RuntimeOptions): CreateLoadBalancerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressAllocatedMode)) {
    query['AddressAllocatedMode'] = request.addressAllocatedMode;
  }
  if (!Util.isUnset(request.addressIpVersion)) {
    query['AddressIpVersion'] = request.addressIpVersion;
  }
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.deletionProtectionEnabled)) {
    query['DeletionProtectionEnabled'] = request.deletionProtectionEnabled;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerBillingConfig)) {
    query['LoadBalancerBillingConfig'] = request.loadBalancerBillingConfig;
  }
  if (!Util.isUnset(request.loadBalancerEdition)) {
    query['LoadBalancerEdition'] = request.loadBalancerEdition;
  }
  if (!Util.isUnset(request.loadBalancerName)) {
    query['LoadBalancerName'] = request.loadBalancerName;
  }
  if (!Util.isUnset(request.modificationProtectionConfig)) {
    query['ModificationProtectionConfig'] = request.modificationProtectionConfig;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneMappings)) {
    query['ZoneMappings'] = request.zoneMappings;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoadBalancer',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **CreateLoadBalancer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the status of an ALB instance.
  * *   If an ALB instance is in the **Provisioning** state, it indicates that the ALB instance is being created.
  * *   If an ALB instance is in the **Active** state, it indicates that the ALB instance is created.
  *
  * @param request CreateLoadBalancerRequest
  * @return CreateLoadBalancerResponse
 */
async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoadBalancerWithOptions(request, runtime);
}

model CreateRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  direction?: string(name='Direction', description='The direction to which the forwarding rule is applied. Valid values:

*   **Request** (default): The forwarding rule is applied to the requests received by ALB.
*   **Response**: The forwarding rule is applied to the responses returned by backend servers.

> Basic ALB instances do not support the **Response** value.', example='Request'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='false'),
  listenerId?: string(name='ListenerId', description='The listener ID of the ALB instance.', example='lsr-bp1bpn0kn908w4nbw****'),
  priority?: int32(name='Priority', description='The priority of the forwarding rule. Valid values: **1 to 10000**. A smaller value indicates a higher priority.

> The priorities of the forwarding rules created for the same listener must be unique.', example='10'),
  ruleActions?: [ 
    {
      corsConfig?: {
        allowCredentials?: string(name='AllowCredentials', description='Specifies whether credentials can be carried in CORS requests. Valid values:

*   **on**: yes
*   **off**: no', example='on'),
        allowHeaders?: [ string ](name='AllowHeaders', description='The allowed headers for CORS requests.'),
        allowMethods?: [ string ](name='AllowMethods', description='The allowed HTTP methods for CORS requests.'),
        allowOrigin?: [ string ](name='AllowOrigin', description='The allowed origins of CORS requests.'),
        exposeHeaders?: [ string ](name='ExposeHeaders', description='The headers that can be exposed.'),
        maxAge?: long(name='MaxAge', description='The maximum cache time of dry run requests in the browser. Unit: seconds.

Valid values: **-1** to **172800**.', example='1000'),
      }(name='CorsConfig', description='The origins allowed.'),
      fixedResponseConfig?: {
        content?: string(name='Content', description='The content of the custom response. The content can be up to 1 KB in size and can contain only ASCII characters.', example='dssacav'),
        contentType?: string(name='ContentType', description='The format of the response.

Valid values: **text/plain**, **text/css**, **text/html**, **application/javascript**, and **application/json**.', example='text/plain'),
        httpCode?: string(name='HttpCode', description='The HTTP status code in the response. Valid values: **HTTP\\_2xx**, **HTTP\\_4xx**, and **HTTP\\_5xx**. **x** must be a digit.', example='HTTP_200'),
      }(name='FixedResponseConfig', description='The configuration of the custom response.'),
      forwardGroupConfig?: {
        serverGroupStickySession?: {
          enabled?: boolean(name='Enabled', description='Specifies whether to enable session persistence. Valid values:

*   **true**
*   **false** (default)', example='false'),
          timeout?: int32(name='Timeout', description='The timeout period of sessions. Unit: seconds. Valid values: **1** to **86400**. Default value: **1000**.', example='100'),
        }(name='ServerGroupStickySession', description='The configuration of session persistence for server groups.'),
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='The server group to which requests are distributed.', example='sgp-k86c1ov501id6p****'),
            weight?: int32(name='Weight', description='The weight of the server group. A larger value specifies a higher weight. A server group with a higher weight receives more requests. Valid values: **0** to **100**.

*   If only one destination server group exists and you do not specify a weight, the default value **100** is used.
*   If more than one destination server group exists, you must specify weights.', example='100'),
          }
        ](name='ServerGroupTuples', description='The server groups to which requests are distributed. Each forwarding rule supports at most five server groups.'),
      }(name='ForwardGroupConfig', description='The server groups to which requests are distributed. Each forwarding rule supports at most five server groups.'),
      insertHeaderConfig?: {
        key?: string(name='Key', description='The key of the header. The key must be 1 to 40 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The header key specified by **InsertHeaderConfig** must be unique.

> You cannot specify the following header keys (case-insensitive): `slb-id`, `slb-ip`, `x-forwarded-for`, `x-forwarded-proto`, `x-forwarded-eip`, `x-forwarded-port`, `x-forwarded-client-srcport`, `connection`, `upgrade`, `content-length`, `transfer-encoding`, `keep-alive`, `te`, `host`, `cookie`, `remoteip`, and `authority`.', example='key'),
        value?: string(name='Value', description='The value of the header to be inserted.

*   If **ValueType** is set to **SystemDefined**, you can specify one of the following header values:

    *   **ClientSrcPort**: the client port.
    *   **ClientSrcIp**: the client IP address.
    *   **Protocol**: the request protocol (HTTP or HTTPS).
    *   **SLBId**: the ID of the ALB instance.
    *   **SLBPort**: the listening port.

*   If **ValueType** is set to **UserDefined**, you can specify a custom header value. The header value must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and lower than 127`. You can use asterisks (\\*) and question marks (?) as wildcards. The value cannot start or end with a space character.

*   If **ValueType** is set to **ReferenceHeader**, you can reference one of the request headers. The header value must be 1 to 128 characters in length, and can contain lowercase letters, digits, underscores (\\_), and hyphens (-).', example='UserDefined'),
        valueType?: string(name='ValueType', description='The type of header. Valid values:

*   **UserDefined**: a custom header
*   **ReferenceHeader**: a header that references one of the request headers
*   **SystemDefined**: a header predefined by the system', example='UserDefined'),
      }(name='InsertHeaderConfig', description='The configuration of the header to be inserted.'),
      order?: int32(name='Order', description='The priority of the action. Valid values: **1 to 50000**. A smaller value indicates a higher priority. The actions of a forwarding rule are applied in descending order of priority. This parameter is required. The priority of each action within a forwarding rule must be unique.', example='1'),
      redirectConfig?: {
        host?: string(name='Host', description='The hostname to which requests are redirected. Valid values:

*   **${host}** (default): If you set the value to ${host}, you cannot append other characters.

*   A custom value. Make sure that the custom value meets the following requirements:

    *   The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, and the following special characters: - . \\* = ~ \\_ + \\ ^ ! $ & | ( ) \\[ ] ?.
    *   The hostname must contain at least one period (.) but cannot start or end with a period (.).
    *   The rightmost domain label can contain only letters and wildcards, and cannot contain digits or hyphens (-). The leftmost `domain label` can be an asterisk (\\*).
    *   The domain labels cannot start or end with a hyphen (-).
    *   You can use asterisks (\\*) and question marks (?) anywhere in a domain label as wildcard characters.', example='${host}'),
        httpCode?: string(name='HttpCode', description='The redirect type. Valid values: **301**, **302**, **303**, **307**, and **308**.', example='301'),
        path?: string(name='Path', description='The path to which requests are redirected. Valid values:

*   Default value: **${path}**. \\*\\*${host}**, **${protocol}**, and **${port}\\*\\* are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value. You must make sure that the custom value meets the following requirements:

    *   The value must be 1 to 128 characters in length, and can contain asterisks (\\*) and question marks (?) as wildcards. The value is case-sensitive.
    *   It must start with a forward slash (/) and can contain letters, digits, and the following special characters: `$ - _ .+ / & ~ @ :`. It cannot contain the following special characters: `" % # ; ! ( ) [ ] ^ , "`. You can use asterisks (\\*) and question marks (?) as wildcard characters.', example='/test'),
        port?: string(name='Port', description='The port to which requests are redirected.

*   **${port}** (default): If you set the value to ${port}, you cannot add other characters to the value.
*   You can also enter a port number. Valid values: **1 to 63335**.', example='10'),
        protocol?: string(name='Protocol', description='The redirect protocol. Valid values:

*   **${protocol}** (default): If you set the value to ${protocol}, you cannot add other characters to the value.
*   **HTTP** or **HTTPS**.

> HTTPS listeners support only HTTPS to HTTPS redirects.', example='HTTP'),
        query?: string(name='Query', description='The query string of the URL to which requests are redirected.

*   Default value: **${query}**. \\*\\*${host}**, **${protocol}**, and **${port}\\*\\* are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value. You must make sure that the custom value meets the following requirements:

    *   The value must be 1 to 128 characters in length.
    *   It can contain printable characters, except space characters, the special characters `# [ ] { } \\ | < > &`, and uppercase letters.', example='${query}'),
      }(name='RedirectConfig', description='The redirect configuration.

> When you configure the **RedirectConfig** action, you can use the default value only for the **httpCode** parameter. Do not use the default values for the other parameters.'),
      removeHeaderConfig?: {
        key?: string(name='Key'),
      }(name='RemoveHeaderConfig'),
      rewriteConfig?: {
        host?: string(name='Host', description='The hostname to which requests are redirected. Valid values:

*   **${host}** (default): If you set the value to ${host}, you cannot append other characters.

*   If you want to specify a custom value, make sure that the following requirements are met:

    *   The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, and the following special characters: - . \\* = ~ \\_ + \\ ^ ! $ & | ( ) \\[ ] ?.
    *   The hostname must contain at least one period (.) but cannot start or end with a period (.).
    *   The rightmost domain label can contain only letters and wildcards, and cannot contain digits or hyphens (-). The leftmost `domain label` can be an asterisk (\\*).
    *   The domain labels cannot start or end with a hyphen (-). You can use asterisks (\\*) and question marks (?) anywhere in a domain label as wildcard characters.', example='www.example.com'),
        path?: string(name='Path', description='The path to which requests are redirected. Valid values:

*   Default value: **${path}**. \\*\\*${host}**, **${protocol}**, and **${port}\\*\\* are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value. You must make sure that the custom value meets the following requirements:

    *   The value must be 1 to 128 characters in length, and can contain asterisks (\\*) and question marks (?) as wildcards. The value is case-sensitive.
    *   It must start with a forward slash (/) and can contain letters, digits, and the following special characters: `$ - _ .+ / & ~ @ :`. It cannot contain the following special characters: `" % # ; ! ( ) [ ] ^ , "`. You can use asterisks (\\*) and question marks (?) as wildcard characters.', example='/tsdf'),
        query?: string(name='Query', description='The query string of the URL to which requests are redirected.

*   Default value: **${query}**. \\*\\*${host}**, **${protocol}**, and **${port}\\*\\* are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value. You must make sure that the custom value meets the following requirements:

    *   The value must be 1 to 128 characters in length.
    *   It can contain printable characters, except space characters, the special characters `# [ ] { } \\ | < > &`, and uppercase letters.', example='${query}'),
      }(name='RewriteConfig', description='The rewrite configuration.

> If multiple actions are configured within a forwarding rule, you must set **RewriteConfig** to the value of **ForwardGroup**.'),
      trafficLimitConfig?: {
        perIpQps?: int32(name='PerIpQps', description='The QPS of each IP address. Valid values: **1 to 100000**.

> If both the **QPS** and **PerIpQps** properties are specified, make sure that the value of the **QPS** property is smaller than the value of the PerIpQps property.', example='80'),
        QPS?: int32(name='QPS', description='The queries per second (QPS). Valid values: **1 to 100000**.', example='100'),
      }(name='TrafficLimitConfig', description='The action to throttle traffic.'),
      trafficMirrorConfig?: {
        mirrorGroupConfig?: {
          serverGroupTuples?: [ 
            {
              serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-00mkgijak0w4qgz9****'),
            }
          ](name='ServerGroupTuples', description='The configuration of the server group to which traffic is mirrored.'),
        }(name='MirrorGroupConfig', description='The configuration of the server group to which traffic is mirrored.'),
        targetType?: string(name='TargetType', description='The type of destination to which network traffic is mirrored. Valid values:

*   **ForwardGroupMirror**: a server group
*   **SlsMirror**: Log Service', example='ForwardGroupMirror'),
      }(name='TrafficMirrorConfig', description='The action to mirror traffic.'),
      type?: string(name='Type', description='The action type. Valid values:

*   **ForwardGroup**: forwards a request to multiple vServer groups.
*   **Redirect**: redirects a request.
*   **FixedResponse**: returns a custom response.
*   **Rewrite**: rewrites a request.
*   **InsertHeader**: inserts a header.
*   **RemoveHeaderConfig**: deletes a header.
*   **TrafficLimitConfig**: throttles network traffic.
*   **TrafficMirrorConfig**: mirrors traffic.
*   **CorsConfig**: forwards requests based on CORS.

The following action types are supported:

*   **FinalType**: the last action to be performed in a forwarding rule. Each forwarding rule can contain only one FinalType action. You can specify the **ForwardGroup**, **Redirect**, or **FixedResponse** action as the FinalType action.
*   **ExtType**: the action or the actions to be performed before the **FinalType** action. A forwarding rule can contain one or more **ExtType** actions. To specify this parameter, you must also specify **FinalType**. You can specify multiple **InsertHeader** actions or one **Rewrite** action.', example='ForwardGroup'),
    }
  ](name='RuleActions', description='The maximum cache time of dry run requests in the browser. Unit: seconds.

Valid values: **-1** to **172800**.'),
  ruleConditions?: [ 
    {
      cookieConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='The key of the cookie.

*   The key must be 1 to 100 characters in length.
*   You can use asterisks (\\*) and question marks (?) as wildcard characters.
*   The key can contain printable characters, except uppercase letters, space characters, and the following special characters: `; # [ ] { } \\ | < > &`.', example='test'),
            value?: string(name='Value', description='The value of the cookie.

*   The value must be 1 to 100 characters in length.
*   You can use asterisks (\\*) and question marks (?) as wildcard characters.
*   The value can contain printable characters, except uppercase letters, space characters, and the following special characters: `; # [ ] { } \\ | < > &`.', example='test'),
          }
        ](name='Values', description='The cookie values.'),
      }(name='CookieConfig', description='The configurations of the cookies.'),
      headerConfig?: {
        key?: string(name='Key', description='The key of the header.

*   The key must be 1 to 40 characters in length.
*   It can contain lowercase letters, digits, hyphens (-), and underscores (\\_).
*   Cookie and Host are not supported.', example='Port'),
        values?: [ string ](name='Values', description='The value of the header.'),
      }(name='HeaderConfig', description='The configuration of the header.'),
      hostConfig?: {
        values?: [ string ](name='Values', description='The hostname.'),
      }(name='HostConfig', description='The configurations of the host.'),
      methodConfig?: {
        values?: [ string ](name='Values', description='The request methods.'),
      }(name='MethodConfig', description='The configurations of the request methods.'),
      pathConfig?: {
        values?: [ string ](name='Values', description='The path.'),
      }(name='PathConfig', description='The configurations of the URLs.'),
      queryStringConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='The key of the query string.

*   The key must be 1 to 100 characters in length.
*   You can use asterisks (\\*) and question marks (?) as wildcards. The key can contain printable characters, except uppercase letters, space characters, and the following special characters: `# [ ] { } \\ | < > &`.', example='test'),
            value?: string(name='Value', description='The value of the query string.

*   The value must be 1 to 128 characters in length.
*   It can contain printable characters, except uppercase letters, space characters, and the following special characters: `# [ ] { } \\ | < > &`. You can use asterisks (\\*) and question marks (?) as wildcard characters.', example='test'),
          }
        ](name='Values', description='The query strings.'),
      }(name='QueryStringConfig', description='The configurations of the query strings.'),
      responseHeaderConfig?: {
        key?: string(name='Key'),
        values?: [ string ](name='Values'),
      }(name='ResponseHeaderConfig'),
      responseStatusCodeConfig?: {
        values?: [ string ](name='Values'),
      }(name='ResponseStatusCodeConfig'),
      sourceIpConfig?: {
        values?: [ string ](name='Values', description='The configuration of the source IP-based forwarding rule.'),
      }(name='SourceIpConfig', description='The configuration of the source IP-based forwarding rule. This parameter is required and takes effect only when **Type** is set to **SourceIP**.'),
      type?: string(name='Type', description='The type of forwarding rule. Valid values:

*   **Host**: Requests are distributed based on hosts.
*   **Path**: Requests are distributed based on paths.
*   **Header**: Requests are distributed based on HTTP headers.
*   **QueryString**: Requests are distributed based on query strings.
*   **Method**: Requests are distributed based on request methods.
*   **Cookie**: Requests are distributed based on cookies.
*   **SourceIp**: Requests are distributed based on source IP addresses.', example='Host'),
    }
  ](name='RuleConditions', description='The configuration of the source IP-based forwarding rule.'),
  ruleName?: string(name='RuleName', description='The name of the forwarding rule.

*   The name must be 2 to 128 characters in length.
*   It can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter.', example='rule-doc'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateRuleResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540750'),
  ruleId?: string(name='RuleId', description='The forwarding rule ID.', example='rule-a3x3pg1yohq3lq****'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRuleResponseBody(name='body'),
}

/**
  * Take note of the following limits:
  * *   When you configure the **Redirect** action, you can use the default value only for the **HttpCode** parameter. Do not use the default values for the other parameters.
  * *   If you specify the **Rewrite** action together with other actions in a forwarding rule, make sure that the **ForwardGroup** action is specified.
  * *   **CreateRule** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of a forwarding rule.
  *     *   If a forwarding rule is in the **Provisioning** state, the forwarding rule is being created.
  *     *   If a forwarding rule is in the **Available** state, the forwarding rule is created.
  * *   You can set **RuleConditions** and **RuleActions** to add conditions and actions to a forwarding rule. The limits on conditions and actions are:
  *     *   Limits on conditions: 5 for a basic Application Load Balancer (ALB) instance, 10 for a standard ALB instance, and 10 for a WAF-enabled ALB instance.
  *     *   Limits on actions: 3 for a basic ALB instance, 5 for a standard ALB instance, and 5 for a WAF-enabled ALB instance.
  *
  * @param request CreateRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRuleResponse
 */
async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.ruleActions)) {
    query['RuleActions'] = request.ruleActions;
  }
  if (!Util.isUnset(request.ruleConditions)) {
    query['RuleConditions'] = request.ruleConditions;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRule',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following limits:
  * *   When you configure the **Redirect** action, you can use the default value only for the **HttpCode** parameter. Do not use the default values for the other parameters.
  * *   If you specify the **Rewrite** action together with other actions in a forwarding rule, make sure that the **ForwardGroup** action is specified.
  * *   **CreateRule** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of a forwarding rule.
  *     *   If a forwarding rule is in the **Provisioning** state, the forwarding rule is being created.
  *     *   If a forwarding rule is in the **Available** state, the forwarding rule is created.
  * *   You can set **RuleConditions** and **RuleActions** to add conditions and actions to a forwarding rule. The limits on conditions and actions are:
  *     *   Limits on conditions: 5 for a basic Application Load Balancer (ALB) instance, 10 for a standard ALB instance, and 10 for a WAF-enabled ALB instance.
  *     *   Limits on actions: 3 for a basic ALB instance, 5 for a standard ALB instance, and 5 for a WAF-enabled ALB instance.
  *
  * @param request CreateRuleRequest
  * @return CreateRuleResponse
 */
async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateRulesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='false'),
  listenerId?: string(name='ListenerId', description='The listener ID of the ALB instance.', example='lsr-bp1bpn0kn908w4nbw****'),
  rules?: [ 
    {
      direction?: string(name='Direction', description='The direction to which the forwarding rule is applied. You can specify only one direction. Valid values:

*   **Request** (default): The forwarding rule is applied to the client requests received by ALB.
*   **Response**: The forwarding rule is applied to the responses returned by backend servers.

>  Basic ALB instances do not support forwarding rules of the **Response** type.', example='Request'),
      priority?: int32(name='Priority', description='The priority of the forwarding rule. Valid values: **1** to **10000**. A lower value specifies a higher priority. You can specify priorities for at most 10 forwarding rules.

>  The priority of each forwarding rule added to a listener must be unique.', example='10'),
      ruleActions?: [ 
        {
          corsConfig?: {
            allowCredentials?: string(name='AllowCredentials', description='Specifies whether to allow credentials to be carried in CORS requests. Valid values:

*   **on**: allows credentials to be carried in CORS requests.
*   **off**: does not allow credentials to be carried in CORS requests.', example='on'),
            allowHeaders?: [ string ](name='AllowHeaders', description='The allowed headers for CORS requests.'),
            allowMethods?: [ string ](name='AllowMethods', description='The allowed HTTP methods for CORS requests.'),
            allowOrigin?: [ string ](name='AllowOrigin', description='The allowed origins of CORS requests.'),
            exposeHeaders?: [ string ](name='ExposeHeaders', description='The headers that can be exposed.'),
            maxAge?: long(name='MaxAge', description='The maximum cache time of preflight requests in the browser. Unit: seconds.

Valid values: **-1** to **172800**.', example='1000'),
          }(name='CorsConfig', description='The CORS configuration.'),
          fixedResponseConfig?: {
            content?: string(name='Content', description='The content of the custom response. The content can be up to 1 KB in size and can contain only ASCII characters.', example='dssacav'),
            contentType?: string(name='ContentType', description='The format of the content. Valid values:

*   **text/plain**
*   **text/css**
*   **text/html**
*   **application/javascript**
*   **application/json**', example='text/plain'),
            httpCode?: string(name='HttpCode', description='The HTTP status code in the response. Valid values: **HTTP\\_2xx**, **HTTP\\_4xx**, and **HTTP\\_5xx**. **x** must be a digit.', example='HTTP_200'),
          }(name='FixedResponseConfig', description='The configuration of the custom response. You can specify at most 20 responses.'),
          forwardGroupConfig?: {
            serverGroupStickySession?: {
              enabled?: boolean(name='Enabled', description='Specifies whether to enable session persistence. Valid values:

*   **true**: enables session persistence.
*   **false** (default): disables session persistence.', example='false'),
              timeout?: int32(name='Timeout', description='The timeout period of sessions. Unit: seconds. Valid values: **1 to 86400**.', example='2'),
            }(name='ServerGroupStickySession', description='The configuration of session persistence for server groups.'),
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='The server group to which requests are distributed.', example='sgp-k86c1ov501id6p****'),
                weight?: int32(name='Weight', description='The weight of the server group. A larger value specifies a higher weight. A server group with a higher weight receives more requests. Valid values: **0** to **100**.

*   If only one destination server group exists and you do not specify a weight, the default value **100** is used.
*   If more than one destination server group exists, you must specify weights.', example='100'),
              }
            ](name='ServerGroupTuples', description='The server groups to which requests are forwarded.'),
          }(name='ForwardGroupConfig', description='The configuration of the server group. You can add at most 20 server groups.'),
          insertHeaderConfig?: {
            key?: string(name='Key', description='The key of the header. The key must be 1 to 40 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The header key specified by **InsertHeaderConfig** must be unique.

>  You cannot specify the following header keys: `slb-id`, `slb-ip`, `x-forwarded-for`, `x-forwarded-proto`, `x-forwarded-eip`, `x-forwarded-port`, `x-forwarded-client-srcport`, `connection`, `upgrade`, `content-length`, `transfer-encoding`, `keep-alive`, `te`, `host`, `cookie`, `remoteip`, and `authority`. The header keys are case-insensitive.', example='key'),
            value?: string(name='Value', description='The value of the header.

*   If **ValueType** is set to **SystemDefined**, one of the following values is supported:

    *   **ClientSrcPort**: the client port.
    *   **ClientSrcIp**: the client IP address.
    *   **Protocol**: the request protocol (HTTP or HTTPS).
    *   **SLBId**: the ID of the ALB instance.
    *   **SLBPort**: the listener port.

*   If **ValueType** is set to **UserDefined**, a custom header value is supported. The header value must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and smaller than 127`. You can use asterisks (\\*) and question marks (?) as wildcard characters. The header value cannot start or end with a space character.

*   If **ValueType** is set to **ReferenceHeader**, you can reference one of the request headers. The header value must be 1 to 128 characters in length, and can contain lowercase letters, digits, underscores (\\_), and hyphens (-).', example='UserDefined'),
            valueType?: string(name='ValueType', description='The type of the header. Valid values:

*   **UserDefined**: a custom header
*   **ReferenceHeader**: a header that references one of the request headers
*   **SystemDefined**: a system-defined header', example='UserDefined'),
          }(name='InsertHeaderConfig', description='The configuration of the header to be inserted. You can specify at most 20 headers.'),
          order?: int32(name='Order', description='The priority of the action. Valid values: **1 to 50000**. A lower value indicates a higher priority. The actions of a forwarding rule are applied in descending order of priority. This parameter is required. The priority of each action within a forwarding rule must be unique. You can specify priorities for at most 20 actions.', example='1'),
          redirectConfig?: {
            host?: string(name='Host', description='The hostname to which requests are redirected. Valid values:

*   **${host}** (default): If ${host} is returned, no other character is appended.

*   Limits on the value:

    *   The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, hyphens (-), and periods (.). Asterisks (\\*) and question marks (?) can be used as wildcards.
    *   The hostname contains at least one period (.) but does not start or end with a period (.).
    *   The rightmost domain label can contain only letters and wildcard characters. It does not contain digits or hyphens (-).
    *   The domain labels do not start or end with hyphens (-).
    *   You can use asterisks (\\*) and question marks (?) as wildcards anywhere in a domain label.', example='www.example.com'),
            httpCode?: string(name='HttpCode', description='The HTTP status code that indicates the redirect type. Valid values: **301**, **302**, **303**, **307**, and **308**.', example='301'),
            path?: string(name='Path', description='The path to which requests are redirected. Valid values:

*   Default value: **${path}**. **${host}**, **${protocol}**, and **${port}** are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   Limits on the value:

    *   The path must be 1 to 128 characters in length.
    *   It must start with a forward slash (/) and can contain letters, digits, and the following special characters: `$ - _ .+ / & ~ @ :`. It cannot contain the following special characters: `" % # ; ! ( ) [ ]^ , "`. You can use asterisks (\\*) and question marks (?) as wildcard characters.
    *   The path is case-sensitive.', example='/test'),
            port?: string(name='Port', description='The port to which requests are distributed.

*   **${port}** (default): If you set the value to ${port}, you cannot add other characters to the value.
*   Other valid values: **1 to 63335**.', example='10'),
            protocol?: string(name='Protocol', description='The redirect protocol. Valid values:

*   **${protocol}** (default): If ${protocol} is returned, no other character is appended.
*   **HTTP** or **HTTPS**.

>  HTTPS listeners support only HTTPS to HTTPS redirects.', example='HTTP'),
            query?: string(name='Query', description='The query string of the URL to which requests are redirected.

*   Default value: **${query}**. **${host}**, **${protocol}**, and **${port}** are also supported. Each variable can be specified only once. The preceding variables can be used at the same time or combined with a custom value.

*   Limits on the value:

    *   The query string must be 1 to 128 characters in length.
    *   It can contain printable characters, except space characters, the special characters `# [ ] { } \\ | < > &`, and uppercase letters.', example='quert'),
          }(name='RedirectConfig', description='The redirect configuration. You can specify at most 20 redirects.'),
          removeHeaderConfig?: {
            key?: string(name='Key', description='The key of the header to be removed. The key must be 1 to 40 characters in length and can contain letters, digits, underscores, and hyphens (-). The header key must be unique.

*   You cannot specify the following header keys for an inbound forwarding rule: `slb-id`, `slb-ip`, `x-forwarded-for`, `x-forwarded-proto`, `x-forwarded-eip`, `x-forwarded-port`, `x-forwarded-client-srcport`, `connection`, `upgrade`, `content-length`, `transfer-encoding`, `keep-alive`, `te`, `host`, `cookie`, `remoteip`, and `authority`. The preceding keys are case-insensitive.
*   You cannot specify the following header keys for an outbound forwarding rule: `connection`, `upgrade`, `content-length`, and `transfer-encoding`. The preceding keys are case-insensitive.', example='test'),
          }(name='RemoveHeaderConfig', description='The configuration of the header to be removed.'),
          rewriteConfig?: {
            host?: string(name='Host', description='The hostname to which requests are redirected. Valid values:

*   **${host}** (default): If you set the value to ${host}, you cannot append other characters.

*   A custom value that meets the following requirements:

    *   The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, hyphens (-), and periods (.). You can use asterisks (\\*) and question marks (?) as wildcard characters.
    *   The hostname contains at least one period (.) but does not start or end with a period (.).
    *   The rightmost domain label can contain only letters and wildcard characters. It does not contain digits or hyphens (-).
    *   The domain labels do not start or end with hyphens (-). You can use asterisks (\\*) and question marks (?) anywhere in a domain label as wildcard characters.', example='www.example.com'),
            path?: string(name='Path', description='The path to which requests are redirected. Valid values:

*   Default value: **${path}**. **${host}**, **${protocol}**, and **${port}** are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   Limits on the value:

    *   The path must be 1 to 128 characters in length.
    *   It must start with a forward slash (/) and can contain letters, digits, and the following special characters: `$ - _ .+ / & ~ @ :`. It cannot contain the following special characters: `" % # ; ! ( ) [ ]^ , "`. You can use asterisks (\\*) and question marks (?) as wildcard characters.
    *   The path is case-sensitive.', example='/tsdf'),
            query?: string(name='Query', description='The query string of the URL to which requests are redirected.

*   Default value: **${query}**. **${host}**, **${protocol}**, and **${port}** are also supported. Each variable can be specified only once. The preceding variables can be used at the same time or combined with a custom value.

*   Limits on the value:

    *   The query string must be 1 to 128 characters in length.
    *   It can contain printable characters, except space characters, the special characters `# [ ] { } \\ | < > &`, and uppercase letters.', example='quedsa'),
          }(name='RewriteConfig', description='The rewrite configuration. You can specify at most 20 rewrites.'),
          trafficLimitConfig?: {
            perIpQps?: int32(name='PerIpQps', description='The QPS of each IP address. Value range: **1 to 1000000**.

>  If **QPS** and PerIpQps are specified, the value of **PerIpQps** must be smaller than the value of **QPS**.', example='80'),
            QPS?: int32(name='QPS', description='The queries per second (QPS). Value range: **1 to 1000000**.', example='100'),
          }(name='TrafficLimitConfig', description='The configuration of traffic throttling. You can add at most 20 configuration records.'),
          trafficMirrorConfig?: {
            mirrorGroupConfig?: {
              serverGroupTuples?: [ 
                {
                  serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='srg-00mkgijak0w4qgz9****'),
                }
              ](name='ServerGroupTuples', description='The server group to which traffic is mirrored.'),
            }(name='MirrorGroupConfig', description='The configuration of the server group to which traffic is mirrored.'),
            targetType?: string(name='TargetType', description='The type of destination to which network traffic is mirrored. Valid values:

*   **ForwardGroupMirror**: a server group.', example='ForwardGroupMirror'),
          }(name='TrafficMirrorConfig', description='The configuration of traffic mirroring. You can add at most 20 traffic mirrors.'),
          type?: string(name='Type', description='The action type. You can specify at most 11 types of actions. Valid values:

*   **ForwardGroup**: distributes requests to multiple vServer groups.
*   **Redirect**: redirects a request.
*   **FixedResponse**: returns a custom response.
*   **Rewrite**: rewrites a request.
*   **InsertHeader**: inserts a header.
*   **RemoveHeaderConfig:** deletes the header of a request.
*   **TrafficLimit**: throttles traffic.
*   **trafficMirror**: mirrors network traffic.
*   **Cors**: enables cross-origin resource sharing (CORS).

The following action types are supported:

*   **FinalType**: the last action to be performed in a forwarding rule. Each forwarding rule can contain only one FinalType action. You can specify a **ForwardGroup**, **Redirect**, or **FixedResponse** action as the FinalType action.
*   **ExtType**: one or more actions to be performed before the **FinalType** action. A forwarding rule can contain one or more **ExtType** actions. To specify an ExtType action, you must specify a **FinalType** action. You can specify multiple **InsertHeader** actions or one **Rewrite** action.', example='ForwardGroup'),
        }
      ](name='RuleActions', description='The actions of the forwarding rule.'),
      ruleConditions?: [ 
        {
          cookieConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='The key of the cookie.

*   The key must be 1 to 100 characters in length.
*   You can use asterisks (\\*) and question marks (?) as wildcard characters.
*   It can contain printable characters, except uppercase letters, space characters, and the following special characters: `; # [ ] { } \\ | < > &`.', example='test'),
                value?: string(name='Value', description='The value of the cookie.

*   The value must be 1 to 100 characters in length.
*   You can use asterisks (\\*) and question marks (?) as wildcard characters.
*   It can contain printable characters, except uppercase letters, space characters, and the following special characters: `; # [ ] { } \\ | < > &`.', example='test'),
              }
            ](name='Values', description='The key-value pairs of cookies.'),
          }(name='CookieConfig', description='The configurations of the cookies. You can add at most 20 cookies.'),
          headerConfig?: {
            key?: string(name='Key', description='The key of the header.

*   The key must be 1 to 40 characters in length.
*   It can contain lowercase letters, digits, hyphens (-), and underscores (\\_).
*   You cannot specify Cookie or Host.', example='Port'),
            values?: [ string ](name='Values', description='The values of the header.'),
          }(name='HeaderConfig', description='The configuration of the header. You can add at most 20 headers.'),
          hostConfig?: {
            values?: [ string ](name='Values', description='The hostnames.'),
          }(name='HostConfig', description='The configurations of the hosts. You can specify up to 20 resources.'),
          methodConfig?: {
            values?: [ string ](name='Values', description='The request methods.'),
          }(name='MethodConfig', description='The configurations of the request methods. You can specify at most 20 request methods.'),
          pathConfig?: {
            values?: [ string ](name='Values', description='The paths.'),
          }(name='PathConfig', description='The configurations of the paths. You can specify at most 20 paths.'),
          queryStringConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='They key of the query string.

*   It must be 1 to 100 characters in length.
*   You can use asterisks (\\*) and question marks (?) as wildcards. The key can contain printable characters, excluding uppercase letters, space characters, and the following special characters: `# [ ] { } \\ | < > &`.', example='test'),
                value?: string(name='Value', description='The value of the query string.

*   The value must be 1 to 128 characters in length.
*   It can contain printable characters, excluding uppercase letters, space characters, and the following special characters: `# [ ] { } \\ | < > &`. You can use asterisks (\\*) and question marks (?) as wildcards.', example='test'),
              }
            ](name='Values', description='The configurations of the query string.'),
          }(name='QueryStringConfig', description='The configuration of the query conditions. You can specify at most 20 query conditions.'),
          responseHeaderConfig?: {
            key?: string(name='Key', description='The key of the header.

*   The key must be 1 to 40 characters in length.
*   It can contain lowercase letters, digits, hyphens (-), and underscores (\\_).
*   You cannot specify Cookie or Host.', example='Port'),
            values?: [ string ](name='Values', description='The values of the header.'),
          }(name='ResponseHeaderConfig', description='The configuration of the header. You can add at most 20 headers.'),
          responseStatusCodeConfig?: {
            values?: [ string ](name='Values', description='The response status codes.'),
          }(name='ResponseStatusCodeConfig', description='The configurations of the response status codes.'),
          sourceIpConfig?: {
            values?: [ string ](name='Values', description='The configuration of the source IP addresses based on which user traffic is matched.'),
          }(name='SourceIpConfig', description='The configuration of the source IP addresses based on which user traffic is matched. This parameter is required and takes effect only when **Type** is set to **SourceIP**. You can specify at most five values for **SourceIp**.'),
          type?: string(name='Type', description='The type of forwarding rule. You can specify at most seven types. Valid values:

*   **Host**: Responses are forwarded based on hosts.
*   **Path**: Responses are forwarded based on paths.
*   **Header**: Responses are forwarded based on HTTP headers.
*   **QueryString**: Responses are forwarded based on query strings.
*   **Method**: Responses are forwarded based on request methods.
*   **Cookie**: Responses are forwarded based on cookies.
*   **SourceIp:**: Responses are forwarded based on source IP addresses.
*   **ResponseHeader**: Responses are forwarded based on HTTP response headers.
*   **ResponseStatusCode**: Responses are forwarded based on response status codes.', example='Host'),
        }
      ](name='RuleConditions', description='The conditions of the forwarding rule.'),
      ruleName?: string(name='RuleName', description='The name of the forwarding rule. You can name at most 20 forwarding rules.

*   The name must be 2 to 128 characters in length.
*   It can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter.', example='test'),
      tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag. The tag key can be up to 128 characters in length, and cannot start with acs: or aliyun. It cannot contain http:// or https://.', example='env'),
          value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length, and cannot start with acs: or aliyun. It cannot contain http:// or https://.', example='product'),
        }
      ](name='Tag', description='The tag that you want to add.'),
    }
  ](name='Rules', description='The forwarding rules. You can specify at most 10 forwarding rules in each call.'),
}

model CreateRulesResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  ruleIds?: [ 
    {
      priority?: int32(name='Priority', description='The priority of the forwarding rule. Valid values: **1 to 10000**. A smaller value indicates a higher priority.

> The priorities of the forwarding rules created for the same listener must be unique.', example='10'),
      ruleId?: string(name='RuleId', description='The forwarding rule ID.', example='rule-a3x3pg1yohq3lq****'),
    }
  ](name='RuleIds', description='The priority of the forwarding rule. Valid values: **1 to 10000**. A lower value specifies a higher priority.

> The priorities of the forwarding rules created for the same listener is unique.'),
}

model CreateRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRulesResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following limits:
  * *   When you configure the **Redirect** action, you can use the default value for the **HttpCode** parameter but you cannot use the default values for all of the other parameters.
  * *   If you specify the **Rewrite** action and other actions in a forwarding rule, make sure that one of the actions is **ForwardGroup**.
  * *   **CreateRules** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of forwarding rules.
  *     *   If forwarding rules are in the **Provisioning** state, the forwarding rules are being created.
  *     *   If forwarding rules are in the **Available** state, the forwarding rules have been created.
  * *   You can set **RuleConditions** and **RuleActions** to add conditions and actions to a forwarding rule. Take note of the following limits on the number of conditions and the number of actions in each forwarding rule:
  *     *   Limits on conditions: You can specify at most 5 conditions if you use a basic Application Load Balancer (ALB) instance, at most 10 conditions if you use a standard ALB instance, and at most 10 conditions if you use a WAF-enabled ALB instance.
  *     *   Limits on actions: You can specify at most 3 actions if you use a basic ALB instance, at most 5 actions if you use a standard ALB instance, and at most 10 actions if you use a WAF-enabled ALB instance.
  *
  * @param request CreateRulesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRulesResponse
 */
async function createRulesWithOptions(request: CreateRulesRequest, runtime: Util.RuntimeOptions): CreateRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRules',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following limits:
  * *   When you configure the **Redirect** action, you can use the default value for the **HttpCode** parameter but you cannot use the default values for all of the other parameters.
  * *   If you specify the **Rewrite** action and other actions in a forwarding rule, make sure that one of the actions is **ForwardGroup**.
  * *   **CreateRules** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of forwarding rules.
  *     *   If forwarding rules are in the **Provisioning** state, the forwarding rules are being created.
  *     *   If forwarding rules are in the **Available** state, the forwarding rules have been created.
  * *   You can set **RuleConditions** and **RuleActions** to add conditions and actions to a forwarding rule. Take note of the following limits on the number of conditions and the number of actions in each forwarding rule:
  *     *   Limits on conditions: You can specify at most 5 conditions if you use a basic Application Load Balancer (ALB) instance, at most 10 conditions if you use a standard ALB instance, and at most 10 conditions if you use a WAF-enabled ALB instance.
  *     *   Limits on actions: You can specify at most 3 actions if you use a basic ALB instance, at most 5 actions if you use a standard ALB instance, and at most 10 actions if you use a WAF-enabled ALB instance.
  *
  * @param request CreateRulesRequest
  * @return CreateRulesResponse
 */
async function createRules(request: CreateRulesRequest): CreateRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRulesWithOptions(request, runtime);
}

model CreateSecurityPolicyRequest {
  ciphers?: [ string ](name='Ciphers', description='The supported cipher suites.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

> If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-atstuj3rtop****'),
  securityPolicyName?: string(name='SecurityPolicyName', description='The name of the security policy.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test-secrity'),
  TLSVersions?: [ string ](name='TLSVersions', description='The supported Transport Layer Security (TLS) protocol versions.'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.'),
}

model CreateSecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The security policy ID.', example='scp-bp1bpn0kn9****'),
}

model CreateSecurityPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSecurityPolicyResponseBody(name='body'),
}

async function createSecurityPolicyWithOptions(request: CreateSecurityPolicyRequest, runtime: Util.RuntimeOptions): CreateSecurityPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ciphers)) {
    query['Ciphers'] = request.ciphers;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityPolicyName)) {
    query['SecurityPolicyName'] = request.securityPolicyName;
  }
  if (!Util.isUnset(request.TLSVersions)) {
    query['TLSVersions'] = request.TLSVersions;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSecurityPolicy',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSecurityPolicy(request: CreateSecurityPolicyRequest): CreateSecurityPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityPolicyWithOptions(request, runtime);
}

model CreateServerGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  healthCheckConfig?: {
    healthCheckCodes?: [ string ](name='HealthCheckCodes', description='The HTTP status codes that are used to indicate whether the backend server passes the health check.'),
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The backend port that is used for health checks.

Valid values: **0** to **65535**.

Default value: **0**. If you set the value to 0, the port of a backend server is used for health checks.', example='80'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable the health check feature. Valid values:

*   **true**: enables the health check feature.
*   **false**: disables the health check feature.

>  If the **ServerGroupType** parameter is set to **Instance** or **Ip**, the health check feature is enabled by default. If the **ServerGroupType** parameter is set to **Fc**, the health check feature is disabled by default.', example='true'),
    healthCheckHost?: string(name='HealthCheckHost', description='The domain name that is used for health checks. The domain name meets the following requirements:

*   The domain name is 1 to 80 characters in length.
*   The domain name contains lowercase letters, digits, hyphens (-), and periods (.).
*   The domain name contains at least one period (.) but does not start or end with a period (.).
*   The rightmost domain label of the domain name contains only letters, and does not contain digits or hyphens (-).
*   The domain name does not start or end with a hyphen (-).

>  This parameter takes effect only when **HealthCheckProtocol** is set to **HTTP** or **HTTPS**. HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTTPS on the **ALB** tab.', example='www.example.com'),
    healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='The version of the HTTP protocol. Valid values: **HTTP1.0** and **HTTP1.1**. Default value: HTTP1.1.

>  This parameter takes effect only when **HealthCheckProtocol** is set to **HTTP** or **HTTPS**. HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTTPS on the **ALB** tab.', example='HTTP1.1'),
    healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Unit: seconds.

Valid values: **1** to **50**.

Default value: **2**.', example='2'),
    healthCheckMethod?: string(name='HealthCheckMethod', description='The HTTP method that is used for health checks. Valid values:

*   **GET**: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
*   **POST**: By default, gRPC health checks use the POST method.
*   **HEAD**: HTTP and HTTPS health checks in listeners use the HEAD method by default.

>  This parameter takes effect only when **HealthCheckProtocol** is set to **HTTP**, **HTTPS**, or **gRPC**. HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTTPS on the **ALB** tab.', example='HEAD'),
    healthCheckPath?: string(name='HealthCheckPath', description='The path that is used for health checks.

The path must be 1 to 80 characters in length and can contain only letters, digits, and the following special characters: `- / . % ? # & =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : \\" , +`. The URL must start with a forward slash (/).

>  This parameter takes effect only when **HealthCheckProtocol** is set to **HTTP** or **HTTPS**. HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTPS on the **ALB** tab.', example='/test/index.html'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol that is used for health checks. Valid values:

*   **HTTP**: ALB performs HTTP health checks by sending HEAD or GET requests to a backend server to check whether the backend server is healthy.
*   **HTTPS**: ALB performs HTTPS health checks by sending HEAD or GET requests to a backend server to check whether the backend server is healthy. HTTPS supports data encryption and provides higher data security than HTTP.
*   **TCP**: To perform TCP health checks, SLB sends SYN packets to the backend server to check whether the port of the backend server is available to receive requests.
*   **gRPC**: To perform gRPC health checks, SLB sends POST or GET requests to a backend server to check whether the backend server is healthy.

>  HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTTPS on the **ALB** tab.', example='HTTP'),
    healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period for a health check response. If a backend server, such as an Elastic Compute Service (ECS) instance, does not return a health check response within the specified timeout period, the server fails the health check. Unit: seconds.

Valid values: **1** to **300**.

Default value: **5**.

>  If the value of **HealthCHeckTimeout** is smaller than the value of **HealthCheckInterval**, the value of **HealthCHeckTimeout** is ignored and the value of **HealthCheckInterval** is used.', example='5'),
    healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from **fail** to **success**.

Valid values: **2** to **10**.

Default value: **3**.', example='3'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from **success** to **fail**.

Valid values: **2** to **10**.

Default value: **3**.', example='3'),
  }(name='HealthCheckConfig', description='The configuration of health checks.'),
  protocol?: string(name='Protocol', description='The backend protocol. Valid values:

*   **HTTP** (default): The server group can be associated with HTTPS, HTTP, and QUIC listeners.
*   **HTTPS**: The server group can be associated with HTTPS listeners.
*   **gRPC**: The server group can be associated with HTTPS and QUIC listeners.

> If the **ServerGroupType** parameter is set to **Fc**, you can set Protocol only to **HTTP**.', example='HTTP'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-atstuj3rtop****'),
  scheduler?: string(name='Scheduler', description='The scheduling algorithm. Valid values:

*   **Wrr** (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
*   **Wlc**: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
*   **Sch**: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.

> This parameter takes effect when the **ServerGroupType** parameter is set to **Instance** or **Ip**.', example='Wrr'),
  serverGroupName?: string(name='ServerGroupName', description='The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='sg-atstuj3rtoptyui****'),
  serverGroupType?: string(name='ServerGroupType', description='The type of server group. Valid values:

*   **Instance** (default): allows you to add servers by specifying **Ecs**, **Eni**, or **Eci**.
*   **Ip**: allows you to add servers by specifying IP addresses.
*   **Fc**: allows you to add servers by specifying functions of Function Compute.', example='Instance'),
  serviceName?: string(name='ServiceName', description='This parameter is available only if the ALB Ingress controller is used. In this case, set this parameter to the name of the `Kubernetes Service` that is associated with the server group.', example='test'),
  stickySessionConfig?: {
    cookie?: string(name='Cookie', description='The cookie to be configured on the server.

The cookie must be 1 to 200 characters in length and can contain only ASCII characters and digits. It cannot contain commas (,), semicolons (;), or space characters. It cannot start with a dollar sign ($).

> This parameter takes effect when the **StickySessionEnabled** parameter is set to **true** and the **StickySessionType** parameter is set to **Server**.', example='B490B5EBF6F3CD402E515D22BCDA****'),
    cookieTimeout?: int32(name='CookieTimeout', description='The timeout period of a cookie. Unit: seconds.

Valid values: **1** to **86400**.

Default value: **1000**.

> This parameter takes effect only when the **StickySessionEnabled** parameter is set to **true** and the **StickySessionType** parameter is set to **Insert**.', example='1000'),
    stickySessionEnabled?: boolean(name='StickySessionEnabled', description='Specifies whether to enable session persistence. Valid values:

*   **true**
*   **false** (default)

> This parameter takes effect when the **ServerGroupType** parameter is set to **Instance** or **Ip**.', example='false'),
    stickySessionType?: string(name='StickySessionType', description='The method that is used to handle a cookie. Valid values:

*   **Insert** (default): inserts a cookie.

ALB inserts a session cookie (SERVERID) into the first HTTP or HTTPS response that is sent to a client. Subsequent requests to ALB carry this cookie, and ALB determines the destination servers of the requests based on the cookies.

*   **Server**: rewrites a cookie.

When ALB detects a user-defined cookie, it overwrites the original cookie with the user-defined cookie. Subsequent requests to ALB carry this user-defined cookie, and ALB determines the destination servers of the requests based on the cookies.

> This parameter takes effect when the **StickySessionEnabled** parameter is set to **true**.', example='Insert'),
  }(name='StickySessionConfig', description='The configuration of session persistence.

> This parameter takes effect when the **ServerGroupType** parameter is set to **Instance** or **Ip**.'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length, and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length, and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tag.'),
  uchConfig?: {
    type?: string(name='Type', description='The type of the parameter.', example='QueryString'),
    value?: string(name='Value', description='The parameter value for consistent hashing.', example='abc'),
  }(name='UchConfig', description='The configuration of consistent hashing based on URLs.'),
  upstreamKeepaliveEnabled?: boolean(name='UpstreamKeepaliveEnabled', description='Specifies whether to enable persistent TCP connections.'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC). You can add only backend servers that are deployed in the specified VPC to the server group.

> This parameter takes effect when the **ServerGroupType** parameter is set to **Instance** or **Ip**.', example='vpc-bp15zckdt37pq72zv****'),
}

model CreateServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous job.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sg-atstuj3rtoptyui****'),
}

model CreateServerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServerGroupResponseBody(name='body'),
}

/**
  * **CreateServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListServerGroups](~~213627~~) to query the status of a server group.
  * *   If a server group is in the **Creating** state, it indicates that the server group is being created.
  * *   If a server group is in the **Available** state, it indicates that the server group is created.
  *
  * @param request CreateServerGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateServerGroupResponse
 */
async function createServerGroupWithOptions(request: CreateServerGroupRequest, runtime: Util.RuntimeOptions): CreateServerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.healthCheckConfig)) {
    query['HealthCheckConfig'] = request.healthCheckConfig;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.serverGroupName)) {
    query['ServerGroupName'] = request.serverGroupName;
  }
  if (!Util.isUnset(request.serverGroupType)) {
    query['ServerGroupType'] = request.serverGroupType;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.stickySessionConfig)) {
    query['StickySessionConfig'] = request.stickySessionConfig;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.uchConfig)) {
    query['UchConfig'] = request.uchConfig;
  }
  if (!Util.isUnset(request.upstreamKeepaliveEnabled)) {
    query['UpstreamKeepaliveEnabled'] = request.upstreamKeepaliveEnabled;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServerGroup',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **CreateServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListServerGroups](~~213627~~) to query the status of a server group.
  * *   If a server group is in the **Creating** state, it indicates that the server group is being created.
  * *   If a server group is in the **Available** state, it indicates that the server group is created.
  *
  * @param request CreateServerGroupRequest
  * @return CreateServerGroupResponse
 */
async function createServerGroup(request: CreateServerGroupRequest): CreateServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServerGroupWithOptions(request, runtime);
}

model DeleteAScriptsRequest {
  AScriptIds?: [ string ](name='AScriptIds', description='The AScript rule IDs.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='f516e84e-fc0c-4c2d-a461-6cd774a84dbd'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
}

model DeleteAScriptsResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='03cf3fe1-ab37-479b-92a6-b481d762****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1B7B7695-3596-50C8-B739-030C6C685E61'),
}

model DeleteAScriptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAScriptsResponseBody(name='body'),
}

/**
  * **DeleteAScripts** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAScripts](~~472574~~) operation to query the status of the task:
  * *   If an AScript rule is in the **Deleting** state, the AScript rule is being deleted.
  * *   If an AScript rule cannot be found, the AScript rule is deleted.
  *
  * @param request DeleteAScriptsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteAScriptsResponse
 */
async function deleteAScriptsWithOptions(request: DeleteAScriptsRequest, runtime: Util.RuntimeOptions): DeleteAScriptsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.AScriptIds)) {
    query['AScriptIds'] = request.AScriptIds;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAScripts',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteAScripts** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAScripts](~~472574~~) operation to query the status of the task:
  * *   If an AScript rule is in the **Deleting** state, the AScript rule is being deleted.
  * *   If an AScript rule cannot be found, the AScript rule is deleted.
  *
  * @param request DeleteAScriptsRequest
  * @return DeleteAScriptsResponse
 */
async function deleteAScripts(request: DeleteAScriptsRequest): DeleteAScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAScriptsWithOptions(request, runtime);
}

model DeleteAclRequest {
  aclId?: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
}

model DeleteAclResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAclResponseBody(name='body'),
}

/**
  * **DeleteAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAcls](~~213617~~) operation to query the status of the task.
  * *   If the ACL is in the **Deleting** state, the ACL is being deleted.
  * *   If the ACL cannot be found, the ACL is deleted.
  *
  * @param request DeleteAclRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteAclResponse
 */
async function deleteAclWithOptions(request: DeleteAclRequest, runtime: Util.RuntimeOptions): DeleteAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAcl',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAcls](~~213617~~) operation to query the status of the task.
  * *   If the ACL is in the **Deleting** state, the ACL is being deleted.
  * *   If the ACL cannot be found, the ACL is deleted.
  *
  * @param request DeleteAclRequest
  * @return DeleteAclResponse
 */
async function deleteAcl(request: DeleteAclRequest): DeleteAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAclWithOptions(request, runtime);
}

model DeleteHealthCheckTemplatesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a **2xx HTTP** status code is returned and the operation is performed.', example='true'),
  healthCheckTemplateIds?: [ string ](name='HealthCheckTemplateIds', description='The ID of the health check template.', example='acl-123'),
}

model DeleteHealthCheckTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model DeleteHealthCheckTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHealthCheckTemplatesResponseBody(name='body'),
}

async function deleteHealthCheckTemplatesWithOptions(request: DeleteHealthCheckTemplatesRequest, runtime: Util.RuntimeOptions): DeleteHealthCheckTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.healthCheckTemplateIds)) {
    query['HealthCheckTemplateIds'] = request.healthCheckTemplateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHealthCheckTemplates',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHealthCheckTemplates(request: DeleteHealthCheckTemplatesRequest): DeleteHealthCheckTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHealthCheckTemplatesWithOptions(request, runtime);
}

model DeleteListenerRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  listenerId?: string(name='ListenerId', description='The ID of the Application Load Balancer (ALB) listener.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model DeleteListenerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model DeleteListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteListenerResponseBody(name='body'),
}

/**
  * **DeleteListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetListenerAttribute](~~2254865~~) to query the status of the task.
  * *   If the listener is in the **Deleting** state, the listener is being deleted.
  * *   If the listener cannot be found, the listener is deleted.
  *
  * @param request DeleteListenerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteListenerResponse
 */
async function deleteListenerWithOptions(request: DeleteListenerRequest, runtime: Util.RuntimeOptions): DeleteListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteListener',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetListenerAttribute](~~2254865~~) to query the status of the task.
  * *   If the listener is in the **Deleting** state, the listener is being deleted.
  * *   If the listener cannot be found, the listener is deleted.
  *
  * @param request DeleteListenerRequest
  * @return DeleteListenerResponse
 */
async function deleteListener(request: DeleteListenerRequest): DeleteListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteListenerWithOptions(request, runtime);
}

model DeleteLoadBalancerRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='lb-bp1b6c719dfa08ex****'),
}

model DeleteLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLoadBalancerResponseBody(name='body'),
}

/**
  * **DeleteLoadBalancer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  * *   If an ALB instance is in the **Deleting** state, the ALB instance is being deleted.
  * *   If an ALB instance cannot be found, the ALB instance is deleted.
  *
  * @param request DeleteLoadBalancerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteLoadBalancerResponse
 */
async function deleteLoadBalancerWithOptions(request: DeleteLoadBalancerRequest, runtime: Util.RuntimeOptions): DeleteLoadBalancerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLoadBalancer',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteLoadBalancer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  * *   If an ALB instance is in the **Deleting** state, the ALB instance is being deleted.
  * *   If an ALB instance cannot be found, the ALB instance is deleted.
  *
  * @param request DeleteLoadBalancerRequest
  * @return DeleteLoadBalancerResponse
 */
async function deleteLoadBalancer(request: DeleteLoadBalancerRequest): DeleteLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLoadBalancerWithOptions(request, runtime);
}

model DeleteRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: sends the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and sends the request. If the request passes the dry run, the `HTTP_2xx` status code is returned and the operation is performed. This is the default value.', example='true'),
  ruleId?: string(name='RuleId', description='The ID of the forwarding rule.', example='rule-doc****'),
}

model DeleteRuleResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRuleResponseBody(name='body'),
}

/**
  * **DeleteRule** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of a forwarding rule:
  * *   If the forwarding rule is in the **Deleting** state, the forwarding rule is being deleted.
  * *   If the forwarding rule cannot be found, the forwarding rule is deleted.
  *
  * @param request DeleteRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRuleResponse
 */
async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRule',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteRule** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of a forwarding rule:
  * *   If the forwarding rule is in the **Deleting** state, the forwarding rule is being deleted.
  * *   If the forwarding rule cannot be found, the forwarding rule is deleted.
  *
  * @param request DeleteRuleRequest
  * @return DeleteRuleResponse
 */
async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DeleteRulesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: checks the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='false'),
  ruleIds?: [ string ](name='RuleIds', description='The ID of the forwarding rule. Valid values of N: **1** to **5**.'),
}

model DeleteRulesResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7BED4F62-3E6E-5E4F-8C53-2D8CCE77F2ED'),
}

model DeleteRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRulesResponseBody(name='body'),
}

/**
  * **DeleteRules** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of forwarding rules.
  * *   If the forwarding rules are in the **Deleting** state, the forwarding rules are being deleted.
  * *   If the forwarding rules cannot be found, the forwarding rules are deleted.
  *
  * @param request DeleteRulesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRulesResponse
 */
async function deleteRulesWithOptions(request: DeleteRulesRequest, runtime: Util.RuntimeOptions): DeleteRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ruleIds)) {
    query['RuleIds'] = request.ruleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRules',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteRules** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of forwarding rules.
  * *   If the forwarding rules are in the **Deleting** state, the forwarding rules are being deleted.
  * *   If the forwarding rules cannot be found, the forwarding rules are deleted.
  *
  * @param request DeleteRulesRequest
  * @return DeleteRulesResponse
 */
async function deleteRules(request: DeleteRulesRequest): DeleteRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRulesWithOptions(request, runtime);
}

model DeleteSecurityPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

> If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The security policy ID.', example='spy-n0kn923****'),
}

model DeleteSecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model DeleteSecurityPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecurityPolicyResponseBody(name='body'),
}

async function deleteSecurityPolicyWithOptions(request: DeleteSecurityPolicyRequest, runtime: Util.RuntimeOptions): DeleteSecurityPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.securityPolicyId)) {
    query['SecurityPolicyId'] = request.securityPolicyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityPolicy',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSecurityPolicy(request: DeleteSecurityPolicyRequest): DeleteSecurityPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityPolicyWithOptions(request, runtime);
}

model DeleteServerGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-cige6j****'),
}

model DeleteServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous job.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model DeleteServerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServerGroupResponseBody(name='body'),
}

/**
  * **DeleteServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListServerGroups](~~213627~~) operation to query the status of the task.
  * *   If a server group is in the **Deleting** state, it indicates that the server group is being deleted.
  * *   If a specified server group cannot be found, it indicates that the server group has been deleted.
  *
  * @param request DeleteServerGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteServerGroupResponse
 */
async function deleteServerGroupWithOptions(request: DeleteServerGroupRequest, runtime: Util.RuntimeOptions): DeleteServerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    query['ServerGroupId'] = request.serverGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteServerGroup',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListServerGroups](~~213627~~) operation to query the status of the task.
  * *   If a server group is in the **Deleting** state, it indicates that the server group is being deleted.
  * *   If a specified server group cannot be found, it indicates that the server group has been deleted.
  *
  * @param request DeleteServerGroupRequest
  * @return DeleteServerGroupResponse
 */
async function deleteServerGroup(request: DeleteServerGroupRequest): DeleteServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServerGroupWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The supported natural language. Valid values:

*   zh-CN: **Chinese**
*   en-US: **English**
*   ja: **Japanese**', example='zh-CN'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of region service.', example='alb.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English
*   **ja**: Japanese', example='zh-CN'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='The name of the zone.', example='Hangzhou Zone G'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-g'),
    }
  ](name='Zones', description='The zones.', example='FFmyTO70tTpLG6I3FmYAXGKPdzTKM4svjIT4VQig7tTMKqiHlxKt2p5Zuz45p+Lxdq'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachCommonBandwidthPackageFromLoadBalancerRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The EIP bandwidth plan ID.', example='cbwp-bp1pzf0ym72pu3y76****'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='alb-d676fho813rmu3****'),
  regionId?: string(name='RegionId', description='The region ID of the ALB instance.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DetachCommonBandwidthPackageFromLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='2EF39708-974B-5E74-AFF5-3445263035A8'),
}

model DetachCommonBandwidthPackageFromLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachCommonBandwidthPackageFromLoadBalancerResponseBody(name='body'),
}

/**
  * **DetachCommonBandwidthPackageFromLoadBalancer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214359~~) operation to query the status of the task.
  * *   If an ALB instance is in the **Configuring** state, the EIP bandwidth plan is being disassociated from the ALB instance.
  * *   If an ALB instance is in the **Active** state, the EIP bandwidth plan is disassociated from the ALB instance.
  *
  * @param request DetachCommonBandwidthPackageFromLoadBalancerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DetachCommonBandwidthPackageFromLoadBalancerResponse
 */
async function detachCommonBandwidthPackageFromLoadBalancerWithOptions(request: DetachCommonBandwidthPackageFromLoadBalancerRequest, runtime: Util.RuntimeOptions): DetachCommonBandwidthPackageFromLoadBalancerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachCommonBandwidthPackageFromLoadBalancer',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DetachCommonBandwidthPackageFromLoadBalancer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214359~~) operation to query the status of the task.
  * *   If an ALB instance is in the **Configuring** state, the EIP bandwidth plan is being disassociated from the ALB instance.
  * *   If an ALB instance is in the **Active** state, the EIP bandwidth plan is disassociated from the ALB instance.
  *
  * @param request DetachCommonBandwidthPackageFromLoadBalancerRequest
  * @return DetachCommonBandwidthPackageFromLoadBalancerResponse
 */
async function detachCommonBandwidthPackageFromLoadBalancer(request: DetachCommonBandwidthPackageFromLoadBalancerRequest): DetachCommonBandwidthPackageFromLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachCommonBandwidthPackageFromLoadBalancerWithOptions(request, runtime);
}

model DisableDeletionProtectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  resourceId?: string(name='ResourceId', description='The ALB instance ID.', example='re-atstuj3rtop****'),
}

model DisableDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DisableDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDeletionProtectionResponseBody(name='body'),
}

async function disableDeletionProtectionWithOptions(request: DisableDeletionProtectionRequest, runtime: Util.RuntimeOptions): DisableDeletionProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDeletionProtection',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDeletionProtection(request: DisableDeletionProtectionRequest): DisableDeletionProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDeletionProtectionWithOptions(request, runtime);
}

model DisableLoadBalancerAccessLogRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

*   If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The SLB instance ID.', example='lb-bp1b6c719dfa08ex*****'),
}

model DisableLoadBalancerAccessLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model DisableLoadBalancerAccessLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableLoadBalancerAccessLogResponseBody(name='body'),
}

async function disableLoadBalancerAccessLogWithOptions(request: DisableLoadBalancerAccessLogRequest, runtime: Util.RuntimeOptions): DisableLoadBalancerAccessLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableLoadBalancerAccessLog',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableLoadBalancerAccessLog(request: DisableLoadBalancerAccessLogRequest): DisableLoadBalancerAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLoadBalancerAccessLogWithOptions(request, runtime);
}

model DisableLoadBalancerIpv6InternetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='alb-chugtlrj1iusjh****'),
}

model DisableLoadBalancerIpv6InternetResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='d12871a6-ebb2-41f3-8d74-d9f452bb****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7D866E37-1123-5160-AFF1-BDAF5EB86A8A'),
}

model DisableLoadBalancerIpv6InternetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableLoadBalancerIpv6InternetResponseBody(name='body'),
}

/**
  * ### Prerequisites
  * An ALB instance is created and IPv4/IPv6 dual stack is enabled for the instance. You can call the [CreateLoadBalancer](~~214358~~) operation and set **AddressIpVersion** to **DualStack** to create a dual-stack ALB instance.
  * > If you set **AddressIpVersion** to **DualStack**:
  * *   If you set **AddressType** to **Internet**, the ALB instance uses a public IPv4 IP address and a private IPv6 address.
  * *   If you set **AddressType** to **Intranet**, the ALB instance uses a private IPv4 IP address and a private IPv6 address.
  * ### Description
  * *   After the DisableLoadBalancerIpv6Internet operation is called, the value of **Ipv6AddressType** is changed to **Intranet** and the type of the IPv6 address of the ALB instance is changed from public to private. If you upgrade the instance or the instance scales elastic network interfaces (ENIs) along with workloads, private IPv6 addresses are automatically enabled for the instance and the new ENIs. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the value of **Ipv6AddressType**.
  * *   **DisableLoadBalancerIpv6Internet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the status of the task.
  *     *   If the ALB instance is in the **Configuring** state, the network type of the IPv6 address that is used by the ALB instance is being changed.
  *     *   If the ALB instance is in the **Active** state, the network type of the IPv6 address that is used by the ALB instance is changed.
  *
  * @param request DisableLoadBalancerIpv6InternetRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableLoadBalancerIpv6InternetResponse
 */
async function disableLoadBalancerIpv6InternetWithOptions(request: DisableLoadBalancerIpv6InternetRequest, runtime: Util.RuntimeOptions): DisableLoadBalancerIpv6InternetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableLoadBalancerIpv6Internet',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### Prerequisites
  * An ALB instance is created and IPv4/IPv6 dual stack is enabled for the instance. You can call the [CreateLoadBalancer](~~214358~~) operation and set **AddressIpVersion** to **DualStack** to create a dual-stack ALB instance.
  * > If you set **AddressIpVersion** to **DualStack**:
  * *   If you set **AddressType** to **Internet**, the ALB instance uses a public IPv4 IP address and a private IPv6 address.
  * *   If you set **AddressType** to **Intranet**, the ALB instance uses a private IPv4 IP address and a private IPv6 address.
  * ### Description
  * *   After the DisableLoadBalancerIpv6Internet operation is called, the value of **Ipv6AddressType** is changed to **Intranet** and the type of the IPv6 address of the ALB instance is changed from public to private. If you upgrade the instance or the instance scales elastic network interfaces (ENIs) along with workloads, private IPv6 addresses are automatically enabled for the instance and the new ENIs. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the value of **Ipv6AddressType**.
  * *   **DisableLoadBalancerIpv6Internet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the status of the task.
  *     *   If the ALB instance is in the **Configuring** state, the network type of the IPv6 address that is used by the ALB instance is being changed.
  *     *   If the ALB instance is in the **Active** state, the network type of the IPv6 address that is used by the ALB instance is changed.
  *
  * @param request DisableLoadBalancerIpv6InternetRequest
  * @return DisableLoadBalancerIpv6InternetResponse
 */
async function disableLoadBalancerIpv6Internet(request: DisableLoadBalancerIpv6InternetRequest): DisableLoadBalancerIpv6InternetResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLoadBalancerIpv6InternetWithOptions(request, runtime);
}

model DissociateAclsFromListenerRequest {
  aclIds?: [ string ](name='AclIds', description='The ACL IDs.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model DissociateAclsFromListenerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DissociateAclsFromListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateAclsFromListenerResponseBody(name='body'),
}

/**
  * **DeleteDhcpOptionsSet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAclRelations](~~213618~~) operation to query the status of the task.
  * *   If an ACL is in the **Dissociating** state, the ACL is being disassociated from the listener.
  * *   If an ACL is in the **Dissociated** state, the ACL is disassociated from the listener.
  *
  * @param request DissociateAclsFromListenerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DissociateAclsFromListenerResponse
 */
async function dissociateAclsFromListenerWithOptions(request: DissociateAclsFromListenerRequest, runtime: Util.RuntimeOptions): DissociateAclsFromListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclIds)) {
    query['AclIds'] = request.aclIds;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateAclsFromListener',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DeleteDhcpOptionsSet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAclRelations](~~213618~~) operation to query the status of the task.
  * *   If an ACL is in the **Dissociating** state, the ACL is being disassociated from the listener.
  * *   If an ACL is in the **Dissociated** state, the ACL is disassociated from the listener.
  *
  * @param request DissociateAclsFromListenerRequest
  * @return DissociateAclsFromListenerResponse
 */
async function dissociateAclsFromListener(request: DissociateAclsFromListenerRequest): DissociateAclsFromListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateAclsFromListenerWithOptions(request, runtime);
}

model DissociateAdditionalCertificatesFromListenerRequest {
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The certificate ID. Only server certificates are supported. You can specify up to 20 IDs.', example='12315790343_166f8204689_1714763408_70998****'),
    }
  ](name='Certificates', description='The additional certificates.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a **2xx HTTP** status code is returned and the operation is performed.', example='true'),
  listenerId?: string(name='ListenerId', description='The listener ID. You must specify the ID of an HTTPS listener or a QUIC listener.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model DissociateAdditionalCertificatesFromListenerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model DissociateAdditionalCertificatesFromListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateAdditionalCertificatesFromListenerResponseBody(name='body'),
}

/**
  * **DissociateAdditionalCertificatesFromListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListListenerCertificates](~~214354~~) operation to query the status of the task. - If an additional certificate is in the **Dissociating** state, the additional certificate is being disassociated. - If an additional certificate is in the **Dissociated** state, the additional certificate is disassociated.
  *
  * @param request DissociateAdditionalCertificatesFromListenerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DissociateAdditionalCertificatesFromListenerResponse
 */
async function dissociateAdditionalCertificatesFromListenerWithOptions(request: DissociateAdditionalCertificatesFromListenerRequest, runtime: Util.RuntimeOptions): DissociateAdditionalCertificatesFromListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificates)) {
    query['Certificates'] = request.certificates;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateAdditionalCertificatesFromListener',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **DissociateAdditionalCertificatesFromListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListListenerCertificates](~~214354~~) operation to query the status of the task. - If an additional certificate is in the **Dissociating** state, the additional certificate is being disassociated. - If an additional certificate is in the **Dissociated** state, the additional certificate is disassociated.
  *
  * @param request DissociateAdditionalCertificatesFromListenerRequest
  * @return DissociateAdditionalCertificatesFromListenerResponse
 */
async function dissociateAdditionalCertificatesFromListener(request: DissociateAdditionalCertificatesFromListenerRequest): DissociateAdditionalCertificatesFromListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateAdditionalCertificatesFromListenerWithOptions(request, runtime);
}

model EnableDeletionProtectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  resourceId?: string(name='ResourceId', description='The Application Load Balancer (ALB) instance ID.', example='re-atstuj3rtop****'),
}

model EnableDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model EnableDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableDeletionProtectionResponseBody(name='body'),
}

async function enableDeletionProtectionWithOptions(request: EnableDeletionProtectionRequest, runtime: Util.RuntimeOptions): EnableDeletionProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableDeletionProtection',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableDeletionProtection(request: EnableDeletionProtectionRequest): EnableDeletionProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDeletionProtectionWithOptions(request, runtime);
}

model EnableLoadBalancerAccessLogRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.

> If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='alb-bd6oylbckp6k9x****'),
  logProject?: string(name='LogProject', description='The project to which the access log is shipped.', example='sls-setter'),
  logStore?: string(name='LogStore', description='The Logstore to which the access log is shipped.', example='test'),
}

model EnableLoadBalancerAccessLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model EnableLoadBalancerAccessLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableLoadBalancerAccessLogResponseBody(name='body'),
}

async function enableLoadBalancerAccessLogWithOptions(request: EnableLoadBalancerAccessLogRequest, runtime: Util.RuntimeOptions): EnableLoadBalancerAccessLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.logProject)) {
    query['LogProject'] = request.logProject;
  }
  if (!Util.isUnset(request.logStore)) {
    query['LogStore'] = request.logStore;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableLoadBalancerAccessLog',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableLoadBalancerAccessLog(request: EnableLoadBalancerAccessLogRequest): EnableLoadBalancerAccessLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLoadBalancerAccessLogWithOptions(request, runtime);
}

model EnableLoadBalancerIpv6InternetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='alb-o2cvudgo6rlqz7****'),
}

model EnableLoadBalancerIpv6InternetResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='4a6e3ad4-ef08-4ab1-b332-fa621cfe****'),
  requestId?: string(name='RequestId', description='The request ID.', example='BB920797-D70E-567F-8098-55A861DD7912'),
}

model EnableLoadBalancerIpv6InternetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableLoadBalancerIpv6InternetResponseBody(name='body'),
}

/**
  * ### Prerequisites
  * An ALB instance is created and IPv4/IPv6 dual stack is enabled for the instance. You can call the [CreateLoadBalancer](~~214358~~) operation and set **AddressIpVersion** to **DualStack** to create a dual-stack ALB instance.
  * > If you set **AddressIpVersion** to **DualStack**:
  * *   If you set **AddressType** to **Internet**, the ALB instance uses a public IPv4 IP address and a private IPv6 address.
  * *   If you set **AddressType** to **Intranet**, the ALB instance uses a private IPv4 IP address and a private IPv6 address.
  * ### Description
  * *   After the EnableLoadBalancerIpv6Internet operation is called, the value of **Ipv6AddressType** is changed to **Internet** and the type of the IPv6 address of the ALB instance is changed from private to public. If you upgrade the instance or the instance scales elastic network interfaces (ENIs) along with workloads, public IPv6 addresses are automatically enabled for the instance and the new ENIs. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the value of **Ipv6AddressType**.
  * *   **EnableLoadBalancerIpv6Internet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the status of the task.
  *     *   If the ALB instance is in the **Configuring** state, the network type of the IPv6 address that is used by the ALB instance is being changed.
  *     *   If the ALB instance is in the **Active** state, the network type of the IPv6 address that is used by the ALB instance is changed.
  *
  * @param request EnableLoadBalancerIpv6InternetRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableLoadBalancerIpv6InternetResponse
 */
async function enableLoadBalancerIpv6InternetWithOptions(request: EnableLoadBalancerIpv6InternetRequest, runtime: Util.RuntimeOptions): EnableLoadBalancerIpv6InternetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableLoadBalancerIpv6Internet',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### Prerequisites
  * An ALB instance is created and IPv4/IPv6 dual stack is enabled for the instance. You can call the [CreateLoadBalancer](~~214358~~) operation and set **AddressIpVersion** to **DualStack** to create a dual-stack ALB instance.
  * > If you set **AddressIpVersion** to **DualStack**:
  * *   If you set **AddressType** to **Internet**, the ALB instance uses a public IPv4 IP address and a private IPv6 address.
  * *   If you set **AddressType** to **Intranet**, the ALB instance uses a private IPv4 IP address and a private IPv6 address.
  * ### Description
  * *   After the EnableLoadBalancerIpv6Internet operation is called, the value of **Ipv6AddressType** is changed to **Internet** and the type of the IPv6 address of the ALB instance is changed from private to public. If you upgrade the instance or the instance scales elastic network interfaces (ENIs) along with workloads, public IPv6 addresses are automatically enabled for the instance and the new ENIs. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the value of **Ipv6AddressType**.
  * *   **EnableLoadBalancerIpv6Internet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the status of the task.
  *     *   If the ALB instance is in the **Configuring** state, the network type of the IPv6 address that is used by the ALB instance is being changed.
  *     *   If the ALB instance is in the **Active** state, the network type of the IPv6 address that is used by the ALB instance is changed.
  *
  * @param request EnableLoadBalancerIpv6InternetRequest
  * @return EnableLoadBalancerIpv6InternetResponse
 */
async function enableLoadBalancerIpv6Internet(request: EnableLoadBalancerIpv6InternetRequest): EnableLoadBalancerIpv6InternetResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLoadBalancerIpv6InternetWithOptions(request, runtime);
}

model GetHealthCheckTemplateAttributeRequest {
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='The ID of the health check template.', example='hct-x4jazoyi6tvsq9****'),
}

model GetHealthCheckTemplateAttributeResponseBody = {
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='The HTTP status codes that are used to determine whether the backend server passes the health check.

*   If **HealthCheckProtocol** is set to **HTTP**, **HealthCheckCodes** can be set to **http\\_2xx** (default), **http\\_3xx**, **http\\_4xx**, and **http\\_5xx**. Separate multiple HTTP status codes with a comma (,).
*   If **HealthCheckProtocol** is set to **gRPC**, **HealthCheckCodes** can be set to **0 to 99**. Default value: **0**. Value ranges are supported. You can enter up to 20 value ranges and separate them with a comma (,).

> This parameter takes effect only when the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks.

Valid values: **0** to **65535**.', example='80'),
  healthCheckHost?: string(name='HealthCheckHost', description='The domain name that you want to use for health checks. Valid values:

*   **$SERVER_IP**: the private IP addresses of backend servers. If you do not set the HealthCheckHost parameter or set the parameter to $SERVER_IP, the Application Load Balancer (ALB) instance uses the private IP addresses of backend servers for health checks.
*   **domain**: The domain name must be 1 to 80 characters in length, and can contain letters, digits, periods (.), and hyphens (-).

> This parameter takes effect only when the `HealthCheckProtocol` parameter is set to **HTTP**.', example='$SERVER_IP'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='The HTTP version that is used for health checks.

Valid values: **HTTP1.0** and **HTTP1.1**.

> This parameter takes effect only when the `HealthCheckProtocol` parameter is set to **HTTP**.', example='HTTP1.0'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Unit: seconds. Valid values: **1 to 50**.', example='3'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The method that you want to use for the health check. Valid values:

*   **HEAD**: By default, the ALB instance sends HEAD requests to a backend server to perform HTTP health checks.
*   **GET**: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
*   **POST**: gRPC health checks automatically use the POST method.

> This parameter takes effect only when the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.', example='GET'),
  healthCheckPath?: string(name='HealthCheckPath', description='The URL that is used for health checks.

The URL must be 1 to 80 characters in length, and can contain only letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : \\" , +`. The URL must start with a forward slash (/).

> This parameter takes effect only when the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.', example='/test/index.html'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol that you want to use for health checks. Valid values:

*   **HTTP** (default): To perform HTTP health checks, ALB sends HEAD or GET requests to a backend server to check whether the backend server is healthy.
*   **TCP**: To perform TCP health checks, ALB sends SYN packets to a backend server to check whether the port of the backend server is available to receive requests.
*   **gRPC**: To perform gRPC health checks, ALB sends POST or GET requests to a backend server to check whether the backend server is healthy.', example='HTTP'),
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='The ID of the health check template.', example='hct-x4jazoyi6tvsq9****'),
  healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='The name of the health check template.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='HealthCheckTemplate1'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check. If a backend server does not respond within the specified timeout period, the backend server fails the health check. Unit: seconds.

Valid values: **1** to **300**.

> If the value of the `HealthCheckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the timeout period specified by the `HealthCheckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is used as the timeout period.', example='200'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status is changed from **fail** to **success**.

Valid values: **2** to **10**.', example='5'),
  requestId?: string(name='RequestId', description='The request ID.', example='DB1AFC33-DAE8-528E-AA4D-4A6AABE71945'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tags', description='The tags.'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status is changed from **success** to **fail**.

Valid values: **2** to **10**.', example='5'),
}

model GetHealthCheckTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHealthCheckTemplateAttributeResponseBody(name='body'),
}

async function getHealthCheckTemplateAttributeWithOptions(request: GetHealthCheckTemplateAttributeRequest, runtime: Util.RuntimeOptions): GetHealthCheckTemplateAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.healthCheckTemplateId)) {
    query['HealthCheckTemplateId'] = request.healthCheckTemplateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHealthCheckTemplateAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHealthCheckTemplateAttribute(request: GetHealthCheckTemplateAttributeRequest): GetHealthCheckTemplateAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHealthCheckTemplateAttributeWithOptions(request, runtime);
}

model GetListenerAttributeRequest {
  listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model GetListenerAttributeResponseBody = {
  aclConfig?: {
    aclRelations?: [ 
      {
        aclId?: string(name='AclId', description='The ID of the ACL that is associated with the listener.', example='acl-doc****'),
        status?: string(name='Status', description='Indicates whether the ACL is associated with the listener. Valid values:

*   **Associating**
*   **Associated**
*   **Dissociating**', example='Associating'),
      }
    ](name='AclRelations', description='The IDs of the ACLs that are associated with the listener.'),
    aclType?: string(name='AclType', description='The type of the ACL. Valid values:

*   **White**: a whitelist. Only requests from the IP addresses or CIDR blocks in the network ACL are forwarded. Whitelists are applicable to scenarios in which you want to allow only specific IP addresses to access an application. Your service may be adversely affected if the whitelist is not properly configured. If a whitelist is configured for a listener, only requests from IP addresses that are on the whitelist are forwarded by the listener.

    If you enable a whitelist but do not add an IP address to the whitelist, the listener forwards all requests.

*   **Black**: a blacklist. Requests from the IP addresses or CIDR blocks in the network ACL are denied. Blacklists are suitable for scenarios in which you want to deny access from specific IP addresses or CIDR blocks to an application.

    If a blacklist is configured for a listener but no IP addresses are added to the blacklist, the listener forwards all requests.', example='White'),
  }(name='AclConfig', description='The configurations of the access control lists (ACLs).'),
  caCertificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The ID of the default CA certificate.', example='139a00604bd-cn-east-hangzho****'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the certificate is a default certificate: Valid values:

*   **true**
*   **false**', example='true'),
      status?: string(name='Status', description='The status of the certificate.', example='Associated'),
    }
  ](name='CaCertificates', description='A list of default CA certificates.'),
  caEnabled?: boolean(name='CaEnabled', description='Indicates whether mutual authentication is enabled. Valid values:

*   **true**
*   **false**', example='false'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The ID of the certificate. Only server certificates are supported.', example='12315790212_166f8204689_1714763408_70998****'),
    }
  ](name='Certificates', description='A list of certificates.'),
  defaultActions?: [ 
    {
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='The ID of the server group to which requests are forwarded.', example='rsp-cige6j****'),
          }
        ](name='ServerGroupTuples', description='The server group to which requests are forwarded.'),
      }(name='ForwardGroupConfig', description='The configuration of the ForwardGroup action. This parameter is returned and takes effect when Type is set to **ForwardGroup**.'),
      type?: string(name='Type', description='The type of the action.

If **ForwardGroup** is returned, requests are forwarded to multiple vServer groups.', example='ForwardGroup'),
    }
  ](name='DefaultActions', description='The actions of the default forwarding rule.'),
  gzipEnabled?: boolean(name='GzipEnabled', description='Indicates whether GZIP compression is enabled to compress specific types of files. Valid values:

*   **true**
*   **false**', example='true'),
  http2Enabled?: boolean(name='Http2Enabled', description='Indicates whether HTTP/2 is enabled. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='true'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period of an idle connection. Unit: seconds.

If no requests are received within the specified timeout period, Application Load Balancer (ALB) closes the current connection. When a request is received, ALB establishes a new connection.', example='2'),
  listenerDescription?: string(name='ListenerDescription', description='The name of the listener.', example='test'),
  listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  listenerPort?: int32(name='ListenerPort', description='The frontend port that is used by the ALB instance.', example='80'),
  listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol. Valid values: **HTTP**, **HTTPS**, and **QUIC**.', example='HTTP'),
  listenerStatus?: string(name='ListenerStatus', description='The status of the listener. Valid values:

*   **Provisioning**
*   **Running**
*   **Configuring**
*   **Stopped**', example='Running'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='lb-bp1o94dp5i6ea****'),
  logConfig?: {
    accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='Indicates whether custom headers are recorded in the access log. Valid values:

*   **true**
*   **false**', example='true'),
    accessLogTracingConfig?: {
      tracingEnabled?: boolean(name='TracingEnabled', description='Indicates whether Xtrace is enabled. Valid values:

*   **true**
*   **false**

> You can set this parameter to **true** only if the AccessLogEnabled parameter is set to true.', example='true'),
      tracingSample?: int32(name='TracingSample', description='The sampling rate of Xtrace. Valid values: 1 to 10000.

> If **TracingEnabled** is set to **true**, this parameter is valid.', example='100'),
      tracingType?: string(name='TracingType', description='The Xtrace type. Supported Xtrace type: **Zipkin**.

> If **TracingEnabled** is set to **true**, this parameter is valid.', example='Zipkin'),
    }(name='AccessLogTracingConfig', description='The configuration of Xtrace. Xtrace is used to record requests sent to ALB.'),
  }(name='LogConfig', description='The logging configuration.'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='The ID of the QUIC listener. This parameter is returned when **QuicUpgradeEnabled** is set to **true**. Only HTTPS listeners support this parameter.

> You must associate the HTTPS listener and the QUIC listener with the same ALB instance. In addition, make sure that the QUIC listener has never been associated with another listener.', example='lsn-333'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='Indicates whether QUIC upgrade is enabled. Valid values:

*   **true**
*   **false**

> Only HTTPS listeners support this parameter.', example='true'),
  }(name='QuicConfig', description='The configuration information when the listener is associated with a QUIC listener.'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of a request. Unit: seconds.

If no responses are received from the backend server within the specified timeout period, ALB returns an `HTTP 504` error code to the client.', example='34'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The security policy.

> This parameter is available only when you create an HTTPS listener.', example='tls_cipher_policy_1_1'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tags', description='The tags.'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertClientVerifyEnabled** is set to **true**.

The name is 1 to 40 characters in length, and can contain lowercase letters, hyphens (-), underscores (\\_), and digits.

> This parameter is available only when you create an HTTPS listener.', example='test_client-verify-alias_123456'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='Indicates whether the `X-Forwarded-Clientcert-clientverify` header is used to retrieve the verification result of the client certificate. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='true'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertFingerprintEnabled** is set to **true**.

The name is 1 to 40 characters in length, and can contain lowercase letters, hyphens (-), underscores (\\_), and digits.

> This parameter is available only when you create an HTTPS listener.', example='test_finger-print-alias_123456'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='Indicates whether the `X-Forwarded-Clientcert-fingerprint` header is used to retrieve the fingerprint of the client certificate. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='true'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertIssuerDNEnabled** is set to **true**.

The name is 1 to 40 characters in length, and can contain lowercase letters, hyphens (-), underscores (\\_), and digits.

> This parameter is available only when you create an HTTPS listener.', example='test_issue-dn-alias_123456'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='Indicates whether the `X-Forwarded-Clientcert-issuerdn` header is used to retrieve information about the authority that issues the client certificate. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='true'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertSubjectDNEnabled** is set to **true**.

The name is 1 to 40 characters in length, and can contain lowercase letters, hyphens (-), underscores (\\_), and digits.

> This parameter is available only when you create an HTTPS listener.', example='test_subject-dn-alias_123456'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='Indicates whether the `X-Forwarded-Clientcert-subjectdn` header is used to retrieve information about the owner of the client certificate. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='true'),
    XForwardedForClientSourceIpsEnabled?: boolean(name='XForwardedForClientSourceIpsEnabled', description='Indicates whether the `X-Forwarded-Client-Ip` header is used to retrieve the source port of the ALB instance. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTP, HTTPS, or QUIC listener.', example='false'),
    XForwardedForClientSourceIpsTrusted?: string(name='XForwardedForClientSourceIpsTrusted', description='The trusted proxy IP address.

ALB traverses `X-Forwarded-For` backward and selects the first IP address that is not on the trusted IP address list as the real IP address of the client. The IP address is used in source IP address throttling.', example='10.1.1.0/24'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='Indicates whether the `X-Forwarded-Client-Port` header is used to retrieve the client port. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTP or HTTPS listener.', example='true'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='Indicates whether the `X-Forwarded-For` header is used to retrieve the client IP address. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTP or HTTPS listener.', example='true'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='Indicates whether the `X-Forwarded-Proto` header is used to retrieve the listening protocol. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTP, HTTPS, or QUIC listener.', example='true'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='Indicates whether the `SLB-ID` header is used to retrieve the ID of the CLB instance. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTP, HTTPS, or QUIC listener.', example='true'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='Indicates whether the `X-Forwarded-Port` header is used to retrieve the listening port of the ALB instance. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTP, HTTPS, or QUIC listener.', example='true'),
  }(name='XForwardedForConfig', description='The configuration of the XForward headers.'),
}

model GetListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetListenerAttributeResponseBody(name='body'),
}

async function getListenerAttributeWithOptions(request: GetListenerAttributeRequest, runtime: Util.RuntimeOptions): GetListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetListenerAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getListenerAttribute(request: GetListenerAttributeRequest): GetListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListenerAttributeWithOptions(request, runtime);
}

model GetListenerHealthStatusRequest {
  includeRule?: boolean(name='IncludeRule', description='Specifies whether to return the health check results of forwarding rules. Valid values:

*   **true**
*   **false** (default)', example='true'),
  listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
  maxResults?: long(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **30**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no next queries are to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
}

model GetListenerHealthStatusResponseBody = {
  listenerHealthStatus?: [ 
    {
      listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
      listenerPort?: int32(name='ListenerPort', description='The listener port.', example='80'),
      listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol.', example='http'),
      serverGroupInfos?: [ 
        {
          actionType?: string(name='ActionType', description='The action specified for the server group.', example='TrafficMirror'),
          healthCheckEnabled?: string(name='HealthCheckEnabled', description='Indicates whether health checks are enabled. If **on** is returned, it indicates that health checks are enabled.', example='on'),
          nonNormalServers?: [ 
            {
              port?: int32(name='Port', description='The backend port.', example='90'),
              reason?: {
                actualResponse?: string(name='ActualResponse', description='The HTTP status code returned from the server, for example, **302**.

> A value is returned only if `ReasonCode` is set to **RESPONSE_MISMATCH**.', example='302'),
                expectedResponse?: string(name='ExpectedResponse', description='The HTTP status code returned after backend servers pass health checks.

Valid values: **HTTP\\_2xx**, **HTTP\\_3xx**, **HTTP\\_4xx**, and **HTTP\\_5xx**. Multiple status codes are separated by commas (,).

> This value is returned only if **ReasonCode** is set to **RESPONSE_MISMATCH**.', example='HTTP_2xx'),
                reasonCode?: string(name='ReasonCode', description='The reason why the value of **Status** is Unhealthy. Only HTTP and HTTPS listeners support this parameter.

*   **CONNECT_TIMEOUT**: ALB failed to connect to the backend server within the specified period of time.
*   **CONNECT_FAILED**: ALB failed to connect to the backend server.
*   **RECV_RESPONSE_FAILED**: ALB failed to receive a response from the backend server.
*   **RECV_RESPONSE_TIMEOUT**: ALB failed to receive a response from the backend server within the specified period of time.
*   **SEND_REQUEST_FAILED**: ALB failed to send a request to the backend server.
*   **SEND_REQUEST_TIMEOUT**: ALB failed to send a request to the backend server within the specified period of time.
*   **RESPONSE_FORMAT_ERROR**: The format of the response from the backend server is invalid.
*   **RESPONSE_FORMAT_ERROR**: The HTTP status code returned from the backend server is not the expected one.', example='RESPONSE_MISMATCH'),
              }(name='Reason', description='The cause of the abnormal state.'),
              serverId?: string(name='ServerId', description='The ID of the backend server.', example='rg-bp1bfa08ex*****'),
              serverIp?: string(name='ServerIp', description='The IP address of the backend server.', example='192.168.8.10'),
              status?: string(name='Status', description='The status of the health check. Valid values: Valid values:

*   **Initial**: indicates that health checks are configured for the NLB instance, but no data was found.
*   **Unhealthy**: indicates that the backend server consecutively fails health checks.
*   **Unused**: indicates that the weight of the backend server is 0.
*   **Unavailable**: indicates that health checks are disabled.', example='Initial'),
            }
          ](name='NonNormalServers', description='A list of unhealthy backend servers.'),
          serverGroupId?: string(name='ServerGroupId', description='The ID of the server group that is associated with the listener.', example='vsp-bp1qjwo61pqz3ahltv****'),
        }
      ](name='ServerGroupInfos', description='The information about the server groups.'),
    }
  ](name='ListenerHealthStatus', description='The health check status of the server groups that are associated with the listener.'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  ruleHealthStatus?: [ 
    {
      ruleId?: string(name='RuleId', description='The ID of the forwarding rule.', example='rule-hp34s2h0xx1ht4nwo****'),
      serverGroupInfos?: [ 
        {
          actionType?: string(name='ActionType', description='The action specified for the server group.', example='TrafficMirror'),
          healthCheckEnabled?: string(name='HealthCheckEnabled', description='Indicates whether health checks are enabled. If **on** is returned, it indicates that health checks are enabled.', example='on'),
          nonNormalServers?: [ 
            {
              port?: int32(name='Port', description='The backend port.', example='90'),
              reason?: {
                actualResponse?: string(name='ActualResponse', description='The HTTP status code returned from the server, for example, **302**.

> A value is returned only if **ReasonCode** is set to **RESPONSE_MISMATCH**.', example='302'),
                expectedResponse?: string(name='ExpectedResponse', description='The HTTP status code returned after backend servers pass health checks.

Valid values: **HTTP\\_2xx**, **HTTP\\_3xx**, **HTTP\\_4xx**, and **HTTP\\_5xx**. Multiple status codes are separated by commas (,).

> A value is returned only if **ReasonCode** is set to **RESPONSE_MISMATCH**.', example='HTTP_2xx'),
                reasonCode?: string(name='ReasonCode', description='The reason why the value of **Status** is Unhealthy. Only HTTP and HTTPS listeners support this parameter.

*   **CONNECT_TIMEOUT**: ALB failed to connect to the backend server within the specified period of time.
*   **CONNECT_FAILED**: ALB failed to connect to the backend server.
*   **RECV_RESPONSE_FAILED**: ALB failed to receive a response from the backend server.
*   **RECV_RESPONSE_TIMEOUT**: ALB failed to receive a response from the backend server within the specified period of time.
*   **SEND_REQUEST_FAILED**: ALB failed to send a request to the backend server.
*   **SEND_REQUEST_TIMEOUT**: ALB failed to send a request to the backend server within the specified period of time.
*   **RESPONSE_FORMAT_ERROR**: The format of the response from the backend server is invalid.
*   **RESPONSE_FORMAT_ERROR**: The HTTP status code returned from the backend server is not the expected one.', example='RESPONSE_MISMATCH'),
              }(name='Reason', description='The cause of the abnormal state.'),
              serverId?: string(name='ServerId', description='The ID of the backend server.', example='rg-bp1bfa08ex****'),
              serverIp?: string(name='ServerIp', description='The IP address of the server group.', example='192.168.2.11'),
              status?: string(name='Status', description='The status of the health check. Valid values: Valid values:

*   **Initial**: indicates that health checks are configured for the NLB instance, but no data was found.
*   **Unhealthy**: indicates that the backend server consecutively fails health checks.
*   **Unused**: indicates that the weight of the backend server is 0.
*   **Unavailable**: indicates that health checks are disabled.', example='Initial'),
            }
          ](name='NonNormalServers', description='A list of unhealthy backend servers.'),
          serverGroupId?: string(name='ServerGroupId', description='The ID of the server group that is associated with the listener.', example='vsp-bp1qjwo61pqz3ahlt****'),
        }
      ](name='ServerGroupInfos', description='The server groups.'),
    }
  ](name='RuleHealthStatus', description='The health check status of the forwarding rules.'),
}

model GetListenerHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetListenerHealthStatusResponseBody(name='body'),
}

async function getListenerHealthStatusWithOptions(request: GetListenerHealthStatusRequest, runtime: Util.RuntimeOptions): GetListenerHealthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeRule)) {
    query['IncludeRule'] = request.includeRule;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetListenerHealthStatus',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getListenerHealthStatus(request: GetListenerHealthStatusRequest): GetListenerHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListenerHealthStatusWithOptions(request, runtime);
}

model GetLoadBalancerAttributeRequest {
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='alb-o9ulmq5hgn68jk****'),
}

model GetLoadBalancerAttributeResponseBody = {
  accessLogConfig?: {
    logProject?: string(name='LogProject', description='The Log Service project.', example='sls-setter'),
    logStore?: string(name='LogStore', description='The Logstore.', example='test'),
  }(name='AccessLogConfig', description='The configuration of the access log feature.'),
  addressAllocatedMode?: string(name='AddressAllocatedMode', description='The mode in which IP addresses are allocated. Valid values:

*   **Fixed**: allocates a static IP address to the ALB instance.
*   **Dynamic**: dynamically allocates an IP address to each zone of the ALB instance.', example='Dynamic'),
  addressIpVersion?: string(name='AddressIpVersion', description='The IP version. Valid values:

*   **IPv4**
*   **DualStack**', example='DualStack'),
  addressType?: string(name='AddressType', description='The network type of the ALB instance. Valid values:

*   **Internet**: The ALB instance uses a public IP address. The domain name of the ALB instance is resolved to the public IP address. Therefore, the ALB instance can be accessed over the Internet.
*   **Intranet**: The ALB instance uses a private IP address. The domain name of the ALB instance is resolved to the private IP address. In this case, the ALB instance can be accessed over the virtual private cloud (VPC) where the ALB instance is deployed.', example='Intranet'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the elastic IP address (EIP) bandwidth plan that is associated with the Internet-facing ALB instance.', example='cbwp-bp1vevu8h3ieh****'),
  createTime?: string(name='CreateTime', description='The time when the resource was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2022-07-02T02:49:05Z'),
  DNSName?: string(name='DNSName', description='The domain name of the ALB instance.', example='alb-95qnr2itwu9orb****.cn-hangzhou.alb.aliyuncs.com'),
  deletionProtectionConfig?: {
    enabled?: boolean(name='Enabled', description='Indicates whether the deletion protection feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
    enabledTime?: string(name='EnabledTime', description='The time when the deletion protection feature was enabled. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2022-08-02T02:49:05Z'),
  }(name='DeletionProtectionConfig', description='The configuration of deletion protection.'),
  ipv6AddressType?: string(name='Ipv6AddressType', description='The type of IPv6 address that is used by the ALB instance. Valid values:

*   **Internet**: The ALB instance uses a public IP address. The domain name of the ALB instance is resolved to the public IP address. Therefore, the ALB instance can be accessed over the Internet.
*   **Intranet**: The ALB instance uses a private IP address. The domain name of the ALB instance is resolved to the private IP address. Therefore, the ALB instance can be accessed over the VPC in which the ALB instance is deployed.', example='Intranet'),
  loadBalancerBillingConfig?: {
    payType?: string(name='PayType', description='The billing method.

Only **PostPay** may be returned. The value indicates the pay-as-you-go billing method.', example='PostPay'),
  }(name='LoadBalancerBillingConfig', description='The configuration of the billing method of the ALB instance.'),
  loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='The service status of the ALB instance. Valid values:

*   **Abnormal**
*   **Normal**', example='Normal'),
  loadBalancerEdition?: string(name='LoadBalancerEdition', description='The edition of the ALB instance. The features and billing rules vary based on the edition of the ALB instance. Valid values:

*   **Basic**
*   **Standard**
*   **StandardWithWaf**', example='Standard'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='alb-o9ulmq5hgn68jk****'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the ALB instance.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='alb1'),
  loadBalancerOperationLocks?: [ 
    {
      lockReason?: string(name='LockReason', description='The configuration of the configuration read-only mode.'),
      lockType?: string(name='LockType', description='The reason why the configuration read-only mode was enabled. The reason must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The reason must start with a letter.

This parameter is valid only if you set the **ModificationProtectionStatus** parameter to **ConsoleProtection**.', example='FinancialLocked'),
    }
  ](name='LoadBalancerOperationLocks', description='The type of the lock. Valid values:

*   **SecurityLocked**: The ALB instance is locked due to security reasons.
*   **RelatedResourceLocked**: The ALB instance is locked due to association issues.
*   **FinancialLocked**: The ALB instance is locked due to overdue payments.
*   **ResidualLocked**: The ALB instance is locked because the associated resources have overdue payments and the resources are released.'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the ALB instance. Valid values:

*   **Inactive**: The ALB instance is disabled. ALB instances in the Inactive state do not forward traffic.
*   **Active**: The ALB instance is running.
*   **Provisioning**: The ALB instance is being created.
*   **Configuring**: The ALB instance is being modified.
*   **CreateFailed**: The system failed to create the ALB instance. In this case, you are not charged for the ALB instance. You can only delete the ALB instance.', example='Active'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='The reason for enabling the configuration read-only mode. The reason must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The reason must start with a letter.

This parameter is valid only if **ModificationProtectionStatus** is set to **ConsoleProtection**.'),
    status?: string(name='Status', description='The status of the configuration read-only mode. Valid values:

*   **NonProtection**: The configuration read-only mode is disabled. In this case, you cannot specify ModificationProtectionReason. If you specify ModificationProtectionReason, the value of the parameter is cleared.
*   **ConsoleProtection**: The configuration read-only mode is enabled. In this case, you can specify ModificationProtectionReason.

> If you set this parameter to **ConsoleProtection**, you cannot use the ALB console to modify instance configurations. However, you can call API operations to modify instance configurations.', example='ConsoleProtection'),
  }(name='ModificationProtectionConfig', description='The configuration of the configuration read-only mode.'),
  regionId?: string(name='RegionId', description='The region ID of the ALB instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-atstuj3rtop****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The zones and the vSwitches. You must specify at least two zones.', example='FinanceDept'),
      value?: string(name='Value', description='The IP addresses that are used by the ALB instance.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag value.

The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. The tag value cannot contain `http://` or `https://`.'),
  vpcId?: string(name='VpcId', description='The ID of the VPC in which the ALB instance is deployed.', example='vpc-bp1b49rqrybk45nio****'),
  zoneMappings?: [ 
    {
      loadBalancerAddresses?: [ 
        {
          address?: string(name='Address', description='The ID of the zone where the ALB instance was deployed.

You can call the [DescribeZones](~~189196~~) operation to query the zones of the ALB instance.', example='192.168.10.1'),
          allocationId?: string(name='AllocationId', example='eip-uf6wm****1zj9'),
          eipType?: string(name='EipType', example='Common'),
          intranetAddress?: string(name='IntranetAddress'),
          ipv6Address?: string(name='Ipv6Address', description='The protocol version. Valid values:

*   **IPv4:** IPv4.
*   **DualStack:** dual stack.', example='2408:XXXX:39d:eb00::/56'),
        }
      ](name='LoadBalancerAddresses', description='The ID of the vSwitch in the zone. Each zone can contain only one vSwitch and one subnet.'),
      vSwitchId?: string(name='VSwitchId', description='The type of IPv6 address that is used by the ALB instance. Valid values:

*   **Internet:** The ALB instance uses a public IP address. The domain name of the ALB instance is resolved to the public IP address. Therefore, the ALB instance can be accessed over the Internet.
*   **Intranet:** The ALB instance uses a private IP address. The domain name of the ALB instance is resolved to the private IP address. Therefore, the ALB instance can be accessed over the VPC in which the ALB instance is deployed.', example='vsw-bp12mw1f8k3jgy****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The zone ID of the ALB instance.

You can call the [DescribeZones](~~189196~~) operation to query the zones of the ALB instance.'),
}

model GetLoadBalancerAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLoadBalancerAttributeResponseBody(name='body'),
}

async function getLoadBalancerAttributeWithOptions(request: GetLoadBalancerAttributeRequest, runtime: Util.RuntimeOptions): GetLoadBalancerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLoadBalancerAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLoadBalancerAttribute(request: GetLoadBalancerAttributeRequest): GetLoadBalancerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoadBalancerAttributeWithOptions(request, runtime);
}

model ListAScriptsRequest {
  AScriptIds?: [ string ](name='AScriptIds', description='The AScript rule IDs.'),
  AScriptNames?: [ string ](name='AScriptNames', description='The names of the AScript rules.'),
  listenerIds?: [ string ](name='ListenerIds', description='The listener IDs.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return.

Valid values: **1** to **100**.

Default value: **20**. If you do not specify this parameter, the default value is used.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.****
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
}

model ListAScriptsResponseBody = {
  AScripts?: [ 
    {
      AScriptId?: string(name='AScriptId', description='The AScript rule ID.', example='as-aznwocxofkakf7****'),
      AScriptName?: string(name='AScriptName', description='The name of the AScript rule.', example='test'),
      AScriptStatus?: string(name='AScriptStatus', description='The status of the AScript rule. Valid values:

*   **Creating**
*   **Available**
*   **Configuring**
*   **Deleting**', example='Available'),
      enabled?: boolean(name='Enabled', description='Indicates whether the AScript rule is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      listenerId?: string(name='ListenerId', description='The listener ID.', example='lsn-t0w1m9r6suiwmc****'),
      loadBalancerId?: string(name='LoadBalancerId', description='The Application Load Balancer (ALB) instance ID.', example='alb-vv9rg2ub31tyec****'),
      scriptContent?: string(name='ScriptContent', description='The content of the AScript rule.', example='{test}'),
    }
  ](name='AScripts', description='The AScript rules.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='2CA81429-F160-593A-8AB5-A2A9617845B9'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.

> This parameter is optional. By default, this parameter is not returned.', example='1000'),
}

model ListAScriptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAScriptsResponseBody(name='body'),
}

async function listAScriptsWithOptions(request: ListAScriptsRequest, runtime: Util.RuntimeOptions): ListAScriptsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.AScriptIds)) {
    query['AScriptIds'] = request.AScriptIds;
  }
  if (!Util.isUnset(request.AScriptNames)) {
    query['AScriptNames'] = request.AScriptNames;
  }
  if (!Util.isUnset(request.listenerIds)) {
    query['ListenerIds'] = request.listenerIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAScripts',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAScripts(request: ListAScriptsRequest): ListAScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAScriptsWithOptions(request, runtime);
}

model ListAclEntriesRequest {
  aclId?: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
}

model ListAclEntriesResponseBody = {
  aclEntries?: [ 
    {
      description?: string(name='Description', description='The description of the ACL entry. The description must be 1 to 256 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), and underscores (\\_).', example='test-entry'),
      entry?: string(name='Entry', description='The CIDR block of the ACL entry.', example='10.0.1.1/24'),
      status?: string(name='Status', description='The status of the ACL entry. Valid values:

*   **Adding**
*   **Available**
*   **Removing**', example='Available'),
    }
  ](name='AclEntries', description='The ACL entries.'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListAclEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAclEntriesResponseBody(name='body'),
}

async function listAclEntriesWithOptions(request: ListAclEntriesRequest, runtime: Util.RuntimeOptions): ListAclEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAclEntries',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAclEntries(request: ListAclEntriesRequest): ListAclEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAclEntriesWithOptions(request, runtime);
}

model ListAclRelationsRequest {
  aclIds?: [ string ](name='AclIds', description='The ACL IDs.'),
}

model ListAclRelationsResponseBody = {
  aclRelations?: [ 
    {
      aclId?: string(name='AclId', description='ACL ID', example='nacl-hp34s2h0xx1ht4nwo****'),
      relatedListeners?: [ 
        {
          listenerId?: string(name='ListenerId', description='The listener ID.', example='lsr-bp1bpn0kn908w4nbw****'),
          listenerPort?: int32(name='ListenerPort', description='The listener port.', example='80'),
          listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol.', example='HTTPS'),
          loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Server Load Balancer (SLB) instance.', example='lb-bp1b6c719dfa08ex****'),
          status?: string(name='Status', description='The association status between the ACL and the listener. Valid values:

*   **Associating**
*   **Associated**
*   **Dissociating**', example='Associated'),
        }
      ](name='RelatedListeners', description='The listeners that are associated with the ACL.'),
    }
  ](name='AclRelations', description='The ACLs and the associated listeners.'),
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model ListAclRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAclRelationsResponseBody(name='body'),
}

async function listAclRelationsWithOptions(request: ListAclRelationsRequest, runtime: Util.RuntimeOptions): ListAclRelationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclIds)) {
    query['AclIds'] = request.aclIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAclRelations',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAclRelations(request: ListAclRelationsRequest): ListAclRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAclRelationsWithOptions(request, runtime);
}

model ListAclsRequest {
  aclIds?: [ string ](name='AclIds', description='The ID of the network ACL. You can specify at most 20 network ACL IDs in each request.'),
  aclNames?: [ string ](name='AclNames', description='The names of the network ACLs. You can specify at most 10 network ACL names in each request.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. This parameter is optional. Valid values: **1** to **100**. Default value: **20**.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can filter the query results based on the specified ID.', example='rg-atstuj3rtopty****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.'),
}

model ListAclsResponseBody = {
  acls?: [ 
    {
      aclId?: string(name='AclId', description='The ID of the network ACL.', example='nacl-hp34s2h0xx1ht4nwo****'),
      aclName?: string(name='AclName', description='The name of the network ACL.', example='test-acl'),
      aclStatus?: string(name='AclStatus', description='The status of the network ACL. Valid values:

*   **Creating**: The network ACL is being created.
*   **Available**: The network ACL is available.
*   **Configuring**: The network ACL is being configured.', example='Available'),
      addressIPVersion?: string(name='AddressIPVersion', description='The IP version. **IPv4** is returned.', example='IPv4'),
      configManagedEnabled?: boolean(name='ConfigManagedEnabled', description='The status of configuration management. Valid values:

*   **true**: configuration management is enabled.
*   **false**: configuration management is disabled.', example='false'),
      createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2023-02-15T07:37:33Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-atstuj3rtopty****'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='env'),
          value?: string(name='Value', description='The tag value.', example='product'),
        }
      ](name='Tags', description='The tags.'),
    }
  ](name='Acls', description='The network ACLs.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of network ACLs returned. This parameter is optional. Valid values: **1** to **100**. If this parameter is not set, the default value **20** is returned.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, it indicates that no next query is to be sent.
*   If **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70t****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListAclsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAclsResponseBody(name='body'),
}

async function listAclsWithOptions(request: ListAclsRequest, runtime: Util.RuntimeOptions): ListAclsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclIds)) {
    query['AclIds'] = request.aclIds;
  }
  if (!Util.isUnset(request.aclNames)) {
    query['AclNames'] = request.aclNames;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAcls',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAcls(request: ListAclsRequest): ListAclsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAclsWithOptions(request, runtime);
}

model ListAsynJobsRequest {
  apiName?: string(name='ApiName', description='The name of the operation.', example='CreateLoadBalancer'),
  beginTime?: long(name='BeginTime', description='The start time of the task. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.', example='2021-06-03T17:22Z'),
  endTime?: long(name='EndTime', description='The end time of the task. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.', example='2021-06-04T17:22Z'),
  jobIds?: [ string ](name='JobIds', description='The asynchronous task IDs.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  resourceIds?: [ string ](name='ResourceIds', description='The resource IDs.'),
  resourceType?: string(name='ResourceType', description='The type of the associated resource. Valid values:

*   **loadbalancer**: an Application Load Balancer (ALB) instance
*   **listener**: a listener
*   **rule**: a forwarding rule
*   **acl**: an access control list (ACL)
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='acl'),
}

model ListAsynJobsResponseBody = {
  jobs?: [ 
    {
      apiName?: string(name='ApiName', description='The name of the operation.', example='CreateLoadBalancer'),
      createTime?: long(name='CreateTime', description='The timestamp that indicates the start time of the task. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='2134663231234'),
      errorCode?: string(name='ErrorCode', description='If the value of **Status** is Failed, an error code is returned.', example='506'),
      errorMessage?: string(name='ErrorMessage', description='If the value of **Status** is Failed, an error message is returned.', example='AllocateEipAddress Failed'),
      id?: string(name='Id', description='The task ID.', example='365F4154-92F6-4AE4-92F8-7FF34B5****'),
      modifyTime?: long(name='ModifyTime', description='The timestamp that indicates the end time of the task. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='2144663233315'),
      operateType?: string(name='OperateType', description='The type of the operation. Valid values:

*   **Create**
*   **Update**
*   **Delete**', example='Create'),
      resourceId?: string(name='ResourceId', description='The associated resource ID.', example='alb-o8mszt95oamfjy****'),
      resourceType?: string(name='ResourceType', description='The type of the associated resource. Valid values:

*   **loadbalancer**: an ALB instance
*   **listener**: a listener
*   **rule**: a forwarding rule
*   **acl**: an ACL
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='acl'),
      status?: string(name='Status', description='The status of the task. Valid values:

*   **Succeeded**
*   **Failed**
*   **Processing**', example='Succeeded'),
    }
  ](name='Jobs', description='The tasks.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListAsynJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAsynJobsResponseBody(name='body'),
}

async function listAsynJobsWithOptions(request: ListAsynJobsRequest, runtime: Util.RuntimeOptions): ListAsynJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jobIds)) {
    query['JobIds'] = request.jobIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceIds)) {
    query['ResourceIds'] = request.resourceIds;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAsynJobs',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAsynJobs(request: ListAsynJobsRequest): ListAsynJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAsynJobsWithOptions(request, runtime);
}

model ListHealthCheckTemplatesRequest {
  healthCheckTemplateIds?: [ string ](name='HealthCheckTemplateIds', description='The IDs of health check templates.'),
  healthCheckTemplateNames?: [ string ](name='HealthCheckTemplateNames', description='The health check templates.'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.'),
}

model ListHealthCheckTemplatesResponseBody = {
  healthCheckTemplates?: [ 
    {
      healthCheckCodes?: [ string ](name='HealthCheckCodes', description='The HTTP status codes.'),
      healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks.

Valid values: \\*\\* 0 to 65535\\*\\*.

Default value: **0**. This value indicates that the port on a backend server is used for health checks.', example='80'),
      healthCheckHost?: string(name='HealthCheckHost', description='The domain name that is used for health checks. Valid values:

**$SERVER_IP** (default): the private IP addresses of backend servers. If HealthCheckHost is not specified or set to $SERVER_IP, SLB uses the private IP addresses of backend servers for health checks.

**domain**: The domain name must be 1 to 80 characters in length and can contain letters, digits, periods (.), and hyphens (-).

>  This parameter takes effect only if `HealthCheckProtocol` is set to **HTTP**.', example='$_ip'),
      healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='The HTTP version that is used for health checks.

Valid values: **HTTP 1.0** and **HTTP 1.1**.

Default value: **HTTP 1.1**.

>  This parameter takes effect only if `HealthCheckProtocol` is set to **HTTP**.', example='HTTP 1.0'),
      healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Unit: seconds. Valid values: **1 to 50**. Default value: **2**.', example='5'),
      healthCheckMethod?: string(name='HealthCheckMethod', description='The HTTP method that is used for health checks. Valid values:

*   **HEAD** (default): By default, HTTP health checks use the HEAD method.
*   **GET**: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
*   **POST**: By default, gRPC health checks use the POST method.

>  This parameter takes effect only if **HealthCheckProtocol** is set to **HTTP** or **gRPC**.', example='HEAD'),
      healthCheckPath?: string(name='HealthCheckPath', description='The URL that is used for health checks.

The URL must be 1 to 80 characters in length and can contain only letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : \\" , +`. The URL must start with a forward slash (/).', example='/test/index.html'),
      healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol that is used for health checks. Valid values:

*   **HTTP** (default): The SLB instance sends HEAD or GET requests to a backend server to simulate access from a browser and check whether the backend server is healthy.
*   **TCP**: To perform TCP health checks, SLB sends SYN packets to the backend server to check whether the port of the backend server is available to receive requests.
*   **gRPC**: To perform gRPC health checks, SLB sends POST or GET requests to a backend server to check whether the backend server is healthy.', example='HTTP'),
      healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='The ID of the health check template.', example='hct-bp1qjwo61pqz3ahltv****'),
      healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='The name of the health check template.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='HealthCheckTemplate1'),
      healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period for a health check response. If a backend Elastic Compute Service (ECS) instance does not return a health check response within the specified timeout period, the backend server fails the health check.

Valid values: **1 to 300**. Unit: seconds.

Default value: **5**.

>  If the value of **HealthCHeckTimeout** is smaller than the value of **HealthCheckInterval**, the value of **HealthCHeckTimeout** is ignored and the value of **HealthCheckInterval** is used.', example='3'),
      healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from **fail** to **success**.

Valid values: **2 to 10**.

Default value: **3**.', example='4'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='env'),
          value?: string(name='Value', description='The tag value.', example='product'),
        }
      ](name='Tags', description='The tags.'),
      unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from **success** to **fail**.

Valid values: **2 to 10**.

Default value: **3**.', example='4'),
    }
  ](name='HealthCheckTemplates', description='The health check templates.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page. Valid values: **1** to **100**. Default value: **20**.', example='50'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value of **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListHealthCheckTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHealthCheckTemplatesResponseBody(name='body'),
}

async function listHealthCheckTemplatesWithOptions(request: ListHealthCheckTemplatesRequest, runtime: Util.RuntimeOptions): ListHealthCheckTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.healthCheckTemplateIds)) {
    query['HealthCheckTemplateIds'] = request.healthCheckTemplateIds;
  }
  if (!Util.isUnset(request.healthCheckTemplateNames)) {
    query['HealthCheckTemplateNames'] = request.healthCheckTemplateNames;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHealthCheckTemplates',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHealthCheckTemplates(request: ListHealthCheckTemplatesRequest): ListHealthCheckTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHealthCheckTemplatesWithOptions(request, runtime);
}

model ListListenerCertificatesRequest {
  certificateType?: string(name='CertificateType', description='The type of the certificate. Valid values: **Ca** and **Server**.', example='Server'),
  listenerId?: string(name='ListenerId', description='The listener ID. You must specify the ID of an HTTPS listener or a QUIC listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Valid values: **1 to 100**. If you do not specify this parameter, the default value **20** is used.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
}

model ListListenerCertificatesResponseBody = {
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The certificate ID. Only server certificates are supported.', example='12315790343_166f8204689_1714763408_70998****'),
      certificateType?: string(name='CertificateType', description='The type of the certificate.', example='Server'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the certificate is the default certificate of the listener. Valid values:

*   **true**
*   **false**', example='true'),
      status?: string(name='Status', description='Indicates whether the certificate is associated with the listener. Valid values:

*   **Associating**
*   **Associated**
*   **Diassociating**', example='Associating'),
    }
  ](name='Certificates', description='The certificates.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListListenerCertificatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListListenerCertificatesResponseBody(name='body'),
}

async function listListenerCertificatesWithOptions(request: ListListenerCertificatesRequest, runtime: Util.RuntimeOptions): ListListenerCertificatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateType)) {
    query['CertificateType'] = request.certificateType;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListListenerCertificates',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listListenerCertificates(request: ListListenerCertificatesRequest): ListListenerCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenerCertificatesWithOptions(request, runtime);
}

model ListListenersRequest {
  listenerIds?: [ string ](name='ListenerIds', description='The listener IDs. You can specify up to 20 IDs.'),
  listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol. Valid values:

*   **HTTP**
*   **HTTPS**
*   **QUIC**', example='HTTP'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='The ID of the Application Load Balancer (ALB) instance. You can specify at most 20 IDs.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. This parameter is optional. Valid values: **1 to 100**. If you do not specify this parameter, the default value **20** is used.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.'),
}

model ListListenersResponseBody = {
  listeners?: [ 
    {
      defaultActions?: [ 
        {
          forwardGroupConfig?: {
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='The ID of the server group to which requests are forwarded.', example='rsp-cige6j****'),
              }
            ](name='ServerGroupTuples', description='The server groups to which requests are forwarded.'),
          }(name='ForwardGroupConfig', description='The configuration of the forwarding rule action. This parameter is required and takes effect only if the type of the action is **ForwardGroup**.'),
          type?: string(name='Type', description='The type of the action. If **ForwardGroup** is returned, requests are forwarded to multiple vServer groups.', example='ForwardGroup'),
        }
      ](name='DefaultActions', description='The default actions in the forwarding rules.'),
      gzipEnabled?: boolean(name='GzipEnabled', description='Indicates whether GZIP compression is enabled to compress specific types of files. Valid values:

*   **true**
*   **false**', example='false'),
      http2Enabled?: boolean(name='Http2Enabled', description='Indicates whether HTTP/2 is enabled. Valid values:

*   **true**
*   **false**

>  This parameter is returned only for HTTPS listeners.', example='false'),
      idleTimeout?: int32(name='IdleTimeout', description='The timeout period of an idle connection. Unit: seconds. Valid values: **1 to 60**.

If no request is received within the specified timeout period, ALB closes the connection. ALB re-establishes the connection when a new connection request is received.', example='3'),
      listenerDescription?: string(name='ListenerDescription', description='The name of the listener.', example='test'),
      listenerId?: string(name='ListenerId', description='The ID of the listener.', example='lsr-bp1bpn0kn908w4nbw****'),
      listenerPort?: int32(name='ListenerPort', description='The frontend port that is used by the ALB instance. Valid values: **1 to 65535**.', example='80'),
      listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol. Valid values:

*   **HTTP**
*   **HTTPS**
*   **QUIC**', example='HTTP'),
      listenerStatus?: string(name='ListenerStatus', description='The status of the listener. Valid values:

*   **Provisioning**
*   **Running**
*   **Configuring**
*   **Stopped**', example='Running'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance.', example='lb-bp1b6c719dfa08ex*****'),
      logConfig?: {
        accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='Indicates whether custom headers are carried in the access log. Valid values:

*   **true**
*   **false**', example='true'),
        accessLogTracingConfig?: {
          tracingEnabled?: boolean(name='TracingEnabled', description='Indicates whether Xtrace is enabled. Valid values:

*   **true**
*   **false**

>  This parameter can be set to **true** only if **AccessLogEnabled** is set to true.', example='true'),
          tracingSample?: int32(name='TracingSample', description='The sampling rate of Xtrace. Valid values: **1 to 10000**.

>  This parameter takes effect only if **TracingEnabled** is set to **true**.', example='100'),
          tracingType?: string(name='TracingType', description='The Xtrace type. Only **Zipkin** may be returned.

>  This parameter takes effect only if **TracingEnabled** is set to **true**.', example='Zipkin'),
        }(name='AccessLogTracingConfig', description='The configuration of Xtrace. Xtrace is used to record the requests that are sent to ALB.'),
      }(name='LogConfig', description='The configuration of logs.'),
      quicConfig?: {
        quicListenerId?: string(name='QuicListenerId', description='The ID of the QUIC listener. This parameter is required when **QuicUpgradeEnabled** is set to **true**. Only HTTPS listeners support this parameter.

>  The HTTPS listener and the associated QUIC listener must belong to the same ALB instance. The QUIC listener cannot be associated with another listener.', example='lsr-bp1bpn908w4nbw****'),
        quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='Indicates whether QUIC upgrade is enabled. Valid values:

*   **true**
*   **false**

>  This parameter takes effect only for HTTPS listeners.', example='true'),
      }(name='QuicConfig', description='The configuration information when the listener is associated with a QUIC listener.'),
      requestTimeout?: int32(name='RequestTimeout', description='The timeout period of a request. Unit: seconds. Valid values: **1 to 180**.

If no responses are received from the backend server within the specified timeout period, ALB returns an `HTTP 504` error code to the client.', example='34'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The security policy.

>  This parameter is returned only for HTTPS listeners.', example='tls_cipher_policy_1_1'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='env'),
          value?: string(name='Value', description='The tag value.', example='product'),
        }
      ](name='Tags', description='The tags.'),
      XForwardedForConfig?: {
        XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='The name of the custom header. This parameter takes effect only if **XForwardedForClientCertClientVerifyEnabled** is set to **true**.

The name is 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_).

>  This parameter is returned only for HTTPS listeners.', example='test_client-verify-alias_123456'),
        XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='Indicates whether the `X-Forwarded-Clientcert-clientverify` header is used to obtain the verification result of the client certificate. Valid values:

*   **true**
*   **false**

>  This parameter is returned only for HTTPS listeners.', example='true'),
        XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='The name of the custom header. This parameter takes effect only if **XForwardedForClientCertFingerprintEnabled** is set to **true**.

The name is 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_).

>  This parameter is returned only for HTTPS listeners.', example='test_finger-print-alias_123456'),
        XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='Indicates whether the `X-Forwarded-Clientcert-fingerprint` header is used to retrieve the fingerprint of the client certificate. Valid values:

*   **true**
*   **false**

>  This parameter is returned only for HTTPS listeners.', example='true'),
        XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='The name of the custom header. This parameter takes effect only if **XForwardedForClientCertIssuerDNEnabled** is set to **true**.

The name is 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_).

>  This parameter is returned only for HTTPS listeners.', example='test_issue-dn-alias_123456'),
        XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='Indicates whether the `X-Forwarded-Clientcert-issuerdn` header is used to retrieve information about the authority that issues the client certificate. Valid values:

*   **true**
*   **false**

>  This parameter is returned only for HTTPS listeners.', example='true'),
        XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='The name of the custom header. This parameter takes effect only if **XForwardedForClientCertSubjectDNEnabled** is set to **true**.

The name is 1 to 40 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_).

>  This parameter is returned only for HTTPS listeners.', example='test_subject-dn-alias_123456'),
        XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='Indicates whether the `X-Forwarded-Clientcert-subjectdn` header is used to retrieve information about the owner of the client certificate. Valid values:

*   **true**
*   **false**

>  This parameter is returned only for HTTPS listeners.', example='true'),
        XForwardedForClientSourceIpsEnabled?: boolean(name='XForwardedForClientSourceIpsEnabled', description='Indicates whether the `X-Forwarded-Client-Ip` header is used to retrieve the source port of the ALB instance. Valid values:

*   **true**
*   **false**

>  HTTP, HTTPS, and QUIC listeners support this parameter.', example='false'),
        XForwardedForClientSourceIpsTrusted?: string(name='XForwardedForClientSourceIpsTrusted', description='The trusted proxy IP address.

ALB traverses `X-Forwarded-For` backward and selects the first IP address that is not in the trusted IP address list as the real IP address of the client. The IP address is used in source IP address throttling.', example='10.1.1.0/24'),
        XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='Indicates whether the `X-Forwarded-Client-Port` header is used to retrieve the client port. Valid values:

*   **true**
*   **false**

>  This parameter is returned only for HTTP and HTTPS listeners.', example='true'),
        XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='Indicates whether the `X-Forwarded-For` header is used to retrieve the client IP address. Valid values:

*   **true**
*   **false**

>  This parameter is returned only for HTTP and HTTPS listeners.', example='true'),
        XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='Indicates whether the `X-Forwarded-Proto` header is used to retrieve the listener protocol. Valid values:

*   **true**
*   **false**

>  HTTP, HTTPS, and QUIC listeners support this parameter.', example='true'),
        XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='Indicates whether the `SLB-ID` header is used to retrieve the ID of the ALB instance. Valid values:

*   **true**
*   **false**

>  HTTP, HTTPS, and QUIC listeners support this parameter.', example='true'),
        XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='Indicates whether the `X-Forwarded-Port` header is used to retrieve the listener port of the ALB instance. Valid values:

*   **true**
*   **false**

>  HTTP, HTTPS, and QUIC listeners support this parameter.', example='true'),
      }(name='XForwardedForConfig', description='The configuration of the `XForward` headers.'),
    }
  ](name='Listeners', description='The listeners.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='50'),
  nextToken?: string(name='NextToken', description='The position where the query stopped. If this parameter is not returned, all data is queried.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListListenersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListListenersResponseBody(name='body'),
}

async function listListenersWithOptions(request: ListListenersRequest, runtime: Util.RuntimeOptions): ListListenersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerIds)) {
    query['ListenerIds'] = request.listenerIds;
  }
  if (!Util.isUnset(request.listenerProtocol)) {
    query['ListenerProtocol'] = request.listenerProtocol;
  }
  if (!Util.isUnset(request.loadBalancerIds)) {
    query['LoadBalancerIds'] = request.loadBalancerIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListListeners',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listListeners(request: ListListenersRequest): ListListenersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenersWithOptions(request, runtime);
}

model ListLoadBalancersRequest {
  addressIpVersion?: string(name='AddressIpVersion'),
  addressType?: string(name='AddressType', description='The network type. Valid values:

*   **Internet**: The ALB instance uses a public IP address. The domain name of the ALB instance is resolved to the public IP address. Therefore, the ALB instance can be accessed over the Internet.
*   **Intranet**: The ALB instance uses a private IP address. The domain name of the ALB instance is resolved to the private IP address. In this case, the ALB instance can be accessed over the VPC where the ALB instance is deployed.', example='Intranet'),
  DNSName?: string(name='DNSName'),
  ipv6AddressType?: string(name='Ipv6AddressType'),
  loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='The service status of the ALB instance. Valid values:

*   **Abnormal**
*   **Normal**', example='Normal'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='The instance IDs. You can specify at most 20 ALB instance IDs.'),
  loadBalancerNames?: [ string ](name='LoadBalancerNames', description='The names of the instances. You can specify at most 10 names.'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the ALB instance. Valid values:

*   **Inactive**: The ALB instance is disabled. The listeners do not forward traffic.
*   **Active**: The ALB instance is running.
*   **Provisioning**: The ALB instance is being created.
*   **Configuring**: The ALB instance is being modified.
*   **CreateFailed**: The system failed to create the ALB instance. In this case, you are not charged for the ALB instance. You can only delete the ALB instance. By default, the system deletes the ALB instances that are in the CreateFailed state within the last day.', example='Active'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  payType?: string(name='PayType', description='The billing method of the ALB instance. Set the value to

**PostPay**, which specifies the pay-as-you-go billing method. This is the default value.', example='PostPay'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazb4ph****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='KeyTest'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='alueTest'),
    }
  ](name='Tag', description='The tags added to the ALB instance.'),
  vpcIds?: [ string ](name='VpcIds', description='The ID of the virtual private cloud (VPC) to which the ALB instance belongs. You can specify at most 10 IDs.'),
  zoneId?: string(name='ZoneId', description='The ID of the zone where the ALB instance is deployed.

You can call the [DescribeZones](~~189196~~) operation to query zones.', example='cn-hangzhou-a'),
}

model ListLoadBalancersResponseBody = {
  loadBalancers?: [ 
    {
      accessLogConfig?: {
        logProject?: string(name='LogProject', description='The log project.', example='sls-setter'),
        logStore?: string(name='LogStore', description='The Logstore.', example='test'),
      }(name='AccessLogConfig', description='The configuration of the access log.'),
      addressAllocatedMode?: string(name='AddressAllocatedMode', description='The mode in which IP addresses are allocated. Valid values:

*   **Fixed**: allocates a static IP address to the ALB instance.
*   **Dynamic**: dynamically allocates an IP address to each zone of the ALB instance.', example='Fixed'),
      addressIpVersion?: string(name='AddressIpVersion', description='The IP version. Valid values:

*   **IPv4**
*   **DualStack**', example='DualStack'),
      addressType?: string(name='AddressType', description='The type of IP address that the ALB instance uses to provide services. Valid values:

*   **Internet**: The ALB instance uses a public IP address. The domain name of the ALB instance is resolved to the public IP address. Therefore, the ALB instance can be accessed over the Internet.
*   **Intranet**: The ALB instance uses a private IP address. The domain name of the ALB instance is resolved to the private IP address. In this case, the ALB instance can be accessed over the VPC where the ALB instance is deployed.', example='Intranet'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the EIP bandwidth plan that is associated with the NLB instance if the NLB instance uses a public IP address.', example='cbwp-bp1vevu8h3ieh****'),
      createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2022-07-02T02:49:05Z'),
      DNSName?: string(name='DNSName', description='The domain name of the ALB instance.', example='alb-95qnr2itwu9orb****.cn-hangzhou.alb.aliyuncs.com'),
      deletionProtectionConfig?: {
        enabled?: boolean(name='Enabled', description='Indicates whether deletion protection is enabled. Valid values:

*   **true**
*   **false**', example='true'),
        enabledTime?: string(name='EnabledTime', description='The time when deletion protection is enabled.', example='2022-08-02T02:49:05Z'),
      }(name='DeletionProtectionConfig', description='The configuration of deletion protection.'),
      ipv6AddressType?: string(name='Ipv6AddressType', description='The type of IPv6 address that is used by the ALB instance. Valid values:

*   **Internet**: The ALB instance uses a public IP address. The domain name of the ALB instance is resolved to the public IP address. Therefore, the ALB instance can be accessed over the Internet.
*   **Intranet**: The ALB instance uses a private IP address. The domain name of the ALB instance is resolved to the private IP address. Therefore, the ALB instance can be accessed over the VPC in which the ALB instance is deployed.', example='Intranet'),
      loadBalancerBillingConfig?: {
        payType?: string(name='PayType', description='The billing method. Valid values:

Only **PostPay** may be returned, which indicates the pay-as-you-go billing method.', example='PostPay'),
      }(name='LoadBalancerBillingConfig', description='The configuration of the billing method.'),
      loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='The business status of the ALB instance. Valid values:

*   **Abnormal**
*   **Normal**', example='Normal'),
      loadBalancerEdition?: string(name='LoadBalancerEdition', description='The edition of the ALB instance. Different editions have different limits and support different billing methods. Valid values:

*   **Basic**: basic
*   **Standard**: standard
*   **StandardWithWaf**: WAF-enabled', example='Standard'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance.', example='alb-o9ulmq5hgn68jk****'),
      loadBalancerName?: string(name='LoadBalancerName', description='The name of the NLB instance.', example='alb-instance-test'),
      loadBalancerOperationLocks?: [ 
        {
          lockReason?: string(name='LockReason', description='The reason why the ALB instance is locked. This parameter is available only when **LoadBalancerBussinessStatus** is set to **Abnormal**.'),
          lockType?: string(name='LockType', description='The lock type. Valid values:

*   **SecurityLocked**: The ALB instance is locked due to security reasons.
*   **RelatedResourceLocked**: The ALB instance is locked due to association issues.
*   **FinancialLocked**: The ALB instance is locked due to overdue payments.
*   **ResidualLocked**: The ALB instance is locked because the associated resources have overdue payments and the resources are released.', example='FinancialLocked'),
        }
      ](name='LoadBalancerOperationLocks', description='The configuration of the operation lock.'),
      loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the ALB instance. Valid values:

*   **Inactive**: The ALB instance is disabled. The listeners do not forward traffic.
*   **Active**: The ALB instance is running.
*   **Provisioning**: The ALB instance is being created.
*   **Configuring**: The ALB instance is being modified.
*   **CreateFailed**: The system failed to create the ALB instance.', example='Active'),
      modificationProtectionConfig?: {
        reason?: string(name='Reason', description='The reason why deletion protection is enabled.

It must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter.

This parameter takes effect only when **ModificationProtectionStatus** is set to **ConsoleProtection**.'),
        status?: string(name='Status', description='Indicates whether the configuration read-only mode is enabled for the ALB instance. Valid values:

*   **NonProtection**: The configuration read-only mode is disabled. In this case, you cannot specify ModificationProtectionReason. If you specify ModificationProtectionReason, the value of the parameter is cleared.
*   **ConsoleProtection**: The configuration read-only mode is enabled. In this case, you can specify ModificationProtectionReason.

> If you set this parameter to **ConsoleProtection**, you cannot use the ALB console to modify instance configurations. However, you can call API operations to modify instance configurations.', example='ConsoleProtection'),
      }(name='ModificationProtectionConfig', description='The configuration read-only mode.'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-atstuj3rtop****'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='KeyTest'),
          value?: string(name='Value', description='The tag value.', example='alueTest'),
        }
      ](name='Tags', description='The tags that are added to the instance.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the ALB instance belongs.', example='vpc-bp1b49rqrybk45nio****'),
    }
  ](name='LoadBalancers', description='The list of ALB instances.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is used to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model ListLoadBalancersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLoadBalancersResponseBody(name='body'),
}

async function listLoadBalancersWithOptions(request: ListLoadBalancersRequest, runtime: Util.RuntimeOptions): ListLoadBalancersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressIpVersion)) {
    query['AddressIpVersion'] = request.addressIpVersion;
  }
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.DNSName)) {
    query['DNSName'] = request.DNSName;
  }
  if (!Util.isUnset(request.ipv6AddressType)) {
    query['Ipv6AddressType'] = request.ipv6AddressType;
  }
  if (!Util.isUnset(request.loadBalancerBussinessStatus)) {
    query['LoadBalancerBussinessStatus'] = request.loadBalancerBussinessStatus;
  }
  if (!Util.isUnset(request.loadBalancerIds)) {
    query['LoadBalancerIds'] = request.loadBalancerIds;
  }
  if (!Util.isUnset(request.loadBalancerNames)) {
    query['LoadBalancerNames'] = request.loadBalancerNames;
  }
  if (!Util.isUnset(request.loadBalancerStatus)) {
    query['LoadBalancerStatus'] = request.loadBalancerStatus;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcIds)) {
    query['VpcIds'] = request.vpcIds;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLoadBalancers',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLoadBalancers(request: ListLoadBalancersRequest): ListLoadBalancersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLoadBalancersWithOptions(request, runtime);
}

model ListRulesRequest {
  direction?: string(name='Direction', description='The direction to which the forwarding rule is applied. Valid values:

*   **Request** (default): The forwarding rule is applied to the client requests received by ALB.
*   **Response**: The forwarding rule is applied to the responses returned by backend servers.

> You cannot set this parameter to Response if you use basic ALB instances.', example='Request'),
  listenerIds?: [ string ](name='ListenerIds', description='The listener IDs.'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='The Application Load Balancer (ALB) instance IDs.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return.

Valid values: **1 to 100**.

Default value: **20**. If you do not specify this parameter, the default value is used.

> This parameter is optional.', example='20'),
  nextToken?: string(name='NextToken', description='The starting point of the current query. If you do not specify this parameter, the query starts from the beginning.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  ruleIds?: [ string ](name='RuleIds', description='The forwarding rules.'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListRulesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  rules?: [ 
    {
      direction?: string(name='Direction', description='The direction to which the forwarding rule is applied. Valid values:

*   Request (default): The rule applies to client requests.
*   Response: The rule applies to responses from backend servers.

> Response is not supported by basic ALB instances.'),
      listenerId?: string(name='ListenerId', description='The ID of the listener to which the forwarding rule belongs.', example='lsn-i35udpz3pxsmnf****'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance to which the forwarding rule belongs.', example='alb-x30o38azsuj0sx****'),
      priority?: int32(name='Priority', description='The priority of the forwarding rule. Valid values: **1 to 10000**. A smaller value indicates a higher priority.

> The priority of each forwarding rule added to a listener must be unique.', example='1'),
      ruleActions?: [ 
        {
          corsConfig?: {
            allowCredentials?: string(name='AllowCredentials', description='Indicates whether credentials can be carried in CORS requests. Valid values:

*   **on**
*   **off**', example='on'),
            allowHeaders?: [ string ](name='AllowHeaders', description='The allowed headers for CORS requests.'),
            allowMethods?: [ string ](name='AllowMethods', description='The allowed HTTP methods for CORS requests.'),
            allowOrigin?: [ string ](name='AllowOrigin', description='The allowed origins of CORS requests.'),
            exposeHeaders?: [ string ](name='ExposeHeaders', description='The headers that can be exposed.'),
            maxAge?: long(name='MaxAge', description='The maximum cache time of dry run requests in the browser. Unit: seconds.

Valid values: **-1** to **172800**.', example='1000'),
          }(name='CorsConfig', description='The CORS configuration.'),
          fixedResponseConfig?: {
            content?: string(name='Content', description='The content of the custom response. The content is up to 1 KB in size, and can contain only ASCII characters.', example='dssacav'),
            contentType?: string(name='ContentType', description='The content type.

Valid values: **text/plain**, **text/css**, **text/html**, **application/javascript**, and **application/json**.', example='text/plain'),
            httpCode?: string(name='HttpCode', description='The HTTP status code in the response. Valid values: **HTTP\\_2xx**, **HTTP\\_4xx**, and **HTTP\\_5xx**. **x** must be a digit.', example='HTTP_2xx'),
          }(name='FixedResponseConfig', description='The configuration of the custom response.'),
          forwardGroupConfig?: {
            serverGroupStickySession?: {
              enabled?: boolean(name='Enabled'),
              timeout?: int32(name='Timeout'),
            }(name='ServerGroupStickySession'),
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='The server group to which requests are forwarded.', example='sg-atstuj3rtoptyui****'),
                weight?: int32(name='Weight', description='The weight. Valid values: **0** to **100**.', example='2'),
              }
            ](name='ServerGroupTuples', description='The server groups to which requests are forwarded.'),
          }(name='ForwardGroupConfig', description='The configurations of the server groups.'),
          insertHeaderConfig?: {
            key?: string(name='Key', description='The key of the header. The key must be 1 to 40 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The key specified in `InsertHeader` must be unique.

> **Cookie** and **Host** are not supported.', example='key'),
            value?: string(name='Value', description='The value of the header.

*   If **ValueType** is set to **SystemDefined**, one of the following values is supported:

    *   **ClientSrcPort**: the client port.
    *   **ClientSrcIp**: the client IP address.
    *   **Protocol**: the request protocol (HTTP or HTTPS).
    *   **SLBId**: the ID of the ALB instance.
    *   **SLBPort**: the listener port.

*   If **ValueType** is set to **UserDefined**, a custom header value is supported. The header value must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and lower than 127`. You can use asterisks (\\*) and question marks (?) as wildcard characters. The header value cannot start or end with a space character.

*   If **ValueType** is set to **ReferenceHeader**, one of the request headers is referenced. The header value must be 1 to 128 characters in length, and can contain lowercase letters, digits, underscores (\\_), and hyphens (-).', example='ClientSrcPort'),
            valueType?: string(name='ValueType', description='The type of the header. Valid values:

*   **UserDefined**: a user-defined header.
*   **ReferenceHeader**: a header that is referenced from a request header.
*   **SystemDefined**: a system-defined header.', example='SystemDefined'),
          }(name='InsertHeaderConfig', description='The configuration of the header to be inserted.'),
          order?: int32(name='Order', description='The priority of the action. Valid values: **1 to 50000**. A smaller value indicates a higher priority. The actions of a forwarding rule are applied in descending order of priority. This parameter is not empty. The priority of each action within a forwarding rule is unique.', example='1'),
          redirectConfig?: {
            host?: string(name='Host', description='The hostname to which requests are redirected. Valid values:

*   **${host}** (default): If ${host} is returned, no other character is appended.

*   Limits on a custom value:

    *   The hostname is 3 to 128 characters in length, and can contain lowercase letters, digits, hyphens (-), and periods (.). Asterisks (\\*) and question marks (?) can be used as wildcard characters.
    *   The hostname contains at least one period (.) but does not start or end with a period (.).
    *   The rightmost domain label contains only letters and wildcard characters. It does not contain digits or hyphens (-).
    *   The domain labels do not start or end with hyphens (-).
    *   You can use asterisks (\\*) and question marks (?) anywhere in a domain label as wildcard characters.', example='www.example.com'),
            httpCode?: string(name='HttpCode', description='The redirect type. Valid values: **301**, **302**, **303**, **307**, and **308**.', example='301'),
            path?: string(name='Path', description='The path to which requests are redirected. Valid values:

*   **${path}** (default): You can reference \\*\\*${host}**, **${protocol}**, and**${port}**. The path can consist of **${host}**,**${protocol}**, and **${port}\\*\\*. Each variable can be used only once. The preceding variables can be used at the same time or combined with a custom value.

*   Limits on a custom value:

    *   The value is 1 to 128 characters in length.
    *   It starts with a forward slash (/) and contains letters, digits, and the following special characters: `$ - _ .+ / & ~ @ :`. It does not contain the following special characters: `" % # ; ! ( ) [ ] ^ , "`. You can use asterisks (\\*) and question marks (?) as wildcard characters.', example='/test'),
            port?: string(name='Port', description='The port to which requests are redirected. Valid values:

*   **${port}** (default): If ${port} is returned, no other character is appended.
*   Other valid values: **1 to 63335**.', example='10'),
            protocol?: string(name='Protocol', description='The redirect protocol. Valid values:

*   **${protocol}** (default): If ${protocol} is returned, no other character is appended.
*   **HTTP** or **HTTPS**.

> HTTPS listeners support only HTTP to HTTPS redirection.', example='HTTP'),
            query?: string(name='Query', description='The query string to which requests are redirected. The query string must be 1 to 128 characters in length, and can contain printable characters, excluding uppercase letters and the following special characters: `# [ ] { } \\ | < > &`.', example='quert'),
          }(name='RedirectConfig', description='The configuration of the redirect action.'),
          removeHeaderConfig?: {
            key?: string(name='Key', description='The key of the header to be removed. The key must be 1 to 40 characters in length and can contain letters, digits, underscores, and hyphens (-). The header key must be unique.

*   You cannot specify the following header keys for an inbound forwarding rule: `slb-id`, `slb-ip`, `x-forwarded-for`, `x-forwarded-proto`, `x-forwarded-eip`, `x-forwarded-port`, `x-forwarded-client-srcport`, `connection`, `upgrade`, `content-length`, `transfer-encoding`, `keep-alive`, `te`, `host`, `cookie`, `remoteip`, and `authority`. The preceding keys are case-insensitive.
*   You cannot specify the following header keys for an outbound forwarding rule: `connection`, `upgrade`, `content-length`, and `transfer-encoding`. The preceding keys are case-insensitive.'),
          }(name='RemoveHeaderConfig', description='The configuration of the header to be removed.'),
          rewriteConfig?: {
            host?: string(name='Host', description='The hostname to which requests are forwarded. Valid values:

*   **${host}** (default): If ${host} is returned, no other character is appended.

*   Limits on a custom value:

    *   The hostname is 3 to 128 characters in length, and can contain lowercase letters, digits, hyphens (-), and periods (.). Asterisks (\\*) and question marks (?) can be used as wildcard characters.
    *   The hostname contains at least one period (.) but does not start or end with a period (.).
    *   The rightmost domain label contains only letters and wildcard characters. It does not contain digits or hyphens (-).
    *   The domain labels do not start or end with hyphens (-).
    *   You can use asterisks (\\*) and question marks (?) anywhere in a domain label as wildcard characters.', example='www.example.com'),
            path?: string(name='Path', description='The path to which requests are forwarded. The path is 1 to 128 characters in length and starts with a forward slash (/). The path can contain letters, digits, asterisks (\\*), question marks (?), and the following special characters: `$ - _ . + / & ~ @ :`. The path does not contain the following special characters: `" % # ; ! ( ) [ ] ^ , "`.', example='/tsdf'),
            query?: string(name='Query', description='The query string of the URL to which requests are forwarded. The query string is 1 to 128 characters in length, and can contain printable characters, excluding uppercase letters and the following special characters: `# [ ] { } \\ | < > &`.', example='quedsa'),
          }(name='RewriteConfig', description='The configuration of the rewrite action.'),
          trafficLimitConfig?: {
            perIpQps?: int32(name='PerIpQps', description='The QPS of each IP address. Valid values: **1 to 100000**.

> If you specify this parameter and **QPS**, the value of **PerIpQps** must be smaller than the value of **QPS**.', example='80'),
            QPS?: int32(name='QPS', description='The number of queries per second (QPS). Valid values: **1** to **100000**.', example='4'),
          }(name='TrafficLimitConfig', description='The configuration of the action to throttle traffic.'),
          trafficMirrorConfig?: {
            mirrorGroupConfig?: {
              serverGroupTuples?: [ 
                {
                  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='srg-00mkgijak0w4qgz9****'),
                  weight?: int32(name='Weight', description='The weight. Valid values: **0** to **100**.', example='2'),
                }
              ](name='ServerGroupTuples', description='The server group to which traffic is mirrored.'),
            }(name='MirrorGroupConfig', description='The configuration of the server group to which traffic is mirrored.'),
            targetType?: string(name='TargetType'),
          }(name='TrafficMirrorConfig', description='The configuration of the action to mirror traffic.'),
          type?: string(name='Type', description='The action. Valid values:

*   **ForwardGroup**: distributes requests to multiple vServer groups.
*   **Redirect**: redirects a request.
*   **FixedResponse**: returns a custom response.
*   **Rewrite**: rewrites a request.
*   **InsertHeader**: inserts a header.
*   **RemoveHeaderConfig**: deletes a header.
*   **TrafficLimitConfig**: throttles network traffic.
*   **TrafficMirrorConfig**: mirrors traffic.
*   **CorsConfig**: forwards requests based on CORS.

The preceding actions can be classified into two broad types:

*   **FinalType**: the last action to be performed in a forwarding rule. Each forwarding rule can contain only one FinalType action. You can specify a **ForwardGroup**, **Redirect**, or **FixedResponse** action as the FinalType action.
*   **ExtType**: one or more actions to be performed before the **FinalType** action. A forwarding rule can contain one or more **ExtType** actions. To specify an ExtType action, you must specify a **FinalType** action. You can specify multiple **InsertHeader** actions or one **Rewrite** action.', example='ForwardGroup'),
        }
      ](name='RuleActions', description='The action of the forwarding rule.'),
      ruleConditions?: [ 
        {
          cookieConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='The key of the cookie. The key is 1 to 100 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). The key cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.', example='test'),
                value?: string(name='Value', description='The value of the cookie. The value is 1 to 128 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). Uppercase letters, space characters, and the following special characters are not supported: `# [ ] { } \\ | < > &`.', example='test'),
              }
            ](name='Values', description='The key-value pair of the cookie.'),
          }(name='CookieConfig', description='The configuration of the cookie.'),
          headerConfig?: {
            key?: string(name='Key', description='The key of the header. The key must be 1 to 40 characters in length, and can contain lowercase letters, digits, hyphens (-), and underscores (\\_). Cookie and Host are not supported.', example='Port'),
            values?: [ string ](name='Values', description='The values of the header.'),
          }(name='HeaderConfig', description='The configuration of the header.'),
          hostConfig?: {
            values?: [ string ](name='Values', description='The hostnames.'),
          }(name='HostConfig', description='The configurations of the hosts.'),
          methodConfig?: {
            values?: [ string ](name='Values', description='The request methods.'),
          }(name='MethodConfig', description='The configurations of the request methods.'),
          pathConfig?: {
            values?: [ string ](name='Values', description='The paths.'),
          }(name='PathConfig', description='The configurations of the paths.'),
          queryStringConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='They key of the query string. The key must be 1 to 100 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). The key cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.', example='test'),
                value?: string(name='Value', description='The value of the query string. The value must be 1 to 128 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). However, uppercase letters, space characters, and the following special characters are not supported: `# [ ] { } \\ | < > &`.', example='test'),
              }
            ](name='Values', description='The query string.'),
          }(name='QueryStringConfig', description='The configurations of the query strings.'),
          responseHeaderConfig?: {
            key?: string(name='Key', description='The header key. The key must be 1 to 40 characters in length, and can contain lowercase letters, digits, hyphens (-), and underscores (\\_). Cookie and Host are not supported.'),
            values?: [ string ](name='Values', description='The header values.'),
          }(name='ResponseHeaderConfig', description='The configuration of the HTTP response header.'),
          responseStatusCodeConfig?: {
            values?: [ string ](name='Values', description='The response status codes.'),
          }(name='ResponseStatusCodeConfig', description='The configurations of the response status codes.'),
          sourceIpConfig?: {
            values?: [ string ](name='Values', description='The source IP addresses.'),
          }(name='SourceIpConfig', description='The configuration of the source IP addresses based on which user traffic is matched.'),
          type?: string(name='Type', description='The type of forwarding rule. Valid values:

*   **Host**: Requests are forwarded based on hosts.
*   **Path**: Requests are forwarded based on paths.
*   **Header**: Requests are forwarded based on HTTP headers.
*   **QueryString**: Requests are forwarded based on query strings.
*   **Method**: Requests are forwarded based on request methods.
*   **Cookie**: Requests are forwarded based on cookies.
*   **SourceIp**: Requests are distributed based on source IP addresses.', example='Host'),
        }
      ](name='RuleConditions', description='The conditions of the forwarding rule.'),
      ruleId?: string(name='RuleId', description='The forwarding rule ID.', example='rule-bpn0kn908w4nbw****'),
      ruleName?: string(name='RuleName', description='The name of the forwarding rule. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='rule-instance-test'),
      ruleStatus?: string(name='RuleStatus', description='The status of the forwarding rule. Valid values:

*   **Provisioning**
*   **Configuring**
*   **Available**', example='Available'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Rules', description='The forwarding rules.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRulesResponseBody(name='body'),
}

async function listRulesWithOptions(request: ListRulesRequest, runtime: Util.RuntimeOptions): ListRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.listenerIds)) {
    query['ListenerIds'] = request.listenerIds;
  }
  if (!Util.isUnset(request.loadBalancerIds)) {
    query['LoadBalancerIds'] = request.loadBalancerIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ruleIds)) {
    query['RuleIds'] = request.ruleIds;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRules',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRulesWithOptions(request, runtime);
}

model ListSecurityPoliciesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-atstuj3rtop****'),
  securityPolicyIds?: [ string ](name='SecurityPolicyIds', description='The security policy IDs. You can specify up to 20 IDs.'),
  securityPolicyNames?: [ string ](name='SecurityPolicyNames', description='The names of the security policies. You can specify up to 10 names.'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.'),
}

model ListSecurityPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  securityPolicies?: [ 
    {
      ciphers?: [ string ](name='Ciphers', description='The supported cipher suites.'),
      createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2023-02-15T07:37:33Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-atstuj3rtop****'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy.', example='rg-atstuj3rtop****'),
      securityPolicyName?: string(name='SecurityPolicyName', description='The name of the security policy.', example='test-secrity'),
      securityPolicyStatus?: string(name='SecurityPolicyStatus', description='The status of the security policy. Valid values:

*   **Configuring**
*   **Available**', example='Available'),
      TLSVersions?: [ string ](name='TLSVersions', description='The supported TLS protocol versions.'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='env'),
          value?: string(name='Value', description='The tag value.', example='product'),
        }
      ](name='Tags', description='The tags.'),
    }
  ](name='SecurityPolicies', description='The supported security policies.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListSecurityPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSecurityPoliciesResponseBody(name='body'),
}

async function listSecurityPoliciesWithOptions(request: ListSecurityPoliciesRequest, runtime: Util.RuntimeOptions): ListSecurityPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityPolicyIds)) {
    query['SecurityPolicyIds'] = request.securityPolicyIds;
  }
  if (!Util.isUnset(request.securityPolicyNames)) {
    query['SecurityPolicyNames'] = request.securityPolicyNames;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSecurityPolicies',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSecurityPolicies(request: ListSecurityPoliciesRequest): ListSecurityPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecurityPoliciesWithOptions(request, runtime);
}

model ListSecurityPolicyRelationsRequest {
  securityPolicyIds?: [ string ](name='SecurityPolicyIds', description='The security policy IDs. You can specify up to five IDs.'),
}

model ListSecurityPolicyRelationsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  secrityPolicyRelations?: [ 
    {
      relatedListeners?: [ 
        {
          listenerId?: string(name='ListenerId', description='The listener ID.', example='lsn-0bfuc****'),
          listenerPort?: long(name='ListenerPort', description='The listener port.', example='80'),
          listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol.', example='HTTPS'),
          loadBalancerId?: string(name='LoadBalancerId', description='The Server Load Balancer (SLB) instance ID.', example='lb-bp1o94dp5i6ea****'),
        }
      ](name='RelatedListeners', description='The listeners that are associated with the security policy.'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The security policy ID.', example='scp-bp1bpn0kn9****'),
    }
  ](name='SecrityPolicyRelations', description='The security policies and the listeners that are associated with the security policies.'),
}

model ListSecurityPolicyRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSecurityPolicyRelationsResponseBody(name='body'),
}

async function listSecurityPolicyRelationsWithOptions(request: ListSecurityPolicyRelationsRequest, runtime: Util.RuntimeOptions): ListSecurityPolicyRelationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityPolicyIds)) {
    query['SecurityPolicyIds'] = request.securityPolicyIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSecurityPolicyRelations',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSecurityPolicyRelations(request: ListSecurityPolicyRelationsRequest): ListSecurityPolicyRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecurityPolicyRelationsWithOptions(request, runtime);
}

model ListServerGroupServersRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Valid values: **1** to **100**. If you do not specify a value, the default value **20** is used.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXG****'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='rg-atstuj3rtop****'),
  serverIds?: [ string ](name='ServerIds', description='The IDs of the servers.'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify up to 10 tag keys.

The tag key can be up to 64 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='Test'),
      value?: string(name='Value', description='The tag value. You can specify up to 10 tag values.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='Test'),
    }
  ](name='Tag', description='The tags that are added to the server group. You can specify up to 10 tags in each call.'),
}

model ListServerGroupServersResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='50'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If **NextToken** is not empty, the value of NextToken can be used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f8****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  servers?: [ 
    {
      description?: string(name='Description', description='The description of the backend server.', example='test'),
      port?: int32(name='Port', description='The port used by the backend server. Valid values: **1** to **65535**.', example='80'),
      remoteIpEnabled?: boolean(name='RemoteIpEnabled', description='Indicates whether the remote IP address feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-qy042e1jabmprh****'),
      serverId?: string(name='ServerId', description='The ID of the backend server.

> If **ServerType** is set to **Fc**, **ServerId** is the ARN of a function.', example='i-bp1f9kdprbgy9uiu****'),
      serverIp?: string(name='ServerIp', description='The IP address in inclusive ENI mode.', example='192.168.XX.XX'),
      serverType?: string(name='ServerType', description='The type of the backend server.', example='Ecs'),
      status?: string(name='Status', description='The status of the backend server. Valid values:

*   **Adding**
*   **Available**
*   **Configuring**
*   **Removing**', example='Available'),
      weight?: int32(name='Weight', description='The weight of the backend server. An ECS instance with a higher weight receives more requests.', example='100'),
    }
  ](name='Servers', description='A list of backend servers.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
}

model ListServerGroupServersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServerGroupServersResponseBody(name='body'),
}

async function listServerGroupServersWithOptions(request: ListServerGroupServersRequest, runtime: Util.RuntimeOptions): ListServerGroupServersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    query['ServerGroupId'] = request.serverGroupId;
  }
  if (!Util.isUnset(request.serverIds)) {
    query['ServerIds'] = request.serverIds;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServerGroupServers',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServerGroupServers(request: ListServerGroupServersRequest): ListServerGroupServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServerGroupServersWithOptions(request, runtime);
}

model ListServerGroupsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXG****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the server group belongs.', example='rg-atstuj3rtop****'),
  serverGroupIds?: [ string ](name='ServerGroupIds', description='The server group IDs.'),
  serverGroupNames?: [ string ](name='ServerGroupNames', description='The names of the server groups to be queried. You can specify at most 10 server group names.'),
  serverGroupType?: string(name='ServerGroupType', example='Instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify up to 10 tag keys.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='Test'),
      value?: string(name='Value', description='The tag value. You can specify up to 10 tag values.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='Test'),
    }
  ](name='Tag', description='The tags that are added to the server group. You can specify up to 10 tags in each call.'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp15zckdt37pq72zv****'),
}

model ListServerGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If **NextToken** is not empty, the value of NextToken can be used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f8****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  serverGroups?: [ 
    {
      configManagedEnabled?: boolean(name='ConfigManagedEnabled', description='Indicates whether configuration management is enabled. Valid values:

*   **true**
*   **false**', example='false'),
      createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2022-07-02T02:49:05Z'),
      healthCheckConfig?: {
        healthCheckCodes?: [ string ](name='HealthCheckCodes', description='The HTTP status codes that indicate whether the backend server passes the health check.'),
        healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that you want to use for health checks on backend servers. Valid values: **0** to **65535**.

A value of **0** indicates that the port on a backend server is used for health checks.', example='80'),
        healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Indicates whether the health check feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
        healthCheckHost?: string(name='HealthCheckHost', description='The domain name that is used for health checks. The domain name meets the following requirements:

*   The domain name is 1 to 80 characters in length.
*   The domain name contains lowercase letters, digits, hyphens (-), and periods (.).
*   The domain name contains at least one period (.) but does not start or end with a period (.).
*   The rightmost domain label of the domain name contains only letters, and does not contain digits or hyphens (-).
*   The domain name does not start or end with a hyphen (-).

>  This parameter takes effect only when **HealthCheckProtocol** is set to **HTTP** or **HTTPS**. HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTPS on the **ALB** tab.', example='www.example.com'),
        healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='The HTTP version that is used for health checks.

Valid values: **HTTP1.0** and **HTTP1.1**.

>  This parameter takes effect when **HealthCheckProtocol** is set to **HTTP** or **HTTPS**. HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTPS on the **ALB** tab.', example='HTTP1.1'),
        healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval between two consecutive health checks. Unit: seconds. Valid values: **1** to **50**.', example='5'),
        healthCheckMethod?: string(name='HealthCheckMethod', description='The HTTP method that is used for health checks. Valid values:

*   **GET**: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
*   **POST**: gRPC health checks on listeners use the POST method by default.
*   **HEAD**: HTTP and HTTPS health checks on listeners use the HEAD method by default.

>  This parameter takes effect when **HealthCheckProtocol** is set to **HTTP**, **HTTPS**, or **gRPC**. HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTTPS on the **ALB** tab.', example='HEAD'),
        healthCheckPath?: string(name='HealthCheckPath', description='The path that is used for health checks.

>  This parameter takes effect only when **HealthCheckProtocol** is set to **HTTP** or **HTTPS**. HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTPS on the **ALB** tab.', example='/test/index.html'),
        healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol that you want to use for health checks. Valid values:

*   **HTTP**: ALB performs HTTP health checks by sending HEAD or GET requests to a backend server to check whether the backend server is healthy.
*   **HTTPS**: ALB performs HTTPS health checks by sending HEAD or GET requests to a backend server to check whether the backend server is healthy. HTTPS supports data encryption and provides higher data security than HTTP.
*   **TCP**: To perform TCP health checks, ALB sends SYN packets to the backend server to check whether the port of the backend server is available to receive requests.
*   **gRPC**: ALB performs gRPC health checks by sending POST or GET requests to a backend server to check whether the backend server is healthy.

>  HTTPS is unavailable by default. If you want to use HTTPS, log on to the SLB console, go to the Quota Center page, and then apply for the privilege to use HTTPS on the **ALB** tab.', example='HTTP'),
        healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period for a health check response. If a backend server does not respond within the specified timeout period, the backend server fails the health check. Unit: seconds.', example='3'),
        healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status is changed from **fail** to **success**.', example='4'),
        unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status is changed from **success** to **fail**.', example='4'),
      }(name='HealthCheckConfig', description='The health check configuration.'),
      ipv6Enabled?: boolean(name='Ipv6Enabled', description='Indicates whether IPv6 is supported. Valid values:

*   **true**
*   **false**', example='false'),
      protocol?: string(name='Protocol', description='The backend protocol. Valid values:

*   **HTTP**: allows you to associate HTTPS, HTTP, or QUIC listeners with backend servers.
*   **HTTPS**: allows you to associate an HTTPS listener with the server group.
*   **GRPC**: allows you to associate an HTTPS or QUIC listener with the server group.', example='HTTP'),
      relatedLoadBalancerIds?: [ string ](name='RelatedLoadBalancerIds'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID to which the GA instance belongs.', example='rg-atstuj3rtop****'),
      scheduler?: string(name='Scheduler', description='The scheduling algorithm. Valid values:

*   **Wrr**: Backend servers with higher weights receive more requests than backend servers with lower weights.
*   **Wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If multiple backend servers have the same weight, requests are forwarded to the backend server with the least number of connections.
*   **Sch**: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.', example='Wrr'),
      serverCount?: int32(name='ServerCount', description='The number of backend servers in the server group.', example='1'),
      serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.', example='sgp-cige6j****'),
      serverGroupName?: string(name='ServerGroupName', description='The name of the server group.', example='Group3'),
      serverGroupStatus?: string(name='ServerGroupStatus', description='The status of the server group. Valid values:

*   **Creating**
*   **Available**
*   **Configuring**', example='Available'),
      serverGroupType?: string(name='ServerGroupType', description='The type of server group. Valid values:

*   **Instance**
*   **Ip**
*   **Fc**', example='Instance'),
      serviceName?: string(name='ServiceName', description='The service name.', example='test'),
      stickySessionConfig?: {
        cookie?: string(name='Cookie', description='The cookie that is configured on the server.', example='B490B5EBF6F3CD402E515D22BCDA****'),
        cookieTimeout?: int32(name='CookieTimeout', description='The timeout period of a cookie. Unit: seconds. Valid values: **1** to **86400**.

>  This parameter takes effect only when **StickySessionEnabled** is set to **true** and **StickySessionType** is set to **Insert**.', example='1000'),
        stickySessionEnabled?: boolean(name='StickySessionEnabled', description='Indicates whether session persistence is enabled. Valid values:

*   **true**
*   **false**', example='false'),
        stickySessionType?: string(name='StickySessionType', description='The method that is used to handle a cookie. Valid values:

*   **Insert**: inserts a cookie. ALB inserts a cookie (SERVERID) into the first HTTP or HTTPS response packet that is sent to a client. The next request from the client contains this cookie and the listener distributes this request to the recorded backend server.
*   **Server**: rewrites a cookie. When ALB detects a user-defined cookie, it overwrites the original cookie with the user-defined cookie. Subsequent requests to ALB carry this user-defined cookie, and ALB determines the destination servers of the requests based on the cookies.', example='Insert'),
      }(name='StickySessionConfig', description='The configuration of session persistence.'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='Test'),
          value?: string(name='Value', description='The tag value.', example='Test'),
        }
      ](name='Tags', description='The tags that are added to the server group.'),
      uchConfig?: {
        type?: string(name='Type', description='The data type of the common parameter.', example='QueryString'),
        value?: string(name='Value', description='The parameter value for consistent hashing.', example='abc'),
      }(name='UchConfig', description='The configuration of consistent hashing based on URLs.'),
      upstreamKeepaliveEnabled?: boolean(name='UpstreamKeepaliveEnabled', description='Indicates whether long-lived TCP connections are enabled. Valid values:

*   **true**
*   **false**', example='false'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-bp15zckdt37pq72zv****'),
    }
  ](name='ServerGroups', description='A list of server groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1000'),
}

model ListServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServerGroupsResponseBody(name='body'),
}

async function listServerGroupsWithOptions(request: ListServerGroupsRequest, runtime: Util.RuntimeOptions): ListServerGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serverGroupIds)) {
    query['ServerGroupIds'] = request.serverGroupIds;
  }
  if (!Util.isUnset(request.serverGroupNames)) {
    query['ServerGroupNames'] = request.serverGroupNames;
  }
  if (!Util.isUnset(request.serverGroupType)) {
    query['ServerGroupType'] = request.serverGroupType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServerGroups',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServerGroups(request: ListServerGroupsRequest): ListServerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServerGroupsWithOptions(request, runtime);
}

model ListSystemSecurityPoliciesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  securityPolicies?: [ 
    {
      ciphers?: [ string ](name='Ciphers', description='The supported encryption algorithms.'),
      securityPolicyId?: string(name='SecurityPolicyId', description='The ID of the security policy.', example='spy-n0kn923****'),
      TLSVersions?: [ string ](name='TLSVersions', description='The TLS versions that are supported.'),
    }
  ](name='SecurityPolicies', description='The security policies.'),
}

model ListSystemSecurityPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemSecurityPoliciesResponseBody(name='body'),
}

async function listSystemSecurityPoliciesWithOptions(runtime: Util.RuntimeOptions): ListSystemSecurityPoliciesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListSystemSecurityPolicies',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemSecurityPolicies(): ListSystemSecurityPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemSecurityPoliciesWithOptions(runtime);
}

model ListTagKeysRequest {
  category?: string(name='Category', description='The type of the tag.

Valid values: **Custom**, **System**, and **All**.

Default value: **All**.', example='System'),
  keyword?: string(name='Keyword', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='test'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **acl**: an access control list (ACL)
*   **loadbalancer**: an Application Load Balancer (ALB) instance
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='loadbalancer'),
}

model ListTagKeysResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  tagKeys?: [ 
    {
      category?: string(name='Category', description='The type of the tag.

Valid values: **Custom**, **System**, and **All**.

Default value: **All**.', example='System'),
      tagKey?: string(name='TagKey', description='The tag that matches all filter conditions.', example='test'),
    }
  ](name='TagKeys', description='The tag keys.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagKeys',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs.', example='acl-123'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **acl**: an access control list (ACL)
*   **loadbalancer**: an Application Load Balancer (ALB) instance
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='loadbalancer'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.', example='test'),
}

model ListTagResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='d-2ze1ot4ah7xjyv0d****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **acl**: an ACL
*   **loadbalancer**: an ALB instance
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='loadbalancer'),
      tagKey?: string(name='TagKey', description='The tag key.', example='env'),
      tagValue?: string(name='TagValue', description='The tag value.', example='product'),
    }
  ](name='TagResources', description='The tags that match the specified keys and values.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagValuesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  resourceId?: string(name='ResourceId', description='The resource ID.', example='eip-resource-test'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **loadbalancer**: an Application Load Balancer (ALB) instance
*   **acl**: an access control list (ACL)
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='loadbalancer'),
  tagKey?: string(name='TagKey', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='test'),
}

model ListTagValuesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  tagValues?: [ string ](name='TagValues', description='The tag values.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagValues',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of the resource group to which you want to move the resource.

> You can use resource groups to manage resources owned by your Alibaba Cloud account. Resource groups simplify resource and permission management in your Alibaba Cloud account. For more information, see [What is resource management?](~~94475~~)', example='rg-9gLOoK****'),
  resourceId?: string(name='ResourceId', description='The resource ID.', example='acl-hp34s2h0xx1ht4nwo****'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **loadbalancer**: Application Load Balancer (ALB) instance
*   **acl**: access control list (ACL)
*   **securitypolicy**: security policy
*   **servergroup**: server group', example='ACL'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model RemoveEntriesFromAclRequest {
  aclId?: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  entries?: [ string ](name='Entries', description='The entries that you want to remove. You can remove up to 20 entries in each call.'),
}

model RemoveEntriesFromAclResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model RemoveEntriesFromAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveEntriesFromAclResponseBody(name='body'),
}

/**
  * **RemoveEntriesFromAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAclEntries](~~213616~~) operation to query the status of the task.
  * *   If an ACL is in the **Removing** state, the entries are being removed.
  * *   If an ACL cannot be found, the entries are removed.
  *
  * @param request RemoveEntriesFromAclRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveEntriesFromAclResponse
 */
async function removeEntriesFromAclWithOptions(request: RemoveEntriesFromAclRequest, runtime: Util.RuntimeOptions): RemoveEntriesFromAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.entries)) {
    query['Entries'] = request.entries;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveEntriesFromAcl',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **RemoveEntriesFromAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAclEntries](~~213616~~) operation to query the status of the task.
  * *   If an ACL is in the **Removing** state, the entries are being removed.
  * *   If an ACL cannot be found, the entries are removed.
  *
  * @param request RemoveEntriesFromAclRequest
  * @return RemoveEntriesFromAclResponse
 */
async function removeEntriesFromAcl(request: RemoveEntriesFromAclRequest): RemoveEntriesFromAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEntriesFromAclWithOptions(request, runtime);
}

model RemoveServersFromServerGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtop****'),
  servers?: [ 
    {
      port?: int32(name='Port', description='The port that is used by the backend server. Valid values: **1** to **65535**. You can specify at most 40 servers in each call.

> This parameter is required if the **ServerType** parameter is set to **Ecs**, **Eni**, **Eci**, or **Ip**.', example='80'),
      serverId?: string(name='ServerId', description='The backend server ID. You can specify up to 40 server IDs in each call.

*   If the server group type is **Instance**, set the ServerId parameter to the ID of an ECS instance, an ENI, or an elastic container instance. These backend servers are specified by **Ecs**, **Eni**, or **Eci**.
*   If the server group type is **Ip**, set the ServerId parameter to an IP address specified in the server group.
*   If the server group type is **Fc**, set the ServerId parameter to the ARN of a function specified in the server group.

> You can call the [ListServerGroups](~~213627~~) operation to query information about the server group type so that you can set ServerId to a proper value.', example='i-bp1f9kdprbgy9uiu****'),
      serverIp?: string(name='ServerIp', description='The IP address in inclusive ENI mode. You can specify at most 40 servers in each call.', example='192.168.1.1'),
      serverType?: string(name='ServerType', description='The type of the backend server. You can specify at most 40 servers in each call. Valid values:

*   **Ecs**
*   **Eni**
*   **Eci**
*   **Ip**
*   **Fc**', example='Ecs'),
    }
  ](name='Servers', description='The backend servers that you want to remove from the server group. You can specify up to 40 backend servers in each call.'),
}

model RemoveServersFromServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model RemoveServersFromServerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveServersFromServerGroupResponseBody(name='body'),
}

/**
  * **RemoveServersFromServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group.
  *     *   If a server group is in the **Configuring** state, it indicates that the server group is being modified.
  *     *   If a server group is in the **Available** state, it indicates that the server group is running.
  * 2.  You can call the [ListServerGroupServers](~~213628~~) operation to query the status of a backend server.
  *     *   If a backend server is in the **Removing** state, the server is being removed from the server group.
  *     *   If a backend server cannot be found, the server is no longer in the server group.
  *
  * @param request RemoveServersFromServerGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveServersFromServerGroupResponse
 */
async function removeServersFromServerGroupWithOptions(request: RemoveServersFromServerGroupRequest, runtime: Util.RuntimeOptions): RemoveServersFromServerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    query['ServerGroupId'] = request.serverGroupId;
  }
  if (!Util.isUnset(request.servers)) {
    query['Servers'] = request.servers;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveServersFromServerGroup',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **RemoveServersFromServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group.
  *     *   If a server group is in the **Configuring** state, it indicates that the server group is being modified.
  *     *   If a server group is in the **Available** state, it indicates that the server group is running.
  * 2.  You can call the [ListServerGroupServers](~~213628~~) operation to query the status of a backend server.
  *     *   If a backend server is in the **Removing** state, the server is being removed from the server group.
  *     *   If a backend server cannot be found, the server is no longer in the server group.
  *
  * @param request RemoveServersFromServerGroupRequest
  * @return RemoveServersFromServerGroupResponse
 */
async function removeServersFromServerGroup(request: RemoveServersFromServerGroupRequest): RemoveServersFromServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeServersFromServerGroupWithOptions(request, runtime);
}

model ReplaceServersInServerGroupRequest {
  addedServers?: [ 
    {
      description?: string(name='Description', description='The description of the backend server. The description must be 2 to 256 characters in length, and can contain letters, digits, periods (.), underscores (\\_), hyphens (-), commas (,), semicolons (;), forward slashes (/), and at signs (@). You can specify at most 40 servers in each call.', example='test'),
      port?: int32(name='Port', description='The port used by the server group. Valid values: **1** to **65535**. You can specify at most 40 servers in each call.', example='80'),
      serverId?: string(name='ServerId', description='The ID of the backend server. You can specify up to 40 server IDs in each call.

*   If the server group type is **Instance**, set the ServerId parameter to the ID of an ECS instance, an ENI, or an elastic container instance. These backend servers are specified by **Ecs**, **Eni**, or **Eci**.
*   If the server group type is **Ip**, set the ServerId parameter to an IP address specified in the server group.

> You cannot perform this operation on a server group of the Function type. You can call the [ListServerGroups](~~213627~~) operation to query information about the server group type so that you can set ServerId to a proper value.', example='i-bp1f9kdprbgy9uiu****'),
      serverIp?: string(name='ServerIp', description='The IP address in inclusive ENI mode. You can specify at most 40 servers in each call.', example='192.168.1.1'),
      serverType?: string(name='ServerType', description='The type of the backend server that you want to remove from the server group. You can specify up to 40 backend servers in each call. Valid values:

*   **Ecs**
*   **Eni**
*   **Eci**', example='Ecs'),
      weight?: int32(name='Weight', description='The weight of the backend server that you want to add to the server group. You can specify up to 40 backend servers in each call.

Valid values: **0** to **100**. Default value: **100**. If the weight of a backend server is set to **0**, no requests are forwarded to the backend server.', example='100'),
    }
  ](name='AddedServers', description='The backend servers that you want to add to the server group. You can specify up to 40 backend servers in each call.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx` HTTP status code is returned and the operation is performed.', example='true'),
  removedServers?: [ 
    {
      port?: int32(name='Port', description='The port that is used by the backend server. Valid values: **1** to **65535**. You can specify at most 40 servers in each call.', example='81'),
      serverId?: string(name='ServerId', description='The ID of the backend server. You can specify up to 40 server IDs in each call.

*   If the server group type is **Instance**, set the ServerId parameter to the ID of an ECS instance, an ENI, or an elastic container instance. These backend servers are specified by **Ecs**, **Eni**, or **Eci**.
*   If the server group type is **Ip**, set the ServerId parameter to an IP address specified in the server group.

> You cannot perform this operation on a server group of the Function type. You can call the [ListServerGroups](~~213627~~) operation to query information about the server group type so that you can set ServerId to a proper value.', example='ecs-bp1ac9uozods2uc****'),
      serverIp?: string(name='ServerIp', description='The IP address in inclusive ENI mode. You can specify at most 40 servers in each call.', example='192.168.1.12'),
      serverType?: string(name='ServerType', description='The type of the backend server that you want to remove from the server group. You can specify up to 40 backend servers in each call. Valid values:

*   **Ecs**
*   **Eni**
*   **Eci**', example='ecs'),
    }
  ](name='RemovedServers', description='The backend servers that you want to remove.'),
  serverGroupId?: string(name='ServerGroupId', description='The ID of the server group.

> You cannot perform this operation on a server group of the Function type.', example='sgp-5114d593o96qxy****'),
}

model ReplaceServersInServerGroupResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model ReplaceServersInServerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplaceServersInServerGroupResponseBody(name='body'),
}

/**
  * **ReplaceServersInServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group.
  *     *   If a server group is in the **Configuring** state, it indicates that the server group is being modified.
  *     *   If a server group is in the **Available** state, it indicates that the server group is running.
  * 2.  You can call the [ListServerGroupServers](~~213628~~) operation to query the status of a backend server.
  *     *   If a backend server is in the **Replacing** state, it indicates that the server is being removed from the server group and a new server is added to the server group.
  *     *   If a backend server is in the \\*\\*Available\\*\\* state, it indicates that the server is running.
  *
  * @param request ReplaceServersInServerGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReplaceServersInServerGroupResponse
 */
async function replaceServersInServerGroupWithOptions(request: ReplaceServersInServerGroupRequest, runtime: Util.RuntimeOptions): ReplaceServersInServerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addedServers)) {
    query['AddedServers'] = request.addedServers;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.removedServers)) {
    query['RemovedServers'] = request.removedServers;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    query['ServerGroupId'] = request.serverGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplaceServersInServerGroup',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **ReplaceServersInServerGroup** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group.
  *     *   If a server group is in the **Configuring** state, it indicates that the server group is being modified.
  *     *   If a server group is in the **Available** state, it indicates that the server group is running.
  * 2.  You can call the [ListServerGroupServers](~~213628~~) operation to query the status of a backend server.
  *     *   If a backend server is in the **Replacing** state, it indicates that the server is being removed from the server group and a new server is added to the server group.
  *     *   If a backend server is in the \\*\\*Available\\*\\* state, it indicates that the server is running.
  *
  * @param request ReplaceServersInServerGroupRequest
  * @return ReplaceServersInServerGroupResponse
 */
async function replaceServersInServerGroup(request: ReplaceServersInServerGroupRequest): ReplaceServersInServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceServersInServerGroupWithOptions(request, runtime);
}

model StartListenerRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the **DryRunOperation** error code is returned.
*   **false**: (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  listenerId?: string(name='ListenerId', description='The ID of the Application Load Balancer (ALB) listener.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model StartListenerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model StartListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartListenerResponseBody(name='body'),
}

/**
  * **StartListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetListenerAttribute](~~2254865~~) to query the status of the task.
  * *   If a listener is in the **Configuring** state, the listener is being enabled.
  * *   If a listener is in the **Running** state, the listener is enabled.
  *
  * @param request StartListenerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartListenerResponse
 */
async function startListenerWithOptions(request: StartListenerRequest, runtime: Util.RuntimeOptions): StartListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartListener',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **StartListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetListenerAttribute](~~2254865~~) to query the status of the task.
  * *   If a listener is in the **Configuring** state, the listener is being enabled.
  * *   If a listener is in the **Running** state, the listener is enabled.
  *
  * @param request StartListenerRequest
  * @return StartListenerResponse
 */
async function startListener(request: StartListenerRequest): StartListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return startListenerWithOptions(request, runtime);
}

model StartShiftLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='alb-o9ulmq5hgn68jk****'),
  zoneMappings?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the zone. By default, each zone uses one vSwitch and one subnet.', example='vsw-bp1rmcrwg3erh1fh8****'),
      zoneId?: string(name='ZoneId', description='The zone ID. You can call the [DescribeZones](~~189196~~) operation to query the most recent zone list.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The mappings between zones and vSwitches.

>  You can remove only one zone in each call.'),
}

model StartShiftLoadBalancerZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
}

model StartShiftLoadBalancerZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartShiftLoadBalancerZonesResponseBody(name='body'),
}

/**
  * This operation is supported by Application Load Balancer (ALB) instances that use static IP addresses. The zone cannot be removed if the ALB instance has only one available zone.
  *
  * @param request StartShiftLoadBalancerZonesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartShiftLoadBalancerZonesResponse
 */
async function startShiftLoadBalancerZonesWithOptions(request: StartShiftLoadBalancerZonesRequest, runtime: Util.RuntimeOptions): StartShiftLoadBalancerZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.zoneMappings)) {
    query['ZoneMappings'] = request.zoneMappings;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartShiftLoadBalancerZones',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is supported by Application Load Balancer (ALB) instances that use static IP addresses. The zone cannot be removed if the ALB instance has only one available zone.
  *
  * @param request StartShiftLoadBalancerZonesRequest
  * @return StartShiftLoadBalancerZonesResponse
 */
async function startShiftLoadBalancerZones(request: StartShiftLoadBalancerZonesRequest): StartShiftLoadBalancerZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return startShiftLoadBalancerZonesWithOptions(request, runtime);
}

model StopListenerRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  listenerId?: string(name='ListenerId', description='The ID of the Application Load Balancer (ALB) listener.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model StopListenerResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model StopListenerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopListenerResponseBody(name='body'),
}

/**
  * **StopListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetListenerAttribute](~~2254865~~) operation to query the status of the task:
  * *   If a listener is in the **Configuring** state, the listener is being disabled.
  * *   If a listener is in the **Stopped** state, the listener is disabled.
  *
  * @param request StopListenerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopListenerResponse
 */
async function stopListenerWithOptions(request: StopListenerRequest, runtime: Util.RuntimeOptions): StopListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopListener',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **StopListener** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetListenerAttribute](~~2254865~~) operation to query the status of the task:
  * *   If a listener is in the **Configuring** state, the listener is being disabled.
  * *   If a listener is in the **Stopped** state, the listener is disabled.
  *
  * @param request StopListenerRequest
  * @return StopListenerResponse
 */
async function stopListener(request: StopListenerRequest): StopListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopListenerWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='The resource IDs.', example='acl-123'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **acl**: an access control list (ACL)
*   **loadbalancer**: an Application Load Balancer (ALB) instance
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='loadbalancer'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags.', example='test'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified resource. Valid values:

*   **true**
*   **false**', example='false'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of the resources from which you want to remove tags.', example='acl-123'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **acl**: an access control list (ACL)
*   **loadbalancer**: an Application Load Balancer (ALB) instance
*   **securitypolicy**: a security policy
*   **servergroup**: a server group', example='loadbalancer'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that you want to remove. The key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. The key cannot contain `http://` or `https://`.', example='env'),
      value?: string(name='Value', description='The value of the tag that you want to remove. The value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. The value cannot contain `http://` or `https://`.', example='product'),
    }
  ](name='Tag', description='The tags that you want to remove.', example='test'),
  tagKey?: [ string ](name='TagKey', description='The keys of the tags that you want to remove.'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model UnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnTagResourcesResponseBody(name='body'),
}

async function unTagResourcesWithOptions(request: UnTagResourcesRequest, runtime: Util.RuntimeOptions): UnTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnTagResources',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unTagResourcesWithOptions(request, runtime);
}

model UpdateAScriptsRequest {
  AScripts?: [ 
    {
      AScriptId?: string(name='AScriptId', description='The AScript rule ID.', example='as-mhqxcanmivn4g5****'),
      AScriptName?: string(name='AScriptName', description='The name of the AScript rule.

The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='Group1'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the AScript rule. Valid values:

*   **true**
*   **false** (default)', example='true'),
      scriptContent?: string(name='ScriptContent', description='The content of the AScript rule.', example='if and(match_re($uri, \\"^/1.txt$\\"), $arg_type) { rewrite(concat(\\"/1.\\", $arg_type), \\"break\\") }'),
    }
  ](name='AScripts', description='The AScript rules.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='b1f642ac-5558-4a36-b7d9-cf53f40ea5c8'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
}

model UpdateAScriptsResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='2e82b5f4-1ba9-4d20-89c8-1082ebaa****'),
  requestId?: string(name='RequestId', description='The request ID.', example='ACA19FE1-C09E-53C7-8FDA-560F49D71891'),
}

model UpdateAScriptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAScriptsResponseBody(name='body'),
}

/**
  * *   **UpdateAScripts** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAScripts](~~472574~~) operation to query the status of the task.
  *     *   If an AScript rule is in the **Configuring** state, the AScript rule is being updated.
  *     *   If an AScript rule is in the **Available** state, the AScript rule is updated.
  * *   In the following table, the maximum value of **N** is **4**.
  *
  * @param request UpdateAScriptsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateAScriptsResponse
 */
async function updateAScriptsWithOptions(request: UpdateAScriptsRequest, runtime: Util.RuntimeOptions): UpdateAScriptsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.AScripts)) {
    query['AScripts'] = request.AScripts;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAScripts',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   **UpdateAScripts** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListAScripts](~~472574~~) operation to query the status of the task.
  *     *   If an AScript rule is in the **Configuring** state, the AScript rule is being updated.
  *     *   If an AScript rule is in the **Available** state, the AScript rule is updated.
  * *   In the following table, the maximum value of **N** is **4**.
  *
  * @param request UpdateAScriptsRequest
  * @return UpdateAScriptsResponse
 */
async function updateAScripts(request: UpdateAScriptsRequest): UpdateAScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAScriptsWithOptions(request, runtime);
}

model UpdateAclAttributeRequest {
  aclId?: string(name='AclId', description='The ACL ID.', example='nacl-hp34s2h0xx1ht4nwo****'),
  aclName?: string(name='AclName', description='The ACL name. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test-acl'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

> If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx` HTTP status code is returned and the operation is performed.', example='true'),
}

model UpdateAclAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateAclAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAclAttributeResponseBody(name='body'),
}

async function updateAclAttributeWithOptions(request: UpdateAclAttributeRequest, runtime: Util.RuntimeOptions): UpdateAclAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.aclName)) {
    query['AclName'] = request.aclName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAclAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAclAttribute(request: UpdateAclAttributeRequest): UpdateAclAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAclAttributeWithOptions(request, runtime);
}

model UpdateHealthCheckTemplateAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a **2xx** HTTP status code is returned and the operation is performed.', example='true'),
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='The HTTP status codes that are used to determine whether the backend server passes the health check.

*   If **HealthCheckProtocol** is set to **HTTP**, **HealthCheckCodes** can be set to **http\\_2xx** (default), **http\\_3xx**, **http\\_4xx**, and **http\\_5xx**. Separate multiple HTTP status codes with a comma (,).
*   If **HealthCheckProtocol** is set to **gRPC**, **HealthCheckCodes** can be set to **0 to 99**. Default value: **0**. Value ranges are supported. You can enter up to 20 value ranges and separate them with a comma (,).

> This parameter takes effect only when the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.', example='5'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **0 to 65535**. Default value: **0**. This value indicates that the port of a backend server is used for health checks.', example='80'),
  healthCheckHost?: string(name='HealthCheckHost', description='The domain name that you want to use for the health check. Valid values:

*   **$SERVER_IP** (default): the private IP addresses of backend servers. If you do not set the HealthCheckHost parameter or set the parameter to $SERVER_IP, the Application Load Balancer (ALB) uses the private IP addresses of backend servers for health checks.
*   **domain**: The domain name must be 1 to 80 characters in length and can contain letters, digits, periods (.), and hyphens (-).

> This parameter is valid only if the `HealthCheckProtocol` parameter is set to **HTTP**.', example='$_ip'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='The HTTP version that is used for health checks.

Valid values: **HTTP1.0** and **HTTP1.1**.

Default value: **HTTP1.1**.

> This parameter is valid only if the `HealthCheckProtocol` parameter is set to **HTTP**.', example='HTTP1.0'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Unit: seconds. Valid values: **1 to 50**. Default value: **2**.', example='5'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The method that you want to use for the health check. Valid values:

*   **HEAD**: By default, the ALB instance sends HEAD requests to a backend server to perform HTTP health checks.
*   **GET**: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
*   **POST**: gRPC health checks automatically use the POST method.

> This parameter takes effect only when the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.', example='HEAD'),
  healthCheckPath?: string(name='HealthCheckPath', description='The URL path that is used for health checks.

The URL must be 1 to 80 characters in length and can contain only letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : \\" , +`.

The URL must start with a forward slash (/).

> This parameter takes effect only when the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.', example='/test/index.html'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol that you want to use for health checks. Valid values:

*   **HTTP** (default): To perform HTTP health checks, ALB sends HEAD or GET requests to a backend server to check whether the backend server is healthy.
*   **TCP**: To perform TCP health checks, ALB sends SYN packets to a backend server to check whether the port of the backend server is available to receive requests.
*   **gRPC**: To perform gRPC health checks, ALB sends POST or GET requests to a backend server to check whether the backend server is healthy.', example='HTTP'),
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='The template ID.', example='hct-bp1qjwo61pqz3ahltv0mw'),
  healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='The name of the health check template.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='HealthCheckTemplate1'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check. If a backend server does not respond within the specified timeout period, the backend server fails the health check.

Unit: seconds. Valid values: **1 to 300**. Default value: **5**.

> If the value of the `HealthCheckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the timeout period specified by the `HealthCheckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is used as the timeout period.', example='3'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status is changed from **fail** to **success**.

Valid values: **2 to 10**.

Default value: **3**.', example='4'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status is changed from **success** to **fail**.

Valid values: **2 to 10**.

Default value: **3**.', example='4'),
}

model UpdateHealthCheckTemplateAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model UpdateHealthCheckTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHealthCheckTemplateAttributeResponseBody(name='body'),
}

async function updateHealthCheckTemplateAttributeWithOptions(request: UpdateHealthCheckTemplateAttributeRequest, runtime: Util.RuntimeOptions): UpdateHealthCheckTemplateAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.healthCheckCodes)) {
    query['HealthCheckCodes'] = request.healthCheckCodes;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckHost)) {
    query['HealthCheckHost'] = request.healthCheckHost;
  }
  if (!Util.isUnset(request.healthCheckHttpVersion)) {
    query['HealthCheckHttpVersion'] = request.healthCheckHttpVersion;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckMethod)) {
    query['HealthCheckMethod'] = request.healthCheckMethod;
  }
  if (!Util.isUnset(request.healthCheckPath)) {
    query['HealthCheckPath'] = request.healthCheckPath;
  }
  if (!Util.isUnset(request.healthCheckProtocol)) {
    query['HealthCheckProtocol'] = request.healthCheckProtocol;
  }
  if (!Util.isUnset(request.healthCheckTemplateId)) {
    query['HealthCheckTemplateId'] = request.healthCheckTemplateId;
  }
  if (!Util.isUnset(request.healthCheckTemplateName)) {
    query['HealthCheckTemplateName'] = request.healthCheckTemplateName;
  }
  if (!Util.isUnset(request.healthCheckTimeout)) {
    query['HealthCheckTimeout'] = request.healthCheckTimeout;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHealthCheckTemplateAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHealthCheckTemplateAttribute(request: UpdateHealthCheckTemplateAttributeRequest): UpdateHealthCheckTemplateAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHealthCheckTemplateAttributeWithOptions(request, runtime);
}

model UpdateListenerAttributeRequest {
  caCertificates?: [ 
    {
      certificateId?: string(name='CertificateId'),
    }
  ](name='CaCertificates', description='The certificate authority (CA) certificates.'),
  caEnabled?: boolean(name='CaEnabled', description='Specifies whether to enable mutual authentication. Valid values:

*   **true**
*   **false**', example='false'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='The certificate ID. Only server certificates are supported. You can specify up to 20 certificate IDs.', example='12315790212_166f8204689_1714763408_70998****'),
    }
  ](name='Certificates', description='The certificates.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  defaultActions?: [ 
    {
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='The server group to which requests are forwarded.', example='rsp-cige6j5e7p****'),
          }
        ](name='ServerGroupTuples', description='The server groups to which requests are forwarded.'),
      }(name='ForwardGroupConfig', description='The configuration of the action. This parameter is required and takes effect when the **Type** parameter is set to **FowardGroup**. You can specify configurations for up to 20 forwarding actions.'),
      type?: string(name='Type', description='The type of the action. You can specify only one action type.

Set the value to **ForwardGroup** to forward requests to multiple vServer groups.', example='ForwardGroup'),
    }
  ](name='DefaultActions', description='The default actions in the forwarding rules.'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='false'),
  gzipEnabled?: boolean(name='GzipEnabled', description='Specifies whether to enable GZIP compression for specific types of files. Valid values:

*   **true**
*   **false**', example='true'),
  http2Enabled?: boolean(name='Http2Enabled', description='Specifies whether to enable HTTP/2. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='true'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period of an idle connection. Unit: seconds. Valid values: **1 to 60**.

If no request is received within the specified timeout period, ALB closes the current connection. When another request is received, ALB establishes a new connection.', example='15'),
  listenerDescription?: string(name='ListenerDescription', description='The name of the listener.

The name must be 2 to 256 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -.', example='HTTP_80'),
  listenerId?: string(name='ListenerId', description='The ID of the Application Load Balancer (ALB) listener.', example='lsr-bp1bpn0kn908w4nbw****'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='The QUIC listener ID. This parameter is required if **QuicUpgradeEnabled** is set to **true**. Only HTTPS listeners support this parameter.

> You must add the HTTPS listener and the QUIC listener to the same ALB instance. In addition, make sure that the QUIC listener has never been associated with another listener.', example='lsn-333'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='Specifies whether to enable QUIC upgrade. Valid values:

*   **true**
*   **false**

> Only HTTPS listeners support this parameter.', example='false'),
  }(name='QuicConfig', description='The configuration information when the listener is associated with a QUIC listener.'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of a request. Unit: seconds. Valid values: **1 to 180**.

If no response is received from the backend server within the specified timeout period, ALB returns an `HTTP 504` error code to the client.', example='3'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The security policy ID. System security policies and custom security policies are supported.

> This parameter is available only when you create an HTTPS listener.', example='tls_cipher_policy_1_0'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='The name of the custom header. This parameter takes effect only when the **XForwardedForClientCertClientVerifyEnabled** parameter is set to **true**.

The name must be 1 to 40 characters in length, and can contain letters, hyphens (-), underscores (\\_), and digits.

> This parameter is available only when you create an HTTPS listener.', example='test_client-verify-alias_123456'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='Specifies whether to use the `X-Forwarded-Clientcert-clientverify` header to retrieve the verification result of the client certificate. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='false'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='The name of the custom header. This parameter takes effect only when the **XForwardedForClientCertFingerprintEnabled** parameter is set to **true**.

The name must be 1 to 40 characters in length, and can contain letters, hyphens (-), underscores (\\_), and digits.

> This parameter is available only when you create an HTTPS listener.', example='test_finger-print-alias_123456'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='Indicates whether the `X-Forwarded-Clientcert-fingerprint` header is used to retrieve the fingerprint of the client certificate. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='false'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertIssuerDNEnabled** is set to **true**.

The name must be 1 to 40 characters in length, and can contain letters, hyphens (-), underscores (\\_), and digits.

> This parameter is available only when you create an HTTPS listener.', example='test_issue-dn-alias_123456'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='Indicates whether the `X-Forwarded-Clientcert-issuerdn` header is used to retrieve information about the authority that issues the client certificate. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='false'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='The name of the custom header. This parameter takes effect only when **XForwardedForClientCertSubjectDNEnabled** is set to **true**.

The name must be 1 to 40 characters in length, and can contain letters, hyphens (-), underscores (\\_), and digits.

> This parameter is available only when you create an HTTPS listener.', example='test_subject-dn-alias_123456'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='Indicates whether the `X-Forwarded-Clientcert-subjectdn` header is used to retrieve information about the owner of the client certificate. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTPS listener.', example='false'),
    XForwardedForClientSourceIpsEnabled?: boolean(name='XForwardedForClientSourceIpsEnabled', description='Specifies whether to use the `X-Forwarded-Client-Ip` header to retrieve the source IP addresses. Valid values:

*   **true**
*   **false**

> HTTP, HTTPS, and QUIC listeners support this parameter. By default, the feature that corresponds to this parameter is unavailable. If you want to use this feature, contact your account manager.', example='false'),
    XForwardedForClientSourceIpsTrusted?: string(name='XForwardedForClientSourceIpsTrusted', description='The trusted proxy IP address.

ALB traverses `X-Forwarded-For` backward and selects the first IP address that is not in the trusted IP address list as the real IP address of the client. The IP address is used in source IP address throttling.', example='10.1.1.0/24'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='Indicates whether the `X-Forwarded-Client-Port` header is used to retrieve the client port. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTP or HTTPS listener.', example='false'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='Indicates whether the `X-Forwarded-For` header is used to retrieve the client IP address. Valid values:

*   **true**
*   **false**

> This parameter is available only when you create an HTTP or HTTPS listener.', example='true'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='Specifies whether to use the `X-Forwarded-Proto` header to retrieve the listener protocol of the ALB instance. Valid values:

*   **true**
*   **false**

> HTTP, HTTPS, and QUIC listeners support this parameter.', example='false'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='Specifies whether to use the `SLB-ID` header to retrieve the ID of the ALB instance. Valid values:

*   **true**
*   **false**

> HTTP, HTTPS, and QUIC listeners support this parameter.', example='false'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='Specifies whether to use the `X-Forwarded-Port` header to retrieve the listening port. Valid values:

*   **true**
*   **false**

> HTTP, HTTPS, and QUIC listeners support this parameter.', example='false'),
  }(name='XForwardedForConfig', description='The configuration of the XForwardFor headers.'),
}

model UpdateListenerAttributeResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model UpdateListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateListenerAttributeResponseBody(name='body'),
}

/**
  * **UpdateListenerAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetListenerAttribute](~~2254865~~) operation to query the status of the task.
  * *   If a listener is in the **Configuring** state, the configuration of the listener is being modified.
  * *   If a listener is in the **Running** state, the configuration of the listener is modified.
  *
  * @param request UpdateListenerAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateListenerAttributeResponse
 */
async function updateListenerAttributeWithOptions(request: UpdateListenerAttributeRequest, runtime: Util.RuntimeOptions): UpdateListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caCertificates)) {
    query['CaCertificates'] = request.caCertificates;
  }
  if (!Util.isUnset(request.caEnabled)) {
    query['CaEnabled'] = request.caEnabled;
  }
  if (!Util.isUnset(request.certificates)) {
    query['Certificates'] = request.certificates;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.defaultActions)) {
    query['DefaultActions'] = request.defaultActions;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.gzipEnabled)) {
    query['GzipEnabled'] = request.gzipEnabled;
  }
  if (!Util.isUnset(request.http2Enabled)) {
    query['Http2Enabled'] = request.http2Enabled;
  }
  if (!Util.isUnset(request.idleTimeout)) {
    query['IdleTimeout'] = request.idleTimeout;
  }
  if (!Util.isUnset(request.listenerDescription)) {
    query['ListenerDescription'] = request.listenerDescription;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  if (!Util.isUnset(request.quicConfig)) {
    query['QuicConfig'] = request.quicConfig;
  }
  if (!Util.isUnset(request.requestTimeout)) {
    query['RequestTimeout'] = request.requestTimeout;
  }
  if (!Util.isUnset(request.securityPolicyId)) {
    query['SecurityPolicyId'] = request.securityPolicyId;
  }
  if (!Util.isUnset(request.XForwardedForConfig)) {
    query['XForwardedForConfig'] = request.XForwardedForConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateListenerAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **UpdateListenerAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetListenerAttribute](~~2254865~~) operation to query the status of the task.
  * *   If a listener is in the **Configuring** state, the configuration of the listener is being modified.
  * *   If a listener is in the **Running** state, the configuration of the listener is modified.
  *
  * @param request UpdateListenerAttributeRequest
  * @return UpdateListenerAttributeResponse
 */
async function updateListenerAttribute(request: UpdateListenerAttributeRequest): UpdateListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateListenerAttributeWithOptions(request, runtime);
}

model UpdateListenerLogConfigRequest {
  accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='Specifies whether to record custom headers in the access log. Valid values:

*   **true**
*   **false** (default)

> You can set this parameter to **true** only if the access log feature is enabled by specifying **AccessLogEnabled**.', example='true'),
  accessLogTracingConfig?: {
    tracingEnabled?: boolean(name='TracingEnabled', description='Specifies whether to enable the Xtrace feature. Valid values:

*   **true**
*   **false** (default)

> You can set this parameter to **true** only if the access log feature is enabled by specifying **AccessLogEnabled**.', example='true'),
    tracingSample?: int32(name='TracingSample', description='The sampling rate of the Xtrace feature.

Valid values: **1 to 10000**.

> This parameter takes effect only if you set **TracingEnabled** to **true**.', example='100'),
    tracingType?: string(name='TracingType', description='The type of Xtrace. Set the value to **Zipkin**.

> This parameter takes effect only if you set **TracingEnabled** to **true**.', example='Zipkin'),
  }(name='AccessLogTracingConfig', description='The configuration information about the Xtrace feature.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: (default): performs a dry run and performs the actual request. If the request passes the dry run, a **2xx HTTP** status code is returned and the operation is performed.', example='true'),
  listenerId?: string(name='ListenerId', description='The ID of the Application Load Balancer (ALB) listener.', example='lsr-bp1bpn0kn908w4nbw****'),
}

model UpdateListenerLogConfigResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model UpdateListenerLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateListenerLogConfigResponseBody(name='body'),
}

/**
  * **UpdateListenerLogConfig** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetListenerAttribute](~~2254865~~) to query the status of the task:
  * *   If a listener is in the **Configuring** state, the log configuration of the listener is being modified.
  * *   If a listener is in the **Running** state, the log configuration of the listener is modified.
  * > You can update the log configuration of a listener only after you enable the access log feature.
  *
  * @param request UpdateListenerLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateListenerLogConfigResponse
 */
async function updateListenerLogConfigWithOptions(request: UpdateListenerLogConfigRequest, runtime: Util.RuntimeOptions): UpdateListenerLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessLogRecordCustomizedHeadersEnabled)) {
    query['AccessLogRecordCustomizedHeadersEnabled'] = request.accessLogRecordCustomizedHeadersEnabled;
  }
  if (!Util.isUnset(request.accessLogTracingConfig)) {
    query['AccessLogTracingConfig'] = request.accessLogTracingConfig;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    query['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateListenerLogConfig',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **UpdateListenerLogConfig** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetListenerAttribute](~~2254865~~) to query the status of the task:
  * *   If a listener is in the **Configuring** state, the log configuration of the listener is being modified.
  * *   If a listener is in the **Running** state, the log configuration of the listener is modified.
  * > You can update the log configuration of a listener only after you enable the access log feature.
  *
  * @param request UpdateListenerLogConfigRequest
  * @return UpdateListenerLogConfigResponse
 */
async function updateListenerLogConfig(request: UpdateListenerLogConfigRequest): UpdateListenerLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateListenerLogConfigWithOptions(request, runtime);
}

model UpdateLoadBalancerAddressTypeConfigRequest {
  addressType?: string(name='AddressType', description='The new network type. Valid values:

*   **Internet**: The ALB instance uses a public IP address. The domain name of the ALB instance is resolved to the public IP address. Therefore, the ALB instance can be accessed over the Internet.
*   **Intranet**: The ALB instance uses a private IP address. The domain name of the ALB instance is resolved to the private IP address. In this case, the ALB instance can be accessed over the virtual private cloud (VPC) where the ALB instance is deployed.', example='Internet'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: string(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ALB instance ID.', example='lb-bp1o94dp5i6ea****'),
  zoneMappings?: [ 
    {
      allocationId?: string(name='AllocationId', description='The ID of an EIP instance. You can specify up to 10 zone IDs.

> This parameter is required if you want to change the network type from internal-facing to Internet-facing.', example='eip-bp1aedxso6u80u0qf****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an ALB instance. You can specify up to 10 vSwitch IDs.', example='vsw-bp10ttov87felojcn****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone where the ALB instance is deployed. You can specify up to 10 zone IDs.

You can call the [DescribeZones](~~189196~~) operation to query the most recent zone list.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The zones and the vSwitches. You must specify at least two zones.'),
}

model UpdateLoadBalancerAddressTypeConfigResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous job.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model UpdateLoadBalancerAddressTypeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLoadBalancerAddressTypeConfigResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * *   An ALB instance is created. For more information about how to create an ALB instance, see [CreateLoadBalancer](~~214358~~).
  * *   If you want to change the network type from internal-facing to Internet-facing, you must first create an elastic IP address (EIP). For more information, see [AllocateEipAddress](~~120192~~).
  * ## Usage notes
  * **UpdateLoadBalancerAddressTypeConfig** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the status of the task.
  * *   If an ALB instance is in the **Configuring** state, the network type is being changed.
  * *   If an ALB instance is in the **Active** state, the network type has been changed.
  *
  * @param request UpdateLoadBalancerAddressTypeConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateLoadBalancerAddressTypeConfigResponse
 */
async function updateLoadBalancerAddressTypeConfigWithOptions(request: UpdateLoadBalancerAddressTypeConfigRequest, runtime: Util.RuntimeOptions): UpdateLoadBalancerAddressTypeConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.zoneMappings)) {
    query['ZoneMappings'] = request.zoneMappings;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLoadBalancerAddressTypeConfig',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Prerequisites
  * *   An ALB instance is created. For more information about how to create an ALB instance, see [CreateLoadBalancer](~~214358~~).
  * *   If you want to change the network type from internal-facing to Internet-facing, you must first create an elastic IP address (EIP). For more information, see [AllocateEipAddress](~~120192~~).
  * ## Usage notes
  * **UpdateLoadBalancerAddressTypeConfig** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetLoadBalancerAttribute](~~214362~~) operation to query the status of the task.
  * *   If an ALB instance is in the **Configuring** state, the network type is being changed.
  * *   If an ALB instance is in the **Active** state, the network type has been changed.
  *
  * @param request UpdateLoadBalancerAddressTypeConfigRequest
  * @return UpdateLoadBalancerAddressTypeConfigResponse
 */
async function updateLoadBalancerAddressTypeConfig(request: UpdateLoadBalancerAddressTypeConfigRequest): UpdateLoadBalancerAddressTypeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLoadBalancerAddressTypeConfigWithOptions(request, runtime);
}

model UpdateLoadBalancerAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and sends the request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed. This is the default value.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance.', example='alb-o9ulmq5hgn68jk****'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the ALB instance. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='lb-instance-test'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='It must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter.

This parameter takes effect only when **ModificationProtectionStatus** is set to **ConsoleProtection**.', example='test'),
    status?: string(name='Status', description='The status of the configuration read-only mode. Valid values:

*   **NonProtection**: disables the configuration read-only mode. In this case, you cannot specify **ModificationProtectionReason**. If you specify **ModificationProtectionReason**, the value of the parameter is cleared.
*   **ConsoleProtection**: enables the configuration read-only mode. In this case, you can specify **ModificationProtectionReason**.

> If you set this parameter to **ConsoleProtection**, you cannot use the ALB console to modify instance configurations. However, you can call API operations to modify instance configurations.', example='ConsoleProtection'),
  }(name='ModificationProtectionConfig', description='The configuration read-only mode.'),
}

model UpdateLoadBalancerAttributeResponseBody = {
  jobId?: string(name='JobId', description='The ID of the synchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateLoadBalancerAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLoadBalancerAttributeResponseBody(name='body'),
}

/**
  * **UpdateLoadBalancerAttribute** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  * *   If the ALB instance is in the **Configuring** state, the ALB instance is being modified.
  * *   If the ALB instance is in the **Active** state, the ALB instance is modified.
  *
  * @param request UpdateLoadBalancerAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateLoadBalancerAttributeResponse
 */
async function updateLoadBalancerAttributeWithOptions(request: UpdateLoadBalancerAttributeRequest, runtime: Util.RuntimeOptions): UpdateLoadBalancerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.loadBalancerName)) {
    query['LoadBalancerName'] = request.loadBalancerName;
  }
  if (!Util.isUnset(request.modificationProtectionConfig)) {
    query['ModificationProtectionConfig'] = request.modificationProtectionConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLoadBalancerAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **UpdateLoadBalancerAttribute** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  * *   If the ALB instance is in the **Configuring** state, the ALB instance is being modified.
  * *   If the ALB instance is in the **Active** state, the ALB instance is modified.
  *
  * @param request UpdateLoadBalancerAttributeRequest
  * @return UpdateLoadBalancerAttributeResponse
 */
async function updateLoadBalancerAttribute(request: UpdateLoadBalancerAttributeRequest): UpdateLoadBalancerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLoadBalancerAttributeWithOptions(request, runtime);
}

model UpdateLoadBalancerEditionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='false'),
  loadBalancerEdition?: string(name='LoadBalancerEdition', description='The edition of the ALB instance. Different editions have different limits and support different billing methods.

*   **Basic**: basic
*   **Standard**: standard
*   **StandardWithWaf**: WAF-enabled', example='Standard'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance.', example='lb-bp1b6c719dfa08ex****'),
}

model UpdateLoadBalancerEditionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model UpdateLoadBalancerEditionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLoadBalancerEditionResponseBody(name='body'),
}

/**
  * ##
  * *   You can upgrade a basic ALB instance to a standard ALB instance or a WAF-enabled ALB instance but you cannot downgrade a standard ALB instance or a WAF-enabled ALB instance to a basic ALB instance. For more information, see [Upgrade an ALB instance](~~214654~~).
  * *   **UpdateLoadBalancerEdition** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  *     *   If the ALB instance is in the **Configuring** state, the edition of the ALB instance is being modified.
  *     *   If the ALB instance is in the **Active** state, the edition of the ALB instance has been modified.
  *
  * @param request UpdateLoadBalancerEditionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateLoadBalancerEditionResponse
 */
async function updateLoadBalancerEditionWithOptions(request: UpdateLoadBalancerEditionRequest, runtime: Util.RuntimeOptions): UpdateLoadBalancerEditionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerEdition)) {
    query['LoadBalancerEdition'] = request.loadBalancerEdition;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLoadBalancerEdition',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ##
  * *   You can upgrade a basic ALB instance to a standard ALB instance or a WAF-enabled ALB instance but you cannot downgrade a standard ALB instance or a WAF-enabled ALB instance to a basic ALB instance. For more information, see [Upgrade an ALB instance](~~214654~~).
  * *   **UpdateLoadBalancerEdition** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  *     *   If the ALB instance is in the **Configuring** state, the edition of the ALB instance is being modified.
  *     *   If the ALB instance is in the **Active** state, the edition of the ALB instance has been modified.
  *
  * @param request UpdateLoadBalancerEditionRequest
  * @return UpdateLoadBalancerEditionResponse
 */
async function updateLoadBalancerEdition(request: UpdateLoadBalancerEditionRequest): UpdateLoadBalancerEditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLoadBalancerEditionWithOptions(request, runtime);
}

model UpdateLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='true'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ALB instance.', example='lb-bp1b6c719dfa08ex****'),
  zoneMappings?: [ 
    {
      intranetAddress?: string(name='IntranetAddress'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the zone. By default, you can specify only one vSwitch (subnet) for each zone of an ALB instance. You can specify up to 10 zone IDs.', example='vsw-bp1rmcrwg3erh1fh8****'),
      zoneId?: string(name='ZoneId', description='The name of the zone. You can call the [DescribeZones](~~189196~~) operation to query the zones. You can specify up to 10 zone IDs.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='The zones and the vSwitches. You must specify at least two zones. The specified zones overwrite the existing configurations.'),
}

model UpdateLoadBalancerZonesResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UpdateLoadBalancerZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLoadBalancerZonesResponseBody(name='body'),
}

/**
  * **UpdateLoadBalancerZones** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  * *   If an ALB instance is in the **Configuring** state, the zones are being modified.
  * *   If an ALB instance is in the **Active** state, the zones are modified.
  * > You may be charged after you call UpdateLoadBalancerZones.
  *
  * @param request UpdateLoadBalancerZonesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateLoadBalancerZonesResponse
 */
async function updateLoadBalancerZonesWithOptions(request: UpdateLoadBalancerZonesRequest, runtime: Util.RuntimeOptions): UpdateLoadBalancerZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.zoneMappings)) {
    query['ZoneMappings'] = request.zoneMappings;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLoadBalancerZones',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **UpdateLoadBalancerZones** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetLoadBalancerAttribute](~~214362~~) to query the status of the task.
  * *   If an ALB instance is in the **Configuring** state, the zones are being modified.
  * *   If an ALB instance is in the **Active** state, the zones are modified.
  * > You may be charged after you call UpdateLoadBalancerZones.
  *
  * @param request UpdateLoadBalancerZonesRequest
  * @return UpdateLoadBalancerZonesResponse
 */
async function updateLoadBalancerZones(request: UpdateLoadBalancerZonesRequest): UpdateLoadBalancerZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLoadBalancerZonesWithOptions(request, runtime);
}

model UpdateRuleAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='false'),
  priority?: int32(name='Priority', description='The priority of the forwarding rule. Valid values: **1 to 10000**. A lower value specifies a higher priority.

> The priorities of the forwarding rules created for the same listener must be unique.', example='10'),
  ruleActions?: [ 
    {
      corsConfig?: {
        allowCredentials?: string(name='AllowCredentials', description='Specifies whether credentials can be carried in CORS requests. Valid values:

*   **on**: yes
*   **off**: no', example='on'),
        allowHeaders?: [ string ](name='AllowHeaders', description='The allowed headers for CORS requests.'),
        allowMethods?: [ string ](name='AllowMethods', description='The allowed HTTP methods for CORS requests.'),
        allowOrigin?: [ string ](name='AllowOrigin', description='The allowed origins of CORS requests.'),
        exposeHeaders?: [ string ](name='ExposeHeaders', description='The headers that can be exposed.'),
        maxAge?: long(name='MaxAge', description='The maximum cache time of preflight requests in the browser. Unit: seconds.

Valid values: **-1** to **172800**.', example='1000'),
      }(name='CorsConfig', description='The origins allowed.'),
      fixedResponseConfig?: {
        content?: string(name='Content', description='The content of the custom response. The content can be up to 1 KB in size, and can contain only ASCII characters.', example='dssacav'),
        contentType?: string(name='ContentType', description='The format of the response.

Valid values: **text/plain**, **text/css**, **text/html**, **application/javascript**, and **application/json**.', example='text/plain'),
        httpCode?: string(name='HttpCode', description='The HTTP status code in the response. Valid values: **HTTP\\_2xx**, **HTTP\\_4xx**, and **HTTP\\_5xx**. **x** must be a digit.', example='HTTP_200'),
      }(name='FixedResponseConfig', description='The configuration of the custom response.'),
      forwardGroupConfig?: {
        serverGroupStickySession?: {
          enabled?: boolean(name='Enabled', description='Specifies whether to enable session persistence. Valid values:

*   **true**
*   **false** (default)', example='false'),
          timeout?: int32(name='Timeout', description='The timeout period of sessions. Unit: seconds. Valid values: 1 to 86400.', example='2'),
        }(name='ServerGroupStickySession', description='The configuration of session persistence for server groups.'),
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='The ID of the server group to which the request is forwarded.', example='sg--atstuj3rtoptyui****'),
            weight?: int32(name='Weight', description='The weight of the server group. A larger value specifies a higher weight. A server group with a higher weight receives more requests. Valid values: **0** to **100**.

*   If only one destination server group exists and you do not specify a weight, the default value **100** is used.
*   If more than one destination server group exists, you must specify weights.', example='30'),
          }
        ](name='ServerGroupTuples', description='The server groups to which requests are forwarded.'),
      }(name='ForwardGroupConfig', description='The configurations of the server groups.'),
      insertHeaderConfig?: {
        coverEnabled?: boolean(name='CoverEnabled', example='false'),
        key?: string(name='Key', description='The key of the header. The key must be 1 to 40 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The header key specified by **InsertHeaderConfig** must be unique.

> You cannot specify the following header keys (case-insensitive): `slb-id`, `slb-ip`, `x-forwarded-for`, `x-forwarded-proto`, `x-forwarded-eip`, `x-forwarded-port`, `x-forwarded-client-srcport`, `connection`, `upgrade`, `content-length`, `transfer-encoding`, `keep-alive`, `te`, `host`, `cookie`, `remoteip`, and `authority`.', example='key'),
        value?: string(name='Value', description='The value of the header to be inserted.

*   If **ValueType** is set to **SystemDefined**, you can specify one of the following header values:

    *   **ClientSrcPort**: the client port.
    *   **ClientSrcIp**: the client IP address.
    *   **Protocol**: the request protocol (HTTP or HTTPS).
    *   **SLBId**: the ID of the ALB instance.
    *   **SLBPort**: the listening port.

*   If **ValueType** is set to **UserDefined**, you can specify a custom header value. The header value must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and lower than 127`. You can use asterisks (\\*) and question marks (?) as wildcards. The value cannot start or end with a space character.

*   If **ValueType** is set to **ReferenceHeader**, you can reference one of the request headers. The header value must be 1 to 128 characters in length, and can contain lowercase letters, digits, underscores (\\_), and hyphens (-).', example='UserDefined'),
        valueType?: string(name='ValueType', description='The type of header. Valid values:

*   **UserDefined**: a custom header
*   **ReferenceHeader**: a header that references one of the request headers
*   **SystemDefined**: a header predefined by the system', example='UserDefined'),
      }(name='InsertHeaderConfig', description='The configuration of the header to be inserted.'),
      order?: int32(name='Order', description='The priority of the action. Valid values: **1 to 50000**. A lower value indicates a higher priority. The actions of a forwarding rule are applied in descending order of priority. This parameter is required. The priority of each action within a forwarding rule must be unique. You can specify priorities for at most 20 actions.', example='1'),
      redirectConfig?: {
        host?: string(name='Host', description='The hostname to which requests are redirected. Valid values:

*   **${host}** (default): If you set the value to ${host}, you cannot append other characters.

*   Limits on the value:

    *   The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, hyphens (-), and periods (.). Asterisks (\\*) and question marks (?) can be used as wildcards.
    *   The hostname must contain at least one period (.) but cannot start or end with a period (.).
    *   The rightmost domain label can contain only letters and wildcard characters. It does not contain digits or hyphens (-).
    *   The domain labels cannot start or end with a hyphen (-).
    *   You can use asterisks (\\*) and question marks (?) anywhere in a domain label as wildcard characters.', example='www.example.com'),
        httpCode?: string(name='HttpCode', description='The redirect type. Valid values: **301**, **302**, **303**, **307**, and **308**.', example='301'),
        path?: string(name='Path', description='The path to which requests are redirected. Valid values:

*   Default value: **${path}**. \\*\\*${host}**, **${protocol}**, and **${port}\\*\\* are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value. You must make sure that the custom value meets the following requirements:

    *   The value is 1 to 128 characters in length.
    *   It must start with a forward slash (/) and can contain letters, digits, and the following special characters: `$ - _ .+ / & ~ @ :`. It cannot contain the following special characters: `" % # ; ! ( ) [ ] ^ , "`. You can use asterisks (\\*) and question marks (?) as wildcards.', example='/test'),
        port?: string(name='Port', description='The port to which requests are redirected. Valid values:

*   **${port}** (default): If you set the value to ${port}, you cannot append other characters.
*   You can also enter a port number. Valid values: **1 to 63335**.', example='10'),
        protocol?: string(name='Protocol', description='The redirect protocol. Valid values:

*   **${protocol}** (default): If you set the value to ${protocol}, you cannot append other characters.
*   **HTTP** or **HTTPS**.

> HTTPS listeners support only HTTPS to HTTPS redirects.', example='HTTP'),
        query?: string(name='Query', description='The query string of the URL to which requests are redirected. Valid values:

*   Default value: **${query}**. \\*\\*${host}**, **${protocol}**, and **${port}\\*\\* are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value. You must make sure that the custom value meets the following requirements:

    *   The value must be 1 to 128 characters in length.
    *   It can contain printable characters, except space characters, the special characters `# [ ] { } \\ | < > &`, and uppercase letters.', example='quert'),
      }(name='RedirectConfig', description='The configuration of the redirection. You can specify at most 20 rewrites.'),
      removeHeaderConfig?: {
        key?: string(name='Key', example='test'),
      }(name='RemoveHeaderConfig'),
      rewriteConfig?: {
        host?: string(name='Host', description='The hostname to which requests are redirected. Valid values:

*   **${host}** (default): If you set the value to ${host}, you cannot append other characters.

*   If you want to specify a custom value, make sure that the following requirements are met:

    *   The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, hyphens (-), and periods (.). You can use asterisks (\\*) and question marks (?) as wildcard characters.
    *   The hostname must contain at least one period (.) but cannot start or end with a period (.).
    *   The rightmost domain label can contain only letters and wildcard characters. It does not contain digits or hyphens (-).
    *   The domain labels cannot start or end with a hyphen (-). You can use asterisks (\\*) and question marks (?) anywhere in a domain label as wildcard characters.', example='www.example.com'),
        path?: string(name='Path', description='The path to which requests are redirected. Valid values:

*   Default value: **${path}**. \\*\\*${host}**, **${protocol}**, and **${port}\\*\\* are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value. You must make sure that the custom value meets the following requirements:

    *   The value is 1 to 128 characters in length.
    *   It must start with a forward slash (/) and can contain letters, digits, and the following special characters: `$ - _ .+ / & ~ @ :`. It cannot contain the following special characters: `" % # ; ! ( ) [ ] ^ , "`. You can use asterisks (\\*) and question marks (?) as wildcards.', example='/tsdf'),
        query?: string(name='Query', description='The query string of the URL to which requests are distributed. Valid values:

*   Default value: **${query}**. \\*\\*${host}**, **${protocol}**, and **${port}\\*\\* are also supported. Each variable can be specified only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value. You must make sure that the custom value meets the following requirements:

    *   The value must be 1 to 128 characters in length.
    *   It can contain printable characters, except space characters, the special characters `# [ ] { } \\ | < > &`, and uppercase letters.', example='quedsa'),
      }(name='RewriteConfig', description='The configuration of the rewrite action.'),
      trafficLimitConfig?: {
        perIpQps?: int32(name='PerIpQps', description='The QPS of each IP address. Valid values: **1 to 100000**.

> If both the **QPS** and **PerIpQps** properties are specified, make sure that the value of the **QPS** property is smaller than the value of the PerIpQps property.', example='80'),
        QPS?: int32(name='QPS', description='The queries per second (QPS). Valid values: **1 to 100000**.', example='100'),
      }(name='TrafficLimitConfig', description='The action to throttle traffic.'),
      trafficMirrorConfig?: {
        mirrorGroupConfig?: {
          serverGroupTuples?: [ 
            {
              serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='srg-00mkgijak0w4qgz9****'),
            }
          ](name='ServerGroupTuples', description='The configuration of the server group to which traffic is mirrored.'),
        }(name='MirrorGroupConfig', description='The configuration of the server group to which traffic is mirrored.'),
        targetType?: string(name='TargetType', description='The type of destination to which network traffic is mirrored. Valid values:

*   **ForwardGroupMirror**: a server group
*   **SlsMirror**: Log Service', example='ForwardGroupMirror'),
      }(name='TrafficMirrorConfig', description='The action to mirror traffic.'),
      type?: string(name='Type', description='The action type. You can specify at most 11 types of actions. Valid values:

*   **ForwardGroup**: forwards a request to multiple vServer groups.
*   **Redirect**: redirects a request.
*   **FixedResponse**: returns a custom response.
*   **Rewrite**: rewrites a request.
*   **InsertHeader**: inserts a header.
*   **RemoveHeaderConfig**: deletes a header.
*   **TrafficLimitConfig**: throttles network traffic.
*   **TrafficMirrorConfig**: mirrors traffic.
*   **CorsConfig**: forwards requests based on CORS.

The following action types are supported:

*   **FinalType**: the last action to be performed in a forwarding rule. Each forwarding rule can contain only one FinalType action. You can specify a **ForwardGroup**, **Redirect**, or **FixedResponse** action as the FinalType action.
*   **ExtType**: the action or the actions to be performed before the **FinalType** action. A forwarding rule can contain one or more **ExtType** actions. To specify this parameter, you must also specify **FinalType**. You can specify multiple **InsertHeader** actions or one **Rewrite** action.', example='ForwardGroup'),
    }
  ](name='RuleActions', description='The actions of the forwarding rule.'),
  ruleConditions?: [ 
    {
      cookieConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='The key of the cookie. The key must be 1 to 100 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). However, uppercase letters, space characters, and the following special characters are not supported: `# [ ] { } \\ | < > &`.', example='test'),
            value?: string(name='Value', description='The value of the cookie. The value must be 1 to 128 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). However, uppercase letters, space characters, and the following special characters are not supported: `# [ ] { } \\ | < > &`.', example='test'),
          }
        ](name='Values', description='The configuration of the cookie.'),
      }(name='CookieConfig', description='The configuration of the cookie.'),
      headerConfig?: {
        key?: string(name='Key', description='The key of the header. The key must be 1 to 40 characters in length and can contain letters, digits, hyphens (-), and underscores (\\_). You cannot specify Cookie or Host.', example='Port'),
        values?: [ string ](name='Values', description='The values of the header.'),
      }(name='HeaderConfig', description='The configuration of the header.'),
      hostConfig?: {
        values?: [ string ](name='Values', description='The hostnames.'),
      }(name='HostConfig', description='The configurations of the hosts.'),
      methodConfig?: {
        values?: [ string ](name='Values', description='The request methods.'),
      }(name='MethodConfig', description='The configurations of the request methods.'),
      pathConfig?: {
        values?: [ string ](name='Values', description='The paths.'),
      }(name='PathConfig', description='The configurations of the paths.'),
      queryStringConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='They key of the query string. The key must be 1 to 100 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). However, the key cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.', example='test'),
            value?: string(name='Value', description='The value of the query string. The value must be 1 to 128 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). However, uppercase letters, space characters, and the following special characters are not supported: `# [ ] { } \\ | < > &`.', example='test'),
          }
        ](name='Values', description='The query string.'),
      }(name='QueryStringConfig', description='The configurations of the query strings. You can specify at most 20 query conditions.'),
      responseHeaderConfig?: {
        key?: string(name='Key', description='The key of the header.

*   The key must be 1 to 40 characters in length.
*   It can contain lowercase letters, digits, hyphens (-), and underscores (\\_).
*   Cookie and Host are not supported.', example='test'),
        values?: [ string ](name='Values', description='The values of the header.'),
      }(name='ResponseHeaderConfig', description='The configuration of the header.'),
      responseStatusCodeConfig?: {
        values?: [ string ](name='Values', description='The response status codes.'),
      }(name='ResponseStatusCodeConfig', description='The configurations of the response status codes.'),
      sourceIpConfig?: {
        values?: [ string ](name='Values', description='The IP address or CIDR block based on which user traffic is matched. You can specify multiple IP addresses or CIDR blocks.'),
      }(name='SourceIpConfig', description='The configuration of the source IP addresses based on which user traffic is matched. You can add at most five source IP-based forwarding rules.'),
      type?: string(name='Type', description='The type of the forwarding rule. You can specify up to seven types. Valid values:

*   **Host**: Requests are forwarded based on hosts.
*   **Path**: Requests are forwarded based on paths.
*   **Header**: Requests are forwarded based on HTTP headers.
*   **QueryString**: Requests are forwarded based on query strings.
*   **Method**: Requests are forwarded based on request methods.
*   **Cookie**: Requests are forwarded based on cookies.
*   **SourceIp**: Requests are distributed based on source IP addresses.
*   **ResponseHeader**: Requests are forwarded based on HTTP response headers.
*   **ResponseStatusCode**: Requests are forwarded based on response status codes.', example='Host'),
    }
  ](name='RuleConditions', description='The match condition of the forwarding rule.'),
  ruleId?: string(name='RuleId', description='The ID of the forwarding rule.', example='rule-4dp5i6ea****'),
  ruleName?: string(name='RuleName', description='The name of the forwarding rule. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='rule-instance-test'),
}

model UpdateRuleAttributeResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F5378-41F6-4AE4-92F8-7FF34B540710'),
}

model UpdateRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRuleAttributeResponseBody(name='body'),
}

/**
  * *   **UpdateRuleAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of a forwarding rule:
  *     *   If a forwarding rule is in the **Configuring** state, the forwarding rule is being updated.
  *     *   If a forwarding rule is in the **Available** state, the forwarding rule is updated.
  * *   You can set **RuleConditions** and **RuleActions** to add conditions and actions to a forwarding rule. Take note of the following limits on the number of conditions and the number of actions in each forwarding rule:
  *     *   Number of conditions: You can specify at most 5 for a basic Application Load Balancer (ALB) instance, at most 10 for a standard ALB instance, and at most 10 for a WAF-enabled ALB instance.
  *     *   Number of actions: You can specify at most 3 for a basic ALB instance, at most 5 for a standard ALB instance, and at most 5 for a WAF-enabled ALB instance.
  *
  * @param request UpdateRuleAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateRuleAttributeResponse
 */
async function updateRuleAttributeWithOptions(request: UpdateRuleAttributeRequest, runtime: Util.RuntimeOptions): UpdateRuleAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.ruleActions)) {
    query['RuleActions'] = request.ruleActions;
  }
  if (!Util.isUnset(request.ruleConditions)) {
    query['RuleConditions'] = request.ruleConditions;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRuleAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   **UpdateRuleAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of a forwarding rule:
  *     *   If a forwarding rule is in the **Configuring** state, the forwarding rule is being updated.
  *     *   If a forwarding rule is in the **Available** state, the forwarding rule is updated.
  * *   You can set **RuleConditions** and **RuleActions** to add conditions and actions to a forwarding rule. Take note of the following limits on the number of conditions and the number of actions in each forwarding rule:
  *     *   Number of conditions: You can specify at most 5 for a basic Application Load Balancer (ALB) instance, at most 10 for a standard ALB instance, and at most 10 for a WAF-enabled ALB instance.
  *     *   Number of actions: You can specify at most 3 for a basic ALB instance, at most 5 for a standard ALB instance, and at most 5 for a WAF-enabled ALB instance.
  *
  * @param request UpdateRuleAttributeRequest
  * @return UpdateRuleAttributeResponse
 */
async function updateRuleAttribute(request: UpdateRuleAttributeRequest): UpdateRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleAttributeWithOptions(request, runtime);
}

model UpdateRulesAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx HTTP` status code is returned and the operation is performed.', example='false'),
  rules?: [ 
    {
      priority?: int32(name='Priority', description='The priority of the forwarding rule. Valid values: **1 to 10000**. A lower value specifies a higher priority. You can specify priorities for up to 20 forwarding rules.

> The priority of each forwarding rule added to a listener must be unique.', example='10'),
      ruleActions?: [ 
        {
          corsConfig?: {
            allowCredentials?: string(name='AllowCredentials', description='Specifies whether credentials can be carried in CORS requests. Valid values:

*   **on**
*   **off**', example='on'),
            allowHeaders?: [ string ](name='AllowHeaders', description='The allowed headers for CORS requests.'),
            allowMethods?: [ string ](name='AllowMethods', description='The allowed HTTP methods for CORS requests.'),
            allowOrigin?: [ string ](name='AllowOrigin', description='The allowed origins of CORS requests.'),
            exposeHeaders?: [ string ](name='ExposeHeaders', description='The headers that can be exposed.'),
            maxAge?: long(name='MaxAge', description='The maximum cache time of preflight requests in the browser. Unit: seconds.

Valid values: **-1** to **172800**.', example='1000'),
          }(name='CorsConfig', description='The CORS configuration.'),
          fixedResponseConfig?: {
            content?: string(name='Content', description='The content of the custom response. The content can be up to 1 KB in size, and can contain only ASCII characters.', example='dssacav'),
            contentType?: string(name='ContentType', description='The format of the response.

Valid values: **text/plain**, **text/css**, **text/html**, **application/javascript**, and **application/json**.', example='text/plain'),
            httpCode?: string(name='HttpCode', description='The HTTP status code in the response. Valid values: **HTTP\\_2xx**, **HTTP\\_4xx**, and **HTTP\\_5xx**. **x** must be a digit.', example='200'),
          }(name='FixedResponseConfig', description='The configuration of the action to return a custom response. You can specify the configurations of up to 20 actions to return a custom response.'),
          forwardGroupConfig?: {
            serverGroupStickySession?: {
              enabled?: boolean(name='Enabled', description='Specifies whether to enable session persistence. Valid values:

*   **true**
*   **false** (default)', example='false'),
              timeout?: int32(name='Timeout', description='The timeout period of sessions. Unit: seconds. Valid values: **1** to **86400**.', example='2'),
            }(name='ServerGroupStickySession', description='The configuration of session persistence for server groups.'),
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='The server group to which requests are forwarded.', example='sg-atstuj3rtoptyui****'),
                weight?: int32(name='Weight', description='The weight of the server group. A larger value specifies a higher weight. A server group with a higher weight receives more requests. Valid values: **0** to **100**.

*   If only one destination server group exists and you do not specify a weight, the default value **100** is used.
*   If more than one destination server group exists, you must specify weights.', example='30'),
              }
            ](name='ServerGroupTuples', description='The server groups to which requests are forwarded.'),
          }(name='ForwardGroupConfig', description='The configuration of the action to forward requests to server groups. You can specify the configurations of up to 20 actions to forward requests to server groups.'),
          insertHeaderConfig?: {
            coverEnabled?: boolean(name='CoverEnabled', description='Specifies whether to overwrite the request header. Valid values:

*   **true**
*   **false** (default)', example='false'),
            key?: string(name='Key', description='The key of the header to be inserted. The key must be 1 to 40 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The key specified in `InsertHeader` must be unique.

> You cannot use the following header keys (case-insensitive): `slb-id`, `slb-ip`, `x-forwarded-for`, `x-forwarded-proto`, `x-forwarded-eip`, `x-forwarded-port`, `x-forwarded-client-srcport`, `connection`, `upgrade`, `content-length`, `transfer-encoding`, `keep-alive`, `te, host`, `cookie`, `remoteip`, and `authority`.', example='test'),
            value?: string(name='Value', description='The value of the header to be inserted.

*   If **ValueType** is set to **SystemDefined**, you can specify one of the following header values:

    *   **ClientSrcPort**: the client port.
    *   **ClientSrcIp**: the client IP address.
    *   **Protocol**: the request protocol (HTTP or HTTPS).
    *   **SLBId**: the ALB instance ID.
    *   **SLBPort**: the listener port.

*   If **ValueType** is set to **UserDefined**, you can specify a custom header value. The header value must be 1 to 128 characters in length, and can contain printable characters whose ASCII values are `greater than or equal to 32 and lower than 127`. You can use asterisks (\\*) and question marks (?) as wildcards. The value cannot start or end with a space character.

*   If **ValueType** is set to **ReferenceHeader**, you can reference one of the request headers. The header value must be 1 to 128 characters in length, and can contain lowercase letters, digits, underscores (\\_), and hyphens (-).', example='UserDefined'),
            valueType?: string(name='ValueType', description='The type of the header. Valid values:

*   **UserDefined**: a user-defined header
*   **ReferenceHeader**: a header that is referenced from a request header.
*   **SystemDefined**: a system-defined header.', example='UserDefined'),
          }(name='InsertHeaderConfig', description='The configuration of the action to insert a header. You can specify the configurations of up to 20 actions to insert a header.'),
          order?: int32(name='Order', description='The priority of the action. Valid values: **1** to **50000**. A lower value specifies a higher priority. The actions of a forwarding rule are applied in descending order of priority. This parameter cannot be left empty. The priority of each action within a forwarding rule must be unique. You can specify priorities for up to 20 actions.', example='1'),
          redirectConfig?: {
            host?: string(name='Host', description='The hostname to which requests are forwarded.

Take note of the following rules when you specify a hostname:

*   The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, and the following special characters: - . \\* = ~ \\_ + \\ ^ ! $ & | ( ) \\[ ] ?.
*   The hostname must contain at least one period (.) but cannot start or end with a period (.).
*   The rightmost domain label can contain only letters, asterisks (*), and question marks (?), and cannot contain digits or hyphens (-). The leftmost `domain label` can contain asterisks (*).
*   The domain labels cannot start or end with a hyphen (-). You can specify asterisks (∗) and question marks (?) anywhere in a domain label.', example='www.example.com'),
            httpCode?: string(name='HttpCode', description='The redirect type. Valid values: **301**, **302**, **303**, **307**, and **308**.', example='301'),
            path?: string(name='Path', description='The path to which requests are redirected.

*   **${path}** (default): You can reference \\*\\*${host}**, **${protocol}** and **${port}\\*\\*. Each variable can be used only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value that meets the following requirements:

    *   The custom value must be 1 to 128 characters in length. You can use asterisks (\\*) and question marks (?) as wildcards.
    *   The custom value can contain letters, digits, and the following special characters: `$ - _ . + / & ~ @ : \\" * ?`. The custom value must start with a forward slash (/) and cannot contain the following characters: `" % # ; ! ( ) [ ] ^ , "`.', example='/test'),
            port?: string(name='Port', description='The port to which requests are forwarded.

Valid values: **1** to **63335**.', example='10'),
            protocol?: string(name='Protocol', description='The redirect protocol.

Valid values: **HTTP** and **HTTPS**.

> HTTPS listeners support only HTTP to HTTPS redirection.', example='HTTP'),
            query?: string(name='Query', description='The query string to which requests are forwarded.

The query string must be 1 to 128 characters in length, and can contain printable characters, excluding uppercase letters and the following special characters: `# [ ] { } \\ | < > &`.', example='quert'),
          }(name='RedirectConfig', description='The configuration of the redirect action. You can specify the configurations of up to 20 redirect actions.'),
          removeHeaderConfig?: {
            key?: string(name='Key', description='The key of the header.

*   The key must be 1 to 40 characters in length.
*   It can contain letters, digits, hyphens (-), and underscores (\\_).
*   Cookie and Host are not supported.', example='Port'),
          }(name='RemoveHeaderConfig', description='The action to remove an HTTP header. You can specify the configurations of up to 20 actions to remove an HTTP header.'),
          rewriteConfig?: {
            host?: string(name='Host', description='The hostname to which requests are forwarded.

Take note of the following rules when you specify a hostname:

*   The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, and the following special characters: - . \\* = ~ \\_ + \\ ^ ! $ & | ( ) \\[ ] ?.
*   The hostname must contain at least one period (.) but cannot start or end with a period (.).
*   The rightmost domain label can contain only letters, asterisks (*), and question marks (?), and cannot contain digits or hyphens (-). The leftmost `domain label` can contain asterisks (*).
*   The domain labels cannot start or end with a hyphen (-). You can specify asterisks (∗) and question marks (?) anywhere in a domain label.', example='www.example.com'),
            path?: string(name='Path', description='The path to which requests are forwarded.

*   **${path}** (default): You can reference \\*\\*${host}**, **${protocol}** and **${port}\\*\\*. Each variable can be used only once. You can specify one or more of the preceding variables in each request. You can also combine them with a custom value.

*   A custom value that meets the following requirements:

    *   The custom value must be 1 to 128 characters in length. You can use asterisks (\\*) and question marks (?) as wildcards.
    *   The custom value can contain letters, digits, and the following special characters: `$ - _ . + / & ~ @ : \\" * ?`. The custom value must start with a forward slash (/) and cannot contain the following characters: `" % # ; ! ( ) [ ] ^ , "`.', example='/tsdf'),
            query?: string(name='Query', description='The query string to which requests are forwarded.

The query string must be 1 to 128 characters in length, and can contain printable characters, excluding uppercase letters and the following special characters: `# [ ] { } \\ | < > &`.', example='quedsa'),
          }(name='RewriteConfig', description='The configuration of the rewrite action. You can specify the configurations of up to 20 rewrite actions.'),
          trafficLimitConfig?: {
            perIpQps?: int32(name='PerIpQps', description='The QPS per IP address. Valid values: **1** to **100000**.

> If you specify this parameter and QPS, the value of PerIpQps must be smaller than the value of QPS.', example='80'),
            QPS?: int32(name='QPS', description='The number of queries per second (QPS). Valid values: **1** to **100000**.', example='2'),
          }(name='TrafficLimitConfig', description='The configuration of traffic throttling. You can add up to 20 configuration records.'),
          trafficMirrorConfig?: {
            mirrorGroupConfig?: {
              serverGroupTuples?: [ 
                {
                  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='srg-00mkgijak0w4qgz9****'),
                }
              ](name='ServerGroupTuples', description='The server groups to which traffic is mirrored.'),
            }(name='MirrorGroupConfig', description='The configuration of the server group to which traffic is mirrored.'),
            targetType?: string(name='TargetType', description='The type of destination to which network traffic is mirrored. Valid values:

*   **ForwardGroupMirror**: a server group
*   **SlsMirror**: Log Service', example='ForwardGroupMirror'),
          }(name='TrafficMirrorConfig', description='The configuration of traffic mirroring. You can add up to 20 configuration records.'),
          type?: string(name='Type', description='The type of the forwarding rule. You can specify up to seven types. Valid values:

*   **Host**: Requests are distributed based on hosts.
*   **Path**: Requests are distributed based on paths.
*   **Header**: Requests are distributed based on HTTP headers.
*   **QueryString**: Requests are distributed based on query strings.
*   **Method**: Requests are distributed based on request methods.
*   **Cookie**: Requests are distributed based on cookies.
*   **SourceIp**: Requests are distributed based on source IP addresses.', example='Host'),
        }
      ](name='RuleActions', description='The actions of the forwarding rule.'),
      ruleConditions?: [ 
        {
          cookieConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='The key of the cookie. The key must be 1 to 100 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). However, the key cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.', example='test'),
                value?: string(name='Value', description='The value of the cookie. The value must be 1 to 128 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). However, the value cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.', example='test'),
              }
            ](name='Values', description='The cookies.'),
          }(name='CookieConfig', description='The match conditions for cookies. You can add up to 20 match conditions.'),
          headerConfig?: {
            key?: string(name='Key', description='The key of the header. The key must be 1 to 40 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). Cookie and Host are not supported.', example='Port'),
            values?: [ string ](name='Values', description='The values of the header.'),
          }(name='HeaderConfig', description='The match conditions for HTTP headers. You can specify up to 20 match conditions.'),
          hostConfig?: {
            values?: [ string ](name='Values', description='The hostnames.'),
          }(name='HostConfig', description='The match conditions for hostnames. You can specify up to 20 match conditions.'),
          methodConfig?: {
            values?: [ string ](name='Values', description='The HTTP request methods.'),
          }(name='MethodConfig', description='The match conditions for HTTP request methods. Valid values of N: **1** to **20**.'),
          pathConfig?: {
            values?: [ string ](name='Values', description='The paths.'),
          }(name='PathConfig', description='The match conditions for query strings. You can specify up to 20 match conditions.'),
          queryStringConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='They key of the query string.

The key must be 1 to 100 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). The key cannot contain uppercase letters, space characters, or the following special characters: `# [ ] { } \\ | < > &`.', example='test'),
                value?: string(name='Value', description='The value of the query string.

The value must be 1 to 128 characters in length, and can contain printable characters such as lowercase letters, asterisks (\\*), and question marks (?). However, uppercase letters, space characters, and the following special characters are not supported: `# [ ] { } \\ | < > &`.', example='test'),
              }
            ](name='Values', description='The key-value pairs of the query strings.'),
          }(name='QueryStringConfig', description='The match conditions for query strings. You can specify up to 20 match conditions.'),
          responseHeaderConfig?: {
            key?: string(name='Key', description='The key of the header.

*   The key must be 1 to 40 characters in length.
*   It can contain letters, digits, hyphens (-), and underscores (\\_).
*   Cookie and Host are not supported.', example='test'),
            values?: [ string ](name='Values', description='The values of the header.'),
          }(name='ResponseHeaderConfig', description='The configuration of the HTTP response header. You can specify the configurations of up to 20 HTTP response header.'),
          responseStatusCodeConfig?: {
            values?: [ string ](name='Values', description='The match conditions.'),
          }(name='ResponseStatusCodeConfig', description='The match conditions for response status codes. This parameter is required and takes effect when **Type** is set to **ResponseStatusCode**. You can specify up to 20 match conditions.'),
          sourceIpConfig?: {
            values?: [ string ](name='Values', description='The source IP addresses based on which user traffic is matched.'),
          }(name='SourceIpConfig', description='The configuration of the source IP addresses based on which user traffic is matched. You can specify up to 20 configuration records.'),
          type?: string(name='Type', description='The type of action specified in the forwarding rule. You can specify up to 11 types of actions. Valid values:

*   **ForwardGroup**: forwards a request to multiple vServer groups.
*   **Redirect**: redirects a request.
*   **FixedResponse**: returns a custom response.
*   **Rewrite**: rewrites a request.
*   **InsertHeader**: inserts a header.
*   **RemoveHeaderConfig**: deletes a header.
*   **TrafficLimitConfig**: throttles network traffic.
*   **TrafficMirrorConfig**: mirrors traffic.
*   **CorsConfig**: forwards requests based on CORS.

The following action types are supported:

*   **FinalType**: the last action to be performed in a forwarding rule. Each forwarding rule can contain only one FinalType action. You can specify a **ForwardGroup**, **Redirect**, or **FixedResponse** action as the FinalType action.
*   **ExtType**: the action or the actions to be performed before the **FinalType** action. A forwarding rule can contain one or more **ExtType** actions. To specify an ExtType action, you must specify a **FinalType** action. You can specify multiple **InsertHeader** actions or one **Rewrite** action.', example='ForwardGroup'),
        }
      ](name='RuleConditions', description='The match conditions of the forwarding rule.'),
      ruleId?: string(name='RuleId', description='The forwarding rule ID. You can specify up to 20 IDs.', example='rule-cxjh7vazn2jpnl****'),
      ruleName?: string(name='RuleName', description='The name of the forwarding rule. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter. You can specify names for up to 20 forwarding rules.', example='rule-instance-test'),
    }
  ](name='Rules', description='The forwarding rules. You can specify up to 10 forwarding rules in each request.'),
}

model UpdateRulesAttributeResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model UpdateRulesAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRulesAttributeResponseBody(name='body'),
}

/**
  * **UpdateRulesAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of the task.
  * *   If a forwarding rule is in the **Configuring** state, the forwarding rule is being updated.
  * *   If a forwarding rule is in the **Available** state, the forwarding rule is updated.
  * *   You can set **RuleConditions** and **RuleActions** to add conditions and actions to a forwarding rule. Take note of the following limits on the maximum number of conditions and the maximum number of actions in each forwarding rule:
  *     *   Limits on conditions: 5 for a basic Application Load Balancer (ALB) instance, 10 for a standard ALB instance, and 10 for a WAF-enabled ALB instance.
  *     *   Limits on actions: 3 for a basic ALB instance, 5 for a standard ALB instance, and 5 for a WAF-enabled ALB instance.
  *
  * @param request UpdateRulesAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateRulesAttributeResponse
 */
async function updateRulesAttributeWithOptions(request: UpdateRulesAttributeRequest, runtime: Util.RuntimeOptions): UpdateRulesAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRulesAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **UpdateRulesAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListRules](~~214379~~) operation to query the status of the task.
  * *   If a forwarding rule is in the **Configuring** state, the forwarding rule is being updated.
  * *   If a forwarding rule is in the **Available** state, the forwarding rule is updated.
  * *   You can set **RuleConditions** and **RuleActions** to add conditions and actions to a forwarding rule. Take note of the following limits on the maximum number of conditions and the maximum number of actions in each forwarding rule:
  *     *   Limits on conditions: 5 for a basic Application Load Balancer (ALB) instance, 10 for a standard ALB instance, and 10 for a WAF-enabled ALB instance.
  *     *   Limits on actions: 3 for a basic ALB instance, 5 for a standard ALB instance, and 5 for a WAF-enabled ALB instance.
  *
  * @param request UpdateRulesAttributeRequest
  * @return UpdateRulesAttributeResponse
 */
async function updateRulesAttribute(request: UpdateRulesAttributeRequest): UpdateRulesAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRulesAttributeWithOptions(request, runtime);
}

model UpdateSecurityPolicyAttributeRequest {
  ciphers?: [ string ](name='Ciphers', description='The supported cipher suites.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true'),
  securityPolicyId?: string(name='SecurityPolicyId', description='The security policy ID.', example='spy-n0kn923****'),
  securityPolicyName?: string(name='SecurityPolicyName', description='The name of the security policy.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test-secrity'),
  TLSVersions?: [ string ](name='TLSVersions', description='The supported TLS protocol versions.'),
}

model UpdateSecurityPolicyAttributeResponseBody = {
  jobId?: string(name='JobId', description='The asynchronous task ID.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
}

model UpdateSecurityPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSecurityPolicyAttributeResponseBody(name='body'),
}

/**
  * ##
  * **UpdateSecurityPolicyAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListSecurityPolicies](~~213609~~) to query the status of the task.
  * *   If a security policy is in the **Configuring** state, the security policy is being updated.
  * *   If a security policy is in the **Available** state, the security policy is updated.
  *
  * @param request UpdateSecurityPolicyAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateSecurityPolicyAttributeResponse
 */
async function updateSecurityPolicyAttributeWithOptions(request: UpdateSecurityPolicyAttributeRequest, runtime: Util.RuntimeOptions): UpdateSecurityPolicyAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ciphers)) {
    query['Ciphers'] = request.ciphers;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.securityPolicyId)) {
    query['SecurityPolicyId'] = request.securityPolicyId;
  }
  if (!Util.isUnset(request.securityPolicyName)) {
    query['SecurityPolicyName'] = request.securityPolicyName;
  }
  if (!Util.isUnset(request.TLSVersions)) {
    query['TLSVersions'] = request.TLSVersions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSecurityPolicyAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ##
  * **UpdateSecurityPolicyAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListSecurityPolicies](~~213609~~) to query the status of the task.
  * *   If a security policy is in the **Configuring** state, the security policy is being updated.
  * *   If a security policy is in the **Available** state, the security policy is updated.
  *
  * @param request UpdateSecurityPolicyAttributeRequest
  * @return UpdateSecurityPolicyAttributeResponse
 */
async function updateSecurityPolicyAttribute(request: UpdateSecurityPolicyAttributeRequest): UpdateSecurityPolicyAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSecurityPolicyAttributeWithOptions(request, runtime);
}

model UpdateServerGroupAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: checks the request without performing the operation. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a `2xx` HTTP status code is returned and the operation is performed.', example='true'),
  healthCheckConfig?: {
    healthCheckCodes?: [ string ](name='HealthCheckCodes', description='The HTTP status codes that are used to determine whether the backend server passes the health check.'),
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that you want to use for health checks on backend servers.

Valid values: **0** to **65535**.

If you set the value to **0**, the ports of backend servers are used for health checks.

> This parameter takes effect when the **HealthCheckEnabled** parameter is set to **true**.', example='80'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='Specifies whether to enable the health check feature. Valid values:

*   **true** (default)
*   **false**', example='true'),
    healthCheckHost?: string(name='HealthCheckHost', description='The domain name that is used for health checks. The domain name must meet the following requirements:

*   The domain name must be 1 to 80 characters in length.
*   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).
*   It must contain at least one period (.) but cannot start or end with a period (.).
*   The rightmost field of the domain name can contain only letters and cannot contain digits or hyphens (-).
*   Other fields cannot start or end with a hyphen (-).

> This parameter takes effect when the **HealthCheckEnabled** parameter is set to true and the **HealthCheckProtocol** parameter is set to **HTTP**.', example='example.com'),
    healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='The version of HTTP that is used for health checks. Valid values:

*   **HTTP1.0**
*   **HTTP1.1**

> This parameter takes effect when the **HealthCheckEnabled** parameter is set to true and the **HealthCheckProtocol** parameter is set to **HTTP**.', example='HTTP1.1'),
    healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Unit: seconds.

Valid values: **1** to **50**.

> This parameter takes effect when the **HealthCheckEnabled** parameter is set to **true**.', example='5'),
    healthCheckMethod?: string(name='HealthCheckMethod', description='The method that you want to use for the health check. Valid values:

*   **GET**: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
*   **POST**: gRPC health checks automatically use the POST method.
*   **HEAD**: HTTP health checks automatically use the HEAD method.

> This parameter takes effect when the **HealthCheckEnabled** parameter is set to true and the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.', example='HEAD'),
    healthCheckPath?: string(name='HealthCheckPath', description='The path that is used for health checks.

The path must be 1 to 80 characters in length and can contain only letters, digits, and the following special characters: `- / . % ? # & =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : \\" , +`. The path must start with a forward slash (`/`).

> This parameter takes effect when the **HealthCheckEnabled** parameter is set to **true** and the **HealthCheckProtocol** parameter is set to **HTTP**.', example='/test/index.html'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', description='The protocol that you want to use for health checks. Valid values:

*   **HTTP**: To perform HTTP health checks, ALB sends HEAD or GET requests to a backend server to check whether the backend server is healthy.
*   **TCP**: To perform TCP health checks, ALB sends SYN packets to a backend server to check whether the port of the backend server is available to receive requests.
*   **gRPC**: To perform gRPC health checks, ALB sends POST or GET requests to a backend server to check whether the backend server is healthy.', example='HTTP'),
    healthCheckTimeout?: int32(name='HealthCheckTimeout', description='Specify the timeout period of a health check response. If a backend server, such as an Elastic Compute Service (ECS) instance, does not return a health check response within the specified timeout period, the server fails the health check. Unit: seconds.

Valid values: **1** to **300**.

> 

*   If the value of the **HealthCheckTimeout** parameter is smaller than that of the **HealthCheckInterval** parameter, the timeout period specified by the **HealthCheckTimeout** parameter is ignored and the value of the **HealthCheckInterval** parameter is used as the timeout period.

*   This parameter takes effect when the **HealthCheckEnabled** parameter is set to **true**.', example='3'),
    healthyThreshold?: int32(name='HealthyThreshold', description='The number of times that an unhealthy backend server must consecutively pass health checks before it can be declared healthy (from **fail** to **success**).

Valid values: **2** to **10**.', example='4'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status is changed from **success** to **fail**.

Valid values: **2** to **10**.', example='4'),
  }(name='HealthCheckConfig', description='The configuration of health checks.'),
  scheduler?: string(name='Scheduler', description='The scheduling algorithm. Valid values:

*   **Wrr**: the weighted round robin algorithm. Backend servers that have higher weights receive more requests than those that have lower weights.
*   **Wlc**: the weighted least connections algorithm. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
*   **Sch**: the consistent hashing algorithm. Requests from the same source IP address are distributed to the same backend server.', example='Wrr'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtop****'),
  serverGroupName?: string(name='ServerGroupName', description='The server group name.

The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.', example='test'),
  serviceName?: string(name='ServiceName', description='This parameter is available only if the ALB Ingress controller is used. In this case, set this parameter to the name of the `Kubernetes Service` that is associated with the server group.', example='test2'),
  stickySessionConfig?: {
    cookie?: string(name='Cookie', description='The cookie to be configured on the server.

The cookie must be 1 to 200 characters in length and can contain only ASCII characters and digits. It cannot contain commas (,), semicolons (;), or space characters. It cannot start with a dollar sign ($).

> This parameter takes effect when the **StickySessionEnabled** parameter is set to **true** and the **StickySessionType** parameter is set to **Server**.', example='B490B5EBF6F3CD402E515D22BCDA1598'),
    cookieTimeout?: int32(name='CookieTimeout', description='The timeout period of a cookie. Unit: seconds.

Valid values: **1** to **86400**.

> This parameter takes effect when the **StickySessionEnabled** parameter is set to **true** and the **StickySessionType** parameter is set to **Insert**.', example='1000'),
    stickySessionEnabled?: boolean(name='StickySessionEnabled', description='Specifies whether to enable session persistence. Valid values:

*   **true**
*   **false** (default)', example='false'),
    stickySessionType?: string(name='StickySessionType', description='The method that is used to handle a cookie. Valid values:

*   **Insert**: inserts a cookie.

ALB inserts a cookie (SERVERID) into the first HTTP or HTTPS response packet that is sent to a client. The next request from the client contains this cookie and the listener forwards this request to the recorded backend server.

*   **Server**: rewrites a cookie.

When ALB detects a user-defined cookie, it overwrites the original cookie with the user-defined cookie. Subsequent requests to ALB carry this user-defined cookie, and ALB determines the destination servers of the requests based on the cookies.

> This parameter takes effect when the **StickySessionEnabled** parameter is set to **true** for the server group.', example='Insert'),
  }(name='StickySessionConfig', description='The configuration of session persistence.'),
  uchConfig?: {
    type?: string(name='Type', description='The type of the parameter.', example='QueryString'),
    value?: string(name='Value', description='The setting of consistent hashing.', example='abc'),
  }(name='UchConfig', description='The setting of consistent hashing based on URLs.'),
  upstreamKeepaliveEnabled?: boolean(name='UpstreamKeepaliveEnabled', description='Specifies whether to enable persistent TCP connections.'),
}

model UpdateServerGroupAttributeResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous job.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model UpdateServerGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServerGroupAttributeResponseBody(name='body'),
}

/**
  * ## Description
  * **UpdateServerGroupAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group:
  * *   If a server group is in the **Configuring** state, the configuration of the server group is being modified.
  * *   If a server group is in the **Available** state, the configuration of the server group is modified.
  *
  * @param request UpdateServerGroupAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateServerGroupAttributeResponse
 */
async function updateServerGroupAttributeWithOptions(request: UpdateServerGroupAttributeRequest, runtime: Util.RuntimeOptions): UpdateServerGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.healthCheckConfig)) {
    query['HealthCheckConfig'] = request.healthCheckConfig;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    query['ServerGroupId'] = request.serverGroupId;
  }
  if (!Util.isUnset(request.serverGroupName)) {
    query['ServerGroupName'] = request.serverGroupName;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.stickySessionConfig)) {
    query['StickySessionConfig'] = request.stickySessionConfig;
  }
  if (!Util.isUnset(request.uchConfig)) {
    query['UchConfig'] = request.uchConfig;
  }
  if (!Util.isUnset(request.upstreamKeepaliveEnabled)) {
    query['UpstreamKeepaliveEnabled'] = request.upstreamKeepaliveEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServerGroupAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * **UpdateServerGroupAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group:
  * *   If a server group is in the **Configuring** state, the configuration of the server group is being modified.
  * *   If a server group is in the **Available** state, the configuration of the server group is modified.
  *
  * @param request UpdateServerGroupAttributeRequest
  * @return UpdateServerGroupAttributeResponse
 */
async function updateServerGroupAttribute(request: UpdateServerGroupAttributeRequest): UpdateServerGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServerGroupAttributeWithOptions(request, runtime);
}

model UpdateServerGroupServersAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The value of **RequestId** for each API request is different.', example='593B0448-D13E-4C56-AC0D-FDF0FDE0E9A3'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  serverGroupId?: string(name='ServerGroupId', description='The server group ID.', example='sgp-atstuj3rtop****'),
  servers?: [ 
    {
      description?: string(name='Description', description='The description of the backend server. The description must be 2 to 256 characters in length and can contain letters, digits, periods (.), underscores (\\_), hyphens (-), commas (,), semicolons (;), forward slashes (/), and at signs (@). You can specify at most 40 servers in each call.', example='test'),
      port?: int32(name='Port', description='The port used by the backend server. Valid values: **1** to **65535**. You can specify at most 40 servers in each call.

> You do not need to set this parameter if **ServerType** is set to **Fc**.', example='80'),
      serverId?: string(name='ServerId', description='The ID of the backend server. You can specify up to 40 server IDs in each call.

*   If **ServerType** is set to **Ecs**, **Eni**, or **Eci**, set the ServerId parameter to the ID of an Elastic Compute Service (ECS) instance, an elastic network interface (ENI), or an elastic container instance.
*   If **ServerType** is set to **Ip**, set the ServerId parameter to an IP address.
*   If **ServerType** is set to **Fc**, set the ServerId parameter to the Alibaba Cloud Resource Name (ARN) of a function.', example='i-bp1f9kdprbgy9uiu****'),
      serverIp?: string(name='ServerIp', description='The IP address in inclusive ENI mode. You can specify at most 40 servers in each call.', example='192.168.1.1'),
      serverType?: string(name='ServerType', description='The type of the backend server. You can specify at most 40 servers in each call. Valid values:

*   **Ecs**
*   **Eni**
*   **Eci**
*   **Ip**
*   **Fc**', example='Ecs'),
      weight?: int32(name='Weight', description='The weight of the backend server. Valid values: **0** to **100**. Default value: **100**. If the weight of a backend server is set to **0**, no requests are forwarded to the backend server. You can specify at most 40 servers in each call.

> You do not need to set this parameter if **ServerType** is set to **Fc**.', example='100'),
    }
  ](name='Servers', description='The backend servers that you want to add to the server group. You can specify up to 40 servers in each call.'),
}

model UpdateServerGroupServersAttributeResponseBody = {
  jobId?: string(name='JobId', description='The ID of the asynchronous job.', example='72dcd26b-f12d-4c27-b3af-18f6aed5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='365F4154-92F6-4AE4-92F8-7FF34B540710'),
}

model UpdateServerGroupServersAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServerGroupServersAttributeResponseBody(name='body'),
}

/**
  * **UpdateServerGroupServersAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group.
  *     *   If a server group is in the **Configuring** state, it indicates that the server group is being modified.
  *     *   If a server group is in the **Available** state, it indicates that the server group is running.
  * 2.  You can call the [ListServerGroupServers](~~213628~~) operation to query the status of a backend server.
  *     *   If a backend server is in the **Configuring** state, it indicates that the backend server is being modified.
  *     *   If a backend server is in the **Available** state, it indicates that the backend server is running.
  *
  * @param request UpdateServerGroupServersAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateServerGroupServersAttributeResponse
 */
async function updateServerGroupServersAttributeWithOptions(request: UpdateServerGroupServersAttributeRequest, runtime: Util.RuntimeOptions): UpdateServerGroupServersAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    query['ServerGroupId'] = request.serverGroupId;
  }
  if (!Util.isUnset(request.servers)) {
    query['Servers'] = request.servers;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServerGroupServersAttribute',
    version = '2020-06-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **UpdateServerGroupServersAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background.
  * 1.  You can call the [ListServerGroups](~~213627~~) operation to query the status of a server group.
  *     *   If a server group is in the **Configuring** state, it indicates that the server group is being modified.
  *     *   If a server group is in the **Available** state, it indicates that the server group is running.
  * 2.  You can call the [ListServerGroupServers](~~213628~~) operation to query the status of a backend server.
  *     *   If a backend server is in the **Configuring** state, it indicates that the backend server is being modified.
  *     *   If a backend server is in the **Available** state, it indicates that the backend server is running.
  *
  * @param request UpdateServerGroupServersAttributeRequest
  * @return UpdateServerGroupServersAttributeResponse
 */
async function updateServerGroupServersAttribute(request: UpdateServerGroupServersAttributeRequest): UpdateServerGroupServersAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServerGroupServersAttributeWithOptions(request, runtime);
}

