/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Alb';
  @version = '2020-06-16';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddEntriesToAclRequest {
  aclEntries: [ 
    {
      description?: string(name='Description', description='描述信息'),
      entry: string(name='Entry', description='条目'),
    }
  ](name='AclEntries', description='条目信息列表', position='Query'),
  aclId: string(name='AclId', description='AclId', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
}

model AddEntriesToAclResponseBody = {
  jobId?: string(name='JobId', description='job'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddEntriesToAclResponse = {
  headers: map[string]string(name='headers'),
  body: AddEntriesToAclResponseBody(name='body'),
}

async function addEntriesToAcl(request: AddEntriesToAclRequest): AddEntriesToAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEntriesToAcl', 'POST', '/', 'json', false, 'json', request);
}

model AddServersToServerGroupRequest {
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  serverGroupId: string(name='ServerGroupId', description='后端服务器Id', position='Query'),
  servers: [ 
    {
      description?: string(name='Description', description='描述信息'),
      port?: int32(name='Port', description='后端端口号'),
      serverId: string(name='ServerId', description='后端服务器id'),
      serverIp?: string(name='ServerIp', description='后端服务器ip'),
      serverType: string(name='ServerType', description='后端服务器类型'),
      weight?: int32(name='Weight', description='后端服务器权重'),
    }
  ](name='Servers', description='后端服务器', position='Query'),
}

model AddServersToServerGroupResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddServersToServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddServersToServerGroupResponseBody(name='body'),
}

async function addServersToServerGroup(request: AddServersToServerGroupRequest): AddServersToServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddServersToServerGroup', 'POST', '/', 'json', false, 'json', request);
}

model ApplyHealthCheckTemplateToServerGroupRequest {
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  healthCheckTemplateId: string(name='HealthCheckTemplateId', description='健康检查模板Id', position='Query'),
  serverGroupId: string(name='ServerGroupId', description='服务器组Id', position='Query'),
}

model ApplyHealthCheckTemplateToServerGroupResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ApplyHealthCheckTemplateToServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyHealthCheckTemplateToServerGroupResponseBody(name='body'),
}

async function applyHealthCheckTemplateToServerGroup(request: ApplyHealthCheckTemplateToServerGroupRequest): ApplyHealthCheckTemplateToServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyHealthCheckTemplateToServerGroup', 'POST', '/', 'json', false, 'json', request);
}

model AssociateAclsWithListenerRequest {
  aclIds: [ string ](name='AclIds', description='访问控制策略Id', position='Query'),
  aclType: string(name='AclType', description='绑定类型', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description='预检此次请求', position='Query'),
  listenerId: string(name='ListenerId', description='监听Id', position='Query'),
}

model AssociateAclsWithListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model AssociateAclsWithListenerResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateAclsWithListenerResponseBody(name='body'),
}

async function associateAclsWithListener(request: AssociateAclsWithListenerRequest): AssociateAclsWithListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateAclsWithListener', 'POST', '/', 'json', false, 'json', request);
}

model AssociateAdditionalCertificatesWithListenerRequest {
  certificates: [ 
    {
      certificateId: string(name='CertificateId', description='证书Id'),
    }
  ](name='Certificates', description='证书列表', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  listenerId: string(name='ListenerId', description='监听Id', position='Query'),
}

model AssociateAdditionalCertificatesWithListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AssociateAdditionalCertificatesWithListenerResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateAdditionalCertificatesWithListenerResponseBody(name='body'),
}

async function associateAdditionalCertificatesWithListener(request: AssociateAdditionalCertificatesWithListenerRequest): AssociateAdditionalCertificatesWithListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateAdditionalCertificatesWithListener', 'POST', '/', 'json', false, 'json', request);
}

model AttachCommonBandwidthPackageToLoadBalancerRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='带宽包ID', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否只预检此次请求', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例ID', position='Query'),
  regionId: string(name='RegionId', description='地域ID', position='Query'),
}

model AttachCommonBandwidthPackageToLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AttachCommonBandwidthPackageToLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  body: AttachCommonBandwidthPackageToLoadBalancerResponseBody(name='body'),
}

async function attachCommonBandwidthPackageToLoadBalancer(request: AttachCommonBandwidthPackageToLoadBalancerRequest): AttachCommonBandwidthPackageToLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachCommonBandwidthPackageToLoadBalancer', 'POST', '/', 'json', false, 'json', request);
}

model CreateAclRequest {
  aclName?: string(name='AclName', description='Acl名称', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组Id', position='Query'),
}

model CreateAclResponseBody = {
  aclId?: string(name='AclId', description='AclId'),
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateAclResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAclResponseBody(name='body'),
}

async function createAcl(request: CreateAclRequest): CreateAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreateHealthCheckTemplateRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码', position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口号', position='Query'),
  healthCheckHost?: string(name='HealthCheckHost', description='域名', position='Query'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='时间间隔', position='Query'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='方法', position='Query'),
  healthCheckPath?: string(name='HealthCheckPath', description='uri', position='Query'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议', position='Query'),
  healthCheckTemplateName: string(name='HealthCheckTemplateName', description='名称', position='Query'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间', position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值', position='Query'),
}

model CreateHealthCheckTemplateResponseBody = {
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板ID'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateHealthCheckTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHealthCheckTemplateResponseBody(name='body'),
}

async function createHealthCheckTemplate(request: CreateHealthCheckTemplateRequest): CreateHealthCheckTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHealthCheckTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateListenerRequest {
  caCertificates?: [ 
    {
    }
  ](name='CaCertificates', description='监听默认CA证书列表，N当前取值范围为1', position='Query'),
  caEnabled?: boolean(name='CaEnabled', description='是否开启双向认证', position='Query'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='正式标识'),
    }
  ](name='Certificates', description='监听默认服务器证书列表，N当前取值范围为1', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  defaultActions: [ 
    {
      forwardGroupConfig: {
        serverGroupTuples: [ 
          {
            serverGroupId: string(name='ServerGroupId', description='服务器组ID'),
          }
        ](name='ServerGroupTuples', description='服务器组列表'),
      }(name='ForwardGroupConfig', description='转发组'),
      type: string(name='Type', description='动作类型'),
    }
  ](name='DefaultActions', description='监听默认动作', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  gzipEnabled?: boolean(name='GzipEnabled', description='是否开启Gzip压缩', position='Query'),
  http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP/2特性', position='Query'),
  idleTimeout?: int32(name='IdleTimeout', description='连接空闲超时时间', minimum=1, position='Query'),
  listenerDescription?: string(name='ListenerDescription', description='监听描述', position='Query'),
  listenerPort: int32(name='ListenerPort', description='监听端口', position='Query'),
  listenerProtocol: string(name='ListenerProtocol', description='监听协议', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡标识', position='Query'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='需要关联的QUIC监听ID，HTTPS监听时有效，QuicUpgradeEnabled为true时必选'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='是否开启quic升级，HTTPS监听时有效'),
  }(name='QuicConfig', description='HTTPS启用QUIC时相关属性', position='Query'),
  requestTimeout?: int32(name='RequestTimeout', description='请求超时时间', minimum=1, maximum=180, position='Query'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略', position='Query'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertClientVerifyEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='是否通过X-Forwarded-Clientcert-clientverify  头字段获取对访问负载均衡实例客户端证书的校验结果。HTTPS监听有效。'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertFingerprintEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='是否通过X-Forwarded-Clientcert-fingerprint 头字段获取访问负载均衡实例客户端证书的指纹取值，HTTPS监听有效。'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertIssuerDNEnabled的值为‘On’的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='是否通过 X-Forwarded-Clientcert-issuerdn 头字段获取访问负载均衡实例客户端证书的发行者信息。HTTPS监听有效。'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertSubjectDNEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='是否通过X-Forwarded-Clientcert-subjectdn  头字段获取访问负载均衡实例客户端证书的所有者信息。HTTPS监听有效。'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='是否通过X-Forwarded-Client-Port 头字段获取访问负载均衡实例客户端的端口。HTTPS监听有效。'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='是否通过X-Forwarded-Proto头字段获取负载均衡实例的监听协议。'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='是否通过SLB-ID头字段获取负载均衡实例ID。'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='是否通过X-Forwarded-Port 头字段获取负载均衡实例的监听端口。HTTPS监听有效。'),
  }(name='XForwardedForConfig', description='XForward字段相关的配置', position='Query'),
}

model CreateListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  listenerId?: string(name='ListenerId', description='监听标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateListenerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateListenerResponseBody(name='body'),
}

async function createListener(request: CreateListenerRequest): CreateListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateListener', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoadBalancerRequest {
  addressAllocatedMode?: string(name='AddressAllocatedMode', description='地址模式', position='Query'),
  addressType: string(name='AddressType', description='负载均衡的地址类型', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  deletionProtectionEnabled?: boolean(name='DeletionProtectionEnabled', description='是否开启删除保护', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  loadBalancerBillingConfig: {
    payType: string(name='PayType', description='实例的计费类型'),
  }(name='LoadBalancerBillingConfig', description='计费相关配置信息', position='Query'),
  loadBalancerEdition: string(name='LoadBalancerEdition', description='负载均衡的版本', position='Query'),
  loadBalancerName?: string(name='LoadBalancerName', description='名称', position='Query'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='设置修改保护状态的原因'),
    status?: string(name='Status', description='负载均衡修改保护状态'),
  }(name='ModificationProtectionConfig', description='负载均衡修改保护相关信息', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组', position='Query'),
  vpcId: string(name='VpcId', description='负载均衡实例的专有网络ID。', position='Query'),
  zoneMappings: [ 
    {
      vSwitchId: string(name='VSwitchId', description='交换机标识'),
      zoneId: string(name='ZoneId', description='可用区'),
    }
  ](name='ZoneMappings', description='可用区及交换机映射列表', position='Query'),
}

model CreateLoadBalancerResponseBody = {
  loadBalancerId?: string(name='LoadBalancerId', description='负载均衡实例标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoadBalancerResponseBody(name='body'),
}

async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadBalancer', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  listenerId: string(name='ListenerId', description='监听标识', position='Query'),
  priority: int32(name='Priority', description='转发规则优先级', position='Query'),
  ruleActions: [ 
    {
      fixedResponseConfig?: {
        content?: string(name='Content', description='内容'),
        contentType?: string(name='ContentType', description='内容类型'),
        httpCode?: string(name='HttpCode', description='HTTP响应码'),
      }(name='FixedResponseConfig', description='返回固定内容动作配置'),
      forwardGroupConfig?: {
        serverGroupStickySession?: {
          enabled?: boolean(name='Enabled', description='是否开启会话保持'),
          timeout?: int32(name='Timeout', description='超时时间'),
        }(name='ServerGroupStickySession', description='服务器组之间会话保持'),
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
          }
        ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
      }(name='ForwardGroupConfig', description='转发组动作配置'),
      insertHeaderConfig?: {
        key?: string(name='Key', description='HTTP标头'),
        value?: string(name='Value', description='HTTP标头内容'),
        valueType?: string(name='ValueType', description='取值类型'),
      }(name='InsertHeaderConfig', description='插入头部动作配置'),
      order: int32(name='Order', description='优先级'),
      redirectConfig?: {
        host?: string(name='Host', description='要跳转的主机地址'),
        httpCode?: string(name='HttpCode', description='跳转方式'),
        path?: string(name='Path', description='要跳转的路径'),
        port?: string(name='Port', description='要跳转的端口'),
        protocol?: string(name='Protocol', description='要跳转的协议'),
        query?: string(name='Query', description='要跳转的查询字符串'),
      }(name='RedirectConfig', description='重定向动作配置'),
      rewriteConfig?: {
        host?: string(name='Host', description='主机名'),
        path?: string(name='Path', description='路径'),
        query?: string(name='Query', description='查询'),
      }(name='RewriteConfig', description='内部重定向动作配置'),
      trafficLimitConfig?: {
        QPS?: int32(name='QPS'),
      }(name='TrafficLimitConfig', description='流量限速'),
      trafficMirrorConfig?: {
        mirrorGroupConfig?: {
          serverGroupTuples?: [ 
            {
              serverGroupId?: string(name='ServerGroupId'),
            }
          ](name='ServerGroupTuples'),
        }(name='MirrorGroupConfig', description='镜像至服务器组'),
        targetType?: string(name='TargetType', description='镜像目标类型'),
      }(name='TrafficMirrorConfig', description='流量镜像'),
      type: string(name='Type', description='转发规则动作类型'),
    }
  ](name='RuleActions', description='转发规则动作', position='Query'),
  ruleConditions: [ 
    {
      cookieConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='Cookie条件键'),
            value?: string(name='Value', description='Cookie条件值'),
          }
        ](name='Values', description='Cookie键值对列表'),
      }(name='CookieConfig', description='Cookie条件配置'),
      headerConfig?: {
        key?: string(name='Key', description='HTTP标头键'),
        values?: [ string ](name='Values', description='HTTP标头值列表'),
      }(name='HeaderConfig', description='HTTP标头条件配置'),
      hostConfig?: {
        values?: [ string ](name='Values', description='主机名列表'),
      }(name='HostConfig', description='主机名条件配置'),
      methodConfig?: {
        values?: [ string ](name='Values', description='HTTP请求方法列表'),
      }(name='MethodConfig', description='HTTP请求方法条件配置'),
      pathConfig?: {
        values?: [ string ](name='Values', description='路径条件列表'),
      }(name='PathConfig', description='路径条件配置'),
      queryStringConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='查询字符串条件键'),
            value?: string(name='Value', description='查询字符串条件值'),
          }
        ](name='Values', description='查询字符串条件键值对列表'),
      }(name='QueryStringConfig', description='查询字符串条件配置'),
      sourceIpConfig?: {
        values?: [ string ](name='Values', description='基于源IP业务流量匹配'),
      }(name='SourceIpConfig', description='基于源IP业务流量匹配'),
      type: string(name='Type', description='条件类型'),
    }
  ](name='RuleConditions', description='转发规则条件', position='Query'),
  ruleName: string(name='RuleName', description='转发规则名称', position='Query'),
}

model CreateRuleResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  ruleId?: string(name='RuleId', description='转发规则标识'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateRulesRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  listenerId: string(name='ListenerId', description='监听标识', position='Query'),
  rules: [ 
    {
      direction?: string(name='Direction', description='转发规则方向'),
      priority: int32(name='Priority', description='转发规则优先级'),
      ruleActions: [ 
        {
          fixedResponseConfig?: {
            content?: string(name='Content', description='内容'),
            contentType?: string(name='ContentType', description='内容类型'),
            httpCode?: string(name='HttpCode', description='HTTP响应码'),
          }(name='FixedResponseConfig', description='返回固定内容动作配置'),
          forwardGroupConfig?: {
            serverGroupStickySession?: {
              enabled?: boolean(name='Enabled', description='是否开启会话保持'),
              timeout?: int32(name='Timeout', description='超时时间'),
            }(name='ServerGroupStickySession', description='服务器组之间会话保持'),
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
              }
            ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
          }(name='ForwardGroupConfig', description='转发组动作配置'),
          insertHeaderConfig?: {
            key?: string(name='Key', description='HTTP标头'),
            value?: string(name='Value', description='HTTP标头内容'),
            valueType?: string(name='ValueType', description='取值类型'),
          }(name='InsertHeaderConfig', description='插入头部动作配置'),
          order: int32(name='Order', description='优先级'),
          redirectConfig?: {
            host?: string(name='Host', description='要跳转的主机地址'),
            httpCode?: string(name='HttpCode', description='跳转方式'),
            path?: string(name='Path', description='要跳转的路径'),
            port?: string(name='Port', description='要跳转的端口'),
            protocol?: string(name='Protocol', description='要跳转的协议'),
            query?: string(name='Query', description='要跳转的查询字符串'),
          }(name='RedirectConfig', description='重定向动作配置'),
          rewriteConfig?: {
            host?: string(name='Host', description='主机名'),
            path?: string(name='Path', description='路径'),
            query?: string(name='Query', description='查询'),
          }(name='RewriteConfig', description='内部重定向动作配置'),
          trafficLimitConfig?: {
            QPS?: int32(name='QPS'),
          }(name='TrafficLimitConfig', description='流量限速'),
          trafficMirrorConfig?: {
            mirrorGroupConfig?: {
              serverGroupTuples?: [ 
                {
                  serverGroupId?: string(name='ServerGroupId'),
                }
              ](name='ServerGroupTuples'),
            }(name='MirrorGroupConfig', description='镜像至服务器组'),
            targetType?: string(name='TargetType', description='镜像目标类型'),
          }(name='TrafficMirrorConfig', description='流量镜像'),
          type: string(name='Type', description='转发规则动作类型'),
        }
      ](name='RuleActions', description='转发规则动作'),
      ruleConditions: [ 
        {
          cookieConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='Cookie条件键'),
                value?: string(name='Value', description='Cookie条件值'),
              }
            ](name='Values', description='Cookie键值对列表'),
          }(name='CookieConfig', description='Cookie条件配置'),
          headerConfig?: {
            key?: string(name='Key', description='HTTP标头键'),
            values?: [ string ](name='Values', description='HTTP标头值列表'),
          }(name='HeaderConfig', description='HTTP标头条件配置'),
          hostConfig?: {
            values?: [ string ](name='Values', description='主机名列表'),
          }(name='HostConfig', description='主机名条件配置'),
          methodConfig?: {
            values?: [ string ](name='Values', description='HTTP请求方法列表'),
          }(name='MethodConfig', description='HTTP请求方法条件配置'),
          pathConfig?: {
            values?: [ string ](name='Values', description='路径条件列表'),
          }(name='PathConfig', description='路径条件配置'),
          queryStringConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='查询字符串条件键'),
                value?: string(name='Value', description='查询字符串条件值'),
              }
            ](name='Values', description='查询字符串条件键值对列表'),
          }(name='QueryStringConfig', description='查询字符串条件配置'),
          responseHeaderConfig?: {
            key?: string(name='Key', description='返回HTTP标头键'),
            values?: [ string ](name='Values', description='返回HTTP标头值'),
          }(name='ResponseHeaderConfig', description='返回HTTP标头'),
          sourceIpConfig?: {
            values?: [ string ](name='Values', description='基于源IP业务流量匹配'),
          }(name='SourceIpConfig', description='基于源IP业务流量匹配'),
          type: string(name='Type', description='条件类型'),
        }
      ](name='RuleConditions', description='转发规则条件'),
      ruleName: string(name='RuleName', description='转发规则名称'),
    }
  ](name='Rules', description='转发规则列表', position='Query'),
}

model CreateRulesResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  ruleIds?: [ 
    {
      priority?: int32(name='Priority', description='转发规则优先级'),
      ruleId?: string(name='RuleId', description='转发规则标识'),
    }
  ](name='RuleIds', description='转发规则标识列表'),
}

model CreateRulesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRulesResponseBody(name='body'),
}

async function createRules(request: CreateRulesRequest): CreateRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRules', 'POST', '/', 'json', false, 'json', request);
}

model CreateSecurityPolicyRequest {
  ciphers: [ string ](name='Ciphers', description='加密套件', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组id', position='Query'),
  securityPolicyName: string(name='SecurityPolicyName', description='安全策略名称', position='Query'),
  TLSVersions: [ string ](name='TLSVersions', description='tls版本', position='Query'),
}

model CreateSecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略id'),
}

model CreateSecurityPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecurityPolicyResponseBody(name='body'),
}

async function createSecurityPolicy(request: CreateSecurityPolicyRequest): CreateSecurityPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecurityPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateServerGroupRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  healthCheckConfig: {
    healthCheckCodes?: [ string ](name='HealthCheckCodes', description='健康检查正常的状态码'),
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查端口', minimum=0, maximum=65535),
    healthCheckEnabled: boolean(name='HealthCheckEnabled', description='是否启用健康检查'),
    healthCheckHost?: string(name='HealthCheckHost', description='健康检查域名'),
    healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='健康检查HTTP协议版本'),
    healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查间隔', minimum=1, maximum=50),
    healthCheckMethod?: string(name='HealthCheckMethod', description='健康检查方法'),
    healthCheckPath?: string(name='HealthCheckPath', description='健康检查Path'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', description='健康检查协议类型'),
    healthCheckTimeout?: int32(name='HealthCheckTimeout', description='健康检查超时时间', minimum=1, maximum=300),
    healthyThreshold?: int32(name='HealthyThreshold', description='健康检查成功判定阈值', minimum=2, maximum=10),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查不成功判定阈值', minimum=2, maximum=10),
  }(name='HealthCheckConfig', description='健康检查配置', position='Query'),
  protocol?: string(name='Protocol', description='后端协议类型', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组id', position='Query'),
  scheduler?: string(name='Scheduler', description='调度策略', position='Query'),
  serverGroupName: string(name='ServerGroupName', description='服务器组名称', position='Query'),
  serverGroupType?: string(name='ServerGroupType', description='服务器组类型', position='Query'),
  serviceName?: string(name='ServiceName', description='服务器名称', position='Query'),
  stickySessionConfig?: {
    cookie?: string(name='Cookie', description='服务器上配置的Cookie'),
    cookieTimeout?: int32(name='CookieTimeout', description='服务器上配置的Cookie', minimum=1, maximum=86400),
    stickySessionEnabled?: boolean(name='StickySessionEnabled', description='是否启用会话保持'),
    stickySessionType?: string(name='StickySessionType', description='会话保持类型'),
  }(name='StickySessionConfig', description='会话保持配置', position='Query'),
  vpcId?: string(name='VpcId', description='VpcId', position='Query'),
}

model CreateServerGroupResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
  serverGroupId?: string(name='ServerGroupId', description='服务器组id'),
}

model CreateServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServerGroupResponseBody(name='body'),
}

async function createServerGroup(request: CreateServerGroupRequest): CreateServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAclRequest {
  aclId: string(name='AclId', description='访问控制策略id', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='DryRun', position='Query'),
}

model DeleteAclResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAclResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAclResponseBody(name='body'),
}

async function deleteAcl(request: DeleteAclRequest): DeleteAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHealthCheckTemplatesRequest {
  clientToken?: string(name='ClientToken', description='幂等token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  healthCheckTemplateIds: [ string ](name='HealthCheckTemplateIds', description='健康检查模板Id列表', position='Query'),
}

model DeleteHealthCheckTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteHealthCheckTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHealthCheckTemplatesResponseBody(name='body'),
}

async function deleteHealthCheckTemplates(request: DeleteHealthCheckTemplatesRequest): DeleteHealthCheckTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHealthCheckTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DeleteListenerRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  listenerId: string(name='ListenerId', description='监听id', position='Query'),
}

model DeleteListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteListenerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteListenerResponseBody(name='body'),
}

async function deleteListener(request: DeleteListenerRequest): DeleteListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteListener', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLoadBalancerRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例id', position='Query'),
}

model DeleteLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLoadBalancerResponseBody(name='body'),
}

async function deleteLoadBalancer(request: DeleteLoadBalancerRequest): DeleteLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoadBalancer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  ruleId: string(name='RuleId', description='转发规则标识', position='Query'),
}

model DeleteRuleResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRulesRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  ruleIds: [ string ](name='RuleIds', description='同一个监听下的转发规则标识列表', position='Query'),
}

model DeleteRulesResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRulesResponseBody(name='body'),
}

async function deleteRules(request: DeleteRulesRequest): DeleteRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecurityPolicyRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  securityPolicyId: string(name='SecurityPolicyId', description='安全策略Id', position='Query'),
}

model DeleteSecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteSecurityPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityPolicyResponseBody(name='body'),
}

async function deleteSecurityPolicy(request: DeleteSecurityPolicyRequest): DeleteSecurityPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServerGroupRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否DryRun', position='Query'),
  serverGroupId: string(name='ServerGroupId', description='服务器组id', position='Query'),
}

model DeleteServerGroupResponseBody = {
  jobId?: string(name='JobId', description='job'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServerGroupResponseBody(name='body'),
}

async function deleteServerGroup(request: DeleteServerGroupRequest): DeleteServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='语言', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='名称'),
      regionEndpoint?: string(name='RegionEndpoint', description='endpoint'),
      regionId?: string(name='RegionId', description='RegionId'),
    }
  ](name='Regions', description='Region列表'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='可用区名称'),
      zoneId?: string(name='ZoneId', description='可用区id'),
    }
  ](name='Zones', description='可用区列表'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachCommonBandwidthPackageFromLoadBalancerRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='带宽包ID', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  dryRun?: boolean(name='DryRun', description='预校验', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例ID', position='Query'),
  regionId: string(name='RegionId', description='地域ID', position='Query'),
}

model DetachCommonBandwidthPackageFromLoadBalancerResponseBody = {
  jobId?: string(name='JobId', description='异步任务ID'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DetachCommonBandwidthPackageFromLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  body: DetachCommonBandwidthPackageFromLoadBalancerResponseBody(name='body'),
}

async function detachCommonBandwidthPackageFromLoadBalancer(request: DetachCommonBandwidthPackageFromLoadBalancerRequest): DetachCommonBandwidthPackageFromLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachCommonBandwidthPackageFromLoadBalancer', 'POST', '/', 'json', false, 'json', request);
}

model DisableDeletionProtectionRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  resourceId: string(name='ResourceId', description='实例id', position='Query'),
}

model DisableDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DisableDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDeletionProtectionResponseBody(name='body'),
}

async function disableDeletionProtection(request: DisableDeletionProtectionRequest): DisableDeletionProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDeletionProtection', 'POST', '/', 'json', false, 'json', request);
}

model DisableLoadBalancerAccessLogRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例id', position='Query'),
}

model DisableLoadBalancerAccessLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DisableLoadBalancerAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: DisableLoadBalancerAccessLogResponseBody(name='body'),
}

async function disableLoadBalancerAccessLog(request: DisableLoadBalancerAccessLogRequest): DisableLoadBalancerAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableLoadBalancerAccessLog', 'POST', '/', 'json', false, 'json', request);
}

model DissociateAclsFromListenerRequest {
  aclIds: [ string ](name='AclIds', description='访问控制策略Id', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description='预检此次请求', position='Query'),
  listenerId: string(name='ListenerId', description='监听Id', position='Query'),
}

model DissociateAclsFromListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model DissociateAclsFromListenerResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateAclsFromListenerResponseBody(name='body'),
}

async function dissociateAclsFromListener(request: DissociateAclsFromListenerRequest): DissociateAclsFromListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateAclsFromListener', 'POST', '/', 'json', false, 'json', request);
}

model DissociateAdditionalCertificatesFromListenerRequest {
  certificates: [ 
    {
      certificateId: string(name='CertificateId', description='证书Id'),
    }
  ](name='Certificates', description='证书列表', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  listenerId: string(name='ListenerId', description='监听Id', position='Query'),
}

model DissociateAdditionalCertificatesFromListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DissociateAdditionalCertificatesFromListenerResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateAdditionalCertificatesFromListenerResponseBody(name='body'),
}

async function dissociateAdditionalCertificatesFromListener(request: DissociateAdditionalCertificatesFromListenerRequest): DissociateAdditionalCertificatesFromListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateAdditionalCertificatesFromListener', 'POST', '/', 'json', false, 'json', request);
}

model EnableDeletionProtectionRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  resourceId: string(name='ResourceId', description='实例id', position='Query'),
}

model EnableDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model EnableDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDeletionProtectionResponseBody(name='body'),
}

async function enableDeletionProtection(request: EnableDeletionProtectionRequest): EnableDeletionProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableDeletionProtection', 'POST', '/', 'json', false, 'json', request);
}

model EnableLoadBalancerAccessLogRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例id', position='Query'),
  logProject: string(name='LogProject', description='日志Project', position='Query'),
  logStore: string(name='LogStore', description='日志Store', position='Query'),
}

model EnableLoadBalancerAccessLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model EnableLoadBalancerAccessLogResponse = {
  headers: map[string]string(name='headers'),
  body: EnableLoadBalancerAccessLogResponseBody(name='body'),
}

async function enableLoadBalancerAccessLog(request: EnableLoadBalancerAccessLogRequest): EnableLoadBalancerAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableLoadBalancerAccessLog', 'POST', '/', 'json', false, 'json', request);
}

model GetHealthCheckTemplateAttributeRequest {
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板Id', position='Query'),
}

model GetHealthCheckTemplateAttributeResponseBody = {
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口'),
  healthCheckHost?: string(name='HealthCheckHost', description='域名'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='间隔时间'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='方法'),
  healthCheckPath?: string(name='HealthCheckPath', description='uri'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议'),
  healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板Id'),
  healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='名称'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值'),
  requestId?: string(name='RequestId', description='Id of the request'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值'),
}

model GetHealthCheckTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetHealthCheckTemplateAttributeResponseBody(name='body'),
}

async function getHealthCheckTemplateAttribute(request: GetHealthCheckTemplateAttributeRequest): GetHealthCheckTemplateAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHealthCheckTemplateAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetListenerAttributeRequest {
  listenerId: string(name='ListenerId', description='监听标识', position='Query'),
}

model GetListenerAttributeResponseBody = {
  aclConfig?: {
    aclRelations?: [ 
      {
        aclId?: string(name='AclId', description='ACL标识'),
        status?: string(name='Status', description='ACL与监听关联的状态'),
      }
    ](name='AclRelations', description='监听绑定的访问策略组'),
    aclType?: string(name='AclType', description='访问控制类型'),
  }(name='AclConfig', description='ACL相关配置信息'),
  caEnabled?: boolean(name='CaEnabled', description='是否开启双向认证'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='正式标识'),
    }
  ](name='Certificates', description='监听默认服务器证书列表，N当前取值范围为1'),
  defaultActions?: [ 
    {
      forwardGroupConfig?: {
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
          }
        ](name='ServerGroupTuples', description='服务器组列表'),
      }(name='ForwardGroupConfig', description='转发到服务器组'),
      type?: string(name='Type', description='类型'),
    }
  ](name='DefaultActions', description='默认动作'),
  gzipEnabled?: boolean(name='GzipEnabled', description='是否开启Gzip压缩'),
  http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP/2特性'),
  idleTimeout?: int32(name='IdleTimeout', description='连接空闲超时时间'),
  listenerDescription?: string(name='ListenerDescription', description='监听描述'),
  listenerId?: string(name='ListenerId', description='监听标识'),
  listenerPort?: int32(name='ListenerPort', description='监听端口'),
  listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
  listenerStatus?: string(name='ListenerStatus', description='监听状态'),
  loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
  logConfig?: {
    accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='访问日志是否开启携带自定义Header'),
    accessLogTracingConfig?: {
      tracingEnabled?: boolean(name='TracingEnabled', description='Xtrace功能状态'),
      tracingSample?: int32(name='TracingSample', description='Xtrace功能状态'),
      tracingType?: string(name='TracingType', description='xtrace的类型'),
    }(name='AccessLogTracingConfig', description='访问日志Xtrace相关的配置'),
  }(name='LogConfig', description='监听访问日志相关配置'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='需要关联的QUIC监听ID，HTTPS监听时有效，QuicUpgradeEnabled为true时必选'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='是否开启quic升级，HTTPS监听时有效'),
  }(name='QuicConfig', description='HTTPS启用QUIC时相关属性'),
  requestId?: string(name='RequestId', description='Id of the request'),
  requestTimeout?: int32(name='RequestTimeout', description='请求超时时间'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertClientVerifyEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='是否通过X-Forwarded-Clientcert-clientverify  头字段获取对访问负载均衡实例客户端证书的校验结果。HTTPS监听有效。'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertFingerprintEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='是否通过X-Forwarded-Clientcert-fingerprint 头字段获取访问负载均衡实例客户端证书的指纹取值，HTTPS监听有效。'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertIssuerDNEnabled的值为‘On’的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='是否通过 X-Forwarded-Clientcert-issuerdn 头字段获取访问负载均衡实例客户端证书的发行者信息。HTTPS监听有效。'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertSubjectDNEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='是否通过X-Forwarded-Clientcert-subjectdn  头字段获取访问负载均衡实例客户端证书的所有者信息。HTTPS监听有效。'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='是否通过X-Forwarded-Client-Port 头字段获取访问负载均衡实例客户端的端口。HTTPS监听有效。'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='是否通过X-Forwarded-Proto头字段获取负载均衡实例的监听协议。'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='是否通过SLB-ID头字段获取负载均衡实例ID。'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='是否通过X-Forwarded-Port 头字段获取负载均衡实例的监听端口。HTTPS监听有效。'),
  }(name='XForwardedForConfig', description='XForward字段相关的配置'),
}

model GetListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetListenerAttributeResponseBody(name='body'),
}

async function getListenerAttribute(request: GetListenerAttributeRequest): GetListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetListenerHealthStatusRequest {
  includeRule?: boolean(name='IncludeRule', description='是否包含转发规则健康检查结果', position='Query'),
  listenerId: string(name='ListenerId', description='监听Id', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model GetListenerHealthStatusResponseBody = {
  listenerHealthStatus?: [ 
    {
      listenerId?: string(name='ListenerId', description='监听Id'),
      listenerPort?: int32(name='ListenerPort', description='监听的端口号'),
      listenerProtocol?: string(name='ListenerProtocol', description='监听的协议'),
      serverGroupInfos?: [ 
        {
          actionType?: string(name='ActionType', description='服务器组使用类型'),
          healthCheckEnabled?: string(name='HealthCheckEnabled', description='健康检查开启/关闭'),
          nonNormalServers?: [ 
            {
              port?: int32(name='Port', description='后端服务器端口'),
              reason?: {
                actualResponse?: string(name='ActualResponse', description='后端实际的返回码信息'),
                expectedResponse?: string(name='ExpectedResponse', description='用户预期的后端返回码信息'),
                reasonCode?: string(name='ReasonCode', description='失败reasonCode'),
              }(name='Reason', description='status为非正常状态时的详细异常原因'),
              serverId?: string(name='ServerId', description='后端服务器id'),
              serverIp?: string(name='ServerIp', description='后端服务器Ip'),
              status?: string(name='Status', description='健康检查状态'),
            }
          ](name='NonNormalServers', description='处于非正常状态的后端服务器'),
          serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
        }
      ](name='ServerGroupInfos', description='服务器组健康检查结果'),
    }
  ](name='ListenerHealthStatus', description='监听健康检查结果'),
  nextToken?: string(name='NextToken', description='下一页标识'),
  requestId?: string(name='RequestId', description='请求Id'),
  ruleHealthStatus?: [ 
    {
      ruleId?: string(name='RuleId', description='转发规则ID'),
      serverGroupInfos?: [ 
        {
          actionType?: string(name='ActionType', description='服务器组使用类型'),
          healthCheckEnabled?: string(name='HealthCheckEnabled', description='健康检查开启/关闭'),
          nonNormalServers?: [ 
            {
              port?: int32(name='Port', description='后端服务器端口'),
              reason?: {
                actualResponse?: string(name='ActualResponse', description='后端实际的返回码信息'),
                expectedResponse?: string(name='ExpectedResponse', description='用户预期的后端返回码信息'),
                reasonCode?: string(name='ReasonCode', description='失败reasonCode'),
              }(name='Reason', description='status为非正常状态时的详细异常原因'),
              serverId?: string(name='ServerId', description='后端服务器Id'),
              serverIp?: string(name='ServerIp', description='后端服务器ID'),
              status?: string(name='Status', description='健康检查状态'),
            }
          ](name='NonNormalServers', description='处于非正常状态的后端服务器'),
          serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
        }
      ](name='ServerGroupInfos', description='服务器组健康检查结果'),
    }
  ](name='RuleHealthStatus', description='转发规则健康检查结果'),
}

model GetListenerHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetListenerHealthStatusResponseBody(name='body'),
}

async function getListenerHealthStatus(request: GetListenerHealthStatusRequest): GetListenerHealthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetListenerHealthStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetLoadBalancerAttributeRequest {
  loadBalancerId: string(name='LoadBalancerId', description='实例标识', position='Query'),
}

model GetLoadBalancerAttributeResponseBody = {
  accessLogConfig?: {
    logProject?: string(name='LogProject', description='访问日志投递的logProject'),
    logStore?: string(name='LogStore', description='删除保护开启时间'),
  }(name='AccessLogConfig', description='访问日志属性'),
  addressAllocatedMode?: string(name='AddressAllocatedMode', description='地址分配方式'),
  addressIpVersion?: string(name='AddressIpVersion', description='协议版本'),
  addressType?: string(name='AddressType', description='地址类型'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='带宽包ID'),
  createTime?: string(name='CreateTime', description='资源创建时间'),
  DNSName?: string(name='DNSName', description='DNS域名'),
  deletionProtectionConfig?: {
    enabled?: boolean(name='Enabled', description='删除保护状态'),
    enabledTime?: string(name='EnabledTime', description='删除保护开启时间'),
  }(name='DeletionProtectionConfig', description='负载均衡删除保护相关信息'),
  ipv6AddressType?: string(name='Ipv6AddressType', description='IPV6地址类型'),
  loadBalancerBillingConfig?: {
    payType?: string(name='PayType', description='实例的计费类型'),
  }(name='LoadBalancerBillingConfig', description='计费相关属性'),
  loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='实例业务状态'),
  loadBalancerEdition?: string(name='LoadBalancerEdition', description='负载均衡的版本'),
  loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
  loadBalancerName?: string(name='LoadBalancerName', description='实例名称'),
  loadBalancerOperationLocks?: [ 
    {
      lockReason?: string(name='LockReason', description='锁定原因'),
      lockType?: string(name='LockType', description='锁定类型'),
    }
  ](name='LoadBalancerOperationLocks', description='锁定原因'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='实例状态'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='设置修改保护状态的原因'),
    status?: string(name='Status', description='负载均衡修改保护状态'),
  }(name='ModificationProtectionConfig', description='负载均衡修改保护相关信息'),
  regionId?: string(name='RegionId', description='地域'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resourceGroupId?: string(name='ResourceGroupId', description='企业资源组ID'),
  tags?: [ 
    {
      key?: string(name='Key', description='实例的标签键'),
      value?: string(name='Value', description='实例的标签值'),
    }
  ](name='Tags', description='标签列表'),
  vpcId?: string(name='VpcId', description='Vpc网络ID'),
  zoneMappings?: [ 
    {
      loadBalancerAddresses?: [ 
        {
          address?: string(name='Address', description='IP地址'),
          ipv6Address?: string(name='Ipv6Address', description='Ipv6地址'),
        }
      ](name='LoadBalancerAddresses', description='固定VIP模式下，负载均衡在此可用区中的地址列表'),
      vSwitchId?: string(name='VSwitchId', description='交换机标识'),
      zoneId?: string(name='ZoneId', description='可用区标识'),
    }
  ](name='ZoneMappings', description='负载均衡的可用区资源'),
}

model GetLoadBalancerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoadBalancerAttributeResponseBody(name='body'),
}

async function getLoadBalancerAttribute(request: GetLoadBalancerAttributeRequest): GetLoadBalancerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoadBalancerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ListAclEntriesRequest {
  aclId: string(name='AclId', description='访问控制策略Id', position='Query'),
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
}

model ListAclEntriesResponseBody = {
  aclEntries?: [ 
    {
      description?: string(name='Description', description='描述信息'),
      entry?: string(name='Entry', description='IP条目'),
      status?: string(name='Status', description='状态'),
    }
  ](name='AclEntries', description='访问控制列表'),
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListAclEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAclEntriesResponseBody(name='body'),
}

async function listAclEntries(request: ListAclEntriesRequest): ListAclEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAclEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListAclRelationsRequest {
  aclIds: [ string ](name='AclIds', description='访问控制策略Id', position='Query'),
}

model ListAclRelationsResponseBody = {
  aclRelations?: [ 
    {
      aclId?: string(name='AclId', description='访问控制策略id'),
      relatedListeners?: [ 
        {
          listenerId?: string(name='ListenerId', description='监听ID'),
          listenerPort?: int32(name='ListenerPort', description='监听端口'),
          listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
          loadBalancerId?: string(name='LoadBalancerId', description='实例ID'),
          status?: string(name='Status', description='关联状态'),
        }
      ](name='RelatedListeners', description='关联的监听'),
    }
  ](name='AclRelations', description='访问控制列表'),
  requestId?: string(name='RequestId', description='请求id'),
}

model ListAclRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAclRelationsResponseBody(name='body'),
}

async function listAclRelations(request: ListAclRelationsRequest): ListAclRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAclRelations', 'POST', '/', 'json', false, 'json', request);
}

model ListAclsRequest {
  aclIds?: [ string ](name='AclIds', description='访问控制策略Id', position='Query'),
  aclNames?: [ string ](name='AclNames', description='访问控制策略名称', position='Query'),
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', position='Query'),
}

model ListAclsResponseBody = {
  acls?: [ 
    {
      aclId?: string(name='AclId', description='访问控制策略id'),
      aclName?: string(name='AclName', description='访问控制策略名称'),
      aclStatus?: string(name='AclStatus', description='状态'),
      addressIPVersion?: string(name='AddressIPVersion', description='IP版本'),
      configManagedEnabled?: boolean(name='ConfigManagedEnabled', description='配置管理'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
    }
  ](name='Acls', description='访问控制列表'),
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListAclsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAclsResponseBody(name='body'),
}

async function listAcls(request: ListAclsRequest): ListAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAcls', 'POST', '/', 'json', false, 'json', request);
}

model ListAsynJobsRequest {
  apiName?: string(name='ApiName', description='操作接口名', position='Query'),
  beginTime?: long(name='BeginTime', description='任务过滤时间范围-开始时间', position='Query'),
  endTime?: long(name='EndTime', description='任务过滤时间范围-结束时间', position='Query'),
  jobIds?: [ string ](name='JobIds', description='任务ID列表', position='Query'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据记录数量', position='Query'),
  nextToken?: string(name='NextToken', description='下一个查询开始Token', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', description='资源实例ID列表', position='Query'),
  resourceType?: string(name='ResourceType', description='资源类型类型', position='Query'),
}

model ListAsynJobsResponseBody = {
  jobs?: [ 
    {
      apiName?: string(name='ApiName', description='openapi名称'),
      createTime?: long(name='CreateTime', description='任务开始时间戳'),
      errorCode?: string(name='ErrorCode', description='如果Status为失败，则为错误码'),
      errorMessage?: string(name='ErrorMessage', description='如果Status为失败，则为错误信息'),
      id?: string(name='Id', description='任务ID'),
      modifyTime?: long(name='ModifyTime', description='任务结束时间戳'),
      operateType?: string(name='OperateType', description='操作类型'),
      resourceId?: string(name='ResourceId', description='关联的资源实例ID'),
      resourceType?: string(name='ResourceType', description='关联的资源类型'),
      status?: string(name='Status', description='任务状态'),
    }
  ](name='Jobs', description='任务列表'),
  maxResults?: long(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='总记录数	'),
}

model ListAsynJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAsynJobsResponseBody(name='body'),
}

async function listAsynJobs(request: ListAsynJobsRequest): ListAsynJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAsynJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListHealthCheckTemplatesRequest {
  healthCheckTemplateIds?: [ string ](name='HealthCheckTemplateIds', description='健康检查模板ID列表', position='Query'),
  healthCheckTemplateNames?: [ string ](name='HealthCheckTemplateNames', description='健康检查模板名称列表', position='Query'),
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
}

model ListHealthCheckTemplatesResponseBody = {
  healthCheckTemplates?: [ 
    {
      healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码'),
      healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口'),
      healthCheckHost?: string(name='HealthCheckHost', description='域名'),
      healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本'),
      healthCheckInterval?: int32(name='HealthCheckInterval', description='间隔时间'),
      healthCheckMethod?: string(name='HealthCheckMethod', description='方法'),
      healthCheckPath?: string(name='HealthCheckPath', description='uri'),
      healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议'),
      healthCheckTemplateId?: string(name='HealthCheckTemplateId', description='健康检查模板Id'),
      healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='名称'),
      healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间'),
      healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值'),
      unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值'),
    }
  ](name='HealthCheckTemplates', description='健康检查模板'),
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListHealthCheckTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListHealthCheckTemplatesResponseBody(name='body'),
}

async function listHealthCheckTemplates(request: ListHealthCheckTemplatesRequest): ListHealthCheckTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHealthCheckTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListListenerCertificatesRequest {
  certificateType?: string(name='CertificateType', description='证书类型', position='Query'),
  listenerId: string(name='ListenerId', description='监听Id', position='Query'),
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
}

model ListListenerCertificatesResponseBody = {
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='证书Id'),
      certificateType?: string(name='CertificateType', description='证书类型'),
      isDefault?: boolean(name='IsDefault', description='是否为默认证书'),
      status?: string(name='Status', description='证书状态'),
    }
  ](name='Certificates', description='监听SSL证书列表'),
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListListenerCertificatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListListenerCertificatesResponseBody(name='body'),
}

async function listListenerCertificates(request: ListListenerCertificatesRequest): ListListenerCertificatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListenerCertificates', 'POST', '/', 'json', false, 'json', request);
}

model ListListenersRequest {
  listenerIds?: [ string ](name='ListenerIds', description='监听ID列表，N最大支持20', position='Query'),
  listenerProtocol?: string(name='ListenerProtocol', description='监听协议', position='Query'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='实例ID列表，N最大支持20', position='Query'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量，此参数为可选参数，取值1-100，用户传入为空时，默认为20。', position='Query'),
  nextToken?: string(name='NextToken', description='用来标记当前开始读取的位置，置空表示从头开始。', position='Query'),
}

model ListListenersResponseBody = {
  listeners?: [ 
    {
      defaultActions?: [ 
        {
          forwardGroupConfig?: {
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='服务器组ID'),
              }
            ](name='ServerGroupTuples', description='服务器组列表'),
          }(name='ForwardGroupConfig', description='转发到服务器组'),
          type?: string(name='Type', description='类型'),
        }
      ](name='DefaultActions', description='默认动作'),
      gzipEnabled?: boolean(name='GzipEnabled', description='是否开启Gzip压缩'),
      http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP/2特性'),
      idleTimeout?: int32(name='IdleTimeout', description='连接空闲超时时间'),
      listenerDescription?: string(name='ListenerDescription', description='监听描述'),
      listenerId?: string(name='ListenerId', description='监听标识'),
      listenerPort?: int32(name='ListenerPort', description='监听端口'),
      listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
      listenerStatus?: string(name='ListenerStatus', description='监听状态'),
      loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
      logConfig?: {
        accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='访问日志是否开启携带自定义Header'),
        accessLogTracingConfig?: {
          tracingEnabled?: boolean(name='TracingEnabled', description='Xtrace功能状态'),
          tracingSample?: int32(name='TracingSample', description='Xtrace功能状态'),
          tracingType?: string(name='TracingType', description='xtrace的类型'),
        }(name='AccessLogTracingConfig', description='访问日志Xtrace相关的配置'),
      }(name='LogConfig', description='监听访问日志相关配置'),
      quicConfig?: {
        quicListenerId?: string(name='QuicListenerId', description='需要关联的QUIC监听ID，HTTPS监听时有效，QuicUpgradeEnabled为true时必选'),
        quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='是否开启quic升级，HTTPS监听时有效'),
      }(name='QuicConfig', description='HTTPS启用QUIC时相关属性'),
      requestTimeout?: int32(name='RequestTimeout', description='请求超时时间'),
      securityPolicyId?: string(name='SecurityPolicyId', description='安全策略'),
      XForwardedForConfig?: {
        XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertClientVerifyEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
        XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='是否通过X-Forwarded-Clientcert-clientverify  头字段获取对访问负载均衡实例客户端证书的校验结果。HTTPS监听有效。'),
        XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertFingerprintEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
        XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='是否通过X-Forwarded-Clientcert-fingerprint 头字段获取访问负载均衡实例客户端证书的指纹取值，HTTPS监听有效。'),
        XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertIssuerDNEnabled的值为‘On’的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
        XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='是否通过 X-Forwarded-Clientcert-issuerdn 头字段获取访问负载均衡实例客户端证书的发行者信息。HTTPS监听有效。'),
        XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertSubjectDNEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
        XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='是否通过X-Forwarded-Clientcert-subjectdn  头字段获取访问负载均衡实例客户端证书的所有者信息。HTTPS监听有效。'),
        XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='是否通过X-Forwarded-Client-Port 头字段获取访问负载均衡实例客户端的端口。HTTPS监听有效。'),
        XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP'),
        XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='是否通过X-Forwarded-Proto头字段获取负载均衡实例的监听协议。'),
        XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='是否通过SLB-ID头字段获取负载均衡实例ID。'),
        XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='是否通过X-Forwarded-Port 头字段获取负载均衡实例的监听端口。HTTPS监听有效。'),
      }(name='XForwardedForConfig', description='XForward字段相关的配置'),
    }
  ](name='Listeners', description='监听列表'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置，空代表数据已经读取完毕。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。'),
}

model ListListenersResponse = {
  headers: map[string]string(name='headers'),
  body: ListListenersResponseBody(name='body'),
}

async function listListeners(request: ListListenersRequest): ListListenersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListeners', 'POST', '/', 'json', false, 'json', request);
}

model ListLoadBalancersRequest {
  addressType?: string(name='AddressType', description='负载均衡的地址类型', position='Query'),
  loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='实例业务状态', position='Query'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='实例ID列表，N最大支持20', position='Query'),
  loadBalancerNames?: [ string ](name='LoadBalancerNames', description='实例Name列表，N最大支持10', position='Query'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='实例状态', position='Query'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量，此参数为可选参数，取值1-100，用户传入为空时，默认为20。', position='Query'),
  nextToken?: string(name='NextToken', description='用来标记当前开始读取的位置，置空表示从头开始。', position='Query'),
  payType?: string(name='PayType', description='付费类型', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='实例的标签键'),
      value?: string(name='Value', description='实例的标签值'),
    }
  ](name='Tag', description='tag列表', position='Query'),
  vpcIds?: [ string ](name='VpcIds', description='vpcId列表', position='Query'),
  zoneId?: string(name='ZoneId', description='可用区ID', position='Query'),
}

model ListLoadBalancersResponseBody = {
  loadBalancers?: [ 
    {
      accessLogConfig?: {
        logProject?: string(name='LogProject', description='访问日志投递的logProject'),
        logStore?: string(name='LogStore', description='删除保护开启时间'),
      }(name='AccessLogConfig', description='访问日志属性'),
      addressAllocatedMode?: string(name='AddressAllocatedMode', description='地址模式'),
      addressIpVersion?: string(name='AddressIpVersion', description='协议版本'),
      addressType?: string(name='AddressType', description='地址类型'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='带宽包ID'),
      createTime?: string(name='CreateTime', description='资源创建时间'),
      DNSName?: string(name='DNSName', description='DNS域名'),
      deletionProtectionConfig?: {
        enabled?: boolean(name='Enabled', description='删除保护状态'),
        enabledTime?: string(name='EnabledTime', description='删除保护开启时间'),
      }(name='DeletionProtectionConfig', description='负载均衡删除保护相关信息'),
      ipv6AddressType?: string(name='Ipv6AddressType', description='IPV6地址类型'),
      loadBalancerBillingConfig?: {
        payType?: string(name='PayType', description='实例的计费类型'),
      }(name='LoadBalancerBillingConfig', description='计费相关属性'),
      loadBalancerBussinessStatus?: string(name='LoadBalancerBussinessStatus', description='实例业务状态'),
      loadBalancerEdition?: string(name='LoadBalancerEdition', description='负载均衡的版本'),
      loadBalancerId?: string(name='LoadBalancerId', description='负载均衡标识'),
      loadBalancerName?: string(name='LoadBalancerName', description='实例名称'),
      loadBalancerOperationLocks?: [ 
        {
          lockReason?: string(name='LockReason', description='锁定的原因'),
          lockType?: string(name='LockType', description='锁定的类型'),
        }
      ](name='LoadBalancerOperationLocks', description='锁定的原因'),
      loadBalancerStatus?: string(name='LoadBalancerStatus', description='实例状态'),
      modificationProtectionConfig?: {
        reason?: string(name='Reason', description='设置修改保护状态的原因'),
        status?: string(name='Status', description='负载均衡修改保护状态'),
      }(name='ModificationProtectionConfig', description='负载均衡修改保护相关信息'),
      resourceGroupId?: string(name='ResourceGroupId', description='企业资源组ID'),
      tags?: [ 
        {
          key?: string(name='Key', description='实例的标签键'),
          value?: string(name='Value', description='实例的标签值'),
        }
      ](name='Tags', description='标签列表'),
      vpcId?: string(name='VpcId', description='Vpc网络ID'),
    }
  ](name='LoadBalancers', description='实例列表'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置，空代表数据已经读取完毕。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。'),
}

model ListLoadBalancersResponse = {
  headers: map[string]string(name='headers'),
  body: ListLoadBalancersResponseBody(name='body'),
}

async function listLoadBalancers(request: ListLoadBalancersRequest): ListLoadBalancersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLoadBalancers', 'POST', '/', 'json', false, 'json', request);
}

model ListRulesRequest {
  listenerIds?: [ string ](name='ListenerIds', description='监听ID列表', position='Query'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', description='实例ID列表', position='Query'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量，此参数为可选参数，取值1-100，用户传入为空时，默认为20。', position='Query'),
  nextToken?: string(name='NextToken', description='用来标记当前开始读取的位置，置空表示从头开始。', position='Query'),
  ruleIds?: [ string ](name='RuleIds', description='转发规则ID列表，N最大支持20', position='Query'),
}

model ListRulesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数。'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置，空代表数据已经读取完毕。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  rules?: [ 
    {
      listenerId?: string(name='ListenerId', description='监听ID'),
      loadBalancerId?: string(name='LoadBalancerId', description='实例ID'),
      priority?: int32(name='Priority', description='转发规则优先级'),
      ruleActions?: [ 
        {
          fixedResponseConfig?: {
            content?: string(name='Content', description='内容'),
            contentType?: string(name='ContentType', description='内容类型'),
            httpCode?: string(name='HttpCode', description='HTTP响应码'),
          }(name='FixedResponseConfig', description='返回固定内容动作配置'),
          forwardGroupConfig?: {
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
              }
            ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
          }(name='ForwardGroupConfig', description='转发组动作配置'),
          insertHeaderConfig?: {
            key?: string(name='Key', description='HTTP标头'),
            value?: string(name='Value', description='HTTP标头内容'),
            valueType?: string(name='ValueType', description='取值类型'),
          }(name='InsertHeaderConfig', description='插入头部动作配置'),
          order?: int32(name='Order', description='优先级'),
          redirectConfig?: {
            host?: string(name='Host', description='要跳转的主机地址'),
            httpCode?: string(name='HttpCode', description='跳转方式'),
            path?: string(name='Path', description='要跳转的路径'),
            port?: string(name='Port', description='要跳转的端口'),
            protocol?: string(name='Protocol', description='要跳转的协议'),
            query?: string(name='Query', description='要跳转的查询字符串'),
          }(name='RedirectConfig', description='重定向动作配置'),
          rewriteConfig?: {
            host?: string(name='Host', description='主机名'),
            path?: string(name='Path', description='路径'),
            query?: string(name='Query', description='查询'),
          }(name='RewriteConfig', description='内部重定向动作配置'),
          type?: string(name='Type', description='转发规则动作类型'),
        }
      ](name='RuleActions', description='转发规则动作'),
      ruleConditions?: [ 
        {
          cookieConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='Cookie条件键'),
                value?: string(name='Value', description='Cookie条件值'),
              }
            ](name='Values', description='Cookie键值对列表'),
          }(name='CookieConfig', description='Cookie条件配置'),
          headerConfig?: {
            key?: string(name='Key', description='HTTP标头键'),
            values?: [ string ](name='Values', description='HTTP标头值列表'),
          }(name='HeaderConfig', description='HTTP标头条件配置'),
          hostConfig?: {
            values?: [ string ](name='Values', description='主机名列表'),
          }(name='HostConfig', description='主机名条件配置'),
          methodConfig?: {
            values?: [ string ](name='Values', description='HTTP请求方法列表'),
          }(name='MethodConfig', description='HTTP请求方法条件配置'),
          pathConfig?: {
            values?: [ string ](name='Values', description='路径条件列表'),
          }(name='PathConfig', description='路径条件配置'),
          queryStringConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='查询字符串条件键'),
                value?: string(name='Value', description='查询字符串条件值'),
              }
            ](name='Values', description='查询字符串条件键值对列表'),
          }(name='QueryStringConfig', description='查询字符串条件配置'),
          type?: string(name='Type', description='条件类型'),
        }
      ](name='RuleConditions', description='转发规则条件'),
      ruleId?: string(name='RuleId', description='转发规则标识'),
      ruleName?: string(name='RuleName', description='转发规则名称'),
      ruleStatus?: string(name='RuleStatus', description='转发规则状态'),
    }
  ](name='Rules', description='转发规则列表'),
  totalCount?: int32(name='TotalCount', description='本次请求条件下的数据总量。'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRulesResponseBody(name='body'),
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRules', 'POST', '/', 'json', false, 'json', request);
}

model ListSecurityPoliciesRequest {
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', position='Query'),
  securityPolicyIds?: [ string ](name='SecurityPolicyIds', description='安全策略id', position='Query'),
  securityPolicyNames?: [ string ](name='SecurityPolicyNames', description='安全策略名称', position='Query'),
}

model ListSecurityPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  securityPolicies?: [ 
    {
      ciphers?: [ string ](name='Ciphers', description='加密套件'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组id'),
      securityPolicyId?: string(name='SecurityPolicyId', description='安全策略id'),
      securityPolicyName?: string(name='SecurityPolicyName', description='安全策略名称'),
      securityPolicyStatus?: string(name='SecurityPolicyStatus', description='状态'),
      TLSVersions?: [ string ](name='TLSVersions', description='TLS策略'),
    }
  ](name='SecurityPolicies', description='安全策略'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListSecurityPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecurityPoliciesResponseBody(name='body'),
}

async function listSecurityPolicies(request: ListSecurityPoliciesRequest): ListSecurityPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecurityPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListSecurityPolicyRelationsRequest {
  securityPolicyIds: [ string ](name='SecurityPolicyIds', description='安全策略id', position='Query'),
}

model ListSecurityPolicyRelationsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  secrityPolicyRelations?: [ 
    {
      relatedListeners?: [ 
        {
          listenerId?: string(name='ListenerId', description='监听id'),
          listenerPort?: long(name='ListenerPort', description='监听端口'),
          listenerProtocol?: string(name='ListenerProtocol', description='监听协议'),
          loadBalancerId?: string(name='LoadBalancerId', description='实例id'),
        }
      ](name='RelatedListeners', description='关联的监听列表'),
      securityPolicyId?: string(name='SecurityPolicyId', description='安全策略id'),
    }
  ](name='SecrityPolicyRelations', description='安全策略关联关系'),
}

model ListSecurityPolicyRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecurityPolicyRelationsResponseBody(name='body'),
}

async function listSecurityPolicyRelations(request: ListSecurityPolicyRelationsRequest): ListSecurityPolicyRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecurityPolicyRelations', 'POST', '/', 'json', false, 'json', request);
}

model ListServerGroupServersRequest {
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
  serverGroupId?: string(name='ServerGroupId', description='服务器组id', position='Query'),
  serverIds?: [ string ](name='ServerIds', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', position='Query'),
}

model ListServerGroupServersResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  servers?: [ 
    {
      description?: string(name='Description', description='描述信息'),
      port?: int32(name='Port', description='端口'),
      serverGroupId?: string(name='ServerGroupId', description='服务器组id'),
      serverId?: string(name='ServerId', description='服务器id'),
      serverIp?: string(name='ServerIp', description='服务器ip'),
      serverType?: string(name='ServerType', description='后端服务器类型'),
      status?: string(name='Status', description='状态'),
      weight?: int32(name='Weight', description='权重'),
    }
  ](name='Servers', description='后端服务器'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListServerGroupServersResponse = {
  headers: map[string]string(name='headers'),
  body: ListServerGroupServersResponseBody(name='body'),
}

async function listServerGroupServers(request: ListServerGroupServersRequest): ListServerGroupServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServerGroupServers', 'POST', '/', 'json', false, 'json', request);
}

model ListServerGroupsRequest {
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', position='Query'),
  serverGroupIds?: [ string ](name='ServerGroupIds', description='服务器组Id列表', position='Query'),
  serverGroupNames?: [ string ](name='ServerGroupNames', description='服务器组名称', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='Tag列表', position='Query'),
  vpcId?: string(name='VpcId', description='VpcId', position='Query'),
}

model ListServerGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  serverGroups?: [ 
    {
      configManagedEnabled?: boolean(name='ConfigManagedEnabled', description='是否开启配置管理'),
      healthCheckConfig?: {
        healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码'),
        healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口'),
        healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='是否启用健康检查'),
        healthCheckHost?: string(name='HealthCheckHost', description='域名'),
        healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本'),
        healthCheckInterval?: int32(name='HealthCheckInterval', description='间隔时间'),
        healthCheckMethod?: string(name='HealthCheckMethod', description='方法'),
        healthCheckPath?: string(name='HealthCheckPath', description='uri'),
        healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议'),
        healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间'),
        healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值'),
        unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值'),
      }(name='HealthCheckConfig', description='健康检查配置'),
      ipv6Enabled?: boolean(name='Ipv6Enabled', description='是否支持Ipv6'),
      protocol?: string(name='Protocol', description='服务器组协议'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组id'),
      scheduler?: string(name='Scheduler', description='调度策略'),
      serverCount?: int32(name='ServerCount', description='服务器组内服务器数量'),
      serverGroupId?: string(name='ServerGroupId', description='服务器组Id'),
      serverGroupName?: string(name='ServerGroupName', description='服务器组名称'),
      serverGroupStatus?: string(name='ServerGroupStatus', description='服务器组状态'),
      serverGroupType?: string(name='ServerGroupType', description='服务器组类型'),
      serviceName?: string(name='ServiceName', description='服务器名称'),
      stickySessionConfig?: {
        cookie?: string(name='Cookie', description='Cookie'),
        cookieTimeout?: int32(name='CookieTimeout', description='Cookie超时时间'),
        stickySessionEnabled?: boolean(name='StickySessionEnabled', description='是否开启会话保持'),
        stickySessionType?: string(name='StickySessionType', description='会话保持类型'),
      }(name='StickySessionConfig', description='会话保持配置'),
      tags?: [ 
        {
          key?: string(name='Key', description='标签键'),
          value?: string(name='Value', description='标签值'),
        }
      ](name='Tags', description='标签列表'),
      upstreamKeepaliveEnabled?: boolean(name='UpstreamKeepaliveEnabled', description='是否开启后端长链接'),
      vpcId?: string(name='VpcId', description='服务器组所在VpcId'),
    }
  ](name='ServerGroups', description='服务器组'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServerGroupsResponseBody(name='body'),
}

async function listServerGroups(request: ListServerGroupsRequest): ListServerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServerGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListSystemSecurityPoliciesRequest {
}

model ListSystemSecurityPoliciesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  securityPolicies?: [ 
    {
      ciphers?: [ string ](name='Ciphers', description='加密套件'),
      securityPolicyId?: string(name='SecurityPolicyId', description='安全策略Id'),
      TLSVersions?: [ string ](name='TLSVersions', description='协议版本'),
    }
  ](name='SecurityPolicies', description='安全策略'),
}

model ListSystemSecurityPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSystemSecurityPoliciesResponseBody(name='body'),
}

async function listSystemSecurityPolicies(request: ListSystemSecurityPoliciesRequest): ListSystemSecurityPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemSecurityPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  category?: string(name='Category', description='标签类型', position='Query'),
  keyword?: string(name='Keyword', description='具体的标签Key', position='Query'),
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
}

model ListTagKeysResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  tagKeys?: [ 
    {
      category?: string(name='Category', description='标签类型'),
      tagKey?: string(name='TagKey', description='标签Key'),
    }
  ](name='TagKeys', description='标签Key列表'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='资源实例Id', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表', position='Query'),
}

model ListTagResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源ID'),
      resourceType?: string(name='ResourceType', description='资源类型'),
      tagKey?: string(name='TagKey', description='标签Key'),
      tagValue?: string(name='TagValue', description='标签Value'),
    }
  ](name='TagResources', description='标签值列表'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  maxResults?: int32(name='MaxResults', description='查询数量', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='分页查询标识', position='Query'),
  resourceId?: string(name='ResourceId', description='资源实例Id', position='Query'),
  resourceType?: string(name='ResourceType', description='资源类型', position='Query'),
  tagKey: string(name='TagKey', description='具体的标签Key', position='Query'),
}

model ListTagValuesResponseBody = {
  maxResults?: int32(name='MaxResults', description='本次查询返回记录数量'),
  nextToken?: string(name='NextToken', description='分页查询标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
  tagValues?: [ string ](name='TagValues', description='标签值列表'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='资源组id', position='Query'),
  resourceId: string(name='ResourceId', description='指定资源Id', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model RemoveEntriesFromAclRequest {
  aclId: string(name='AclId', description='访问控制策略Id', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  entries: [ string ](name='Entries', description='条目列表', position='Query'),
}

model RemoveEntriesFromAclResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveEntriesFromAclResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveEntriesFromAclResponseBody(name='body'),
}

async function removeEntriesFromAcl(request: RemoveEntriesFromAclRequest): RemoveEntriesFromAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveEntriesFromAcl', 'POST', '/', 'json', false, 'json', request);
}

model RemoveServersFromServerGroupRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  serverGroupId: string(name='ServerGroupId', description='后端服务器Id', position='Query'),
  servers: [ 
    {
      port?: int32(name='Port', description='后端端口号'),
      serverId: string(name='ServerId', description='后端服务器id'),
      serverIp?: string(name='ServerIp', description='后端服务器ip'),
      serverType: string(name='ServerType', description='后端服务器类型'),
    }
  ](name='Servers', description='后端服务器', position='Query'),
}

model RemoveServersFromServerGroupResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveServersFromServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveServersFromServerGroupResponseBody(name='body'),
}

async function removeServersFromServerGroup(request: RemoveServersFromServerGroupRequest): RemoveServersFromServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveServersFromServerGroup', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceServersInServerGroupRequest {
  addedServers: [ 
    {
      description?: string(name='Description', description='描述信息'),
      port?: int32(name='Port', description='后端端口号'),
      serverId: string(name='ServerId', description='后端服务器id'),
      serverIp?: string(name='ServerIp', description='后端服务器ip'),
      serverType?: string(name='ServerType', description='后端服务器类型'),
      weight?: int32(name='Weight', description='后端服务器权重'),
    }
  ](name='AddedServers', description='待添加后端服务器', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  removedServers: [ 
    {
      port?: int32(name='Port', description='端口'),
      serverId: string(name='ServerId', description='后端服务器id'),
      serverIp?: string(name='ServerIp', description='后端服务器ip'),
      serverType?: string(name='ServerType', description='后端服务器类型'),
    }
  ](name='RemovedServers', description='待删除后端服务器', position='Query'),
  serverGroupId: string(name='ServerGroupId', description='后端服务器Id', position='Query'),
}

model ReplaceServersInServerGroupResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReplaceServersInServerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceServersInServerGroupResponseBody(name='body'),
}

async function replaceServersInServerGroup(request: ReplaceServersInServerGroupRequest): ReplaceServersInServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceServersInServerGroup', 'POST', '/', 'json', false, 'json', request);
}

model StartListenerRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  listenerId: string(name='ListenerId', description='监听id', position='Query'),
}

model StartListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartListenerResponse = {
  headers: map[string]string(name='headers'),
  body: StartListenerResponseBody(name='body'),
}

async function startListener(request: StartListenerRequest): StartListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartListener', 'POST', '/', 'json', false, 'json', request);
}

model StopListenerRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  listenerId: string(name='ListenerId', description='监听id', position='Query'),
}

model StopListenerResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopListenerResponse = {
  headers: map[string]string(name='headers'),
  body: StopListenerResponseBody(name='body'),
}

async function stopListener(request: StopListenerRequest): StopListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopListener', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='资源实例Id', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='资源实例Id', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表', position='Query'),
  tagKey?: [ string ](name='TagKey', description='标签键列表', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagResourcesResponseBody(name='body'),
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAclAttributeRequest {
  aclId: string(name='AclId', description='AclId', position='Query'),
  aclName: string(name='AclName', description='访问控制策略名称', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否预校验请求', position='Query'),
}

model UpdateAclAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateAclAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAclAttributeResponseBody(name='body'),
}

async function updateAclAttribute(request: UpdateAclAttributeRequest): UpdateAclAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAclAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHealthCheckTemplateAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  healthCheckCodes?: [ string ](name='HealthCheckCodes', description='状态码', position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='端口号', position='Query'),
  healthCheckHost?: string(name='HealthCheckHost', description='域名', position='Query'),
  healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='版本', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='时间间隔', position='Query'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='方法', position='Query'),
  healthCheckPath?: string(name='HealthCheckPath', description='uri', position='Query'),
  healthCheckProtocol?: string(name='HealthCheckProtocol', description='协议', position='Query'),
  healthCheckTemplateId: string(name='HealthCheckTemplateId', description='健康检查模板ID', position='Query'),
  healthCheckTemplateName?: string(name='HealthCheckTemplateName', description='名称', position='Query'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='超时时间', minimum=1, maximum=300, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康阈值', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='不健康阈值', position='Query'),
}

model UpdateHealthCheckTemplateAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateHealthCheckTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHealthCheckTemplateAttributeResponseBody(name='body'),
}

async function updateHealthCheckTemplateAttribute(request: UpdateHealthCheckTemplateAttributeRequest): UpdateHealthCheckTemplateAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHealthCheckTemplateAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateListenerAttributeRequest {
  caCertificates?: [ 
    {
    }
  ](name='CaCertificates', description='监听默认CA证书列表，N当前取值范围为1', position='Query'),
  caEnabled?: boolean(name='CaEnabled', description='是否开启双向认证', position='Query'),
  certificates?: [ 
    {
      certificateId?: string(name='CertificateId', description='正式标识'),
    }
  ](name='Certificates', description='监听默认服务器证书列表，N当前取值范围为1', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  defaultActions?: [ 
    {
      forwardGroupConfig?: {
        serverGroupTuples: [ 
          {
            serverGroupId: string(name='ServerGroupId', description='服务器组ID'),
          }
        ](name='ServerGroupTuples', description='服务器组列表'),
      }(name='ForwardGroupConfig', description='转发组'),
      type: string(name='Type', description='动作类型'),
    }
  ](name='DefaultActions', description='监听默认动作', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  gzipEnabled?: boolean(name='GzipEnabled', description='是否开启Gzip压缩', position='Query'),
  http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP/2特性', position='Query'),
  idleTimeout?: int32(name='IdleTimeout', description='连接空闲超时时间', minimum=1, position='Query'),
  listenerDescription?: string(name='ListenerDescription', description='监听描述', position='Query'),
  listenerId: string(name='ListenerId', description='监听标识', position='Query'),
  quicConfig?: {
    quicListenerId?: string(name='QuicListenerId', description='需要关联的QUIC监听ID，HTTPS监听时有效，QuicUpgradeEnabled为true时必选'),
    quicUpgradeEnabled?: boolean(name='QuicUpgradeEnabled', description='是否开启quic升级，HTTPS监听时有效'),
  }(name='QuicConfig', description='HTTPS启用QUIC时相关属性', position='Query'),
  requestTimeout?: int32(name='RequestTimeout', description='请求超时时间', minimum=1, maximum=180, position='Query'),
  securityPolicyId?: string(name='SecurityPolicyId', description='安全策略', position='Query'),
  XForwardedForConfig?: {
    XForwardedForClientCertClientVerifyAlias?: string(name='XForwardedForClientCertClientVerifyAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertClientVerifyEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertClientVerifyEnabled?: boolean(name='XForwardedForClientCertClientVerifyEnabled', description='是否通过X-Forwarded-Clientcert-clientverify  头字段获取对访问负载均衡实例客户端证书的校验结果。HTTPS监听有效。'),
    XForwardedForClientCertFingerprintAlias?: string(name='XForwardedForClientCertFingerprintAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertFingerprintEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertFingerprintEnabled?: boolean(name='XForwardedForClientCertFingerprintEnabled', description='是否通过X-Forwarded-Clientcert-fingerprint 头字段获取访问负载均衡实例客户端证书的指纹取值，HTTPS监听有效。'),
    XForwardedForClientCertIssuerDNAlias?: string(name='XForwardedForClientCertIssuerDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertIssuerDNEnabled的值为‘On’的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertIssuerDNEnabled?: boolean(name='XForwardedForClientCertIssuerDNEnabled', description='是否通过 X-Forwarded-Clientcert-issuerdn 头字段获取访问负载均衡实例客户端证书的发行者信息。HTTPS监听有效。'),
    XForwardedForClientCertSubjectDNAlias?: string(name='XForwardedForClientCertSubjectDNAlias', description='自定义HEADER头名称，只有当XForwardedForClientCertSubjectDNEnabled的值为true的时候，此值才会生效；否则该值不会生效。HTTPS监听有效'),
    XForwardedForClientCertSubjectDNEnabled?: boolean(name='XForwardedForClientCertSubjectDNEnabled', description='是否通过X-Forwarded-Clientcert-subjectdn  头字段获取访问负载均衡实例客户端证书的所有者信息。HTTPS监听有效。'),
    XForwardedForClientSrcPortEnabled?: boolean(name='XForwardedForClientSrcPortEnabled', description='是否通过X-Forwarded-Client-Port 头字段获取访问负载均衡实例客户端的端口。HTTPS监听有效。'),
    XForwardedForEnabled?: boolean(name='XForwardedForEnabled', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP'),
    XForwardedForProtoEnabled?: boolean(name='XForwardedForProtoEnabled', description='是否通过X-Forwarded-Proto头字段获取负载均衡实例的监听协议。'),
    XForwardedForSLBIdEnabled?: boolean(name='XForwardedForSLBIdEnabled', description='是否通过SLB-ID头字段获取负载均衡实例ID。'),
    XForwardedForSLBPortEnabled?: boolean(name='XForwardedForSLBPortEnabled', description='是否通过X-Forwarded-Port 头字段获取负载均衡实例的监听端口。HTTPS监听有效。'),
  }(name='XForwardedForConfig', description='XForward字段相关的配置', position='Query'),
}

model UpdateListenerAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateListenerAttributeResponseBody(name='body'),
}

async function updateListenerAttribute(request: UpdateListenerAttributeRequest): UpdateListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateListenerLogConfigRequest {
  accessLogRecordCustomizedHeadersEnabled?: boolean(name='AccessLogRecordCustomizedHeadersEnabled', description='是否开启携带自定义Header', position='Query'),
  accessLogTracingConfig?: {
    tracingEnabled: boolean(name='TracingEnabled', description='Xtrace功能状态'),
    tracingSample?: int32(name='TracingSample', description='xtrace的采样率'),
    tracingType?: string(name='TracingType', description='xtrace的类型'),
  }(name='AccessLogTracingConfig', description='访问日志xtrace字段相关的配置', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  listenerId: string(name='ListenerId', description='监听标识', position='Query'),
}

model UpdateListenerLogConfigResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateListenerLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateListenerLogConfigResponseBody(name='body'),
}

async function updateListenerLogConfig(request: UpdateListenerLogConfigRequest): UpdateListenerLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateListenerLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLoadBalancerAddressTypeConfigRequest {
  addressType: string(name='AddressType', description='目标网络类型', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: string(name='DryRun', description='是否只预检此次请求', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例id', position='Query'),
  zoneMappings?: [ 
    {
      allocationId?: string(name='AllocationId', description='弹性公网IP'),
      vSwitchId?: string(name='VSwitchId', description='交换机标识'),
      zoneId?: string(name='ZoneId', description='可用区'),
    }
  ](name='ZoneMappings', description='可用区及交换机映射列表', position='Query'),
}

model UpdateLoadBalancerAddressTypeConfigResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLoadBalancerAddressTypeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLoadBalancerAddressTypeConfigResponseBody(name='body'),
}

async function updateLoadBalancerAddressTypeConfig(request: UpdateLoadBalancerAddressTypeConfigRequest): UpdateLoadBalancerAddressTypeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerAddressTypeConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLoadBalancerAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例id', position='Query'),
  loadBalancerName?: string(name='LoadBalancerName', description='名称', position='Query'),
  modificationProtectionConfig?: {
    reason?: string(name='Reason', description='设置修改保护状态的原因'),
    status?: string(name='Status', description='负载均衡修改保护状态'),
  }(name='ModificationProtectionConfig', description='负载均衡修改保护相关信息', position='Query'),
}

model UpdateLoadBalancerAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLoadBalancerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLoadBalancerAttributeResponseBody(name='body'),
}

async function updateLoadBalancerAttribute(request: UpdateLoadBalancerAttributeRequest): UpdateLoadBalancerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLoadBalancerEditionRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  loadBalancerEdition: string(name='LoadBalancerEdition', description='实例版本', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例Id', position='Query'),
}

model UpdateLoadBalancerEditionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLoadBalancerEditionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLoadBalancerEditionResponseBody(name='body'),
}

async function updateLoadBalancerEdition(request: UpdateLoadBalancerEditionRequest): UpdateLoadBalancerEditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerEdition', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='实例id', position='Query'),
  zoneMappings: [ 
    {
      vSwitchId: string(name='VSwitchId', description='交换机标识'),
      zoneId: string(name='ZoneId', description='可用区'),
    }
  ](name='ZoneMappings', description='可用区及交换机映射列表', position='Query'),
}

model UpdateLoadBalancerZonesResponseBody = {
  jobId?: string(name='JobId', description='异步任务id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLoadBalancerZonesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLoadBalancerZonesResponseBody(name='body'),
}

async function updateLoadBalancerZones(request: UpdateLoadBalancerZonesRequest): UpdateLoadBalancerZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerZones', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  priority?: int32(name='Priority', description='转发规则优先级', position='Query'),
  ruleActions?: [ 
    {
      fixedResponseConfig?: {
        content?: string(name='Content', description='内容'),
        contentType?: string(name='ContentType', description='内容类型'),
        httpCode?: string(name='HttpCode', description='HTTP响应码'),
      }(name='FixedResponseConfig', description='返回固定内容动作配置'),
      forwardGroupConfig?: {
        serverGroupStickySession?: {
          enabled?: boolean(name='Enabled', description='是否开启会话保持'),
          timeout?: int32(name='Timeout', description='超时时间'),
        }(name='ServerGroupStickySession', description='服务器组之间会话保持'),
        serverGroupTuples?: [ 
          {
            serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
          }
        ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
      }(name='ForwardGroupConfig', description='转发组动作配置'),
      insertHeaderConfig?: {
        key?: string(name='Key', description='HTTP标头'),
        value?: string(name='Value', description='HTTP标头内容'),
        valueType?: string(name='ValueType', description='取值类型'),
      }(name='InsertHeaderConfig', description='插入头部动作配置'),
      order?: int32(name='Order', description='优先级'),
      redirectConfig?: {
        host?: string(name='Host', description='要跳转的主机地址'),
        httpCode?: string(name='HttpCode', description='跳转方式'),
        path?: string(name='Path', description='要跳转的路径'),
        port?: string(name='Port', description='要跳转的端口'),
        protocol?: string(name='Protocol', description='要跳转的协议'),
        query?: string(name='Query', description='要跳转的查询字符串'),
      }(name='RedirectConfig', description='重定向动作配置'),
      rewriteConfig?: {
        host?: string(name='Host', description='主机名'),
        path?: string(name='Path', description='路径'),
        query?: string(name='Query', description='查询'),
      }(name='RewriteConfig', description='内部重定向动作配置'),
      trafficLimitConfig?: {
        QPS?: int32(name='QPS'),
      }(name='TrafficLimitConfig', description='流量限速'),
      trafficMirrorConfig?: {
        mirrorGroupConfig?: {
          serverGroupTuples?: [ 
            {
              serverGroupId?: string(name='ServerGroupId'),
            }
          ](name='ServerGroupTuples'),
        }(name='MirrorGroupConfig', description='镜像至服务器组'),
        targetType?: string(name='TargetType', description='镜像目标类型'),
      }(name='TrafficMirrorConfig', description='流量镜像'),
      type?: string(name='Type', description='转发规则动作类型'),
    }
  ](name='RuleActions', description='转发规则动作', position='Query'),
  ruleConditions?: [ 
    {
      cookieConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='Cookie条件键'),
            value?: string(name='Value', description='Cookie条件值'),
          }
        ](name='Values', description='Cookie键值对列表'),
      }(name='CookieConfig', description='Cookie条件配置'),
      headerConfig?: {
        key?: string(name='Key', description='HTTP标头键'),
        values?: [ string ](name='Values', description='HTTP标头值列表'),
      }(name='HeaderConfig', description='HTTP标头条件配置'),
      hostConfig?: {
        values?: [ string ](name='Values', description='主机名列表'),
      }(name='HostConfig', description='主机名条件配置'),
      methodConfig?: {
        values?: [ string ](name='Values', description='HTTP请求方法列表'),
      }(name='MethodConfig', description='HTTP请求方法条件配置'),
      pathConfig?: {
        values?: [ string ](name='Values', description='路径条件列表'),
      }(name='PathConfig', description='路径条件配置'),
      queryStringConfig?: {
        values?: [ 
          {
            key?: string(name='Key', description='查询字符串条件键'),
            value?: string(name='Value', description='查询字符串条件值'),
          }
        ](name='Values', description='查询字符串条件键值对列表'),
      }(name='QueryStringConfig', description='查询字符串条件配置'),
      sourceIpConfig?: {
        values?: [ string ](name='Values', description='基于源IP业务流量匹配'),
      }(name='SourceIpConfig', description='基于源IP业务流量匹配'),
      type?: string(name='Type', description='条件类型'),
    }
  ](name='RuleConditions', description='转发规则条件', position='Query'),
  ruleId: string(name='RuleId', description='转发规则标识', position='Query'),
  ruleName?: string(name='RuleName', description='转发规则名称', position='Query'),
}

model UpdateRuleAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleAttributeResponseBody(name='body'),
}

async function updateRuleAttribute(request: UpdateRuleAttributeRequest): UpdateRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRulesAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否只预检此次请求', position='Query'),
  rules: [ 
    {
      priority?: int32(name='Priority', description='转发规则优先级'),
      ruleActions?: [ 
        {
          fixedResponseConfig?: {
            content?: string(name='Content', description='内容'),
            contentType?: string(name='ContentType', description='内容类型'),
            httpCode?: string(name='HttpCode', description='HTTP响应码'),
          }(name='FixedResponseConfig', description='返回固定内容动作配置'),
          forwardGroupConfig?: {
            serverGroupStickySession?: {
              enabled?: boolean(name='Enabled', description='是否开启会话保持'),
              timeout?: int32(name='Timeout', description='超时时间'),
            }(name='ServerGroupStickySession', description='服务器组之间会话保持'),
            serverGroupTuples?: [ 
              {
                serverGroupId?: string(name='ServerGroupId', description='服务器组标识'),
                weight?: int32(name='Weight', description='权重'),
              }
            ](name='ServerGroupTuples', description='转发到的目的服务器组列表'),
          }(name='ForwardGroupConfig', description='转发组动作配置'),
          insertHeaderConfig?: {
            coverEnabled?: boolean(name='CoverEnabled', description='是否覆盖请求中的值'),
            key?: string(name='Key', description='HTTP标头'),
            value?: string(name='Value', description='HTTP标头内容'),
            valueType?: string(name='ValueType', description='取值类型'),
          }(name='InsertHeaderConfig', description='插入头部动作配置'),
          order: int32(name='Order', description='优先级'),
          redirectConfig?: {
            host?: string(name='Host', description='要跳转的主机地址'),
            httpCode?: string(name='HttpCode', description='跳转方式'),
            path?: string(name='Path', description='要跳转的路径'),
            port?: string(name='Port', description='要跳转的端口'),
            protocol?: string(name='Protocol', description='要跳转的协议'),
            query?: string(name='Query', description='要跳转的查询字符串'),
          }(name='RedirectConfig', description='重定向动作配置'),
          removeHeaderConfig?: {
            key?: string(name='Key', description='HTTP标头键'),
          }(name='RemoveHeaderConfig', description='去除HTTP标头'),
          rewriteConfig?: {
            host?: string(name='Host', description='主机名'),
            path?: string(name='Path', description='路径'),
            query?: string(name='Query', description='查询'),
          }(name='RewriteConfig', description='内部重定向动作配置'),
          trafficLimitConfig?: {
            QPS?: int32(name='QPS'),
          }(name='TrafficLimitConfig', description='流量限速'),
          trafficMirrorConfig?: {
            mirrorGroupConfig?: {
              serverGroupTuples?: [ 
                {
                  serverGroupId?: string(name='ServerGroupId'),
                }
              ](name='ServerGroupTuples'),
            }(name='MirrorGroupConfig', description='镜像至服务器组'),
            targetType?: string(name='TargetType', description='镜像目标类型'),
          }(name='TrafficMirrorConfig', description='流量镜像'),
          type: string(name='Type', description='转发规则动作类型'),
        }
      ](name='RuleActions', description='转发规则动作'),
      ruleConditions?: [ 
        {
          cookieConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='Cookie条件键'),
                value?: string(name='Value', description='Cookie条件值'),
              }
            ](name='Values', description='Cookie键值对列表'),
          }(name='CookieConfig', description='Cookie条件配置'),
          headerConfig?: {
            key?: string(name='Key', description='HTTP标头键'),
            values?: [ string ](name='Values', description='HTTP标头值列表'),
          }(name='HeaderConfig', description='HTTP标头条件配置'),
          hostConfig?: {
            values?: [ string ](name='Values', description='主机名列表'),
          }(name='HostConfig', description='主机名条件配置'),
          methodConfig?: {
            values?: [ string ](name='Values', description='HTTP请求方法列表'),
          }(name='MethodConfig', description='HTTP请求方法条件配置'),
          pathConfig?: {
            values?: [ string ](name='Values', description='路径条件列表'),
          }(name='PathConfig', description='查询字符串条件配置'),
          queryStringConfig?: {
            values?: [ 
              {
                key?: string(name='Key', description='查询字符串条件键'),
                value?: string(name='Value', description='查询字符串条件值'),
              }
            ](name='Values', description='查询字符串条件键值对列表'),
          }(name='QueryStringConfig', description='查询字符串条件配置'),
          responseHeaderConfig?: {
            key?: string(name='Key', description='返回HTTP标头键'),
            values?: [ string ](name='Values', description='返回HTTP标头值'),
          }(name='ResponseHeaderConfig', description='返回HTTP标头'),
          responseStatusCodeConfig?: {
            values?: [ string ](name='Values', description='返回状态码条件'),
          }(name='ResponseStatusCodeConfig', description='返回状态码条件'),
          sourceIpConfig?: {
            values?: [ string ](name='Values'),
          }(name='SourceIpConfig', description='基于源IP业务流量匹配'),
          type?: string(name='Type', description='条件类型'),
        }
      ](name='RuleConditions', description='转发规则条件'),
      ruleId: string(name='RuleId', description='转发规则ID'),
      ruleName?: string(name='RuleName', description='转发规则名称'),
    }
  ](name='Rules', description='转发规则列表', position='Query'),
}

model UpdateRulesAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRulesAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRulesAttributeResponseBody(name='body'),
}

async function updateRulesAttribute(request: UpdateRulesAttributeRequest): UpdateRulesAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRulesAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSecurityPolicyAttributeRequest {
  ciphers?: [ string ](name='Ciphers', description='加密套件', position='Query'),
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  securityPolicyId: string(name='SecurityPolicyId', description='安全策略id', position='Query'),
  securityPolicyName?: string(name='SecurityPolicyName', description='安全策略名称', position='Query'),
  TLSVersions?: [ string ](name='TLSVersions', description='TLS版本', position='Query'),
}

model UpdateSecurityPolicyAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateSecurityPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSecurityPolicyAttributeResponseBody(name='body'),
}

async function updateSecurityPolicyAttribute(request: UpdateSecurityPolicyAttributeRequest): UpdateSecurityPolicyAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSecurityPolicyAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServerGroupAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等标识', position='Query'),
  dryRun?: boolean(name='DryRun', description=' 是否只预检此次请求', position='Query'),
  healthCheckConfig?: {
    healthCheckCodes?: [ string ](name='HealthCheckCodes', description='健康检查正常的状态码'),
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查端口', minimum=0, maximum=65535),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', description='是否启用健康检查'),
    healthCheckHost?: string(name='HealthCheckHost', description='健康检查域名'),
    healthCheckHttpVersion?: string(name='HealthCheckHttpVersion', description='健康检查HTTP协议版本'),
    healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查间隔', minimum=1, maximum=50),
    healthCheckMethod?: string(name='HealthCheckMethod', description='健康检查方法'),
    healthCheckPath?: string(name='HealthCheckPath', description='健康检查Path'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', description='健康检查协议类型'),
    healthCheckTimeout?: int32(name='HealthCheckTimeout', description='健康检查超时时间', minimum=1, maximum=300),
    healthyThreshold?: int32(name='HealthyThreshold', description='健康检查成功判定阈值', minimum=2, maximum=10),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查不成功判定阈值', minimum=2, maximum=10),
  }(name='HealthCheckConfig', description='健康检查配置', position='Query'),
  scheduler?: string(name='Scheduler', description='调度策略', position='Query'),
  serverGroupId: string(name='ServerGroupId', description='服务器组Id', position='Query'),
  serverGroupName?: string(name='ServerGroupName', description='Acl名称', position='Query'),
  serviceName?: string(name='ServiceName', description='服务器名称', position='Query'),
  stickySessionConfig?: {
    cookie?: string(name='Cookie', description='服务器上配置的Cookie'),
    cookieTimeout?: int32(name='CookieTimeout', description='服务器上配置的Cookie', minimum=1, maximum=86400),
    stickySessionEnabled?: boolean(name='StickySessionEnabled', description='是否启用会话保持'),
    stickySessionType?: string(name='StickySessionType', description='会话保持类型'),
  }(name='StickySessionConfig', description='会话保持配置', position='Query'),
}

model UpdateServerGroupAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateServerGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServerGroupAttributeResponseBody(name='body'),
}

async function updateServerGroupAttribute(request: UpdateServerGroupAttributeRequest): UpdateServerGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServerGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServerGroupServersAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等Token', position='Query'),
  dryRun?: boolean(name='DryRun', description='dryRun', position='Query'),
  serverGroupId: string(name='ServerGroupId', description='后端服务器Id', position='Query'),
  servers: [ 
    {
      description?: string(name='Description', description='后端服务器描述'),
      port?: int32(name='Port', description='后端端口号'),
      serverId: string(name='ServerId', description='后端服务器id'),
      serverIp?: string(name='ServerIp', description='后端服务器ip'),
      serverType: string(name='ServerType', description='后端服务器类型'),
      weight?: int32(name='Weight', description='后端服务器权重'),
    }
  ](name='Servers', description='后端服务器', position='Query'),
}

model UpdateServerGroupServersAttributeResponseBody = {
  jobId?: string(name='JobId', description='异步任务Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateServerGroupServersAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServerGroupServersAttributeResponseBody(name='body'),
}

async function updateServerGroupServersAttribute(request: UpdateServerGroupServersAttributeRequest): UpdateServerGroupServersAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServerGroupServersAttribute', 'POST', '/', 'json', false, 'json', request);
}

