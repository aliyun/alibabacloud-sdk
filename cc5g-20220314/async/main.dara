/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CC5G';
  @version = '2022-03-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDNSAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='ar5g-test', position='Query'),
  destinationIp?: string(name='DestinationIp', example='1.1.1.1', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  sourceDNSIp: string(name='SourceDNSIp', example='0.0.0.0', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model AddDNSAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId', example='ar5g-xxxx'),
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model AddDNSAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDNSAuthorizationRuleResponseBody(name='body'),
}

async function addDNSAuthorizationRule(request: AddDNSAuthorizationRuleRequest): AddDNSAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDNSAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model AddGroupDnsAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='ar5gg-test', position='Query'),
  destinationIp?: string(name='DestinationIp', example='1.1.1.1', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  sourceDNSIp: string(name='SourceDNSIp', example='114.114.114.114', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
}

model AddGroupDnsAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId', example='ar5gg-12fnojjtkkre28t08j'),
  requestId?: string(name='RequestId', example='D3BAFE75-C670-52DB-9739-03133E5FC914'),
}

model AddGroupDnsAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGroupDnsAuthorizationRuleResponseBody(name='body'),
}

async function addGroupDnsAuthorizationRule(request: AddGroupDnsAuthorizationRuleRequest): AddGroupDnsAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGroupDnsAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model AddWirelessCloudConnectorToGroupRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
  wirelessCloudConnectorIds: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model AddWirelessCloudConnectorToGroupResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model AddWirelessCloudConnectorToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWirelessCloudConnectorToGroupResponseBody(name='body'),
}

async function addWirelessCloudConnectorToGroup(request: AddWirelessCloudConnectorToGroupRequest): AddWirelessCloudConnectorToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddWirelessCloudConnectorToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AttachVpcToNetLinkRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  netLinkId: string(name='NetLinkId', example='cciot-xxxx', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vSwitches: [ string ](name='VSwitches', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1etmgc4vooo5ahbkzou', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model AttachVpcToNetLinkResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model AttachVpcToNetLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachVpcToNetLinkResponseBody(name='body'),
}

async function attachVpcToNetLink(request: AttachVpcToNetLinkRequest): AttachVpcToNetLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachVpcToNetLink', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='ar5g-test', position='Query'),
  destination: string(name='Destination', example='10.0.0.1', position='Query'),
  destinationPort?: string(name='DestinationPort', example='-1/-1', position='Query'),
  destinationType: string(name='DestinationType', example='Cidr', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='Test', position='Query'),
  policy: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='all', position='Query'),
  sourceCidr?: string(name='SourceCidr', example='0.0.0.0/0', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model CreateAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId', example='ar5g-12fnojjtkkre28t08j'),
  requestId?: string(name='RequestId', example='61202DF5-668B-5EDA-8177-F2D71F4737C1'),
}

model CreateAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthorizationRuleResponseBody(name='body'),
}

async function createAuthorizationRule(request: CreateAuthorizationRuleRequest): CreateAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateBatchOperateCardsTaskRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='task- test', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  effectType: string(name='EffectType', example='CurrentMonth', position='Query'),
  iccids?: [ string ](name='Iccids', position='Query'),
  iccidsOssFilePath?: string(name='IccidsOssFilePath', example='https://examplebucket.oss-eu-central-1.aliyuncs.com/***', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  operateType: string(name='OperateType', example='BreakNetwork', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  threshold: long(name='Threshold', example='100', position='Query'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model CreateBatchOperateCardsTaskResponseBody = {
  batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId', example='boct-xxxx'),
  operateResultOssFilePath?: string(name='OperateResultOssFilePath', example='https://examplebucket.oss-eu-central-1.aliyuncs.com/***'),
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model CreateBatchOperateCardsTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBatchOperateCardsTaskResponseBody(name='body'),
}

async function createBatchOperateCardsTask(request: CreateBatchOperateCardsTaskRequest): CreateBatchOperateCardsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBatchOperateCardsTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='ar5gg-test', position='Query'),
  destination: string(name='Destination', example='106.14.175.4', position='Query'),
  destinationPort?: string(name='DestinationPort', example='-1/-1', position='Query'),
  destinationType: string(name='DestinationType', example='Cidr', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  policy: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='all', position='Query'),
  sourceCidr?: string(name='SourceCidr', example='0.0.0.0/0', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
}

model CreateGroupAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId', example='ar5gg-xxxx'),
  requestId?: string(name='RequestId', example='AA93A076-3D94-51AB-AC70-4C94AF003B03'),
}

model CreateGroupAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupAuthorizationRuleResponseBody(name='body'),
}

async function createGroupAuthorizationRule(request: CreateGroupAuthorizationRuleRequest): CreateGroupAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateIoTCloudConnectorBackhaulRouteRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  netLinkId?: string(name='NetLinkId', example='cciot-xxxx', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model CreateIoTCloudConnectorBackhaulRouteResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model CreateIoTCloudConnectorBackhaulRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function createIoTCloudConnectorBackhaulRoute(request: CreateIoTCloudConnectorBackhaulRouteRequest): CreateIoTCloudConnectorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIoTCloudConnectorBackhaulRoute', 'POST', '/', 'json', false, 'json', request);
}

model CreateWirelessCloudConnectorRequest {
  businessType?: string(name='BusinessType', example='Business', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  ISP: string(name='ISP', example='unicom', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  netLinks: [ 
    {
      APN: string(name='APN', example='zjalyjs01s.5gjs.njiot'),
      regionId: string(name='RegionId', example='cn-hangzhou'),
      vSwitchs: [ string ](name='VSwitchs'),
      vpcId: string(name='VpcId', example='vpc-xxx'),
    }
  ](name='NetLinks', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  useCase?: string(name='UseCase', example='test', position='Query'),
}

model CreateWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', example='E1E237B1-EED7-55D5-AE5F-671E642DB3B5'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', example='cc5g-xxxx'),
}

model CreateWirelessCloudConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWirelessCloudConnectorResponseBody(name='body'),
}

async function createWirelessCloudConnector(request: CreateWirelessCloudConnectorRequest): CreateWirelessCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWirelessCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model CreateWirelessCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='cc5gg-test', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateWirelessCloudConnectorGroupResponseBody = {
  requestId?: string(name='RequestId', example='88C2F32F-B641-5980-B7A5-6907050ABCD1'),
  wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****'),
}

model CreateWirelessCloudConnectorGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWirelessCloudConnectorGroupResponseBody(name='body'),
}

async function createWirelessCloudConnectorGroup(request: CreateWirelessCloudConnectorGroupRequest): CreateWirelessCloudConnectorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWirelessCloudConnectorGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar5g-xxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model DeleteAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model DeleteAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAuthorizationRuleResponseBody(name='body'),
}

async function deleteAuthorizationRule(request: DeleteAuthorizationRuleRequest): DeleteAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBatchOperateCardsTaskRequest {
  batchOperateCardsTaskId: string(name='BatchOperateCardsTaskId', example='boct-xxx', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  regionId?: string(name='RegionId', example='cn-shenzhen', position='Query'),
}

model DeleteBatchOperateCardsTaskResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model DeleteBatchOperateCardsTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBatchOperateCardsTaskResponseBody(name='body'),
}

async function deleteBatchOperateCardsTask(request: DeleteBatchOperateCardsTaskRequest): DeleteBatchOperateCardsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBatchOperateCardsTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar5gg-12fnojjtkkre28t08j', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
}

model DeleteGroupAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='A175C091-3910-51AF-8D84-D5717B9B8D38'),
}

model DeleteGroupAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupAuthorizationRuleResponseBody(name='body'),
}

async function deleteGroupAuthorizationRule(request: DeleteGroupAuthorizationRuleRequest): DeleteGroupAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIoTCloudConnectorBackhaulRouteRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  netLinkId?: string(name='NetLinkId', example='cciot-xxxx', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model DeleteIoTCloudConnectorBackhaulRouteResponseBody = {
  requestId?: string(name='RequestId', example='AA93A076-3D94-51AB-AC70-4C94AF003B03'),
}

model DeleteIoTCloudConnectorBackhaulRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function deleteIoTCloudConnectorBackhaulRoute(request: DeleteIoTCloudConnectorBackhaulRouteRequest): DeleteIoTCloudConnectorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIoTCloudConnectorBackhaulRoute', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model DeleteWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model DeleteWirelessCloudConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWirelessCloudConnectorResponseBody(name='body'),
}

async function deleteWirelessCloudConnector(request: DeleteWirelessCloudConnectorRequest): DeleteWirelessCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWirelessCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWirelessCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
}

model DeleteWirelessCloudConnectorGroupResponseBody = {
  requestId?: string(name='RequestId', example='2E759287-F208-589B-82D8-6D7A30F417E3'),
}

model DeleteWirelessCloudConnectorGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWirelessCloudConnectorGroupResponseBody(name='body'),
}

async function deleteWirelessCloudConnectorGroup(request: DeleteWirelessCloudConnectorGroupRequest): DeleteWirelessCloudConnectorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWirelessCloudConnectorGroup', 'POST', '/', 'json', false, 'json', request);
}

model DetachVpcFromNetLinkRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  netLinkId: string(name='NetLinkId', example='cciot-xxxx', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model DetachVpcFromNetLinkResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model DetachVpcFromNetLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachVpcFromNetLinkResponseBody(name='body'),
}

async function detachVpcFromNetLink(request: DetachVpcFromNetLinkRequest): DetachVpcFromNetLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachVpcFromNetLink', 'POST', '/', 'json', false, 'json', request);
}

model FailCardsRequest {
  clientToken?: string(name='ClientToken', example='TF-CreateServerlessDBInstance-1639649079-51d933f6-0251-4057-9276', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  iccids: [ string ](name='Iccids', example='FailCards', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model FailCardsResponseBody = {
  requestId?: string(name='RequestId', example='186B6E37-D9D1-5E64-ACDE-E89F7E68A37B'),
}

model FailCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FailCardsResponseBody(name='body'),
}

async function failCards(request: FailCardsRequest): FailCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailCards', 'POST', '/', 'json', false, 'json', request);
}

model GetCardRequest {
  iccid: string(name='Iccid', example='11111111111', position='Query'),
}

model GetCardResponseBody = {
  APN?: string(name='APN', example='zjalyjs01s.5gjs.njiot'),
  activatedTime?: string(name='ActivatedTime', example='2022-08-25 17:34:57'),
  alarmThreshold?: long(name='AlarmThreshold', example='1000'),
  cloudConnectorId?: string(name='CloudConnectorId', example='iotcc-xxxxxxxx'),
  description?: string(name='Description', example='task-test'),
  ISP?: string(name='ISP', example='Unicom'),
  iccid?: string(name='Iccid', example='111111111'),
  imei?: string(name='Imei', example='23412313513512'),
  imsi?: string(name='Imsi', example='12123123'),
  ipAddress?: string(name='IpAddress', example='172.24.2.121'),
  limitThreshold?: long(name='LimitThreshold', example='50'),
  lock?: string(name='Lock', example='true'),
  msisdn?: string(name='Msisdn', example='2312341231235'),
  name?: string(name='Name', example='test'),
  netType?: string(name='NetType', example='5G'),
  orderId?: string(name='OrderId', example='12312341234124'),
  requestId?: string(name='RequestId', example='0B28B72A-BD16-51F7-AAEE-55247FE02729'),
  simStatus?: string(name='SimStatus', example='Deactivated'),
  spec?: string(name='Spec', example='CONSUMER_THREE_IN_ONE'),
  status?: string(name='Status', example='Available'),
  stopThreshold?: long(name='StopThreshold', example='4096'),
  usageDataMonth?: int32(name='UsageDataMonth', example='50'),
  usageDataTotal?: long(name='UsageDataTotal', example='1000'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', example='cc5g-xxxxxxx'),
}

model GetCardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCardResponseBody(name='body'),
}

async function getCard(request: GetCardRequest): GetCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCard', 'GET', '/', 'json', false, 'json', request);
}

model GetCardLockReasonRequest {
  iccid: string(name='Iccid', example='*********11111', position='Query'),
}

model GetCardLockReasonResponseBody = {
  lockReason?: string(name='LockReason', example='ForceTwoWayStop'),
  requestId?: string(name='RequestId', example='F32C0BBE-5025-5561-8976-7BD096BA21FB'),
}

model GetCardLockReasonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCardLockReasonResponseBody(name='body'),
}

async function getCardLockReason(request: GetCardLockReasonRequest): GetCardLockReasonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardLockReason', 'GET', '/', 'json', false, 'json', request);
}

model GetCreateCustomerInfomationRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetCreateCustomerInfomationResponseBody = {
  canBuyCard?: string(name='CanBuyCard', example='True'),
  requestId?: string(name='RequestId', example='2E759287-F208-589B-82D8-6D7A30F417E3'),
  URL?: string(name='URL', example='https://*******'),
}

model GetCreateCustomerInfomationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCreateCustomerInfomationResponseBody(name='body'),
}

async function getCreateCustomerInfomation(request: GetCreateCustomerInfomationRequest): GetCreateCustomerInfomationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCreateCustomerInfomation', 'GET', '/', 'json', false, 'json', request);
}

model GetCreateCustomerInformationRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', example='cc5g-xxx', position='Query'),
}

model GetCreateCustomerInformationResponseBody = {
  canBuyCard?: string(name='CanBuyCard', example='True'),
  requestId?: string(name='RequestId', example='AE0BA8E5-1E0C-5171-852F-826301C76BBE'),
  URL?: string(name='URL', example='https://*******'),
}

model GetCreateCustomerInformationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCreateCustomerInformationResponseBody(name='body'),
}

async function getCreateCustomerInformation(request: GetCreateCustomerInformationRequest): GetCreateCustomerInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCreateCustomerInformation', 'GET', '/', 'json', false, 'json', request);
}

model GetDiagnoseResultForSingleCardRequest {
  diagnoseTaskId: string(name='DiagnoseTaskId', example='diagnoseTask-bp2qhwdp2n9x6zkvq****', position='Query'),
  regionNo?: string(name='RegionNo', example='cn-hangzhou', position='Query'),
}

model GetDiagnoseResultForSingleCardResponseBody = {
  beginTime?: long(name='BeginTime', example='1646100223024'),
  cardIp?: string(name='CardIp', example='10.176.78.61'),
  destination?: string(name='Destination', example='106.14.175.4'),
  destinationType?: string(name='DestinationType', example='Domain'),
  diagnoseItem?: [ 
    {
      part?: string(name='Part', example='Terminal'),
      status?: string(name='Status', example='Wrong'),
      subItems?: [ 
        {
          subItem?: string(name='SubItem', example='CardStatus'),
          subItemInfo?: string(name='SubItemInfo', example='Card status is real-time'),
          subItemStatus?: string(name='SubItemStatus', example='Normal'),
        }
      ](name='SubItems'),
    }
  ](name='DiagnoseItem'),
  endTime?: long(name='EndTime', example='1646100223264'),
  errorResult?: [ 
    {
      errorDesc?: string(name='ErrorDesc', example='Terminal abnormal'),
      errorItem?: string(name='ErrorItem', example='CardStatus'),
      errorLevel?: string(name='ErrorLevel', example='Warning'),
      errorPart?: string(name='ErrorPart', example='Terminal'),
      errorSuggestion?: string(name='ErrorSuggestion', example='Please check whether the terminal and card are compatible or whether the terminal can send messages'),
    }
  ](name='ErrorResult'),
  iccId?: string(name='IccId', example='89860477102170127555'),
  requestId?: string(name='RequestId', example='94032572-8758-575E-B306-86F59D1B826E'),
  status?: string(name='Status', example='failed'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', example='cc5g-xxxx'),
}

model GetDiagnoseResultForSingleCardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDiagnoseResultForSingleCardResponseBody(name='body'),
}

async function getDiagnoseResultForSingleCard(request: GetDiagnoseResultForSingleCardRequest): GetDiagnoseResultForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDiagnoseResultForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model GetWirelessCloudConnectorRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model GetWirelessCloudConnectorResponseBody = {
  businessType?: string(name='BusinessType', example='Business'),
  cardCount?: string(name='CardCount', example='20000'),
  createTime?: string(name='CreateTime', example='2022-3-15 22:20:00'),
  dataPackageId?: string(name='DataPackageId', example='dp-xxxx'),
  dataPackageType?: string(name='DataPackageType', example='200'),
  description?: string(name='Description', example='cc5g-test'),
  features?: [ string ](name='Features'),
  name?: string(name='Name', example='test'),
  netLinks?: [ 
    {
      APN?: string(name='APN', example='bjaliyun01s.5gbj.bjiot'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      grantAliUid?: string(name='GrantAliUid', example='11111111111'),
      ISP?: string(name='ISP', example='Telecom'),
      name?: string(name='Name', description='代表创建时间的资源属性字段', example='test'),
      netLinkId?: string(name='NetLinkId', description='代表资源名称的资源属性字段', example='cciot-xxxx'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Attached'),
      type?: string(name='Type', example='Standard'),
      vSwitchs?: [ string ](name='VSwitchs'),
      vpcId?: string(name='VpcId', example='vpc-xxxx'),
    }
  ](name='NetLinks'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
  serviceType?: string(name='ServiceType', example='CC5GCCIoT'),
  status?: string(name='Status', example='Available'),
  useCase?: string(name='UseCase'),
  wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', example='cc5g-xxxx'),
}

model GetWirelessCloudConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWirelessCloudConnectorResponseBody(name='body'),
}

async function getWirelessCloudConnector(request: GetWirelessCloudConnectorRequest): GetWirelessCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWirelessCloudConnector', 'GET', '/', 'json', false, 'json', request);
}

model GrantNetLinkRequest {
  clientToken?: string(name='ClientToken', example='f0ba469f-de7f-4dde-8390-0966a1a0ef9a', position='Query'),
  dryRun?: boolean(name='DryRun', example='False', position='Query'),
  grantAliUid: long(name='GrantAliUid', example='11111111111', position='Query'),
  netLinkId: string(name='NetLinkId', example='cciot-xxxx', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model GrantNetLinkResponseBody = {
  requestId?: string(name='RequestId', example='E6B58AF9-F1BF-5894-B898-6CE2108463C5'),
}

model GrantNetLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantNetLinkResponseBody(name='body'),
}

async function grantNetLink(request: GrantNetLinkRequest): GrantNetLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantNetLink', 'POST', '/', 'json', false, 'json', request);
}

model InnerLimitRateCardsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  innerApi?: boolean(name='InnerApi', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  task?: boolean(name='Task', position='Query'),
}

model InnerLimitRateCardsResponseBody = {
  requestId?: string(name='RequestId'),
}

model InnerLimitRateCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InnerLimitRateCardsResponseBody(name='body'),
}

async function innerLimitRateCards(request: InnerLimitRateCardsRequest): InnerLimitRateCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InnerLimitRateCards', 'POST', '/', 'json', false, 'json', request);
}

model InnerStopCardsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  innerApi?: boolean(name='InnerApi', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  task?: boolean(name='Task', position='Query'),
}

model InnerStopCardsResponseBody = {
  requestId?: string(name='RequestId'),
}

model InnerStopCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InnerStopCardsResponseBody(name='body'),
}

async function innerStopCards(request: InnerStopCardsRequest): InnerStopCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InnerStopCards', 'POST', '/', 'json', false, 'json', request);
}

model ListAPNsRequest {
  APN?: string(name='APN', example='CMWAP', position='Query'),
  ISP?: string(name='ISP', example='unicom', position='Query'),
  maxResults?: long(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListAPNsResponseBody = {
  APNs?: [ 
    {
      APN?: string(name='APN', description='代表资源名称的资源属性字段', example='zjhzaliyun01s.5gjs.njiot'),
      description?: string(name='Description'),
      ISP?: string(name='ISP', description='代表资源一级ID的资源属性字段', example='unicom'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      zones?: [ string ](name='Zones'),
    }
  ](name='APNs'),
  maxResults?: string(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='vhNxI+jwQfkLCUChCQ+iOoiRkyUbtAilGSvWuwktFBxF+bar2HpV0efI6n1+GkMv'),
  requestId?: string(name='RequestId', example='A175C091-3910-51AF-8D84-D5717B9B8D38'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListAPNsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAPNsResponseBody(name='body'),
}

async function listAPNs(request: ListAPNsRequest): ListAPNsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAPNs', 'GET', '/', 'json', false, 'json', request);
}

model ListAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds', position='Query'),
  destination?: string(name='Destination', example='10.0.0.1', position='Query'),
  destinationPort?: string(name='DestinationPort', example='-1/-1', position='Query'),
  destinationType?: string(name='DestinationType', example='Cidr', position='Query'),
  dns?: boolean(name='Dns', example='true', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere', position='Query'),
  policy?: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='all', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  type?: string(name='Type', example='System', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ListAuthorizationRulesResponseBody = {
  authorizationRules?: [ 
    {
      authorizationRuleId?: string(name='AuthorizationRuleId', description='代表资源一级ID的资源属性字段', example='ar5g-xxxx'),
      createTime?: string(name='CreateTime', example='2022-3-15 22:20:00'),
      description?: string(name='Description', example='ar5g-test'),
      destination?: string(name='Destination', example='10.0.0.0/24'),
      destinationPort?: string(name='DestinationPort', example='0-65535'),
      destinationType?: string(name='DestinationType', example='Cidr'),
      dns?: boolean(name='Dns', example='true'),
      name?: string(name='Name', description='代表创建时间的资源属性字段', example='test'),
      policy?: string(name='Policy', example='Permit'),
      protocol?: string(name='Protocol', example='all'),
      sourceCidr?: string(name='SourceCidr', example='0.0.0.0/0'),
      status?: string(name='Status', description='代表资源名称的资源属性字段', example='Pending'),
      type?: string(name='Type', example='Default'),
    }
  ](name='AuthorizationRules'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere'),
  requestId?: string(name='RequestId', example='207F9929-806E-5622-8E4F-8484F7000C22'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListAuthorizationRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizationRulesResponseBody(name='body'),
}

async function listAuthorizationRules(request: ListAuthorizationRulesRequest): ListAuthorizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizationRules', 'GET', '/', 'json', false, 'json', request);
}

model ListBatchOperateCardsTasksRequest {
  batchOperateCardsTaskIds?: [ string ](name='BatchOperateCardsTaskIds', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
}

model ListBatchOperateCardsTasksResponseBody = {
  batchOperateCardsTasks?: [ 
    {
      batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId', description='代表资源一级ID的资源属性字段', example='boct-xxxx'),
      createTime?: string(name='CreateTime', example='2022-3-15 22:20:00'),
      description?: string(name='Description', example='task-test'),
      effectType?: string(name='EffectType', example='CurrentMonth'),
      iccidsOssFilePath?: string(name='IccidsOssFilePath', example='https://examplebucket.oss-eu-central-1.aliyuncs.com/***'),
      name?: string(name='Name', example='test'),
      operateResultOssFilePath?: string(name='OperateResultOssFilePath', example='https://examplebucket.oss-eu-central-1.aliyuncs.com/***'),
      operateType?: string(name='OperateType', description='代表创建时间的资源属性字段', example='BreakNetwork'),
      status?: string(name='Status', example='Available'),
      threshold?: string(name='Threshold', example='100'),
      wirelessCloudConnectors?: [ 
        {
          status?: string(name='Status', example='Deleted'),
          wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', example='cc5g-xxxx'),
        }
      ](name='WirelessCloudConnectors'),
    }
  ](name='BatchOperateCardsTasks'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere'),
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListBatchOperateCardsTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBatchOperateCardsTasksResponseBody(name='body'),
}

async function listBatchOperateCardsTasks(request: ListBatchOperateCardsTasksRequest): ListBatchOperateCardsTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBatchOperateCardsTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListCardAreaLimitSupportAreaRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='en', position='Query'),
  provinceName?: string(name='ProvinceName', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListCardAreaLimitSupportAreaResponseBody = {
  provinces?: [ string ](name='Provinces'),
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model ListCardAreaLimitSupportAreaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCardAreaLimitSupportAreaResponseBody(name='body'),
}

async function listCardAreaLimitSupportArea(request: ListCardAreaLimitSupportAreaRequest): ListCardAreaLimitSupportAreaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCardAreaLimitSupportArea', 'GET', '/', 'json', false, 'json', request);
}

model ListCardDayUsagesRequest {
  iccids: [ string ](name='Iccids', position='Query'),
  latestMonthNum?: int32(name='LatestMonthNum', example='1', minimum=1, maximum=6, position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ListCardDayUsagesResponseBody = {
  cards?: [ 
    {
      iccid?: string(name='Iccid', description='代表资源一级ID的资源属性字段', example='89091231231219123'),
      usageDataMonths?: [ 
        {
          cardDayUsages?: [ 
            {
              day?: string(name='Day', example='20220701'),
              usageData?: string(name='UsageData', example='40'),
            }
          ](name='CardDayUsages'),
          month?: string(name='Month', example='202207'),
          usageDataMonth?: string(name='UsageDataMonth', example='1030'),
        }
      ](name='UsageDataMonths'),
    }
  ](name='Cards'),
  requestId?: string(name='RequestId', example='AA93A076-3D94-51AB-AC70-4C94AF003B03'),
}

model ListCardDayUsagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCardDayUsagesResponseBody(name='body'),
}

async function listCardDayUsages(request: ListCardDayUsagesRequest): ListCardDayUsagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCardDayUsages', 'GET', '/', 'json', false, 'json', request);
}

model ListCardUsagesRequest {
  iccids?: [ string ](name='Iccids', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ListCardUsagesResponseBody = {
  cards?: [ 
    {
      iccid?: string(name='Iccid', description='代表资源一级ID的资源属性字段', example='89091231231219123'),
      usageDataMonth?: long(name='UsageDataMonth', example='20'),
    }
  ](name='Cards'),
  requestId?: string(name='RequestId', example='186B6E37-D9D1-5E64-ACDE-E89F7E68A37B'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListCardUsagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCardUsagesResponseBody(name='body'),
}

async function listCardUsages(request: ListCardUsagesRequest): ListCardUsagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCardUsages', 'GET', '/', 'json', false, 'json', request);
}

model ListCardsRequest {
  apn?: string(name='Apn', example='bjaliyun01s.5gbj.bjiot', position='Query'),
  iccid?: string(name='Iccid', example='8909123123121912', position='Query'),
  iccids?: [ string ](name='Iccids', position='Query'),
  ipAddress?: string(name='IpAddress', example='10.0.0.1', position='Query'),
  lock?: boolean(name='Lock', example='true', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  msisdn?: string(name='Msisdn', example='1441204374591', position='Query'),
  netLinkId?: string(name='NetLinkId', example='cciot-xxxx', position='Query'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere', position='Query'),
  online?: boolean(name='Online', example='true', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ListCardsResponseBody = {
  cards?: [ 
    {
      APN?: string(name='APN', description='代表创建时间的资源属性字段', example='bjaliyun01s.5gbj.bjiot'),
      activatedTime?: string(name='ActivatedTime', example='2022-3-15 22:20:00'),
      businessStatus?: string(name='BusinessStatus', example='Available'),
      description?: string(name='Description', example='test'),
      ISP?: string(name='ISP', example='Telecom'),
      iccid?: string(name='Iccid', description='代表资源一级ID的资源属性字段', example='89091231231219123'),
      imei?: string(name='Imei', example='7896129300'),
      imsi?: string(name='Imsi', example='8912039123'),
      ipAddress?: string(name='IpAddress', example='10.0.0.118'),
      lock?: boolean(name='Lock', example='false'),
      msisdn?: string(name='Msisdn', example='1441204374591'),
      name?: string(name='Name', example='test'),
      netType?: string(name='NetType', description='代表资源名称的资源属性字段', example='5G'),
      orderId?: string(name='OrderId', example='89099123012'),
      spec?: string(name='Spec', example='CONSUMER_THREE_IN_ONE'),
      status?: string(name='Status'),
      usageDataMonth?: long(name='UsageDataMonth', example='20'),
      usageDataTotal?: string(name='UsageDataTotal', example='50'),
    }
  ](name='Cards'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere'),
  requestId?: string(name='RequestId', example='88C2F32F-B641-5980-B7A5-6907050ABCD1'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCardsResponseBody(name='body'),
}

async function listCards(request: ListCardsRequest): ListCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCards', 'GET', '/', 'json', false, 'json', request);
}

model ListDataPackagesRequest {
  dataPackageIds?: [ string ](name='DataPackageIds', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ListDataPackagesResponseBody = {
  dataPackages?: [ 
    {
      cardCount?: string(name='CardCount', example='20000'),
      createTime?: string(name='CreateTime', example='2022-3-15 22:20:00'),
      dataPackageId?: string(name='DataPackageId', example='dp-xxxx'),
      expiredTime?: string(name='ExpiredTime', example='2099-3-15 22:20:00'),
      ISP?: string(name='ISP', example='Telecom'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      size?: string(name='Size', example='200'),
      status?: string(name='Status', description='代表资源名称的资源属性字段', example='Available'),
    }
  ](name='DataPackages'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere'),
  requestId?: string(name='RequestId', example='8734B5B2-FC84-54C4-8038-D40228CF01FE'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListDataPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataPackagesResponseBody(name='body'),
}

async function listDataPackages(request: ListDataPackagesRequest): ListDataPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataPackages', 'GET', '/', 'json', false, 'json', request);
}

model ListDiagnoseInfoForSingleCardRequest {
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  regionNo?: string(name='RegionNo', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', example='89860477102170127555', position='Query'),
  sourceType?: string(name='SourceType', example='Iccid', position='Query'),
  status?: string(name='Status', example='success', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ListDiagnoseInfoForSingleCardResponseBody = {
  diagnoseInfo?: [ 
    {
      beginTime?: long(name='BeginTime', example='1662307200000'),
      cardIp?: string(name='CardIp', example='10.176.78.61'),
      destination?: string(name='Destination', example='www.xxx.com'),
      destinationType?: string(name='DestinationType', example='Domain'),
      diagnoseTaskId?: string(name='DiagnoseTaskId', example='diagnoseTask-bp2x7tzkdl655liw3mhbg'),
      diagnoseTime?: long(name='DiagnoseTime', example='1662307202400'),
      endTime?: long(name='EndTime', example='1662307201200'),
      iccId?: string(name='IccId', example='89860477102170127555'),
      source?: string(name='Source', example='89860477102170127555'),
      sourceType?: string(name='SourceType', example='Iccid'),
      status?: string(name='Status', example='failed'),
      wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', example='cc5g-xxxx'),
    }
  ](name='DiagnoseInfo'),
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='E1E237B1-EED7-55D5-AE5F-671E642DB3B5'),
  totalCount?: long(name='TotalCount', example='50'),
}

model ListDiagnoseInfoForSingleCardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDiagnoseInfoForSingleCardResponseBody(name='body'),
}

async function listDiagnoseInfoForSingleCard(request: ListDiagnoseInfoForSingleCardRequest): ListDiagnoseInfoForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDiagnoseInfoForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds', position='Query'),
  destination?: string(name='Destination', example='10.0.0.1', position='Query'),
  destinationPort?: string(name='DestinationPort', example='-1/-1', position='Query'),
  destinationType?: string(name='DestinationType', example='Cidr', position='Query'),
  dns?: boolean(name='Dns', example='true', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere', position='Query'),
  policy?: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='all', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  type?: string(name='Type', example='System', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
}

model ListGroupAuthorizationRulesResponseBody = {
  groupAuthorizationRules?: [ 
    {
      authorizationRuleId?: string(name='AuthorizationRuleId', description='代表资源一级ID的资源属性字段', example='ar5gg-y5g4rp2w1tl1w7zg59'),
      createTime?: string(name='CreateTime', example='2022-06-21 15:27:24'),
      description?: string(name='Description', example='ar5gg-test'),
      destination?: string(name='Destination', example='47.103.184.100/32'),
      destinationPort?: string(name='DestinationPort', example='0-65535'),
      destinationType?: string(name='DestinationType', example='Cidr'),
      dns?: boolean(name='Dns', example='true'),
      name?: string(name='Name', description='代表创建时间的资源属性字段', example='test'),
      policy?: string(name='Policy', example='Permit'),
      protocol?: string(name='Protocol', example='all'),
      sourceCidr?: string(name='SourceCidr', example='0.0.0.0/0'),
      status?: string(name='Status', description='代表资源名称的资源属性字段', example='Creating'),
      type?: string(name='Type', example='Default'),
    }
  ](name='GroupAuthorizationRules'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere'),
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListGroupAuthorizationRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupAuthorizationRulesResponseBody(name='body'),
}

async function listGroupAuthorizationRules(request: ListGroupAuthorizationRulesRequest): ListGroupAuthorizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupAuthorizationRules', 'GET', '/', 'json', false, 'json', request);
}

model ListIoTCloudConnectorBackhaulRouteRequest {
  netLinkId: string(name='NetLinkId', example='cciot-xxxx', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ListIoTCloudConnectorBackhaulRouteResponseBody = {
  netLinkId?: string(name='NetLinkId', example='cciot-xxxx'),
  requestId?: string(name='RequestId', example='94032572-8758-575E-B306-86F59D1B826E'),
  routes?: [ 
    {
      description?: string(name='Description', description='代表创建时间的资源属性字段', example='full cidr block route'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='代表资源名称的资源属性字段', example='10.33.190.0/24'),
      nextHopId?: string(name='NextHopId', description='代表创建时间的资源属性字段', example='eni-uf677iw3xihqxiz2ssir'),
      nextHopType?: string(name='NextHopType', description='代表创建时间的资源属性字段', example='NetworkInterface'),
      status?: string(name='Status', description='代表创建时间的资源属性字段', example='published'),
    }
  ](name='Routes'),
}

model ListIoTCloudConnectorBackhaulRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function listIoTCloudConnectorBackhaulRoute(request: ListIoTCloudConnectorBackhaulRouteRequest): ListIoTCloudConnectorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIoTCloudConnectorBackhaulRoute', 'GET', '/', 'json', false, 'json', request);
}

model ListOrdersRequest {
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere', position='Query'),
  orderAction?: string(name='OrderAction', example='NewBuy', position='Query'),
  orderIds?: [ string ](name='OrderIds', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ListOrdersResponseBody = {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere'),
  orders?: [ 
    {
      action?: string(name='Action', description='代表创建时间的资源属性字段', example='NewBuy'),
      cardCount?: string(name='CardCount', example='20000'),
      cardNetType?: string(name='CardNetType', example='5G'),
      cardType?: string(name='CardType', example='CONSUMER_THREE_IN_ONE'),
      contactName?: string(name='ContactName'),
      contactPhone?: string(name='ContactPhone', example='139000*******'),
      createTime?: string(name='CreateTime', example='2022-3-15 21:20:00'),
      description?: string(name='Description', example='order-test'),
      logisticsId?: string(name='LogisticsId', example='SF14*********'),
      logisticsStatus?: string(name='LogisticsStatus', example='Signed'),
      logisticsType?: string(name='LogisticsType', example='SF'),
      logisticsUpdateTime?: string(name='LogisticsUpdateTime', example='2022-3-15 22:20:00'),
      orderId?: string(name='OrderId', example='89************'),
      payTime?: string(name='PayTime', example='2022-3-15 21:30:00'),
      postAddress?: string(name='PostAddress'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', description='代表资源名称的资源属性字段', example='Pending'),
    }
  ](name='Orders'),
  requestId?: string(name='RequestId', example='88C2F32F-B641-5980-B7A5-6907050ABCD1'),
  totalCount?: string(name='TotalCount', example='2'),
}

model ListOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrdersResponseBody(name='body'),
}

async function listOrders(request: ListOrdersRequest): ListOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrders', 'GET', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='代表资源名称的资源属性字段'),
      regionId?: string(name='RegionId', description='代表资源一级ID的资源属性字段', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='2DCFA69E-A161-512D-99A7-108022580719'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListWirelessCloudConnectorGroupsRequest {
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  wirelessCloudConnectorGroupIds?: [ string ](name='WirelessCloudConnectorGroupIds', position='Query'),
  wirelessCloudConnectorGroupNames?: [ string ](name='WirelessCloudConnectorGroupNames', position='Query'),
  wirelessCloudConnectorGroupStatus?: [ string ](name='WirelessCloudConnectorGroupStatus', position='Query'),
}

model ListWirelessCloudConnectorGroupsResponseBody = {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere'),
  requestId?: string(name='RequestId', example='D3BAFE75-C670-52DB-9739-03133E5FC914'),
  totalCount?: string(name='TotalCount', example='2'),
  wirelessCloudConnectorGroups?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-07-04 19:19:14'),
      description?: string(name='Description', example='cc5gg-test'),
      name?: string(name='Name', description='代表创建时间的资源属性字段', example='test'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      status?: string(name='Status', description='代表资源名称的资源属性字段', example='Creating'),
      wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId', description='代表资源一级ID的资源属性字段', example='cc5gg-xxxx'),
      wirelessCloudConnectors?: [ 
        {
          businessType?: string(name='BusinessType', example='Business'),
          cardCount?: string(name='CardCount', example='115'),
          createTime?: string(name='CreateTime', example='2022-04-28 17:40:53'),
          dataPackageId?: string(name='DataPackageId', example='dp-xxxx'),
          dataPackageType?: string(name='DataPackageType', example='200'),
          description?: string(name='Description', example='cc5g-test'),
          name?: string(name='Name', example='test'),
          regionId?: string(name='RegionId', example='cn-shenzhen'),
          serviceType?: string(name='ServiceType', example='CC5G'),
          status?: string(name='Status', example='Available'),
          useCase?: string(name='UseCase'),
          wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', example='cc5g-62eb02o7lz1w5aurl3'),
        }
      ](name='WirelessCloudConnectors'),
    }
  ](name='WirelessCloudConnectorGroups'),
}

model ListWirelessCloudConnectorGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWirelessCloudConnectorGroupsResponseBody(name='body'),
}

async function listWirelessCloudConnectorGroups(request: ListWirelessCloudConnectorGroupsRequest): ListWirelessCloudConnectorGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWirelessCloudConnectorGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListWirelessCloudConnectorsRequest {
  businessType?: string(name='BusinessType', example='Business', position='Query'),
  isInGroup?: string(name='IsInGroup', example='false', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model ListWirelessCloudConnectorsResponseBody = {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='iou001238joojjaere'),
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
  totalCount?: string(name='TotalCount', example='2'),
  wirelessCloudConnectors?: [ 
    {
      businessType?: string(name='BusinessType', example='Business'),
      cardCount?: string(name='CardCount', example='20000'),
      createTime?: string(name='CreateTime', example='2022-3-15 22:20:00'),
      dataPackageId?: string(name='DataPackageId', example='dp-xxxx'),
      dataPackageType?: string(name='DataPackageType', example='200'),
      description?: string(name='Description', example='cc5g-test'),
      name?: string(name='Name', description='代表创建时间的资源属性字段', example='test'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      serviceType?: string(name='ServiceType', example='CC5G'),
      status?: string(name='Status', description='代表资源名称的资源属性字段', example='Available'),
      useCase?: string(name='UseCase'),
      wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****'),
      wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', description='代表资源一级ID的资源属性字段', example='cc5g-xxxx'),
    }
  ](name='WirelessCloudConnectors'),
}

model ListWirelessCloudConnectorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWirelessCloudConnectorsResponseBody(name='body'),
}

async function listWirelessCloudConnectors(request: ListWirelessCloudConnectorsRequest): ListWirelessCloudConnectorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWirelessCloudConnectors', 'GET', '/', 'json', false, 'json', request);
}

model ListZonesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListZonesResponseBody = {
  requestId?: string(name='RequestId', example='C2C1DE7C-E14C-53DE-920D-D63ACD7421A4'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='代表创建时间的资源属性字段'),
      zoneId?: string(name='ZoneId', description='代表资源名称的资源属性字段', example='cn-hangzhou-h'),
    }
  ](name='Zones'),
}

model ListZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListZonesResponseBody(name='body'),
}

async function listZones(request: ListZonesRequest): ListZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListZones', 'GET', '/', 'json', false, 'json', request);
}

model LockCardsRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model LockCardsResponseBody = {
  requestId?: string(name='RequestId', example='8734B5B2-FC84-54C4-8038-D40228CF01FE'),
}

model LockCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LockCardsResponseBody(name='body'),
}

async function lockCards(request: LockCardsRequest): LockCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockCards', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWirelessCloudConnectorFeatureRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  featureName?: string(name='FeatureName', example='DirectMode', position='Query'),
  featureValue?: string(name='FeatureValue', example='On', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model ModifyWirelessCloudConnectorFeatureResponseBody = {
  requestId?: string(name='RequestId', example='999E0F64-9A10-567B-BB84-B7C46023BA3B'),
}

model ModifyWirelessCloudConnectorFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyWirelessCloudConnectorFeatureResponseBody(name='body'),
}

async function modifyWirelessCloudConnectorFeature(request: ModifyWirelessCloudConnectorFeatureRequest): ModifyWirelessCloudConnectorFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWirelessCloudConnectorFeature', 'POST', '/', 'json', false, 'json', request);
}

model OpenCc5gServiceRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model OpenCc5gServiceResponseBody = {
  requestId?: string(name='RequestId', example='2DCFA69E-A161-512D-99A7-108022580719'),
}

model OpenCc5gServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenCc5gServiceResponseBody(name='body'),
}

async function openCc5gService(request: OpenCc5gServiceRequest): OpenCc5gServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenCc5gService', 'POST', '/', 'json', false, 'json', request);
}

model RebindCardsRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RebindCardsResponseBody = {
  requestId?: string(name='RequestId', example='D2A9864E-BB8D-5A5C-90FC-E2FBD5D0BF9B'),
}

model RebindCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebindCardsResponseBody(name='body'),
}

async function rebindCards(request: RebindCardsRequest): RebindCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebindCards', 'POST', '/', 'json', false, 'json', request);
}

model RemoveWirelessCloudConnectorFromGroupRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
  wirelessCloudConnectorIds: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model RemoveWirelessCloudConnectorFromGroupResponseBody = {
  requestId?: string(name='RequestId', example='2DCFA69E-A161-512D-99A7-108022580719'),
}

model RemoveWirelessCloudConnectorFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveWirelessCloudConnectorFromGroupResponseBody(name='body'),
}

async function removeWirelessCloudConnectorFromGroup(request: RemoveWirelessCloudConnectorFromGroupRequest): RemoveWirelessCloudConnectorFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveWirelessCloudConnectorFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model ResetAreaLimitCardsRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  province: string(name='Province', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ResetAreaLimitCardsResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model ResetAreaLimitCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAreaLimitCardsResponseBody(name='body'),
}

async function resetAreaLimitCards(request: ResetAreaLimitCardsRequest): ResetAreaLimitCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAreaLimitCards', 'POST', '/', 'json', false, 'json', request);
}

model ResumeCardsRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ResumeCardsResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model ResumeCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeCardsResponseBody(name='body'),
}

async function resumeCards(request: ResumeCardsRequest): ResumeCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeCards', 'POST', '/', 'json', false, 'json', request);
}

model RevokeNetLinkRequest {
  clientToken?: string(name='ClientToken', example='8278082c-0b8c-412c-b0ad-876a3cf0d0f8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  netLinkId: string(name='NetLinkId', example='iotcc-ua6xy4vpmi24y114ws', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model RevokeNetLinkResponseBody = {
  requestId?: string(name='RequestId', example='1E781588-69D4-56C3-93BA-DEFECF2596B8'),
}

model RevokeNetLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeNetLinkResponseBody(name='body'),
}

async function revokeNetLink(request: RevokeNetLinkRequest): RevokeNetLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeNetLink', 'POST', '/', 'json', false, 'json', request);
}

model StopCardsRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StopCardsResponseBody = {
  requestId?: string(name='RequestId', example='8734B5B2-FC84-54C4-8038-D40228CF01FE'),
}

model StopCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopCardsResponseBody(name='body'),
}

async function stopCards(request: StopCardsRequest): StopCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCards', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDiagnoseTaskForSingleCardRequest {
  beginTime: long(name='BeginTime', example='1662307201200', position='Query'),
  destination?: string(name='Destination', example='106.14.175.4', position='Query'),
  endTime: long(name='EndTime', example='1662307201200', position='Query'),
  regionNo: string(name='RegionNo', example='cn-hangzhou', position='Query'),
  resourceUid?: long(name='ResourceUid', example='253460731706911258', position='Query'),
  source: string(name='Source', example='89860477102170127555', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model SubmitDiagnoseTaskForSingleCardResponseBody = {
  diagnoseTaskId?: string(name='DiagnoseTaskId', example='diagnoseTask-bp2n6rgaj49qcs34jyzo8'),
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model SubmitDiagnoseTaskForSingleCardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDiagnoseTaskForSingleCardResponseBody(name='body'),
}

async function submitDiagnoseTaskForSingleCard(request: SubmitDiagnoseTaskForSingleCardRequest): SubmitDiagnoseTaskForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDiagnoseTaskForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model SwitchWirelessCloudConnectorToBusinessRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model SwitchWirelessCloudConnectorToBusinessResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='74ADDCF3-E3FE-5200-9290-1320125D71DC'),
}

model SwitchWirelessCloudConnectorToBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchWirelessCloudConnectorToBusinessResponseBody(name='body'),
}

async function switchWirelessCloudConnectorToBusiness(request: SwitchWirelessCloudConnectorToBusinessRequest): SwitchWirelessCloudConnectorToBusinessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchWirelessCloudConnectorToBusiness', 'POST', '/', 'json', false, 'json', request);
}

model UnlockCardsRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UnlockCardsResponseBody = {
  requestId?: string(name='RequestId', example='81CB64DF-E328-50A3-B386-03CAD604C114'),
}

model UnlockCardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnlockCardsResponseBody(name='body'),
}

async function unlockCards(request: UnlockCardsRequest): UnlockCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockCards', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar5g-xxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='ar5g-test', position='Query'),
  destination?: string(name='Destination', example='10.0.0.1', position='Query'),
  destinationPort?: string(name='DestinationPort', example='-1/-1', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='Test', position='Query'),
  policy?: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='all', position='Query'),
  sourceCidr?: string(name='SourceCidr', example='0.0.0.0/0', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model UpdateAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='D3BAFE75-C670-52DB-9739-03133E5FC914'),
}

model UpdateAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuthorizationRuleResponseBody(name='body'),
}

async function updateAuthorizationRule(request: UpdateAuthorizationRuleRequest): UpdateAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBatchOperateCardsTaskRequest {
  batchOperateCardsTaskId: string(name='BatchOperateCardsTaskId', example='boct-xxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='task-test', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  effectType?: string(name='EffectType', example='CurrentMonth', position='Query'),
  iccids?: [ string ](name='Iccids', position='Query'),
  iccidsOssFilePath?: string(name='IccidsOssFilePath', example='cciot-cn-hangzhou/127859184306****/***.csv', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  operateType?: string(name='OperateType', example='BreakNetwork', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  threshold?: long(name='Threshold', example='100', position='Query'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model UpdateBatchOperateCardsTaskResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model UpdateBatchOperateCardsTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBatchOperateCardsTaskResponseBody(name='body'),
}

async function updateBatchOperateCardsTask(request: UpdateBatchOperateCardsTaskRequest): UpdateBatchOperateCardsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBatchOperateCardsTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCardRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='card-test', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  iccid?: string(name='Iccid', example='890912389123', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model UpdateCardResponseBody = {
  requestId?: string(name='RequestId', example='8734B5B2-FC84-54C4-8038-D40228CF01FE'),
}

model UpdateCardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCardResponseBody(name='body'),
}

async function updateCard(request: UpdateCardRequest): UpdateCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCard', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDNSAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar5g-xxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='ar5g-test', position='Query'),
  destinationIp?: string(name='DestinationIp', example='10.0.0.1', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  sourceDNSIp?: string(name='SourceDNSIp', example='0.0.0.0', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model UpdateDNSAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model UpdateDNSAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDNSAuthorizationRuleResponseBody(name='body'),
}

async function updateDNSAuthorizationRule(request: UpdateDNSAuthorizationRuleRequest): UpdateDNSAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDNSAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar5gg-xxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  destination?: string(name='Destination', example='192.168.XX.XX', position='Query'),
  destinationPort?: string(name='DestinationPort', example='80/80', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  policy?: string(name='Policy', example='Permit', position='Query'),
  protocol?: string(name='Protocol', example='all', position='Query'),
  sourceCidr?: string(name='SourceCidr', example='192.168.0.1', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
}

model UpdateGroupAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='79B01B1A-7089-552F-9798-DEDFFBAAED5F'),
}

model UpdateGroupAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGroupAuthorizationRuleResponseBody(name='body'),
}

async function updateGroupAuthorizationRule(request: UpdateGroupAuthorizationRuleRequest): UpdateGroupAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupDnsAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', example='ar5gg-xxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='description', position='Query'),
  destinationIp?: string(name='DestinationIp', example='192.168.0.2', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  sourceDNSIp?: string(name='SourceDNSIp', example='100.100.2.136', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
}

model UpdateGroupDnsAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='207F9929-806E-5622-8E4F-8484F7000C22'),
}

model UpdateGroupDnsAuthorizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGroupDnsAuthorizationRuleResponseBody(name='body'),
}

async function updateGroupDnsAuthorizationRule(request: UpdateGroupDnsAuthorizationRuleRequest): UpdateGroupDnsAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupDnsAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='cc5g-test', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', example='cc5g-xxxx', position='Query'),
}

model UpdateWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', example='1651FBB6-4FBF-49FF-A9F5-DF5D696C7EC6'),
}

model UpdateWirelessCloudConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWirelessCloudConnectorResponseBody(name='body'),
}

async function updateWirelessCloudConnector(request: UpdateWirelessCloudConnectorRequest): UpdateWirelessCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWirelessCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWirelessCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken', example='TF-******-1633255280-43c94bf7-2dd3-4c14-8', position='Query'),
  description?: string(name='Description', example='description', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', example='cc5gg-****', position='Query'),
}

model UpdateWirelessCloudConnectorGroupResponseBody = {
  requestId?: string(name='RequestId', example='8734B5B2-FC84-54C4-8038-D40228CF01FE'),
}

model UpdateWirelessCloudConnectorGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWirelessCloudConnectorGroupResponseBody(name='body'),
}

async function updateWirelessCloudConnectorGroup(request: UpdateWirelessCloudConnectorGroupRequest): UpdateWirelessCloudConnectorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWirelessCloudConnectorGroup', 'POST', '/', 'json', false, 'json', request);
}

