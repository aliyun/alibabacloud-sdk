/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CC5G';
  @version = '2022-03-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDNSAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationIp?: string(name='DestinationIp', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  sourceDNSIp: string(name='SourceDNSIp', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model AddDNSAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddDNSAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddDNSAuthorizationRuleResponseBody(name='body'),
}

async function addDNSAuthorizationRule(request: AddDNSAuthorizationRuleRequest): AddDNSAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDNSAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model AddGroupDnsAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationIp?: string(name='DestinationIp', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  sourceDNSIp: string(name='SourceDNSIp', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
}

model AddGroupDnsAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddGroupDnsAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddGroupDnsAuthorizationRuleResponseBody(name='body'),
}

async function addGroupDnsAuthorizationRule(request: AddGroupDnsAuthorizationRuleRequest): AddGroupDnsAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGroupDnsAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model AddWirelessCloudConnectorToGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
  wirelessCloudConnectorIds: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model AddWirelessCloudConnectorToGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddWirelessCloudConnectorToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddWirelessCloudConnectorToGroupResponseBody(name='body'),
}

async function addWirelessCloudConnectorToGroup(request: AddWirelessCloudConnectorToGroupRequest): AddWirelessCloudConnectorToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddWirelessCloudConnectorToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AttachVpcToNetLinkRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  netLinkId: string(name='NetLinkId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  vSwitches: [ string ](name='VSwitches', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model AttachVpcToNetLinkResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AttachVpcToNetLinkResponse = {
  headers: map[string]string(name='headers'),
  body: AttachVpcToNetLinkResponseBody(name='body'),
}

async function attachVpcToNetLink(request: AttachVpcToNetLinkRequest): AttachVpcToNetLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachVpcToNetLink', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destination: string(name='Destination', position='Query'),
  destinationPort?: string(name='DestinationPort', position='Query'),
  destinationType: string(name='DestinationType', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  policy: string(name='Policy', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
  sourceCidr?: string(name='SourceCidr', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model CreateAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuthorizationRuleResponseBody(name='body'),
}

async function createAuthorizationRule(request: CreateAuthorizationRuleRequest): CreateAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateBatchOperateCardsTaskRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  effectType: string(name='EffectType', position='Query'),
  iccids?: [ string ](name='Iccids', position='Query'),
  iccidsOssFilePath?: string(name='IccidsOssFilePath', position='Query'),
  name?: string(name='Name', position='Query'),
  operateType: string(name='OperateType', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  threshold: long(name='Threshold', position='Query'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model CreateBatchOperateCardsTaskResponseBody = {
  batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId'),
  operateResultOssFilePath?: string(name='OperateResultOssFilePath'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBatchOperateCardsTaskResponseBody(name='body'),
}

async function createBatchOperateCardsTask(request: CreateBatchOperateCardsTaskRequest): CreateBatchOperateCardsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBatchOperateCardsTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destination: string(name='Destination', position='Query'),
  destinationPort?: string(name='DestinationPort', position='Query'),
  destinationType: string(name='DestinationType', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  policy: string(name='Policy', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
  sourceCidr?: string(name='SourceCidr', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
}

model CreateGroupAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateGroupAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupAuthorizationRuleResponseBody(name='body'),
}

async function createGroupAuthorizationRule(request: CreateGroupAuthorizationRuleRequest): CreateGroupAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateIoTCloudConnectorBackhaulRouteRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  netLinkId?: string(name='NetLinkId', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model CreateIoTCloudConnectorBackhaulRouteResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateIoTCloudConnectorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function createIoTCloudConnectorBackhaulRoute(request: CreateIoTCloudConnectorBackhaulRouteRequest): CreateIoTCloudConnectorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIoTCloudConnectorBackhaulRoute', 'POST', '/', 'json', false, 'json', request);
}

model CreateWirelessCloudConnectorRequest {
  businessType?: string(name='BusinessType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ISP: string(name='ISP', position='Query'),
  name?: string(name='Name', position='Query'),
  netLinks: [ 
    {
      APN?: string(name='APN'),
      regionId: string(name='RegionId'),
      vSwitchs: [ string ](name='VSwitchs'),
      vpcId: string(name='VpcId'),
    }
  ](name='NetLinks', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  useCase?: string(name='UseCase', position='Query'),
}

model CreateWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model CreateWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWirelessCloudConnectorResponseBody(name='body'),
}

async function createWirelessCloudConnector(request: CreateWirelessCloudConnectorRequest): CreateWirelessCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWirelessCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model CreateWirelessCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateWirelessCloudConnectorGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId'),
}

model CreateWirelessCloudConnectorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWirelessCloudConnectorGroupResponseBody(name='body'),
}

async function createWirelessCloudConnectorGroup(request: CreateWirelessCloudConnectorGroupRequest): CreateWirelessCloudConnectorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWirelessCloudConnectorGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model DeleteAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAuthorizationRuleResponseBody(name='body'),
}

async function deleteAuthorizationRule(request: DeleteAuthorizationRuleRequest): DeleteAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBatchOperateCardsTaskRequest {
  batchOperateCardsTaskId: string(name='BatchOperateCardsTaskId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteBatchOperateCardsTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBatchOperateCardsTaskResponseBody(name='body'),
}

async function deleteBatchOperateCardsTask(request: DeleteBatchOperateCardsTaskRequest): DeleteBatchOperateCardsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBatchOperateCardsTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
}

model DeleteGroupAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteGroupAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupAuthorizationRuleResponseBody(name='body'),
}

async function deleteGroupAuthorizationRule(request: DeleteGroupAuthorizationRuleRequest): DeleteGroupAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIoTCloudConnectorBackhaulRouteRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  netLinkId?: string(name='NetLinkId', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model DeleteIoTCloudConnectorBackhaulRouteResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteIoTCloudConnectorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function deleteIoTCloudConnectorBackhaulRoute(request: DeleteIoTCloudConnectorBackhaulRouteRequest): DeleteIoTCloudConnectorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIoTCloudConnectorBackhaulRoute', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model DeleteWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWirelessCloudConnectorResponseBody(name='body'),
}

async function deleteWirelessCloudConnector(request: DeleteWirelessCloudConnectorRequest): DeleteWirelessCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWirelessCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWirelessCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
}

model DeleteWirelessCloudConnectorGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteWirelessCloudConnectorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWirelessCloudConnectorGroupResponseBody(name='body'),
}

async function deleteWirelessCloudConnectorGroup(request: DeleteWirelessCloudConnectorGroupRequest): DeleteWirelessCloudConnectorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWirelessCloudConnectorGroup', 'POST', '/', 'json', false, 'json', request);
}

model DetachVpcFromNetLinkRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  netLinkId: string(name='NetLinkId', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model DetachVpcFromNetLinkResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DetachVpcFromNetLinkResponse = {
  headers: map[string]string(name='headers'),
  body: DetachVpcFromNetLinkResponseBody(name='body'),
}

async function detachVpcFromNetLink(request: DetachVpcFromNetLinkRequest): DetachVpcFromNetLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachVpcFromNetLink', 'POST', '/', 'json', false, 'json', request);
}

model FailCardsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model FailCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model FailCardsResponse = {
  headers: map[string]string(name='headers'),
  body: FailCardsResponseBody(name='body'),
}

async function failCards(request: FailCardsRequest): FailCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailCards', 'POST', '/', 'json', false, 'json', request);
}

model GetCardRequest {
  iccid: string(name='Iccid', position='Query'),
}

model GetCardResponseBody = {
  APN?: string(name='APN'),
  activatedTime?: string(name='ActivatedTime'),
  alarmThreshold?: long(name='AlarmThreshold'),
  cloudConnectorId?: string(name='CloudConnectorId'),
  description?: string(name='Description'),
  ISP?: string(name='ISP'),
  iccid?: string(name='Iccid'),
  imei?: string(name='Imei'),
  imsi?: string(name='Imsi'),
  ipAddress?: string(name='IpAddress'),
  limitThreshold?: long(name='LimitThreshold'),
  lock?: string(name='Lock'),
  msisdn?: string(name='Msisdn'),
  name?: string(name='Name'),
  netType?: string(name='NetType'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  simStatus?: string(name='SimStatus'),
  spec?: string(name='Spec'),
  status?: string(name='Status'),
  stopThreshold?: long(name='StopThreshold'),
  usageDataMonth?: int32(name='UsageDataMonth'),
  usageDataTotal?: long(name='UsageDataTotal'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetCardResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardResponseBody(name='body'),
}

async function getCard(request: GetCardRequest): GetCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCard', 'GET', '/', 'json', false, 'json', request);
}

model GetCardLockReasonRequest {
  iccid: string(name='Iccid', position='Query'),
}

model GetCardLockReasonResponseBody = {
  lockReason?: string(name='LockReason'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetCardLockReasonResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardLockReasonResponseBody(name='body'),
}

async function getCardLockReason(request: GetCardLockReasonRequest): GetCardLockReasonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardLockReason', 'GET', '/', 'json', false, 'json', request);
}

model GetCreateCustomerInformationRequest {
  regionId?: string(name='RegionId', position='Query'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', position='Query'),
}

model GetCreateCustomerInformationResponseBody = {
  canBuyCard?: string(name='CanBuyCard'),
  requestId?: string(name='RequestId', description='Id of the request'),
  URL?: string(name='URL'),
}

model GetCreateCustomerInformationResponse = {
  headers: map[string]string(name='headers'),
  body: GetCreateCustomerInformationResponseBody(name='body'),
}

async function getCreateCustomerInformation(request: GetCreateCustomerInformationRequest): GetCreateCustomerInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCreateCustomerInformation', 'GET', '/', 'json', false, 'json', request);
}

model GetDiagnoseResultForSingleCardRequest {
  diagnoseTaskId: string(name='DiagnoseTaskId', position='Query'),
  regionNo?: string(name='RegionNo', position='Query'),
}

model GetDiagnoseResultForSingleCardResponseBody = {
  beginTime?: long(name='BeginTime'),
  cardIp?: string(name='CardIp'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  diagnoseItem?: [ 
    {
      part?: string(name='Part'),
      status?: string(name='Status'),
    }
  ](name='DiagnoseItem'),
  endTime?: long(name='EndTime'),
  errorResult?: [ 
    {
      errorDesc?: string(name='ErrorDesc'),
      errorLevel?: string(name='ErrorLevel'),
      errorPart?: string(name='ErrorPart'),
      errorSuggestion?: string(name='ErrorSuggestion'),
    }
  ](name='ErrorResult'),
  iccId?: string(name='IccId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetDiagnoseResultForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiagnoseResultForSingleCardResponseBody(name='body'),
}

async function getDiagnoseResultForSingleCard(request: GetDiagnoseResultForSingleCardRequest): GetDiagnoseResultForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDiagnoseResultForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model GetWirelessCloudConnectorRequest {
  regionId?: string(name='RegionId', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model GetWirelessCloudConnectorResponseBody = {
  businessType?: string(name='BusinessType'),
  cardCount?: string(name='CardCount'),
  createTime?: string(name='CreateTime'),
  dataPackageId?: string(name='DataPackageId'),
  dataPackageType?: string(name='DataPackageType'),
  description?: string(name='Description'),
  features?: [ string ](name='Features'),
  name?: string(name='Name'),
  netLinks?: [ 
    {
      APN?: string(name='APN'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      grantAliUid?: string(name='GrantAliUid'),
      ISP?: string(name='ISP'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      netLinkId?: string(name='NetLinkId', description='代表资源名称的资源属性字段'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      vSwitchs?: [ string ](name='VSwitchs'),
      vpcId?: string(name='VpcId'),
    }
  ](name='NetLinks', description='数组，返回示例目录。'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  serviceType?: string(name='ServiceType'),
  status?: string(name='Status'),
  useCase?: string(name='UseCase'),
  wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: GetWirelessCloudConnectorResponseBody(name='body'),
}

async function getWirelessCloudConnector(request: GetWirelessCloudConnectorRequest): GetWirelessCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWirelessCloudConnector', 'GET', '/', 'json', false, 'json', request);
}

model GrantNetLinkRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  grantAliUid: long(name='GrantAliUid', position='Query'),
  netLinkId: string(name='NetLinkId', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model GrantNetLinkResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GrantNetLinkResponse = {
  headers: map[string]string(name='headers'),
  body: GrantNetLinkResponseBody(name='body'),
}

async function grantNetLink(request: GrantNetLinkRequest): GrantNetLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantNetLink', 'POST', '/', 'json', false, 'json', request);
}

model ListAPNsRequest {
  APN?: string(name='APN', position='Query'),
  ISP?: string(name='ISP', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListAPNsResponseBody = {
  APNs?: [ 
    {
      APN?: string(name='APN', description='代表资源名称的资源属性字段'),
      description?: string(name='Description'),
      ISP?: string(name='ISP', description='代表资源一级ID的资源属性字段'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      zones?: [ string ](name='Zones'),
    }
  ](name='APNs', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListAPNsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAPNsResponseBody(name='body'),
}

async function listAPNs(request: ListAPNsRequest): ListAPNsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAPNs', 'GET', '/', 'json', false, 'json', request);
}

model ListAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds', position='Query'),
  destination?: string(name='Destination', position='Query'),
  destinationPort?: string(name='DestinationPort', position='Query'),
  destinationType?: string(name='DestinationType', position='Query'),
  dns?: boolean(name='Dns', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  policy?: string(name='Policy', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  type?: string(name='Type', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model ListAuthorizationRulesResponseBody = {
  authorizationRules?: [ 
    {
      authorizationRuleId?: string(name='AuthorizationRuleId', description='代表资源一级ID的资源属性字段'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      destination?: string(name='Destination'),
      destinationPort?: string(name='DestinationPort'),
      destinationType?: string(name='DestinationType'),
      dns?: boolean(name='Dns'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      policy?: string(name='Policy'),
      protocol?: string(name='Protocol'),
      sourceCidr?: string(name='SourceCidr'),
      status?: string(name='Status', description='代表资源名称的资源属性字段'),
      type?: string(name='Type'),
    }
  ](name='AuthorizationRules', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthorizationRulesResponseBody(name='body'),
}

async function listAuthorizationRules(request: ListAuthorizationRulesRequest): ListAuthorizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizationRules', 'GET', '/', 'json', false, 'json', request);
}

model ListBatchOperateCardsTasksRequest {
  batchOperateCardsTaskIds?: [ string ](name='BatchOperateCardsTaskIds', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
}

model ListBatchOperateCardsTasksResponseBody = {
  batchOperateCardsTasks?: [ 
    {
      batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId', description='代表资源一级ID的资源属性字段'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      effectType?: string(name='EffectType'),
      iccidsOssFilePath?: string(name='IccidsOssFilePath'),
      name?: string(name='Name'),
      operateResultOssFilePath?: string(name='OperateResultOssFilePath'),
      operateType?: string(name='OperateType', description='代表创建时间的资源属性字段'),
      status?: string(name='Status'),
      threshold?: string(name='Threshold'),
      wirelessCloudConnectors?: [ 
        {
          status?: string(name='Status'),
          wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
        }
      ](name='WirelessCloudConnectors'),
    }
  ](name='BatchOperateCardsTasks', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListBatchOperateCardsTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListBatchOperateCardsTasksResponseBody(name='body'),
}

async function listBatchOperateCardsTasks(request: ListBatchOperateCardsTasksRequest): ListBatchOperateCardsTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBatchOperateCardsTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListCardsRequest {
  apn?: string(name='Apn', position='Query'),
  iccid?: string(name='Iccid', position='Query'),
  iccids?: [ string ](name='Iccids', position='Query'),
  ipAddress?: string(name='IpAddress', position='Query'),
  lock?: boolean(name='Lock', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  msisdn?: string(name='Msisdn', position='Query'),
  netLinkId?: string(name='NetLinkId', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  online?: boolean(name='Online', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model ListCardsResponseBody = {
  cards?: [ 
    {
      APN?: string(name='APN', description='代表创建时间的资源属性字段'),
      activatedTime?: string(name='ActivatedTime'),
      businessStatus?: string(name='BusinessStatus'),
      description?: string(name='Description'),
      ISP?: string(name='ISP'),
      iccid?: string(name='Iccid', description='代表资源一级ID的资源属性字段'),
      imei?: string(name='Imei'),
      imsi?: string(name='Imsi'),
      ipAddress?: string(name='IpAddress'),
      lock?: boolean(name='Lock'),
      msisdn?: string(name='Msisdn'),
      name?: string(name='Name'),
      netType?: string(name='NetType', description='代表资源名称的资源属性字段'),
      orderId?: string(name='OrderId'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
      usageDataMonth?: long(name='UsageDataMonth'),
      usageDataTotal?: string(name='UsageDataTotal'),
    }
  ](name='Cards', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListCardsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCardsResponseBody(name='body'),
}

async function listCards(request: ListCardsRequest): ListCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCards', 'GET', '/', 'json', false, 'json', request);
}

model ListDataPackagesRequest {
  dataPackageIds?: [ string ](name='DataPackageIds', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model ListDataPackagesResponseBody = {
  dataPackages?: [ 
    {
      cardCount?: string(name='CardCount'),
      createTime?: string(name='CreateTime'),
      dataPackageId?: string(name='DataPackageId'),
      expiredTime?: string(name='ExpiredTime'),
      ISP?: string(name='ISP'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      size?: string(name='Size'),
      status?: string(name='Status', description='代表资源名称的资源属性字段'),
    }
  ](name='DataPackages', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListDataPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataPackagesResponseBody(name='body'),
}

async function listDataPackages(request: ListDataPackagesRequest): ListDataPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataPackages', 'GET', '/', 'json', false, 'json', request);
}

model ListDiagnoseInfoForSingleCardRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionNo?: string(name='RegionNo', position='Query'),
  source?: string(name='Source', position='Query'),
  sourceType?: string(name='SourceType', position='Query'),
  status?: string(name='Status', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model ListDiagnoseInfoForSingleCardResponseBody = {
  diagnoseInfo?: [ 
    {
      beginTime?: long(name='BeginTime'),
      cardIp?: string(name='CardIp'),
      destination?: string(name='Destination'),
      destinationType?: string(name='DestinationType'),
      diagnoseTaskId?: string(name='DiagnoseTaskId'),
      diagnoseTime?: long(name='DiagnoseTime'),
      endTime?: long(name='EndTime'),
      iccId?: string(name='IccId'),
      source?: string(name='Source'),
      sourceType?: string(name='SourceType'),
      status?: string(name='Status'),
      wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
    }
  ](name='DiagnoseInfo'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDiagnoseInfoForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: ListDiagnoseInfoForSingleCardResponseBody(name='body'),
}

async function listDiagnoseInfoForSingleCard(request: ListDiagnoseInfoForSingleCardRequest): ListDiagnoseInfoForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDiagnoseInfoForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds', position='Query'),
  destination?: string(name='Destination', position='Query'),
  destinationPort?: string(name='DestinationPort', position='Query'),
  destinationType?: string(name='DestinationType', position='Query'),
  dns?: boolean(name='Dns', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  policy?: string(name='Policy', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  type?: string(name='Type', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
}

model ListGroupAuthorizationRulesResponseBody = {
  groupAuthorizationRules?: [ 
    {
      authorizationRuleId?: string(name='AuthorizationRuleId', description='代表资源一级ID的资源属性字段'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      destination?: string(name='Destination'),
      destinationPort?: string(name='DestinationPort'),
      destinationType?: string(name='DestinationType'),
      dns?: boolean(name='Dns'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      policy?: string(name='Policy'),
      protocol?: string(name='Protocol'),
      sourceCidr?: string(name='SourceCidr'),
      status?: string(name='Status', description='代表资源名称的资源属性字段'),
      type?: string(name='Type'),
    }
  ](name='GroupAuthorizationRules', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListGroupAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupAuthorizationRulesResponseBody(name='body'),
}

async function listGroupAuthorizationRules(request: ListGroupAuthorizationRulesRequest): ListGroupAuthorizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupAuthorizationRules', 'GET', '/', 'json', false, 'json', request);
}

model ListIoTCloudConnectorBackhaulRouteRequest {
  netLinkId: string(name='NetLinkId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model ListIoTCloudConnectorBackhaulRouteResponseBody = {
  netLinkId?: string(name='NetLinkId', description='Id of the request'),
  requestId?: string(name='RequestId', description='Id of the request'),
  routes?: [ 
    {
      description?: string(name='Description', description='代表创建时间的资源属性字段'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='代表资源名称的资源属性字段'),
      nextHopId?: string(name='NextHopId', description='代表创建时间的资源属性字段'),
      nextHopType?: string(name='NextHopType', description='代表创建时间的资源属性字段'),
      status?: string(name='Status', description='代表创建时间的资源属性字段'),
    }
  ](name='Routes', description='数组，返回示例目录。'),
}

model ListIoTCloudConnectorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function listIoTCloudConnectorBackhaulRoute(request: ListIoTCloudConnectorBackhaulRouteRequest): ListIoTCloudConnectorBackhaulRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIoTCloudConnectorBackhaulRoute', 'GET', '/', 'json', false, 'json', request);
}

model ListOrdersRequest {
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orderAction?: string(name='OrderAction', position='Query'),
  orderIds?: [ string ](name='OrderIds', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model ListOrdersResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orders?: [ 
    {
      action?: string(name='Action', description='代表创建时间的资源属性字段'),
      cardCount?: string(name='CardCount'),
      cardNetType?: string(name='CardNetType'),
      cardType?: string(name='CardType'),
      contactName?: string(name='ContactName'),
      contactPhone?: string(name='ContactPhone'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      logisticsId?: string(name='LogisticsId'),
      logisticsStatus?: string(name='LogisticsStatus'),
      logisticsType?: string(name='LogisticsType'),
      logisticsUpdateTime?: string(name='LogisticsUpdateTime'),
      orderId?: string(name='OrderId'),
      payTime?: string(name='PayTime'),
      postAddress?: string(name='PostAddress'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status', description='代表资源名称的资源属性字段'),
    }
  ](name='Orders', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrdersResponseBody(name='body'),
}

async function listOrders(request: ListOrdersRequest): ListOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrders', 'GET', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='代表资源名称的资源属性字段'),
      regionEndpoint?: string(name='RegionEndpoint', description='代表创建时间的资源属性字段'),
      regionId?: string(name='RegionId', description='代表资源一级ID的资源属性字段'),
    }
  ](name='Regions', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListWirelessCloudConnectorGroupsRequest {
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  wirelessCloudConnectorGroupIds?: [ string ](name='WirelessCloudConnectorGroupIds', position='Query'),
  wirelessCloudConnectorGroupNames?: [ string ](name='WirelessCloudConnectorGroupNames', position='Query'),
  wirelessCloudConnectorGroupStatus?: [ string ](name='WirelessCloudConnectorGroupStatus', position='Query'),
}

model ListWirelessCloudConnectorGroupsResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
  wirelessCloudConnectorGroups?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status', description='代表资源名称的资源属性字段'),
      wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId', description='代表资源一级ID的资源属性字段'),
      wirelessCloudConnectors?: [ 
        {
          businessType?: string(name='BusinessType'),
          cardCount?: string(name='CardCount'),
          createTime?: string(name='CreateTime'),
          dataPackageId?: string(name='DataPackageId'),
          dataPackageType?: string(name='DataPackageType'),
          description?: string(name='Description'),
          name?: string(name='Name'),
          regionId?: string(name='RegionId'),
          serviceType?: string(name='ServiceType'),
          status?: string(name='Status'),
          useCase?: string(name='UseCase'),
          wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
        }
      ](name='WirelessCloudConnectors'),
    }
  ](name='WirelessCloudConnectorGroups', description='数组，返回示例目录。'),
}

model ListWirelessCloudConnectorGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListWirelessCloudConnectorGroupsResponseBody(name='body'),
}

async function listWirelessCloudConnectorGroups(request: ListWirelessCloudConnectorGroupsRequest): ListWirelessCloudConnectorGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWirelessCloudConnectorGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListWirelessCloudConnectorsRequest {
  businessType?: string(name='BusinessType', position='Query'),
  isInGroup?: string(name='IsInGroup', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  names?: [ string ](name='Names', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId', position='Query'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model ListWirelessCloudConnectorsResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
  wirelessCloudConnectors?: [ 
    {
      businessType?: string(name='BusinessType'),
      cardCount?: string(name='CardCount'),
      createTime?: string(name='CreateTime'),
      dataPackageId?: string(name='DataPackageId'),
      dataPackageType?: string(name='DataPackageType'),
      description?: string(name='Description'),
      name?: string(name='Name', description='代表创建时间的资源属性字段'),
      regionId?: string(name='RegionId'),
      serviceType?: string(name='ServiceType'),
      status?: string(name='Status', description='代表资源名称的资源属性字段'),
      useCase?: string(name='UseCase'),
      wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId'),
      wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', description='代表资源一级ID的资源属性字段'),
    }
  ](name='WirelessCloudConnectors', description='数组，返回示例目录。'),
}

model ListWirelessCloudConnectorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListWirelessCloudConnectorsResponseBody(name='body'),
}

async function listWirelessCloudConnectors(request: ListWirelessCloudConnectorsRequest): ListWirelessCloudConnectorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWirelessCloudConnectors', 'GET', '/', 'json', false, 'json', request);
}

model ListZonesRequest {
  regionId: string(name='RegionId', position='Query'),
}

model ListZonesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='代表创建时间的资源属性字段'),
      zoneId?: string(name='ZoneId', description='代表资源名称的资源属性字段'),
    }
  ](name='Zones', description='数组，返回示例目录。'),
}

model ListZonesResponse = {
  headers: map[string]string(name='headers'),
  body: ListZonesResponseBody(name='body'),
}

async function listZones(request: ListZonesRequest): ListZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListZones', 'GET', '/', 'json', false, 'json', request);
}

model LockCardsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model LockCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model LockCardsResponse = {
  headers: map[string]string(name='headers'),
  body: LockCardsResponseBody(name='body'),
}

async function lockCards(request: LockCardsRequest): LockCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockCards', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWirelessCloudConnectorFeatureRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  featureName?: string(name='FeatureName', position='Query'),
  featureValue?: string(name='FeatureValue', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model ModifyWirelessCloudConnectorFeatureResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyWirelessCloudConnectorFeatureResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWirelessCloudConnectorFeatureResponseBody(name='body'),
}

async function modifyWirelessCloudConnectorFeature(request: ModifyWirelessCloudConnectorFeatureRequest): ModifyWirelessCloudConnectorFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWirelessCloudConnectorFeature', 'POST', '/', 'json', false, 'json', request);
}

model OpenCc5gServiceRequest {
  regionId: string(name='RegionId', position='Query'),
}

model OpenCc5gServiceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model OpenCc5gServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenCc5gServiceResponseBody(name='body'),
}

async function openCc5gService(request: OpenCc5gServiceRequest): OpenCc5gServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenCc5gService', 'POST', '/', 'json', false, 'json', request);
}

model RemoveWirelessCloudConnectorFromGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
  wirelessCloudConnectorIds: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model RemoveWirelessCloudConnectorFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveWirelessCloudConnectorFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveWirelessCloudConnectorFromGroupResponseBody(name='body'),
}

async function removeWirelessCloudConnectorFromGroup(request: RemoveWirelessCloudConnectorFromGroupRequest): RemoveWirelessCloudConnectorFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveWirelessCloudConnectorFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model ResumeCardsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ResumeCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ResumeCardsResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeCardsResponseBody(name='body'),
}

async function resumeCards(request: ResumeCardsRequest): ResumeCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeCards', 'POST', '/', 'json', false, 'json', request);
}

model RevokeNetLinkRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  netLinkId: string(name='NetLinkId', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model RevokeNetLinkResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RevokeNetLinkResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeNetLinkResponseBody(name='body'),
}

async function revokeNetLink(request: RevokeNetLinkRequest): RevokeNetLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeNetLink', 'POST', '/', 'json', false, 'json', request);
}

model StopCardsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model StopCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopCardsResponse = {
  headers: map[string]string(name='headers'),
  body: StopCardsResponseBody(name='body'),
}

async function stopCards(request: StopCardsRequest): StopCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCards', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDiagnoseTaskForSingleCardRequest {
  beginTime: long(name='BeginTime', position='Query'),
  destination?: string(name='Destination', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  regionNo: string(name='RegionNo', position='Query'),
  resourceUid?: long(name='ResourceUid', position='Query'),
  source: string(name='Source', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model SubmitDiagnoseTaskForSingleCardResponseBody = {
  diagnoseTaskId?: string(name='DiagnoseTaskId'),
  requestId?: string(name='RequestId'),
}

model SubmitDiagnoseTaskForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDiagnoseTaskForSingleCardResponseBody(name='body'),
}

async function submitDiagnoseTaskForSingleCard(request: SubmitDiagnoseTaskForSingleCardRequest): SubmitDiagnoseTaskForSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDiagnoseTaskForSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model SwitchWirelessCloudConnectorToBusinessRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model SwitchWirelessCloudConnectorToBusinessResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SwitchWirelessCloudConnectorToBusinessResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchWirelessCloudConnectorToBusinessResponseBody(name='body'),
}

async function switchWirelessCloudConnectorToBusiness(request: SwitchWirelessCloudConnectorToBusinessRequest): SwitchWirelessCloudConnectorToBusinessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchWirelessCloudConnectorToBusiness', 'POST', '/', 'json', false, 'json', request);
}

model UnlockCardsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  iccids: [ string ](name='Iccids', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model UnlockCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UnlockCardsResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockCardsResponseBody(name='body'),
}

async function unlockCards(request: UnlockCardsRequest): UnlockCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockCards', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destination?: string(name='Destination', position='Query'),
  destinationPort?: string(name='DestinationPort', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  policy?: string(name='Policy', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
  sourceCidr?: string(name='SourceCidr', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model UpdateAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAuthorizationRuleResponseBody(name='body'),
}

async function updateAuthorizationRule(request: UpdateAuthorizationRuleRequest): UpdateAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBatchOperateCardsTaskRequest {
  batchOperateCardsTaskId: string(name='BatchOperateCardsTaskId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  effectType?: string(name='EffectType', position='Query'),
  iccids?: [ string ](name='Iccids', position='Query'),
  iccidsOssFilePath?: string(name='IccidsOssFilePath', position='Query'),
  name?: string(name='Name', position='Query'),
  operateType?: string(name='OperateType', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  threshold?: long(name='Threshold', position='Query'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds', position='Query'),
}

model UpdateBatchOperateCardsTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBatchOperateCardsTaskResponseBody(name='body'),
}

async function updateBatchOperateCardsTask(request: UpdateBatchOperateCardsTaskRequest): UpdateBatchOperateCardsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBatchOperateCardsTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCardRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  iccid?: string(name='Iccid', position='Query'),
  name?: string(name='Name', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model UpdateCardResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateCardResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCardResponseBody(name='body'),
}

async function updateCard(request: UpdateCardRequest): UpdateCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCard', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDNSAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationIp?: string(name='DestinationIp', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  sourceDNSIp?: string(name='SourceDNSIp', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model UpdateDNSAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDNSAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDNSAuthorizationRuleResponseBody(name='body'),
}

async function updateDNSAuthorizationRule(request: UpdateDNSAuthorizationRuleRequest): UpdateDNSAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDNSAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destination?: string(name='Destination', position='Query'),
  destinationPort?: string(name='DestinationPort', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  policy?: string(name='Policy', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
  sourceCidr?: string(name='SourceCidr', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
}

model UpdateGroupAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateGroupAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupAuthorizationRuleResponseBody(name='body'),
}

async function updateGroupAuthorizationRule(request: UpdateGroupAuthorizationRuleRequest): UpdateGroupAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupDnsAuthorizationRuleRequest {
  authorizationRuleId: string(name='AuthorizationRuleId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationIp?: string(name='DestinationIp', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  sourceDNSIp?: string(name='SourceDNSIp', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
}

model UpdateGroupDnsAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateGroupDnsAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupDnsAuthorizationRuleResponseBody(name='body'),
}

async function updateGroupDnsAuthorizationRule(request: UpdateGroupDnsAuthorizationRuleRequest): UpdateGroupDnsAuthorizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupDnsAuthorizationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  wirelessCloudConnectorId: string(name='WirelessCloudConnectorId', position='Query'),
}

model UpdateWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWirelessCloudConnectorResponseBody(name='body'),
}

async function updateWirelessCloudConnector(request: UpdateWirelessCloudConnectorRequest): UpdateWirelessCloudConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWirelessCloudConnector', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWirelessCloudConnectorGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  name?: string(name='Name', position='Query'),
  wirelessCloudConnectorGroupId: string(name='WirelessCloudConnectorGroupId', position='Query'),
}

model UpdateWirelessCloudConnectorGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateWirelessCloudConnectorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWirelessCloudConnectorGroupResponseBody(name='body'),
}

async function updateWirelessCloudConnectorGroup(request: UpdateWirelessCloudConnectorGroupRequest): UpdateWirelessCloudConnectorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWirelessCloudConnectorGroup', 'POST', '/', 'json', false, 'json', request);
}

