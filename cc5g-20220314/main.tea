/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cc5g', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDNSAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destinationIp?: string(name='DestinationIp'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  sourceDNSIp?: string(name='SourceDNSIp'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model AddDNSAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId'),
}

model AddDNSAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDNSAuthorizationRuleResponseBody(name='body'),
}

async function addDNSAuthorizationRuleWithOptions(request: AddDNSAuthorizationRuleRequest, runtime: Util.RuntimeOptions): AddDNSAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationIp)) {
    query['DestinationIp'] = request.destinationIp;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.sourceDNSIp)) {
    query['SourceDNSIp'] = request.sourceDNSIp;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDNSAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDNSAuthorizationRule(request: AddDNSAuthorizationRuleRequest): AddDNSAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDNSAuthorizationRuleWithOptions(request, runtime);
}

model AttachVpcToNetLinkRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  netLinkId?: string(name='NetLinkId'),
  regionId?: string(name='RegionId'),
  vSwitches?: [ string ](name='VSwitches'),
  vpcId?: string(name='VpcId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model AttachVpcToNetLinkResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachVpcToNetLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachVpcToNetLinkResponseBody(name='body'),
}

async function attachVpcToNetLinkWithOptions(request: AttachVpcToNetLinkRequest, runtime: Util.RuntimeOptions): AttachVpcToNetLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.netLinkId)) {
    query['NetLinkId'] = request.netLinkId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitches)) {
    query['VSwitches'] = request.vSwitches;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachVpcToNetLink',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachVpcToNetLink(request: AttachVpcToNetLinkRequest): AttachVpcToNetLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachVpcToNetLinkWithOptions(request, runtime);
}

model CreateAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destination?: string(name='Destination'),
  destinationPort?: string(name='DestinationPort'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  policy?: string(name='Policy'),
  protocol?: string(name='Protocol'),
  sourceCidr?: string(name='SourceCidr'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model CreateAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId'),
}

model CreateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAuthorizationRuleResponseBody(name='body'),
}

async function createAuthorizationRuleWithOptions(request: CreateAuthorizationRuleRequest, runtime: Util.RuntimeOptions): CreateAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationPort)) {
    query['DestinationPort'] = request.destinationPort;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.sourceCidr)) {
    query['SourceCidr'] = request.sourceCidr;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAuthorizationRule(request: CreateAuthorizationRuleRequest): CreateAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthorizationRuleWithOptions(request, runtime);
}

model CreateBatchOperateCardsTaskRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  effectType?: string(name='EffectType'),
  iccids?: [ string ](name='Iccids'),
  iccidsOssFilePath?: string(name='IccidsOssFilePath'),
  name?: string(name='Name'),
  operateType?: string(name='OperateType'),
  regionId?: string(name='RegionId'),
  threshold?: long(name='Threshold'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds'),
}

model CreateBatchOperateCardsTaskResponseBody = {
  batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId'),
  operateResultOssFilePath?: string(name='OperateResultOssFilePath'),
  requestId?: string(name='RequestId'),
}

model CreateBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBatchOperateCardsTaskResponseBody(name='body'),
}

async function createBatchOperateCardsTaskWithOptions(request: CreateBatchOperateCardsTaskRequest, runtime: Util.RuntimeOptions): CreateBatchOperateCardsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.effectType)) {
    query['EffectType'] = request.effectType;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.iccidsOssFilePath)) {
    query['IccidsOssFilePath'] = request.iccidsOssFilePath;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.threshold)) {
    query['Threshold'] = request.threshold;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorIds)) {
    query['WirelessCloudConnectorIds'] = request.wirelessCloudConnectorIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBatchOperateCardsTask',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBatchOperateCardsTask(request: CreateBatchOperateCardsTaskRequest): CreateBatchOperateCardsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBatchOperateCardsTaskWithOptions(request, runtime);
}

model CreateIoTCloudConnectorBackhaulRouteRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  netLinkId?: string(name='NetLinkId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model CreateIoTCloudConnectorBackhaulRouteResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateIoTCloudConnectorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function createIoTCloudConnectorBackhaulRouteWithOptions(request: CreateIoTCloudConnectorBackhaulRouteRequest, runtime: Util.RuntimeOptions): CreateIoTCloudConnectorBackhaulRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.netLinkId)) {
    query['NetLinkId'] = request.netLinkId;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIoTCloudConnectorBackhaulRoute',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIoTCloudConnectorBackhaulRoute(request: CreateIoTCloudConnectorBackhaulRouteRequest): CreateIoTCloudConnectorBackhaulRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIoTCloudConnectorBackhaulRouteWithOptions(request, runtime);
}

model CreateWirelessCloudConnectorRequest {
  businessType?: string(name='BusinessType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  ISP?: string(name='ISP'),
  name?: string(name='Name'),
  netLinks?: [ 
    {
      APN?: string(name='APN'),
      regionId?: string(name='RegionId'),
      vSwitchs?: [ string ](name='VSwitchs'),
      vpcId?: string(name='VpcId'),
    }
  ](name='NetLinks'),
  regionId?: string(name='RegionId'),
  useCase?: string(name='UseCase'),
}

model CreateWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model CreateWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWirelessCloudConnectorResponseBody(name='body'),
}

async function createWirelessCloudConnectorWithOptions(request: CreateWirelessCloudConnectorRequest, runtime: Util.RuntimeOptions): CreateWirelessCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netLinks)) {
    query['NetLinks'] = request.netLinks;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.useCase)) {
    query['UseCase'] = request.useCase;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWirelessCloudConnector',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWirelessCloudConnector(request: CreateWirelessCloudConnectorRequest): CreateWirelessCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWirelessCloudConnectorWithOptions(request, runtime);
}

model DeleteAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model DeleteAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAuthorizationRuleResponseBody(name='body'),
}

async function deleteAuthorizationRuleWithOptions(request: DeleteAuthorizationRuleRequest, runtime: Util.RuntimeOptions): DeleteAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAuthorizationRule(request: DeleteAuthorizationRuleRequest): DeleteAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAuthorizationRuleWithOptions(request, runtime);
}

model DeleteBatchOperateCardsTaskRequest {
  batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
}

model DeleteBatchOperateCardsTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBatchOperateCardsTaskResponseBody(name='body'),
}

async function deleteBatchOperateCardsTaskWithOptions(request: DeleteBatchOperateCardsTaskRequest, runtime: Util.RuntimeOptions): DeleteBatchOperateCardsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.batchOperateCardsTaskId)) {
    query['BatchOperateCardsTaskId'] = request.batchOperateCardsTaskId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBatchOperateCardsTask',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBatchOperateCardsTask(request: DeleteBatchOperateCardsTaskRequest): DeleteBatchOperateCardsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBatchOperateCardsTaskWithOptions(request, runtime);
}

model DeleteIoTCloudConnectorBackhaulRouteRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  netLinkId?: string(name='NetLinkId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model DeleteIoTCloudConnectorBackhaulRouteResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIoTCloudConnectorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function deleteIoTCloudConnectorBackhaulRouteWithOptions(request: DeleteIoTCloudConnectorBackhaulRouteRequest, runtime: Util.RuntimeOptions): DeleteIoTCloudConnectorBackhaulRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.netLinkId)) {
    query['NetLinkId'] = request.netLinkId;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIoTCloudConnectorBackhaulRoute',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIoTCloudConnectorBackhaulRoute(request: DeleteIoTCloudConnectorBackhaulRouteRequest): DeleteIoTCloudConnectorBackhaulRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIoTCloudConnectorBackhaulRouteWithOptions(request, runtime);
}

model DeleteWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model DeleteWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWirelessCloudConnectorResponseBody(name='body'),
}

async function deleteWirelessCloudConnectorWithOptions(request: DeleteWirelessCloudConnectorRequest, runtime: Util.RuntimeOptions): DeleteWirelessCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWirelessCloudConnector',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWirelessCloudConnector(request: DeleteWirelessCloudConnectorRequest): DeleteWirelessCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWirelessCloudConnectorWithOptions(request, runtime);
}

model DetachVpcFromNetLinkRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  netLinkId?: string(name='NetLinkId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model DetachVpcFromNetLinkResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachVpcFromNetLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachVpcFromNetLinkResponseBody(name='body'),
}

async function detachVpcFromNetLinkWithOptions(request: DetachVpcFromNetLinkRequest, runtime: Util.RuntimeOptions): DetachVpcFromNetLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.netLinkId)) {
    query['NetLinkId'] = request.netLinkId;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachVpcFromNetLink',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachVpcFromNetLink(request: DetachVpcFromNetLinkRequest): DetachVpcFromNetLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachVpcFromNetLinkWithOptions(request, runtime);
}

model FailCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model FailCardsResponseBody = {
  requestId?: string(name='RequestId'),
}

model FailCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FailCardsResponseBody(name='body'),
}

async function failCardsWithOptions(request: FailCardsRequest, runtime: Util.RuntimeOptions): FailCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FailCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function failCards(request: FailCardsRequest): FailCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return failCardsWithOptions(request, runtime);
}

model GetCardRequest {
  iccid?: string(name='Iccid'),
}

model GetCardResponseBody = {
  APN?: string(name='APN'),
  activatedTime?: string(name='ActivatedTime'),
  alarmThreshold?: long(name='AlarmThreshold'),
  cloudConnectorId?: string(name='CloudConnectorId'),
  description?: string(name='Description'),
  ISP?: string(name='ISP'),
  iccid?: string(name='Iccid'),
  imei?: string(name='Imei'),
  imsi?: string(name='Imsi'),
  ipAddress?: string(name='IpAddress'),
  limitThreshold?: long(name='LimitThreshold'),
  lock?: string(name='Lock'),
  msisdn?: string(name='Msisdn'),
  name?: string(name='Name'),
  netType?: string(name='NetType'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  simStatus?: string(name='SimStatus'),
  spec?: string(name='Spec'),
  status?: string(name='Status'),
  stopThreshold?: long(name='StopThreshold'),
  usageDataMonth?: int32(name='UsageDataMonth'),
  usageDataTotal?: long(name='UsageDataTotal'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCardResponseBody(name='body'),
}

async function getCardWithOptions(request: GetCardRequest, runtime: Util.RuntimeOptions): GetCardResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCard',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCard(request: GetCardRequest): GetCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCardWithOptions(request, runtime);
}

model GetCardLockReasonRequest {
  iccid?: string(name='Iccid'),
}

model GetCardLockReasonResponseBody = {
  lockReason?: string(name='LockReason'),
  requestId?: string(name='RequestId'),
}

model GetCardLockReasonResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCardLockReasonResponseBody(name='body'),
}

async function getCardLockReasonWithOptions(request: GetCardLockReasonRequest, runtime: Util.RuntimeOptions): GetCardLockReasonResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCardLockReason',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCardLockReason(request: GetCardLockReasonRequest): GetCardLockReasonResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCardLockReasonWithOptions(request, runtime);
}

model GetCreateCustomerInformationRequest {
  regionId?: string(name='RegionId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetCreateCustomerInformationResponseBody = {
  canBuyCard?: string(name='CanBuyCard'),
  requestId?: string(name='RequestId'),
  URL?: string(name='URL'),
}

model GetCreateCustomerInformationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCreateCustomerInformationResponseBody(name='body'),
}

async function getCreateCustomerInformationWithOptions(request: GetCreateCustomerInformationRequest, runtime: Util.RuntimeOptions): GetCreateCustomerInformationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCreateCustomerInformation',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCreateCustomerInformation(request: GetCreateCustomerInformationRequest): GetCreateCustomerInformationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCreateCustomerInformationWithOptions(request, runtime);
}

model GetDiagnoseResultForSingleCardRequest {
  diagnoseTaskId?: string(name='DiagnoseTaskId'),
  regionNo?: string(name='RegionNo'),
}

model GetDiagnoseResultForSingleCardResponseBody = {
  beginTime?: long(name='BeginTime'),
  cardIp?: string(name='CardIp'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  diagnoseItem?: [ 
    {
      part?: string(name='Part'),
      status?: string(name='Status'),
    }
  ](name='DiagnoseItem'),
  endTime?: long(name='EndTime'),
  errorResult?: [ 
    {
      errorDesc?: string(name='ErrorDesc'),
      errorLevel?: string(name='ErrorLevel'),
      errorPart?: string(name='ErrorPart'),
      errorSuggestion?: string(name='ErrorSuggestion'),
    }
  ](name='ErrorResult'),
  iccId?: string(name='IccId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetDiagnoseResultForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDiagnoseResultForSingleCardResponseBody(name='body'),
}

async function getDiagnoseResultForSingleCardWithOptions(request: GetDiagnoseResultForSingleCardRequest, runtime: Util.RuntimeOptions): GetDiagnoseResultForSingleCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diagnoseTaskId)) {
    query['DiagnoseTaskId'] = request.diagnoseTaskId;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiagnoseResultForSingleCard',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiagnoseResultForSingleCard(request: GetDiagnoseResultForSingleCardRequest): GetDiagnoseResultForSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiagnoseResultForSingleCardWithOptions(request, runtime);
}

model GetWirelessCloudConnectorRequest {
  regionId?: string(name='RegionId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetWirelessCloudConnectorResponseBody = {
  businessType?: string(name='BusinessType'),
  cardCount?: string(name='CardCount'),
  createTime?: string(name='CreateTime'),
  dataPackageId?: string(name='DataPackageId'),
  dataPackageType?: string(name='DataPackageType'),
  description?: string(name='Description'),
  features?: [ string ](name='Features'),
  name?: string(name='Name'),
  netLinks?: [ 
    {
      APN?: string(name='APN'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      grantAliUid?: string(name='GrantAliUid'),
      ISP?: string(name='ISP'),
      name?: string(name='Name'),
      netLinkId?: string(name='NetLinkId'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      vSwitchs?: [ string ](name='VSwitchs'),
      vpcId?: string(name='VpcId'),
    }
  ](name='NetLinks'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  serviceType?: string(name='ServiceType'),
  status?: string(name='Status'),
  useCase?: string(name='UseCase'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWirelessCloudConnectorResponseBody(name='body'),
}

async function getWirelessCloudConnectorWithOptions(request: GetWirelessCloudConnectorRequest, runtime: Util.RuntimeOptions): GetWirelessCloudConnectorResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWirelessCloudConnector',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWirelessCloudConnector(request: GetWirelessCloudConnectorRequest): GetWirelessCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWirelessCloudConnectorWithOptions(request, runtime);
}

model GrantNetLinkRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  grantAliUid?: long(name='GrantAliUid'),
  netLinkId?: string(name='NetLinkId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GrantNetLinkResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantNetLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantNetLinkResponseBody(name='body'),
}

async function grantNetLinkWithOptions(request: GrantNetLinkRequest, runtime: Util.RuntimeOptions): GrantNetLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.grantAliUid)) {
    query['GrantAliUid'] = request.grantAliUid;
  }
  if (!Util.isUnset(request.netLinkId)) {
    query['NetLinkId'] = request.netLinkId;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantNetLink',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantNetLink(request: GrantNetLinkRequest): GrantNetLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantNetLinkWithOptions(request, runtime);
}

model ListAPNsRequest {
  APN?: string(name='APN'),
  ISP?: string(name='ISP'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListAPNsResponseBody = {
  APNs?: [ 
    {
      APN?: string(name='APN'),
      description?: string(name='Description'),
      ISP?: string(name='ISP'),
      name?: string(name='Name'),
      zones?: [ string ](name='Zones'),
    }
  ](name='APNs'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListAPNsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAPNsResponseBody(name='body'),
}

async function listAPNsWithOptions(request: ListAPNsRequest, runtime: Util.RuntimeOptions): ListAPNsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAPNs',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAPNs(request: ListAPNsRequest): ListAPNsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAPNsWithOptions(request, runtime);
}

model ListAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds'),
  destination?: string(name='Destination'),
  destinationPort?: string(name='DestinationPort'),
  destinationType?: string(name='DestinationType'),
  dns?: boolean(name='Dns'),
  maxResults?: long(name='MaxResults'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken'),
  policy?: string(name='Policy'),
  protocol?: string(name='Protocol'),
  statuses?: [ string ](name='Statuses'),
  type?: string(name='Type'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListAuthorizationRulesResponseBody = {
  authorizationRules?: [ 
    {
      authorizationRuleId?: string(name='AuthorizationRuleId'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      destination?: string(name='Destination'),
      destinationPort?: string(name='DestinationPort'),
      destinationType?: string(name='DestinationType'),
      dns?: boolean(name='Dns'),
      name?: string(name='Name'),
      policy?: string(name='Policy'),
      protocol?: string(name='Protocol'),
      sourceCidr?: string(name='SourceCidr'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='AuthorizationRules'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAuthorizationRulesResponseBody(name='body'),
}

async function listAuthorizationRulesWithOptions(request: ListAuthorizationRulesRequest, runtime: Util.RuntimeOptions): ListAuthorizationRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAuthorizationRules',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAuthorizationRules(request: ListAuthorizationRulesRequest): ListAuthorizationRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthorizationRulesWithOptions(request, runtime);
}

model ListBatchOperateCardsTasksRequest {
  batchOperateCardsTaskIds?: [ string ](name='BatchOperateCardsTaskIds'),
  maxResults?: long(name='MaxResults'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  statuses?: [ string ](name='Statuses'),
}

model ListBatchOperateCardsTasksResponseBody = {
  batchOperateCardsTasks?: [ 
    {
      batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      effectType?: string(name='EffectType'),
      iccidsOssFilePath?: string(name='IccidsOssFilePath'),
      name?: string(name='Name'),
      operateResultOssFilePath?: string(name='OperateResultOssFilePath'),
      operateType?: string(name='OperateType'),
      status?: string(name='Status'),
      threshold?: string(name='Threshold'),
      wirelessCloudConnectors?: [ 
        {
          status?: string(name='Status'),
          wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
        }
      ](name='WirelessCloudConnectors'),
    }
  ](name='BatchOperateCardsTasks'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListBatchOperateCardsTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBatchOperateCardsTasksResponseBody(name='body'),
}

async function listBatchOperateCardsTasksWithOptions(request: ListBatchOperateCardsTasksRequest, runtime: Util.RuntimeOptions): ListBatchOperateCardsTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBatchOperateCardsTasks',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBatchOperateCardsTasks(request: ListBatchOperateCardsTasksRequest): ListBatchOperateCardsTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBatchOperateCardsTasksWithOptions(request, runtime);
}

model ListCardsRequest {
  apn?: string(name='Apn'),
  iccid?: string(name='Iccid'),
  iccids?: [ string ](name='Iccids'),
  ipAddress?: string(name='IpAddress'),
  lock?: boolean(name='Lock'),
  maxResults?: long(name='MaxResults'),
  msisdn?: string(name='Msisdn'),
  netLinkId?: string(name='NetLinkId'),
  nextToken?: string(name='NextToken'),
  online?: boolean(name='Online'),
  statuses?: [ string ](name='Statuses'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListCardsResponseBody = {
  cards?: [ 
    {
      APN?: string(name='APN'),
      activatedTime?: string(name='ActivatedTime'),
      businessStatus?: string(name='BusinessStatus'),
      description?: string(name='Description'),
      ISP?: string(name='ISP'),
      iccid?: string(name='Iccid'),
      imei?: string(name='Imei'),
      imsi?: string(name='Imsi'),
      ipAddress?: string(name='IpAddress'),
      lock?: boolean(name='Lock'),
      msisdn?: string(name='Msisdn'),
      name?: string(name='Name'),
      netType?: string(name='NetType'),
      orderId?: string(name='OrderId'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
      usageDataMonth?: long(name='UsageDataMonth'),
      usageDataTotal?: string(name='UsageDataTotal'),
    }
  ](name='Cards'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCardsResponseBody(name='body'),
}

async function listCardsWithOptions(request: ListCardsRequest, runtime: Util.RuntimeOptions): ListCardsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCards(request: ListCardsRequest): ListCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCardsWithOptions(request, runtime);
}

model ListDataPackagesRequest {
  dataPackageIds?: [ string ](name='DataPackageIds'),
  maxResults?: long(name='MaxResults'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken'),
  statuses?: [ string ](name='Statuses'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListDataPackagesResponseBody = {
  dataPackages?: [ 
    {
      cardCount?: string(name='CardCount'),
      createTime?: string(name='CreateTime'),
      dataPackageId?: string(name='DataPackageId'),
      expiredTime?: string(name='ExpiredTime'),
      ISP?: string(name='ISP'),
      name?: string(name='Name'),
      size?: string(name='Size'),
      status?: string(name='Status'),
    }
  ](name='DataPackages'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListDataPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataPackagesResponseBody(name='body'),
}

async function listDataPackagesWithOptions(request: ListDataPackagesRequest, runtime: Util.RuntimeOptions): ListDataPackagesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataPackages',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataPackages(request: ListDataPackagesRequest): ListDataPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataPackagesWithOptions(request, runtime);
}

model ListDiagnoseInfoForSingleCardRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionNo?: string(name='RegionNo'),
  source?: string(name='Source'),
  sourceType?: string(name='SourceType'),
  status?: string(name='Status'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListDiagnoseInfoForSingleCardResponseBody = {
  diagnoseInfo?: [ 
    {
      beginTime?: long(name='BeginTime'),
      cardIp?: string(name='CardIp'),
      destination?: string(name='Destination'),
      destinationType?: string(name='DestinationType'),
      diagnoseTaskId?: string(name='DiagnoseTaskId'),
      diagnoseTime?: long(name='DiagnoseTime'),
      endTime?: long(name='EndTime'),
      iccId?: string(name='IccId'),
      source?: string(name='Source'),
      sourceType?: string(name='SourceType'),
      status?: string(name='Status'),
      wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
    }
  ](name='DiagnoseInfo'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDiagnoseInfoForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDiagnoseInfoForSingleCardResponseBody(name='body'),
}

async function listDiagnoseInfoForSingleCardWithOptions(request: ListDiagnoseInfoForSingleCardRequest, runtime: Util.RuntimeOptions): ListDiagnoseInfoForSingleCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDiagnoseInfoForSingleCard',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDiagnoseInfoForSingleCard(request: ListDiagnoseInfoForSingleCardRequest): ListDiagnoseInfoForSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDiagnoseInfoForSingleCardWithOptions(request, runtime);
}

model ListIoTCloudConnectorBackhaulRouteRequest {
  netLinkId?: string(name='NetLinkId'),
  regionId?: string(name='RegionId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListIoTCloudConnectorBackhaulRouteResponseBody = {
  netLinkId?: string(name='NetLinkId'),
  requestId?: string(name='RequestId'),
  routes?: [ 
    {
      description?: string(name='Description'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
      status?: string(name='Status'),
    }
  ](name='Routes'),
}

model ListIoTCloudConnectorBackhaulRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIoTCloudConnectorBackhaulRouteResponseBody(name='body'),
}

async function listIoTCloudConnectorBackhaulRouteWithOptions(request: ListIoTCloudConnectorBackhaulRouteRequest, runtime: Util.RuntimeOptions): ListIoTCloudConnectorBackhaulRouteResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIoTCloudConnectorBackhaulRoute',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIoTCloudConnectorBackhaulRoute(request: ListIoTCloudConnectorBackhaulRouteRequest): ListIoTCloudConnectorBackhaulRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIoTCloudConnectorBackhaulRouteWithOptions(request, runtime);
}

model ListOrdersRequest {
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orderAction?: string(name='OrderAction'),
  orderIds?: [ string ](name='OrderIds'),
  statuses?: [ string ](name='Statuses'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListOrdersResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orders?: [ 
    {
      action?: string(name='Action'),
      cardCount?: string(name='CardCount'),
      cardNetType?: string(name='CardNetType'),
      cardType?: string(name='CardType'),
      contactName?: string(name='ContactName'),
      contactPhone?: string(name='ContactPhone'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      logisticsId?: string(name='LogisticsId'),
      logisticsStatus?: string(name='LogisticsStatus'),
      logisticsType?: string(name='LogisticsType'),
      logisticsUpdateTime?: string(name='LogisticsUpdateTime'),
      orderId?: string(name='OrderId'),
      payTime?: string(name='PayTime'),
      postAddress?: string(name='PostAddress'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='Orders'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ListOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrdersResponseBody(name='body'),
}

async function listOrdersWithOptions(request: ListOrdersRequest, runtime: Util.RuntimeOptions): ListOrdersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrders',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOrders(request: ListOrdersRequest): ListOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrdersWithOptions(request, runtime);
}

model ListRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  regionId?: string(name='RegionId'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(request: ListRegionsRequest, runtime: Util.RuntimeOptions): ListRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(request, runtime);
}

model ListWirelessCloudConnectorsRequest {
  businessType?: string(name='BusinessType'),
  isInGroup?: string(name='IsInGroup'),
  maxResults?: long(name='MaxResults'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  statuses?: [ string ](name='Statuses'),
  wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds'),
}

model ListWirelessCloudConnectorsResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  wirelessCloudConnectors?: [ 
    {
      businessType?: string(name='BusinessType'),
      cardCount?: string(name='CardCount'),
      createTime?: string(name='CreateTime'),
      dataPackageId?: string(name='DataPackageId'),
      dataPackageType?: string(name='DataPackageType'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
      serviceType?: string(name='ServiceType'),
      status?: string(name='Status'),
      useCase?: string(name='UseCase'),
      wirelessCloudConnectorGroupId?: string(name='WirelessCloudConnectorGroupId'),
      wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
    }
  ](name='WirelessCloudConnectors'),
}

model ListWirelessCloudConnectorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWirelessCloudConnectorsResponseBody(name='body'),
}

async function listWirelessCloudConnectorsWithOptions(request: ListWirelessCloudConnectorsRequest, runtime: Util.RuntimeOptions): ListWirelessCloudConnectorsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWirelessCloudConnectors',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listWirelessCloudConnectors(request: ListWirelessCloudConnectorsRequest): ListWirelessCloudConnectorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWirelessCloudConnectorsWithOptions(request, runtime);
}

model ListZonesRequest {
  regionId?: string(name='RegionId'),
}

model ListZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zones'),
}

model ListZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListZonesResponseBody(name='body'),
}

async function listZonesWithOptions(request: ListZonesRequest, runtime: Util.RuntimeOptions): ListZonesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListZones',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listZones(request: ListZonesRequest): ListZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listZonesWithOptions(request, runtime);
}

model LockCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model LockCardsResponseBody = {
  requestId?: string(name='RequestId'),
}

model LockCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockCardsResponseBody(name='body'),
}

async function lockCardsWithOptions(request: LockCardsRequest, runtime: Util.RuntimeOptions): LockCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LockCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function lockCards(request: LockCardsRequest): LockCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockCardsWithOptions(request, runtime);
}

model ModifyWirelessCloudConnectorFeatureRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  featureName?: string(name='FeatureName'),
  featureValue?: string(name='FeatureValue'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ModifyWirelessCloudConnectorFeatureResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWirelessCloudConnectorFeatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWirelessCloudConnectorFeatureResponseBody(name='body'),
}

async function modifyWirelessCloudConnectorFeatureWithOptions(request: ModifyWirelessCloudConnectorFeatureRequest, runtime: Util.RuntimeOptions): ModifyWirelessCloudConnectorFeatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.featureName)) {
    query['FeatureName'] = request.featureName;
  }
  if (!Util.isUnset(request.featureValue)) {
    query['FeatureValue'] = request.featureValue;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWirelessCloudConnectorFeature',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWirelessCloudConnectorFeature(request: ModifyWirelessCloudConnectorFeatureRequest): ModifyWirelessCloudConnectorFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWirelessCloudConnectorFeatureWithOptions(request, runtime);
}

model OpenCc5gServiceRequest {
  regionId?: string(name='RegionId'),
}

model OpenCc5gServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenCc5gServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenCc5gServiceResponseBody(name='body'),
}

async function openCc5gServiceWithOptions(request: OpenCc5gServiceRequest, runtime: Util.RuntimeOptions): OpenCc5gServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenCc5gService',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openCc5gService(request: OpenCc5gServiceRequest): OpenCc5gServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openCc5gServiceWithOptions(request, runtime);
}

model ResumeCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model ResumeCardsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResumeCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeCardsResponseBody(name='body'),
}

async function resumeCardsWithOptions(request: ResumeCardsRequest, runtime: Util.RuntimeOptions): ResumeCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeCards(request: ResumeCardsRequest): ResumeCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeCardsWithOptions(request, runtime);
}

model RevokeNetLinkRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  netLinkId?: string(name='NetLinkId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model RevokeNetLinkResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeNetLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeNetLinkResponseBody(name='body'),
}

async function revokeNetLinkWithOptions(request: RevokeNetLinkRequest, runtime: Util.RuntimeOptions): RevokeNetLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.netLinkId)) {
    query['NetLinkId'] = request.netLinkId;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeNetLink',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeNetLink(request: RevokeNetLinkRequest): RevokeNetLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeNetLinkWithOptions(request, runtime);
}

model StopCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model StopCardsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopCardsResponseBody(name='body'),
}

async function stopCardsWithOptions(request: StopCardsRequest, runtime: Util.RuntimeOptions): StopCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopCards(request: StopCardsRequest): StopCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCardsWithOptions(request, runtime);
}

model SubmitDiagnoseTaskForSingleCardRequest {
  beginTime?: long(name='BeginTime'),
  destination?: string(name='Destination'),
  endTime?: long(name='EndTime'),
  regionNo?: string(name='RegionNo'),
  resourceUid?: long(name='ResourceUid'),
  source?: string(name='Source'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model SubmitDiagnoseTaskForSingleCardResponseBody = {
  diagnoseTaskId?: string(name='DiagnoseTaskId'),
  requestId?: string(name='RequestId'),
}

model SubmitDiagnoseTaskForSingleCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitDiagnoseTaskForSingleCardResponseBody(name='body'),
}

async function submitDiagnoseTaskForSingleCardWithOptions(request: SubmitDiagnoseTaskForSingleCardRequest, runtime: Util.RuntimeOptions): SubmitDiagnoseTaskForSingleCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.resourceUid)) {
    query['ResourceUid'] = request.resourceUid;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDiagnoseTaskForSingleCard',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitDiagnoseTaskForSingleCard(request: SubmitDiagnoseTaskForSingleCardRequest): SubmitDiagnoseTaskForSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDiagnoseTaskForSingleCardWithOptions(request, runtime);
}

model SwitchWirelessCloudConnectorToBusinessRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model SwitchWirelessCloudConnectorToBusinessResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchWirelessCloudConnectorToBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchWirelessCloudConnectorToBusinessResponseBody(name='body'),
}

async function switchWirelessCloudConnectorToBusinessWithOptions(request: SwitchWirelessCloudConnectorToBusinessRequest, runtime: Util.RuntimeOptions): SwitchWirelessCloudConnectorToBusinessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchWirelessCloudConnectorToBusiness',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchWirelessCloudConnectorToBusiness(request: SwitchWirelessCloudConnectorToBusinessRequest): SwitchWirelessCloudConnectorToBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchWirelessCloudConnectorToBusinessWithOptions(request, runtime);
}

model UnlockCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model UnlockCardsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnlockCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockCardsResponseBody(name='body'),
}

async function unlockCardsWithOptions(request: UnlockCardsRequest, runtime: Util.RuntimeOptions): UnlockCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnlockCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockCards(request: UnlockCardsRequest): UnlockCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockCardsWithOptions(request, runtime);
}

model UpdateAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destination?: string(name='Destination'),
  destinationPort?: string(name='DestinationPort'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  policy?: string(name='Policy'),
  protocol?: string(name='Protocol'),
  sourceCidr?: string(name='SourceCidr'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model UpdateAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAuthorizationRuleResponseBody(name='body'),
}

async function updateAuthorizationRuleWithOptions(request: UpdateAuthorizationRuleRequest, runtime: Util.RuntimeOptions): UpdateAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationPort)) {
    query['DestinationPort'] = request.destinationPort;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.sourceCidr)) {
    query['SourceCidr'] = request.sourceCidr;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAuthorizationRule(request: UpdateAuthorizationRuleRequest): UpdateAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAuthorizationRuleWithOptions(request, runtime);
}

model UpdateBatchOperateCardsTaskRequest {
  batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  effectType?: string(name='EffectType'),
  iccids?: [ string ](name='Iccids'),
  iccidsOssFilePath?: string(name='IccidsOssFilePath'),
  name?: string(name='Name'),
  operateType?: string(name='OperateType'),
  regionId?: string(name='RegionId'),
  threshold?: long(name='Threshold'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds'),
}

model UpdateBatchOperateCardsTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBatchOperateCardsTaskResponseBody(name='body'),
}

async function updateBatchOperateCardsTaskWithOptions(request: UpdateBatchOperateCardsTaskRequest, runtime: Util.RuntimeOptions): UpdateBatchOperateCardsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.batchOperateCardsTaskId)) {
    query['BatchOperateCardsTaskId'] = request.batchOperateCardsTaskId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.effectType)) {
    query['EffectType'] = request.effectType;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.iccidsOssFilePath)) {
    query['IccidsOssFilePath'] = request.iccidsOssFilePath;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.threshold)) {
    query['Threshold'] = request.threshold;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorIds)) {
    query['WirelessCloudConnectorIds'] = request.wirelessCloudConnectorIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBatchOperateCardsTask',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBatchOperateCardsTask(request: UpdateBatchOperateCardsTaskRequest): UpdateBatchOperateCardsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBatchOperateCardsTaskWithOptions(request, runtime);
}

model UpdateCardRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  iccid?: string(name='Iccid'),
  name?: string(name='Name'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model UpdateCardResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCardResponseBody(name='body'),
}

async function updateCardWithOptions(request: UpdateCardRequest, runtime: Util.RuntimeOptions): UpdateCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccid)) {
    query['Iccid'] = request.iccid;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCard',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCard(request: UpdateCardRequest): UpdateCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCardWithOptions(request, runtime);
}

model UpdateDNSAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destinationIp?: string(name='DestinationIp'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  sourceDNSIp?: string(name='SourceDNSIp'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model UpdateDNSAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDNSAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDNSAuthorizationRuleResponseBody(name='body'),
}

async function updateDNSAuthorizationRuleWithOptions(request: UpdateDNSAuthorizationRuleRequest, runtime: Util.RuntimeOptions): UpdateDNSAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationIp)) {
    query['DestinationIp'] = request.destinationIp;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.sourceDNSIp)) {
    query['SourceDNSIp'] = request.sourceDNSIp;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDNSAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDNSAuthorizationRule(request: UpdateDNSAuthorizationRuleRequest): UpdateDNSAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDNSAuthorizationRuleWithOptions(request, runtime);
}

model UpdateWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model UpdateWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWirelessCloudConnectorResponseBody(name='body'),
}

async function updateWirelessCloudConnectorWithOptions(request: UpdateWirelessCloudConnectorRequest, runtime: Util.RuntimeOptions): UpdateWirelessCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWirelessCloudConnector',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWirelessCloudConnector(request: UpdateWirelessCloudConnectorRequest): UpdateWirelessCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWirelessCloudConnectorWithOptions(request, runtime);
}

