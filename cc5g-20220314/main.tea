/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cc5g', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDNSAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destinationIp?: string(name='DestinationIp'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  sourceDNSIp?: string(name='SourceDNSIp'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model AddDNSAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddDNSAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDNSAuthorizationRuleResponseBody(name='body'),
}

async function addDNSAuthorizationRuleWithOptions(request: AddDNSAuthorizationRuleRequest, runtime: Util.RuntimeOptions): AddDNSAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationIp)) {
    query['DestinationIp'] = request.destinationIp;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.sourceDNSIp)) {
    query['SourceDNSIp'] = request.sourceDNSIp;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDNSAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDNSAuthorizationRule(request: AddDNSAuthorizationRuleRequest): AddDNSAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDNSAuthorizationRuleWithOptions(request, runtime);
}

model AttachVpcToNetLinkRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  netLinkId?: string(name='NetLinkId'),
  regionId?: string(name='RegionId'),
  vSwitches?: [ string ](name='VSwitches'),
  vpcId?: string(name='VpcId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model AttachVpcToNetLinkResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AttachVpcToNetLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachVpcToNetLinkResponseBody(name='body'),
}

async function attachVpcToNetLinkWithOptions(request: AttachVpcToNetLinkRequest, runtime: Util.RuntimeOptions): AttachVpcToNetLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.netLinkId)) {
    query['NetLinkId'] = request.netLinkId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitches)) {
    query['VSwitches'] = request.vSwitches;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachVpcToNetLink',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachVpcToNetLink(request: AttachVpcToNetLinkRequest): AttachVpcToNetLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachVpcToNetLinkWithOptions(request, runtime);
}

model CreateAuthorizationRuleRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  policy?: string(name='Policy'),
  sourceCidr?: string(name='SourceCidr'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model CreateAuthorizationRuleResponseBody = {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAuthorizationRuleResponseBody(name='body'),
}

async function createAuthorizationRuleWithOptions(request: CreateAuthorizationRuleRequest, runtime: Util.RuntimeOptions): CreateAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.sourceCidr)) {
    query['SourceCidr'] = request.sourceCidr;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAuthorizationRule(request: CreateAuthorizationRuleRequest): CreateAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthorizationRuleWithOptions(request, runtime);
}

model CreateBatchOperateCardsTaskRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  effectType?: string(name='EffectType'),
  iccids?: [ string ](name='Iccids'),
  iccidsOssFilePath?: string(name='IccidsOssFilePath'),
  name?: string(name='Name'),
  operateType?: string(name='OperateType'),
  regionId?: string(name='RegionId'),
  threshold?: long(name='Threshold'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds'),
}

model CreateBatchOperateCardsTaskResponseBody = {
  batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId'),
  operateResultOssFilePath?: string(name='OperateResultOssFilePath'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBatchOperateCardsTaskResponseBody(name='body'),
}

async function createBatchOperateCardsTaskWithOptions(request: CreateBatchOperateCardsTaskRequest, runtime: Util.RuntimeOptions): CreateBatchOperateCardsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.effectType)) {
    query['EffectType'] = request.effectType;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.iccidsOssFilePath)) {
    query['IccidsOssFilePath'] = request.iccidsOssFilePath;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.threshold)) {
    query['Threshold'] = request.threshold;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorIds)) {
    query['WirelessCloudConnectorIds'] = request.wirelessCloudConnectorIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBatchOperateCardsTask',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBatchOperateCardsTask(request: CreateBatchOperateCardsTaskRequest): CreateBatchOperateCardsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBatchOperateCardsTaskWithOptions(request, runtime);
}

model CreateWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  ISP?: string(name='ISP'),
  name?: string(name='Name'),
  netLinks?: [ 
    {
      APN?: string(name='APN'),
      regionId?: string(name='RegionId'),
      vSwitchs?: [ string ](name='VSwitchs'),
      vpcId?: string(name='VpcId'),
    }
  ](name='NetLinks'),
  regionId?: string(name='RegionId'),
  useCase?: string(name='UseCase'),
}

model CreateWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model CreateWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWirelessCloudConnectorResponseBody(name='body'),
}

async function createWirelessCloudConnectorWithOptions(request: CreateWirelessCloudConnectorRequest, runtime: Util.RuntimeOptions): CreateWirelessCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netLinks)) {
    query['NetLinks'] = request.netLinks;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.useCase)) {
    query['UseCase'] = request.useCase;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWirelessCloudConnector',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWirelessCloudConnector(request: CreateWirelessCloudConnectorRequest): CreateWirelessCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWirelessCloudConnectorWithOptions(request, runtime);
}

model DeleteAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model DeleteAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAuthorizationRuleResponseBody(name='body'),
}

async function deleteAuthorizationRuleWithOptions(request: DeleteAuthorizationRuleRequest, runtime: Util.RuntimeOptions): DeleteAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAuthorizationRule(request: DeleteAuthorizationRuleRequest): DeleteAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAuthorizationRuleWithOptions(request, runtime);
}

model DeleteBatchOperateCardsTaskRequest {
  batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
}

model DeleteBatchOperateCardsTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBatchOperateCardsTaskResponseBody(name='body'),
}

async function deleteBatchOperateCardsTaskWithOptions(request: DeleteBatchOperateCardsTaskRequest, runtime: Util.RuntimeOptions): DeleteBatchOperateCardsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.batchOperateCardsTaskId)) {
    query['BatchOperateCardsTaskId'] = request.batchOperateCardsTaskId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBatchOperateCardsTask',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBatchOperateCardsTask(request: DeleteBatchOperateCardsTaskRequest): DeleteBatchOperateCardsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBatchOperateCardsTaskWithOptions(request, runtime);
}

model DeleteWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model DeleteWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWirelessCloudConnectorResponseBody(name='body'),
}

async function deleteWirelessCloudConnectorWithOptions(request: DeleteWirelessCloudConnectorRequest, runtime: Util.RuntimeOptions): DeleteWirelessCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWirelessCloudConnector',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWirelessCloudConnector(request: DeleteWirelessCloudConnectorRequest): DeleteWirelessCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWirelessCloudConnectorWithOptions(request, runtime);
}

model DetachVpcFromNetLinkRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  netLinkId?: string(name='NetLinkId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model DetachVpcFromNetLinkResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DetachVpcFromNetLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachVpcFromNetLinkResponseBody(name='body'),
}

async function detachVpcFromNetLinkWithOptions(request: DetachVpcFromNetLinkRequest, runtime: Util.RuntimeOptions): DetachVpcFromNetLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.netLinkId)) {
    query['NetLinkId'] = request.netLinkId;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachVpcFromNetLink',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachVpcFromNetLink(request: DetachVpcFromNetLinkRequest): DetachVpcFromNetLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachVpcFromNetLinkWithOptions(request, runtime);
}

model GetCreateCustomerInfomationRequest {
  regionId?: string(name='RegionId'),
}

model GetCreateCustomerInfomationResponseBody = {
  canBuyCard?: string(name='CanBuyCard'),
  requestId?: string(name='RequestId', description='Id of the request'),
  URL?: string(name='URL'),
}

model GetCreateCustomerInfomationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCreateCustomerInfomationResponseBody(name='body'),
}

async function getCreateCustomerInfomationWithOptions(request: GetCreateCustomerInfomationRequest, runtime: Util.RuntimeOptions): GetCreateCustomerInfomationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCreateCustomerInfomation',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCreateCustomerInfomation(request: GetCreateCustomerInfomationRequest): GetCreateCustomerInfomationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCreateCustomerInfomationWithOptions(request, runtime);
}

model GetWirelessCloudConnectorRequest {
  regionId?: string(name='RegionId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetWirelessCloudConnectorResponseBody = {
  cardCount?: string(name='CardCount'),
  createTime?: string(name='CreateTime'),
  dataPackageId?: string(name='DataPackageId'),
  dataPackageType?: string(name='DataPackageType'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  netLinks?: [ 
    {
      APN?: string(name='APN'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      ISP?: string(name='ISP'),
      name?: string(name='Name', description='创建时间'),
      netLinkId?: string(name='NetLinkId', description='资源名称'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      vSwitchs?: [ string ](name='VSwitchs'),
      vpcId?: string(name='VpcId'),
    }
  ](name='NetLinks', description='数组，返回示例目录。'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status'),
  useCase?: string(name='UseCase'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model GetWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWirelessCloudConnectorResponseBody(name='body'),
}

async function getWirelessCloudConnectorWithOptions(request: GetWirelessCloudConnectorRequest, runtime: Util.RuntimeOptions): GetWirelessCloudConnectorResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWirelessCloudConnector',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWirelessCloudConnector(request: GetWirelessCloudConnectorRequest): GetWirelessCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWirelessCloudConnectorWithOptions(request, runtime);
}

model InnerLimitRateCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  innerApi?: boolean(name='InnerApi'),
  regionId?: string(name='RegionId'),
  task?: boolean(name='Task'),
}

model InnerLimitRateCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model InnerLimitRateCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InnerLimitRateCardsResponseBody(name='body'),
}

async function innerLimitRateCardsWithOptions(request: InnerLimitRateCardsRequest, runtime: Util.RuntimeOptions): InnerLimitRateCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.innerApi)) {
    query['InnerApi'] = request.innerApi;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.task)) {
    query['Task'] = request.task;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InnerLimitRateCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function innerLimitRateCards(request: InnerLimitRateCardsRequest): InnerLimitRateCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return innerLimitRateCardsWithOptions(request, runtime);
}

model InnerStopCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  innerApi?: string(name='InnerApi'),
  regionId?: string(name='RegionId'),
  task?: string(name='Task'),
}

model InnerStopCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model InnerStopCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InnerStopCardsResponseBody(name='body'),
}

async function innerStopCardsWithOptions(request: InnerStopCardsRequest, runtime: Util.RuntimeOptions): InnerStopCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.innerApi)) {
    query['InnerApi'] = request.innerApi;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.task)) {
    query['Task'] = request.task;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InnerStopCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function innerStopCards(request: InnerStopCardsRequest): InnerStopCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return innerStopCardsWithOptions(request, runtime);
}

model ListAuthorizationRulesRequest {
  authorizationRuleIds?: [ string ](name='AuthorizationRuleIds'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  dns?: boolean(name='Dns'),
  maxResults?: long(name='MaxResults'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken'),
  policy?: string(name='Policy'),
  statuses?: [ string ](name='Statuses'),
  type?: string(name='Type'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListAuthorizationRulesResponseBody = {
  authorizationRules?: [ 
    {
      authorizationRuleId?: string(name='AuthorizationRuleId', description='资源一级ID'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      destination?: string(name='Destination'),
      destinationType?: string(name='DestinationType'),
      dns?: string(name='Dns'),
      name?: string(name='Name', description='创建时间'),
      policy?: string(name='Policy'),
      sourceCidr?: string(name='SourceCidr'),
      status?: string(name='Status', description='资源名称'),
      type?: string(name='Type'),
    }
  ](name='AuthorizationRules', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListAuthorizationRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAuthorizationRulesResponseBody(name='body'),
}

async function listAuthorizationRulesWithOptions(request: ListAuthorizationRulesRequest, runtime: Util.RuntimeOptions): ListAuthorizationRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAuthorizationRules',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAuthorizationRules(request: ListAuthorizationRulesRequest): ListAuthorizationRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthorizationRulesWithOptions(request, runtime);
}

model ListBatchOperateCardsTasksRequest {
  batchOperateCardsTaskIds?: [ string ](name='BatchOperateCardsTaskIds'),
  maxResults?: long(name='MaxResults'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  statuses?: [ string ](name='Statuses'),
}

model ListBatchOperateCardsTasksResponseBody = {
  batchOperateCardsTasks?: [ 
    {
      batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId', description='资源一级ID'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      effectType?: string(name='EffectType'),
      iccidsOssFilePath?: string(name='IccidsOssFilePath'),
      name?: string(name='Name'),
      operateResultOssFilePath?: boolean(name='OperateResultOssFilePath'),
      operateType?: string(name='OperateType', description='创建时间'),
      status?: string(name='Status'),
      threshold?: string(name='Threshold'),
      wirelessCloudConnectors?: [ 
        {
          status?: string(name='Status'),
          wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
        }
      ](name='WirelessCloudConnectors'),
    }
  ](name='BatchOperateCardsTasks', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListBatchOperateCardsTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBatchOperateCardsTasksResponseBody(name='body'),
}

async function listBatchOperateCardsTasksWithOptions(request: ListBatchOperateCardsTasksRequest, runtime: Util.RuntimeOptions): ListBatchOperateCardsTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBatchOperateCardsTasks',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBatchOperateCardsTasks(request: ListBatchOperateCardsTasksRequest): ListBatchOperateCardsTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBatchOperateCardsTasksWithOptions(request, runtime);
}

model ListCardsRequest {
  apn?: string(name='Apn'),
  destinationType?: string(name='DestinationType'),
  iccid?: string(name='Iccid'),
  iccids?: [ string ](name='Iccids'),
  ipAddress?: string(name='IpAddress'),
  lock?: boolean(name='Lock'),
  maxResults?: long(name='MaxResults'),
  netLinkId?: string(name='NetLinkId'),
  nextToken?: string(name='NextToken'),
  online?: boolean(name='Online'),
  statuses?: [ string ](name='Statuses'),
  vpcId?: string(name='VpcId'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListCardsResponseBody = {
  cards?: [ 
    {
      APN?: string(name='APN', description='创建时间'),
      activatedTime?: string(name='ActivatedTime'),
      businessStatus?: string(name='BusinessStatus'),
      description?: string(name='Description'),
      ISP?: string(name='ISP'),
      iccid?: string(name='Iccid', description='资源一级ID'),
      imei?: string(name='Imei'),
      imsi?: string(name='Imsi'),
      ipAddress?: string(name='IpAddress'),
      lock?: boolean(name='Lock'),
      name?: string(name='Name'),
      netType?: string(name='NetType', description='资源名称'),
      orderId?: string(name='OrderId'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
      usageDataMonth?: long(name='UsageDataMonth'),
    }
  ](name='Cards', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCardsResponseBody(name='body'),
}

async function listCardsWithOptions(request: ListCardsRequest, runtime: Util.RuntimeOptions): ListCardsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCards(request: ListCardsRequest): ListCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCardsWithOptions(request, runtime);
}

model ListDataPackagesRequest {
  dataPackageIds?: [ string ](name='DataPackageIds'),
  maxResults?: long(name='MaxResults'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken'),
  statuses?: [ string ](name='Statuses'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListDataPackagesResponseBody = {
  dataPackages?: [ 
    {
      cardCount?: string(name='CardCount'),
      createTime?: string(name='CreateTime'),
      dataPackageId?: string(name='DataPackageId'),
      expiredTime?: string(name='ExpiredTime'),
      ISP?: string(name='ISP'),
      name?: string(name='Name', description='创建时间'),
      size?: string(name='Size'),
      status?: string(name='Status', description='资源名称'),
    }
  ](name='DataPackages', description='数组，返回示例目录。'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListDataPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataPackagesResponseBody(name='body'),
}

async function listDataPackagesWithOptions(request: ListDataPackagesRequest, runtime: Util.RuntimeOptions): ListDataPackagesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataPackages',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataPackages(request: ListDataPackagesRequest): ListDataPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataPackagesWithOptions(request, runtime);
}

model ListOrdersRequest {
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orderAction?: string(name='OrderAction'),
  orderIds?: [ string ](name='OrderIds'),
  statuses?: [ string ](name='Statuses'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model ListOrdersResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orders?: [ 
    {
      action?: string(name='Action', description='创建时间'),
      cardCount?: string(name='CardCount'),
      cardNetType?: string(name='CardNetType'),
      cardType?: string(name='CardType'),
      contactName?: string(name='ContactName'),
      contactPhone?: string(name='ContactPhone'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      logisticsId?: string(name='LogisticsId'),
      logisticsStatus?: string(name='LogisticsStatus'),
      logisticsType?: string(name='LogisticsType'),
      logisticsUpdateTime?: string(name='LogisticsUpdateTime'),
      orderId?: string(name='OrderId'),
      payTime?: string(name='PayTime'),
      postAddress?: string(name='PostAddress'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status', description='资源名称'),
    }
  ](name='Orders', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrdersResponseBody(name='body'),
}

async function listOrdersWithOptions(request: ListOrdersRequest, runtime: Util.RuntimeOptions): ListOrdersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrders',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOrders(request: ListOrdersRequest): ListOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrdersWithOptions(request, runtime);
}

model ListRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  regionId?: string(name='RegionId'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='资源名称'),
      regionEndpoint?: string(name='RegionEndpoint', description='创建时间'),
      regionId?: string(name='RegionId', description='资源一级ID'),
    }
  ](name='Regions', description='数组，返回示例目录。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(request: ListRegionsRequest, runtime: Util.RuntimeOptions): ListRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(request, runtime);
}

model ListWirelessCloudConnectorsRequest {
  maxResults?: long(name='MaxResults'),
  names?: [ string ](name='Names'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  statuses?: [ string ](name='Statuses'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds'),
}

model ListWirelessCloudConnectorsResponseBody = {
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
  wirelessCloudConnectors?: [ 
    {
      cardCount?: string(name='CardCount'),
      createTime?: string(name='CreateTime'),
      dataPackageId?: string(name='DataPackageId'),
      dataPackageType?: string(name='DataPackageType'),
      description?: string(name='Description'),
      name?: string(name='Name', description='创建时间'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status', description='资源名称'),
      useCase?: string(name='UseCase'),
      wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId', description='资源一级ID'),
    }
  ](name='WirelessCloudConnectors', description='数组，返回示例目录。'),
}

model ListWirelessCloudConnectorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWirelessCloudConnectorsResponseBody(name='body'),
}

async function listWirelessCloudConnectorsWithOptions(request: ListWirelessCloudConnectorsRequest, runtime: Util.RuntimeOptions): ListWirelessCloudConnectorsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWirelessCloudConnectors',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listWirelessCloudConnectors(request: ListWirelessCloudConnectorsRequest): ListWirelessCloudConnectorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWirelessCloudConnectorsWithOptions(request, runtime);
}

model ListZonesRequest {
  regionId?: string(name='RegionId'),
}

model ListZonesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='创建时间'),
      zoneId?: string(name='ZoneId', description='资源名称'),
    }
  ](name='Zones', description='数组，返回示例目录。'),
}

model ListZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListZonesResponseBody(name='body'),
}

async function listZonesWithOptions(request: ListZonesRequest, runtime: Util.RuntimeOptions): ListZonesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListZones',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listZones(request: ListZonesRequest): ListZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listZonesWithOptions(request, runtime);
}

model LockCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model LockCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model LockCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockCardsResponseBody(name='body'),
}

async function lockCardsWithOptions(request: LockCardsRequest, runtime: Util.RuntimeOptions): LockCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LockCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function lockCards(request: LockCardsRequest): LockCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockCardsWithOptions(request, runtime);
}

model OpenCc5gServiceRequest {
  regionId?: string(name='RegionId'),
}

model OpenCc5gServiceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model OpenCc5gServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenCc5gServiceResponseBody(name='body'),
}

async function openCc5gServiceWithOptions(request: OpenCc5gServiceRequest, runtime: Util.RuntimeOptions): OpenCc5gServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenCc5gService',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openCc5gService(request: OpenCc5gServiceRequest): OpenCc5gServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openCc5gServiceWithOptions(request, runtime);
}

model ResumeCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model ResumeCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ResumeCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeCardsResponseBody(name='body'),
}

async function resumeCardsWithOptions(request: ResumeCardsRequest, runtime: Util.RuntimeOptions): ResumeCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeCards(request: ResumeCardsRequest): ResumeCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeCardsWithOptions(request, runtime);
}

model StopCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model StopCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopCardsResponseBody(name='body'),
}

async function stopCardsWithOptions(request: StopCardsRequest, runtime: Util.RuntimeOptions): StopCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopCards(request: StopCardsRequest): StopCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCardsWithOptions(request, runtime);
}

model UnlockCardsRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  iccids?: [ string ](name='Iccids'),
  regionId?: string(name='RegionId'),
}

model UnlockCardsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UnlockCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockCardsResponseBody(name='body'),
}

async function unlockCardsWithOptions(request: UnlockCardsRequest, runtime: Util.RuntimeOptions): UnlockCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnlockCards',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockCards(request: UnlockCardsRequest): UnlockCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockCardsWithOptions(request, runtime);
}

model UpdateAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destination?: string(name='Destination'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  policy?: string(name='Policy'),
  sourceCidr?: string(name='SourceCidr'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model UpdateAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAuthorizationRuleResponseBody(name='body'),
}

async function updateAuthorizationRuleWithOptions(request: UpdateAuthorizationRuleRequest, runtime: Util.RuntimeOptions): UpdateAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.sourceCidr)) {
    query['SourceCidr'] = request.sourceCidr;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAuthorizationRule(request: UpdateAuthorizationRuleRequest): UpdateAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAuthorizationRuleWithOptions(request, runtime);
}

model UpdateBatchOperateCardsTaskRequest {
  batchOperateCardsTaskId?: string(name='BatchOperateCardsTaskId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  effectType?: string(name='EffectType'),
  iccids?: [ string ](name='Iccids'),
  iccidsOssFilePath?: string(name='IccidsOssFilePath'),
  name?: string(name='Name'),
  operateType?: string(name='OperateType'),
  regionId?: string(name='RegionId'),
  threshold?: long(name='Threshold'),
  wirelessCloudConnectorIds?: [ string ](name='WirelessCloudConnectorIds'),
}

model UpdateBatchOperateCardsTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateBatchOperateCardsTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBatchOperateCardsTaskResponseBody(name='body'),
}

async function updateBatchOperateCardsTaskWithOptions(request: UpdateBatchOperateCardsTaskRequest, runtime: Util.RuntimeOptions): UpdateBatchOperateCardsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.batchOperateCardsTaskId)) {
    query['BatchOperateCardsTaskId'] = request.batchOperateCardsTaskId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.effectType)) {
    query['EffectType'] = request.effectType;
  }
  if (!Util.isUnset(request.iccids)) {
    query['Iccids'] = request.iccids;
  }
  if (!Util.isUnset(request.iccidsOssFilePath)) {
    query['IccidsOssFilePath'] = request.iccidsOssFilePath;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.threshold)) {
    query['Threshold'] = request.threshold;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorIds)) {
    query['WirelessCloudConnectorIds'] = request.wirelessCloudConnectorIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBatchOperateCardsTask',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBatchOperateCardsTask(request: UpdateBatchOperateCardsTaskRequest): UpdateBatchOperateCardsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBatchOperateCardsTaskWithOptions(request, runtime);
}

model UpdateCardRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  iccid?: string(name='Iccid'),
  name?: string(name='Name'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model UpdateCardResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateCardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCardResponseBody(name='body'),
}

async function updateCardWithOptions(request: UpdateCardRequest, runtime: Util.RuntimeOptions): UpdateCardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.iccid)) {
    query['Iccid'] = request.iccid;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCard',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCard(request: UpdateCardRequest): UpdateCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCardWithOptions(request, runtime);
}

model UpdateDNSAuthorizationRuleRequest {
  authorizationRuleId?: string(name='AuthorizationRuleId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destinationIp?: string(name='DestinationIp'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  sourceDNSIp?: string(name='SourceDNSIp'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model UpdateDNSAuthorizationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDNSAuthorizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDNSAuthorizationRuleResponseBody(name='body'),
}

async function updateDNSAuthorizationRuleWithOptions(request: UpdateDNSAuthorizationRuleRequest, runtime: Util.RuntimeOptions): UpdateDNSAuthorizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizationRuleId)) {
    query['AuthorizationRuleId'] = request.authorizationRuleId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationIp)) {
    query['DestinationIp'] = request.destinationIp;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.sourceDNSIp)) {
    query['SourceDNSIp'] = request.sourceDNSIp;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDNSAuthorizationRule',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDNSAuthorizationRule(request: UpdateDNSAuthorizationRuleRequest): UpdateDNSAuthorizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDNSAuthorizationRuleWithOptions(request, runtime);
}

model UpdateWirelessCloudConnectorRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  name?: string(name='Name'),
  wirelessCloudConnectorId?: string(name='WirelessCloudConnectorId'),
}

model UpdateWirelessCloudConnectorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateWirelessCloudConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWirelessCloudConnectorResponseBody(name='body'),
}

async function updateWirelessCloudConnectorWithOptions(request: UpdateWirelessCloudConnectorRequest, runtime: Util.RuntimeOptions): UpdateWirelessCloudConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.wirelessCloudConnectorId)) {
    query['WirelessCloudConnectorId'] = request.wirelessCloudConnectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWirelessCloudConnector',
    version = '2022-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWirelessCloudConnector(request: UpdateWirelessCloudConnectorRequest): UpdateWirelessCloudConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWirelessCloudConnectorWithOptions(request, runtime);
}

