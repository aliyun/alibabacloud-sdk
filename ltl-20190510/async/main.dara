/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ltl';
  @version = '2019-05-10';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'ltl.aliyuncs.com',
    ap-northeast-2-pop = 'ltl.aliyuncs.com',
    ap-south-1 = 'ltl.aliyuncs.com',
    ap-southeast-1 = 'ltl.aliyuncs.com',
    ap-southeast-2 = 'ltl.aliyuncs.com',
    ap-southeast-3 = 'ltl.aliyuncs.com',
    ap-southeast-5 = 'ltl.aliyuncs.com',
    cn-beijing = 'ltl.aliyuncs.com',
    cn-beijing-finance-1 = 'ltl.aliyuncs.com',
    cn-beijing-finance-pop = 'ltl.aliyuncs.com',
    cn-beijing-gov-1 = 'ltl.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ltl.aliyuncs.com',
    cn-chengdu = 'ltl.aliyuncs.com',
    cn-edge-1 = 'ltl.aliyuncs.com',
    cn-fujian = 'ltl.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ltl.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ltl.aliyuncs.com',
    cn-hangzhou-finance = 'ltl.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ltl.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ltl.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ltl.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ltl.aliyuncs.com',
    cn-hangzhou-test-306 = 'ltl.aliyuncs.com',
    cn-hongkong = 'ltl.aliyuncs.com',
    cn-hongkong-finance-pop = 'ltl.aliyuncs.com',
    cn-huhehaote = 'ltl.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ltl.aliyuncs.com',
    cn-north-2-gov-1 = 'ltl.aliyuncs.com',
    cn-qingdao = 'ltl.aliyuncs.com',
    cn-qingdao-nebula = 'ltl.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ltl.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ltl.aliyuncs.com',
    cn-shanghai-finance-1 = 'ltl.aliyuncs.com',
    cn-shanghai-inner = 'ltl.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ltl.aliyuncs.com',
    cn-shenzhen = 'ltl.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ltl.aliyuncs.com',
    cn-shenzhen-inner = 'ltl.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ltl.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ltl.aliyuncs.com',
    cn-wuhan = 'ltl.aliyuncs.com',
    cn-wulanchabu = 'ltl.aliyuncs.com',
    cn-yushanfang = 'ltl.aliyuncs.com',
    cn-zhangbei = 'ltl.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ltl.aliyuncs.com',
    cn-zhangjiakou = 'ltl.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ltl.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ltl.aliyuncs.com',
    eu-central-1 = 'ltl.aliyuncs.com',
    eu-west-1 = 'ltl.aliyuncs.com',
    eu-west-1-oxs = 'ltl.aliyuncs.com',
    me-east-1 = 'ltl.aliyuncs.com',
    rus-west-1-pop = 'ltl.aliyuncs.com',
    us-east-1 = 'ltl.aliyuncs.com',
    us-west-1 = 'ltl.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ApplyDataModelConfigInfoRequest {
  apiVersion?: string(name='ApiVersion', example='1.0.0', position='Query'),
  configuration: string(name='Configuration', example='{\\"productKey\\":\\"a1lPbm9Yq0v\\"}', position='Query'),
  dataModelCode: string(name='DataModelCode', example='DF3K', position='Query'),
  productKey?: string(name='ProductKey', example='HB5jyvZWz******g', position='Query'),
}

model ApplyDataModelConfigInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='180E5D71-FF24-5E87-9746-3DA837E686FE'),
  success?: boolean(name='Success', example='true'),
}

model ApplyDataModelConfigInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyDataModelConfigInfoResponseBody(name='body'),
}

async function applyDataModelConfigInfo(request: ApplyDataModelConfigInfoRequest): ApplyDataModelConfigInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyDataModelConfigInfo', 'POST', '/', 'json', false, 'json', request);
}

model AttachDataRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  businessId?: string(name='BusinessId', example='000000000000000000000000000000000000000000000000000000000001****', position='Query'),
  key: string(name='Key', example='0001_HB5jyvZWzwcM****_0X**_80aa976ac4d64a97bd45c71a509d****', position='Query'),
  productKey: string(name='ProductKey', example='HB5jyvZWzwcM****', position='Query'),
  value: string(name='Value', position='Query'),
}

model AttachDataResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model AttachDataResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDataResponseBody(name='body'),
}

async function attachData(request: AttachDataRequest): AttachDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachData', 'POST', '/', 'json', false, 'json', request);
}

model AttachDataWithSignatureRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  businessId?: string(name='BusinessId', example='000000000000000000000000000000000000000000000000000000000001****', position='Query'),
  iotAuthType: string(name='IotAuthType', example='ID2', position='Query'),
  iotDataDigest: string(name='IotDataDigest', example='94894989498FDDABD51698BD1A49BF1AFB0AA94FAA8DB65A689164BEED******', position='Query'),
  iotId: string(name='IotId', example='183329761572****', position='Query'),
  iotIdServiceProvider: string(name='IotIdServiceProvider', example='g9R4ghe****', position='Query'),
  iotIdSource: string(name='IotIdSource', example='2', position='Query'),
  iotSignature: string(name='IotSignature', example='2~2~192ADFB498AA****~1579198300000~J8E891NAgAhwHBHm8******/hnswr698HSb09ahS8709bn9s03jg98u4jg******', position='Query'),
  key: string(name='Key', example='0001_HB5jyvZWzwcM****_0X**_80aa976ac4d64a97bd45c71a509d****', position='Query'),
  productKey: string(name='ProductKey', example='HB5jyvZWzwcM****', position='Query'),
  value: string(name='Value', position='Query'),
}

model AttachDataWithSignatureResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model AttachDataWithSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDataWithSignatureResponseBody(name='body'),
}

async function attachDataWithSignature(request: AttachDataWithSignatureRequest): AttachDataWithSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDataWithSignature', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeDeviceRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  deviceGroupId: string(name='DeviceGroupId', example='475020454741****', position='Query'),
  deviceId: string(name='DeviceId', example='654887879557****', position='Query'),
}

model AuthorizeDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model AuthorizeDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeDeviceResponseBody(name='body'),
}

async function authorizeDevice(request: AuthorizeDeviceRequest): AuthorizeDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeDevice', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeDeviceGroupRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  deviceGroupId: string(name='DeviceGroupId', example='475020454741****', position='Query'),
}

model AuthorizeDeviceGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model AuthorizeDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeDeviceGroupResponseBody(name='body'),
}

async function authorizeDeviceGroup(request: AuthorizeDeviceGroupRequest): AuthorizeDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model BatchUploadMPCoSPhaseDigestInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  phaseDataList: map[string]any(name='PhaseDataList', shrink='json', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
  phaseId: string(name='PhaseId', example='644208887511****', position='Query'),
}

model BatchUploadMPCoSPhaseDigestInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model BatchUploadMPCoSPhaseDigestInfoResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUploadMPCoSPhaseDigestInfoResponseBody(name='body'),
}

async function batchUploadMPCoSPhaseDigestInfo(request: BatchUploadMPCoSPhaseDigestInfoRequest): BatchUploadMPCoSPhaseDigestInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUploadMPCoSPhaseDigestInfo', 'POST', '/', 'json', false, 'json', request);
}

model BatchUploadMPCoSPhaseDigestInfoByDeviceRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  iotAuthType: string(name='IotAuthType', example='ID2', position='Query'),
  iotDataDigest: string(name='IotDataDigest', example='94894989498FDDABD51698BD1A49BF1AFB0AA94FAA8DB65A689164BEED', position='Query'),
  iotId: string(name='IotId', example='183329761572****', position='Query'),
  iotIdServiceProvider: string(name='IotIdServiceProvider', example='g9R4ghe****', position='Query'),
  iotIdSource: string(name='IotIdSource', example='2', position='Query'),
  iotSignature: string(name='IotSignature', example='2~2~192ADFB498AA****~1579198300000~J8E891NAgAhwHBHm8******/hnswr698HSb09ahS8709bn9s03jg98u4jg******', position='Query'),
  phaseDataList: map[string]any(name='PhaseDataList', shrink='json', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
  phaseId: string(name='PhaseId', example='644208887511****', position='Query'),
}

model BatchUploadMPCoSPhaseDigestInfoByDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model BatchUploadMPCoSPhaseDigestInfoByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUploadMPCoSPhaseDigestInfoByDeviceResponseBody(name='body'),
}

async function batchUploadMPCoSPhaseDigestInfoByDevice(request: BatchUploadMPCoSPhaseDigestInfoByDeviceRequest): BatchUploadMPCoSPhaseDigestInfoByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUploadMPCoSPhaseDigestInfoByDevice', 'POST', '/', 'json', false, 'json', request);
}

model BatchUploadMPCoSPhaseTextInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  phaseDataList: map[string]any(name='PhaseDataList', shrink='json', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='987823074334****', position='Query'),
  phaseId: string(name='PhaseId', example='196487512811****', position='Query'),
}

model BatchUploadMPCoSPhaseTextInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model BatchUploadMPCoSPhaseTextInfoResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUploadMPCoSPhaseTextInfoResponseBody(name='body'),
}

async function batchUploadMPCoSPhaseTextInfo(request: BatchUploadMPCoSPhaseTextInfoRequest): BatchUploadMPCoSPhaseTextInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUploadMPCoSPhaseTextInfo', 'POST', '/', 'json', false, 'json', request);
}

model BatchUploadMPCoSPhaseTextInfoByDeviceRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  iotAuthType: string(name='IotAuthType', example='ID2', position='Query'),
  iotDataDigest: string(name='IotDataDigest', example='94894989498FDDABD51698BD1A49BF1AFB0AA94FAA8DB65A689164BEED******', position='Query'),
  iotId: string(name='IotId', example='183329761572****', position='Query'),
  iotIdServiceProvider: string(name='IotIdServiceProvider', example='g9R4ghe****', position='Query'),
  iotIdSource: string(name='IotIdSource', example='2', position='Query'),
  iotSignature: string(name='IotSignature', example='2~2~192ADFB498AA****~1579198300000~J8E891NAgAhwHBHm8******/hnswr698HSb09ahS8709bn9s03jg98u4jg******', position='Query'),
  phaseDataList: map[string]any(name='PhaseDataList', shrink='json', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
  phaseId: string(name='PhaseId', example='644208887511****', position='Query'),
}

model BatchUploadMPCoSPhaseTextInfoByDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='The system is busy. Please try again later.'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model BatchUploadMPCoSPhaseTextInfoByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUploadMPCoSPhaseTextInfoByDeviceResponseBody(name='body'),
}

async function batchUploadMPCoSPhaseTextInfoByDevice(request: BatchUploadMPCoSPhaseTextInfoByDeviceRequest): BatchUploadMPCoSPhaseTextInfoByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUploadMPCoSPhaseTextInfoByDevice', 'POST', '/', 'json', false, 'json', request);
}

model CreateMPCoSPhaseRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  name: string(name='Name', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='987823074334****', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model CreateMPCoSPhaseResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='196487512811****'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model CreateMPCoSPhaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMPCoSPhaseResponseBody(name='body'),
}

async function createMPCoSPhase(request: CreateMPCoSPhaseRequest): CreateMPCoSPhaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMPCoSPhase', 'POST', '/', 'json', false, 'json', request);
}

model CreateMPCoSPhaseGroupRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  name: string(name='Name', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model CreateMPCoSPhaseGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='987823074334****'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model CreateMPCoSPhaseGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMPCoSPhaseGroupResponseBody(name='body'),
}

async function createMPCoSPhaseGroup(request: CreateMPCoSPhaseGroupRequest): CreateMPCoSPhaseGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMPCoSPhaseGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateMemberRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  memberContact: string(name='MemberContact', position='Query'),
  memberName: string(name='MemberName', position='Query'),
  memberPhone: string(name='MemberPhone', example='1381111****', position='Query'),
  memberUid: string(name='MemberUid', example='19720316234381****', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model CreateMemberResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='717534457003****'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model CreateMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMemberResponseBody(name='body'),
}

async function createMember(request: CreateMemberRequest): CreateMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMember', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCapacityInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
}

model DescribeCapacityInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    capacityQuota?: long(name='CapacityQuota', example='800000000000'),
    countQuota?: long(name='CountQuota', example='10000000'),
    memberUsedCapacity?: long(name='MemberUsedCapacity', example='70000000'),
    memberUsedCount?: long(name='MemberUsedCount', example='26666'),
    usedCapacity?: long(name='UsedCapacity', example='870000000'),
    usedCount?: long(name='UsedCount', example='30000'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCapacityInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCapacityInfoResponseBody(name='body'),
}

async function describeCapacityInfo(request: DescribeCapacityInfoRequest): DescribeCapacityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCapacityInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMPCoSAuthorizedInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  memberId: string(name='MemberId', example='717534457003****', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
}

model DescribeMPCoSAuthorizedInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    authorizedPhaseList?: [ 
      {
        phaseId?: string(name='PhaseId', example='987823074334****'),
        phaseName?: string(name='PhaseName'),
      }
    ](name='AuthorizedPhaseList'),
    unAuthorizedPhaseList?: [ 
      {
        phaseId?: string(name='PhaseId', example='987823074334****'),
        phaseName?: string(name='PhaseName'),
      }
    ](name='UnAuthorizedPhaseList'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model DescribeMPCoSAuthorizedInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMPCoSAuthorizedInfoResponseBody(name='body'),
}

async function describeMPCoSAuthorizedInfo(request: DescribeMPCoSAuthorizedInfoRequest): DescribeMPCoSAuthorizedInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMPCoSAuthorizedInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMPCoSPhaseInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  dataKey: string(name='DataKey', example='32bfce96b4e2f9bec0f2ea5cc2f14ace1486cc146d5832d3a84e5332fe89****', position='Query'),
  dataSeq?: string(name='DataSeq', example='be350cd52b0f47846f93df7d0d4febd86025ee6c028a6b22a6ff1ac6d3a2****', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
  phaseId: string(name='PhaseId', example='644208887511****', position='Query'),
}

model DescribeMPCoSPhaseInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    blockHash?: string(name='BlockHash', example='5a5c07672a4efaf609e62d921a60bf7cc0e9722a8b9608520d694520c0c4****'),
    blockNumber?: long(name='BlockNumber', example='1942'),
    dataHash?: string(name='DataHash', example='9608520d694520c0c414075a5c07672a4efaf609e62d921a60bf7cc0e972****'),
    dataValue?: string(name='DataValue'),
    iotId?: string(name='IotId', example='DFA7B98AD494FB98A491****'),
    previousHash?: string(name='PreviousHash', example='bf2cf40e5c21dc14d03eb824f99791c4d07bdaf2736e5faae508d7fb276d****'),
    productKey?: string(name='ProductKey', example='hfoi7GQ****'),
    relatedDataList?: [ 
      {
        relatedDataKey?: string(name='RelatedDataKey', example='256399502929****'),
        relatedDataSeq?: string(name='RelatedDataSeq', example='be350cd52b0f47846f93df7d0d4febd86025ee6c028a6b22a6ff1ac6d3a2****'),
        relatedPhaseDataHash?: string(name='RelatedPhaseDataHash', example='73b5c3dbc828fdf79749ff332af402036f7d591959fda00a2854a160fe66****'),
        relatedPhaseId?: string(name='RelatedPhaseId', example='987823074334****'),
        relatedPhaseName?: string(name='RelatedPhaseName'),
      }
    ](name='RelatedDataList'),
    timestamp?: long(name='Timestamp', example='1605885676000'),
    transactionHash?: string(name='TransactionHash', example='c4d07bdaf2736cc0ec0e909e60e5c21dc14d0eb823eb82f4f99791c4d07b****'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model DescribeMPCoSPhaseInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMPCoSPhaseInfoResponseBody(name='body'),
}

async function describeMPCoSPhaseInfo(request: DescribeMPCoSPhaseInfoRequest): DescribeMPCoSPhaseInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMPCoSPhaseInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMPCoSResourceInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
}

model DescribeMPCoSResourceInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    memberQuota?: long(name='MemberQuota', example='100'),
    phaseGroupQuota?: long(name='PhaseGroupQuota', example='200'),
    phaseQuotaInfoList?: [ 
      {
        phaseGroupId?: string(name='PhaseGroupId', example='383860792287****'),
        phaseGroupName?: string(name='PhaseGroupName'),
        phaseQuota?: long(name='PhaseQuota', example='5'),
        usedPhase?: long(name='UsedPhase', example='3'),
      }
    ](name='PhaseQuotaInfoList'),
    usedMember?: long(name='UsedMember', example='5'),
    usedPhaseGroup?: long(name='UsedPhaseGroup', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model DescribeMPCoSResourceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMPCoSResourceInfoResponseBody(name='body'),
}

async function describeMPCoSResourceInfo(request: DescribeMPCoSResourceInfoRequest): DescribeMPCoSResourceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMPCoSResourceInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMemberCapacityInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
}

model DescribeMemberCapacityInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      memberId?: string(name='MemberId', example='717534457003****'),
      memberName?: string(name='MemberName'),
      memberUid?: string(name='MemberUid', example='19720316234381****'),
      usedCapacity?: string(name='UsedCapacity', example='70000000'),
      usedCount?: string(name='UsedCount', example='26666'),
    }
  ](name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model DescribeMemberCapacityInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMemberCapacityInfoResponseBody(name='body'),
}

async function describeMemberCapacityInfo(request: DescribeMemberCapacityInfoRequest): DescribeMemberCapacityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMemberCapacityInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
}

model DescribeResourceInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    authorizeType?: string(name='AuthorizeType'),
    effectiveTime?: long(name='EffectiveTime', example='1586125838680'),
    expiredTime?: long(name='ExpiredTime', example='1666125838680'),
    region?: string(name='Region', example='cn-shanghai'),
    status?: string(name='Status', example='NORMAL'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model DescribeResourceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceInfoResponseBody(name='body'),
}

async function describeResourceInfo(request: DescribeResourceInfoRequest): DescribeResourceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetBlockChainInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  businessId?: string(name='BusinessId', example='000000000000000000000000000000000000000000000000000000000001****', position='Query'),
  key: string(name='Key', example='0001_HB5jyvZWzwcM****_0X**_80aa976ac4d64a97bd45c71a509d****', position='Query'),
  productKey: string(name='ProductKey', example='HB5jyvZWzwcM****', position='Query'),
}

model GetBlockChainInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model GetBlockChainInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetBlockChainInfoResponseBody(name='body'),
}

async function getBlockChainInfo(request: GetBlockChainInfoRequest): GetBlockChainInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBlockChainInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetDataRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  businessId?: string(name='BusinessId', example='000000000000000000000000000000000000000000000000000000000001****', position='Query'),
  key: string(name='Key', example='HB5jyvZWzw******', position='Query'),
  productKey: string(name='ProductKey', example='0001_HB5jyvZWzwcMFSFg_0X58_80aa976ac4d64a97b******a509d4c0b', position='Query'),
}

model GetDataResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model GetDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataResponseBody(name='body'),
}

async function getData(request: GetDataRequest): GetDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetData', 'POST', '/', 'json', false, 'json', request);
}

model GetDataModelConfigInfoRequest {
  apiVersion?: string(name='ApiVersion', example='1.0.0', position='Query'),
  dataModelCode: string(name='DataModelCode', example='DF3K', position='Query'),
  productKey?: string(name='ProductKey', example='HB5jyvZWzwcM****', position='Query'),
}

model GetDataModelConfigInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='{}'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='RequestID-1638240165139'),
  success?: boolean(name='Success', example='true'),
}

model GetDataModelConfigInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataModelConfigInfoResponseBody(name='body'),
}

async function getDataModelConfigInfo(request: GetDataModelConfigInfoRequest): GetDataModelConfigInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataModelConfigInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetHistoryDataCountRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  endTime?: long(name='EndTime', example='1608019800000', minimum=0, maximum=9594629196518, position='Query'),
  key: string(name='Key', example='0001_HB5jyvZWzwcM****_0X**_80aa976ac4d64a97bd45c71a509d****', position='Query'),
  productKey: string(name='ProductKey', example='HB5jyvZWzwcM****', position='Query'),
  startTime?: long(name='StartTime', example='1608010000000', minimum=0, maximum=9594629196518, position='Query'),
}

model GetHistoryDataCountResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='10'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model GetHistoryDataCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoryDataCountResponseBody(name='body'),
}

async function getHistoryDataCount(request: GetHistoryDataCountRequest): GetHistoryDataCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistoryDataCount', 'POST', '/', 'json', false, 'json', request);
}

model GetHistoryDataListRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', minimum=0, maximum=10000000, position='Query'),
  endTime?: long(name='EndTime', example='1608019800000', minimum=0, maximum=9594629196518, position='Query'),
  key: string(name='Key', example='0001_HB5jyvZWzwcM****_0X**_80aa976ac4d64a97bd45c71a509d****', position='Query'),
  pageSize: int32(name='PageSize', example='2', minimum=1, maximum=100, position='Query'),
  productKey: string(name='ProductKey', example='HB5jyvZWzwcM****', position='Query'),
  startTime?: long(name='StartTime', example='1608010000000', minimum=0, maximum=9594629196518, position='Query'),
}

model GetHistoryDataListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    data?: [  map[string]any ](name='Data')
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model GetHistoryDataListResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoryDataListResponseBody(name='body'),
}

async function getHistoryDataList(request: GetHistoryDataListRequest): GetHistoryDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistoryDataList', 'POST', '/', 'json', false, 'json', request);
}

model ListDependentDataModelsRequest {
  apiVersion?: string(name='ApiVersion', example='1.0.0', position='Query'),
  productKey?: string(name='ProductKey', example='HB5jyvZWzwcM****', position='Query'),
}

model ListDependentDataModelsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    dataModelInfo?: [ 
    {
      dataModelCode?: string(name='DataModelCode', example='KI8D'),
      dataModelName?: string(name='DataModelName'),
    }
  ](name='DataModelInfo')
  }(name='Data', example='{}'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='RequestID-1638239980855'),
  success?: boolean(name='Success', example='true'),
}

model ListDependentDataModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDependentDataModelsResponseBody(name='body'),
}

async function listDependentDataModels(request: ListDependentDataModelsRequest): ListDependentDataModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDependentDataModels', 'POST', '/', 'json', false, 'json', request);
}

model ListDeviceRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  deviceGroupId: string(name='DeviceGroupId', example='475020454741****', position='Query'),
  iotId?: string(name='IotId', example='183329761572****', position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  size: int32(name='Size', example='2', minimum=1, maximum=2147483647, position='Query'),
}

model ListDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        deviceId?: string(name='DeviceId', example='876055554040****'),
        iotId?: string(name='IotId', example='183329761572****'),
        lastSaveTime?: long(name='LastSaveTime', example='1606379090866'),
        status?: string(name='Status', example='AUTHORIZED'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='2'),
    total?: int32(name='Total', example='30'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceResponseBody(name='body'),
}

async function listDevice(request: ListDeviceRequest): ListDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListDeviceGroupRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  productKey?: string(name='ProductKey', example='hKpHMh2****', position='Query'),
  size: int32(name='Size', example='2', minimum=1, maximum=2147483647, position='Query'),
}

model ListDeviceGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        authorizeType?: string(name='AuthorizeType', example='ID2'),
        deviceGroupId?: string(name='DeviceGroupId', example='577187700697****'),
        ownerName?: string(name='OwnerName'),
        ownerUid?: string(name='OwnerUid', example='19720316234381****'),
        productKey?: string(name='ProductKey', example='hKpHMh2****'),
        remark?: string(name='Remark'),
        status?: string(name='Status', example='AUTHORIZED'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='2'),
    total?: int32(name='Total', example='30'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceGroupResponseBody(name='body'),
}

async function listDeviceGroup(request: ListDeviceGroupRequest): ListDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListMPCoSPhaseRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  name?: string(name='Name', position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='987823074334****', position='Query'),
  size: int32(name='Size', example='1', minimum=1, maximum=2147483647, position='Query'),
}

model ListMPCoSPhaseResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        accessPermission?: int32(name='AccessPermission', example='1'),
        name?: string(name='Name'),
        phaseId?: string(name='PhaseId', example='196487512811****'),
        remark?: string(name='Remark'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='1'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListMPCoSPhaseResponse = {
  headers: map[string]string(name='headers'),
  body: ListMPCoSPhaseResponseBody(name='body'),
}

async function listMPCoSPhase(request: ListMPCoSPhaseRequest): ListMPCoSPhaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMPCoSPhase', 'POST', '/', 'json', false, 'json', request);
}

model ListMPCoSPhaseGroupRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  name?: string(name='Name', position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  size: int32(name='Size', example='2', minimum=1, maximum=2147483647, position='Query'),
}

model ListMPCoSPhaseGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        name?: string(name='Name'),
        phaseGroupId?: string(name='PhaseGroupId', example='987823074334****'),
        remark?: string(name='Remark'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='1'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListMPCoSPhaseGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListMPCoSPhaseGroupResponseBody(name='body'),
}

async function listMPCoSPhaseGroup(request: ListMPCoSPhaseGroupRequest): ListMPCoSPhaseGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMPCoSPhaseGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListMPCoSPhaseHistoryRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  dataKey: string(name='DataKey', example='32bfce96b4e2f9bec0f2ea5cc2f14ace1486cc146d5832d3a84e5332fe89****', position='Query'),
  endTime: long(name='EndTime', example='1606389090866', minimum=0, maximum=9223372036854775807, position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
  phaseId: string(name='PhaseId', example='644208887511****', position='Query'),
  size: int32(name='Size', example='2', minimum=1, maximum=2147483647, position='Query'),
  startTime: long(name='StartTime', example='1606379090866', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListMPCoSPhaseHistoryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        blockHash?: string(name='BlockHash', example='5a5c07672a4efaf609e62d921a60bf7cc0e9722a8b9608520d694520c0c4****'),
        blockNumber?: long(name='BlockNumber', example='9852'),
        dataHash?: string(name='DataHash', example='9608520d694520c0c414075a5c07672a4efaf609e62d921a60bf7cc0e972****'),
        dataSeq?: string(name='DataSeq', example='be350cd52b0f47846f93df7d0d4febd86025ee6c028a6b22a6ff1ac6d3a2****'),
        dataValue?: string(name='DataValue'),
        iotId?: string(name='IotId', example='DFA7B98AD494FB98A491****'),
        previousHash?: string(name='PreviousHash', example='2d921a60bf7cc0e9722a8bcc0e909e62d92120c0c749ff332af402036f7d****'),
        productKey?: string(name='ProductKey', example='hfoi7GQ****'),
        timestamp?: long(name='Timestamp', example='1606389620000'),
        transactionHash?: string(name='TransactionHash', example='bf2cf40e5c21dc14d03eb824f99791c4d07bdaf2736e5faae508d7fb276d****'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='2'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListMPCoSPhaseHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListMPCoSPhaseHistoryResponseBody(name='body'),
}

async function listMPCoSPhaseHistory(request: ListMPCoSPhaseHistoryRequest): ListMPCoSPhaseHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMPCoSPhaseHistory', 'POST', '/', 'json', false, 'json', request);
}

model ListMemberRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  memberUid?: string(name='MemberUid', example='19720316234381****', position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  size: int32(name='Size', example='2', minimum=1, maximum=2147483647, position='Query'),
}

model ListMemberResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        memberContact?: string(name='MemberContact'),
        memberId?: string(name='MemberId', example='717534457003****'),
        memberName?: string(name='MemberName'),
        memberPhone?: string(name='MemberPhone', example='1381111****'),
        memberUid?: string(name='MemberUid', example='19720316234381****'),
        remark?: string(name='Remark'),
        status?: string(name='Status', example='UNLOCK'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='2'),
    total?: int32(name='Total', example='30'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListMemberResponse = {
  headers: map[string]string(name='headers'),
  body: ListMemberResponseBody(name='body'),
}

async function listMember(request: ListMemberRequest): ListMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMember', 'POST', '/', 'json', false, 'json', request);
}

model ListMultiPartyCollaborationChainRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  name?: string(name='Name', position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  size: int32(name='Size', example='1', minimum=1, maximum=2147483647, position='Query'),
}

model ListMultiPartyCollaborationChainResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        bizChainId?: string(name='BizChainId', example='489973087549****'),
        name?: string(name='Name'),
        remark?: string(name='Remark'),
        roleType?: string(name='RoleType', example='ADMIN'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='1'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListMultiPartyCollaborationChainResponse = {
  headers: map[string]string(name='headers'),
  body: ListMultiPartyCollaborationChainResponseBody(name='body'),
}

async function listMultiPartyCollaborationChain(request: ListMultiPartyCollaborationChainRequest): ListMultiPartyCollaborationChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMultiPartyCollaborationChain', 'POST', '/', 'json', false, 'json', request);
}

model ListPSMemberDataTypeCodeRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  memberUid?: string(name='MemberUid', example='19720316234381****', position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  size: int32(name='Size', example='2', minimum=1, maximum=2147483647, position='Query'),
}

model ListPSMemberDataTypeCodeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        dataTypeCode?: string(name='DataTypeCode', example='E***'),
        memberId?: string(name='MemberId', example='717534457003****'),
        memberName?: string(name='MemberName'),
        memberUid?: string(name='MemberUid', example='19720316234381****'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='2'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListPSMemberDataTypeCodeResponse = {
  headers: map[string]string(name='headers'),
  body: ListPSMemberDataTypeCodeResponseBody(name='body'),
}

async function listPSMemberDataTypeCode(request: ListPSMemberDataTypeCodeRequest): ListPSMemberDataTypeCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPSMemberDataTypeCode', 'POST', '/', 'json', false, 'json', request);
}

model ListProofChainRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  name?: string(name='Name', position='Query'),
  num: int32(name='Num', example='1', minimum=1, maximum=2147483647, position='Query'),
  size: int32(name='Size', example='2', minimum=1, maximum=2147483647, position='Query'),
}

model ListProofChainResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    num?: int32(name='Num', example='1'),
    pageData?: [ 
      {
        bizChainCode?: string(name='BizChainCode', example='SA7z9XkBMVPg****'),
        bizChainId?: string(name='BizChainId', example='489973087549****'),
        dataTypeCode?: string(name='DataTypeCode', example='B***'),
        name?: string(name='Name'),
        remark?: string(name='Remark'),
        roleType?: string(name='RoleType', example='ADMIN'),
      }
    ](name='PageData'),
    size?: int32(name='Size', example='2'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ListProofChainResponse = {
  headers: map[string]string(name='headers'),
  body: ListProofChainResponseBody(name='body'),
}

async function listProofChain(request: ListProofChainRequest): ListProofChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProofChain', 'POST', '/', 'json', false, 'json', request);
}

model LockMemberRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  memberId: string(name='MemberId', example='717534457003****', position='Query'),
}

model LockMemberResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model LockMemberResponse = {
  headers: map[string]string(name='headers'),
  body: LockMemberResponseBody(name='body'),
}

async function lockMember(request: LockMemberRequest): LockMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockMember', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMPCoSPhaseRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  name: string(name='Name', position='Query'),
  phaseId: string(name='PhaseId', example='196487512811****', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model ModifyMPCoSPhaseResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ModifyMPCoSPhaseResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMPCoSPhaseResponseBody(name='body'),
}

async function modifyMPCoSPhase(request: ModifyMPCoSPhaseRequest): ModifyMPCoSPhaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMPCoSPhase', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMPCoSPhaseGroupRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  name: string(name='Name', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='987823074334****', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model ModifyMPCoSPhaseGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ModifyMPCoSPhaseGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMPCoSPhaseGroupResponseBody(name='body'),
}

async function modifyMPCoSPhaseGroup(request: ModifyMPCoSPhaseGroupRequest): ModifyMPCoSPhaseGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMPCoSPhaseGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMemberRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  memberContact: string(name='MemberContact', position='Query'),
  memberId: string(name='MemberId', example='717534457003****', position='Query'),
  memberName: string(name='MemberName', position='Query'),
  memberPhone: string(name='MemberPhone', example='1381111****', position='Query'),
  memberUid: string(name='MemberUid', example='19720316234381****', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model ModifyMemberResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model ModifyMemberResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMemberResponseBody(name='body'),
}

async function modifyMember(request: ModifyMemberRequest): ModifyMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMember', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDeviceGroupRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  authorizeType: string(name='AuthorizeType', example='ID2', position='Query'),
  bizChainId: string(name='BizChainId', example='981184817831****', position='Query'),
  deviceGroupName: string(name='DeviceGroupName', position='Query'),
  productKey: string(name='ProductKey', example='hKpHMh2****', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model RegisterDeviceGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='256399502929****'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model RegisterDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceGroupResponseBody(name='body'),
}

async function registerDeviceGroup(request: RegisterDeviceGroupRequest): RegisterDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetDataRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  key: string(name='Key', example='0001_HB5jyvZWzwcMFSFg_0X58_80aa976ac4d64a97b******a509d4c0b', position='Query'),
  productKey: string(name='ProductKey', example='HB5jyvZWz******g', position='Query'),
  value: string(name='Value', position='Query'),
}

model SetDataResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model SetDataResponse = {
  headers: map[string]string(name='headers'),
  body: SetDataResponseBody(name='body'),
}

async function setData(request: SetDataRequest): SetDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetData', 'POST', '/', 'json', false, 'json', request);
}

model SetDataWithSignatureRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  iotAuthType: string(name='IotAuthType', example='ID2', position='Query'),
  iotDataDigest: string(name='IotDataDigest', example='31A200471049AEA3B8459455B4447D05DD1290A875A17792F71D5550F048****', position='Query'),
  iotId: string(name='IotId', example='00CCCC098D98F2BDD8BB****', position='Query'),
  iotIdServiceProvider: string(name='IotIdServiceProvider', example='kKpACh5****', position='Query'),
  iotIdSource: string(name='IotIdSource', example='2', position='Query'),
  iotSignature: string(name='IotSignature', example='3~2~010253040257****~1599722505821~50sZwIXt9jtTTIoGAkEs4THSyCMghVVaYO1w2AcvQf0vm51MQYt0nfHUT7jQ****', position='Query'),
  key: string(name='Key', example='0001_HB5jyvZWzwcMFSFg_0X58_80aa976ac4d64a97bd45c71a509d****', position='Query'),
  productKey: string(name='ProductKey', example='HB5jyvZWzwcM****', position='Query'),
  value: string(name='Value', position='Query'),
}

model SetDataWithSignatureResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model SetDataWithSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: SetDataWithSignatureResponseBody(name='body'),
}

async function setDataWithSignature(request: SetDataWithSignatureRequest): SetDataWithSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDataWithSignature', 'POST', '/', 'json', false, 'json', request);
}

model UnAuthorizeDeviceRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  deviceGroupId: string(name='DeviceGroupId', example='475020454741****', position='Query'),
  deviceId: string(name='DeviceId', example='654887879557****', position='Query'),
}

model UnAuthorizeDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model UnAuthorizeDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnAuthorizeDeviceResponseBody(name='body'),
}

async function unAuthorizeDevice(request: UnAuthorizeDeviceRequest): UnAuthorizeDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnAuthorizeDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnAuthorizeDeviceGroupRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  deviceGroupId: string(name='DeviceGroupId', example='475020454741****', position='Query'),
}

model UnAuthorizeDeviceGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model UnAuthorizeDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UnAuthorizeDeviceGroupResponseBody(name='body'),
}

async function unAuthorizeDeviceGroup(request: UnAuthorizeDeviceGroupRequest): UnAuthorizeDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnAuthorizeDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model UnLockMemberRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  memberId: string(name='MemberId', example='717534457003****', position='Query'),
}

model UnLockMemberResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model UnLockMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UnLockMemberResponseBody(name='body'),
}

async function unLockMember(request: UnLockMemberRequest): UnLockMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnLockMember', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMPCoSAuthorizedInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  authorizedPhaseList: map[string]any(name='AuthorizedPhaseList', example='["196487512811****","196487512812****"]', shrink='json', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  memberId: string(name='MemberId', example='717534457003****', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
}

model UpdateMPCoSAuthorizedInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model UpdateMPCoSAuthorizedInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMPCoSAuthorizedInfoResponseBody(name='body'),
}

async function updateMPCoSAuthorizedInfo(request: UpdateMPCoSAuthorizedInfoRequest): UpdateMPCoSAuthorizedInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMPCoSAuthorizedInfo', 'POST', '/', 'json', false, 'json', request);
}

model UploadMPCoSPhaseDigestInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  dataKey: string(name='DataKey', example='32bfce96b4e2f9bec0f2ea5cc2f14ace1486cc146d5832d3a84e5332fe89****', position='Query'),
  dataSeq?: string(name='DataSeq', example='be350cd52b0f47846f93df7d0d4febd86025ee6c028a6b22a6ff1ac6d3a2****', position='Query'),
  phaseData: string(name='PhaseData', example='dee68c73bdead5f717fc25803236924c165d0a3c1728aa58cbf05b1473c2****', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
  phaseId: string(name='PhaseId', example='644208887511***', position='Query'),
  relatedDataList?: map[string]any(name='RelatedDataList', shrink='json', position='Query'),
}

model UploadMPCoSPhaseDigestInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model UploadMPCoSPhaseDigestInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UploadMPCoSPhaseDigestInfoResponseBody(name='body'),
}

async function uploadMPCoSPhaseDigestInfo(request: UploadMPCoSPhaseDigestInfoRequest): UploadMPCoSPhaseDigestInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadMPCoSPhaseDigestInfo', 'POST', '/', 'json', false, 'json', request);
}

model UploadMPCoSPhaseDigestInfoByDeviceRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  dataKey: string(name='DataKey', example='32bfce96b4e2f9bec0f2ea5cc2f14ace1486cc146d5832d3a84e5332fe89****', position='Query'),
  dataSeq?: string(name='DataSeq', example='be350cd52b0f47846f93df7d0d4febd86025ee6c028a6b22a6ff1ac6d3a2****', position='Query'),
  iotAuthType: string(name='IotAuthType', example='ID2', position='Query'),
  iotDataDigest: string(name='IotDataDigest', example='94894989498FDDABD51698BD1A49BF1AFB0AA94FAA8DB65A689164BEED******', position='Query'),
  iotId: string(name='IotId', example='183329761572****', position='Query'),
  iotIdServiceProvider: string(name='IotIdServiceProvider', example='g9R4ghe****', position='Query'),
  iotIdSource: string(name='IotIdSource', example='2', position='Query'),
  iotSignature: string(name='IotSignature', example='2~2~192ADFB498AA****~1579198300000~J8E891NAgAhwHBHm8******/hnswr698HSb09ahS8709bn9s03jg98u4jg******', position='Query'),
  phaseData: string(name='PhaseData', example='ebf44d78ae75288d7d0057a5ebf44d78a6b86d04502dcbda643c4d24ff2a****', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
  phaseId: string(name='PhaseId', example='644208887511****', position='Query'),
  relatedDataList?: map[string]any(name='RelatedDataList', shrink='json', position='Query'),
}

model UploadMPCoSPhaseDigestInfoByDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model UploadMPCoSPhaseDigestInfoByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UploadMPCoSPhaseDigestInfoByDeviceResponseBody(name='body'),
}

async function uploadMPCoSPhaseDigestInfoByDevice(request: UploadMPCoSPhaseDigestInfoByDeviceRequest): UploadMPCoSPhaseDigestInfoByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadMPCoSPhaseDigestInfoByDevice', 'POST', '/', 'json', false, 'json', request);
}

model UploadMPCoSPhaseTextInfoRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  dataKey: string(name='DataKey', example='32bfce96b4e2f9bec0f2ea5cc2f14ace1486cc146d5832d3a84e5332fe89****', position='Query'),
  dataSeq?: string(name='DataSeq', example='be350cd52b0f47846f93df7d0d4febd86025ee6c028a6b22a6ff1ac6d3a2****', position='Query'),
  phaseData: string(name='PhaseData', example='987823074334****', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='383860792287****', position='Query'),
  phaseId: string(name='PhaseId', example='196487512811****', position='Query'),
  relatedDataList?: map[string]any(name='RelatedDataList', shrink='json', position='Query'),
}

model UploadMPCoSPhaseTextInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model UploadMPCoSPhaseTextInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UploadMPCoSPhaseTextInfoResponseBody(name='body'),
}

async function uploadMPCoSPhaseTextInfo(request: UploadMPCoSPhaseTextInfoRequest): UploadMPCoSPhaseTextInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadMPCoSPhaseTextInfo', 'POST', '/', 'json', false, 'json', request);
}

model UploadMPCoSPhaseTextInfoByDeviceRequest {
  apiVersion: string(name='ApiVersion', example='1.0.0', position='Query'),
  bizChainId: string(name='BizChainId', example='489973087549****', position='Query'),
  dataKey: string(name='DataKey', example='32bfce96b4e2f9bec0f2ea5cc2f14ace1486cc146d5832d3a84e5332fe89****', position='Query'),
  dataSeq?: string(name='DataSeq', example='be350cd52b0f47846f93df7d0d4febd86025ee6c028a6b22a6ff1ac6d3a2****', position='Query'),
  iotAuthType: string(name='IotAuthType', example='ID2', position='Query'),
  iotDataDigest: string(name='IotDataDigest', example='94894989498FDDABD51698BD1A49BF1AFB0AA94FAA8DB65A689164BEED******', position='Query'),
  iotId: string(name='IotId', example='183329761572****', position='Query'),
  iotIdServiceProvider: string(name='IotIdServiceProvider', example='94894989498FDDABD51698BD1A49BF1AFB0AA94FAA8DB65A689164BEED******', position='Query'),
  iotIdSource: string(name='IotIdSource', example='2', position='Query'),
  iotSignature: string(name='IotSignature', example='2~2~192ADFB498AA****~1579198300000~J8E891NAgAhwHBHm8******/hnswr698HSb09ahS8709bn9s03jg98u4jg******', position='Query'),
  phaseData: string(name='PhaseData', position='Query'),
  phaseGroupId: string(name='PhaseGroupId', example='987823074334****', position='Query'),
  phaseId: string(name='PhaseId', example='644208887511****', position='Query'),
  relatedDataList?: map[string]any(name='RelatedDataList', shrink='json', position='Query'),
}

model UploadMPCoSPhaseTextInfoByDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='The system is busy. Please try again later.'),
  requestId?: string(name='RequestId', example='D5C69894-9709-4653-B3D8-25234034C2FC'),
  success?: boolean(name='Success', example='true'),
}

model UploadMPCoSPhaseTextInfoByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UploadMPCoSPhaseTextInfoByDeviceResponseBody(name='body'),
}

async function uploadMPCoSPhaseTextInfoByDevice(request: UploadMPCoSPhaseTextInfoByDeviceRequest): UploadMPCoSPhaseTextInfoByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadMPCoSPhaseTextInfoByDevice', 'POST', '/', 'json', false, 'json', request);
}

