/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ims';
  @version = '2019-08-15';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddClientIdToOIDCProviderRequest {
  clientId?: string(name='ClientId', description='The client ID that you want to add.

The client ID can contain letters, digits, and special characters and cannot start with the special characters. The special characters are `periods, (.), hyphens (-), underscores (_), colons (:), and forward slashes (/)`.``

The client ID can be up to 128 characters in length.', example='598469743454717****', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider', position='Query'),
}

model AddClientIdToOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the OIDC IdP.', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', description='The ID of the client. If multiple client IDs are returned, the client IDs are separated by commas (,).', example='498469743454717****,598469743454717****'),
    createDate?: string(name='CreateDate', description='The time when the OIDC IdP was created. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', description='The description of the OIDC IdP.', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS certificate. If multiple fingerprints are returned, the fingerprints are separated by commas (,).', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', description='The timestamp when the OIDC IdP was created.', example='1636613763000'),
    gmtModified?: string(name='GmtModified', description='The timestamp when the OIDC IdP was modified.', example='1636706309000'),
    issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='12'),
    issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer.', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', description='The time when the OIDC IdP was modified. The time is displayed in UTC.', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider', description='The information about the OIDC IdP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B49B8FA7-87FC-5308-AE75-5EC9E36C360A'),
}

model AddClientIdToOIDCProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddClientIdToOIDCProviderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddClientIdToOIDCProvider  AddClientIdToOIDCProviderRequest
  * @return AddClientIdToOIDCProviderResponse
 */
async function addClientIdToOIDCProvider(request: AddClientIdToOIDCProviderRequest): AddClientIdToOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddClientIdToOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model AddFingerprintToOIDCProviderRequest {
  fingerprint?: string(name='Fingerprint', description='The fingerprint of the HTTPS CA certificate.

The fingerprint can contain letters and digits.

The fingerprint can be up to 128 characters in length.', example='902ef2deeb3c5b13ea4c3d5193629309e231****', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider', position='Query'),
}

model AddFingerprintToOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the OIDC IdP.', example='acs:ram::177242285274****:oidc-provider/OIDCProvider'),
    clientIds?: string(name='ClientIds', description='The ID of the client. If multiple client IDs are returned, the client IDs are separated by commas (,).', example='498469743454717****'),
    createDate?: string(name='CreateDate', description='The time when the OIDC IdP was created. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', description='The description of the OIDC IdP.', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS certificate. If multiple fingerprints are returned, the fingerprints are separated by commas (,).', example='502ef2deeb3c5b13ea4c3d5193629309e231****,902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', description='The timestamp when the OIDC IdP was created.', example='1636613763000'),
    gmtModified?: string(name='GmtModified', description='The timestamp when the OIDC IdP was modified.', example='1636706309000'),
    issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='12'),
    issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer.', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', description='The time when the OIDC IdP was modified. The time is displayed in UTC.', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider', description='The name of the OIDC IdP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B809BBC-0E78-544A-A91A-648926412E3E'),
}

model AddFingerprintToOIDCProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFingerprintToOIDCProviderResponseBody(name='body'),
}

/**
  * @description ###
  * This topic provides an example on how to add the fingerprint `902ef2deeb3c5b13ea4c3d5193629309e231****` to the OIDC IdP named `TestOIDCProvider`.
  * @param request  the request parameters of AddFingerprintToOIDCProvider  AddFingerprintToOIDCProviderRequest
  * @return AddFingerprintToOIDCProviderResponse
 */
async function addFingerprintToOIDCProvider(request: AddFingerprintToOIDCProviderRequest): AddFingerprintToOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFingerprintToOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model AddUserToGroupRequest {
  groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Test-Team', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model AddUserToGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model AddUserToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserToGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserToGroup  AddUserToGroupRequest
  * @return AddUserToGroupResponse
 */
async function addUserToGroup(request: AddUserToGroupRequest): AddUserToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToGroup', 'POST', '/', 'json', false, 'json', request);
}

model BindMFADeviceRequest {
  authenticationCode1?: string(name='AuthenticationCode1', description='The first verification code.

>  You can call the [CreateVirtualMFADevice](https://help.aliyun.com/document_detail/186179.html) operation to create an MFA device and generate a key (value of `Base32StringSeed`). Then, use the key on the Alibaba Cloud app to manually add an MFA device, and obtain the two consecutive verification codes.', example='123456', position='Query'),
  authenticationCode2?: string(name='AuthenticationCode2', description='The second verification code.

>  You can call the [CreateVirtualMFADevice](https://help.aliyun.com/document_detail/186179.html) operation to create an MFA device and generate a key (value of `Base32StringSeed`). Then, use the key on the Alibaba Cloud app to manually add an MFA device, and obtain the two consecutive verification codes.', example='654321', position='Query'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the MFA device.

>  You can call the [CreateVirtualMFADevice](https://help.aliyun.com/document_detail/186179.html) operation to obtain the serial number of the MFA device.', example='acs:ram::177242285274****:mfa/device001', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model BindMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model BindMFADeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindMFADeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindMFADevice  BindMFADeviceRequest
  * @return BindMFADeviceResponse
 */
async function bindMFADevice(request: BindMFADeviceRequest): BindMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model ChangePasswordRequest {
  newPassword: string(name='NewPassword', description='The new password that is used to log on to the console.

The password must meet the complexity requirements. For more information, see [GetPasswordPolicy](https://help.aliyun.com/document_detail/186691.html).

This parameter is required.', example='newpassword', position='Query'),
  oldPassword: string(name='OldPassword', description='The old password that is used to log on to the console.

This parameter is required.', example='mypassword', position='Query'),
}

model ChangePasswordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model ChangePasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangePasswordResponseBody(name='body'),
}

/**
  * @description >  This operation is available only for RAM users. Before you call this operation, make sure that `AllowUserToChangePassword` in [SetSecurityPreference](https://help.aliyun.com/document_detail/43765.html) is set to `True`. The value True indicates that RAM users can manage their passwords.
  * @param request  the request parameters of ChangePassword  ChangePasswordRequest
  * @return ChangePasswordResponse
 */
async function changePassword(request: ChangePasswordRequest): ChangePasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangePassword', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccessKeyRequest {
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.

If this parameter is empty, an AccessKey pair is created for the current user.', example='test@example.onaliyun.com', position='Query'),
}

model CreateAccessKeyResponseBody = {
  accessKey?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID.', example='yourAccessKeyID'),
    accessKeySecret?: string(name='AccessKeySecret', description='The AccessKey secret.', example='yourAccessKeySecret'),
    createDate?: string(name='CreateDate', description='The time when the AccessKey pair was created.', example='2020-10-15T08:08:54Z'),
    status?: string(name='Status', description='The status of the AccessKey pair. Valid values:

*   Active
*   Inactive', example='Active'),
  }(name='AccessKey', description='The information about the AccessKey pair.'),
  requestId?: string(name='RequestId', description='The request ID.', example='19DDD9F7-AFCC-4D72-8CBA-CCE5A142E7AB'),
}

model CreateAccessKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccessKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccessKey  CreateAccessKeyRequest
  * @return CreateAccessKeyResponse
 */
async function createAccessKey(request: CreateAccessKeyRequest): CreateAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppSecretRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='472457090344041****', position='Query'),
}

model CreateAppSecretResponseBody = {
  appSecret?: {
    appId?: string(name='AppId', description='The ID of the application.', example='472457090344041****'),
    appSecretId?: string(name='AppSecretId', description='The ID of the application secret.', example='2efd5004-005c-4f05-83c6-5b1dd176****'),
    appSecretValue?: string(name='AppSecretValue', description='The content of the application secret. This value can be used as the client secret for open authorization (OAuth).', example='ai78ZmmxnlUG1jXlBZRDFKos9DIjY4m17Q7dCpMwn1rqXsTGb1X1XmrmveMp****'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-26T02:52:31Z'),
  }(name='AppSecret', description='The details of the application secret.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE46FC3C-3BDE-4771-B531-27B7B6EB533D'),
}

model CreateAppSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppSecret  CreateAppSecretRequest
  * @return CreateAppSecretResponse
 */
async function createAppSecret(request: CreateAppSecretRequest): CreateAppSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppSecret', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  accessTokenValidity?: int32(name='AccessTokenValidity', description='The validity period of the access token.

Valid values: 900 to 10800. Unit: seconds.

Default value: 3600.', example='3600', position='Query'),
  appName?: string(name='AppName', description='The application name.

The name can be up to 64 characters in length. The name can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='myapp', position='Query'),
  appType: string(name='AppType', description='The type of the application. Valid values:

*   WebApp: a web application that interacts with a browser.
*   NativeApp: a native application that runs on an operating system, such as a desktop operating system or a mobile operating system.
*   ServerApp: an application that accesses Alibaba Cloud services without the need of manual user logon. User provisioning is automated based on the System for Cross-Domain Identity Management (SCIM) protocol.

This parameter is required.', example='WebApp', position='Query'),
  displayName: string(name='DisplayName', description='The display name of the application.

The name can be up to 24 characters in length.

This parameter is required.', example='myapp', position='Query'),
  isMultiTenant?: boolean(name='IsMultiTenant', description='Indicates whether the application can be installed by using other Alibaba Cloud accounts. Valid values:

*   true: If you do not set this parameter for applications of the NativeApp and ServerApp types, true is used.
*   false: If you do not set this parameter for applications of the WebApp type, false is used.', example='false', position='Query'),
  predefinedScopes?: string(name='PredefinedScopes', description='The scope of application permissions.

For more information about the application permission scope, see [Open authorization scope](https://help.aliyun.com/document_detail/93693.html). You can also call the [ListPredefinedScopes](https://help.aliyun.com/document_detail/187206.html) operation to query the permissions that are supported by different types of applications.

If you enter multiple permission scopes, separate them with semicolons (;).', example='aliuid', position='Query'),
  protocolVersion?: string(name='ProtocolVersion', position='Query'),
  redirectUris?: string(name='RedirectUris', description='The callback URL.

If you enter multiple callback URLs, separate them with semicolons (;).', example='https://www.example.com', position='Query'),
  refreshTokenValidity?: int32(name='RefreshTokenValidity', description='The validity period of the refreshed token.

Valid values: 7200 to 31536000. Unit: seconds.

Default value:

*   For applications of the WebApp and ServerApp types, if this parameter is left empty, the value 2592000 is used. The value 2592000 indicates that the validity period of the refreshed token is 30 days.
*   For applications of the NativeApp type, if this parameter is left empty, the value 7776000 is used. The value 7776000 indicates that the validity period of the refreshed token is 90 days.', example='2592000', position='Query'),
  requiredScopes?: string(name='RequiredScopes', description='The required permission.

You can specify one or more permissions for the `RequiredScopes` parameter. After you specify this parameter, the required permissions are automatically selected and cannot be revoked when a user grants permissions on the application.

If you enter multiple permission scopes, separate them with semicolons (;).

>  If the permission that you specify for the `RequiredScopes` parameter is not included in the value of the `PredefinedScopes` parameter, the permission does not take effect.', example='aliuid;profile', position='Query'),
  secretRequired?: boolean(name='SecretRequired', description='Indicates whether a secret is required. Valid values:

*   true
*   false

>- For applications of the WebApp and ServerApp types, this parameter is automatically set to true and cannot be changed.
>- For applications of the NativeApp type, this parameter can be set to true or false. If you do not set this parameter, false is used. Applications of the NativeApp type run in untrusted environments and the secrets of these applications are not protected. Therefore, we recommend that you do not set this parameter to true unless otherwise specified. For more information, see [Use an application of the NativeApp type to log on to Alibaba Cloud](https://help.aliyun.com/document_detail/93697.html).', example='true', position='Query'),
}

model CreateApplicationResponseBody = {
  application?: {
    accessTokenValidity?: int32(name='AccessTokenValidity', description='The validity period of the access token. Unit: seconds.', example='3600'),
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the application belongs.', example='177242285274****'),
    appId?: string(name='AppId', description='The ID of the application.', example='472457090344041****'),
    appName?: string(name='AppName', description='The application name.', example='myapp'),
    appType?: string(name='AppType', description='The application type.', example='WebApp'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-23T08:06:57Z'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description', description='The description of the permission.', example='Obtain the OpenID of the user. This is the default permission that you cannot remove.'),
          name?: string(name='Name', description='The name of the permission.', example='openid'),
          required?: boolean(name='Required', description='Indicates whether the permission is automatically selected by default when you install the application. Valid values:

*   true
*   false

`openid` is required by default.', example='true'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes', description='The information about the permissions that are granted on the application.'),
    }(name='DelegatedScope', description='The information about the permissions that are granted on the application.'),
    displayName?: string(name='DisplayName', description='The display name of the application.', example='myapp'),
    isMultiTenant?: boolean(name='IsMultiTenant', description='Indicates whether the application can be installed by using other Alibaba Cloud accounts.', example='true'),
    protocolVersion?: string(name='ProtocolVersion'),
    redirectUris?: {
      redirectUri?: [ string ](name='RedirectUri')
    }(name='RedirectUris', description='The callback URLs.'),
    refreshTokenValidity?: int32(name='RefreshTokenValidity', description='The validity period of the refresh token. Unit: seconds.', example='7776000'),
    secretRequired?: boolean(name='SecretRequired', description='Indicates whether a secret is required.', example='true'),
    updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-23T08:06:57Z'),
  }(name='Application', description='The information about the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6616F09B-2768-4C11-8866-A8EE4C4A583E'),
}

model CreateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApplication  CreateApplicationRequest
  * @return CreateApplicationResponse
 */
async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupRequest {
  comments?: string(name='Comments', description='The description.

The description can be up to 128 characters in length.', example='Dev-Team', position='Query'),
  displayName?: string(name='DisplayName', description='The display name of the RAM user group.

The name can be up to 24 characters in length.', example='Dev-Team', position='Query'),
  groupName?: string(name='GroupName', description='The name of the RAM user group. You must specify this parameter.

The name can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='Dev-Team', position='Query'),
}

model CreateGroupResponseBody = {
  group?: {
    comments?: string(name='Comments', description='The description.', example='Dev-Team'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-19T16:15:17Z'),
    displayName?: string(name='DisplayName', description='The display name of the RAM user group.', example='Dev-Team'),
    groupId?: string(name='GroupId', description='The ID of the RAM user group.', example='740317625433843****'),
    groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Dev-Team'),
    updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-19T16:15:17Z'),
  }(name='Group', description='The information about the RAM user group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3C38192B-7BF8-45DA-8F0A-E670EA51426C'),
}

model CreateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGroup  CreateGroupRequest
  * @return CreateGroupResponse
 */
async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoginProfileRequest {
  MFABindRequired?: boolean(name='MFABindRequired', description='Specifies whether to forcefully enable multi-factor authentication (MFA) for the RAM user. Valid values:

*   true: forcefully enables MFA for the RAM user. The RAM user must bind an MFA device upon the next logon.
*   false (default): does not forcefully enable MFA for the RAM user.', example='false', position='Query'),
  password?: string(name='Password', description='The password that the RAM user uses to log on to the console.

The password must meet the complexity requirements.', example='mypassword', position='Query'),
  passwordResetRequired?: boolean(name='PasswordResetRequired', description='Specifies whether the RAM user is required to reset the password upon the next logon. Valid values:

*   true
*   false (default)', example='false', position='Query'),
  status?: string(name='Status', description='Specifies whether to enable password-based logons to the console. Valid values:

*   Active: Password-based logon is enabled. This is the default value.
*   Inactive: Password-based logon is disabled.', example='Active', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model CreateLoginProfileResponseBody = {
  loginProfile?: {
    MFABindRequired?: boolean(name='MFABindRequired', description='Indicates whether to forcefully enable MFA for the RAM user.', example='false'),
    passwordResetRequired?: boolean(name='PasswordResetRequired', description='Indicates whether the RAM user is required to reset the password upon the next logon.', example='false'),
    status?: string(name='Status', description='Indicates whether to enable password-based logons to the console.', example='Active'),
    updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-14T03:47:51Z'),
    userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
  }(name='LoginProfile', description='The logon information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='29CB303C-1F05-43A6-A6BC-EBC5A797F8DB'),
}

model CreateLoginProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoginProfileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLoginProfile  CreateLoginProfileRequest
  * @return CreateLoginProfileResponse
 */
async function createLoginProfile(request: CreateLoginProfileRequest): CreateLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model CreateOIDCProviderRequest {
  clientIds?: string(name='ClientIds', description='The ID of the client, which is provided by the external IdP. If you want to specify multiple client IDs, separate the client IDs with commas (,).

The client ID can contain letters, digits, and special characters and cannot start with the special characters. The special characters are `periods (.), hyphens (-), underscores (_), colons (:), and forward slashes (/)`.``

The client ID can be up to 128 characters in length.', example='498469743454717****', position='Query'),
  description?: string(name='Description', description='The description of the OIDC IdP.

The description can be up to 256 characters in length.', example='This is an OIDC Provider.', position='Query'),
  fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS CA certificate, which is provided by the external IdP. If you want to specify multiple fingerprints, separate the fingerprints with commas (,).

The fingerprint can contain letters and digits.

The fingerprint can be up to 128 characters in length.', example='902ef2deeb3c5b13ea4c3d5193629309e231****', position='Query'),
  issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='6', position='Query'),
  issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer, which is provided by the external IdP. The URL of the issuer must be unique within an Alibaba Cloud account.

The URL of the issuer must start with `https` and be in the valid URL format. The URL cannot contain query parameters that follow a question mark (`?`) or logon information that is identified by at signs (`@`). The URL cannot be a fragment URL that contains number signs (`#`).

The URL can be up to 255 characters in length.', example='https://dev-xxxxxx.okta.com', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.

The name can contain letters, digits, and special characters and cannot start or end with the special characters. The special characters are `periods, (.), hyphens (-), and underscores (_)`.``

The name can be up to 128 characters in length.', example='TestOIDCProvider', position='Query'),
}

model CreateOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the OIDC IdP.', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', description='The ID of the client.', example='498469743454717****'),
    createDate?: string(name='CreateDate', description='The time when the OIDC IdP was created. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', description='The description of the OIDC IdP.', example='This is an OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS certificate.', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', description='The timestamp when the OIDC IdP was created.', example='1636613763000'),
    gmtModified?: string(name='GmtModified', description='The timestamp when the OIDC IdP was modified.', example='1636613763000'),
    issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='6'),
    issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer.', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', description='The time when the OIDC IdP was modified. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
  }(name='OIDCProvider', description='The information about the OIDC IdP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='64B11B41-636D-51E3-A39B-C8703CD2218C'),
}

model CreateOIDCProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOIDCProviderResponseBody(name='body'),
}

/**
  * @description ### [](#)Prerequisites
  * Before you call this operation, make sure that the information such as the URL of the issuer, the fingerprints of HTTPS certificate authority (CA) certificates, and the client IDs are obtained from an external IdP, such as Google Workspace or Okta.
  * ### [](#)Limits
  * *   You can create a maximum of 100 OIDC IdPs in an Alibaba Cloud account.
  * *   You can add a maximum of 50 client IDs to an OIDC IdP.
  * *   You can add a maximum of five fingerprints to an OIDC IdP.
  * ### [](#)Operation description
  * This topic provides an example on how to create an IdP named `TestOIDCProvider` to configure a trust relationship between the external IdP and Alibaba Cloud.
  * @param request  the request parameters of CreateOIDCProvider  CreateOIDCProviderRequest
  * @return CreateOIDCProviderResponse
 */
async function createOIDCProvider(request: CreateOIDCProviderRequest): CreateOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model CreateSAMLProviderRequest {
  description?: string(name='Description', description='The description.', example='This is a provider.', position='Query'),
  encodedSAMLMetadataDocument?: string(name='EncodedSAMLMetadataDocument', description='The metadata file which is Base64-encoded.

The file is provided by an IdP that supports Security Assertion Markup Language (SAML) 2.0.', example='PD94bWwgdmVy****', position='Query'),
  SAMLProviderName: string(name='SAMLProviderName', description='The name of the IdP.

The name can be up to 128 characters in length. The name can contain letters, digits, `periods (.), hyphens (-), and underscores (_)`. The name cannot start or end with `periods (.), hyphens (-), or underscores (_)`.

This parameter is required.', example='test-provider', position='Query'),
}

model CreateSAMLProviderResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A95A763D-F6B7-5242-83EB-AB45CE67F358'),
  SAMLProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the IdP.', example='acs:ram::177242285274****:saml-provider/test-provider'),
    createDate?: string(name='CreateDate', description='The creation time. The time is displayed in UTC.', example='2020-10-22T02:37:05Z'),
    description?: string(name='Description', description='The description.', example='This is a provider.'),
    SAMLProviderName?: string(name='SAMLProviderName', description='The name of the IdP.', example='test-provider'),
    updateDate?: string(name='UpdateDate', description='The update time. The time is displayed in UTC.', example='2020-10-22T02:51:20Z'),
  }(name='SAMLProvider', description='The information about the IdP.'),
}

model CreateSAMLProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSAMLProviderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSAMLProvider  CreateSAMLProviderRequest
  * @return CreateSAMLProviderResponse
 */
async function createSAMLProvider(request: CreateSAMLProviderRequest): CreateSAMLProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSAMLProvider', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserRequest {
  comments?: string(name='Comments', description='The description.

The description must be 1 to 128 characters in length.', example='This is a cloud computing engineer.', position='Query'),
  displayName: string(name='DisplayName', description='The display name of the RAM user.

The name must be 1 to 24 characters in length.

This parameter is required.', example='test', position='Query'),
  email?: string(name='Email', description='The email address of the RAM user.

> This parameter is valid only on the China site (aliyun.com).', example='alice@example.com', position='Query'),
  mobilePhone?: string(name='MobilePhone', description='The mobile number of the RAM user.

Format: Country code-Mobile phone number.

> This parameter is valid only on the China site (aliyun.com).', example='86-1868888****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.

The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.', example='operator'),
      value?: string(name='Value', description='The value of the tag.

The tag value can be an empty string. The tag value can be up to 128 characters in length. The tag value cannot start with `acs:` or contain `http://` or `https://`.', example='alice'),
    }
  ](name='Tag', description='The tags. You can specify up to 20 tags.', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the Resource Access Management (RAM) user.

The name is in the format of `<username>@<AccountAlias>.onaliyun.com`. `<username>` indicates the name of the RAM user. `<AccountAlias>.onaliyun.com` indicates the default domain name. For more information about how to query the default domain name, see [GetDefaultDomain](https://help.aliyun.com/document_detail/186720.html).

The value of `UserPrincipalName` must be `1 to 128` characters in length and can contain letters, digits, periods (.), hyphens (-), and underscores (_). The value of `<username>` must be `1 to 64` characters in length.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model CreateUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2BB8C44A-2862-4922-AD43-03924749173B'),
  user?: {
    comments?: string(name='Comments', description='The description.', example='This is a cloud computing engineer.'),
    createDate?: string(name='CreateDate', description='The time when the RAM user was created.', example='2020-10-12T09:12:00Z'),
    displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='test'),
    email?: string(name='Email', description='The email address of the RAM user.

> This parameter is valid only on the China site (aliyun.com).', example='alice@example.com'),
    lastLoginDate?: string(name='LastLoginDate', description='The last time when the RAM user logged on to the Alibaba Cloud Management Console.', example='2020-10-12T09:12:00Z'),
    mobilePhone?: string(name='MobilePhone', description='The mobile phone number of the RAM user.

> This parameter is valid only on the China site (aliyun.com).', example='86-1868888****'),
    provisionType?: string(name='ProvisionType', description='The source of the RAM user. Valid values:

*   Manual: The RAM user is manually created in the RAM console.
*   SCIM: The RAM user is mapped by using System for Cross-domain Identity Management (SCIM).
*   CloudSSO: The RAM user is mapped from a CloudSSO user.', example='Manual'),
    tags?: {
      tag?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.', example='operator'),
        tagValue?: string(name='TagValue', description='The tag value.', example='alice'),
      }
    ](name='Tag')
    }(name='Tags', description='The tag value.'),
    updateDate?: string(name='UpdateDate', description='The time when the information about the RAM user was updated.', example='2020-10-12T09:12:00Z'),
    userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
    userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
  }(name='User', description='The information about the RAM user.'),
}

model CreateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to create a RAM user named `test`.
  * @param request  the request parameters of CreateUser  CreateUserRequest
  * @return CreateUserResponse
 */
async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualMFADeviceRequest {
  virtualMFADeviceName: string(name='VirtualMFADeviceName', description='The name of the MFA device.

The name must be 1 to 64 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='device001', position='Query'),
}

model CreateVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C609CC97-10FE-43EB-BE32-BDC219D8F1E4'),
  virtualMFADevice?: {
    base32StringSeed?: string(name='Base32StringSeed', description='The key of the MFA device.', example='LD3CJ23Z2VGEX6R7ZTQCOA4XL2KODS5PKH7442NLKYX2PVHSHYB7UT3TS5HA****'),
    QRCodePNG?: string(name='QRCodePNG', description='The Base64-encoded QR code of the key.', example='YXNkZmFzZDlmeW5hc2Q5OGZoODd4bXJmcThhaGU5aSBmYXNkZiBzYWRmIGFGIDRxd2VjIGEgdHEz****'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the MFA device.', example='acs:ram::177242285274****:mfa/device001'),
  }(name='VirtualMFADevice', description='The information about the MFA device.'),
}

model CreateVirtualMFADeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualMFADeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVirtualMFADevice  CreateVirtualMFADeviceRequest
  * @return CreateVirtualMFADeviceResponse
 */
async function createVirtualMFADevice(request: CreateVirtualMFADeviceRequest): CreateVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessKeyRequest {
  userAccessKeyId: string(name='UserAccessKeyId', description='The ID of the AccessKey pair that you want to delete.

This parameter is required.', example='LTAI*******************', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.

If this parameter is empty, the AccessKey pair of the current user is deleted.', example='test@example.onaliyun.com', position='Query'),
}

model DeleteAccessKeyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model DeleteAccessKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccessKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAccessKey  DeleteAccessKeyRequest
  * @return DeleteAccessKeyResponse
 */
async function deleteAccessKey(request: DeleteAccessKeyRequest): DeleteAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessKeyInRecycleBinRequest {
  userAccessKeyId?: string(name='UserAccessKeyId', description='The AccessKey ID of the RAM user.', example='LTAI*******************', position='Query'),
  userId?: string(name='UserId', description='The ID of the RAM user.

> - If you use an Alibaba Cloud account to call the operation, you must specify the parameter.
> - If you use a RAM user to call the operation, you can leave the parameter empty. In this case, the ID of the RAM user is used by default.', example='20732900249392****', position='Query'),
}

model DeleteAccessKeyInRecycleBinResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
}

model DeleteAccessKeyInRecycleBinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccessKeyInRecycleBinResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAccessKeyInRecycleBin  DeleteAccessKeyInRecycleBinRequest
  * @return DeleteAccessKeyInRecycleBinResponse
 */
async function deleteAccessKeyInRecycleBin(request: DeleteAccessKeyInRecycleBinRequest): DeleteAccessKeyInRecycleBinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessKeyInRecycleBin', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppSecretRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='472457090344041****', position='Query'),
  appSecretId: string(name='AppSecretId', description='The ID of the application secret.

This parameter is required.', example='2efd5004-005c-4f05-83c6-5b1dd176****', position='Query'),
}

model DeleteAppSecretResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteAppSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAppSecret  DeleteAppSecretRequest
  * @return DeleteAppSecretResponse
 */
async function deleteAppSecret(request: DeleteAppSecretRequest): DeleteAppSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppSecret', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='472457090344041****', position='Query'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApplication  DeleteApplicationRequest
  * @return DeleteApplicationResponse
 */
async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Dev-Team', position='Query'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupResponseBody(name='body'),
}

/**
  * @description Before you delete a RAM user group, make sure that no policies are attached to the group and no RAM users are included in the group.
  * @param request  the request parameters of DeleteGroup  DeleteGroupRequest
  * @return DeleteGroupResponse
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLoginProfileRequest {
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model DeleteLoginProfileResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model DeleteLoginProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLoginProfileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLoginProfile  DeleteLoginProfileRequest
  * @return DeleteLoginProfileResponse
 */
async function deleteLoginProfile(request: DeleteLoginProfileRequest): DeleteLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOIDCProviderRequest {
  OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider', position='Query'),
}

model DeleteOIDCProviderResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteOIDCProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOIDCProviderResponseBody(name='body'),
}

/**
  * @description ###
  * This topic provides an example on how to remove the OIDC IdP named `TestOIDCProvider`.
  * @param request  the request parameters of DeleteOIDCProvider  DeleteOIDCProviderRequest
  * @return DeleteOIDCProviderResponse
 */
async function deleteOIDCProvider(request: DeleteOIDCProviderRequest): DeleteOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model DeletePasskeyRequest {
  passkeyId?: string(name='PasskeyId', description='The ID of the passkey.', example='PASSKEY-CuZjEHhWcr7GIQOMGvkS', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com', position='Query'),
}

model DeletePasskeyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8A1673AA-5DB3-5AFB-8758-AF9EC2889259'),
}

model DeletePasskeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePasskeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePasskey  DeletePasskeyRequest
  * @return DeletePasskeyResponse
 */
async function deletePasskey(request: DeletePasskeyRequest): DeletePasskeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePasskey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSAMLProviderRequest {
  SAMLProviderName: string(name='SAMLProviderName', description='The name of the IdP that you want to delete.

This parameter is required.', example='test-provider', position='Query'),
}

model DeleteSAMLProviderResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteSAMLProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSAMLProviderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSAMLProvider  DeleteSAMLProviderRequest
  * @return DeleteSAMLProviderResponse
 */
async function deleteSAMLProvider(request: DeleteSAMLProviderRequest): DeleteSAMLProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSAMLProvider', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  userId?: string(name='UserId', description='The ID of the RAM user.

>  You must specify only one of the following parameters: `UserPrincipalName` and `UserId`.', example='20732900249392****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.

>  You must specify only one of the following parameters: `UserPrincipalName` and `UserId`.', example='test@example.onaliyun.com', position='Query'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUser  DeleteUserRequest
  * @return DeleteUserResponse
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserInRecycleBinRequest {
  userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****', position='Query'),
}

model DeleteUserInRecycleBinResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
}

model DeleteUserInRecycleBinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserInRecycleBinResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserInRecycleBin  DeleteUserInRecycleBinRequest
  * @return DeleteUserInRecycleBinResponse
 */
async function deleteUserInRecycleBin(request: DeleteUserInRecycleBinRequest): DeleteUserInRecycleBinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserInRecycleBin', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVirtualMFADeviceRequest {
  serialNumber: string(name='SerialNumber', description='The serial number of the MFA device.

This parameter is required.', example='acs:ram::123456789012****:mfa/device002', position='Query'),
}

model DeleteVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteVirtualMFADeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVirtualMFADeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVirtualMFADevice  DeleteVirtualMFADeviceRequest
  * @return DeleteVirtualMFADeviceResponse
 */
async function deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): DeleteVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model DeprovisionApplicationRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='452392483381546****', position='Query'),
}

model DeprovisionApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeprovisionApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeprovisionApplicationResponseBody(name='body'),
}

/**
  * @description If you want to call this operation to uninstall an internal application, the type of the internal application must be **ServerApp**. Otherwise, an error occurs when you call this operation.
  * >  For **internal applications**, only internal applications of the ServerApp type need to be **installed or provisioned**. Therefore, only internal applications of the ServerApp type **can be uninstalled**. Internal applications of the WebApp and NativeApp types **do not need to and cannot be uninstalled**.
  * @param request  the request parameters of DeprovisionApplication  DeprovisionApplicationRequest
  * @return DeprovisionApplicationResponse
 */
async function deprovisionApplication(request: DeprovisionApplicationRequest): DeprovisionApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeprovisionApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeprovisionExternalApplicationRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='417273362044613****', position='Query'),
}

model DeprovisionExternalApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1C2-3AB045D1AE0B'),
}

model DeprovisionExternalApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeprovisionExternalApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeprovisionExternalApplication  DeprovisionExternalApplicationRequest
  * @return DeprovisionExternalApplicationResponse
 */
async function deprovisionExternalApplication(request: DeprovisionExternalApplicationRequest): DeprovisionExternalApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeprovisionExternalApplication', 'POST', '/', 'json', false, 'json', request);
}

model DisableVirtualMFARequest {
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model DisableVirtualMFAResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model DisableVirtualMFAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableVirtualMFAResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableVirtualMFA  DisableVirtualMFARequest
  * @return DisableVirtualMFAResponse
 */
async function disableVirtualMFA(request: DisableVirtualMFARequest): DisableVirtualMFAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableVirtualMFA', 'POST', '/', 'json', false, 'json', request);
}

model GenerateCredentialReportRequest {
}

model GenerateCredentialReportResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BBCCA90A-A1F0-4B16-B355-692247197805'),
  state?: string(name='State', description='The generation status of the user credential report. Valid values:

*   STARTED: The system starts to generate the user credential report.
*   INPROGRESS: The user credential report is being generated.
*   COMPLETED: The user credential report is generated.', example='STARTED'),
}

model GenerateCredentialReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateCredentialReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateCredentialReport  GenerateCredentialReportRequest
  * @return GenerateCredentialReportResponse
 */
async function generateCredentialReport(request: GenerateCredentialReportRequest): GenerateCredentialReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateCredentialReport', 'POST', '/', 'json', false, 'json', request);
}

model GenerateGovernanceReportRequest {
}

model GenerateGovernanceReportResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='492E130C-76D3-55D5-BE5C-C023E431369A'),
  state?: string(name='State', description='The report generation status. Valid values:

*   Started: The system starts to generate a governance report.
*   Progressing: The system is generating a governance report.
*   Completed: A governance report is generated.', example='Started'),
}

model GenerateGovernanceReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateGovernanceReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateGovernanceReport  GenerateGovernanceReportRequest
  * @return GenerateGovernanceReportResponse
 */
async function generateGovernanceReport(request: GenerateGovernanceReportRequest): GenerateGovernanceReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateGovernanceReport', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyInfoInRecycleBinRequest {
  userAccessKeyId: string(name='UserAccessKeyId', description='The AccessKey ID of the Resource Access Management (RAM) user.

This parameter is required.', example='LTAI*******************', position='Query'),
}

model GetAccessKeyInfoInRecycleBinResponseBody = {
  accessKey?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID.', example='LTAI*******************'),
    createDate?: string(name='CreateDate', description='The time when the AccessKey pair was created.', example='2020-10-12T09:12:00Z'),
    deleteDate?: string(name='DeleteDate', description='The time when the AccessKey pair will be permanently deleted from the recycle bin.', example='2020-11-12T10:12:00Z'),
    recycleDate?: string(name='RecycleDate', description='The time when the AccessKey pair was deleted and moved to the recycle bin.', example='2020-10-12T10:12:00Z'),
    userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
    userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
    userRecycled?: boolean(name='UserRecycled', description='Indicates whether the RAM user to which the AccessKey pair belongs is in the recycle bin. Valid values:

*   true
*   false', example='true'),
  }(name='AccessKey', description='The information about the AccessKey pair.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
}

model GetAccessKeyInfoInRecycleBinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccessKeyInfoInRecycleBinResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccessKeyInfoInRecycleBin  GetAccessKeyInfoInRecycleBinRequest
  * @return GetAccessKeyInfoInRecycleBinResponse
 */
async function getAccessKeyInfoInRecycleBin(request: GetAccessKeyInfoInRecycleBinRequest): GetAccessKeyInfoInRecycleBinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyInfoInRecycleBin', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyLastUsedRequest {
  userAccessKeyId: string(name='UserAccessKeyId', description='The ID of the AccessKey pair that you want to query.

This parameter is required.', example='LTAI*******************', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.

If you do not specify this parameter, the AccessKey pair of the current user is queried.', example='test@example.onaliyun.com', position='Query'),
}

model GetAccessKeyLastUsedResponseBody = {
  accessKeyLastUsed?: {
    lastUsedDate?: string(name='LastUsedDate', description='The time when the AccessKey pair was used for the last time.', example='2020-10-16T01:37:37Z'),
    serviceName?: string(name='ServiceName', description='The Alibaba Cloud service that was last accessed by using the AccessKey pair.', example='Ram'),
  }(name='AccessKeyLastUsed', description='The details of the time when the AccessKey pair was used for the last time.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B29C79F6-354B-4297-A994-1338CC22A2EC'),
}

model GetAccessKeyLastUsedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccessKeyLastUsedResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccessKeyLastUsed  GetAccessKeyLastUsedRequest
  * @return GetAccessKeyLastUsedResponse
 */
async function getAccessKeyLastUsed(request: GetAccessKeyLastUsedRequest): GetAccessKeyLastUsedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyLastUsed', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountMFAInfoRequest {
}

model GetAccountMFAInfoResponseBody = {
  isMFAEnable?: boolean(name='IsMFAEnable', description='Indicates whether MFA devices are enabled. Valid values:

*   true
*   false', example='false'),
  requestId?: string(name='RequestId', description='The request ID.', example='4BE83135-0B08-467C-B3A2-27B312FD0F57'),
}

model GetAccountMFAInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountMFAInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccountMFAInfo  GetAccountMFAInfoRequest
  * @return GetAccountMFAInfoResponse
 */
async function getAccountMFAInfo(request: GetAccountMFAInfoRequest): GetAccountMFAInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountMFAInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountSecurityPracticeReportRequest {
}

model GetAccountSecurityPracticeReportResponseBody = {
  accountSecurityPracticeInfo?: {
    accountSecurityPracticeUserInfo?: {
      bindMfa?: boolean(name='BindMfa', description='Indicates whether multi-factor authentication (MFA) is enabled. Valid values:

*   true
*   false', example='false'),
      oldAkNum?: int32(name='OldAkNum', description='The number of old AccessKey pairs for the Alibaba Cloud account.', example='0'),
      rootWithAccessKey?: int32(name='RootWithAccessKey', description='The number of AccessKey pairs for the Alibaba Cloud account.', example='1'),
      subUser?: int32(name='SubUser', description='The number of RAM users within the Alibaba Cloud account.', example='9'),
      subUserBindMfa?: int32(name='SubUserBindMfa', description='The number of RAM users that have MFA devices bound.', example='0'),
      subUserPwdLevel?: string(name='SubUserPwdLevel', description='The complexity level of the password for the RAM user. Valid values:

*   low
*   mid
*   high', example='low'),
      subUserWithOldAccessKey?: int32(name='SubUserWithOldAccessKey', description='The number of RAM users that use the old AccessKey pairs.', example='0'),
      subUserWithUnusedAccessKey?: int32(name='SubUserWithUnusedAccessKey', description='The number of Resource Access Management (RAM) users that have unused AccessKey pairs.', example='0'),
      unusedAkNum?: int32(name='UnusedAkNum', description='The number of AccessKey pairs that are not used for the Alibaba Cloud account.', example='0'),
    }(name='AccountSecurityPracticeUserInfo', description='The information about the security report for the Alibaba Cloud account.'),
    score?: int32(name='Score', description='The security score of the Alibaba Cloud account.', example='63'),
  }(name='AccountSecurityPracticeInfo', description='The information about the security report for the Alibaba Cloud account.'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABA822EE-85C2-4418-9577-A1831FC8466D'),
}

model GetAccountSecurityPracticeReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountSecurityPracticeReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccountSecurityPracticeReport  GetAccountSecurityPracticeReportRequest
  * @return GetAccountSecurityPracticeReportResponse
 */
async function getAccountSecurityPracticeReport(request: GetAccountSecurityPracticeReportRequest): GetAccountSecurityPracticeReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountSecurityPracticeReport', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountSummaryRequest {
}

model GetAccountSummaryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='81313F5E-3C85-478F-BCC9-E1B70E4556DB'),
  summaryMap?: {
    accessKeysPerUserQuota?: int32(name='AccessKeysPerUserQuota', description='The maximum number of AccessKey pairs that a Resource Access Management (RAM) user can have.', example='2'),
    accountAccessKeysPerAccountQuota?: int32(name='AccountAccessKeysPerAccountQuota'),
    attachedPoliciesPerGroupQuota?: int32(name='AttachedPoliciesPerGroupQuota', description='The maximum number of custom policies that can be added to a RAM user group.', example='5'),
    attachedPoliciesPerRoleQuota?: int32(name='AttachedPoliciesPerRoleQuota', description='The maximum number of custom policies that can be added to a RAM role.', example='5'),
    attachedPoliciesPerUserQuota?: int32(name='AttachedPoliciesPerUserQuota', description='The maximum number of custom policies that can be added to a RAM user.', example='10'),
    attachedSystemPoliciesPerGroupQuota?: int32(name='AttachedSystemPoliciesPerGroupQuota', description='The maximum number of system policies that can be added to a RAM user group.', example='20'),
    attachedSystemPoliciesPerRoleQuota?: int32(name='AttachedSystemPoliciesPerRoleQuota', description='The maximum number of system policies that can be added to a RAM role.', example='20'),
    attachedSystemPoliciesPerUserQuota?: int32(name='AttachedSystemPoliciesPerUserQuota', description='The maximum number of system policies that can be added to a RAM user.', example='20'),
    conditionsPerAKPolicyQuota?: int32(name='ConditionsPerAKPolicyQuota', description='The maximum number of network access control policies that can be configured for an Alibaba Cloud account or AccessKey pair.', example='8'),
    groups?: int32(name='Groups', description='The number of RAM user groups.', example='7'),
    groupsPerUserQuota?: int32(name='GroupsPerUserQuota', description='The maximum number of RAM user groups to which a RAM user can be added.', example='5'),
    groupsQuota?: int32(name='GroupsQuota', description='The maximum number of RAM user groups that can be created.', example='50'),
    IPItemsPerAKPolicyQuota?: int32(name='IPItemsPerAKPolicyQuota', description='The maximum number of IP addresses that can be specified in an account-level AccessKey pair-based or AccessKey pair-level policy for network access control.', example='50'),
    MFADevices?: int32(name='MFADevices', description='The number of virtual multi-factor authentication (MFA) devices.', example='13'),
    MFADevicesInUse?: int32(name='MFADevicesInUse', description='The number of virtual MFA devices in use.', example='2'),
    policies?: int32(name='Policies', description='The number of custom policies.', example='13'),
    policiesQuota?: int32(name='PoliciesQuota', description='The maximum number of custom policies that can be created.', example='1500'),
    policySizeQuota?: int32(name='PolicySizeQuota', description='The maximum length of the policy content.', example='2048'),
    roles?: int32(name='Roles', description='The number of RAM roles.', example='19'),
    rolesQuota?: int32(name='RolesQuota', description='The maximum number of RAM roles that can be created.', example='1000'),
    users?: int32(name='Users', description='The number of RAM users.', example='9'),
    usersQuota?: int32(name='UsersQuota', description='The maximum number of RAM users that can be created.', example='1000'),
    versionsPerPolicyQuota?: int32(name='VersionsPerPolicyQuota', description='The maximum number of policy versions.', example='5'),
    virtualMFADevicesQuota?: int32(name='VirtualMFADevicesQuota', description='The maximum number of virtual MFA devices that can be created.', example='1000'),
  }(name='SummaryMap', description='The overview information about the Alibaba Cloud account.'),
}

model GetAccountSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccountSummary  GetAccountSummaryRequest
  * @return GetAccountSummaryResponse
 */
async function getAccountSummary(request: GetAccountSummaryRequest): GetAccountSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetAppSecretRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='472457090344041****', position='Query'),
  appSecretId: string(name='AppSecretId', description='The ID of the application secret.

This parameter is required.', example='2efd5004-005c-4f05-83c6-5b1dd176****', position='Query'),
}

model GetAppSecretResponseBody = {
  appSecret?: {
    appId?: string(name='AppId', description='The ID of the application.', example='472457090344041****'),
    appSecretId?: string(name='AppSecretId', description='The ID of the application secret.', example='2efd5004-005c-4f05-83c6-5b1dd176****'),
    appSecretValue?: string(name='AppSecretValue', description='The content of the application secret.', example='ai78ZmmxnlUG1jXlBZRDFKos9DIjY4m17Q7dCpMwn1rqXsTGb1X1XmrmveMp****'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-26T02:52:31Z'),
  }(name='AppSecret', description='The details of the application secret.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE46FC3C-3BDE-4771-B531-27B7B6EB533D'),
}

model GetAppSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAppSecret  GetAppSecretRequest
  * @return GetAppSecretResponse
 */
async function getAppSecret(request: GetAppSecretRequest): GetAppSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppSecret', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='472457090344041****', position='Query'),
}

model GetApplicationResponseBody = {
  application?: {
    accessTokenValidity?: int32(name='AccessTokenValidity', description='The validity period of the access token. Unit: seconds.', example='3600'),
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the application belongs.', example='177242285274****'),
    appId?: string(name='AppId', description='The ID of the application.', example='472457090344041****'),
    appName?: string(name='AppName', description='The name of the application.', example='myapp'),
    appType?: string(name='AppType', description='The type of the application. Valid values:

*   WebApp: a web application.
*   NativeApp: a native application that runs on an operating system, such as a desktop or mobile operating system.
*   ServerApp: an application that can access Alibaba Cloud services without the need for user logon. Only applications that synchronize user information based on the System for Cross-domain Identity Management (SCIM) protocol are supported.', example='WebApp'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-23T08:06:57Z'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description', description='The description of the permission.', example='Obtain the OpenID of the user. This is the default permission that you cannot remove.'),
          name?: string(name='Name', description='The name of the permission.', example='openid'),
          required?: boolean(name='Required', description='Indicates whether the permission is automatically selected by default when you install the application. Valid values:

*   true
*   false

`openid` is required by default.', example='true'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes', description='The information about the permissions that are granted on the application.'),
    }(name='DelegatedScope', description='The information about the permissions that are granted on the application.'),
    displayName?: string(name='DisplayName', description='The display name of the application.', example='myapp'),
    isMultiTenant?: boolean(name='IsMultiTenant', description='Indicates whether the application can be installed by using other Alibaba Cloud accounts.', example='true'),
    protocolVersion?: string(name='ProtocolVersion'),
    redirectUris?: {
      redirectUri?: [ string ](name='RedirectUri')
    }(name='RedirectUris', description='The callback URL.'),
    refreshTokenValidity?: int32(name='RefreshTokenValidity', description='The validity period of the refresh token. Unit: seconds.', example='7776000'),
    secretRequired?: boolean(name='SecretRequired', description='Indicates whether a secret is required.', example='true'),
    updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-23T08:06:57Z'),
  }(name='Application', description='The information about the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6616F09B-2768-4C11-8866-A8EE4C4A583E'),
}

model GetApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to query the configurations of an application named `472457090344041****`.
  * @param request  the request parameters of GetApplication  GetApplicationRequest
  * @return GetApplicationResponse
 */
async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationProvisionInfoRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='452392483381546****', position='Query'),
}

model GetApplicationProvisionInfoResponseBody = {
  applicationProvisionInfo?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='177242285274****'),
    appId?: string(name='AppId', description='The ID of the application.', example='452392483381546****'),
    appName?: string(name='AppName', description='The name of the application.', example='GiteePrd'),
    createDate?: string(name='CreateDate', description='The time when the application was installed. The value is a timestamp.', example='1603693518000'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description', description='The description of the permission scope.', example='Obtains the OpenID of the user. This is the default scope and cannot be deleted.'),
          name?: string(name='Name', description='The name of the permission scope.', example='openid'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes', description='The information about the scopes of permissions that are granted to the application.'),
    }(name='DelegatedScope', description='The information about the scopes of permissions that are granted to the application.'),
    displayName?: string(name='DisplayName', description='The display name of the application.', example='GiteeAliyun'),
    updateDate?: string(name='UpdateDate', description='The update time. The value is a timestamp.', example='1603693518000'),
  }(name='ApplicationProvisionInfo', description='The installation information about the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='936E1D9C-157D-45BD-8A3B-81C0716EB078'),
}

model GetApplicationProvisionInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationProvisionInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApplicationProvisionInfo  GetApplicationProvisionInfoRequest
  * @return GetApplicationProvisionInfoResponse
 */
async function getApplicationProvisionInfo(request: GetApplicationProvisionInfoRequest): GetApplicationProvisionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationProvisionInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetCredentialReportRequest {
  maxItems?: string(name='MaxItems', description='The number of entries per page. If a response is truncated because it reaches the value of `MaxItems`, the value of `IsTruncated` will be true.

Valid values: 1 to 3501. Default value: 3501.', example='1000', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to initiate the next request if the response of the current request is truncated. You can use the token to initiate another request and obtain the remaining records.``', example='EXAMPLE', position='Query'),
}

model GetCredentialReportResponseBody = {
  content?: string(name='Content', description='The content of the user credential report.

The report is Base64-encoded. After you decode the report, the credential report is in the CSV format.', example='OVZWK4RMOVZW****'),
  generatedTime?: string(name='GeneratedTime', description='The time when the user credential report was generated.', example='2020-10-19T15:06:52Z'),
  isTruncated?: string(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  nextToken?: string(name='NextToken', description='The parameter that is used to obtain the truncated part. This parameter takes effect only when `IsTruncated` is set to true.', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='7A01826E-7601-44B0-B4DF-2B0C509836DE'),
}

model GetCredentialReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCredentialReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCredentialReport  GetCredentialReportRequest
  * @return GetCredentialReportResponse
 */
async function getCredentialReport(request: GetCredentialReportRequest): GetCredentialReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCredentialReport', 'POST', '/', 'json', false, 'json', request);
}

model GetDefaultDomainRequest {
}

model GetDefaultDomainResponseBody = {
  defaultDomainName?: string(name='DefaultDomainName', description='The default domain name.', example='examplecompany.onaliyun.com'),
  requestId?: string(name='RequestId', description='The request ID.', example='66815255-7CCE-4759-AC37-9755794C3626'),
}

model GetDefaultDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDefaultDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDefaultDomain  GetDefaultDomainRequest
  * @return GetDefaultDomainResponse
 */
async function getDefaultDomain(request: GetDefaultDomainRequest): GetDefaultDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDefaultDomain', 'POST', '/', 'json', false, 'json', request);
}

model GetExternalApplicationRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='472457090344041****', position='Query'),
}

model GetExternalApplicationResponseBody = {
  externalApplication?: {
    appPrincipalName?: string(name='AppPrincipalName', description='The name of the application principal. The value is in the `<app_name>@app.<account_id>.onaliyun.com` format.', example='GiteePrd@app.153082740420****.onaliyun.com'),
    createDate?: string(name='CreateDate', description='The time when the application was installed. The value is a timestamp.', example='1737534146000'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description', description='The description of the permission.', example='Obtains the OpenID of the user. This is the default scope and cannot be deleted.'),
          name?: string(name='Name', description='The name of the permission.', example='openid'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes', description='The information about the permissions that are granted on the application.'),
    }(name='DelegatedScope', description='The information about the permissions that are granted on the application.'),
    displayName?: string(name='DisplayName', description='The display name of the application.', example='GiteeAliyun'),
    foreignAppId?: string(name='ForeignAppId', description='The ID of the application.', example='407426893752729****'),
    tenantId?: string(name='TenantId', description='The ID of the Alibaba Cloud account for which the application is installed.', example='173082740420****'),
    updateDate?: string(name='UpdateDate', description='The update time of the application. The value is a timestamp.', example='1737534146000'),
  }(name='ExternalApplication', description='The information about the external application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E4C4D1BD-2558-5BD1-8C36-A5D7FB174A55'),
}

model GetExternalApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExternalApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExternalApplication  GetExternalApplicationRequest
  * @return GetExternalApplicationResponse
 */
async function getExternalApplication(request: GetExternalApplicationRequest): GetExternalApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExternalApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetGovernanceItemReportRequest {
  governanceItemType?: string(name='GovernanceItemType', example='SSOLoginEnabled', position='Query'),
  marker?: string(name='Marker', example='EXAMPLE', position='Query'),
  maxItems?: string(name='MaxItems', example='1000', position='Query'),
}

model GetGovernanceItemReportResponseBody = {
  columnsSchema?: {
    columnSchema?: [ 
    {
      columnName?: string(name='ColumnName', example='UserPrincipalName'),
      columnType?: string(name='ColumnType', example='String'),
    }
  ](name='ColumnSchema')
  }(name='ColumnsSchema'),
  columnsValue?: {
    columnRow?: [{
    columnValue?: [ any ](name='ColumnValue')
  }  ](name='ColumnRow')
  }(name='ColumnsValue'),
  generateTime?: string(name='GenerateTime', example='2020-10-19T15:06:52Z'),
  isTruncated?: boolean(name='IsTruncated', example='true'),
  marker?: string(name='Marker', example='EXAMPLE'),
  metricType?: string(name='MetricType', example='Number'),
  metricValue?: any(name='MetricValue', example='100'),
  requestId?: string(name='RequestId', example='F2CE9688-AA85-5F23-8C22-0EC23473405F'),
}

model GetGovernanceItemReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGovernanceItemReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGovernanceItemReport  GetGovernanceItemReportRequest
  * @return GetGovernanceItemReportResponse
 */
async function getGovernanceItemReport(request: GetGovernanceItemReportRequest): GetGovernanceItemReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGovernanceItemReport', 'POST', '/', 'json', false, 'json', request);
}

model GetGovernanceReportStatusRequest {
}

model GetGovernanceReportStatusResponseBody = {
  governanceItemsStatus?: {
    governanceItemStatus?: [ 
    {
      governanceItem?: string(name='GovernanceItem', example='AccountRecentUsingAccessKey'),
      status?: string(name='Status', example='Progressing'),
    }
  ](name='GovernanceItemStatus')
  }(name='GovernanceItemsStatus'),
  requestId?: string(name='RequestId', example='F2CE9688-AA85-5F23-8C22-0EC23473405A'),
  wholeReportStatus?: string(name='WholeReportStatus', example='Progressing'),
}

model GetGovernanceReportStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGovernanceReportStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGovernanceReportStatus  GetGovernanceReportStatusRequest
  * @return GetGovernanceReportStatusResponse
 */
async function getGovernanceReportStatus(request: GetGovernanceReportStatusRequest): GetGovernanceReportStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGovernanceReportStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetGroupRequest {
  groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Dev-Team', position='Query'),
}

model GetGroupResponseBody = {
  group?: {
    comments?: string(name='Comments', description='The description.', example='Dev-Team'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-19T16:15:17Z'),
    displayName?: string(name='DisplayName', description='The display name of the RAM user group.', example='Dev-Team'),
    groupId?: string(name='GroupId', description='The ID of the RAM user group.', example='740317625433843****'),
    groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Dev-Team'),
    updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-19T16:15:17Z'),
  }(name='Group', description='The information about the RAM user group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='86ECEC3C-7262-4C3C-94B4-A98F7CC1F060'),
}

model GetGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGroup  GetGroupRequest
  * @return GetGroupResponse
 */
async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetLoginProfileRequest {
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model GetLoginProfileResponseBody = {
  loginProfile?: {
    autoDisableLoginStatus?: string(name='AutoDisableLoginStatus', description='Indicates whether console logon is automatically disabled if a RAM user does not log on to the console in the previous specified number of days. The number of days is specified by MaxIdleDaysForUsers. The default value is true, and you cannot change the value.', example='true'),
    lastLoginTime?: string(name='LastLoginTime', description='The time of the most recent logon. The time is displayed in UTC.', example='2020-10-14T07:25:25Z'),
    MFABindRequired?: boolean(name='MFABindRequired', description='Indicates whether multi-factor authentication (MFA) must be enabled. Valid values:

*   false
*   true', example='false'),
    passwordResetRequired?: boolean(name='PasswordResetRequired', description='Indicates whether the RAM user is required to reset the password upon the next logon. Valid values:

*   false
*   true', example='false'),
    status?: string(name='Status', description='Indicates whether console logon is enabled. Valid values:

*   Active: enabled.
*   Inactive: disabled.', example='Active'),
    updateDate?: string(name='UpdateDate', description='The modification time. The time is displayed in UTC.', example='2020-10-14T06:56:45Z'),
    userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
  }(name='LoginProfile', description='The console logon configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E517F18B-632C-48FC-93F1-CDCBCC6F8444'),
}

model GetLoginProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoginProfileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLoginProfile  GetLoginProfileRequest
  * @return GetLoginProfileResponse
 */
async function getLoginProfile(request: GetLoginProfileRequest): GetLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model GetOIDCProviderRequest {
  OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider', position='Query'),
}

model GetOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the OIDC IdP.', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', description='The ID of the client. If multiple client IDs are returned, the client IDs are separated by commas (,).', example='498469743454717****'),
    createDate?: string(name='CreateDate', description='The time when the OIDC IdP was created. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', description='The description of the OIDC IdP.', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS certificate. If multiple fingerprints are returned, the fingerprints are separated by commas (,).', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', description='The timestamp when the OIDC IdP was created.', example='1636613763000'),
    gmtModified?: string(name='GmtModified', description='The timestamp when the OIDC IdP was modified.', example='1636706309000'),
    issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='12'),
    issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer.', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', description='The time when the OIDC IdP was modified. The time is displayed in UTC.', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider', description='The information about the OIDC IdP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E5E1A300-279D-5FBD-A8CF-F4EDC20C4896'),
}

model GetOIDCProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOIDCProviderResponseBody(name='body'),
}

/**
  * @description ###
  * This topic provides an example on how to query the information about an OpenID Connect (OIDC) identity provider (IdP) named `TestOIDCProvider`.
  * @param request  the request parameters of GetOIDCProvider  GetOIDCProviderRequest
  * @return GetOIDCProviderResponse
 */
async function getOIDCProvider(request: GetOIDCProviderRequest): GetOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordPolicyRequest {
}

model GetPasswordPolicyResponseBody = {
  passwordPolicy?: {
    hardExpire?: boolean(name='HardExpire', description='Indicates whether to disable logon after the password expires.', example='false'),
    maxLoginAttemps?: int32(name='MaxLoginAttemps', description='The maximum number of password retries.', example='0'),
    maxPasswordAge?: int32(name='MaxPasswordAge', description='The validity period of the password.', example='0'),
    minimumPasswordDifferentCharacter?: int32(name='MinimumPasswordDifferentCharacter', description='The minimum number of unique characters in the password.', example='0'),
    minimumPasswordLength?: int32(name='MinimumPasswordLength', description='The minimum required number of characters in a password.', example='8'),
    passwordNotContainUserName?: boolean(name='PasswordNotContainUserName', description='Indicates whether to exclude the username from the password.', example='false'),
    passwordReusePrevention?: int32(name='PasswordReusePrevention', description='The policy for password history check.', example='0'),
    requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters', description='Indicates whether the password must contain lowercase letters.', example='false'),
    requireNumbers?: boolean(name='RequireNumbers', description='Indicates whether the password must contain digits.', example='false'),
    requireSymbols?: boolean(name='RequireSymbols', description='Indicates whether the password must contain special characters.', example='false'),
    requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters', description='Indicates whether the password must contain uppercase letters.', example='false'),
  }(name='PasswordPolicy', description='The details of the password policy.'),
  requestId?: string(name='RequestId', description='The request ID.', example='BDAA8408-E67C-428B-BFF0-1B2AC05C9610'),
}

model GetPasswordPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPasswordPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPasswordPolicy  GetPasswordPolicyRequest
  * @return GetPasswordPolicyResponse
 */
async function getPasswordPolicy(request: GetPasswordPolicyRequest): GetPasswordPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetSAMLProviderRequest {
  SAMLProviderName: string(name='SAMLProviderName', description='The name of the IdP.

This parameter is required.', example='test-provider', position='Query'),
}

model GetSAMLProviderResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BAADB995-0C7A-476D-B293-7E94568EEDFB'),
  SAMLProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the IdP.', example='acs:ram::177242285274****:saml-provider/test-provider'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-22T02:37:05Z'),
    description?: string(name='Description', description='The description.', example='This is a provider.'),
    encodedSAMLMetadataDocument?: string(name='EncodedSAMLMetadataDocument', description='The metadata file, which is Base64 encoded.', example='PD94bWwgdmVy****'),
    SAMLProviderName?: string(name='SAMLProviderName', description='The name of the IdP.', example='test-provider'),
    updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-22T02:51:20Z'),
  }(name='SAMLProvider', description='The information about the IdP.'),
}

model GetSAMLProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSAMLProviderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSAMLProvider  GetSAMLProviderRequest
  * @return GetSAMLProviderResponse
 */
async function getSAMLProvider(request: GetSAMLProviderRequest): GetSAMLProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSAMLProvider', 'POST', '/', 'json', false, 'json', request);
}

model GetSecurityPreferenceRequest {
}

model GetSecurityPreferenceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30C9068D-FBAA-4998-9986-8A562FED0BC3'),
  securityPreference?: {
    accessKeyPreference?: {
      allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys', description='Indicates whether RAM users can manage their AccessKey pairs. Valid values:

*   true
*   false', example='false'),
    }(name='AccessKeyPreference', description='The AccessKey pair preference.'),
    loginProfilePreference?: {
      allowUserToChangePassword?: boolean(name='AllowUserToChangePassword', description='Indicates whether RAM users can change their passwords. Valid values:

*   true
*   false', example='true'),
      allowUserToLoginWithPasskey?: boolean(name='AllowUserToLoginWithPasskey', description='Indicates whether a RAM user can use a passkey for logon. Valid values:

*   true
*   false', example='true'),
      enableSaveMFATicket?: boolean(name='EnableSaveMFATicket', description='Indicates whether RAM users can remember the multi-factor authentication (MFA) devices for seven days. Valid values:

*   true
*   false', example='false'),
      loginNetworkMasks?: string(name='LoginNetworkMasks', description='The subnet mask.', example='10.0.0.0/8'),
      loginSessionDuration?: int32(name='LoginSessionDuration', description='The validity period of the logon session of RAM users. Unit: hours.', example='6'),
      MFAOperationForLogin?: string(name='MFAOperationForLogin', description='Indicates whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console. Valid values:

*   mandatory: MFA is required for all RAM users. If you use EnforceMFAForLogin, set the value to true.
*   independent (default): User-specific settings are applied. If you use EnforceMFAForLogin, set the value to false.
*   adaptive: MFA is required only for RAM users who initiated unusual logons.', example='adaptive'),
      operationForRiskLogin?: string(name='OperationForRiskLogin', description='Indicates whether to enable MFA for RAM users who initiated unusual logons. Valid values:

*   autonomous (default): yes. MFA is prompted for RAM users who initiated unusual logons. However, the RAM users are allowed to skip MFA.
*   enforceVerify: MFA is prompted for RAM users who initiated unusual logons and the RAM users cannot skip MFA.', example='autonomous', deprecated='true'),
    }(name='LoginProfilePreference', description='The logon preference.'),
    MFAPreference?: {
      allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices', description='Indicates whether RAM users can manage their MFA devices. Valid values:

*   true
*   false', example='false'),
    }(name='MFAPreference', description='The MFA preference.'),
    maxIdleDays?: {
      maxIdleDaysForAccessKeys?: int32(name='MaxIdleDaysForAccessKeys', description='The maximum number of days that the AccessKey pair of a RAM user can stay unused. If an AccessKey pair is not used in the previous specified number of days, the AccessKey pair is automatically disabled on the next day. The default value is 730. You cannot change the value.', example='730'),
      maxIdleDaysForUsers?: int32(name='MaxIdleDaysForUsers', description='The maximum number of days that a RAM user can stay idle. If a RAM user for whom console logon is enabled does not log on to the console in the previous specified number of days, console logon is automatically disabled for the RAM user on the next day. Single sign-on (SSO) is not involved. The default value is 730. You cannot change the value.', example='730'),
    }(name='MaxIdleDays', description='The maximum idle periods. Unit: days.'),
    personalInfoPreference?: {
      allowUserToManagePersonalDingTalk?: boolean(name='AllowUserToManagePersonalDingTalk', description='Indicates whether RAM users can manage their personal DingTalk accounts, such as binding and unbinding of the accounts. Valid values:

*   true
*   false', example='true'),
    }(name='PersonalInfoPreference', description='The personal information preference.'),
    verificationPreference?: {
      verificationTypes?: [ string ](name='VerificationTypes', description='The MFA methods.'),
    }(name='VerificationPreference', description='The MFA method preference.'),
  }(name='SecurityPreference', description='The details of security preferences.'),
}

model GetSecurityPreferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSecurityPreferenceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSecurityPreference  GetSecurityPreferenceRequest
  * @return GetSecurityPreferenceResponse
 */
async function getSecurityPreference(request: GetSecurityPreferenceRequest): GetSecurityPreferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecurityPreference', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  userAccessKeyId?: string(name='UserAccessKeyId', description='The AccessKey ID of the RAM user.

> You must specify only one of the following parameters: `UserPrincipalName`, `UserId`, and `UserAccessKeyId`.', example='LTAI*******************', position='Query'),
  userId?: string(name='UserId', description='The ID of the RAM user.

> You must specify only one of the following parameters: `UserPrincipalName`, `UserId`, and `UserAccessKeyId`.', example='20732900249392****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.

The name is in the format of `<username>@<AccountAlias>.onaliyun.com`. `<username>` indicates the name of the RAM user. `<AccountAlias>.onaliyun.com` indicates the default domain name.

The value of `UserPrincipalName` must be `1 to 128` characters in length and can contain letters, digits, periods (.), hyphens (-), and underscores (_). The value of `<username>` must be `1 to 64` characters in length.

> You must specify only one of the following parameters: `UserPrincipalName`, `UserId`, and `UserAccessKeyId`.', example='test@example.onaliyun.com', position='Query'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
  user?: {
    comments?: string(name='Comments', description='The description.', example='This is a cloud computing engineer.'),
    createDate?: string(name='CreateDate', description='The time when the RAM user was created.', example='2020-10-12T09:12:00Z'),
    displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='test'),
    email?: string(name='Email', description='The email address of the RAM user.

> This parameter is valid only on the China site (aliyun.com).', example='alice@example.com'),
    lastLoginDate?: string(name='LastLoginDate', description='The last time when the RAM user logged on to the Alibaba Cloud Management Console.', example='2020-10-12T09:12:00Z'),
    mobilePhone?: string(name='MobilePhone', description='The mobile phone number of the RAM user.

> This parameter is valid only on the China site (aliyun.com).', example='86-1868888****'),
    provisionType?: string(name='ProvisionType', description='The source of the RAM user. Valid value:

*   Manual: The RAM user is manually created in the RAM console.
*   SCIM: The RAM user is mapped by using System for Cross-domain Identity Management (SCIM).
*   CloudSSO: The RAM user is mapped from a CloudSSO user.', example='CloudSSO'),
    tags?: {
      tag?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.', example='operator'),
        tagValue?: string(name='TagValue', description='The tag value.', example='alice'),
      }
    ](name='Tag')
    }(name='Tags', description='The tags.'),
    updateDate?: string(name='UpdateDate', description='The time when the information about the RAM user was updated.', example='2020-10-13T07:39:22Z'),
    userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
    userName?: string(name='UserName', description='The username of the RAM user, which is the prefix of the logon name of the RAM user.', example='test'),
    userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
  }(name='User', description='The information about the RAM user.'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUser  GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model GetUserInRecycleBinRequest {
  userAccessKeyId?: string(name='UserAccessKeyId', description='The AccessKey ID of the RAM user.

>  You must specify only one of the following parameters: `UserId` and `UserAccessKeyId`.', example='LTAI*******************', position='Query'),
  userId?: string(name='UserId', description='The ID of the RAM user.

>  You must specify only one of the following parameters: `UserId` and `UserAccessKeyId`.', example='20732900249392****', position='Query'),
}

model GetUserInRecycleBinResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
  user?: {
    createDate?: string(name='CreateDate', description='The time when the RAM user was created.', example='2020-10-11T09:12:00Z'),
    deleteDate?: string(name='DeleteDate', description='The time when the RAM user will be permanently deleted from the recycle bin.', example='2020-11-12T09:12:00Z'),
    displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='test'),
    recycleDate?: string(name='RecycleDate', description='The time when the RAM user was deleted and moved to the recycle bin.', example='2020-10-12T09:12:00Z'),
    userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
    userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
  }(name='User', description='The information about the RAM user.'),
}

model GetUserInRecycleBinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserInRecycleBinResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserInRecycleBin  GetUserInRecycleBinRequest
  * @return GetUserInRecycleBinResponse
 */
async function getUserInRecycleBin(request: GetUserInRecycleBinRequest): GetUserInRecycleBinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserInRecycleBin', 'POST', '/', 'json', false, 'json', request);
}

model GetUserMFAInfoRequest {
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user. This parameter is differently set in the following scenarios:

*   If you use a RAM user to call this operation, this parameter can be left empty. If you do not specify this parameter, information about the MFA device that is bound to the RAM user is queried.
*   If you use an Alibaba Cloud account to call this operation, you must set this parameter to the logon name of the RAM user that you want to query.', example='test@example.onaliyun.com', position='Query'),
}

model GetUserMFAInfoResponseBody = {
  isMFAEnable?: boolean(name='IsMFAEnable', description='Indicates whether the MFA device is enabled. Valid values:

*   true
*   false', example='true'),
  MFADevice?: {
    serialNumber?: string(name='SerialNumber', description='The serial number of the MFA device.', example='acs:ram::177242285274****:mfa/device001'),
    type?: string(name='Type', description='The type of the MFA device. Valid values:

*   VMFA: virtual MFA device.
*   U2F: Universal 2nd Factor (U2F) security key.', example='VMFA'),
  }(name='MFADevice', description='The information about the MFA device.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FCF7322A-20A9-4F68-8B7F-F86958839BC0'),
}

model GetUserMFAInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserMFAInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserMFAInfo  GetUserMFAInfoRequest
  * @return GetUserMFAInfoResponse
 */
async function getUserMFAInfo(request: GetUserMFAInfoRequest): GetUserMFAInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserMFAInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetUserSsoSettingsRequest {
}

model GetUserSsoSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='69FC3E5E-D3D9-434B-90CA-BBA8E0551A47'),
  userSsoSettings?: {
    auxiliaryDomain?: string(name='AuxiliaryDomain', description='The auxiliary domain name.', example='example.com'),
    metadataDocument?: string(name='MetadataDocument', description='The metadata file, which is Base64-encoded.', example='PD94bWwgdmVy****'),
    ssoEnabled?: boolean(name='SsoEnabled', description='Indicates whether user-based SSO is enabled.', example='false'),
    ssoLoginWithDomain?: boolean(name='SsoLoginWithDomain', description='Indicates whether the Security Assertion Markup Language (SAML) SSO requires a domain name in the `<saml:NameID>` element of the SAML response. If yes, the username specified by the identity provider (IdP) for SSO must have a domain name as the suffix.

*   If the value of the parameter is `true`, the `<saml:NameID>` element **must** be in the `username@domain` format. You can set `domain` to the default domain name or the configured domain alias.
*   If the value of the parameter is `false`, the `<saml:NameID>` element **must** be in the `username` format and **cannot** contain the `domain` suffix.

The default value is `true`.', example='true'),
  }(name='UserSsoSettings', description='The configurations of user-based SSO.'),
}

model GetUserSsoSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserSsoSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserSsoSettings  GetUserSsoSettingsRequest
  * @return GetUserSsoSettingsResponse
 */
async function getUserSsoSettings(request: GetUserSsoSettingsRequest): GetUserSsoSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserSsoSettings', 'POST', '/', 'json', false, 'json', request);
}

model GetVerificationInfoRequest {
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com', position='Query'),
}

model GetVerificationInfoResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B182C041-8C64-5F2F-A07B-FC67FAF89CF9'),
  securityEmailDevice?: {
    email?: string(name='Email', description='The email address.', example='username@example.com'),
    status?: string(name='Status', description='The status of the email. Valid values:

*   active: The email is activated.
*   pending: The email is pending for activation.', example='active'),
  }(name='SecurityEmailDevice', description='The information about the email.'),
  securityPhoneDevice?: {
    areaCode?: string(name='AreaCode', description='The international dialing code.', example='86'),
    phoneNumber?: string(name='PhoneNumber', description='The mobile phone number.', example='13900001234'),
    status?: string(name='Status', description='The status of the mobile phone. Valid values:

*   active: The mobile phone is activated.
*   pending: The mobile phone is pending for activation.', example='active'),
  }(name='SecurityPhoneDevice', description='The information about the mobile phone.'),
}

model GetVerificationInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVerificationInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVerificationInfo  GetVerificationInfoRequest
  * @return GetVerificationInfoResponse
 */
async function getVerificationInfo(request: GetVerificationInfoRequest): GetVerificationInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVerificationInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListAccessKeysRequest {
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.

If this parameter is empty, the AccessKey pairs of the current user are queried.', example='test@example.onaliyun.com', position='Query'),
}

model ListAccessKeysResponseBody = {
  accessKeys?: {
    accessKey?: [ 
    {
      accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID.', example='LTAI*******************'),
      createDate?: string(name='CreateDate', description='The time when the AccessKey pair was created.', example='2020-10-13T12:33:18Z'),
      status?: string(name='Status', description='The status of the AccessKey pair. Valid values:

*   Active
*   Inactive', example='Active'),
      updateDate?: string(name='UpdateDate', description='The time when the AccessKey pair was updated.', example='2020-10-13T12:33:18Z'),
    }
  ](name='AccessKey')
  }(name='AccessKeys', description='The AccessKey pairs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B450CA1-36E8-4AA2-8461-86B42BF4CC4E'),
}

model ListAccessKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccessKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAccessKeys  ListAccessKeysRequest
  * @return ListAccessKeysResponse
 */
async function listAccessKeys(request: ListAccessKeysRequest): ListAccessKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccessKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListAccessKeysInRecycleBinRequest {
  userId?: string(name='UserId', description='The ID of the Resource Access Management (RAM) user.', example='20732900249392****', position='Query'),
}

model ListAccessKeysInRecycleBinResponseBody = {
  accessKeys?: {
    accessKey?: [ 
    {
      accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID.', example='LTAI*******************'),
      createDate?: string(name='CreateDate', description='The time when the AccessKey pair was created.', example='2020-10-11T09:12:00Z'),
      deleteDate?: string(name='DeleteDate', description='The time when the AccessKey pair will be permanently deleted from the recycle bin.', example='2020-11-12T09:12:00Z'),
      recycleDate?: string(name='RecycleDate', description='The time when the AccessKey pair was deleted and moved to the recycle bin.', example='2020-10-12T09:12:00Z'),
    }
  ](name='AccessKey')
  }(name='AccessKeys', description='The information about the AccessKey pairs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
}

model ListAccessKeysInRecycleBinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccessKeysInRecycleBinResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAccessKeysInRecycleBin  ListAccessKeysInRecycleBinRequest
  * @return ListAccessKeysInRecycleBinResponse
 */
async function listAccessKeysInRecycleBin(request: ListAccessKeysInRecycleBinRequest): ListAccessKeysInRecycleBinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccessKeysInRecycleBin', 'POST', '/', 'json', false, 'json', request);
}

model ListAppSecretIdsRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='472457090344041****', position='Query'),
}

model ListAppSecretIdsResponseBody = {
  appSecrets?: {
    appSecret?: [ 
    {
      appId?: string(name='AppId', description='The ID of the application.', example='472457090344041****'),
      appSecretId?: string(name='AppSecretId', description='The ID of the application secret.', example='2efd5004-005c-4f05-83c6-5b1dd176****'),
      createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-26T03:18:39Z'),
    }
  ](name='AppSecret')
  }(name='AppSecrets', description='The details of the application secret.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5F2FD500-7173-47D6-BD2F-EB60879B4F16'),
}

model ListAppSecretIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppSecretIdsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAppSecretIds  ListAppSecretIdsRequest
  * @return ListAppSecretIdsResponse
 */
async function listAppSecretIds(request: ListAppSecretIdsRequest): ListAppSecretIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppSecretIds', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationProvisionInfosRequest {
  sourceType?: string(name='SourceType', description='The source of the applications. Valid values:

*   inner: The applications are from the current account.
*   external: The applications are from other accounts.', example='external', position='Query'),
}

model ListApplicationProvisionInfosResponseBody = {
  applicationProvisionInfos?: {
    applicationProvisionInfo?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='177242285274****'),
      appId?: string(name='AppId', description='The ID of the application.', example='452392483381546****'),
      appName?: string(name='AppName', description='The name of the application.', example='GiteePrd'),
      createDate?: string(name='CreateDate', description='The time when the application was installed. The value is a timestamp.', example='1603693518000'),
      delegatedScope?: {
        predefinedScopes?: {
          predefinedScope?: [ 
          {
            description?: string(name='Description', description='The description of the permission.', example='Obtains the OpenID of the user. This is the default scope and cannot be deleted.'),
            name?: string(name='Name', description='The name of the permission.', example='openid'),
          }
        ](name='PredefinedScope')
        }(name='PredefinedScopes', description='The information about the permissions that are granted to the application.'),
      }(name='DelegatedScope', description='The information about the permissions that are granted to the application.'),
      displayName?: string(name='DisplayName', description='The display name of the application.', example='GiteeAliyun'),
      updateDate?: string(name='UpdateDate', description='The update time. The value is a timestamp.', example='1603693518000'),
    }
  ](name='ApplicationProvisionInfo')
  }(name='ApplicationProvisionInfos', description='The information about the installed applications.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E403EBFD-C997-489D-BFC7-37C05E66D67C'),
}

model ListApplicationProvisionInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationProvisionInfosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApplicationProvisionInfos  ListApplicationProvisionInfosRequest
  * @return ListApplicationProvisionInfosResponse
 */
async function listApplicationProvisionInfos(request: ListApplicationProvisionInfosRequest): ListApplicationProvisionInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationProvisionInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsRequest {
}

model ListApplicationsResponseBody = {
  applications?: {
    application?: [ 
    {
      accessTokenValidity?: int32(name='AccessTokenValidity', description='The validity period of the access token. Unit: seconds.', example='3600'),
      accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the application belongs.', example='177242285274****'),
      appId?: string(name='AppId', description='The ID of the application.', example='441442900344560****'),
      appName?: string(name='AppName', description='The application name.', example='myapp'),
      appType?: string(name='AppType', description='The application type. Valid values:

*   WebApp: a web application.
*   NativeApp: a native application that runs on an operating system, such as a desktop or mobile operating system.
*   ServerApp: an application that can access Alibaba Cloud services without the need for user logon. Only applications that synchronize user information based on the System for Cross-domain Identity Management (SCIM) protocol are supported.', example='WebApp'),
      createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-23T09:33:22Z'),
      delegatedScope?: {
        predefinedScopes?: {
          predefinedScope?: [ 
          {
            description?: string(name='Description', description='The description of the permission.', example='Obtain the OpenID of the user. This is the default permission that you cannot remove.'),
            name?: string(name='Name', description='The name of the permission.', example='openid'),
            required?: boolean(name='Required', description='Indicates whether the permission is automatically selected by default when you install the application. Valid values:

*   true
*   false

`openid` is required by default.', example='true'),
          }
        ](name='PredefinedScope')
        }(name='PredefinedScopes', description='The information about the permissions that are granted on the application.'),
      }(name='DelegatedScope', description='The information about the permissions that are granted on the application.'),
      displayName?: string(name='DisplayName', description='The display name of the application.', example='myapp'),
      isMultiTenant?: boolean(name='IsMultiTenant', description='Indicates whether the application can be installed by using other Alibaba Cloud accounts.', example='true'),
      protocolVersion?: string(name='ProtocolVersion'),
      redirectUris?: {
        redirectUri?: [ string ](name='RedirectUri')
      }(name='RedirectUris', description='The callback URLs.'),
      refreshTokenValidity?: int32(name='RefreshTokenValidity', description='The validity period of the refresh token. Unit: seconds.', example='7776000'),
      secretRequired?: boolean(name='SecretRequired', description='Indicates whether a secret is required.', example='true'),
      updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-23T09:33:22Z'),
    }
  ](name='Application')
  }(name='Applications', description='The information about the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE458B58-8C40-46F7-A9D4-CB85136B0C06'),
}

model ListApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to query the applications within the current account. The returned result shows that only one application named `myapp` belongs to the current account.
  * @param request  the request parameters of ListApplications  ListApplicationsRequest
  * @return ListApplicationsResponse
 */
async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListExternalApplicationsRequest {
}

model ListExternalApplicationsResponseBody = {
  externalApplications?: {
    externalApplication?: [ 
    {
      appPrincipalName?: string(name='AppPrincipalName', description='The name of the external application principal. The value is in the `<app_name>@app.<account_id>.onaliyun.com` format.', example='GiteePrd@app.153082740420****.onaliyun.com'),
      createDate?: string(name='CreateDate', description='The time when the external application was installed. The value is a timestamp.', example='1603693318000'),
      delegatedScope?: {
        predefinedScopes?: {
          predefinedScope?: [ 
          {
            description?: string(name='Description', description='The description of the permission.', example='Obtains the OpenID of the user. This is the default scope and cannot be deleted.'),
            name?: string(name='Name', description='The name of the permission.', example='openid'),
          }
        ](name='PredefinedScope')
        }(name='PredefinedScopes', description='The information about the permissions that are granted to the external application.'),
      }(name='DelegatedScope', description='The information about the permissions that are granted to the external application.'),
      displayName?: string(name='DisplayName', description='The display name of the external application.', example='GiteeAliyun'),
      foreignAppId?: string(name='ForeignAppId', description='The ID of the external application.', example='407426893752729****'),
      tenantId?: string(name='TenantId', description='The ID of the Alibaba Cloud account for which the external application was installed.', example='173082740420****'),
      updateDate?: string(name='UpdateDate', description='The update time of the external application. The value is a timestamp.', example='1603693518000'),
    }
  ](name='ExternalApplication')
  }(name='ExternalApplications', description='The information about the external applications.'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  marker?: string(name='Marker', description='A pagination token. It can be used in the next request to retrieve a new page of results.

>  This parameter is returned only when `IsTruncated` is `true`.', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='936E1D9C-157D-45BD-8A3B-81C0716EB077'),
}

model ListExternalApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExternalApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExternalApplications  ListExternalApplicationsRequest
  * @return ListExternalApplicationsResponse
 */
async function listExternalApplications(request: ListExternalApplicationsRequest): ListExternalApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExternalApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsRequest {
  marker?: string(name='Marker', description='The `marker`. If part of a previous response is truncated, you can use this parameter to obtain the truncated part.', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', description='The number of entries to return. If a response is truncated because it reaches the value of `MaxItems`, the value of `IsTruncated` will be `true`.

Valid values: 1 to 100. Default value: 100.', example='100', position='Query'),
}

model ListGroupsResponseBody = {
  groups?: {
    group?: [ 
    {
      comments?: string(name='Comments', description='The description.', example='Dev-Team'),
      createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-19T12:33:18Z'),
      displayName?: string(name='DisplayName', description='The display name of the RAM user group.', example='Dev-Team'),
      groupId?: string(name='GroupId', description='The ID of the RAM user group.', example='740317625433843****'),
      groupName?: string(name='GroupName', description='The name of the RAM user group.', example='dev-team'),
      updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-19T12:33:18Z'),
    }
  ](name='Group')
  }(name='Groups', description='The information about the RAM user groups.'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  marker?: string(name='Marker', description='The `marker`. This parameter is returned only if the value of `IsTruncated` is `true`. If the parameter is returned, you can call this operation again and set this parameter to obtain the truncated part.', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='065527AA-2F2E-AD7C-7484-F2626CFE4934'),
}

model ListGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroups  ListGroupsRequest
  * @return ListGroupsResponse
 */
async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsForUserRequest {
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model ListGroupsForUserResponseBody = {
  groups?: {
    group?: [ 
    {
      comments?: string(name='Comments', description='The description.', example='Test-Team'),
      displayName?: string(name='DisplayName', description='The display name of the RAM user group.', example='Test-Team'),
      groupId?: string(name='GroupId', description='The ID of the RAM user group.', example='740317625433843****'),
      groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Test-Team'),
      joinDate?: string(name='JoinDate', description='The time when the RAM user was added.', example='2020-10-20T06:57:00Z'),
    }
  ](name='Group')
  }(name='Groups', description='The information about the RAM user groups.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7158A935-FB5E-49A7-8E52-FDA5B2B67247'),
}

model ListGroupsForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupsForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroupsForUser  ListGroupsForUserRequest
  * @return ListGroupsForUserResponse
 */
async function listGroupsForUser(request: ListGroupsForUserRequest): ListGroupsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListOIDCProvidersRequest {
  marker?: string(name='Marker', description='The `marker`. If part of a previous response is truncated, you can use this parameter to obtain the truncated part.', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', description='The number of entries per page. If a response is truncated because it reaches the value of `MaxItems`, the value of `IsTruncated` will be `true`.

Valid values: 1 to 100. Default value: 100.', example='100', position='Query'),
}

model ListOIDCProvidersResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='false'),
  marker?: string(name='Marker', description='The `marker`. This parameter is returned only if the value of `IsTruncated` is `true`. If the parameter is returned, you can call this operation again and set this parameter to obtain the truncated part.``', example='EXAMPLE'),
  OIDCProviders?: {
    OIDCProvider?: [ 
    {
      arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the OIDC IdP.', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
      clientIds?: string(name='ClientIds', description='The ID of the client, If you want to specify multiple client IDs, separate the client IDs with commas (,).', example='498469743454717****'),
      createDate?: string(name='CreateDate', description='The time when the OIDC IdP was created. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
      description?: string(name='Description', description='The description of the OIDC IdP.', example='This is a new OIDC Provider.'),
      fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS certificate. If multiple fingerprints are returned, the fingerprints are separated by commas (,).', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
      gmtCreate?: string(name='GmtCreate', description='The timestamp when the OIDC IdP was created.', example='1636613763000'),
      gmtModified?: string(name='GmtModified', description='The timestamp when the OIDC IdP was modified.', example='1636706309000'),
      issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='12'),
      issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer.', example='https://dev-xxxxxx.okta.com'),
      OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider'),
      updateDate?: string(name='UpdateDate', description='The time when the OIDC IdP was modified. The time is displayed in UTC.', example='2021-11-12T08:38:29Z'),
    }
  ](name='OIDCProvider')
  }(name='OIDCProviders', description='The information about the OIDC IdP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D2148337-B86A-57F0-8B31-EB7BE0125226'),
}

model ListOIDCProvidersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOIDCProvidersResponseBody(name='body'),
}

/**
  * @description ###
  * This topic provides an example on how to query all OpenID Connect (OIDC) identity providers (IdPs) within your Alibaba Cloud account. The response shows that your Alibaba Cloud account has only one OIDC IdP named `TestOIDCProvider`.
  * @param request  the request parameters of ListOIDCProviders  ListOIDCProvidersRequest
  * @return ListOIDCProvidersResponse
 */
async function listOIDCProviders(request: ListOIDCProvidersRequest): ListOIDCProvidersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOIDCProviders', 'POST', '/', 'json', false, 'json', request);
}

model ListPasskeysRequest {
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com', position='Query'),
}

model ListPasskeysResponseBody = {
  passkeys?: [ 
    {
      createDate?: string(name='CreateDate', description='The time when the passkey was created. The value is a timestamp.', example='1737450279'),
      lastUseDate?: string(name='LastUseDate', description='The time when the passkey was last used. The value is a timestamp.', example='1737450390'),
      passkeyId?: string(name='PasskeyId', description='The ID of the passkey.', example='PASSKEY-CuZjEHhWcr7GIQOMGvkS'),
      passkeyName?: string(name='PasskeyName', description='The name of the passkey.', example='device1'),
    }
  ](name='Passkeys', description='The information about the passkeys.'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model ListPasskeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPasskeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPasskeys  ListPasskeysRequest
  * @return ListPasskeysResponse
 */
async function listPasskeys(request: ListPasskeysRequest): ListPasskeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPasskeys', 'POST', '/', 'json', false, 'json', request);
}

model ListPredefinedScopesRequest {
  appType?: string(name='AppType', description='The type of the application. Valid values:

*   WebApp
*   NativeApp
*   ServerApp

If this parameter is empty, the permissions on all types of applications are queried.', example='WebApp', position='Query'),
}

model ListPredefinedScopesResponseBody = {
  predefinedScopes?: {
    predefinedScope?: [ 
    {
      description?: string(name='Description', description='The description of the permission scope.', example='Obtain the OpenID of the user. This is the default permission that you cannot remove.'),
      name?: string(name='Name', description='The name of the permission scope.', example='openid'),
    }
  ](name='PredefinedScope')
  }(name='PredefinedScopes', description='The information about application permissions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='955C096D-EC99-480B-AF37-3921109107D0'),
}

model ListPredefinedScopesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPredefinedScopesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPredefinedScopes  ListPredefinedScopesRequest
  * @return ListPredefinedScopesResponse
 */
async function listPredefinedScopes(request: ListPredefinedScopesRequest): ListPredefinedScopesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPredefinedScopes', 'POST', '/', 'json', false, 'json', request);
}

model ListRecentGovernanceMetricsRequest {
}

model ListRecentGovernanceMetricsResponseBody = {
  generateTime?: string(name='GenerateTime', description='The time when the report was generated.', example='2025-02-10T02:11:23Z'),
  governanceMetrics?: {
    governanceMetric?: [ 
    {
      governanceItem?: string(name='GovernanceItem', description='The name of the governance item.', example='RecentAccountLoginTimes'),
      metricType?: string(name='MetricType', description='The type of the metric value. Valid values:

*   Number
*   String
*   Boolean', example='Number'),
      metricValue?: any(name='MetricValue', description='The metric value. The type of the metric value is determined by `MetricType`.', example='5'),
    }
  ](name='GovernanceMetric')
  }(name='GovernanceMetrics', description='The metric values of all governance items. The value of the parameter is an array, and each row in the array contains the metric value of a governance item.'),
  requestId?: string(name='RequestId', description='The request ID.', example='49846A91-C1C5-5C2B-BC64-8B0B7BADB4C0'),
}

model ListRecentGovernanceMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecentGovernanceMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRecentGovernanceMetrics  ListRecentGovernanceMetricsRequest
  * @return ListRecentGovernanceMetricsResponse
 */
async function listRecentGovernanceMetrics(request: ListRecentGovernanceMetricsRequest): ListRecentGovernanceMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRecentGovernanceMetrics', 'POST', '/', 'json', false, 'json', request);
}

model ListSAMLProvidersRequest {
  marker?: string(name='Marker', description='The `marker`. If part of a previous response is truncated, you can use this parameter to obtain the truncated part.', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', description='The number of entries to return. If a response is truncated because it reaches the value of `MaxItems`, the value of `IsTruncated` will be `true`.

Valid values: 1 to 100. Default value: 100.', example='100', position='Query'),
}

model ListSAMLProvidersResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  marker?: string(name='Marker', description='The `marker`. This parameter is returned only if the value of `IsTruncated` is `true`. If the parameter is returned, you can call this operation again and set this parameter to obtain the truncated part.``', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='2D8B70D3-E194-41C9-93C5-F6A10D716D24'),
  SAMLProviders?: {
    SAMLProvider?: [ 
    {
      arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the IdP.', example='acs:ram::177242285274****:saml-provider/test-provider'),
      createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-22T06:26:15Z'),
      description?: string(name='Description', description='The description.', example='This is a provider.'),
      SAMLProviderName?: string(name='SAMLProviderName', description='The name of the IdP.', example='test-provider'),
      updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-22T06:26:15Z'),
    }
  ](name='SAMLProvider')
  }(name='SAMLProviders', description='The information about IdPs.'),
}

model ListSAMLProvidersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSAMLProvidersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSAMLProviders  ListSAMLProvidersRequest
  * @return ListSAMLProvidersResponse
 */
async function listSAMLProviders(request: ListSAMLProvidersRequest): ListSAMLProvidersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSAMLProviders', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token that is used to initiate the next request if the response of the current request is truncated. You can use the token to initiate another request and obtain the remaining records.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. If a response is truncated because it reaches the value of PageSize, the value of IsTruncated will be true. Valid values: 1 to 100. Default value: 100.', example='2', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The ID of resource N.

Valid values of N: 1 to 50. If ResourceType is set to user, the resource ID is the ID of the RAM user.

> You must specify only one of the following parameters: ResourceId and ResourcePrincipalName.', position='Query'),
  resourcePrincipalName?: [ string ](name='ResourcePrincipalName', description='The name of resource N.

Valid values of N: 1 to 50. If ResourceType is set to user, the resource name is the name of the RAM user.

> You must specify only one of the following parameters: ResourceId and ResourcePrincipalName.', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid value:

*   user: a RAM user', example='user', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.

Valid values of N: 1 to 20. N must be consecutive.', example='operator'),
      value?: string(name='Value', description='The value of tag N.

Valid values of N: 1 to 20. N must be consecutive.', example='alice'),
    }
  ](name='Tag', description='The tag value.

Valid values of N: 1 to 20. N must be consecutive.', position='Query'),
}

model ListTagResourcesResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  nextToken?: string(name='NextToken', description='The marker. This parameter is returned only if the value of IsTruncated is true. If the parameter is returned, you can call this operation again and set this parameter to obtain the truncated part.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The request ID.', example='4BE83135-0B08-467C-B3A2-27B312FD0F57'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='20732900249392****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   user: a RAM user', example='user'),
      tagKey?: string(name='TagKey', description='The tag key.', example='operator'),
      tagValue?: string(name='TagValue', description='The tag value.', example='alice'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The tag key.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @description ###
  * You must specify at least one of the following parameters or parameter pairs in a request to determine a query object:
  * *   `ResourceId.N`
  * *   `Tag.N.Key`
  * *   `Tag.N.Key` and `Tag.N.Value`
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListUserBasicInfosRequest {
  marker?: string(name='Marker', description='The `marker`. If part of a previous response is truncated, you can use this parameter to obtain the truncated part.', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', description='The number of entries to return. If a response is truncated because it reaches the value of `MaxItems`, the value of `IsTruncated` will be `true`.

Valid values: 1 to 1000. Default value: 100.', example='100', position='Query'),
  status?: string(name='Status', description='The status of the RAM users that you want to query. Valid values: active, freeze, and active,freeze. If you set the value to active,freeze, RAM users in both active and freeze states are queried. If you leave the parameter empty, the value active is used by default. If the Tag parameter is specified, you cannot specify the Status parameter. In this case, RAM users in both states are queried.', example='active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.

Valid values of N: 1 to 20. N must be consecutive.', example='operator'),
      value?: string(name='Value', description='The value of tag N.

Valid values of N: 1 to 20. N must be consecutive.', example='alice'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListUserBasicInfosResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  marker?: string(name='Marker', description='The `marker`. This parameter is returned only if the value of `IsTruncated` is `true`. If the parameter is returned, you can call this operation again and set this parameter to obtain the truncated part.``', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='EF2B25FD-CADE-445B-BE4D-E082E0FF1A0F'),
  userBasicInfos?: {
    userBasicInfo?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='test'),
      status?: string(name='Status', description='The status of the RAM user.', example='active'),
      userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
      userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
    }
  ](name='UserBasicInfo')
  }(name='UserBasicInfos', description='The basic information about the RAM users.'),
}

model ListUserBasicInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserBasicInfosResponseBody(name='body'),
}

/**
  * @description You can call the following API operations to query information about all RAM users:
  * *   ListUsers: queries the details of all RAM users.
  * *   ListUserBasicInfos: queries the basic information about all RAM users. The basic information includes only the logon names (`UserPrincipalName`), display names (`DisplayName`), and user IDs (`UserId`).
  * @param request  the request parameters of ListUserBasicInfos  ListUserBasicInfosRequest
  * @return ListUserBasicInfosResponse
 */
async function listUserBasicInfos(request: ListUserBasicInfosRequest): ListUserBasicInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserBasicInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  marker?: string(name='Marker', description='The `marker`. If part of a previous response is truncated, you can use this parameter to obtain the truncated part.', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', description='The number of entries per page. If a response is truncated because it reaches the value of `MaxItems`, the value of `IsTruncated` will be true.

Valid values: 1 to 1000. Default value: 1000.', example='1000', position='Query'),
  status?: string(name='Status', description='The status of the RAM users that you want to query. Valid values: active, freeze, and active,freeze. If you leave the parameter empty, the value active is used by default. If you specify a value for the Tag parameter, users in both states are queried.', example='active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.

Valid values of N: 1 to 20. N must be consecutive.', example='operator'),
      value?: string(name='Value', description='The value of tag N.

Valid values of N: 1 to 20. N must be consecutive.', example='alice'),
    }
  ](name='Tag', description='The tags. A maximum number of 20 tags are supported.', position='Query'),
}

model ListUsersResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  marker?: string(name='Marker', description='The parameter that is used to obtain the truncated part. It takes effect only when `IsTruncated` is set to `true`.', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B450CA1-36E8-4AA2-8461-86B42BF4CC4E'),
  users?: {
    user?: [ 
    {
      comments?: string(name='Comments', description='The description.', example='This is a cloud computing engineer.'),
      createDate?: string(name='CreateDate', description='The point in time when the RAM user was created. The time is displayed in UTC.', example='2020-10-12T09:12:00Z'),
      displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='test'),
      email?: string(name='Email', description='The email address of the RAM user.

>  This parameter applies only to the Alibaba Cloud China site (aliyun.com).', example='alice@example.com'),
      lastLoginDate?: string(name='LastLoginDate', description='The timestamp when the RAM user last logged on to the console.', example='2020-10-12T09:12:00Z'),
      mobilePhone?: string(name='MobilePhone', description='The mobile phone number of the RAM user.

>  This parameter applies only to the Alibaba Cloud China site (aliyun.com).', example='86-1868888****'),
      provisionType?: string(name='ProvisionType', description='The source of the RAM user. Valid values:

*   Manual: The RAM user is manually created in the RAM console.
*   SCIM: The RAM user is mapped by using System for Cross-domain Identity Management (SCIM).
*   CloudSSO: The RAM user is mapped from a CloudSSO user.', example='CloudSSO'),
      status?: string(name='Status', description='The status of the RAM user.', example='active'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='oparator'),
          tagValue?: string(name='TagValue', description='The value of the tag', example='alice'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags.'),
      updateDate?: string(name='UpdateDate', description='The point in time when the information about the RAM user was last modified. The time is displayed in UTC.', example='2020-10-13T09:19:49Z'),
      userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
      userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
    }
  ](name='User')
  }(name='Users', description='The information about the RAM users.'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @description ### [](#)
  * You can call the following API operations to query the details of all RAM users:
  * *   ListUsers: queries the details of all RAM users.
  * *   ListUserBasicInfos: queries the basic information about all RAM users. The basic information includes only the logon names (`UserPrincipalName`), display names (`DisplayName`), and user IDs (`UserId`).
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersForGroupRequest {
  groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Test-Team', position='Query'),
  marker?: string(name='Marker', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.``

When you call the operation for the first time, if the total number of returned entries exceeds the value of `MaxItems`, the entries are truncated. The system returns entries based on the value of `MaxItems` and does not return the excess entries. In this case, the value of the response parameter `IsTruncated` is `true`, and `Marker` is returned. In the next call, you can use the value of `Marker` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of `IsTruncated` becomes `false`. This way, all entries are returned.', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', description='The number of entries per page.

Valid values: 1 to 100.

Default value: 100.', example='100', position='Query'),
}

model ListUsersForGroupResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  marker?: string(name='Marker', description='The pagination token that is used in the next request to retrieve a new page of results.

>  This parameter is returned only when `IsTruncated` is `true`.', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='789FF581-B3C8-43A8-9115-54304B46D05C'),
  users?: {
    user?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='test'),
      joinDate?: string(name='JoinDate', description='The time when the RAM user was added to the RAM user group. The time is displayed in UTC.', example='2020-10-20T06:57:00Z'),
      userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
      userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
    }
  ](name='User')
  }(name='Users', description='The information about the RAM users.'),
}

model ListUsersForGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersForGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsersForGroup  ListUsersForGroupRequest
  * @return ListUsersForGroupResponse
 */
async function listUsersForGroup(request: ListUsersForGroupRequest): ListUsersForGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersForGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersInRecycleBinRequest {
  filter?: string(name='Filter', description='The filter condition that is used to query information about a specified RAM user in the recycle bin.

You must specify this parameter in the `UserPrincipalName eq <username>@<AccountAlias>.onaliyun.com` format.', example='UserPrincipalName eq test@example.onaliyun.com', position='Query'),
  marker?: string(name='Marker', description='The `marker`. If part of a previous response is truncated, you can use this parameter to obtain the truncated part.', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', description='The number of entries to return. If a response is truncated because it reaches the value of `MaxItems`, the value of `IsTruncated` will be true.

Valid values: 1 to 100. Default value: 100.', example='100', position='Query'),
}

model ListUsersInRecycleBinResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  marker?: string(name='Marker', description='The parameter that is used to obtain the truncated part. It takes effect only when `IsTruncated` is set to `true`.', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='3687BD52-49FD-585B-AB14-CD05B7C76963'),
  users?: {
    user?: [ 
    {
      createDate?: string(name='CreateDate', description='The time when the RAM user was created.', example='2020-10-12T09:12:00Z'),
      deleteDate?: string(name='DeleteDate', description='The time when the RAM user will be permanently deleted from the recycle bin.', example='2020-11-15T09:12:00Z'),
      displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='test@example.onaliyun.com'),
      recycleDate?: string(name='RecycleDate', description='The time when the RAM user was deleted and moved to the recycle bin.', example='2020-10-15T09:12:00Z'),
      userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
      userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com'),
    }
  ](name='User')
  }(name='Users', description='The information about the RAM users.'),
}

model ListUsersInRecycleBinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersInRecycleBinResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsersInRecycleBin  ListUsersInRecycleBinRequest
  * @return ListUsersInRecycleBinResponse
 */
async function listUsersInRecycleBin(request: ListUsersInRecycleBinRequest): ListUsersInRecycleBinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersInRecycleBin', 'POST', '/', 'json', false, 'json', request);
}

model ListVirtualMFADevicesRequest {
  marker?: string(name='Marker', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.``

When you call the operation for the first time, if the total number of returned entries exceeds the value of `MaxItems`, the entries are truncated. The system returns entries based on the value of `MaxItems` and does not return the excess entries. In this case, the value of the response parameter `IsTruncated` is `true`, and `Marker` is returned. In the next call, you can use the value of `Marker` and maintain the settings of the other request parameters to query the excess entries. You can repeat the call until the value of the `IsTruncated` parameter becomes `false`. This way, all entries are returned.', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', description='The number of entries per page.

Valid values: 1 to 100.

Default value: 100.', example='100', position='Query'),
}

model ListVirtualMFADevicesResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the response is truncated. Valid values:

*   true
*   false', example='true'),
  marker?: string(name='Marker', description='The pagination token that is used in the next request to retrieve a new page of results.

>  This parameter is returned only when `IsTruncated` is `true`.', example='EXAMPLE'),
  requestId?: string(name='RequestId', description='The request ID.', example='32272612-DF82-485E-8BA9-AFA4E0C3D0BA'),
  virtualMFADevices?: {
    virtualMFADevice?: [ 
    {
      activateDate?: string(name='ActivateDate', description='The time when the MFA device was activated.', example='2020-10-16T06:02:09Z'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the MFA device.', example='acs:ram::177242285274****:mfa/test'),
      user?: {
        displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='test'),
        userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
        userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@177242285274****.onaliyun.com'),
      }(name='User', description='The information of the RAM user that has an MFA device bound.'),
    }
  ](name='VirtualMFADevice')
  }(name='VirtualMFADevices', description='The information about the MFA device.'),
}

model ListVirtualMFADevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVirtualMFADevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVirtualMFADevices  ListVirtualMFADevicesRequest
  * @return ListVirtualMFADevicesResponse
 */
async function listVirtualMFADevices(request: ListVirtualMFADevicesRequest): ListVirtualMFADevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirtualMFADevices', 'POST', '/', 'json', false, 'json', request);
}

model ProvisionApplicationRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='407426893752729****', position='Query'),
  scopes?: string(name='Scopes', description='The permissions that are granted to the application. Separate multiple permissions with a semicolon (;).

>  For more information about the supported permissions, see [Overview](https://help.aliyun.com/document_detail/93693.html).', example='openid;aliuid', position='Query'),
}

model ProvisionApplicationResponseBody = {
  applicationProvisionInfo?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='177242285274****'),
    appId?: string(name='AppId', description='The ID of the application.', example='452392483381546****'),
    appName?: string(name='AppName', description='The name of the application.', example='GiteePrd'),
    appPrincipalName?: string(name='AppPrincipalName', description='The name of the application principal. The value is in the `<app_name>@app.<account_id>.onaliyun.com` format.', example='GiteePrd@app.177242285274****.onaliyun.com'),
    createDate?: string(name='CreateDate', description='The time when the application was installed. The value is a timestamp.', example='1603693518000'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description', description='The description of the permission.', example='Obtains the OpenID of the user. This is the default scope and cannot be deleted.'),
          name?: string(name='Name', description='The name of the permission.', example='openid'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes', description='The information about the permissions that are granted to the application.'),
    }(name='DelegatedScope', description='The information about the permissions that are granted to the application.'),
    displayName?: string(name='DisplayName', description='The display name of the application.', example='GiteeAliyun'),
    tenantId?: string(name='TenantId', description='The ID of the Alibaba Cloud account for which the application was installed.', example='177242285274****'),
    updateDate?: string(name='UpdateDate', description='The update time. The value is a timestamp.', example='1603693518000'),
  }(name='ApplicationProvisionInfo', description='The installation information of the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C8AE06ED-9593-5BF9-8D4A-68D5DDCC90AB'),
}

model ProvisionApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProvisionApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ProvisionApplication  ProvisionApplicationRequest
  * @return ProvisionApplicationResponse
 */
async function provisionApplication(request: ProvisionApplicationRequest): ProvisionApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ProvisionApplication', 'POST', '/', 'json', false, 'json', request);
}

model ProvisionExternalApplicationRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='403550611646604****', position='Query'),
  scopes?: string(name='Scopes', description='The permissions that are granted to the application. Separate multiple permissions with a semicolon (;).

>  For more information about the supported permissions, see [Overview](https://help.aliyun.com/document_detail/93693.html).', example='openid;aliuid', position='Query'),
}

model ProvisionExternalApplicationResponseBody = {
  externalApplication?: {
    appPrincipalName?: string(name='AppPrincipalName', description='The name of the application principal. The value is in the `<app_name>@app.<account_id>.onaliyun.com` format.', example='GiteePrd@app.177242285274****.onaliyun.com'),
    createDate?: string(name='CreateDate', description='The time when the application was installed. The value is a timestamp.', example='1603693518000'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description', description='The description of the permission scope.', example='Obtains the OpenID of the user. This is the default scope and cannot be deleted.'),
          name?: string(name='Name', description='The name of the permission scope.', example='openid'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes', description='The information about the scopes of permissions that are granted to the application.'),
    }(name='DelegatedScope', description='The information about the scopes of permissions that are granted to the application.'),
    displayName?: string(name='DisplayName', description='The display name of the application.', example='GiteeAliyun'),
    foreignAppId?: string(name='ForeignAppId', description='The ID of the application.', example='403550611646604****'),
    tenantId?: string(name='TenantId', description='The ID of the Alibaba Cloud account to which the external application belongs.', example='157242285274****'),
    updateDate?: string(name='UpdateDate', description='The update time. The value is a timestamp.', example='1603693518000'),
  }(name='ExternalApplication', description='The information about the external application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='55535873-9A6B-5C87-853F-C7CD258826F2'),
}

model ProvisionExternalApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProvisionExternalApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ProvisionExternalApplication  ProvisionExternalApplicationRequest
  * @return ProvisionExternalApplicationResponse
 */
async function provisionExternalApplication(request: ProvisionExternalApplicationRequest): ProvisionExternalApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ProvisionExternalApplication', 'POST', '/', 'json', false, 'json', request);
}

model RemoveClientIdFromOIDCProviderRequest {
  clientId?: string(name='ClientId', description='The client ID that you want to remove.

The client ID can contain letters, digits, and special characters and cannot start with the special characters. The special characters are `periods, (.), hyphens (-), underscores (_), colons (:), and forward slashes (/)`.``

The client ID can be up to 128 characters in length.', example='498469743454717****', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider', position='Query'),
}

model RemoveClientIdFromOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the OIDC IdP.', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', description='The ID of the client. If multiple client IDs are returned, the client IDs are separated by commas (,).', example='598469743454717****'),
    createDate?: string(name='CreateDate', description='The time when the OIDC IdP was created. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', description='The description of the OIDC IdP.', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS certificate. If multiple fingerprints are returned, the fingerprints are separated by commas (,).', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', description='The timestamp when the OIDC IdP was created.', example='1636613763000'),
    gmtModified?: string(name='GmtModified', description='The timestamp when the OIDC IdP was modified.', example='1636706309000'),
    issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='12'),
    issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer.', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', description='The time when the OIDC IdP was modified. The time is displayed in UTC.', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider', description='The information about the OIDC IdP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9A8F3B-AFA5-5C8F-999D-F97BC7CF1FC5'),
}

model RemoveClientIdFromOIDCProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveClientIdFromOIDCProviderResponseBody(name='body'),
}

/**
  * @description ###
  * This topic provides an example on how to remove the client ID `498469743454717****` from the OIDC IdP named `TestOIDCProvider`.
  * @param request  the request parameters of RemoveClientIdFromOIDCProvider  RemoveClientIdFromOIDCProviderRequest
  * @return RemoveClientIdFromOIDCProviderResponse
 */
async function removeClientIdFromOIDCProvider(request: RemoveClientIdFromOIDCProviderRequest): RemoveClientIdFromOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveClientIdFromOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model RemoveFingerprintFromOIDCProviderRequest {
  fingerprint?: string(name='Fingerprint', description='The fingerprint that you want to remove.', example='6938fd4d98bab03faadb97b34396831e3780****', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider', position='Query'),
}

model RemoveFingerprintFromOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the OIDC IdP.', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', description='The ID of the client. If multiple client IDs are returned, the client IDs are separated by commas (,).', example='0oa4u6l8x5WoaVbd****'),
    createDate?: string(name='CreateDate', description='The time when the OIDC IdP was created. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', description='The description of the OIDC IdP.', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS certificate. If multiple fingerprints are returned, the fingerprints are separated by commas (,).', example='5938fd4d98bab03faadb97b34396831e3780****'),
    gmtCreate?: string(name='GmtCreate', description='The timestamp when the OIDC IdP was created.', example='1636613763000'),
    gmtModified?: string(name='GmtModified', description='The timestamp when the OIDC IdP was modified.', example='1636706309000'),
    issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='12'),
    issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer.', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', description='The time when the OIDC IdP was modified. The time is displayed in UTC.', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider', description='The information about the OIDC IdP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C90CE971-4C7F-5D93-BD3E-2D0E79D03C01'),
}

model RemoveFingerprintFromOIDCProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveFingerprintFromOIDCProviderResponseBody(name='body'),
}

/**
  * @description ###
  * This topic provides an example on how to remove the fingerprint `6938fd4d98bab03faadb97b34396831e3780****` from the OIDC IdP named `TestOIDCProvider`.
  * @param request  the request parameters of RemoveFingerprintFromOIDCProvider  RemoveFingerprintFromOIDCProviderRequest
  * @return RemoveFingerprintFromOIDCProviderResponse
 */
async function removeFingerprintFromOIDCProvider(request: RemoveFingerprintFromOIDCProviderRequest): RemoveFingerprintFromOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveFingerprintFromOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserFromGroupRequest {
  groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Test-Team', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='alice@example.onaliyun.com', position='Query'),
}

model RemoveUserFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model RemoveUserFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUserFromGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUserFromGroup  RemoveUserFromGroupRequest
  * @return RemoveUserFromGroupResponse
 */
async function removeUserFromGroup(request: RemoveUserFromGroupRequest): RemoveUserFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model RestoreAccessKeyFromRecycleBinRequest {
  userAccessKeyId?: string(name='UserAccessKeyId', description='The AccessKey ID of the RAM user.', example='LTAI*******************', position='Query'),
  userId?: string(name='UserId', description='The ID of the Resource Access Management (RAM) user.', example='20732900249392****', position='Query'),
}

model RestoreAccessKeyFromRecycleBinResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
}

model RestoreAccessKeyFromRecycleBinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestoreAccessKeyFromRecycleBinResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestoreAccessKeyFromRecycleBin  RestoreAccessKeyFromRecycleBinRequest
  * @return RestoreAccessKeyFromRecycleBinResponse
 */
async function restoreAccessKeyFromRecycleBin(request: RestoreAccessKeyFromRecycleBinRequest): RestoreAccessKeyFromRecycleBinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreAccessKeyFromRecycleBin', 'POST', '/', 'json', false, 'json', request);
}

model RestoreUserFromRecycleBinRequest {
  userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****', position='Query'),
}

model RestoreUserFromRecycleBinResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
}

model RestoreUserFromRecycleBinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestoreUserFromRecycleBinResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestoreUserFromRecycleBin  RestoreUserFromRecycleBinRequest
  * @return RestoreUserFromRecycleBinResponse
 */
async function restoreUserFromRecycleBin(request: RestoreUserFromRecycleBinRequest): RestoreUserFromRecycleBinResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreUserFromRecycleBin', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultDomainRequest {
  defaultDomainName: string(name='DefaultDomainName', description='The default domain name.

The default domain name is in the format of `<AccountAlias>.onaliyun.com`. `<AccountAlias>` indicates the account alias. By default, the value of AccountAlias is the ID of the Alibaba Cloud account. The default domain name must end with `.onaliyun.com`.

The default domain name can contain up to 64 characters in length. The default domain name can contain letters, digits, periods (.), underscores (_), and hyphens (-).

>  The default domain name cannot start or end with a hyphen (-) and cannot contain two consecutive hyphens (-).

This parameter is required.', example='examplecompany.onaliyun.com', position='Query'),
}

model SetDefaultDomainResponseBody = {
  defaultDomainName?: string(name='DefaultDomainName', description='The default domain name.', example='examplecompany.onaliyun.com'),
  requestId?: string(name='RequestId', description='The request ID.', example='66815255-7CCE-4759-AC37-9755794C3626'),
}

model SetDefaultDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDefaultDomain  SetDefaultDomainRequest
  * @return SetDefaultDomainResponse
 */
async function setDefaultDomain(request: SetDefaultDomainRequest): SetDefaultDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultDomain', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordPolicyRequest {
  hardExpire?: boolean(name='HardExpire', description='Specifies whether to disable logon after the password expires. Valid values:

*   true: After the password expires, you cannot use the password to log on to the console. You can log on to the console only after you reset the password by using your Alibaba Cloud account or as a RAM user that has administrative rights.
*   false: After the password expires, you can change the password to log on to the console. This is the default value.', example='false', position='Query'),
  maxLoginAttemps?: int32(name='MaxLoginAttemps', description='The maximum number of password retries. If you enter the wrong passwords for the specified consecutive times, the account is locked for one hour.

Valid values: 0 to 32.

The default value is 0, which indicates that the password retries are not limited.', example='0', position='Query'),
  maxPasswordAge?: int32(name='MaxPasswordAge', description='The validity period of the password.

Valid values: 0 to 1095. Unit: days.

The default value is 0, which indicates that the password never expires.', example='0', position='Query'),
  minimumPasswordDifferentCharacter?: int32(name='MinimumPasswordDifferentCharacter', description='The minimum number of unique characters in the password.

Valid values: 0 to 8.

The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.', example='0', position='Query'),
  minimumPasswordLength?: int32(name='MinimumPasswordLength', description='The minimum number of characters in the password.

Valid values: 8 to 32. Default value: 8.', example='8', position='Query'),
  passwordNotContainUserName?: boolean(name='PasswordNotContainUserName', description='Specifies whether to exclude the username from the password. Valid values:

*   true: A password cannot contain the username.
*   false: A password can contain the username. This is the default value.', example='false', position='Query'),
  passwordReusePrevention?: int32(name='PasswordReusePrevention', description='The policy for password history check.

The previous N passwords cannot be reused. Valid values of N: 0 to 24.

The default value is 0, which indicates that RAM users can reuse previous passwords.', example='0', position='Query'),
  requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters', description='Specifies whether the password must contain lowercase letters. Valid values:

*   true
*   false (default)', example='false', position='Query'),
  requireNumbers?: boolean(name='RequireNumbers', description='Specifies whether the password must contain digits. Valid values:

*   true
*   false (default)', example='false', position='Query'),
  requireSymbols?: boolean(name='RequireSymbols', description='Specifies whether the password must contain special characters. Valid values:

*   true
*   false (default)', example='false', position='Query'),
  requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters', description='Specifies whether the password must contain uppercase letters. Valid values:

*   true
*   false (default)', example='false', position='Query'),
}

model SetPasswordPolicyResponseBody = {
  passwordPolicy?: {
    hardExpire?: boolean(name='HardExpire', description='Indicates whether to disable logon after the password expires.', example='false'),
    maxLoginAttemps?: int32(name='MaxLoginAttemps', description='The maximum number of password retries.', example='0'),
    maxPasswordAge?: int32(name='MaxPasswordAge', description='The validity period of the password.', example='0'),
    minimumPasswordDifferentCharacter?: int32(name='MinimumPasswordDifferentCharacter', description='The minimum number of unique characters in the password.', example='0'),
    minimumPasswordLength?: int32(name='MinimumPasswordLength', description='The minimum number of characters in the password.', example='8'),
    passwordNotContainUserName?: boolean(name='PasswordNotContainUserName', description='Indicates whether to exclude the username from the password.', example='false'),
    passwordReusePrevention?: int32(name='PasswordReusePrevention', description='The policy for password history check.', example='0'),
    requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters', description='Indicates whether the password must contain lowercase letters.', example='false'),
    requireNumbers?: boolean(name='RequireNumbers', description='Indicates whether the password must contain digits.', example='false'),
    requireSymbols?: boolean(name='RequireSymbols', description='Indicates whether the password must contain special characters.', example='false'),
    requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters', description='Indicates whether the password must contain uppercase letters.', example='false'),
  }(name='PasswordPolicy', description='The details of the password policy.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3FB5551F-B2ED-40D4-8392-1E4AC2384EFD'),
}

model SetPasswordPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPasswordPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPasswordPolicy  SetPasswordPolicyRequest
  * @return SetPasswordPolicyResponse
 */
async function setPasswordPolicy(request: SetPasswordPolicyRequest): SetPasswordPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordPolicy', 'POST', '/', 'json', false, 'json', request);
}

model SetSecurityPreferenceRequest {
  allowUserToChangePassword?: boolean(name='AllowUserToChangePassword', description='Specifies whether RAM users can change their passwords. Valid values:

*   true (default)
*   false', example='true', position='Query'),
  allowUserToLoginWithPasskey?: boolean(name='AllowUserToLoginWithPasskey', description='Specifies whether a RAM user can use a passkey for logon. Valid values:

*   true: A RAM user can use a passkey for logon. This is the default value.
*   false: A RAM user cannot use a passkey for logon.', example='true', position='Query'),
  allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys', description='Specifies whether RAM users can manage their AccessKey pairs. Valid values:

*   true
*   false (default)', example='false', position='Query'),
  allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices', description='Specifies whether RAM users can manage their MFA devices. Valid values:

*   true (default)
*   false', example='true', position='Query'),
  allowUserToManagePersonalDingTalk?: boolean(name='AllowUserToManagePersonalDingTalk', description='Specifies whether RAM users can manage their personal DingTalk accounts, such as binding and unbinding of the accounts. Valid values:

*   true (default)
*   false', example='true', position='Query'),
  enableSaveMFATicket?: boolean(name='EnableSaveMFATicket', description='Specifies whether RAM users can remember the MFA devices for seven days. Valid values:

*   true
*   false (default)', example='false', position='Query'),
  loginNetworkMasks?: string(name='LoginNetworkMasks', description='The subnet mask that specifies the IP addresses from which you can log on to the Alibaba Cloud Management Console. This parameter takes effect on password-based logon and single sign-on (SSO). This parameter does not take effect on API calls that are authenticated by using AccessKey pairs.

*   If you specify a subnet mask, RAM users can use only the IP addresses in the subnet mask to log on to the Alibaba Cloud Management Console.
*   If you do not specify a subnet mask, RAM users can use all IP addresses to log on to the Alibaba Cloud Management Console.

If you need to specify multiple subnet masks, separate the subnet masks with semicolons (;). Example: 192.168.0.0/16;10.0.0.0/8.

You can specify up to 40 subnet masks. The total length of the subnet masks can be a maximum of 512 characters.', example='10.0.0.0/8', position='Query'),
  loginSessionDuration?: int32(name='LoginSessionDuration', description='The validity period of the logon session of RAM users.

Valid values: 1 to 24. Unit: hours.

Default value: 6.', example='6', position='Query'),
  MFAOperationForLogin?: string(name='MFAOperationForLogin', description='Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console. This parameter is used to replace EnforceMFAForLogin. EnforceMFAForLogin is still valid. However, we recommend that you use MFAOperationForLogin. Valid values:

*   mandatory: MFA is required for all RAM users. If you use EnforceMFAForLogin, set the value to true.
*   independent (default): User-specific settings are applied. If you use EnforceMFAForLogin, set the value to false.
*   adaptive: MFA is required only for RAM users who initiated unusual logons.', example='adaptive', position='Query'),
  operationForRiskLogin?: string(name='OperationForRiskLogin', description='Specifies whether to enable MFA for RAM users who initiated unusual logons. Valid values:

*   autonomous (default): yes. MFA is prompted for RAM users who initiated unusual logons. However, the RAM users are allowed to skip MFA.
*   enforceVerify: MFA is prompted for RAM users who initiated unusual logons and the RAM users cannot skip MFA.', example='autonomous', deprecated='true', position='Query'),
  verificationTypes?: [ string ](name='VerificationTypes', description='The MFA methods.', shrink='json', position='Query'),
}

model SetSecurityPreferenceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='17494710-B4BA-4185-BBBB-C1A6ABDE1639'),
  securityPreference?: {
    accessKeyPreference?: {
      allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys', description='Indicates whether RAM users can manage their AccessKey pairs.', example='false'),
    }(name='AccessKeyPreference', description='The AccessKey pair preference.'),
    loginProfilePreference?: {
      allowUserToChangePassword?: boolean(name='AllowUserToChangePassword', description='Indicates whether RAM users can change their passwords.', example='true'),
      allowUserToLoginWithPasskey?: boolean(name='AllowUserToLoginWithPasskey', description='Indicates whether a RAM user can use a passkey for logon.', example='false'),
      enableSaveMFATicket?: boolean(name='EnableSaveMFATicket', description='Indicates whether RAM users can remember the MFA devices for seven days.', example='false'),
      loginNetworkMasks?: string(name='LoginNetworkMasks', description='The subnet mask.', example='10.0.0.0/8'),
      loginSessionDuration?: int32(name='LoginSessionDuration', description='The validity period of the logon session of RAM users.', example='6'),
      MFAOperationForLogin?: string(name='MFAOperationForLogin', description='Indicates whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console.', example='adaptive'),
      operationForRiskLogin?: string(name='OperationForRiskLogin', description='Indicates whether to enable MFA for RAM users who initiated unusual logons.', example='autonomous', deprecated='true'),
    }(name='LoginProfilePreference', description='The logon preference.'),
    MFAPreference?: {
      allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices', description='Indicates whether RAM users can manage their MFA devices.', example='false'),
    }(name='MFAPreference', description='The MFA preference.'),
    maxIdleDays?: {
      maxIdleDaysForAccessKeys?: int32(name='MaxIdleDaysForAccessKeys', description='The maximum number of days that the AccessKey pair of a RAM user can stay unused. If an AccessKey pair is not used in the previous specified number of days, the AccessKey pair is automatically disabled on the next day. The default value is 730. You cannot change the value.', example='730'),
      maxIdleDaysForUsers?: int32(name='MaxIdleDaysForUsers', description='The maximum number of days that a RAM user can stay idle. If a RAM user for whom console logon is enabled does not log on to the console in the previous specified number of days, console logon is automatically disabled for the RAM user on the next day. SSO is not involved. The default value is 730. You cannot change the value.', example='730'),
    }(name='MaxIdleDays', description='The maximum idle periods. Unit: days.'),
    personalInfoPreference?: {
      allowUserToManagePersonalDingTalk?: boolean(name='AllowUserToManagePersonalDingTalk', description='Indicates whether RAM users can manage their personal DingTalk accounts, such as binding and unbinding of the accounts.', example='true'),
    }(name='PersonalInfoPreference', description='The personal information preference.'),
    verificationPreference?: {
      verificationTypes?: [ string ](name='VerificationTypes', description='The MFA methods.'),
    }(name='VerificationPreference', description='The MFA method preference.'),
  }(name='SecurityPreference', description='The details of security preferences.'),
}

model SetSecurityPreferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSecurityPreferenceResponseBody(name='body'),
}

/**
  * @description ###
  * This topic provides an example on how to enable multi-factor authentication (MFA) only for RAM users who initiated unusual logons.
  * @param request  the request parameters of SetSecurityPreference  SetSecurityPreferenceRequest
  * @return SetSecurityPreferenceResponse
 */
async function setSecurityPreference(request: SetSecurityPreferenceRequest): SetSecurityPreferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSecurityPreference', 'POST', '/', 'json', false, 'json', request);
}

model SetUserSsoSettingsRequest {
  auxiliaryDomain?: string(name='AuxiliaryDomain', description='The auxiliary domain name.', example='example.com', position='Query'),
  metadataDocument?: string(name='MetadataDocument', description='The metadata file, which is Base64-encoded.

The file is provided by an identity provider (IdP) that supports Security Assertion Markup Language (SAML) 2.0.', example='PD94bWwgdmVy****', position='Query'),
  ssoEnabled?: boolean(name='SsoEnabled', description='Specifies whether to enable SSO for the RAM user. Valid values:

*   true
*   false (default)', example='true', position='Query'),
  ssoLoginWithDomain?: boolean(name='SsoLoginWithDomain', description='Specifies whether the SAML SSO requires a domain name in the `<saml:NameID>` element of the SAML response. If yes, the username specified by the IdP for SSO must have a domain name as the suffix.

*   If the value of the parameter is `true`, the `<saml:NameID>` element **must** be in the `username@domain` format. You can set `domain` to the default domain name or the configured domain alias.
*   If the value of the parameter is `false`, the `<saml:NameID>` element **must** be in the `username` format and **cannot** contain the `domain` suffix.

Set the value to the default `true`.', example='true', position='Query'),
}

model SetUserSsoSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='87F2E3F6-28A0-43F3-A77F-F7760E62F61E'),
  userSsoSettings?: {
    auxiliaryDomain?: string(name='AuxiliaryDomain', description='The auxiliary domain name.', example='example.com'),
    metadataDocument?: string(name='MetadataDocument', description='The metadata file, which is Base64-encoded.', example='PD94bWwgdmVy****'),
    ssoEnabled?: boolean(name='SsoEnabled', description='Indicates whether user-based SSO is enabled.', example='true'),
    ssoLoginWithDomain?: boolean(name='SsoLoginWithDomain', description='Indicates whether the SAML SSO requires a domain name in the `<saml:NameID>` element of the SAML response. If yes, the username specified by the IdP for SSO must have a domain name as the suffix.

*   If the value of the parameter is `true`, the `<saml:NameID>` element **must** be in the `username@domain` format. You can set `domain` to the default domain name or the configured domain alias.
*   If the value of the parameter is `false`, the `<saml:NameID>` element **must** be in the `username` format and **cannot** contain the `domain` suffix.

The default value is `true`.', example='true'),
  }(name='UserSsoSettings', description='The configurations of user-based SSO.'),
}

model SetUserSsoSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetUserSsoSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetUserSsoSettings  SetUserSsoSettingsRequest
  * @return SetUserSsoSettingsResponse
 */
async function setUserSsoSettings(request: SetUserSsoSettingsRequest): SetUserSsoSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserSsoSettings', 'POST', '/', 'json', false, 'json', request);
}

model SetVerificationInfoRequest {
  email?: string(name='Email', description='The email address.

>  If you set `VerifyType` to `email`, you must specify this parameter.', example='username@example.com', position='Query'),
  mobilePhone?: string(name='MobilePhone', description='The mobile phone number.

>  If you set `VerifyType` to `sms`, you must specify this parameter.', example='86-13900001234', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com', position='Query'),
  verifyType?: string(name='VerifyType', description='The multi-factor authentication (MFA) method. Valid values:

*   sms: mobile phone.
*   email: email.', example='sms', position='Query'),
}

model SetVerificationInfoResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B182C041-8C64-5F2F-A07B-FC67FAF89CF9'),
}

model SetVerificationInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetVerificationInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetVerificationInfo  SetVerificationInfoRequest
  * @return SetVerificationInfoResponse
 */
async function setVerificationInfo(request: SetVerificationInfoRequest): SetVerificationInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetVerificationInfo', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='The ID of resource N.

Valid values of N: 1 to 50. If the ResourceType parameter is set to user, the resource ID is the ID of the RAM user.

>  You must specify only one of the following parameters: `ResourceId` and `ResourcePrincipalName`.', position='Query'),
  resourcePrincipalName?: [ string ](name='ResourcePrincipalName', description='The name of resource N.

Valid values of N: 1 to 50. If the ResourceType parameter is set to user, the resource name is the name of the RAM user.

>  You must specify only one of the following parameters: `ResourceId` and `ResourcePrincipalName`.', example='TagResources', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid value:

*   user: a Resource Access Management (RAM) user.', example='user', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.

Valid values of N: 1 to 20. You cannot specify empty strings as tag keys. The tag key can be up to 128 characters in length. The tag key cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.', example='operator'),
      value?: string(name='Value', description='The value of tag N.

Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='alice'),
    }
  ](name='Tag', description='The key of tag N.

Valid values of N: 1 to 20. You cannot specify empty strings as tag keys. The tag key can be up to 128 characters in length. The tag key cannot start with aliyun or acs: and cannot contain `http://` or `https://`.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3687BD52-49FD-585B-AB14-CD05B7C76963'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnbindMFADeviceRequest {
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model UnbindMFADeviceResponseBody = {
  MFADevice?: {
    serialNumber?: string(name='SerialNumber', description='The serial number of the MFA device.', example='acs:ram::151298381312****:mfa/device001'),
  }(name='MFADevice', description='The information about the MFA device.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A26CB3E9-1021-452A-AC57-3134B3BA0E4C'),
}

model UnbindMFADeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindMFADeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindMFADevice  UnbindMFADeviceRequest
  * @return UnbindMFADeviceResponse
 */
async function unbindMFADevice(request: UnbindMFADeviceRequest): UnbindMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model UnbindVerificationRequest {
  email?: string(name='Email', description='The email address.

>  If you set `VerifyType` to `email`, you must specify this parameter.', example='username@example.com', position='Query'),
  mobilePhone?: string(name='MobilePhone', description='The mobile phone number.

>  If you set `VerifyType` to `sms`, you must specify this parameter.', example='86-13900001234', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example.onaliyun.com', position='Query'),
  verifyType?: string(name='VerifyType', description='The multi-factor authentication (MFA) method. Valid values:

*   sms: mobile phone.
*   email: email.', example='sms', position='Query'),
}

model UnbindVerificationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B182C041-8C64-5F2F-A07B-FC67FAF89CF9'),
}

model UnbindVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindVerificationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindVerification  UnbindVerificationRequest
  * @return UnbindVerificationResponse
 */
async function unbindVerification(request: UnbindVerificationRequest): UnbindVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindVerification', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the resource. Valid values:

*   true: remove all tags from the resources.
*   false (default): does not remove all tags from the resources.

> This parameter takes effect only when TagKey.N is not set in the request.', example='false', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of resources.

Valid values of N: 1 to 50. If the ResourceType parameter is set to user, the resource ID is the ID of the RAM user.

> You must specify only one of the following parameters: ResourceId and ResourcePrincipalName.', example='UntagResources', position='Query'),
  resourcePrincipalName?: [ string ](name='ResourcePrincipalName', description='The names of resources.

Valid values of N: 1 to 50. If the ResourceType parameter is set to user, the resource name is the name of the RAM user.

> You must specify only one of the following parameters: ResourceId and ResourcePrincipalName.', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid value:

*   user: a RAM user', example='user', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag keys of resources.

Valid values of N: 1 to 20. N must be consecutive.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6AC79B74-9A78-58E2-818B-1D38EDC64D67'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAccessKeyRequest {
  status: string(name='Status', description='The status of the AccessKey pair. Valid values:

*   Active
*   Inactive

This parameter is required.', example='Active', position='Query'),
  userAccessKeyId: string(name='UserAccessKeyId', description='The AccessKey ID of the AccessKey pair for which you want to modify the status.

This parameter is required.', example='LTAI*******************', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.

If this parameter is empty, the status of the AccessKey pair for the current user is modified.', example='test@example.onaliyun.com', position='Query'),
}

model UpdateAccessKeyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model UpdateAccessKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAccessKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAccessKey  UpdateAccessKeyRequest
  * @return UpdateAccessKeyResponse
 */
async function updateAccessKey(request: UpdateAccessKeyRequest): UpdateAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationRequest {
  appId: string(name='AppId', description='The ID of the application.

This parameter is required.', example='472457090344041****', position='Query'),
  newAccessTokenValidity?: int32(name='NewAccessTokenValidity', description='The validity period of the access token.

Valid values: 900 to 10800. Unit: seconds.', example='3600', position='Query'),
  newDisplayName?: string(name='NewDisplayName', description='The display name.', example='NewApp', position='Query'),
  newIsMultiTenant?: boolean(name='NewIsMultiTenant', description='Specifies whether the application can be installed by using other Alibaba Cloud accounts. Valid values:

*   true
*   false', example='true', position='Query'),
  newPredefinedScopes?: string(name='NewPredefinedScopes', description='The permission that is granted on the application.

For more information about the application permission scope, see [OAuth scopes](https://help.aliyun.com/document_detail/93693.html). You can also call the [ListPredefinedScopes](https://help.aliyun.com/document_detail/187206.html) operation to query the permissions that are supported by different types of applications.

If you enter multiple permissions, separate them with semicolons (;).

The new value of this parameter overwrites the original value, and the permission specified by the new value takes effect. For example, if the original value is `/acs/ccc`, and the new value is `/acs/alidns`, `/acs/alidns` takes effect. If you want to retain the original permission and the `/acs/alidns` permission, set the value to `/acs/ccc;/acs/alidns`.', example='openid', position='Query'),
  newRedirectUris?: string(name='NewRedirectUris', description='The callback URL.

If you enter multiple callback URLs, separate them with semicolons (;).', example='https://www.example.com', position='Query'),
  newRefreshTokenValidity?: int32(name='NewRefreshTokenValidity', description='The validity period of the refresh token.

Valid values: 7200 to 31536000. Unit: seconds.', example='7776000', position='Query'),
  newRequiredScopes?: string(name='NewRequiredScopes', description='The required permission.

You can specify one or more permissions for the `RequiredScopes` parameter. After you specify this parameter, the required permissions are automatically selected and cannot be revoked when a user grants permissions on the application.

If you also specify the `NewPredefinedScopes` parameter, the `NewPredefinedScopes` parameter specifies the permissions that can be granted on the application, and this parameter specifies the required permissions.

If you enter multiple permissions, separate them with semicolons (;).

The new value of this parameter overwrites the original value, and the required permission specified by the new value takes effect.

>  If the permission that you specify for the `RequiredScopes` parameter is not included in value of the `PredefinedScopes` parameter, the permission does not take effect.', example='profile;aliuid', position='Query'),
  newSecretRequired?: boolean(name='NewSecretRequired', description='Specifies whether a secret is required. Valid values:

*   true
*   false

> 

*   For applications of the WebApp and ServerApp types, this parameter is automatically set to true and cannot be changed.
*   For applications of the NativeApp type, this parameter can be set to true or false. If you do not set this parameter, false is used. Applications of the NativeApp type run in untrusted environments and the secrets of these applications are not protected. Therefore, we recommend that you do not set this parameter to true unless otherwise specified. For more information, see [Use an application of the NativeApp type to log on to Alibaba Cloud](https://help.aliyun.com/document_detail/93697.html).', example='true', position='Query'),
}

model UpdateApplicationResponseBody = {
  application?: {
    accessTokenValidity?: int32(name='AccessTokenValidity', description='The validity period of the access token. Unit: seconds.', example='3600'),
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the application belongs.', example='177242285274****'),
    appId?: string(name='AppId', description='The ID of the application.', example='472457090344041****'),
    appName?: string(name='AppName', description='The application name.', example='myapp'),
    appType?: string(name='AppType', description='The application type.', example='WebApp'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-23T08:06:57Z'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description', description='The description of the permission.', example='Obtain the OpenID of the user. This is the default permission that you cannot remove.'),
          name?: string(name='Name', description='The name of the permission.', example='openid'),
          required?: boolean(name='Required', description='Indicates whether the permission is automatically selected by default when you install the application. Valid values:

*   true
*   false

`openid` is required by default.', example='true'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes', description='The information about the permissions that are granted on the application.'),
    }(name='DelegatedScope', description='The information about the permissions that are granted on the application.'),
    displayName?: string(name='DisplayName', description='The display name of the application.', example='NewApp'),
    isMultiTenant?: boolean(name='IsMultiTenant', description='Indicates whether the application can be installed by using other Alibaba Cloud accounts.', example='true'),
    protocolVersion?: string(name='ProtocolVersion'),
    redirectUris?: {
      redirectUri?: [ string ](name='RedirectUri')
    }(name='RedirectUris', description='The callback URLs.'),
    refreshTokenValidity?: int32(name='RefreshTokenValidity', description='The validity period of the refresh token. Unit: seconds.', example='7776000'),
    secretRequired?: boolean(name='SecretRequired', description='Indicates whether a secret is required.', example='true'),
    updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-23T08:06:57Z'),
  }(name='Application', description='The information about the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6616F09B-2768-4C11-8866-A8EE4C4A583E'),
}

model UpdateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApplication  UpdateApplicationRequest
  * @return UpdateApplicationResponse
 */
async function updateApplication(request: UpdateApplicationRequest): UpdateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplication', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Dev-Team', position='Query'),
  newComments?: string(name='NewComments', description='The new description.

The description can be up to 128 characters in length.', example='Test-Team', position='Query'),
  newDisplayName?: string(name='NewDisplayName', description='The new display name of the RAM user group.

The name can be up to 24 characters in length.', example='Test-Team', position='Query'),
  newGroupName?: string(name='NewGroupName', description='The new name of the RAM user group.

The name can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='Test-Team', position='Query'),
}

model UpdateGroupResponseBody = {
  group?: {
    comments?: string(name='Comments', description='The description.', example='Test-Team'),
    createDate?: string(name='CreateDate', description='The creation time.', example='2020-10-19T16:15:17Z'),
    displayName?: string(name='DisplayName', description='The display name of the RAM user group.', example='Test-Team'),
    groupId?: string(name='GroupId', description='The ID of the RAM user group.', example='740317625433843****'),
    groupName?: string(name='GroupName', description='The name of the RAM user group.', example='Test-Team'),
    updateDate?: string(name='UpdateDate', description='The update time.', example='2020-10-20T03:44:27Z'),
  }(name='Group', description='The information about the RAM user group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CDA656E3-3CE9-4A03-A8A3-B42A0C3C3287'),
}

model UpdateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateGroup  UpdateGroupRequest
  * @return UpdateGroupResponse
 */
async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLoginProfileRequest {
  MFABindRequired?: boolean(name='MFABindRequired', description='Specifies whether to forcefully enable multi-factor authentication (MFA) for the RAM user. Valid values:

*   true: forcefully enables MFA for the RAM user. The RAM user must bind an MFA device upon the next logon.
*   false: does not forcefully enable MFA for the RAM user.', example='false', position='Query'),
  password?: string(name='Password', description='The new password that is used to log on to the console.

The new password must meet the complexity requirements.', example='mypassword', position='Query'),
  passwordResetRequired?: boolean(name='PasswordResetRequired', description='Specifies whether the RAM user is required to reset the password upon the next logon. Valid values:

*   true
*   false', example='false', position='Query'),
  status?: string(name='Status', description='Specifies whether to enable password-based logons to the console. Valid values:

*   Active: enables password-based logons to the console.
*   Inactive: disables password-based logons to the console.', example='Active', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', description='The logon name of the RAM user.

This parameter is required.', example='test@example.onaliyun.com', position='Query'),
}

model UpdateLoginProfileResponseBody = {
  loginProfile?: {
    autoDisableLoginStatus?: string(name='AutoDisableLoginStatus', description='Indicates whether console logon is automatically disabled if a RAM user does not log on to the console in the previous specified number of days. The number of days is specified by MaxIdleDaysForUsers. The default value is true, and you cannot change the value.', example='true'),
    MFABindRequired?: boolean(name='MFABindRequired', description='Indicates whether MFA must be enabled.', example='false'),
    passwordResetRequired?: boolean(name='PasswordResetRequired', description='Indicates whether the RAM user is required to reset the password upon the next logon.', example='false'),
    status?: string(name='Status', description='Indicates whether to enable password-based logons to the console.', example='Active'),
    updateDate?: string(name='UpdateDate', description='The modification time.', example='2020-10-14T07:48:41Z'),
    userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='test@example11.onaliyun.com'),
  }(name='LoginProfile', description='The console logon configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='BCDB6A7F-2199-41D9-B577-4FA536A5ADE1'),
}

model UpdateLoginProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoginProfileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLoginProfile  UpdateLoginProfileRequest
  * @return UpdateLoginProfileResponse
 */
async function updateLoginProfile(request: UpdateLoginProfileRequest): UpdateLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOIDCProviderRequest {
  clientIds?: string(name='ClientIds', description='The ID of the client. If you want to specify multiple client IDs, separate the client IDs with commas (,).

A client ID can contain letters, digits, and special characters and cannot start with the special characters. The special characters are `periods (.), hyphens (-), underscores (_), colons (:), and forward slashes (/)`.``

A client ID can be up to 128 characters in length.

>  If you specify this parameter, all the client IDs of the OIDC IdP are replaced. If you need to only add or remove a client ID, call the AddClientIdToOIDCProvider or RemoveClientIdFromOIDCProvider operation. For more information, see [AddClientIdToOIDCProvider](https://help.aliyun.com/document_detail/332057.html) or [RemoveClientIdFromOIDCProvider](https://help.aliyun.com/document_detail/332058.html).', example='498469743454717****', position='Query'),
  issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='6', position='Query'),
  newDescription?: string(name='NewDescription', description='The description of the OIDC IdP.

The description can be up to 256 characters in length.', example='This is a new OIDC Provider.', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider', position='Query'),
}

model UpdateOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the OIDC IdP.', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', description='The ID of the client. If multiple client IDs are returned, the client IDs are separated by commas (,).', example='498469743454717****'),
    createDate?: string(name='CreateDate', description='The time when the OIDC IdP was created. The time is displayed in UTC.', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', description='The description of the OIDC IdP.', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', description='The fingerprint of the HTTPS certificate. If multiple fingerprints are returned, the fingerprints are separated by commas (,).', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', description='The timestamp when the OIDC IdP was created.', example='1636613763000'),
    gmtModified?: string(name='GmtModified', description='The timestamp when the OIDC IdP was modified.', example='1636706309000'),
    issuanceLimitTime?: long(name='IssuanceLimitTime', description='The earliest time when an external IdP can issue an ID token. If the value of the iat field in the ID token is later than the current time, the request is rejected. Unit: hours. Valid values: 1 to 168.', example='6'),
    issuerUrl?: string(name='IssuerUrl', description='The URL of the issuer.', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', description='The name of the OIDC IdP.', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', description='The time when the OIDC IdP was modified. The time is displayed in UTC.', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider', description='The information about the OIDC IdP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E4C4D1BD-2558-5BD1-8C26-A5D7FB174A55'),
}

model UpdateOIDCProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOIDCProviderResponseBody(name='body'),
}

/**
  * @description ###
  * This topic provides an example on how to change the description of the OIDC IdP named `TestOIDCProvider` to `This is a new OIDC Provider.`
  * @param request  the request parameters of UpdateOIDCProvider  UpdateOIDCProviderRequest
  * @return UpdateOIDCProviderResponse
 */
async function updateOIDCProvider(request: UpdateOIDCProviderRequest): UpdateOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePasskeyRequest {
  passkeyId?: string(name='PasskeyId', description='The ID of the passkey.', example='PASSKEY-CuZjEHhWcr7GIQOMGvkS', position='Query'),
  passkeyName?: string(name='PasskeyName', description='The name of the passkey.', example='device1', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the Resource Access Management (RAM) user.', example='test@example.onaliyun.com', position='Query'),
}

model UpdatePasskeyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model UpdatePasskeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePasskeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePasskey  UpdatePasskeyRequest
  * @return UpdatePasskeyResponse
 */
async function updatePasskey(request: UpdatePasskeyRequest): UpdatePasskeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePasskey', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSAMLProviderRequest {
  newDescription?: string(name='NewDescription', description='The new description.

>  You must specify at least one of the `NewDescription` and `NewEncodedSAMLMetadataDocument` parameters.', example='This is a new provider.', position='Query'),
  newEncodedSAMLMetadataDocument?: string(name='NewEncodedSAMLMetadataDocument', description='The new metadata file.

>  You must specify at least one of the `NewDescription` and `NewEncodedSAMLMetadataDocument` parameters.', example='PD94bWwgdmVy****', position='Query'),
  SAMLProviderName: string(name='SAMLProviderName', description='The name of the IdP whose information you want to modify.

This parameter is required.', example='test-provider', position='Query'),
}

model UpdateSAMLProviderResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E5EDDFD2-3654-4F9F-9780-4AE7D81823EF'),
  SAMLProvider?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the IdP.', example='acs:ram::177242285274****:saml-provider/test-provider'),
    createDate?: string(name='CreateDate', description='The point in time at which the IdP was created. The time is displayed in UTC.', example='2020-10-22T02:37:05Z'),
    description?: string(name='Description', description='The description of the IdP.', example='This is a new provider.'),
    SAMLProviderName?: string(name='SAMLProviderName', description='The name of the IdP.', example='test-provider'),
    updateDate?: string(name='UpdateDate', description='The point in time at which the information about the IdP was modified. The time is displayed in UTC.', example='2020-10-22T02:51:20Z'),
  }(name='SAMLProvider', description='The information about the IdP.'),
}

model UpdateSAMLProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSAMLProviderResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to change the description of an IdP named `test-provider` to `This is a new provider.`
  * @param request  the request parameters of UpdateSAMLProvider  UpdateSAMLProviderRequest
  * @return UpdateSAMLProviderResponse
 */
async function updateSAMLProvider(request: UpdateSAMLProviderRequest): UpdateSAMLProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSAMLProvider', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  newComments?: string(name='NewComments', description='The new description of the RAM user.

The description must be 1 to 128 characters in length.', example='This is a cloud computing engineer.', position='Query'),
  newDisplayName?: string(name='NewDisplayName', description='The new display name of the RAM user.

The name must be 1 to 24 characters in length.', example='new', position='Query'),
  newEmail?: string(name='NewEmail', description='The new email address of the RAM user.

> This parameter is valid only on the China site (aliyun.com).', example='alice@example.com', position='Query'),
  newMobilePhone?: string(name='NewMobilePhone', description='The new mobile phone number of the RAM user.

Format: \\<Country code>-\\<Mobile phone number>.

> This parameter is valid only on the China site (aliyun.com).', example='86-1868888****', position='Query'),
  newUserPrincipalName?: string(name='NewUserPrincipalName', description='The new logon name of the RAM user.

The name is in the format of `<username>@<AccountAlias>.onaliyun.com`. `<username>` indicates the name of the RAM user. `<AccountAlias>.onaliyun.com` indicates the default domain name.

The value of `NewUserPrincipalName` must be `1 to 128` characters in length and can contain letters, digits, periods (.), hyphens (-), and underscores (_). The value of `<username>` must be `1 to 64` characters in length.', example='new@example.onaliyun.com', position='Query'),
  userId?: string(name='UserId', description='The ID of the RAM user.

> You must specify only one of the following parameters: `UserPrincipalName` and `UserId`.', example='20732900249392****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.

> You must specify only one of the following parameters: `UserPrincipalName` and `UserId`.', example='test@example.onaliyun.com', position='Query'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1B56DD42-6962-4F89-A19C-079EED1F0FE3'),
  user?: {
    comments?: string(name='Comments', description='The description.', example='This is a cloud computing engineer.'),
    createDate?: string(name='CreateDate', description='The time when the RAM user was created.', example='2020-10-12T09:12:00Z'),
    displayName?: string(name='DisplayName', description='The display name of the RAM user.', example='new'),
    email?: string(name='Email', description='The email address of the RAM user.

> This parameter is valid only on the China site (aliyun.com).', example='alice@example.com'),
    lastLoginDate?: string(name='LastLoginDate', description='The last time when the RAM user logged on to the Alibaba Cloud Management Console.', example='2020-10-12T09:12:00Z'),
    mobilePhone?: string(name='MobilePhone', description='The mobile phone number of the RAM user.

> This parameter is valid only on the China site (aliyun.com).', example='86-1868888****'),
    provisionType?: string(name='ProvisionType', description='The source of the RAM user. Valid values:

*   Manual: The RAM user is manually created in the RAM console.
*   SCIM: The RAM user is mapped by using System for Cross-domain Identity Management (SCIM).
*   CloudSSO: The RAM user is mapped from a CloudSSO user.', example='Manual'),
    updateDate?: string(name='UpdateDate', description='The time when the information about the RAM user was updated.', example='2020-10-13T09:19:49Z'),
    userId?: string(name='UserId', description='The ID of the RAM user.', example='20732900249392****'),
    userPrincipalName?: string(name='UserPrincipalName', description='The logon name of the RAM user.', example='new@example.onaliyun.com'),
  }(name='User', description='The information about the RAM user.'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

/**
  * @description This topic provides an example to show how to modify the name of a RAM user from `test@example.onaliyun.com` to `new@example.onaliyun.com`.
  * @param request  the request parameters of UpdateUser  UpdateUserRequest
  * @return UpdateUserResponse
 */
async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

