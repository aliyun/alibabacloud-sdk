/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ims';
  @version = '2019-08-15';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddClientIdToOIDCProviderRequest {
  clientId?: string(name='ClientId', example='598469743454717****', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider', position='Query'),
}

model AddClientIdToOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', example='498469743454717****,598469743454717****'),
    createDate?: string(name='CreateDate', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', example='1636613763000'),
    gmtModified?: string(name='GmtModified', example='1636706309000'),
    issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider'),
  requestId?: string(name='RequestId', example='B49B8FA7-87FC-5308-AE75-5EC9E36C360A'),
}

model AddClientIdToOIDCProviderResponse = {
  headers: map[string]string(name='headers'),
  body: AddClientIdToOIDCProviderResponseBody(name='body'),
}

async function addClientIdToOIDCProvider(request: AddClientIdToOIDCProviderRequest): AddClientIdToOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddClientIdToOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model AddFingerprintToOIDCProviderRequest {
  fingerprint?: string(name='Fingerprint', example='902ef2deeb3c5b13ea4c3d5193629309e231****', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider', position='Query'),
}

model AddFingerprintToOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:oidc-provider/OIDCProvider'),
    clientIds?: string(name='ClientIds', example='498469743454717****'),
    createDate?: string(name='CreateDate', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', example='502ef2deeb3c5b13ea4c3d5193629309e231****,902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', example='1636613763000'),
    gmtModified?: string(name='GmtModified', example='1636706309000'),
    issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider'),
  requestId?: string(name='RequestId', example='4B809BBC-0E78-544A-A91A-648926412E3E'),
}

model AddFingerprintToOIDCProviderResponse = {
  headers: map[string]string(name='headers'),
  body: AddFingerprintToOIDCProviderResponseBody(name='body'),
}

async function addFingerprintToOIDCProvider(request: AddFingerprintToOIDCProviderRequest): AddFingerprintToOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFingerprintToOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model AddUserToGroupRequest {
  groupName?: string(name='GroupName', example='Test-Team', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model AddUserToGroupResponseBody = {
  requestId?: string(name='RequestId', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model AddUserToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserToGroupResponseBody(name='body'),
}

async function addUserToGroup(request: AddUserToGroupRequest): AddUserToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToGroup', 'POST', '/', 'json', false, 'json', request);
}

model BindMFADeviceRequest {
  authenticationCode1?: string(name='AuthenticationCode1', example='123456', position='Query'),
  authenticationCode2?: string(name='AuthenticationCode2', example='654321', position='Query'),
  serialNumber?: string(name='SerialNumber', example='acs:ram::177242285274****:mfa/device001', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model BindMFADeviceResponseBody = {
  requestId?: string(name='RequestId', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model BindMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindMFADeviceResponseBody(name='body'),
}

async function bindMFADevice(request: BindMFADeviceRequest): BindMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model ChangePasswordRequest {
  newPassword: string(name='NewPassword', example='newpassword', position='Query'),
  oldPassword: string(name='OldPassword', example='mypassword', position='Query'),
}

model ChangePasswordResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model ChangePasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ChangePasswordResponseBody(name='body'),
}

async function changePassword(request: ChangePasswordRequest): ChangePasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangePassword', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccessKeyRequest {
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model CreateAccessKeyResponseBody = {
  accessKey?: {
    accessKeyId?: string(name='AccessKeyId', example='LTAI4G3HaMmeHpay2gcq****'),
    accessKeySecret?: string(name='AccessKeySecret', example='Y3MSLE6OgizS4qrz5LVFDoyZEL****'),
    createDate?: string(name='CreateDate', example='2020-10-15T08:08:54Z'),
    status?: string(name='Status', example='Active'),
  }(name='AccessKey'),
  requestId?: string(name='RequestId', example='19DDD9F7-AFCC-4D72-8CBA-CCE5A142E7AB'),
}

model CreateAccessKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccessKeyResponseBody(name='body'),
}

async function createAccessKey(request: CreateAccessKeyRequest): CreateAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppSecretRequest {
  appId: string(name='AppId', example='472457090344041****', position='Query'),
}

model CreateAppSecretResponseBody = {
  appSecret?: {
    appId?: string(name='AppId', example='472457090344041****'),
    appSecretId?: string(name='AppSecretId', example='2efd5004-005c-4f05-83c6-5b1dd176****'),
    appSecretValue?: string(name='AppSecretValue', example='ai78ZmmxnlUG1jXlBZRDFKos9DIjY4m17Q7dCpMwn1rqXsTGb1X1XmrmveMp****'),
    createDate?: string(name='CreateDate', example='2020-10-26T02:52:31Z'),
  }(name='AppSecret'),
  requestId?: string(name='RequestId', example='EE46FC3C-3BDE-4771-B531-27B7B6EB533D'),
}

model CreateAppSecretResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppSecretResponseBody(name='body'),
}

async function createAppSecret(request: CreateAppSecretRequest): CreateAppSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppSecret', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  accessTokenValidity?: int32(name='AccessTokenValidity', example='3600', position='Query'),
  appName?: string(name='AppName', example='myapp', position='Query'),
  appType: string(name='AppType', example='WebApp', position='Query'),
  displayName: string(name='DisplayName', example='myapp', position='Query'),
  isMultiTenant?: boolean(name='IsMultiTenant', example='false', position='Query'),
  predefinedScopes?: string(name='PredefinedScopes', example='aliuid', position='Query'),
  redirectUris?: string(name='RedirectUris', example='https://www.example.com', position='Query'),
  refreshTokenValidity?: int32(name='RefreshTokenValidity', example='2592000', position='Query'),
  secretRequired?: boolean(name='SecretRequired', example='true', position='Query'),
}

model CreateApplicationResponseBody = {
  application?: {
    accessTokenValidity?: int32(name='AccessTokenValidity', example='3600'),
    accountId?: string(name='AccountId', example='177242285274****'),
    appId?: string(name='AppId', example='472457090344041****'),
    appName?: string(name='AppName', example='myapp'),
    appType?: string(name='AppType', example='WebApp'),
    createDate?: string(name='CreateDate', example='2020-10-23T08:06:57Z'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description'),
          name?: string(name='Name', example='openid'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes'),
    }(name='DelegatedScope'),
    displayName?: string(name='DisplayName', example='myapp'),
    isMultiTenant?: boolean(name='IsMultiTenant', example='true'),
    redirectUris?: {
      redirectUri?: [ string ](name='RedirectUri')
    }(name='RedirectUris'),
    refreshTokenValidity?: int32(name='RefreshTokenValidity', example='7776000'),
    secretRequired?: boolean(name='SecretRequired', example='true'),
    updateDate?: string(name='UpdateDate', example='2020-10-23T08:06:57Z'),
  }(name='Application'),
  requestId?: string(name='RequestId', example='6616F09B-2768-4C11-8866-A8EE4C4A583E'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupRequest {
  comments?: string(name='Comments', position='Query'),
  displayName?: string(name='DisplayName', example='Dev-Team', position='Query'),
  groupName?: string(name='GroupName', example='Dev-Team', position='Query'),
}

model CreateGroupResponseBody = {
  group?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate', example='2020-10-19T16:15:17Z'),
    displayName?: string(name='DisplayName', example='Dev-Team'),
    groupId?: string(name='GroupId', example='740317625433843****'),
    groupName?: string(name='GroupName', example='Dev-Team'),
    updateDate?: string(name='UpdateDate', example='2020-10-19T16:15:17Z'),
  }(name='Group'),
  requestId?: string(name='RequestId', example='3C38192B-7BF8-45DA-8F0A-E670EA51426C'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupResponseBody(name='body'),
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoginProfileRequest {
  MFABindRequired?: boolean(name='MFABindRequired', example='false', position='Query'),
  password?: string(name='Password', example='mypassword', position='Query'),
  passwordResetRequired?: boolean(name='PasswordResetRequired', example='false', position='Query'),
  status?: string(name='Status', example='Active', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model CreateLoginProfileResponseBody = {
  loginProfile?: {
    MFABindRequired?: boolean(name='MFABindRequired', example='false'),
    passwordResetRequired?: boolean(name='PasswordResetRequired', example='false'),
    status?: string(name='Status', example='Active'),
    updateDate?: string(name='UpdateDate', example='2020-10-14T03:47:51Z'),
    userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com'),
  }(name='LoginProfile'),
  requestId?: string(name='RequestId', example='29CB303C-1F05-43A6-A6BC-EBC5A797F8DB'),
}

model CreateLoginProfileResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoginProfileResponseBody(name='body'),
}

async function createLoginProfile(request: CreateLoginProfileRequest): CreateLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model CreateOIDCProviderRequest {
  clientIds?: string(name='ClientIds', example='498469743454717****', position='Query'),
  description?: string(name='Description', example='This is an OIDC Provider.', position='Query'),
  fingerprints?: string(name='Fingerprints', example='902ef2deeb3c5b13ea4c3d5193629309e231****', position='Query'),
  issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider', position='Query'),
}

model CreateOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', example='498469743454717****'),
    createDate?: string(name='CreateDate', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', example='This is an OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', example='1636613763000'),
    gmtModified?: string(name='GmtModified', example='1636613763000'),
    issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', example='2021-11-11T06:56:03Z'),
  }(name='OIDCProvider'),
  requestId?: string(name='RequestId', example='64B11B41-636D-51E3-A39B-C8703CD2218C'),
}

model CreateOIDCProviderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOIDCProviderResponseBody(name='body'),
}

async function createOIDCProvider(request: CreateOIDCProviderRequest): CreateOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model CreateSAMLProviderRequest {
  description?: string(name='Description', example='This is a provider.', position='Query'),
  encodedSAMLMetadataDocument?: string(name='EncodedSAMLMetadataDocument', example='PD94bWwgdmVy****', position='Query'),
  SAMLProviderName: string(name='SAMLProviderName', example='test-provider', position='Query'),
}

model CreateSAMLProviderResponseBody = {
  requestId?: string(name='RequestId'),
  SAMLProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:saml-provider/test-provider'),
    createDate?: string(name='CreateDate', example='2020-10-22T02:37:05Z'),
    description?: string(name='Description', example='This is a provider.'),
    SAMLProviderName?: string(name='SAMLProviderName', example='test-provider'),
    updateDate?: string(name='UpdateDate', example='2020-10-22T02:51:20Z'),
  }(name='SAMLProvider'),
}

model CreateSAMLProviderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSAMLProviderResponseBody(name='body'),
}

async function createSAMLProvider(request: CreateSAMLProviderRequest): CreateSAMLProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSAMLProvider', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserRequest {
  comments?: string(name='Comments', example='This is a cloud computing engineer.', position='Query'),
  displayName: string(name='DisplayName', example='test', position='Query'),
  email?: string(name='Email', example='alice@example.com', position='Query'),
  mobilePhone?: string(name='MobilePhone', example='86-1868888****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model CreateUserResponseBody = {
  requestId?: string(name='RequestId', example='2BB8C44A-2862-4922-AD43-03924749173B'),
  user?: {
    comments?: string(name='Comments', example='This is a cloud computing engineer.'),
    createDate?: string(name='CreateDate', example='2020-10-12T09:12:00Z'),
    displayName?: string(name='DisplayName', example='test'),
    email?: string(name='Email', example='alice@example.com'),
    lastLoginDate?: string(name='LastLoginDate', example='2020-10-12T09:12:00Z'),
    mobilePhone?: string(name='MobilePhone', example='86-1868888****'),
    provisionType?: string(name='ProvisionType'),
    tags?: {
      tag?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Tag')
    }(name='Tags'),
    updateDate?: string(name='UpdateDate', example='2020-10-12T09:12:00Z'),
    userId?: string(name='UserId', example='20732900249392****'),
    userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com'),
  }(name='User'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualMFADeviceRequest {
  virtualMFADeviceName: string(name='VirtualMFADeviceName', example='device001', position='Query'),
}

model CreateVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', example='C609CC97-10FE-43EB-BE32-BDC219D8F1E4'),
  virtualMFADevice?: {
    base32StringSeed?: string(name='Base32StringSeed', example='LD3CJ23Z2VGEX6R7ZTQCOA4XL2KODS5PKH7442NLKYX2PVHSHYB7UT3TS5HA****'),
    QRCodePNG?: string(name='QRCodePNG', example='YXNkZmFzZDlmeW5hc2Q5OGZoODd4bXJmcThhaGU5aSBmYXNkZiBzYWRmIGFGIDRxd2VjIGEgdHEz****'),
    serialNumber?: string(name='SerialNumber', example='acs:ram::177242285274****:mfa/device001'),
  }(name='VirtualMFADevice'),
}

model CreateVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVirtualMFADeviceResponseBody(name='body'),
}

async function createVirtualMFADevice(request: CreateVirtualMFADeviceRequest): CreateVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessKeyRequest {
  userAccessKeyId: string(name='UserAccessKeyId', example='LTAI4GFTgcR8m8cZQDTH****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model DeleteAccessKeyResponseBody = {
  requestId?: string(name='RequestId', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model DeleteAccessKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccessKeyResponseBody(name='body'),
}

async function deleteAccessKey(request: DeleteAccessKeyRequest): DeleteAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppSecretRequest {
  appId: string(name='AppId', example='472457090344041****', position='Query'),
  appSecretId: string(name='AppSecretId', example='2efd5004-005c-4f05-83c6-5b1dd176****', position='Query'),
}

model DeleteAppSecretResponseBody = {
  requestId?: string(name='RequestId', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteAppSecretResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppSecretResponseBody(name='body'),
}

async function deleteAppSecret(request: DeleteAppSecretRequest): DeleteAppSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppSecret', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  appId: string(name='AppId', example='472457090344041****', position='Query'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  groupName?: string(name='GroupName', example='Dev-Team', position='Query'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupResponseBody(name='body'),
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLoginProfileRequest {
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model DeleteLoginProfileResponseBody = {
  requestId?: string(name='RequestId', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model DeleteLoginProfileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLoginProfileResponseBody(name='body'),
}

async function deleteLoginProfile(request: DeleteLoginProfileRequest): DeleteLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOIDCProviderRequest {
  OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider', position='Query'),
}

model DeleteOIDCProviderResponseBody = {
  requestId?: string(name='RequestId', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteOIDCProviderResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOIDCProviderResponseBody(name='body'),
}

async function deleteOIDCProvider(request: DeleteOIDCProviderRequest): DeleteOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSAMLProviderRequest {
  SAMLProviderName: string(name='SAMLProviderName', example='test-provider', position='Query'),
}

model DeleteSAMLProviderResponseBody = {
  requestId?: string(name='RequestId', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteSAMLProviderResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSAMLProviderResponseBody(name='body'),
}

async function deleteSAMLProvider(request: DeleteSAMLProviderRequest): DeleteSAMLProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSAMLProvider', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  userId?: string(name='UserId', example='20732900249392****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVirtualMFADeviceRequest {
  serialNumber: string(name='SerialNumber', example='acs:ram::123456789012****:mfa/device002', position='Query'),
}

model DeleteVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVirtualMFADeviceResponseBody(name='body'),
}

async function deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): DeleteVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model DisableVirtualMFARequest {
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model DisableVirtualMFAResponseBody = {
  requestId?: string(name='RequestId', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model DisableVirtualMFAResponse = {
  headers: map[string]string(name='headers'),
  body: DisableVirtualMFAResponseBody(name='body'),
}

async function disableVirtualMFA(request: DisableVirtualMFARequest): DisableVirtualMFAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableVirtualMFA', 'POST', '/', 'json', false, 'json', request);
}

model GenerateCredentialReportRequest {
}

model GenerateCredentialReportResponseBody = {
  requestId?: string(name='RequestId', example='BBCCA90A-A1F0-4B16-B355-692247197805'),
  state?: string(name='State', example='STARTED'),
}

model GenerateCredentialReportResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateCredentialReportResponseBody(name='body'),
}

async function generateCredentialReport(request: GenerateCredentialReportRequest): GenerateCredentialReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateCredentialReport', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyLastUsedRequest {
  userAccessKeyId: string(name='UserAccessKeyId', example='LTAI4GFTgcR8m8cZQDTH****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model GetAccessKeyLastUsedResponseBody = {
  accessKeyLastUsed?: {
    lastUsedDate?: string(name='LastUsedDate', example='2020-10-16T01:37:37Z'),
    serviceName?: string(name='ServiceName'),
  }(name='AccessKeyLastUsed'),
  requestId?: string(name='RequestId', example='B29C79F6-354B-4297-A994-1338CC22A2EC'),
}

model GetAccessKeyLastUsedResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessKeyLastUsedResponseBody(name='body'),
}

async function getAccessKeyLastUsed(request: GetAccessKeyLastUsedRequest): GetAccessKeyLastUsedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyLastUsed', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountMFAInfoRequest {
}

model GetAccountMFAInfoResponseBody = {
  isMFAEnable?: boolean(name='IsMFAEnable', example='false'),
  requestId?: string(name='RequestId', example='4BE83135-0B08-467C-B3A2-27B312FD0F57'),
}

model GetAccountMFAInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountMFAInfoResponseBody(name='body'),
}

async function getAccountMFAInfo(request: GetAccountMFAInfoRequest): GetAccountMFAInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountMFAInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountSecurityPracticeReportRequest {
}

model GetAccountSecurityPracticeReportResponseBody = {
  accountSecurityPracticeInfo?: {
    accountSecurityPracticeUserInfo?: {
      bindMfa?: boolean(name='BindMfa', example='false'),
      oldAkNum?: int32(name='OldAkNum', example='0'),
      rootWithAccessKey?: int32(name='RootWithAccessKey', example='1'),
      subUser?: int32(name='SubUser', example='9'),
      subUserBindMfa?: int32(name='SubUserBindMfa', example='0'),
      subUserPwdLevel?: string(name='SubUserPwdLevel', example='low'),
      subUserWithOldAccessKey?: int32(name='SubUserWithOldAccessKey', example='0'),
      subUserWithUnusedAccessKey?: int32(name='SubUserWithUnusedAccessKey', example='0'),
      unusedAkNum?: int32(name='UnusedAkNum', example='0'),
    }(name='AccountSecurityPracticeUserInfo'),
    score?: int32(name='Score', example='63'),
  }(name='AccountSecurityPracticeInfo'),
  requestId?: string(name='RequestId', example='ABA822EE-85C2-4418-9577-A1831FC8466D'),
}

model GetAccountSecurityPracticeReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountSecurityPracticeReportResponseBody(name='body'),
}

async function getAccountSecurityPracticeReport(request: GetAccountSecurityPracticeReportRequest): GetAccountSecurityPracticeReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountSecurityPracticeReport', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountSummaryRequest {
}

model GetAccountSummaryResponseBody = {
  requestId?: string(name='RequestId', example='81313F5E-3C85-478F-BCC9-E1B70E4556DB'),
  summaryMap?: {
    accessKeysPerUserQuota?: int32(name='AccessKeysPerUserQuota', example='2'),
    attachedPoliciesPerGroupQuota?: int32(name='AttachedPoliciesPerGroupQuota', example='5'),
    attachedPoliciesPerRoleQuota?: int32(name='AttachedPoliciesPerRoleQuota', example='5'),
    attachedPoliciesPerUserQuota?: int32(name='AttachedPoliciesPerUserQuota', example='10'),
    attachedSystemPoliciesPerGroupQuota?: int32(name='AttachedSystemPoliciesPerGroupQuota', example='20'),
    attachedSystemPoliciesPerRoleQuota?: int32(name='AttachedSystemPoliciesPerRoleQuota', example='20'),
    attachedSystemPoliciesPerUserQuota?: int32(name='AttachedSystemPoliciesPerUserQuota', example='20'),
    groups?: int32(name='Groups', example='7'),
    groupsPerUserQuota?: int32(name='GroupsPerUserQuota', example='5'),
    groupsQuota?: int32(name='GroupsQuota', example='50'),
    MFADevices?: int32(name='MFADevices', example='13'),
    MFADevicesInUse?: int32(name='MFADevicesInUse', example='2'),
    policies?: int32(name='Policies', example='13'),
    policiesQuota?: int32(name='PoliciesQuota', example='1500'),
    policySizeQuota?: int32(name='PolicySizeQuota', example='2048'),
    roles?: int32(name='Roles', example='19'),
    rolesQuota?: int32(name='RolesQuota', example='1000'),
    users?: int32(name='Users', example='9'),
    usersQuota?: int32(name='UsersQuota', example='1000'),
    versionsPerPolicyQuota?: int32(name='VersionsPerPolicyQuota', example='5'),
    virtualMFADevicesQuota?: int32(name='VirtualMFADevicesQuota', example='1000'),
  }(name='SummaryMap'),
}

model GetAccountSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountSummaryResponseBody(name='body'),
}

async function getAccountSummary(request: GetAccountSummaryRequest): GetAccountSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetAppSecretRequest {
  appId: string(name='AppId', example='472457090344041****', position='Query'),
  appSecretId: string(name='AppSecretId', example='2efd5004-005c-4f05-83c6-5b1dd176****', position='Query'),
}

model GetAppSecretResponseBody = {
  appSecret?: {
    appId?: string(name='AppId', example='472457090344041****'),
    appSecretId?: string(name='AppSecretId', example='2efd5004-005c-4f05-83c6-5b1dd176****'),
    appSecretValue?: string(name='AppSecretValue', example='ai78ZmmxnlUG1jXlBZRDFKos9DIjY4m17Q7dCpMwn1rqXsTGb1X1XmrmveMp****'),
    createDate?: string(name='CreateDate', example='2020-10-26T02:52:31Z'),
  }(name='AppSecret'),
  requestId?: string(name='RequestId', example='EE46FC3C-3BDE-4771-B531-27B7B6EB533D'),
}

model GetAppSecretResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppSecretResponseBody(name='body'),
}

async function getAppSecret(request: GetAppSecretRequest): GetAppSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppSecret', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationRequest {
  appId: string(name='AppId', example='472457090344041****', position='Query'),
}

model GetApplicationResponseBody = {
  application?: {
    accessTokenValidity?: int32(name='AccessTokenValidity', example='3600'),
    accountId?: string(name='AccountId', example='177242285274****'),
    appId?: string(name='AppId', example='472457090344041****'),
    appName?: string(name='AppName', example='myapp'),
    appType?: string(name='AppType', example='WebApp'),
    createDate?: string(name='CreateDate', example='2020-10-23T08:06:57Z'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description'),
          name?: string(name='Name', example='openid'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes'),
    }(name='DelegatedScope'),
    displayName?: string(name='DisplayName', example='myapp'),
    isMultiTenant?: boolean(name='IsMultiTenant', example='true'),
    redirectUris?: {
      redirectUri?: [ string ](name='RedirectUri')
    }(name='RedirectUris'),
    refreshTokenValidity?: int32(name='RefreshTokenValidity', example='7776000'),
    secretRequired?: boolean(name='SecretRequired', example='true'),
    updateDate?: string(name='UpdateDate', example='2020-10-23T08:06:57Z'),
  }(name='Application'),
  requestId?: string(name='RequestId', example='6616F09B-2768-4C11-8866-A8EE4C4A583E'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetCredentialReportRequest {
}

model GetCredentialReportResponseBody = {
  content?: string(name='Content', example='OVZWK4RMOVZW****'),
  generatedTime?: string(name='GeneratedTime', example='2020-10-19T15:06:52Z'),
  requestId?: string(name='RequestId', example='7A01826E-7601-44B0-B4DF-2B0C509836DE'),
}

model GetCredentialReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetCredentialReportResponseBody(name='body'),
}

async function getCredentialReport(request: GetCredentialReportRequest): GetCredentialReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCredentialReport', 'POST', '/', 'json', false, 'json', request);
}

model GetDefaultDomainRequest {
}

model GetDefaultDomainResponseBody = {
  defaultDomainName?: string(name='DefaultDomainName', example='examplecompany.onaliyun.com'),
  requestId?: string(name='RequestId', example='66815255-7CCE-4759-AC37-9755794C3626'),
}

model GetDefaultDomainResponse = {
  headers: map[string]string(name='headers'),
  body: GetDefaultDomainResponseBody(name='body'),
}

async function getDefaultDomain(request: GetDefaultDomainRequest): GetDefaultDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDefaultDomain', 'POST', '/', 'json', false, 'json', request);
}

model GetGroupRequest {
  groupName?: string(name='GroupName', example='Dev-Team', position='Query'),
}

model GetGroupResponseBody = {
  group?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate', example='2020-10-19T16:15:17Z'),
    displayName?: string(name='DisplayName', example='Dev-Team'),
    groupId?: string(name='GroupId', example='740317625433843****'),
    groupName?: string(name='GroupName', example='Dev-Team'),
    updateDate?: string(name='UpdateDate', example='2020-10-19T16:15:17Z'),
  }(name='Group'),
  requestId?: string(name='RequestId', example='86ECEC3C-7262-4C3C-94B4-A98F7CC1F060'),
}

model GetGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetGroupResponseBody(name='body'),
}

async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetLoginProfileRequest {
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model GetLoginProfileResponseBody = {
  loginProfile?: {
    lastLoginTime?: string(name='LastLoginTime', example='2020-10-14T07:25:25Z'),
    MFABindRequired?: boolean(name='MFABindRequired', example='false'),
    passwordResetRequired?: boolean(name='PasswordResetRequired', example='false'),
    status?: string(name='Status', example='Active'),
    updateDate?: string(name='UpdateDate', example='2020-10-14T06:56:45Z'),
    userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com'),
  }(name='LoginProfile'),
  requestId?: string(name='RequestId', example='E517F18B-632C-48FC-93F1-CDCBCC6F8444'),
}

model GetLoginProfileResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoginProfileResponseBody(name='body'),
}

async function getLoginProfile(request: GetLoginProfileRequest): GetLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model GetOIDCProviderRequest {
  OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider', position='Query'),
}

model GetOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', example='498469743454717****'),
    createDate?: string(name='CreateDate', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', example='1636613763000'),
    gmtModified?: string(name='GmtModified', example='1636706309000'),
    issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider'),
  requestId?: string(name='RequestId', example='E5E1A300-279D-5FBD-A8CF-F4EDC20C4896'),
}

model GetOIDCProviderResponse = {
  headers: map[string]string(name='headers'),
  body: GetOIDCProviderResponseBody(name='body'),
}

async function getOIDCProvider(request: GetOIDCProviderRequest): GetOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordPolicyRequest {
}

model GetPasswordPolicyResponseBody = {
  passwordPolicy?: {
    hardExpire?: boolean(name='HardExpire', example='false'),
    maxLoginAttemps?: int32(name='MaxLoginAttemps', example='0'),
    maxPasswordAge?: int32(name='MaxPasswordAge', example='0'),
    minimumPasswordDifferentCharacter?: int32(name='MinimumPasswordDifferentCharacter', example='0'),
    minimumPasswordLength?: int32(name='MinimumPasswordLength', example='8'),
    passwordNotContainUserName?: boolean(name='PasswordNotContainUserName', example='false'),
    passwordReusePrevention?: int32(name='PasswordReusePrevention', example='0'),
    requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters', example='false'),
    requireNumbers?: boolean(name='RequireNumbers', example='false'),
    requireSymbols?: boolean(name='RequireSymbols', example='false'),
    requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters', example='false'),
  }(name='PasswordPolicy'),
  requestId?: string(name='RequestId', example='BDAA8408-E67C-428B-BFF0-1B2AC05C9610'),
}

model GetPasswordPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetPasswordPolicyResponseBody(name='body'),
}

async function getPasswordPolicy(request: GetPasswordPolicyRequest): GetPasswordPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetSAMLProviderRequest {
  SAMLProviderName: string(name='SAMLProviderName', example='test-provider', position='Query'),
}

model GetSAMLProviderResponseBody = {
  requestId?: string(name='RequestId', example='BAADB995-0C7A-476D-B293-7E94568EEDFB'),
  SAMLProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:saml-provider/test-provider'),
    createDate?: string(name='CreateDate', example='2020-10-22T02:37:05Z'),
    description?: string(name='Description', example='This is a provider.'),
    encodedSAMLMetadataDocument?: string(name='EncodedSAMLMetadataDocument', example='PD94bWwgdmVy****'),
    SAMLProviderName?: string(name='SAMLProviderName', example='test-provider'),
    updateDate?: string(name='UpdateDate', example='2020-10-22T02:51:20Z'),
  }(name='SAMLProvider'),
}

model GetSAMLProviderResponse = {
  headers: map[string]string(name='headers'),
  body: GetSAMLProviderResponseBody(name='body'),
}

async function getSAMLProvider(request: GetSAMLProviderRequest): GetSAMLProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSAMLProvider', 'POST', '/', 'json', false, 'json', request);
}

model GetSecurityPreferenceRequest {
}

model GetSecurityPreferenceResponseBody = {
  requestId?: string(name='RequestId', example='30C9068D-FBAA-4998-9986-8A562FED0BC3'),
  securityPreference?: {
    accessKeyPreference?: {
      allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys', example='false'),
    }(name='AccessKeyPreference'),
    loginProfilePreference?: {
      allowUserToChangePassword?: boolean(name='AllowUserToChangePassword', example='true'),
      enableSaveMFATicket?: boolean(name='EnableSaveMFATicket', example='false'),
      loginNetworkMasks?: string(name='LoginNetworkMasks', example='10.0.0.0/8'),
      loginSessionDuration?: int32(name='LoginSessionDuration', example='6'),
      MFAOperationForLogin?: string(name='MFAOperationForLogin'),
      operationForRiskLogin?: string(name='OperationForRiskLogin'),
    }(name='LoginProfilePreference'),
    MFAPreference?: {
      allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices', example='false'),
    }(name='MFAPreference'),
    personalInfoPreference?: {
      allowUserToManagePersonalDingTalk?: boolean(name='AllowUserToManagePersonalDingTalk', example='true'),
    }(name='PersonalInfoPreference'),
  }(name='SecurityPreference'),
}

model GetSecurityPreferenceResponse = {
  headers: map[string]string(name='headers'),
  body: GetSecurityPreferenceResponseBody(name='body'),
}

async function getSecurityPreference(request: GetSecurityPreferenceRequest): GetSecurityPreferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecurityPreference', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  userAccessKeyId?: string(name='UserAccessKeyId', example='LTAI4GFTgcR8m8cZQDTH****', position='Query'),
  userId?: string(name='UserId', example='20732900249392****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId', example='4507D1CD-526A-4E2B-A1E2-3AB045D1EE0B'),
  user?: {
    comments?: string(name='Comments', example='This is a cloud computing engineer.'),
    createDate?: string(name='CreateDate', example='2020-10-12T09:12:00Z'),
    displayName?: string(name='DisplayName', example='test'),
    email?: string(name='Email', example='alice@example.com'),
    lastLoginDate?: string(name='LastLoginDate', example='2020-10-12T09:12:00Z'),
    mobilePhone?: string(name='MobilePhone', example='86-1868888****'),
    provisionType?: string(name='ProvisionType', example='CloudSSO'),
    tags?: {
      tag?: [ 
      {
        tagKey?: string(name='TagKey', example='operator'),
        tagValue?: string(name='TagValue', example='alice'),
      }
    ](name='Tag')
    }(name='Tags'),
    updateDate?: string(name='UpdateDate', example='2020-10-13T07:39:22Z'),
    userId?: string(name='UserId', example='20732900249392****'),
    userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model GetUserMFAInfoRequest {
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model GetUserMFAInfoResponseBody = {
  isMFAEnable?: boolean(name='IsMFAEnable', example='true'),
  MFADevice?: {
    serialNumber?: string(name='SerialNumber', example='acs:ram::177242285274****:mfa/device001'),
    type?: string(name='Type', example='VMFA'),
  }(name='MFADevice'),
  requestId?: string(name='RequestId', example='FCF7322A-20A9-4F68-8B7F-F86958839BC0'),
}

model GetUserMFAInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserMFAInfoResponseBody(name='body'),
}

async function getUserMFAInfo(request: GetUserMFAInfoRequest): GetUserMFAInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserMFAInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetUserSsoSettingsRequest {
}

model GetUserSsoSettingsResponseBody = {
  requestId?: string(name='RequestId', example='69FC3E5E-D3D9-434B-90CA-BBA8E0551A47'),
  userSsoSettings?: {
    auxiliaryDomain?: string(name='AuxiliaryDomain', example='example.com'),
    metadataDocument?: string(name='MetadataDocument', example='PD94bWwgdmVy****'),
    ssoEnabled?: boolean(name='SsoEnabled', example='false'),
  }(name='UserSsoSettings'),
}

model GetUserSsoSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserSsoSettingsResponseBody(name='body'),
}

async function getUserSsoSettings(request: GetUserSsoSettingsRequest): GetUserSsoSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserSsoSettings', 'POST', '/', 'json', false, 'json', request);
}

model ListAccessKeysRequest {
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model ListAccessKeysResponseBody = {
  accessKeys?: {
    accessKey?: [ 
    {
      accessKeyId?: string(name='AccessKeyId', example='0wNEpMMlzy7s****'),
      createDate?: string(name='CreateDate', example='2020-10-13T12:33:18Z'),
      status?: string(name='Status', example='Active'),
      updateDate?: string(name='UpdateDate', example='2020-10-13T12:33:18Z'),
    }
  ](name='AccessKey')
  }(name='AccessKeys'),
  requestId?: string(name='RequestId', example='4B450CA1-36E8-4AA2-8461-86B42BF4CC4E'),
}

model ListAccessKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccessKeysResponseBody(name='body'),
}

async function listAccessKeys(request: ListAccessKeysRequest): ListAccessKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccessKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListAppSecretIdsRequest {
  appId: string(name='AppId', example='472457090344041****', position='Query'),
}

model ListAppSecretIdsResponseBody = {
  appSecrets?: {
    appSecret?: [ 
    {
      appId?: string(name='AppId', example='472457090344041****'),
      appSecretId?: string(name='AppSecretId', example='2efd5004-005c-4f05-83c6-5b1dd176****'),
      createDate?: string(name='CreateDate', example='2020-10-26T03:18:39Z'),
    }
  ](name='AppSecret')
  }(name='AppSecrets'),
  requestId?: string(name='RequestId', example='5F2FD500-7173-47D6-BD2F-EB60879B4F16'),
}

model ListAppSecretIdsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppSecretIdsResponseBody(name='body'),
}

async function listAppSecretIds(request: ListAppSecretIdsRequest): ListAppSecretIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppSecretIds', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsRequest {
}

model ListApplicationsResponseBody = {
  applications?: {
    application?: [ 
    {
      accessTokenValidity?: int32(name='AccessTokenValidity', example='3600'),
      accountId?: string(name='AccountId', example='177242285274****'),
      appId?: string(name='AppId', example='441442900344560****'),
      appName?: string(name='AppName', example='myapp'),
      appType?: string(name='AppType', example='WebApp'),
      createDate?: string(name='CreateDate', example='2020-10-23T09:33:22Z'),
      delegatedScope?: {
        predefinedScopes?: {
          predefinedScope?: [ 
          {
            description?: string(name='Description'),
            name?: string(name='Name', example='openid'),
          }
        ](name='PredefinedScope')
        }(name='PredefinedScopes'),
      }(name='DelegatedScope'),
      displayName?: string(name='DisplayName', example='myapp'),
      isMultiTenant?: boolean(name='IsMultiTenant', example='true'),
      redirectUris?: {
        redirectUri?: [ string ](name='RedirectUri')
      }(name='RedirectUris'),
      refreshTokenValidity?: int32(name='RefreshTokenValidity', example='7776000'),
      secretRequired?: boolean(name='SecretRequired', example='true'),
      updateDate?: string(name='UpdateDate', example='2020-10-23T09:33:22Z'),
    }
  ](name='Application')
  }(name='Applications'),
  requestId?: string(name='RequestId', example='CE458B58-8C40-46F7-A9D4-CB85136B0C06'),
}

model ListApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationsResponseBody(name='body'),
}

async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsRequest {
  marker?: string(name='Marker', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', example='100', position='Query'),
}

model ListGroupsResponseBody = {
  groups?: {
    group?: [ 
    {
      comments?: string(name='Comments'),
      createDate?: string(name='CreateDate', example='2020-10-19T12:33:18Z'),
      displayName?: string(name='DisplayName', example='Dev-Team'),
      groupId?: string(name='GroupId', example='740317625433843****'),
      groupName?: string(name='GroupName', example='dev-team'),
      updateDate?: string(name='UpdateDate', example='2020-10-19T12:33:18Z'),
    }
  ](name='Group')
  }(name='Groups'),
  isTruncated?: boolean(name='IsTruncated', example='true'),
  marker?: string(name='Marker', example='EXAMPLE'),
  requestId?: string(name='RequestId', example='065527AA-2F2E-AD7C-7484-F2626CFE4934'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupsResponseBody(name='body'),
}

async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsForUserRequest {
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model ListGroupsForUserResponseBody = {
  groups?: {
    group?: [ 
    {
      comments?: string(name='Comments'),
      displayName?: string(name='DisplayName', example='Test-Team'),
      groupId?: string(name='GroupId', example='740317625433843****'),
      groupName?: string(name='GroupName', example='Test-Team'),
      joinDate?: string(name='JoinDate', example='2020-10-20T06:57:00Z'),
    }
  ](name='Group')
  }(name='Groups'),
  requestId?: string(name='RequestId', example='7158A935-FB5E-49A7-8E52-FDA5B2B67247'),
}

model ListGroupsForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupsForUserResponseBody(name='body'),
}

async function listGroupsForUser(request: ListGroupsForUserRequest): ListGroupsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListOIDCProvidersRequest {
  marker?: string(name='Marker', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', example='100', position='Query'),
}

model ListOIDCProvidersResponseBody = {
  isTruncated?: boolean(name='IsTruncated', example='false'),
  marker?: string(name='Marker', example='EXAMPLE'),
  OIDCProviders?: {
    OIDCProvider?: [ 
    {
      arn?: string(name='Arn', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
      clientIds?: string(name='ClientIds', example='498469743454717****'),
      createDate?: string(name='CreateDate', example='2021-11-11T06:56:03Z'),
      description?: string(name='Description', example='This is a new OIDC Provider.'),
      fingerprints?: string(name='Fingerprints', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
      gmtCreate?: string(name='GmtCreate', example='1636613763000'),
      gmtModified?: string(name='GmtModified', example='1636706309000'),
      issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com'),
      OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider'),
      updateDate?: string(name='UpdateDate', example='2021-11-12T08:38:29Z'),
    }
  ](name='OIDCProvider')
  }(name='OIDCProviders'),
  requestId?: string(name='RequestId', example='D2148337-B86A-57F0-8B31-EB7BE0125226'),
}

model ListOIDCProvidersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOIDCProvidersResponseBody(name='body'),
}

async function listOIDCProviders(request: ListOIDCProvidersRequest): ListOIDCProvidersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOIDCProviders', 'POST', '/', 'json', false, 'json', request);
}

model ListPredefinedScopesRequest {
  appType?: string(name='AppType', example='WebApp', position='Query'),
}

model ListPredefinedScopesResponseBody = {
  predefinedScopes?: {
    predefinedScope?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name', example='openid'),
    }
  ](name='PredefinedScope')
  }(name='PredefinedScopes'),
  requestId?: string(name='RequestId', example='955C096D-EC99-480B-AF37-3921109107D0'),
}

model ListPredefinedScopesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPredefinedScopesResponseBody(name='body'),
}

async function listPredefinedScopes(request: ListPredefinedScopesRequest): ListPredefinedScopesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPredefinedScopes', 'POST', '/', 'json', false, 'json', request);
}

model ListSAMLProvidersRequest {
  marker?: string(name='Marker', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', example='100', position='Query'),
}

model ListSAMLProvidersResponseBody = {
  isTruncated?: boolean(name='IsTruncated', example='true'),
  marker?: string(name='Marker', example='EXAMPLE'),
  requestId?: string(name='RequestId', example='2D8B70D3-E194-41C9-93C5-F6A10D716D24'),
  SAMLProviders?: {
    SAMLProvider?: [ 
    {
      arn?: string(name='Arn', example='acs:ram::177242285274****:saml-provider/test-provider'),
      createDate?: string(name='CreateDate', example='2020-10-22T06:26:15Z'),
      description?: string(name='Description', example='This is a provider.'),
      SAMLProviderName?: string(name='SAMLProviderName', example='test-provider'),
      updateDate?: string(name='UpdateDate', example='2020-10-22T06:26:15Z'),
    }
  ](name='SAMLProvider')
  }(name='SAMLProviders'),
}

model ListSAMLProvidersResponse = {
  headers: map[string]string(name='headers'),
  body: ListSAMLProvidersResponseBody(name='body'),
}

async function listSAMLProviders(request: ListSAMLProvidersRequest): ListSAMLProvidersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSAMLProviders', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='下一个查询开始Token', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  pageSize?: int32(name='PageSize', example='2', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='资源ID,最多 50个子项', position='Query'),
  resourcePrincipalName?: [ string ](name='ResourcePrincipalName', description='资源名,最多50个子项', position='Query'),
  resourceType?: string(name='ResourceType', description='资源类型', example='user', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键', example='operator'),
      value?: string(name='Value', description='标签值', example='alice'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
}

model ListTagResourcesResponseBody = {
  isTruncated?: boolean(name='IsTruncated', description='请求返回结果是否被截断', example='true'),
  nextToken?: string(name='NextToken', description='下一个查询开始Token，NextToken为空说明没有下一个', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='4BE83135-0B08-467C-B3A2-27B312FD0F57'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源ID', example='20732900249392****'),
      resourceType?: string(name='ResourceType', description='资源类型', example='user'),
      tagKey?: string(name='TagKey', description='标签键', example='operator'),
      tagValue?: string(name='TagValue', description='标签值', example='alice'),
    }
  ](name='TagResource')
  }(name='TagResources', description='资源列表'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListUserBasicInfosRequest {
  marker?: string(name='Marker', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', example='100', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
}

model ListUserBasicInfosResponseBody = {
  isTruncated?: boolean(name='IsTruncated', example='true'),
  marker?: string(name='Marker', example='EXAMPLE'),
  requestId?: string(name='RequestId', example='EF2B25FD-CADE-445B-BE4D-E082E0FF1A0F'),
  userBasicInfos?: {
    userBasicInfo?: [ 
    {
      displayName?: string(name='DisplayName', example='test'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      userId?: string(name='UserId', example='20732900249392****'),
      userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com'),
    }
  ](name='UserBasicInfo')
  }(name='UserBasicInfos'),
}

model ListUserBasicInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserBasicInfosResponseBody(name='body'),
}

async function listUserBasicInfos(request: ListUserBasicInfosRequest): ListUserBasicInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserBasicInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  marker?: string(name='Marker', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', example='1000', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
}

model ListUsersResponseBody = {
  isTruncated?: boolean(name='IsTruncated', example='true'),
  marker?: string(name='Marker', example='EXAMPLE'),
  requestId?: string(name='RequestId', example='4B450CA1-36E8-4AA2-8461-86B42BF4CC4E'),
  users?: {
    user?: [ 
    {
      comments?: string(name='Comments', example='This is a cloud computing engineer.'),
      createDate?: string(name='CreateDate', example='2020-10-12T09:12:00Z'),
      displayName?: string(name='DisplayName', example='test'),
      email?: string(name='Email', example='alice@example.com'),
      lastLoginDate?: string(name='LastLoginDate', example='1648624925505'),
      mobilePhone?: string(name='MobilePhone', example='86-1868888****'),
      provisionType?: string(name='ProvisionType'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      updateDate?: string(name='UpdateDate', example='2020-10-13T09:19:49Z'),
      userId?: string(name='UserId', example='20732900249392****'),
      userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com'),
    }
  ](name='User')
  }(name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersForGroupRequest {
  groupName?: string(name='GroupName', example='Test-Team', position='Query'),
  marker?: string(name='Marker', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', example='100', position='Query'),
}

model ListUsersForGroupResponseBody = {
  isTruncated?: boolean(name='IsTruncated', example='true'),
  marker?: string(name='Marker', example='EXAMPLE'),
  requestId?: string(name='RequestId', example='789FF581-B3C8-43A8-9115-54304B46D05C'),
  users?: {
    user?: [ 
    {
      displayName?: string(name='DisplayName', example='test'),
      joinDate?: string(name='JoinDate', example='2020-10-20T06:57:00Z'),
      userId?: string(name='UserId', example='20732900249392****'),
      userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com'),
    }
  ](name='User')
  }(name='Users'),
}

model ListUsersForGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersForGroupResponseBody(name='body'),
}

async function listUsersForGroup(request: ListUsersForGroupRequest): ListUsersForGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersForGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListVirtualMFADevicesRequest {
  marker?: string(name='Marker', example='EXAMPLE', position='Query'),
  maxItems?: int32(name='MaxItems', example='100', position='Query'),
}

model ListVirtualMFADevicesResponseBody = {
  isTruncated?: boolean(name='IsTruncated', example='true'),
  marker?: string(name='Marker', example='EXAMPLE'),
  requestId?: string(name='RequestId', example='32272612-DF82-485E-8BA9-AFA4E0C3D0BA'),
  virtualMFADevices?: {
    virtualMFADevice?: [ 
    {
      activateDate?: string(name='ActivateDate', example='2020-10-16T06:02:09Z'),
      serialNumber?: string(name='SerialNumber', example='acs:ram::177242285274****:mfa/test'),
      user?: {
        displayName?: string(name='DisplayName', example='test'),
        userId?: string(name='UserId', example='20732900249392****'),
        userPrincipalName?: string(name='UserPrincipalName', example='test@177242285274****.onaliyun.com'),
      }(name='User'),
    }
  ](name='VirtualMFADevice')
  }(name='VirtualMFADevices'),
}

model ListVirtualMFADevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVirtualMFADevicesResponseBody(name='body'),
}

async function listVirtualMFADevices(request: ListVirtualMFADevicesRequest): ListVirtualMFADevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirtualMFADevices', 'POST', '/', 'json', false, 'json', request);
}

model RemoveClientIdFromOIDCProviderRequest {
  clientId?: string(name='ClientId', example='498469743454717****', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider', position='Query'),
}

model RemoveClientIdFromOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', example='598469743454717****'),
    createDate?: string(name='CreateDate', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', example='1636613763000'),
    gmtModified?: string(name='GmtModified', example='1636706309000'),
    issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider'),
  requestId?: string(name='RequestId', example='EC9A8F3B-AFA5-5C8F-999D-F97BC7CF1FC5'),
}

model RemoveClientIdFromOIDCProviderResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveClientIdFromOIDCProviderResponseBody(name='body'),
}

async function removeClientIdFromOIDCProvider(request: RemoveClientIdFromOIDCProviderRequest): RemoveClientIdFromOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveClientIdFromOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model RemoveFingerprintFromOIDCProviderRequest {
  fingerprint?: string(name='Fingerprint', example='6938fd4d98bab03faadb97b34396831e3780****', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider', position='Query'),
}

model RemoveFingerprintFromOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', example='0oa4u6l8x5WoaVbd****'),
    createDate?: string(name='CreateDate', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', example='5938fd4d98bab03faadb97b34396831e3780****'),
    gmtCreate?: string(name='GmtCreate', example='1636613763000'),
    gmtModified?: string(name='GmtModified', example='1636706309000'),
    issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider'),
  requestId?: string(name='RequestId', example='C90CE971-4C7F-5D93-BD3E-2D0E79D03C01'),
}

model RemoveFingerprintFromOIDCProviderResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveFingerprintFromOIDCProviderResponseBody(name='body'),
}

async function removeFingerprintFromOIDCProvider(request: RemoveFingerprintFromOIDCProviderRequest): RemoveFingerprintFromOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveFingerprintFromOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserFromGroupRequest {
  groupName?: string(name='GroupName', example='Test-Team', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', example='alice@example.onaliyun.com', position='Query'),
}

model RemoveUserFromGroupResponseBody = {
  requestId?: string(name='RequestId', example='85836703-8D4F-485F-9726-4D1C730F957E'),
}

model RemoveUserFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserFromGroupResponseBody(name='body'),
}

async function removeUserFromGroup(request: RemoveUserFromGroupRequest): RemoveUserFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultDomainRequest {
  defaultDomainName: string(name='DefaultDomainName', example='examplecompany.onaliyun.com', position='Query'),
}

model SetDefaultDomainResponseBody = {
  defaultDomainName?: string(name='DefaultDomainName', example='examplecompany.onaliyun.com'),
  requestId?: string(name='RequestId', example='66815255-7CCE-4759-AC37-9755794C3626'),
}

model SetDefaultDomainResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultDomainResponseBody(name='body'),
}

async function setDefaultDomain(request: SetDefaultDomainRequest): SetDefaultDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultDomain', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordPolicyRequest {
  hardExpire?: boolean(name='HardExpire', example='false', position='Query'),
  maxLoginAttemps?: int32(name='MaxLoginAttemps', example='0', position='Query'),
  maxPasswordAge?: int32(name='MaxPasswordAge', example='0', position='Query'),
  minimumPasswordDifferentCharacter?: int32(name='MinimumPasswordDifferentCharacter', example='0', position='Query'),
  minimumPasswordLength?: int32(name='MinimumPasswordLength', example='8', position='Query'),
  passwordNotContainUserName?: boolean(name='PasswordNotContainUserName', example='false', position='Query'),
  passwordReusePrevention?: int32(name='PasswordReusePrevention', example='0', position='Query'),
  requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters', example='false', position='Query'),
  requireNumbers?: boolean(name='RequireNumbers', example='false', position='Query'),
  requireSymbols?: boolean(name='RequireSymbols', example='false', position='Query'),
  requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters', example='false', position='Query'),
}

model SetPasswordPolicyResponseBody = {
  passwordPolicy?: {
    hardExpire?: boolean(name='HardExpire', example='false'),
    maxLoginAttemps?: int32(name='MaxLoginAttemps', example='0'),
    maxPasswordAge?: int32(name='MaxPasswordAge', example='0'),
    minimumPasswordDifferentCharacter?: int32(name='MinimumPasswordDifferentCharacter', example='0'),
    minimumPasswordLength?: int32(name='MinimumPasswordLength', example='8'),
    passwordNotContainUserName?: boolean(name='PasswordNotContainUserName', example='false'),
    passwordReusePrevention?: int32(name='PasswordReusePrevention', example='0'),
    requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters', example='false'),
    requireNumbers?: boolean(name='RequireNumbers', example='false'),
    requireSymbols?: boolean(name='RequireSymbols', example='false'),
    requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters', example='false'),
  }(name='PasswordPolicy'),
  requestId?: string(name='RequestId', example='3FB5551F-B2ED-40D4-8392-1E4AC2384EFD'),
}

model SetPasswordPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetPasswordPolicyResponseBody(name='body'),
}

async function setPasswordPolicy(request: SetPasswordPolicyRequest): SetPasswordPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordPolicy', 'POST', '/', 'json', false, 'json', request);
}

model SetSecurityPreferenceRequest {
  allowUserToChangePassword?: boolean(name='AllowUserToChangePassword', example='true', position='Query'),
  allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys', example='false', position='Query'),
  allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices', example='true', position='Query'),
  allowUserToManagePersonalDingTalk?: boolean(name='AllowUserToManagePersonalDingTalk', example='true', position='Query'),
  enableSaveMFATicket?: boolean(name='EnableSaveMFATicket', example='false', position='Query'),
  loginNetworkMasks?: string(name='LoginNetworkMasks', example='10.0.0.0/8', position='Query'),
  loginSessionDuration?: int32(name='LoginSessionDuration', example='6', position='Query'),
  MFAOperationForLogin?: string(name='MFAOperationForLogin', position='Query'),
  operationForRiskLogin?: string(name='OperationForRiskLogin', position='Query'),
}

model SetSecurityPreferenceResponseBody = {
  requestId?: string(name='RequestId', example='17494710-B4BA-4185-BBBB-C1A6ABDE1639'),
  securityPreference?: {
    accessKeyPreference?: {
      allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys', example='false'),
    }(name='AccessKeyPreference'),
    loginProfilePreference?: {
      allowUserToChangePassword?: boolean(name='AllowUserToChangePassword', example='true'),
      enableSaveMFATicket?: boolean(name='EnableSaveMFATicket', example='false'),
      loginNetworkMasks?: string(name='LoginNetworkMasks', example='10.0.0.0/8'),
      loginSessionDuration?: int32(name='LoginSessionDuration', example='6'),
      MFAOperationForLogin?: string(name='MFAOperationForLogin'),
      operationForRiskLogin?: string(name='OperationForRiskLogin'),
    }(name='LoginProfilePreference'),
    MFAPreference?: {
      allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices', example='false'),
    }(name='MFAPreference'),
    personalInfoPreference?: {
      allowUserToManagePersonalDingTalk?: boolean(name='AllowUserToManagePersonalDingTalk', example='true'),
    }(name='PersonalInfoPreference'),
  }(name='SecurityPreference'),
}

model SetSecurityPreferenceResponse = {
  headers: map[string]string(name='headers'),
  body: SetSecurityPreferenceResponseBody(name='body'),
}

async function setSecurityPreference(request: SetSecurityPreferenceRequest): SetSecurityPreferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSecurityPreference', 'POST', '/', 'json', false, 'json', request);
}

model SetUserSsoSettingsRequest {
  auxiliaryDomain?: string(name='AuxiliaryDomain', example='example.com', position='Query'),
  metadataDocument?: string(name='MetadataDocument', example='PD94bWwgdmVy****', position='Query'),
  ssoEnabled?: boolean(name='SsoEnabled', example='true', position='Query'),
}

model SetUserSsoSettingsResponseBody = {
  requestId?: string(name='RequestId', example='87F2E3F6-28A0-43F3-A77F-F7760E62F61E'),
  userSsoSettings?: {
    auxiliaryDomain?: string(name='AuxiliaryDomain', example='example.com'),
    metadataDocument?: string(name='MetadataDocument', example='PD94bWwgdmVy****'),
    ssoEnabled?: boolean(name='SsoEnabled', example='true'),
  }(name='UserSsoSettings'),
}

model SetUserSsoSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: SetUserSsoSettingsResponseBody(name='body'),
}

async function setUserSsoSettings(request: SetUserSsoSettingsRequest): SetUserSsoSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserSsoSettings', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='资源ID,最多50个子项', position='Query'),
  resourcePrincipalName?: [ string ](name='ResourcePrincipalName', description='资源名,最多50个子项', position='Query'),
  resourceType?: string(name='ResourceType', description='资源类型', example='user', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键', example='operator'),
      value?: string(name='Value', description='标签值', example='alice'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='3687BD52-49FD-585B-AB14-CD05B7C76963'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnbindMFADeviceRequest {
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model UnbindMFADeviceResponseBody = {
  MFADevice?: {
    serialNumber?: string(name='SerialNumber', example='acs:ram::151298381312****:mfa/device001'),
  }(name='MFADevice'),
  requestId?: string(name='RequestId', example='A26CB3E9-1021-452A-AC57-3134B3BA0E4C'),
}

model UnbindMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindMFADeviceResponseBody(name='body'),
}

async function unbindMFADevice(request: UnbindMFADeviceRequest): UnbindMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='是否全部删除，只针对TagKey.N为空时有效。 取值范围： true  false True False  默认是 false', example='false', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='资源ID,最多 50个子项', position='Query'),
  resourcePrincipalName?: [ string ](name='ResourcePrincipalName', description='资源名,最多50个子项', position='Query'),
  resourceType?: string(name='ResourceType', description='资源类型', example='user', position='Query'),
  tagKey?: [ string ](name='TagKey', description='标签键，最多20个子项', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='6AC79B74-9A78-58E2-818B-1D38EDC64D67'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAccessKeyRequest {
  status: string(name='Status', example='Active', position='Query'),
  userAccessKeyId: string(name='UserAccessKeyId', example='LTAI4GFTgcR8m8cZQDTH****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model UpdateAccessKeyResponseBody = {
  requestId?: string(name='RequestId', example='B9AF80E4-1565-42D9-9256-0B8B0D9FD3EC'),
}

model UpdateAccessKeyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAccessKeyResponseBody(name='body'),
}

async function updateAccessKey(request: UpdateAccessKeyRequest): UpdateAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationRequest {
  appId: string(name='AppId', example='472457090344041****', position='Query'),
  newAccessTokenValidity?: int32(name='NewAccessTokenValidity', example='3600', position='Query'),
  newDisplayName?: string(name='NewDisplayName', example='NewApp', position='Query'),
  newIsMultiTenant?: boolean(name='NewIsMultiTenant', example='true', position='Query'),
  newPredefinedScopes?: string(name='NewPredefinedScopes', example='openid', position='Query'),
  newRedirectUris?: string(name='NewRedirectUris', example='https://www.example.com', position='Query'),
  newRefreshTokenValidity?: int32(name='NewRefreshTokenValidity', example='7776000', position='Query'),
  newSecretRequired?: boolean(name='NewSecretRequired', example='true', position='Query'),
}

model UpdateApplicationResponseBody = {
  application?: {
    accessTokenValidity?: int32(name='AccessTokenValidity', example='3600'),
    accountId?: string(name='AccountId', example='177242285274****'),
    appId?: string(name='AppId', example='472457090344041****'),
    appName?: string(name='AppName', example='myapp'),
    appType?: string(name='AppType', example='WebApp'),
    createDate?: string(name='CreateDate', example='2020-10-23T08:06:57Z'),
    delegatedScope?: {
      predefinedScopes?: {
        predefinedScope?: [ 
        {
          description?: string(name='Description'),
          name?: string(name='Name', example='openid'),
        }
      ](name='PredefinedScope')
      }(name='PredefinedScopes'),
    }(name='DelegatedScope'),
    displayName?: string(name='DisplayName', example='NewApp'),
    isMultiTenant?: boolean(name='IsMultiTenant', example='true'),
    redirectUris?: {
      redirectUri?: [ string ](name='RedirectUri')
    }(name='RedirectUris'),
    refreshTokenValidity?: int32(name='RefreshTokenValidity', example='7776000'),
    secretRequired?: boolean(name='SecretRequired', example='true'),
    updateDate?: string(name='UpdateDate', example='2020-10-23T08:06:57Z'),
  }(name='Application'),
  requestId?: string(name='RequestId', example='6616F09B-2768-4C11-8866-A8EE4C4A583E'),
}

model UpdateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateApplicationResponseBody(name='body'),
}

async function updateApplication(request: UpdateApplicationRequest): UpdateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplication', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  groupName?: string(name='GroupName', example='Dev-Team', position='Query'),
  newComments?: string(name='NewComments', position='Query'),
  newDisplayName?: string(name='NewDisplayName', example='Test-Team', position='Query'),
  newGroupName?: string(name='NewGroupName', example='Test-Team', position='Query'),
}

model UpdateGroupResponseBody = {
  group?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate', example='2020-10-19T16:15:17Z'),
    displayName?: string(name='DisplayName', example='Test-Team'),
    groupId?: string(name='GroupId', example='740317625433843****'),
    groupName?: string(name='GroupName', example='Test-Team'),
    updateDate?: string(name='UpdateDate', example='2020-10-20T03:44:27Z'),
  }(name='Group'),
  requestId?: string(name='RequestId', example='CDA656E3-3CE9-4A03-A8A3-B42A0C3C3287'),
}

model UpdateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupResponseBody(name='body'),
}

async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLoginProfileRequest {
  MFABindRequired?: boolean(name='MFABindRequired', example='false', position='Query'),
  password?: string(name='Password', example='mypassword', position='Query'),
  passwordResetRequired?: boolean(name='PasswordResetRequired', example='false', position='Query'),
  status?: string(name='Status', example='Active', position='Query'),
  userPrincipalName: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model UpdateLoginProfileResponseBody = {
  loginProfile?: {
    MFABindRequired?: boolean(name='MFABindRequired', example='false'),
    passwordResetRequired?: boolean(name='PasswordResetRequired', example='false'),
    status?: string(name='Status', example='Active'),
    updateDate?: string(name='UpdateDate', example='2020-10-14T07:48:41Z'),
    userPrincipalName?: string(name='UserPrincipalName', example='test@example11.onaliyun.com'),
  }(name='LoginProfile'),
  requestId?: string(name='RequestId', example='BCDB6A7F-2199-41D9-B577-4FA536A5ADE1'),
}

model UpdateLoginProfileResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLoginProfileResponseBody(name='body'),
}

async function updateLoginProfile(request: UpdateLoginProfileRequest): UpdateLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOIDCProviderRequest {
  clientIds?: string(name='ClientIds', example='498469743454717****', position='Query'),
  newDescription?: string(name='NewDescription', example='This is a new OIDC Provider.', position='Query'),
  OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider', position='Query'),
}

model UpdateOIDCProviderResponseBody = {
  OIDCProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:oidc-provider/TestOIDCProvider'),
    clientIds?: string(name='ClientIds', example='498469743454717****'),
    createDate?: string(name='CreateDate', example='2021-11-11T06:56:03Z'),
    description?: string(name='Description', example='This is a new OIDC Provider.'),
    fingerprints?: string(name='Fingerprints', example='902ef2deeb3c5b13ea4c3d5193629309e231****'),
    gmtCreate?: string(name='GmtCreate', example='1636613763000'),
    gmtModified?: string(name='GmtModified', example='1636706309000'),
    issuerUrl?: string(name='IssuerUrl', example='https://dev-xxxxxx.okta.com'),
    OIDCProviderName?: string(name='OIDCProviderName', example='TestOIDCProvider'),
    updateDate?: string(name='UpdateDate', example='2021-11-12T08:38:29Z'),
  }(name='OIDCProvider'),
  requestId?: string(name='RequestId', example='E4C4D1BD-2558-5BD1-8C26-A5D7FB174A55'),
}

model UpdateOIDCProviderResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOIDCProviderResponseBody(name='body'),
}

async function updateOIDCProvider(request: UpdateOIDCProviderRequest): UpdateOIDCProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOIDCProvider', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSAMLProviderRequest {
  newDescription?: string(name='NewDescription', example='This is a new provider.', position='Query'),
  newEncodedSAMLMetadataDocument?: string(name='NewEncodedSAMLMetadataDocument', example='PD94bWwgdmVy****', position='Query'),
  SAMLProviderName: string(name='SAMLProviderName', example='test-provider', position='Query'),
}

model UpdateSAMLProviderResponseBody = {
  requestId?: string(name='RequestId', example='E5EDDFD2-3654-4F9F-9780-4AE7D81823EF'),
  SAMLProvider?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:saml-provider/test-provider'),
    createDate?: string(name='CreateDate', example='2020-10-22T02:37:05Z'),
    description?: string(name='Description', example='This is a new provider.'),
    SAMLProviderName?: string(name='SAMLProviderName', example='test-provider'),
    updateDate?: string(name='UpdateDate', example='2020-10-22T02:51:20Z'),
  }(name='SAMLProvider'),
}

model UpdateSAMLProviderResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSAMLProviderResponseBody(name='body'),
}

async function updateSAMLProvider(request: UpdateSAMLProviderRequest): UpdateSAMLProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSAMLProvider', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  newComments?: string(name='NewComments', example='This is a cloud computing engineer.', position='Query'),
  newDisplayName?: string(name='NewDisplayName', example='new', position='Query'),
  newEmail?: string(name='NewEmail', example='alice@example.com', position='Query'),
  newMobilePhone?: string(name='NewMobilePhone', example='86-1868888****', position='Query'),
  newUserPrincipalName?: string(name='NewUserPrincipalName', example='new@example.onaliyun.com', position='Query'),
  userId?: string(name='UserId', example='20732900249392****', position='Query'),
  userPrincipalName?: string(name='UserPrincipalName', example='test@example.onaliyun.com', position='Query'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', example='1B56DD42-6962-4F89-A19C-079EED1F0FE3'),
  user?: {
    comments?: string(name='Comments', example='This is a cloud computing engineer.'),
    createDate?: string(name='CreateDate', example='2020-10-12T09:12:00Z'),
    displayName?: string(name='DisplayName', example='new'),
    email?: string(name='Email', example='alice@example.com'),
    lastLoginDate?: string(name='LastLoginDate', example='2020-10-12T09:12:00Z'),
    mobilePhone?: string(name='MobilePhone', example='86-1868888****'),
    provisionType?: string(name='ProvisionType'),
    updateDate?: string(name='UpdateDate', example='2020-10-13T09:19:49Z'),
    userId?: string(name='UserId', example='20732900249392****'),
    userPrincipalName?: string(name='UserPrincipalName', example='new@example.onaliyun.com'),
  }(name='User'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

