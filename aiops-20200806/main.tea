/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aiops', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListAuthRequest {
  userId?: string(name='UserId'),
}

model ListAuthResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  list?: [ string ](name='List'),
}

model ListAuthResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthResponseBody(name='body'),
}

async function listAuthWithOptions(request: ListAuthRequest, runtime: Util.RuntimeOptions): ListAuthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAuth', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAuth(request: ListAuthRequest): ListAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthWithOptions(request, runtime);
}

model GetEventStatisticsRequest {
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  uid?: long(name='Uid'),
  operaUid?: string(name='OperaUid'),
}

model GetEventStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  msg?: string(name='Msg'),
  data?: map[string]any(name='Data'),
}

model GetEventStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventStatisticsResponseBody(name='body'),
}

async function getEventStatisticsWithOptions(request: GetEventStatisticsRequest, runtime: Util.RuntimeOptions): GetEventStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEventStatistics', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEventStatistics(request: GetEventStatisticsRequest): GetEventStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventStatisticsWithOptions(request, runtime);
}

model GetSynCloudResourceListRequest {
  operaUid?: string(name='OperaUid'),
}

model GetSynCloudResourceListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
  pageTotal?: int32(name='PageTotal'),
}

model GetSynCloudResourceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetSynCloudResourceListResponseBody(name='body'),
}

async function getSynCloudResourceListWithOptions(request: GetSynCloudResourceListRequest, runtime: Util.RuntimeOptions): GetSynCloudResourceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSynCloudResourceList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSynCloudResourceList(request: GetSynCloudResourceListRequest): GetSynCloudResourceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSynCloudResourceListWithOptions(request, runtime);
}

model PutAlertContactGroupRequest {
  alertContactGroupJson?: string(name='AlertContactGroupJson'),
  contactIdsJson?: string(name='ContactIdsJson'),
}

model PutAlertContactGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model PutAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: PutAlertContactGroupResponseBody(name='body'),
}

async function putAlertContactGroupWithOptions(request: PutAlertContactGroupRequest, runtime: Util.RuntimeOptions): PutAlertContactGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutAlertContactGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putAlertContactGroup(request: PutAlertContactGroupRequest): PutAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAlertContactGroupWithOptions(request, runtime);
}

model DescribeReportDataResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: {
    heathScore?: long(name='HeathScore'),
    heathScoreTrendList?: [ long ](name='HeathScoreTrendList'),
    preUpdateTime?: string(name='PreUpdateTime'),
    riskCount?: long(name='RiskCount'),
    riskCountTrendList?: [ long ](name='RiskCountTrendList'),
  }(name='Data'),
}

model DescribeReportDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReportDataResponseBody(name='body'),
}

async function describeReportDataWithOptions(runtime: Util.RuntimeOptions): DescribeReportDataResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeReportData', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeReportData(): DescribeReportDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReportDataWithOptions(runtime);
}

model GetResourceTypeListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: boolean(name='Status'),
  data?: map[string]any(name='Data'),
}

model GetResourceTypeListResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceTypeListResponseBody(name='body'),
}

async function getResourceTypeListWithOptions(runtime: Util.RuntimeOptions): GetResourceTypeListResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetResourceTypeList', '2020-08-06', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getResourceTypeList(): GetResourceTypeListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceTypeListWithOptions(runtime);
}

model DeleteAlertSettingRequest {
  alertSettingId?: long(name='AlertSettingId', description='报警设置ID'),
}

model DeleteAlertSettingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model DeleteAlertSettingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertSettingResponseBody(name='body'),
}

async function deleteAlertSettingWithOptions(request: DeleteAlertSettingRequest, runtime: Util.RuntimeOptions): DeleteAlertSettingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAlertSetting', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAlertSetting(request: DeleteAlertSettingRequest): DeleteAlertSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertSettingWithOptions(request, runtime);
}

model CreateAlertContactGroupRequest {
  alertContactGroupJson?: string(name='AlertContactGroupJson'),
  contactIdsJson?: string(name='ContactIdsJson'),
  operaUid?: string(name='OperaUid'),
}

model CreateAlertContactGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model CreateAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAlertContactGroupResponseBody(name='body'),
}

async function createAlertContactGroupWithOptions(request: CreateAlertContactGroupRequest, runtime: Util.RuntimeOptions): CreateAlertContactGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAlertContactGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAlertContactGroup(request: CreateAlertContactGroupRequest): CreateAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertContactGroupWithOptions(request, runtime);
}

model GetEventSequentialTrentRequest {
  eventId?: string(name='EventId'),
  aliUid?: string(name='AliUid'),
  operaUid?: string(name='OperaUid'),
}

model GetEventSequentialTrentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
  pageTotal?: int32(name='PageTotal'),
}

model GetEventSequentialTrentResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventSequentialTrentResponseBody(name='body'),
}

async function getEventSequentialTrentWithOptions(request: GetEventSequentialTrentRequest, runtime: Util.RuntimeOptions): GetEventSequentialTrentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEventSequentialTrent', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEventSequentialTrent(request: GetEventSequentialTrentRequest): GetEventSequentialTrentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventSequentialTrentWithOptions(request, runtime);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent'),
  regionId?: string(name='RegionId'),
  instanceIds?: string(name='InstanceIds'),
  type?: string(name='Type'),
  name?: string(name='Name'),
}

model RunCommandResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: boolean(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommandWithOptions(request: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunCommand', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model GetCidInfoRequest {
  uid?: long(name='Uid'),
}

model GetCidInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
}

model GetCidInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCidInfoResponseBody(name='body'),
}

async function getCidInfoWithOptions(request: GetCidInfoRequest, runtime: Util.RuntimeOptions): GetCidInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCidInfo', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCidInfo(request: GetCidInfoRequest): GetCidInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCidInfoWithOptions(request, runtime);
}

model GetBusinessGroupInfoRequest {
  businessGroupId?: string(name='BusinessGroupId'),
  operaUid?: string(name='OperaUid'),
}

model GetBusinessGroupInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: boolean(name='Status'),
  data?: map[string]any(name='Data'),
}

model GetBusinessGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetBusinessGroupInfoResponseBody(name='body'),
}

async function getBusinessGroupInfoWithOptions(request: GetBusinessGroupInfoRequest, runtime: Util.RuntimeOptions): GetBusinessGroupInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetBusinessGroupInfo', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBusinessGroupInfo(request: GetBusinessGroupInfoRequest): GetBusinessGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessGroupInfoWithOptions(request, runtime);
}

model GetAlertListRequest {
  eventId?: string(name='EventId'),
  aliUid?: string(name='AliUid'),
  operaUid?: string(name='OperaUid'),
}

model GetAlertListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
  pageTotal?: int32(name='PageTotal'),
}

model GetAlertListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlertListResponseBody(name='body'),
}

async function getAlertListWithOptions(request: GetAlertListRequest, runtime: Util.RuntimeOptions): GetAlertListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAlertList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAlertList(request: GetAlertListRequest): GetAlertListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlertListWithOptions(request, runtime);
}

model DescribeDiagnoseRequest {
  product?: string(name='Product'),
}

model DescribeDiagnoseResponseBody = {
  status?: string(name='Status'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
  diagnoseResult?: map[string]any(name='DiagnoseResult'),
}

model DescribeDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnoseResponseBody(name='body'),
}

async function describeDiagnoseWithOptions(request: DescribeDiagnoseRequest, runtime: Util.RuntimeOptions): DescribeDiagnoseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDiagnose', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDiagnose(request: DescribeDiagnoseRequest): DescribeDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnoseWithOptions(request, runtime);
}

model DeleteAlertContactFromGroupRequest {
  contactIdListJson?: string(name='ContactIdListJson'),
  groupId?: long(name='GroupId'),
}

model DeleteAlertContactFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model DeleteAlertContactFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertContactFromGroupResponseBody(name='body'),
}

async function deleteAlertContactFromGroupWithOptions(request: DeleteAlertContactFromGroupRequest, runtime: Util.RuntimeOptions): DeleteAlertContactFromGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAlertContactFromGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAlertContactFromGroup(request: DeleteAlertContactFromGroupRequest): DeleteAlertContactFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertContactFromGroupWithOptions(request, runtime);
}

model DescribeAlertDetailDataRequest {
  alertId?: long(name='AlertId'),
  operaUid?: string(name='OperaUid'),
}

model DescribeAlertDetailDataResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: {
    alertName?: string(name='AlertName'),
    algorithm?: string(name='Algorithm'),
    beginTime?: string(name='BeginTime'),
    category?: string(name='Category'),
    endTime?: string(name='EndTime'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    instanceRegionName?: string(name='InstanceRegionName'),
    mttr?: string(name='Mttr'),
  }(name='Data'),
}

model DescribeAlertDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertDetailDataResponseBody(name='body'),
}

async function describeAlertDetailDataWithOptions(request: DescribeAlertDetailDataRequest, runtime: Util.RuntimeOptions): DescribeAlertDetailDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlertDetailData', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlertDetailData(request: DescribeAlertDetailDataRequest): DescribeAlertDetailDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertDetailDataWithOptions(request, runtime);
}

model PutAlertSettingRequest {
  sendDingtalkNotice?: boolean(name='SendDingtalkNotice'),
  sendSmsNotice?: boolean(name='SendSmsNotice'),
  contactIdsJson?: string(name='ContactIdsJson'),
  contactGroupIdsJson?: string(name='ContactGroupIdsJson'),
  sendEmailNotice?: boolean(name='SendEmailNotice'),
  customerUid?: long(name='CustomerUid', description='废弃'),
  alertSettingId?: long(name='AlertSettingId'),
  alertName?: string(name='AlertName'),
  businessGroupIdsJson?: string(name='BusinessGroupIdsJson'),
  stopDuration?: long(name='StopDuration'),
  operaUid?: string(name='OperaUid'),
}

model PutAlertSettingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model PutAlertSettingResponse = {
  headers: map[string]string(name='headers'),
  body: PutAlertSettingResponseBody(name='body'),
}

async function putAlertSettingWithOptions(request: PutAlertSettingRequest, runtime: Util.RuntimeOptions): PutAlertSettingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutAlertSetting', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putAlertSetting(request: PutAlertSettingRequest): PutAlertSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAlertSettingWithOptions(request, runtime);
}

model GetEventRootCauseRequest {
  operaUid?: string(name='OperaUid'),
  eventId?: string(name='EventId'),
}

model GetEventRootCauseResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
  pageTotal?: int32(name='PageTotal'),
}

model GetEventRootCauseResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventRootCauseResponseBody(name='body'),
}

async function getEventRootCauseWithOptions(request: GetEventRootCauseRequest, runtime: Util.RuntimeOptions): GetEventRootCauseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEventRootCause', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEventRootCause(request: GetEventRootCauseRequest): GetEventRootCauseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventRootCauseWithOptions(request, runtime);
}

model ListAuthorizedUidResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  list?: [ long ](name='List'),
}

model ListAuthorizedUidResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthorizedUidResponseBody(name='body'),
}

async function listAuthorizedUidWithOptions(runtime: Util.RuntimeOptions): ListAuthorizedUidResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListAuthorizedUid', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAuthorizedUid(): ListAuthorizedUidResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthorizedUidWithOptions(runtime);
}

model GetBusinessGroupListRequest {
  aliUid?: string(name='AliUid'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  operaUid?: string(name='OperaUid'),
}

model GetBusinessGroupListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: boolean(name='Status'),
  msg?: string(name='Msg'),
  data?: map[string]any(name='Data'),
  pageTotal?: int32(name='PageTotal'),
}

model GetBusinessGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: GetBusinessGroupListResponseBody(name='body'),
}

async function getBusinessGroupListWithOptions(request: GetBusinessGroupListRequest, runtime: Util.RuntimeOptions): GetBusinessGroupListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetBusinessGroupList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBusinessGroupList(request: GetBusinessGroupListRequest): GetBusinessGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessGroupListWithOptions(request, runtime);
}

model DeleteAlertContactRequest {
  contactIdListJson?: string(name='ContactIdListJson', description='要删除的数组,json格式'),
  groupId?: long(name='GroupId'),
}

model DeleteAlertContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model DeleteAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertContactResponseBody(name='body'),
}

async function deleteAlertContactWithOptions(request: DeleteAlertContactRequest, runtime: Util.RuntimeOptions): DeleteAlertContactResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAlertContact', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAlertContact(request: DeleteAlertContactRequest): DeleteAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertContactWithOptions(request, runtime);
}

model CloseEventRequest {
  id?: string(name='Id'),
  closeDesc?: string(name='CloseDesc'),
}

model CloseEventResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  status?: string(name='Status'),
  msg?: string(name='Msg'),
  data?: boolean(name='Data'),
}

model CloseEventResponse = {
  headers: map[string]string(name='headers'),
  body: CloseEventResponseBody(name='body'),
}

async function closeEventWithOptions(request: CloseEventRequest, runtime: Util.RuntimeOptions): CloseEventResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloseEvent', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function closeEvent(request: CloseEventRequest): CloseEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeEventWithOptions(request, runtime);
}

model DescribeDiagnoseResultRequest {
  checkId?: string(name='CheckId'),
}

model DescribeDiagnoseResultResponseBody = {
  status?: string(name='Status'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
  diagnoseResult?: map[string]any(name='DiagnoseResult'),
}

model DescribeDiagnoseResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnoseResultResponseBody(name='body'),
}

async function describeDiagnoseResultWithOptions(request: DescribeDiagnoseResultRequest, runtime: Util.RuntimeOptions): DescribeDiagnoseResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDiagnoseResult', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDiagnoseResult(request: DescribeDiagnoseResultRequest): DescribeDiagnoseResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnoseResultWithOptions(request, runtime);
}

model ConfirmAuthorizationRequest {
  type?: string(name='Type'),
  uid?: long(name='Uid'),
}

model ConfirmAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  data?: string(name='Data'),
}

model ConfirmAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmAuthorizationResponseBody(name='body'),
}

async function confirmAuthorizationWithOptions(request: ConfirmAuthorizationRequest, runtime: Util.RuntimeOptions): ConfirmAuthorizationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfirmAuthorization', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function confirmAuthorization(request: ConfirmAuthorizationRequest): ConfirmAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmAuthorizationWithOptions(request, runtime);
}

model CreateCommandRequest {
  commandContent?: string(name='CommandContent'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
  description?: string(name='Description'),
  workingDir?: string(name='WorkingDir'),
  timeout?: long(name='timeout'),
}

model CreateCommandResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateCommandResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCommandResponseBody(name='body'),
}

async function createCommandWithOptions(request: CreateCommandRequest, runtime: Util.RuntimeOptions): CreateCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCommand', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCommandWithOptions(request, runtime);
}

model GetUserLoginInfoRequest {
  accountName?: string(name='AccountName'),
  accountPrincipalName?: string(name='AccountPrincipalName'),
  mainAccountPk?: string(name='MainAccountPk'),
  currentPk?: string(name='CurrentPk'),
  accountType?: string(name='AccountType'),
}

model GetUserLoginInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  msg?: string(name='Msg'),
  data?: map[string]any(name='Data'),
}

model GetUserLoginInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserLoginInfoResponseBody(name='body'),
}

async function getUserLoginInfoWithOptions(request: GetUserLoginInfoRequest, runtime: Util.RuntimeOptions): GetUserLoginInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUserLoginInfo', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserLoginInfo(request: GetUserLoginInfoRequest): GetUserLoginInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserLoginInfoWithOptions(request, runtime);
}

model GetConnectInstancesRequest {
  uid?: long(name='Uid'),
}

model GetConnectInstancesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: long(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: [  map[string]any ](name='Data'),
}

model GetConnectInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnectInstancesResponseBody(name='body'),
}

async function getConnectInstancesWithOptions(request: GetConnectInstancesRequest, runtime: Util.RuntimeOptions): GetConnectInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetConnectInstances', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getConnectInstances(request: GetConnectInstancesRequest): GetConnectInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectInstancesWithOptions(request, runtime);
}

model DeleteAlertContactGroupRequest {
  groupId?: long(name='GroupId'),
}

model DeleteAlertContactGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model DeleteAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertContactGroupResponseBody(name='body'),
}

async function deleteAlertContactGroupWithOptions(request: DeleteAlertContactGroupRequest, runtime: Util.RuntimeOptions): DeleteAlertContactGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAlertContactGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): DeleteAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertContactGroupWithOptions(request, runtime);
}

model AddBusinessGroupRequest {
  aliUid?: string(name='AliUid'),
  businessGroupName?: string(name='BusinessGroupName'),
  businessGroupDesc?: string(name='BusinessGroupDesc'),
  resourceType?: int32(name='ResourceType'),
  createUser?: string(name='CreateUser'),
  updateUser?: string(name='UpdateUser'),
  instanceList?: [ string ](name='InstanceList'),
  operaUid?: string(name='OperaUid'),
}

model AddBusinessGroupShrinkRequest {
  aliUid?: string(name='AliUid'),
  businessGroupName?: string(name='BusinessGroupName'),
  businessGroupDesc?: string(name='BusinessGroupDesc'),
  resourceType?: int32(name='ResourceType'),
  createUser?: string(name='CreateUser'),
  updateUser?: string(name='UpdateUser'),
  instanceListShrink?: string(name='InstanceList'),
  operaUid?: string(name='OperaUid'),
}

model AddBusinessGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
}

model AddBusinessGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddBusinessGroupResponseBody(name='body'),
}

async function addBusinessGroupWithOptions(tmpReq: AddBusinessGroupRequest, runtime: Util.RuntimeOptions): AddBusinessGroupResponse {
  Util.validateModel(tmpReq);
  var request = new AddBusinessGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceList)) {
    request.instanceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceList, 'InstanceList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddBusinessGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addBusinessGroup(request: AddBusinessGroupRequest): AddBusinessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBusinessGroupWithOptions(request, runtime);
}

model DescribeAlertContactGroupRequest {
  pageSize?: long(name='PageSize'),
  currentPage?: long(name='CurrentPage'),
  searchLike?: string(name='SearchLike'),
  operaUid?: string(name='OperaUid'),
}

model DescribeAlertContactGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  total?: int32(name='Total'),
  data?: [ 
    {
      description?: string(name='description'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      groupName?: string(name='groupName'),
      id?: long(name='id'),
      uid?: long(name='uid'),
    }
  ](name='Data'),
}

model DescribeAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertContactGroupResponseBody(name='body'),
}

async function describeAlertContactGroupWithOptions(request: DescribeAlertContactGroupRequest, runtime: Util.RuntimeOptions): DescribeAlertContactGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlertContactGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlertContactGroup(request: DescribeAlertContactGroupRequest): DescribeAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertContactGroupWithOptions(request, runtime);
}

model GetSlsReportListRequest {
  productCode?: string(name='ProductCode'),
  logStore?: string(name='LogStore'),
  severity?: string(name='Severity'),
  instanceId?: string(name='InstanceId'),
  uid?: long(name='Uid'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model GetSlsReportListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
  pageTotal?: long(name='PageTotal'),
}

model GetSlsReportListResponse = {
  headers: map[string]string(name='headers'),
  body: GetSlsReportListResponseBody(name='body'),
}

async function getSlsReportListWithOptions(request: GetSlsReportListRequest, runtime: Util.RuntimeOptions): GetSlsReportListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSlsReportList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSlsReportList(request: GetSlsReportListRequest): GetSlsReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSlsReportListWithOptions(request, runtime);
}

model FeedbackAlertAlgorithmRequest {
  alertId?: long(name='AlertId'),
  operaUid?: string(name='OperaUid'),
  algorithmAccurateState?: int32(name='AlgorithmAccurateState'),
  algorithmAccurateDescribe?: string(name='AlgorithmAccurateDescribe'),
}

model FeedbackAlertAlgorithmResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
}

model FeedbackAlertAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: FeedbackAlertAlgorithmResponseBody(name='body'),
}

async function feedbackAlertAlgorithmWithOptions(request: FeedbackAlertAlgorithmRequest, runtime: Util.RuntimeOptions): FeedbackAlertAlgorithmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FeedbackAlertAlgorithm', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function feedbackAlertAlgorithm(request: FeedbackAlertAlgorithmRequest): FeedbackAlertAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  return feedbackAlertAlgorithmWithOptions(request, runtime);
}

model GetAlertTrentRequest {
  eventId?: string(name='EventId'),
  aliUid?: string(name='AliUid'),
  operaUid?: string(name='OperaUid'),
}

model GetAlertTrentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
  pageTotal?: int32(name='PageTotal'),
}

model GetAlertTrentResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlertTrentResponseBody(name='body'),
}

async function getAlertTrentWithOptions(request: GetAlertTrentRequest, runtime: Util.RuntimeOptions): GetAlertTrentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAlertTrent', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAlertTrent(request: GetAlertTrentRequest): GetAlertTrentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlertTrentWithOptions(request, runtime);
}

model GetCloudAllResourceListRequest {
  uid?: string(name='Uid'),
  operaUid?: string(name='OperaUid'),
}

model GetCloudAllResourceListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: boolean(name='Status'),
  data?: map[string]any(name='Data'),
}

model GetCloudAllResourceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCloudAllResourceListResponseBody(name='body'),
}

async function getCloudAllResourceListWithOptions(request: GetCloudAllResourceListRequest, runtime: Util.RuntimeOptions): GetCloudAllResourceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCloudAllResourceList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCloudAllResourceList(request: GetCloudAllResourceListRequest): GetCloudAllResourceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudAllResourceListWithOptions(request, runtime);
}

model ListCausePlanRequest {
  eventId?: string(name='EventId'),
  rootCauseId?: string(name='RootCauseId'),
  instanceId?: string(name='InstanceId'),
}

model ListCausePlanResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
}

model ListCausePlanResponse = {
  headers: map[string]string(name='headers'),
  body: ListCausePlanResponseBody(name='body'),
}

async function listCausePlanWithOptions(request: ListCausePlanRequest, runtime: Util.RuntimeOptions): ListCausePlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCausePlan', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCausePlan(request: ListCausePlanRequest): ListCausePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCausePlanWithOptions(request, runtime);
}

model CreateMessageRequest {
  eventId?: string(name='EventId'),
  instanceId?: string(name='InstanceId'),
}

model CreateMessageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: boolean(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
}

model CreateMessageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMessageResponseBody(name='body'),
}

async function createMessageWithOptions(request: CreateMessageRequest, runtime: Util.RuntimeOptions): CreateMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMessage', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMessage(request: CreateMessageRequest): CreateMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMessageWithOptions(request, runtime);
}

model PutAlertSettingStatusRequest {
  alertSettingId?: long(name='AlertSettingId', description='报警设置id'),
  settingStatus?: long(name='SettingStatus', description='报警设置状态0:禁用1:启用'),
  operaUid?: string(name='OperaUid'),
}

model PutAlertSettingStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model PutAlertSettingStatusResponse = {
  headers: map[string]string(name='headers'),
  body: PutAlertSettingStatusResponseBody(name='body'),
}

async function putAlertSettingStatusWithOptions(request: PutAlertSettingStatusRequest, runtime: Util.RuntimeOptions): PutAlertSettingStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutAlertSettingStatus', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putAlertSettingStatus(request: PutAlertSettingStatusRequest): PutAlertSettingStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAlertSettingStatusWithOptions(request, runtime);
}

model ListNotAuthorizedUidResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  list?: [ long ](name='List'),
}

model ListNotAuthorizedUidResponse = {
  headers: map[string]string(name='headers'),
  body: ListNotAuthorizedUidResponseBody(name='body'),
}

async function listNotAuthorizedUidWithOptions(runtime: Util.RuntimeOptions): ListNotAuthorizedUidResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListNotAuthorizedUid', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listNotAuthorizedUid(): ListNotAuthorizedUidResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNotAuthorizedUidWithOptions(runtime);
}

model ListConfirmAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  list?: [ 
    {
      name?: string(name='name'),
      status?: string(name='status'),
      uid?: long(name='uid'),
    }
  ](name='List'),
}

model ListConfirmAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfirmAuthorizationResponseBody(name='body'),
}

async function listConfirmAuthorizationWithOptions(runtime: Util.RuntimeOptions): ListConfirmAuthorizationResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListConfirmAuthorization', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listConfirmAuthorization(): ListConfirmAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfirmAuthorizationWithOptions(runtime);
}

model GetRegionListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: boolean(name='Status'),
  data?: map[string]any(name='Data'),
}

model GetRegionListResponse = {
  headers: map[string]string(name='headers'),
  body: GetRegionListResponseBody(name='body'),
}

async function getRegionListWithOptions(runtime: Util.RuntimeOptions): GetRegionListResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetRegionList', '2020-08-06', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getRegionList(): GetRegionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRegionListWithOptions(runtime);
}

model DescribeAlertSettingByIdRequest {
  alertSettingId?: long(name='AlertSettingId', description='报警设置id'),
}

model DescribeAlertSettingByIdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: {
    alertBusinessSettingId?: long(name='AlertBusinessSettingId'),
    alertName?: string(name='AlertName'),
    dataCreateTime?: string(name='DataCreateTime'),
    dataCreateUser?: string(name='DataCreateUser'),
    dataModifyTime?: string(name='DataModifyTime'),
    dataModifyUser?: string(name='DataModifyUser'),
    sendDingtalkNotice?: boolean(name='SendDingtalkNotice'),
    sendEmailNotice?: boolean(name='SendEmailNotice'),
    sendSmsNotice?: boolean(name='SendSmsNotice'),
    settingStatus?: long(name='SettingStatus'),
    stopDuration?: long(name='StopDuration'),
    uid?: long(name='Uid'),
  }(name='Data'),
}

model DescribeAlertSettingByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertSettingByIdResponseBody(name='body'),
}

async function describeAlertSettingByIdWithOptions(request: DescribeAlertSettingByIdRequest, runtime: Util.RuntimeOptions): DescribeAlertSettingByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlertSettingById', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlertSettingById(request: DescribeAlertSettingByIdRequest): DescribeAlertSettingByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSettingByIdWithOptions(request, runtime);
}

model DescribeAlertBusinessGroupWithAlertSettingIdRequest {
  alertSettingId?: long(name='AlertSettingId'),
}

model DescribeAlertBusinessGroupWithAlertSettingIdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: [ 
    {
      businessGroupId?: string(name='BusinessGroupId'),
      businessGroupName?: string(name='BusinessGroupName'),
    }
  ](name='Data'),
}

model DescribeAlertBusinessGroupWithAlertSettingIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertBusinessGroupWithAlertSettingIdResponseBody(name='body'),
}

async function describeAlertBusinessGroupWithAlertSettingIdWithOptions(request: DescribeAlertBusinessGroupWithAlertSettingIdRequest, runtime: Util.RuntimeOptions): DescribeAlertBusinessGroupWithAlertSettingIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlertBusinessGroupWithAlertSettingId', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlertBusinessGroupWithAlertSettingId(request: DescribeAlertBusinessGroupWithAlertSettingIdRequest): DescribeAlertBusinessGroupWithAlertSettingIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertBusinessGroupWithAlertSettingIdWithOptions(request, runtime);
}

model GetAvgRepairTimeRequest {
  uid?: long(name='Uid'),
  operaUid?: string(name='OperaUid'),
}

model GetAvgRepairTimeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: boolean(name='Status'),
  msg?: string(name='Msg'),
  data?: map[string]any(name='Data'),
}

model GetAvgRepairTimeResponse = {
  headers: map[string]string(name='headers'),
  body: GetAvgRepairTimeResponseBody(name='body'),
}

async function getAvgRepairTimeWithOptions(request: GetAvgRepairTimeRequest, runtime: Util.RuntimeOptions): GetAvgRepairTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAvgRepairTime', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAvgRepairTime(request: GetAvgRepairTimeRequest): GetAvgRepairTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAvgRepairTimeWithOptions(request, runtime);
}

model GetAiopsEventListRequest {
  uid?: long(name='Uid'),
  name?: string(name='Name'),
  predictionState?: int32(name='PredictionState'),
  status?: int32(name='Status'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  severity?: int32(name='Severity'),
  businessGroupId?: string(name='BusinessGroupId'),
  businessGroupName?: string(name='BusinessGroupName'),
  operaUid?: string(name='OperaUid'),
}

model GetAiopsEventListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
  pageTotal?: int32(name='PageTotal'),
  data?: map[string]any(name='Data'),
}

model GetAiopsEventListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiopsEventListResponseBody(name='body'),
}

async function getAiopsEventListWithOptions(request: GetAiopsEventListRequest, runtime: Util.RuntimeOptions): GetAiopsEventListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAiopsEventList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAiopsEventList(request: GetAiopsEventListRequest): GetAiopsEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAiopsEventListWithOptions(request, runtime);
}

model GetRealDataRequest {
  uid?: long(name='Uid'),
  instanceId?: string(name='InstanceId'),
  flowName?: string(name='FlowName'),
  startTimestamp?: string(name='StartTimestamp'),
  endTimestamp?: string(name='EndTimestamp'),
}

model GetRealDataResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: long(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
}

model GetRealDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealDataResponseBody(name='body'),
}

async function getRealDataWithOptions(request: GetRealDataRequest, runtime: Util.RuntimeOptions): GetRealDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRealData', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRealData(request: GetRealDataRequest): GetRealDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRealDataWithOptions(request, runtime);
}

model GetCloudResourceListRequest {
  id?: string(name='Id'),
  uid?: string(name='Uid'),
  cloudRegionId?: string(name='CloudRegionId'),
  businessGroupId?: string(name='BusinessGroupId'),
  instanceName?: string(name='InstanceName'),
  instanceId?: string(name='InstanceId'),
  isOptional?: int32(name='IsOptional'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  operaUid?: string(name='OperaUid'),
}

model GetCloudResourceListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
  pageTotal?: int32(name='PageTotal'),
}

model GetCloudResourceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCloudResourceListResponseBody(name='body'),
}

async function getCloudResourceListWithOptions(request: GetCloudResourceListRequest, runtime: Util.RuntimeOptions): GetCloudResourceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCloudResourceList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCloudResourceList(request: GetCloudResourceListRequest): GetCloudResourceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudResourceListWithOptions(request, runtime);
}

model DescribeAllAlertContactGroupRequest {
  operaUid?: string(name='OperaUid'),
}

model DescribeAllAlertContactGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: [ 
    {
      description?: string(name='description'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      groupName?: string(name='groupName'),
      id?: long(name='id'),
      uid?: long(name='uid'),
    }
  ](name='Data'),
}

model DescribeAllAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllAlertContactGroupResponseBody(name='body'),
}

async function describeAllAlertContactGroupWithOptions(request: DescribeAllAlertContactGroupRequest, runtime: Util.RuntimeOptions): DescribeAllAlertContactGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllAlertContactGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllAlertContactGroup(request: DescribeAllAlertContactGroupRequest): DescribeAllAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllAlertContactGroupWithOptions(request, runtime);
}

model DelBusinessGroupRequest {
  businessGroupId?: string(name='BusinessGroupId'),
  operaUid?: string(name='OperaUid'),
}

model DelBusinessGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
}

model DelBusinessGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DelBusinessGroupResponseBody(name='body'),
}

async function delBusinessGroupWithOptions(request: DelBusinessGroupRequest, runtime: Util.RuntimeOptions): DelBusinessGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DelBusinessGroup', '2020-08-06', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function delBusinessGroup(request: DelBusinessGroupRequest): DelBusinessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return delBusinessGroupWithOptions(request, runtime);
}

model ApplyAuthorizationRequest {
  uid?: long(name='Uid'),
}

model ApplyAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  data?: string(name='Data'),
}

model ApplyAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAuthorizationResponseBody(name='body'),
}

async function applyAuthorizationWithOptions(request: ApplyAuthorizationRequest, runtime: Util.RuntimeOptions): ApplyAuthorizationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApplyAuthorization', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function applyAuthorization(request: ApplyAuthorizationRequest): ApplyAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAuthorizationWithOptions(request, runtime);
}

model PutAlertSettingListRequest {
  contactIdsJson?: string(name='ContactIdsJson'),
  contactGroupIdsJson?: string(name='ContactGroupIdsJson'),
  alertSettingEditRequestListJson?: string(name='AlertSettingEditRequestListJson'),
}

model PutAlertSettingListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model PutAlertSettingListResponse = {
  headers: map[string]string(name='headers'),
  body: PutAlertSettingListResponseBody(name='body'),
}

async function putAlertSettingListWithOptions(request: PutAlertSettingListRequest, runtime: Util.RuntimeOptions): PutAlertSettingListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutAlertSettingList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putAlertSettingList(request: PutAlertSettingListRequest): PutAlertSettingListResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAlertSettingListWithOptions(request, runtime);
}

model ListSlsReportsRequest {
  productCode?: string(name='ProductCode'),
  logStore?: string(name='LogStore'),
  severity?: string(name='Severity'),
  instanceId?: string(name='InstanceId'),
  uid?: long(name='Uid'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model ListSlsReportsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  code?: int32(name='Code'),
  data?: [  map[string]any ](name='Data'),
  pageTotal?: long(name='PageTotal'),
}

model ListSlsReportsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSlsReportsResponseBody(name='body'),
}

async function listSlsReportsWithOptions(request: ListSlsReportsRequest, runtime: Util.RuntimeOptions): ListSlsReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSlsReports', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSlsReports(request: ListSlsReportsRequest): ListSlsReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSlsReportsWithOptions(request, runtime);
}

model DescribeAlertContactRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  searchLike?: string(name='SearchLike'),
  searchBy?: string(name='SearchBy'),
  operaUid?: string(name='OperaUid'),
}

model DescribeAlertContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  total?: long(name='Total'),
  data?: [ 
    {
      email?: string(name='email'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      groupNames?: string(name='groupNames'),
      id?: long(name='id'),
      name?: string(name='name'),
      phone?: string(name='phone'),
      uid?: long(name='uid'),
      webhook?: string(name='webhook'),
    }
  ](name='Data'),
}

model DescribeAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertContactResponseBody(name='body'),
}

async function describeAlertContactWithOptions(request: DescribeAlertContactRequest, runtime: Util.RuntimeOptions): DescribeAlertContactResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlertContact', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlertContact(request: DescribeAlertContactRequest): DescribeAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertContactWithOptions(request, runtime);
}

model CreateAlertContactRequest {
  email?: string(name='Email'),
  phone?: string(name='Phone'),
  webhook?: string(name='Webhook'),
  name?: string(name='Name'),
  operaUid?: string(name='OperaUid'),
}

model CreateAlertContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model CreateAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAlertContactResponseBody(name='body'),
}

async function createAlertContactWithOptions(request: CreateAlertContactRequest, runtime: Util.RuntimeOptions): CreateAlertContactResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAlertContact', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAlertContact(request: CreateAlertContactRequest): CreateAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertContactWithOptions(request, runtime);
}

model PutDiagInfoRequest {
  uid?: long(name='Uid'),
  starttime?: long(name='Starttime'),
  endtime?: long(name='Endtime'),
  diagInfo?: string(name='DiagInfo'),
}

model PutDiagInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
}

model PutDiagInfoResponse = {
  headers: map[string]string(name='headers'),
  body: PutDiagInfoResponseBody(name='body'),
}

async function putDiagInfoWithOptions(request: PutDiagInfoRequest, runtime: Util.RuntimeOptions): PutDiagInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutDiagInfo', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putDiagInfo(request: PutDiagInfoRequest): PutDiagInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDiagInfoWithOptions(request, runtime);
}

model GetBusinessGroupOverviewListRequest {
  aliUid?: string(name='AliUid'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  operaUid?: string(name='OperaUid'),
}

model GetBusinessGroupOverviewListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: boolean(name='Status'),
  msg?: string(name='Msg'),
  data?: map[string]any(name='Data'),
  pageTotal?: int32(name='PageTotal'),
}

model GetBusinessGroupOverviewListResponse = {
  headers: map[string]string(name='headers'),
  body: GetBusinessGroupOverviewListResponseBody(name='body'),
}

async function getBusinessGroupOverviewListWithOptions(request: GetBusinessGroupOverviewListRequest, runtime: Util.RuntimeOptions): GetBusinessGroupOverviewListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetBusinessGroupOverviewList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBusinessGroupOverviewList(request: GetBusinessGroupOverviewListRequest): GetBusinessGroupOverviewListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessGroupOverviewListWithOptions(request, runtime);
}

model CreateDumpRequest {
  eventId?: string(name='EventId'),
  instanceId?: string(name='InstanceId'),
}

model CreateDumpResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: boolean(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
}

model CreateDumpResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDumpResponseBody(name='body'),
}

async function createDumpWithOptions(request: CreateDumpRequest, runtime: Util.RuntimeOptions): CreateDumpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDump', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDump(request: CreateDumpRequest): CreateDumpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDumpWithOptions(request, runtime);
}

model IgnoreAlarmsRequest {
  alarmId?: string(name='AlarmId'),
}

model IgnoreAlarmsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  data?: boolean(name='Data'),
}

model IgnoreAlarmsResponse = {
  headers: map[string]string(name='headers'),
  body: IgnoreAlarmsResponseBody(name='body'),
}

async function ignoreAlarmsWithOptions(request: IgnoreAlarmsRequest, runtime: Util.RuntimeOptions): IgnoreAlarmsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('IgnoreAlarms', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function ignoreAlarms(request: IgnoreAlarmsRequest): IgnoreAlarmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreAlarmsWithOptions(request, runtime);
}

model DescribeAllBusinessGroupInfoRequest {
  operaUid?: string(name='OperaUid'),
}

model DescribeAllBusinessGroupInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: [ 
    {
      businessGroupId?: string(name='BusinessGroupId'),
      businessGroupName?: string(name='BusinessGroupName'),
    }
  ](name='Data'),
}

model DescribeAllBusinessGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllBusinessGroupInfoResponseBody(name='body'),
}

async function describeAllBusinessGroupInfoWithOptions(request: DescribeAllBusinessGroupInfoRequest, runtime: Util.RuntimeOptions): DescribeAllBusinessGroupInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllBusinessGroupInfo', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllBusinessGroupInfo(request: DescribeAllBusinessGroupInfoRequest): DescribeAllBusinessGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllBusinessGroupInfoWithOptions(request, runtime);
}

model CountLatestReportsRequest {
  productCode?: string(name='ProductCode'),
  logStore?: string(name='LogStore'),
  uid?: long(name='Uid'),
}

model CountLatestReportsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
}

model CountLatestReportsResponse = {
  headers: map[string]string(name='headers'),
  body: CountLatestReportsResponseBody(name='body'),
}

async function countLatestReportsWithOptions(request: CountLatestReportsRequest, runtime: Util.RuntimeOptions): CountLatestReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CountLatestReports', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function countLatestReports(request: CountLatestReportsRequest): CountLatestReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return countLatestReportsWithOptions(request, runtime);
}

model DescribeRiskRequest {
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  types?: string(name='Types'),
  uid?: long(name='Uid'),
}

model DescribeRiskResponseBody = {
  status?: string(name='Status'),
  code?: string(name='Code'),
  riskAssessment?: map[string]any(name='RiskAssessment'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeRiskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskResponseBody(name='body'),
}

async function describeRiskWithOptions(request: DescribeRiskRequest, runtime: Util.RuntimeOptions): DescribeRiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRisk', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRisk(request: DescribeRiskRequest): DescribeRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskWithOptions(request, runtime);
}

model ListReportsRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  uid?: long(name='Uid'),
}

model ListReportsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  code?: int32(name='Code'),
  pageTotal?: long(name='PageTotal'),
  data?: [ 
    {
      bid?: string(name='bid'),
      cid?: long(name='cid'),
      costCount?: long(name='costCount'),
      costCountTrendJson?: string(name='costCountTrendJson'),
      criticalCount?: long(name='criticalCount'),
      criticalCountTrendJson?: string(name='criticalCountTrendJson'),
      customerName?: string(name='customerName'),
      gcLevel?: string(name='gcLevel'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      normalCount?: long(name='normalCount'),
      normalCountTrendJson?: string(name='normalCountTrendJson'),
      score?: long(name='score'),
      scoreTrendJson?: string(name='scoreTrendJson'),
      trendJson?: string(name='trendJson'),
      uid?: long(name='uid'),
      warningCount?: long(name='warningCount'),
      warningCountTrendJson?: string(name='warningCountTrendJson'),
    }
  ](name='Data'),
}

model ListReportsResponse = {
  headers: map[string]string(name='headers'),
  body: ListReportsResponseBody(name='body'),
}

async function listReportsWithOptions(request: ListReportsRequest, runtime: Util.RuntimeOptions): ListReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListReports', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listReports(request: ListReportsRequest): ListReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listReportsWithOptions(request, runtime);
}

model GetAiopsEventNewListRequest {
  uid?: long(name='Uid'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  operaUid?: string(name='OperaUid'),
}

model GetAiopsEventNewListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  msg?: string(name='Msg'),
  data?: map[string]any(name='Data'),
  pageTotal?: long(name='PageTotal'),
}

model GetAiopsEventNewListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiopsEventNewListResponseBody(name='body'),
}

async function getAiopsEventNewListWithOptions(request: GetAiopsEventNewListRequest, runtime: Util.RuntimeOptions): GetAiopsEventNewListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAiopsEventNewList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAiopsEventNewList(request: GetAiopsEventNewListRequest): GetAiopsEventNewListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAiopsEventNewListWithOptions(request, runtime);
}

model GetEventDetailRequest {
  id?: long(name='Id'),
  eventId?: string(name='EventId'),
  operaUid?: string(name='OperaUid'),
}

model GetEventDetailResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
}

model GetEventDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventDetailResponseBody(name='body'),
}

async function getEventDetailWithOptions(request: GetEventDetailRequest, runtime: Util.RuntimeOptions): GetEventDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEventDetail', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEventDetail(request: GetEventDetailRequest): GetEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventDetailWithOptions(request, runtime);
}

model PutAlertContactToGroupRequest {
  contactIdListJson?: string(name='ContactIdListJson'),
  groupId?: long(name='GroupId'),
  groupIdListJson?: string(name='GroupIdListJson'),
}

model PutAlertContactToGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model PutAlertContactToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: PutAlertContactToGroupResponseBody(name='body'),
}

async function putAlertContactToGroupWithOptions(request: PutAlertContactToGroupRequest, runtime: Util.RuntimeOptions): PutAlertContactToGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutAlertContactToGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putAlertContactToGroup(request: PutAlertContactToGroupRequest): PutAlertContactToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAlertContactToGroupWithOptions(request, runtime);
}

model GetRootCauseRequest {
  eventId?: string(name='EventId'),
  rootCauseId?: string(name='RootCauseId'),
  instanceId?: string(name='InstanceId'),
}

model GetRootCauseResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
}

model GetRootCauseResponse = {
  headers: map[string]string(name='headers'),
  body: GetRootCauseResponseBody(name='body'),
}

async function getRootCauseWithOptions(request: GetRootCauseRequest, runtime: Util.RuntimeOptions): GetRootCauseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRootCause', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRootCause(request: GetRootCauseRequest): GetRootCauseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRootCauseWithOptions(request, runtime);
}

model DescribeAllAlertContactRequest {
  operaUid?: string(name='OperaUid'),
}

model DescribeAllAlertContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: [ 
    {
      email?: string(name='email'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      groupNames?: string(name='groupNames'),
      id?: long(name='id'),
      name?: string(name='name'),
      phone?: string(name='phone'),
      uid?: long(name='uid'),
      webhook?: string(name='webhook'),
    }
  ](name='Data'),
}

model DescribeAllAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllAlertContactResponseBody(name='body'),
}

async function describeAllAlertContactWithOptions(request: DescribeAllAlertContactRequest, runtime: Util.RuntimeOptions): DescribeAllAlertContactResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllAlertContact', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllAlertContact(request: DescribeAllAlertContactRequest): DescribeAllAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllAlertContactWithOptions(request, runtime);
}

model UpdateAuthorizationRequest {
  userId?: string(name='UserId'),
  type?: string(name='Type'),
}

model UpdateAuthorizationResponseBody = {
  status?: string(name='Status'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdateAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAuthorizationResponseBody(name='body'),
}

async function updateAuthorizationWithOptions(request: UpdateAuthorizationRequest, runtime: Util.RuntimeOptions): UpdateAuthorizationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAuthorization', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAuthorization(request: UpdateAuthorizationRequest): UpdateAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAuthorizationWithOptions(request, runtime);
}

model DescribeAlertContactWithAlertSettingIdRequest {
  contactType?: long(name='ContactType'),
  alertSettingId?: long(name='AlertSettingId'),
}

model DescribeAlertContactWithAlertSettingIdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: [ 
    {
      contactId?: long(name='contactId'),
      contactName?: string(name='contactName'),
      contactType?: long(name='contactType'),
    }
  ](name='Data'),
}

model DescribeAlertContactWithAlertSettingIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertContactWithAlertSettingIdResponseBody(name='body'),
}

async function describeAlertContactWithAlertSettingIdWithOptions(request: DescribeAlertContactWithAlertSettingIdRequest, runtime: Util.RuntimeOptions): DescribeAlertContactWithAlertSettingIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlertContactWithAlertSettingId', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlertContactWithAlertSettingId(request: DescribeAlertContactWithAlertSettingIdRequest): DescribeAlertContactWithAlertSettingIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertContactWithAlertSettingIdWithOptions(request, runtime);
}

model GetAuthorizationRequest {
  userId?: string(name='UserId'),
}

model GetAuthorizationResponseBody = {
  status?: string(name='Status'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model GetAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthorizationResponseBody(name='body'),
}

async function getAuthorizationWithOptions(request: GetAuthorizationRequest, runtime: Util.RuntimeOptions): GetAuthorizationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuthorization', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuthorization(request: GetAuthorizationRequest): GetAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthorizationWithOptions(request, runtime);
}

model GetRoleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  staus?: string(name='Staus'),
  data?: boolean(name='Data'),
  code?: int32(name='Code'),
}

model GetRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoleResponseBody(name='body'),
}

async function getRoleWithOptions(runtime: Util.RuntimeOptions): GetRoleResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetRole', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRole(): GetRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoleWithOptions(runtime);
}

model ListRootCauseRequest {
  eventId?: string(name='EventId'),
  rootCauseId?: string(name='RootCauseId'),
  instanceId?: string(name='InstanceId'),
}

model ListRootCauseResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
}

model ListRootCauseResponse = {
  headers: map[string]string(name='headers'),
  body: ListRootCauseResponseBody(name='body'),
}

async function listRootCauseWithOptions(request: ListRootCauseRequest, runtime: Util.RuntimeOptions): ListRootCauseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRootCause', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRootCause(request: ListRootCauseRequest): ListRootCauseResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRootCauseWithOptions(request, runtime);
}

model DescribeAlertContactWithGroupIdRequest {
  groupId?: long(name='GroupId'),
}

model DescribeAlertContactWithGroupIdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: [ 
    {
      email?: string(name='email'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      name?: string(name='name'),
      phone?: string(name='phone'),
      uid?: long(name='uid'),
      webhook?: string(name='webhook'),
    }
  ](name='Data'),
}

model DescribeAlertContactWithGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertContactWithGroupIdResponseBody(name='body'),
}

async function describeAlertContactWithGroupIdWithOptions(request: DescribeAlertContactWithGroupIdRequest, runtime: Util.RuntimeOptions): DescribeAlertContactWithGroupIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlertContactWithGroupId', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlertContactWithGroupId(request: DescribeAlertContactWithGroupIdRequest): DescribeAlertContactWithGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertContactWithGroupIdWithOptions(request, runtime);
}

model DeleteAlertSettingListRequest {
  customerIdsJson?: string(name='CustomerIdsJson'),
}

model DeleteAlertSettingListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model DeleteAlertSettingListResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertSettingListResponseBody(name='body'),
}

async function deleteAlertSettingListWithOptions(request: DeleteAlertSettingListRequest, runtime: Util.RuntimeOptions): DeleteAlertSettingListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAlertSettingList', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAlertSettingList(request: DeleteAlertSettingListRequest): DeleteAlertSettingListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertSettingListWithOptions(request, runtime);
}

model GetTrendSlsReportsRequest {
  productCode?: string(name='ProductCode'),
  uid?: long(name='Uid'),
  instanceId?: string(name='InstanceId'),
  severity?: string(name='Severity'),
}

model GetTrendSlsReportsResponseBody = {
  status?: string(name='Status'),
  message?: string(name='Message'),
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTrendSlsReportsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendSlsReportsResponseBody(name='body'),
}

async function getTrendSlsReportsWithOptions(request: GetTrendSlsReportsRequest, runtime: Util.RuntimeOptions): GetTrendSlsReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTrendSlsReports', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTrendSlsReports(request: GetTrendSlsReportsRequest): GetTrendSlsReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrendSlsReportsWithOptions(request, runtime);
}

model ListEventRequest {
  uid?: long(name='Uid'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model ListEventResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: long(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  list?: [  map[string]any ](name='List'),
  pageTotal?: long(name='PageTotal'),
}

model ListEventResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventResponseBody(name='body'),
}

async function listEventWithOptions(request: ListEventRequest, runtime: Util.RuntimeOptions): ListEventResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListEvent', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listEvent(request: ListEventRequest): ListEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventWithOptions(request, runtime);
}

model GetDiagInfoRequest {
  uid?: long(name='Uid'),
  starttime?: long(name='Starttime'),
  endtime?: long(name='Endtime'),
  diagnosticId?: string(name='DiagnosticId'),
  status?: string(name='Status'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model GetDiagInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
  data?: map[string]any(name='Data'),
  pageTotal?: long(name='PageTotal'),
}

model GetDiagInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiagInfoResponseBody(name='body'),
}

async function getDiagInfoWithOptions(request: GetDiagInfoRequest, runtime: Util.RuntimeOptions): GetDiagInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDiagInfo', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDiagInfo(request: GetDiagInfoRequest): GetDiagInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiagInfoWithOptions(request, runtime);
}

model DescribeInvocationResultsRequest {
  regionId?: string(name='RegionId'),
  invokeId?: string(name='InvokeId'),
  instanceId?: string(name='InstanceId'),
  commandId?: string(name='CommandId'),
}

model DescribeInvocationResultsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: boolean(name='Status'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
}

model DescribeInvocationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationResultsResponseBody(name='body'),
}

async function describeInvocationResultsWithOptions(request: DescribeInvocationResultsRequest, runtime: Util.RuntimeOptions): DescribeInvocationResultsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInvocationResults', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInvocationResults(request: DescribeInvocationResultsRequest): DescribeInvocationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationResultsWithOptions(request, runtime);
}

model GetEventTrentRequest {
  uid?: long(name='Uid'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  timeType?: string(name='TimeType'),
  granularityType?: string(name='GranularityType'),
  operaUid?: string(name='OperaUid'),
}

model GetEventTrentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  status?: string(name='Status'),
  msg?: string(name='Msg'),
  data?: map[string]any(name='Data'),
  pageTotal?: long(name='PageTotal'),
}

model GetEventTrentResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventTrentResponseBody(name='body'),
}

async function getEventTrentWithOptions(request: GetEventTrentRequest, runtime: Util.RuntimeOptions): GetEventTrentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEventTrent', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEventTrent(request: GetEventTrentRequest): GetEventTrentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventTrentWithOptions(request, runtime);
}

model ListApplyAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  list?: map[string]any(name='List'),
}

model ListApplyAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplyAuthorizationResponseBody(name='body'),
}

async function listApplyAuthorizationWithOptions(runtime: Util.RuntimeOptions): ListApplyAuthorizationResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListApplyAuthorization', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listApplyAuthorization(): ListApplyAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplyAuthorizationWithOptions(runtime);
}

model DescribeAlertSettingRequest {
  pageSize?: long(name='PageSize'),
  currentPage?: long(name='CurrentPage'),
  customerName?: string(name='CustomerName', description='废弃'),
  uid?: long(name='Uid', description='废弃'),
  searchKeyword?: string(name='SearchKeyword'),
  settingStatus?: string(name='SettingStatus'),
  operaUid?: string(name='OperaUid'),
}

model DescribeAlertSettingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  total?: int32(name='Total'),
  data?: [ 
    {
      alertName?: string(name='AlertName'),
      alertSettingId?: long(name='AlertSettingId'),
      businessGroupIds?: string(name='BusinessGroupIds'),
      businessGroupNames?: string(name='BusinessGroupNames'),
      contactIds?: string(name='ContactIds'),
      contactNames?: string(name='ContactNames'),
      sendDingtalkNotice?: boolean(name='SendDingtalkNotice'),
      sendEmailNotice?: boolean(name='SendEmailNotice'),
      sendSmsNotice?: boolean(name='SendSmsNotice'),
      settingStatus?: long(name='SettingStatus'),
      stopDuration?: long(name='StopDuration'),
      totalBusinessResourceNumber?: long(name='TotalBusinessResourceNumber'),
    }
  ](name='Data'),
}

model DescribeAlertSettingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertSettingResponseBody(name='body'),
}

async function describeAlertSettingWithOptions(request: DescribeAlertSettingRequest, runtime: Util.RuntimeOptions): DescribeAlertSettingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlertSetting', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlertSetting(request: DescribeAlertSettingRequest): DescribeAlertSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertSettingWithOptions(request, runtime);
}

model UpdBusinessGroupRequest {
  businessGroupId?: string(name='BusinessGroupId'),
  aliUid?: string(name='AliUid'),
  businessGroupName?: string(name='BusinessGroupName'),
  businessGroupDesc?: string(name='BusinessGroupDesc'),
  resourceType?: int32(name='ResourceType'),
  updateUser?: string(name='UpdateUser'),
  instanceList?: [ string ](name='InstanceList'),
  cloudResourceTypeId?: string(name='CloudResourceTypeId'),
  dealType?: int32(name='DealType'),
  operaUid?: string(name='OperaUid'),
}

model UpdBusinessGroupShrinkRequest {
  businessGroupId?: string(name='BusinessGroupId'),
  aliUid?: string(name='AliUid'),
  businessGroupName?: string(name='BusinessGroupName'),
  businessGroupDesc?: string(name='BusinessGroupDesc'),
  resourceType?: int32(name='ResourceType'),
  updateUser?: string(name='UpdateUser'),
  instanceListShrink?: string(name='InstanceList'),
  cloudResourceTypeId?: string(name='CloudResourceTypeId'),
  dealType?: int32(name='DealType'),
  operaUid?: string(name='OperaUid'),
}

model UpdBusinessGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  status?: string(name='Status'),
}

model UpdBusinessGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdBusinessGroupResponseBody(name='body'),
}

async function updBusinessGroupWithOptions(tmpReq: UpdBusinessGroupRequest, runtime: Util.RuntimeOptions): UpdBusinessGroupResponse {
  Util.validateModel(tmpReq);
  var request = new UpdBusinessGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceList)) {
    request.instanceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceList, 'InstanceList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdBusinessGroup', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updBusinessGroup(request: UpdBusinessGroupRequest): UpdBusinessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updBusinessGroupWithOptions(request, runtime);
}

model PutAlertContactRequest {
  email?: string(name='Email'),
  phone?: string(name='Phone'),
  webhook?: string(name='Webhook'),
  id?: long(name='Id'),
  name?: string(name='Name'),
}

model PutAlertContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  status?: string(name='Status'),
  data?: boolean(name='Data'),
}

model PutAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: PutAlertContactResponseBody(name='body'),
}

async function putAlertContactWithOptions(request: PutAlertContactRequest, runtime: Util.RuntimeOptions): PutAlertContactResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutAlertContact', '2020-08-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putAlertContact(request: PutAlertContactRequest): PutAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAlertContactWithOptions(request, runtime);
}

