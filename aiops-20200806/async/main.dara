/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'aiops';
  @version = '2020-08-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddAlgorithmRequest {
  algorithmId?: string(name='AlgorithmId', position='Query'),
  algorithmType?: int32(name='AlgorithmType', position='Query'),
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  expandInformation?: string(name='ExpandInformation', position='Query'),
  indexId?: string(name='IndexId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model AddAlgorithmResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model AddAlgorithmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAlgorithmResponseBody(name='body'),
}

async function addAlgorithm(request: AddAlgorithmRequest): AddAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAlgorithm', 'POST', '/', 'json', false, 'json', request);
}

model AddBusinessGroupRequest {
  aliUid?: string(name='AliUid', position='Query'),
  businessGroupDesc: string(name='BusinessGroupDesc', position='Query'),
  businessGroupName: string(name='BusinessGroupName', position='Query'),
  createUser?: string(name='CreateUser', position='Query'),
  instanceList?: [ string ](name='InstanceList', shrink='json', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  resourceType?: int32(name='ResourceType', position='Query'),
  updateUser?: string(name='UpdateUser', position='Query'),
}

model AddBusinessGroupResponseBody = {
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model AddBusinessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddBusinessGroupResponseBody(name='body'),
}

async function addBusinessGroup(request: AddBusinessGroupRequest): AddBusinessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBusinessGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddBusinessGroupOneRequest {
  businessGroupDesc?: string(name='BusinessGroupDesc', position='Body'),
  businessGroupName?: string(name='BusinessGroupName', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model AddBusinessGroupOneResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model AddBusinessGroupOneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddBusinessGroupOneResponseBody(name='body'),
}

async function addBusinessGroupOne(request: AddBusinessGroupOneRequest): AddBusinessGroupOneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBusinessGroupOne', 'POST', '/', 'json', true, 'form', request);
}

model AddScenarioRequest {
  alertSettingId?: long(name='AlertSettingId', position='Query'),
  level?: long(name='Level', position='Query'),
  name?: string(name='Name', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model AddScenarioResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model AddScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddScenarioResponseBody(name='body'),
}

async function addScenario(request: AddScenarioRequest): AddScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddScenario', 'POST', '/', 'json', false, 'json', request);
}

model AddSceneListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  sceneDescribe?: string(name='SceneDescribe', position='Query'),
  sceneName?: string(name='SceneName', position='Query'),
  scenePersonLiable?: string(name='ScenePersonLiable', position='Query'),
  sceneType?: string(name='SceneType', position='Query'),
  sceneVoJson?: string(name='SceneVoJson', position='Query'),
  webhook?: string(name='Webhook', position='Query'),
}

model AddSceneListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model AddSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSceneListResponseBody(name='body'),
}

async function addSceneList(request: AddSceneListRequest): AddSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSceneList', 'GET', '/', 'json', false, 'json', request);
}

model AddScriptRequest {
  handleSuggestDesc?: string(name='HandleSuggestDesc', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  rootCauseDesc?: string(name='RootCauseDesc', position='Query'),
  rootCausesLog?: string(name='RootCausesLog', position='Query'),
  sceneId?: string(name='SceneId', position='Query'),
  script?: string(name='Script', position='Query'),
  scriptDesc?: string(name='ScriptDesc', position='Query'),
  scriptLanguage?: string(name='ScriptLanguage', position='Query'),
  scriptName?: string(name='ScriptName', position='Query'),
  scriptVersion?: string(name='ScriptVersion', example='0.1', position='Query'),
  status?: int32(name='Status', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model AddScriptResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model AddScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddScriptResponseBody(name='body'),
}

async function addScript(request: AddScriptRequest): AddScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddScript', 'POST', '/', 'json', false, 'json', request);
}

model AddTagInfoRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  tagName?: string(name='TagName', position='Query'),
}

model AddTagInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model AddTagInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTagInfoResponseBody(name='body'),
}

async function addTagInfo(request: AddTagInfoRequest): AddTagInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTagInfo', 'GET', '/', 'json', false, 'json', request);
}

model AgainSubmitApplyPermissionRequest {
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
  type?: string(name='Type', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model AgainSubmitApplyPermissionResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model AgainSubmitApplyPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgainSubmitApplyPermissionResponseBody(name='body'),
}

async function againSubmitApplyPermission(request: AgainSubmitApplyPermissionRequest): AgainSubmitApplyPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AgainSubmitApplyPermission', 'POST', '/', 'json', false, 'json', request);
}

model ApplyAuthorizationRequest {
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model ApplyAuthorizationResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ApplyAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAuthorizationResponseBody(name='body'),
}

async function applyAuthorization(request: ApplyAuthorizationRequest): ApplyAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model CheckDataSourceLinkConnectionRequest {
  dataSourceParams: string(name='DataSourceParams', position='Query'),
  dataSourceType: int32(name='DataSourceType', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model CheckDataSourceLinkConnectionResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CheckDataSourceLinkConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDataSourceLinkConnectionResponseBody(name='body'),
}

async function checkDataSourceLinkConnection(request: CheckDataSourceLinkConnectionRequest): CheckDataSourceLinkConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDataSourceLinkConnection', 'POST', '/', 'json', false, 'json', request);
}

model CheckLogRequest {
  dataSourceId?: long(name='DataSourceId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model CheckLogResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CheckLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckLogResponseBody(name='body'),
}

async function checkLog(request: CheckLogRequest): CheckLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckLog', 'POST', '/', 'json', false, 'json', request);
}

model CloseEventRequest {
  closeDesc?: string(name='CloseDesc', position='Query'),
  id?: string(name='Id', position='Query'),
}

model CloseEventResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CloseEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseEventResponseBody(name='body'),
}

async function closeEvent(request: CloseEventRequest): CloseEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseEvent', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmAuthorizationRequest {
  permissionType?: int32(name='PermissionType', position='Query'),
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
  type?: string(name='Type', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model ConfirmAuthorizationResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ConfirmAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmAuthorizationResponseBody(name='body'),
}

async function confirmAuthorization(request: ConfirmAuthorizationRequest): ConfirmAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model CountLatestReportsRequest {
  logStore?: string(name='LogStore', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model CountLatestReportsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CountLatestReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CountLatestReportsResponseBody(name='body'),
}

async function countLatestReports(request: CountLatestReportsRequest): CountLatestReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountLatestReports', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlertContactRequest {
  email?: string(name='Email', position='Body'),
  name?: string(name='Name', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  phone?: string(name='Phone', position='Body'),
  webhook?: string(name='Webhook', position='Body'),
}

model CreateAlertContactResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertContactResponseBody(name='body'),
}

async function createAlertContact(request: CreateAlertContactRequest): CreateAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlertContact', 'POST', '/', 'json', true, 'form', request);
}

model CreateAlertContactGroupRequest {
  alertContactGroupJson?: string(name='AlertContactGroupJson', position='Body'),
  contactIdsJson?: string(name='ContactIdsJson', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model CreateAlertContactGroupResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertContactGroupResponseBody(name='body'),
}

async function createAlertContactGroup(request: CreateAlertContactGroupRequest): CreateAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlertContactGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateCommandRequest {
  commandContent?: string(name='CommandContent', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  type?: string(name='Type', position='Query'),
  workingDir?: string(name='WorkingDir', position='Query'),
  timeout?: long(name='timeout', position='Query'),
}

model CreateCommandResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCommandResponseBody(name='body'),
}

async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCommand', 'POST', '/', 'json', false, 'json', request);
}

model CreateDumpRequest {
  eventId?: string(name='EventId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model CreateDumpResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model CreateDumpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDumpResponseBody(name='body'),
}

async function createDump(request: CreateDumpRequest): CreateDumpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDump', 'POST', '/', 'json', false, 'json', request);
}

model CreateInspectionRecordRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  resourceId?: string(name='ResourceId', position='Body'),
}

model CreateInspectionRecordResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateInspectionRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInspectionRecordResponseBody(name='body'),
}

async function createInspectionRecord(request: CreateInspectionRecordRequest): CreateInspectionRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInspectionRecord', 'POST', '/', 'json', true, 'form', request);
}

model CreateMessageRequest {
  eventId?: string(name='EventId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model CreateMessageResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model CreateMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMessageResponseBody(name='body'),
}

async function createMessage(request: CreateMessageRequest): CreateMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMessage', 'POST', '/', 'json', false, 'json', request);
}

model CreateSceneRequest {
  flowName?: string(name='FlowName', position='Body'),
  metricListJson?: string(name='MetricListJson', position='Body'),
  nodeListJson?: string(name='NodeListJson', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  sceneDesc?: string(name='SceneDesc', position='Body'),
  sceneName?: string(name='SceneName', position='Body'),
  sceneOwner?: string(name='SceneOwner', position='Body'),
  sceneWebhook?: string(name='SceneWebhook', position='Body'),
}

model CreateSceneResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSceneResponseBody(name='body'),
}

async function createScene(request: CreateSceneRequest): CreateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScene', 'POST', '/', 'json', true, 'form', request);
}

model CreateSceneModelRequest {
  fcFunctionName?: string(name='FcFunctionName', position='Body'),
  fcHandler?: string(name='FcHandler', position='Body'),
  fcInitializer?: string(name='FcInitializer', position='Body'),
  fcRegionNo?: string(name='FcRegionNo', position='Body'),
  fcServiceName?: string(name='FcServiceName', position='Body'),
  modelDesc?: string(name='ModelDesc', position='Body'),
  modelLanguage?: int32(name='ModelLanguage', position='Body'),
  modelMemo?: string(name='ModelMemo', position='Body'),
  modelName?: string(name='ModelName', position='Body'),
  modelType?: int32(name='ModelType', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  rootCauseDesc?: string(name='RootCauseDesc', position='Body'),
  rootCauseSolution?: string(name='RootCauseSolution', position='Body'),
}

model CreateSceneModelResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateSceneModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSceneModelResponseBody(name='body'),
}

async function createSceneModel(request: CreateSceneModelRequest): CreateSceneModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSceneModel', 'POST', '/', 'json', true, 'form', request);
}

model CreateSceneModelApplyRequest {
  modelId?: long(name='ModelId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model CreateSceneModelApplyResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateSceneModelApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSceneModelApplyResponseBody(name='body'),
}

async function createSceneModelApply(request: CreateSceneModelApplyRequest): CreateSceneModelApplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSceneModelApply', 'POST', '/', 'json', true, 'form', request);
}

model DelBusinessGroupRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
}

model DelBusinessGroupResponseBody = {
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DelBusinessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelBusinessGroupResponseBody(name='body'),
}

async function delBusinessGroup(request: DelBusinessGroupRequest): DelBusinessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelBusinessGroup', 'GET', '/', 'json', false, 'json', request);
}

model DeleteAlertContactRequest {
  contactIdListJson?: string(name='ContactIdListJson', position='Body'),
  groupId?: long(name='GroupId', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteAlertContactResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertContactResponseBody(name='body'),
}

async function deleteAlertContact(request: DeleteAlertContactRequest): DeleteAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertContact', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAlertContactFromGroupRequest {
  contactIdListJson?: string(name='ContactIdListJson', position='Body'),
  groupId?: long(name='GroupId', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteAlertContactFromGroupResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteAlertContactFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertContactFromGroupResponseBody(name='body'),
}

async function deleteAlertContactFromGroup(request: DeleteAlertContactFromGroupRequest): DeleteAlertContactFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertContactFromGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAlertContactGroupRequest {
  groupId?: long(name='GroupId', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteAlertContactGroupResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertContactGroupResponseBody(name='body'),
}

async function deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): DeleteAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertContactGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAlertSettingRequest {
  alertSettingId: long(name='AlertSettingId', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteAlertSettingResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteAlertSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertSettingResponseBody(name='body'),
}

async function deleteAlertSetting(request: DeleteAlertSettingRequest): DeleteAlertSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertSetting', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAlertSettingListRequest {
  customerIdsJson?: string(name='CustomerIdsJson', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteAlertSettingListResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteAlertSettingListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertSettingListResponseBody(name='body'),
}

async function deleteAlertSettingList(request: DeleteAlertSettingListRequest): DeleteAlertSettingListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertSettingList', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAlgorithmInfoRequest {
  id?: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteAlgorithmInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteAlgorithmInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlgorithmInfoResponseBody(name='body'),
}

async function deleteAlgorithmInfo(request: DeleteAlgorithmInfoRequest): DeleteAlgorithmInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlgorithmInfo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBusinessGroupRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteBusinessGroupResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteBusinessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBusinessGroupResponseBody(name='body'),
}

async function deleteBusinessGroup(request: DeleteBusinessGroupRequest): DeleteBusinessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBusinessGroup', 'GET', '/', 'json', false, 'json', request);
}

model DeleteBusinessResourceTagRequest {
  businessGroupId: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productId?: string(name='ProductId', position='Query'),
  resources: string(name='Resources', position='Query'),
}

model DeleteBusinessResourceTagResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteBusinessResourceTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBusinessResourceTagResponseBody(name='body'),
}

async function deleteBusinessResourceTag(request: DeleteBusinessResourceTagRequest): DeleteBusinessResourceTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBusinessResourceTag', 'GET', '/', 'json', false, 'json', request);
}

model DeleteDataSourceConfigRequest {
  id: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteDataSourceConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteDataSourceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceConfigResponseBody(name='body'),
}

async function deleteDataSourceConfig(request: DeleteDataSourceConfigRequest): DeleteDataSourceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSourceConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupTopologyTagLogRequest {
  businessGroupId: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteGroupTopologyTagLogResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteGroupTopologyTagLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupTopologyTagLogResponseBody(name='body'),
}

async function deleteGroupTopologyTagLog(request: DeleteGroupTopologyTagLogRequest): DeleteGroupTopologyTagLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupTopologyTagLog', 'GET', '/', 'json', false, 'json', request);
}

model DeleteRealSceneInfoRequest {
  id?: string(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteRealSceneInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteRealSceneInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRealSceneInfoResponseBody(name='body'),
}

async function deleteRealSceneInfo(request: DeleteRealSceneInfoRequest): DeleteRealSceneInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRealSceneInfo', 'GET', '/', 'json', false, 'json', request);
}

model DeleteReportEmailConfigRequest {
  mailConfigId?: long(name='MailConfigId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model DeleteReportEmailConfigResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteReportEmailConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteReportEmailConfigResponseBody(name='body'),
}

async function deleteReportEmailConfig(request: DeleteReportEmailConfigRequest): DeleteReportEmailConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteReportEmailConfig', 'POST', '/', 'json', true, 'form', request);
}

model DeleteResourceWhitelistRequest {
  inspectionWhitelistId?: long(name='InspectionWhitelistId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model DeleteResourceWhitelistResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteResourceWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceWhitelistResponseBody(name='body'),
}

async function deleteResourceWhitelist(request: DeleteResourceWhitelistRequest): DeleteResourceWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResourceWhitelist', 'POST', '/', 'json', true, 'form', request);
}

model DeleteScenarioRequest {
  id?: string(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteScenarioResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScenarioResponseBody(name='body'),
}

async function deleteScenario(request: DeleteScenarioRequest): DeleteScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScenario', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSceneRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  sceneId?: long(name='SceneId', position='Body'),
}

model DeleteSceneResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSceneResponseBody(name='body'),
}

async function deleteScene(request: DeleteSceneRequest): DeleteSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScene', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSceneListRequest {
  id?: int32(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DeleteSceneListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSceneListResponseBody(name='body'),
}

async function deleteSceneList(request: DeleteSceneListRequest): DeleteSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSceneList', 'GET', '/', 'json', false, 'json', request);
}

model DeleteSceneModelRequest {
  modelId?: long(name='ModelId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  sureDelete?: boolean(name='SureDelete', position='Body'),
}

model DeleteSceneModelResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteSceneModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSceneModelResponseBody(name='body'),
}

async function deleteSceneModel(request: DeleteSceneModelRequest): DeleteSceneModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSceneModel', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTagInfoRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  tagId?: long(name='TagId', position='Query'),
}

model DeleteTagInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteTagInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTagInfoResponseBody(name='body'),
}

async function deleteTagInfo(request: DeleteTagInfoRequest): DeleteTagInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTagInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAccountAlertEventRequest {
  eventId: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeAccountAlertEventResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAccountAlertEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountAlertEventResponseBody(name='body'),
}

async function describeAccountAlertEvent(request: DescribeAccountAlertEventRequest): DescribeAccountAlertEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountAlertEvent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvisorInspectionProductsRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeAdvisorInspectionProductsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAdvisorInspectionProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvisorInspectionProductsResponseBody(name='body'),
}

async function describeAdvisorInspectionProducts(request: DescribeAdvisorInspectionProductsRequest): DescribeAdvisorInspectionProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvisorInspectionProducts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertBusinessGroupWithAlertSettingIdRequest {
  alertSettingId: long(name='AlertSettingId', position='Body'),
}

model DescribeAlertBusinessGroupWithAlertSettingIdResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      businessGroupId?: string(name='BusinessGroupId'),
      businessGroupName?: string(name='BusinessGroupName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertBusinessGroupWithAlertSettingIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertBusinessGroupWithAlertSettingIdResponseBody(name='body'),
}

async function describeAlertBusinessGroupWithAlertSettingId(request: DescribeAlertBusinessGroupWithAlertSettingIdRequest): DescribeAlertBusinessGroupWithAlertSettingIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertBusinessGroupWithAlertSettingId', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertContactRequest {
  currentPage?: int32(name='CurrentPage', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  searchBy?: string(name='SearchBy', position='Body'),
  searchLike?: string(name='SearchLike', position='Body'),
}

model DescribeAlertContactResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      email?: string(name='email'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      groupNames?: string(name='groupNames'),
      id?: long(name='id'),
      name?: string(name='name'),
      phone?: string(name='phone'),
      uid?: long(name='uid'),
      webhook?: string(name='webhook'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: long(name='Total'),
}

model DescribeAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertContactResponseBody(name='body'),
}

async function describeAlertContact(request: DescribeAlertContactRequest): DescribeAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertContact', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertContactGroupRequest {
  currentPage?: long(name='CurrentPage', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
  searchLike?: string(name='SearchLike', position='Body'),
}

model DescribeAlertContactGroupResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      createTime?: string(name='createTime'),
      description?: string(name='description'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      groupName?: string(name='groupName'),
      id?: long(name='id'),
      uid?: long(name='uid'),
      updateTime?: string(name='updateTime'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: int32(name='Total'),
}

model DescribeAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertContactGroupResponseBody(name='body'),
}

async function describeAlertContactGroup(request: DescribeAlertContactGroupRequest): DescribeAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertContactGroup', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertContactWithAlertSettingIdRequest {
  alertSettingId: long(name='AlertSettingId', position='Body'),
  contactType?: long(name='ContactType', position='Body'),
}

model DescribeAlertContactWithAlertSettingIdResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      contactId?: long(name='contactId'),
      contactName?: string(name='contactName'),
      contactType?: long(name='contactType'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertContactWithAlertSettingIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertContactWithAlertSettingIdResponseBody(name='body'),
}

async function describeAlertContactWithAlertSettingId(request: DescribeAlertContactWithAlertSettingIdRequest): DescribeAlertContactWithAlertSettingIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertContactWithAlertSettingId', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertContactWithGroupIdRequest {
  groupId?: long(name='GroupId', position='Body'),
}

model DescribeAlertContactWithGroupIdResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      email?: string(name='email'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      name?: string(name='name'),
      phone?: string(name='phone'),
      uid?: long(name='uid'),
      webhook?: string(name='webhook'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertContactWithGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertContactWithGroupIdResponseBody(name='body'),
}

async function describeAlertContactWithGroupId(request: DescribeAlertContactWithGroupIdRequest): DescribeAlertContactWithGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertContactWithGroupId', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertDetailDataRequest {
  alertId: long(name='AlertId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeAlertDetailDataResponseBody = {
  code?: int32(name='Code'),
  data?: {
    alertName?: string(name='AlertName'),
    algorithm?: string(name='Algorithm'),
    beginTime?: string(name='BeginTime'),
    category?: string(name='Category'),
    countConvergence?: int32(name='CountConvergence'),
    endTime?: string(name='EndTime'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    instanceRegionName?: string(name='InstanceRegionName'),
    metricExtend?: string(name='MetricExtend'),
    mttr?: string(name='Mttr'),
    serviceType?: string(name='ServiceType'),
    metricName?: string(name='metricName'),
    metricUnit?: string(name='metricUnit'),
    productCodeKey?: string(name='productCodeKey'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertDetailDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertDetailDataResponseBody(name='body'),
}

async function describeAlertDetailData(request: DescribeAlertDetailDataRequest): DescribeAlertDetailDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertDetailData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertDetailTrendDataRequest {
  alertId: long(name='AlertId', position='Query'),
  beginTime?: long(name='BeginTime', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeAlertDetailTrendDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertDetailTrendDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertDetailTrendDataResponseBody(name='body'),
}

async function describeAlertDetailTrendData(request: DescribeAlertDetailTrendDataRequest): DescribeAlertDetailTrendDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertDetailTrendData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertEventRequest {
  eventId: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeAlertEventResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertEventResponseBody(name='body'),
}

async function describeAlertEvent(request: DescribeAlertEventRequest): DescribeAlertEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertEvent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertFinalDataListRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  uid: string(name='Uid', position='Query'),
}

model DescribeAlertFinalDataListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertFinalDataListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertFinalDataListResponseBody(name='body'),
}

async function describeAlertFinalDataList(request: DescribeAlertFinalDataListRequest): DescribeAlertFinalDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertFinalDataList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertResourceRequest {
  eventId: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeAlertResourceResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertResourceResponseBody(name='body'),
}

async function describeAlertResource(request: DescribeAlertResourceRequest): DescribeAlertResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertSettingRequest {
  currentPage?: long(name='CurrentPage', position='Body'),
  customerName?: string(name='CustomerName', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
  searchKeyword?: string(name='SearchKeyword', position='Body'),
  settingStatus?: string(name='SettingStatus', example='1', position='Body'),
  uid?: long(name='Uid', position='Body'),
}

model DescribeAlertSettingResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      alarmLevel?: string(name='AlarmLevel'),
      alertName?: string(name='AlertName'),
      alertSettingId?: long(name='AlertSettingId'),
      businessGroupIds?: string(name='BusinessGroupIds'),
      businessGroupNames?: string(name='BusinessGroupNames'),
      contactIds?: string(name='ContactIds'),
      contactNames?: string(name='ContactNames'),
      sendDingtalkNotice?: boolean(name='SendDingtalkNotice'),
      sendEmailNotice?: boolean(name='SendEmailNotice'),
      sendSmsNotice?: boolean(name='SendSmsNotice'),
      settingStatus?: long(name='SettingStatus'),
      stopDuration?: long(name='StopDuration'),
      totalBusinessResourceNumber?: long(name='TotalBusinessResourceNumber'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: int32(name='Total'),
}

model DescribeAlertSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertSettingResponseBody(name='body'),
}

async function describeAlertSetting(request: DescribeAlertSettingRequest): DescribeAlertSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertSetting', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAlertSettingByIdRequest {
  alertSettingId: long(name='AlertSettingId', position='Body'),
}

model DescribeAlertSettingByIdResponseBody = {
  code?: int32(name='Code'),
  data?: {
    alarmLevel?: string(name='AlarmLevel'),
    alertBusinessSettingId?: long(name='AlertBusinessSettingId'),
    alertName?: string(name='AlertName'),
    dataCreateTime?: string(name='DataCreateTime'),
    dataCreateUser?: string(name='DataCreateUser'),
    dataModifyTime?: string(name='DataModifyTime'),
    dataModifyUser?: string(name='DataModifyUser'),
    sendDingtalkNotice?: boolean(name='SendDingtalkNotice'),
    sendEmailNotice?: boolean(name='SendEmailNotice'),
    sendSmsNotice?: boolean(name='SendSmsNotice'),
    settingStatus?: long(name='SettingStatus'),
    stopDuration?: long(name='StopDuration'),
    uid?: long(name='Uid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAlertSettingByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAlertSettingByIdResponseBody(name='body'),
}

async function describeAlertSettingById(request: DescribeAlertSettingByIdRequest): DescribeAlertSettingByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertSettingById', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAllAlertContactRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeAllAlertContactResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      email?: string(name='email'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      groupNames?: string(name='groupNames'),
      id?: long(name='id'),
      name?: string(name='name'),
      phone?: string(name='phone'),
      uid?: long(name='uid'),
      webhook?: string(name='webhook'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAllAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllAlertContactResponseBody(name='body'),
}

async function describeAllAlertContact(request: DescribeAllAlertContactRequest): DescribeAllAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllAlertContactGroupRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeAllAlertContactGroupResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      description?: string(name='description'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      groupName?: string(name='groupName'),
      id?: long(name='id'),
      uid?: long(name='uid'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAllAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllAlertContactGroupResponseBody(name='body'),
}

async function describeAllAlertContactGroup(request: DescribeAllAlertContactGroupRequest): DescribeAllAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllAlertContactGroup', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAllBusinessGroupInfoRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeAllBusinessGroupInfoResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      businessGroupId?: string(name='BusinessGroupId'),
      businessGroupName?: string(name='BusinessGroupName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAllBusinessGroupInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllBusinessGroupInfoResponseBody(name='body'),
}

async function describeAllBusinessGroupInfo(request: DescribeAllBusinessGroupInfoRequest): DescribeAllBusinessGroupInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllBusinessGroupInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllSceneModelRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeAllSceneModelResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeAllSceneModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllSceneModelResponseBody(name='body'),
}

async function describeAllSceneModel(request: DescribeAllSceneModelRequest): DescribeAllSceneModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllSceneModel', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAnalysisDataListRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  metricExtend?: string(name='MetricExtend', position='Query'),
  metricName: string(name='MetricName', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeAnalysisDataListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model DescribeAnalysisDataListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAnalysisDataListResponseBody(name='body'),
}

async function describeAnalysisDataList(request: DescribeAnalysisDataListRequest): DescribeAnalysisDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalysisDataList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBusinessAnalysisDataListRequest {
  apiPath: string(name='ApiPath', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  resource: string(name='Resource', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeBusinessAnalysisDataListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model DescribeBusinessAnalysisDataListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBusinessAnalysisDataListResponseBody(name='body'),
}

async function describeBusinessAnalysisDataList(request: DescribeBusinessAnalysisDataListRequest): DescribeBusinessAnalysisDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBusinessAnalysisDataList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnoseRequest {
  product?: string(name='Product', position='Query'),
}

model DescribeDiagnoseResponseBody = {
  code?: int32(name='Code'),
  diagnoseResult?: map[string]any(name='DiagnoseResult'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeDiagnoseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDiagnoseResponseBody(name='body'),
}

async function describeDiagnose(request: DescribeDiagnoseRequest): DescribeDiagnoseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnose', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnoseResultRequest {
  checkId?: string(name='CheckId', position='Query'),
}

model DescribeDiagnoseResultResponseBody = {
  code?: int32(name='Code'),
  diagnoseResult?: map[string]any(name='DiagnoseResult'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeDiagnoseResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDiagnoseResultResponseBody(name='body'),
}

async function describeDiagnoseResult(request: DescribeDiagnoseResultRequest): DescribeDiagnoseResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnoseResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventTopologyRequest {
  eventId: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeEventTopologyResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeEventTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventTopologyResponseBody(name='body'),
}

async function describeEventTopology(request: DescribeEventTopologyRequest): DescribeEventTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventTopology', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventTopologyDetailRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  tagId?: long(name='TagId', position='Query'),
}

model DescribeEventTopologyDetailResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeEventTopologyDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEventTopologyDetailResponseBody(name='body'),
}

async function describeEventTopologyDetail(request: DescribeEventTopologyDetailRequest): DescribeEventTopologyDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventTopologyDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFcFunctionRequest {
  limit?: int32(name='Limit', position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  prefix?: string(name='Prefix', position='Body'),
  regionCode?: string(name='RegionCode', position='Body'),
  serviceName?: string(name='ServiceName', position='Body'),
}

model DescribeFcFunctionResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeFcFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFcFunctionResponseBody(name='body'),
}

async function describeFcFunction(request: DescribeFcFunctionRequest): DescribeFcFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFcFunction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFcRegionRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeFcRegionResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeFcRegionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFcRegionResponseBody(name='body'),
}

async function describeFcRegion(request: DescribeFcRegionRequest): DescribeFcRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFcRegion', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFcServiceRequest {
  limit?: int32(name='Limit', position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  prefix?: string(name='Prefix', position='Body'),
  regionCode?: string(name='RegionCode', position='Body'),
}

model DescribeFcServiceResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeFcServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFcServiceResponseBody(name='body'),
}

async function describeFcService(request: DescribeFcServiceRequest): DescribeFcServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFcService', 'POST', '/', 'json', true, 'form', request);
}

model DescribeHistoryRiskRequest {
  currentPage?: int32(name='CurrentPage', position='Body'),
  lastFindTimeEnd?: string(name='LastFindTimeEnd', position='Body'),
  lastFindTimeStart?: string(name='LastFindTimeStart', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  severity?: int32(name='Severity', position='Body'),
}

model DescribeHistoryRiskResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: long(name='Total'),
}

model DescribeHistoryRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHistoryRiskResponseBody(name='body'),
}

async function describeHistoryRisk(request: DescribeHistoryRiskRequest): DescribeHistoryRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHistoryRisk', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInspectionProgressRequest {
  inspectionRecordId?: long(name='InspectionRecordId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeInspectionProgressResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeInspectionProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInspectionProgressResponseBody(name='body'),
}

async function describeInspectionProgress(request: DescribeInspectionProgressRequest): DescribeInspectionProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInspectionProgress', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInspectionResourcesRequest {
  keyword?: string(name='Keyword', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
}

model DescribeInspectionResourcesResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeInspectionResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInspectionResourcesResponseBody(name='body'),
}

async function describeInspectionResources(request: DescribeInspectionResourcesRequest): DescribeInspectionResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInspectionResources', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInspectionResultRequest {
  continuousDays?: int32(name='ContinuousDays', position='Body'),
  currentPage?: int32(name='CurrentPage', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  riskCode?: string(name='RiskCode', position='Body'),
  severity?: int32(name='Severity', position='Body'),
}

model DescribeInspectionResultResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: long(name='Total'),
}

model DescribeInspectionResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInspectionResultResponseBody(name='body'),
}

async function describeInspectionResult(request: DescribeInspectionResultRequest): DescribeInspectionResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInspectionResult', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInspectionSettingsRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  productType?: int32(name='ProductType', position='Body'),
  riskDesc?: string(name='RiskDesc', position='Body'),
  riskEnableStatus?: int32(name='RiskEnableStatus', position='Body'),
  riskName?: string(name='RiskName', position='Body'),
  riskType?: int32(name='RiskType', position='Body'),
}

model DescribeInspectionSettingsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeInspectionSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInspectionSettingsResponseBody(name='body'),
}

async function describeInspectionSettings(request: DescribeInspectionSettingsRequest): DescribeInspectionSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInspectionSettings', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInspectionThresholdRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  riskCode?: string(name='RiskCode', position='Body'),
}

model DescribeInspectionThresholdResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeInspectionThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInspectionThresholdResponseBody(name='body'),
}

async function describeInspectionThreshold(request: DescribeInspectionThresholdRequest): DescribeInspectionThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInspectionThreshold', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInspectionWhitelistsRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
}

model DescribeInspectionWhitelistsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeInspectionWhitelistsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInspectionWhitelistsResponseBody(name='body'),
}

async function describeInspectionWhitelists(request: DescribeInspectionWhitelistsRequest): DescribeInspectionWhitelistsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInspectionWhitelists', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInvocationResultsRequest {
  commandId?: string(name='CommandId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  invokeId?: string(name='InvokeId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeInvocationResultsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model DescribeInvocationResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvocationResultsResponseBody(name='body'),
}

async function describeInvocationResults(request: DescribeInvocationResultsRequest): DescribeInvocationResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocationResults', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLastInspectionSummaryRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeLastInspectionSummaryResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeLastInspectionSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLastInspectionSummaryResponseBody(name='body'),
}

async function describeLastInspectionSummary(request: DescribeLastInspectionSummaryRequest): DescribeLastInspectionSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLastInspectionSummary', 'POST', '/', 'json', true, 'form', request);
}

model DescribeModelRelationScenesRequest {
  modelId?: long(name='ModelId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeModelRelationScenesResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeModelRelationScenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModelRelationScenesResponseBody(name='body'),
}

async function describeModelRelationScenes(request: DescribeModelRelationScenesRequest): DescribeModelRelationScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModelRelationScenes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProductRiskPieRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeProductRiskPieResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeProductRiskPieResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProductRiskPieResponseBody(name='body'),
}

async function describeProductRiskPie(request: DescribeProductRiskPieRequest): DescribeProductRiskPieResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProductRiskPie', 'POST', '/', 'json', true, 'form', request);
}

model DescribeReportDataRequest {
}

model DescribeReportDataResponseBody = {
  code?: int32(name='Code'),
  data?: {
    heathScore?: long(name='HeathScore'),
    heathScoreTrendList?: [ long ](name='HeathScoreTrendList'),
    preUpdateTime?: string(name='PreUpdateTime'),
    riskCount?: long(name='RiskCount'),
    riskCountTrendList?: [ long ](name='RiskCountTrendList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeReportDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeReportDataResponseBody(name='body'),
}

async function describeReportData(request: DescribeReportDataRequest): DescribeReportDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReportData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeReportEmailConfigsRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeReportEmailConfigsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeReportEmailConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeReportEmailConfigsResponseBody(name='body'),
}

async function describeReportEmailConfigs(request: DescribeReportEmailConfigsRequest): DescribeReportEmailConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReportEmailConfigs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeReportSubscriptionsRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeReportSubscriptionsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeReportSubscriptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeReportSubscriptionsResponseBody(name='body'),
}

async function describeReportSubscriptions(request: DescribeReportSubscriptionsRequest): DescribeReportSubscriptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReportSubscriptions', 'POST', '/', 'json', true, 'form', request);
}

model DescribeResourceMetricRequest {
  eventId: string(name='EventId', position='Query'),
  firstLoad?: int32(name='FirstLoad', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
}

model DescribeResourceMetricResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeResourceMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceMetricResponseBody(name='body'),
}

async function describeResourceMetric(request: DescribeResourceMetricRequest): DescribeResourceMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceMetric', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskRequest {
  endTime?: long(name='EndTime', minimum=0, maximum=9223372036854775807, position='Query'),
  startTime?: long(name='StartTime', minimum=0, maximum=9223372036854775807, position='Query'),
  types?: string(name='Types', position='Query'),
  uid?: long(name='Uid', minimum=0, maximum=9223372036854775807, position='Query'),
}

model DescribeRiskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  riskAssessment?: map[string]any(name='RiskAssessment'),
  status?: string(name='Status'),
}

model DescribeRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskResponseBody(name='body'),
}

async function describeRisk(request: DescribeRiskRequest): DescribeRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRisk', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskConfigRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeRiskConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeRiskConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskConfigResponseBody(name='body'),
}

async function describeRiskConfig(request: DescribeRiskConfigRequest): DescribeRiskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskConfig', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRiskEventDetailsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeRiskEventDetailsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model DescribeRiskEventDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskEventDetailsResponseBody(name='body'),
}

async function describeRiskEventDetails(request: DescribeRiskEventDetailsRequest): DescribeRiskEventDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskEventDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskEventListRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeRiskEventListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeRiskEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskEventListResponseBody(name='body'),
}

async function describeRiskEventList(request: DescribeRiskEventListRequest): DescribeRiskEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskEventTopologyRequest {
  eventId?: long(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model DescribeRiskEventTopologyResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeRiskEventTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskEventTopologyResponseBody(name='body'),
}

async function describeRiskEventTopology(request: DescribeRiskEventTopologyRequest): DescribeRiskEventTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskEventTopology', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskResultSeveritySummaryRequest {
  continuousDays?: int32(name='ContinuousDays', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
}

model DescribeRiskResultSeveritySummaryResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeRiskResultSeveritySummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskResultSeveritySummaryResponseBody(name='body'),
}

async function describeRiskResultSeveritySummary(request: DescribeRiskResultSeveritySummaryRequest): DescribeRiskResultSeveritySummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskResultSeveritySummary', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRiskResultStatisticalRequest {
  continuousDays?: int32(name='ContinuousDays', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
}

model DescribeRiskResultStatisticalResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeRiskResultStatisticalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskResultStatisticalResponseBody(name='body'),
}

async function describeRiskResultStatistical(request: DescribeRiskResultStatisticalRequest): DescribeRiskResultStatisticalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskResultStatistical', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSceneDetailRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  sceneId?: long(name='SceneId', position='Body'),
}

model DescribeSceneDetailResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeSceneDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneDetailResponseBody(name='body'),
}

async function describeSceneDetail(request: DescribeSceneDetailRequest): DescribeSceneDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSceneModelByTypeRequest {
  modelType?: int32(name='ModelType', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeSceneModelByTypeResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeSceneModelByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneModelByTypeResponseBody(name='body'),
}

async function describeSceneModelByType(request: DescribeSceneModelByTypeRequest): DescribeSceneModelByTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneModelByType', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSceneModelDetailRequest {
  modelId?: long(name='ModelId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeSceneModelDetailResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeSceneModelDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneModelDetailResponseBody(name='body'),
}

async function describeSceneModelDetail(request: DescribeSceneModelDetailRequest): DescribeSceneModelDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneModelDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSceneModelVersionHistoryRequest {
  modelId?: long(name='ModelId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeSceneModelVersionHistoryResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeSceneModelVersionHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneModelVersionHistoryResponseBody(name='body'),
}

async function describeSceneModelVersionHistory(request: DescribeSceneModelVersionHistoryRequest): DescribeSceneModelVersionHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneModelVersionHistory', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSceneModelsRequest {
  applyStatus?: int32(name='ApplyStatus', position='Body'),
  currentPage?: int32(name='CurrentPage', position='Body'),
  modelName?: string(name='ModelName', position='Body'),
  modelType?: int32(name='ModelType', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model DescribeSceneModelsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: long(name='Total'),
}

model DescribeSceneModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneModelsResponseBody(name='body'),
}

async function describeSceneModels(request: DescribeSceneModelsRequest): DescribeSceneModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneModels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSceneSystemModelRequest {
  currentPage?: int32(name='CurrentPage', position='Body'),
  modelName?: string(name='ModelName', position='Body'),
  modelStatus?: int32(name='ModelStatus', position='Body'),
  modelType?: int32(name='ModelType', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  typeId?: long(name='TypeId', position='Body'),
}

model DescribeSceneSystemModelResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: long(name='Total'),
}

model DescribeSceneSystemModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneSystemModelResponseBody(name='body'),
}

async function describeSceneSystemModel(request: DescribeSceneSystemModelRequest): DescribeSceneSystemModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneSystemModel', 'POST', '/', 'json', true, 'form', request);
}

model DescribeScenesRequest {
  currentPage?: int32(name='CurrentPage', position='Body'),
  flowName?: string(name='FlowName', position='Body'),
  modelId?: long(name='ModelId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  sceneName?: string(name='SceneName', position='Body'),
  sceneStatus?: int32(name='SceneStatus', position='Body'),
}

model DescribeScenesResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: long(name='Total'),
}

model DescribeScenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScenesResponseBody(name='body'),
}

async function describeScenes(request: DescribeScenesRequest): DescribeScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScenes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeStatisticalDataByProductRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeStatisticalDataByProductResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeStatisticalDataByProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStatisticalDataByProductResponseBody(name='body'),
}

async function describeStatisticalDataByProduct(request: DescribeStatisticalDataByProductRequest): DescribeStatisticalDataByProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStatisticalDataByProduct', 'POST', '/', 'json', true, 'form', request);
}

model DescribeStatisticalDataByRiskCodeRequest {
  operaUid?: string(name='OperaUid', position='Body'),
}

model DescribeStatisticalDataByRiskCodeResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeStatisticalDataByRiskCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStatisticalDataByRiskCodeResponseBody(name='body'),
}

async function describeStatisticalDataByRiskCode(request: DescribeStatisticalDataByRiskCodeRequest): DescribeStatisticalDataByRiskCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStatisticalDataByRiskCode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWhitelistResourcesRequest {
  keyword?: string(name='Keyword', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
}

model DescribeWhitelistResourcesResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeWhitelistResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWhitelistResourcesResponseBody(name='body'),
}

async function describeWhitelistResources(request: DescribeWhitelistResourcesRequest): DescribeWhitelistResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWhitelistResources', 'POST', '/', 'json', true, 'form', request);
}

model EndScriptListRequest {
  id?: string(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model EndScriptListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model EndScriptListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EndScriptListResponseBody(name='body'),
}

async function endScriptList(request: EndScriptListRequest): EndScriptListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EndScriptList', 'GET', '/', 'json', false, 'json', request);
}

model FeedbackAlertAlgorithmRequest {
  alertId?: long(name='AlertId', position='Query'),
  algorithmAccurateDescribe?: string(name='AlgorithmAccurateDescribe', position='Query'),
  algorithmAccurateState?: int32(name='AlgorithmAccurateState', position='Query'),
  feedbackType?: int32(name='FeedbackType', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model FeedbackAlertAlgorithmResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model FeedbackAlertAlgorithmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FeedbackAlertAlgorithmResponseBody(name='body'),
}

async function feedbackAlertAlgorithm(request: FeedbackAlertAlgorithmRequest): FeedbackAlertAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FeedbackAlertAlgorithm', 'POST', '/', 'json', false, 'json', request);
}

model GetAiopsEventListRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  businessGroupName?: string(name='BusinessGroupName', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  eventType?: int32(name='EventType', position='Query'),
  eventUniqueId?: string(name='EventUniqueId', position='Query'),
  feedbackStatus?: int32(name='FeedbackStatus', position='Query'),
  name?: string(name='Name', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  predictionState?: int32(name='PredictionState', position='Query'),
  severity?: int32(name='Severity', position='Query'),
  status?: int32(name='Status', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model GetAiopsEventListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAiopsEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAiopsEventListResponseBody(name='body'),
}

async function getAiopsEventList(request: GetAiopsEventListRequest): GetAiopsEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiopsEventList', 'POST', '/', 'json', false, 'json', request);
}

model GetAiopsEventNewListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model GetAiopsEventNewListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAiopsEventNewListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAiopsEventNewListResponseBody(name='body'),
}

async function getAiopsEventNewList(request: GetAiopsEventNewListRequest): GetAiopsEventNewListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiopsEventNewList', 'POST', '/', 'json', false, 'json', request);
}

model GetAlertDetailTrendDataRequest {
  abnormalId?: long(name='AbnormalId', position='Query'),
  alertId?: long(name='AlertId', position='Query'),
  beginTime?: long(name='BeginTime', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetAlertDetailTrendDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlertDetailTrendDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertDetailTrendDataResponseBody(name='body'),
}

async function getAlertDetailTrendData(request: GetAlertDetailTrendDataRequest): GetAlertDetailTrendDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlertDetailTrendData', 'POST', '/', 'json', false, 'json', request);
}

model GetAlertListRequest {
  aliUid?: string(name='AliUid', position='Query'),
  eventId: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetAlertListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlertListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertListResponseBody(name='body'),
}

async function getAlertList(request: GetAlertListRequest): GetAlertListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlertList', 'POST', '/', 'json', false, 'json', request);
}

model GetAlertTrentRequest {
  aliUid?: string(name='AliUid', position='Query'),
  eventId: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetAlertTrentResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlertTrentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertTrentResponseBody(name='body'),
}

async function getAlertTrent(request: GetAlertTrentRequest): GetAlertTrentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlertTrent', 'POST', '/', 'json', false, 'json', request);
}

model GetAlgorithmRequest {
  expandInformation?: string(name='ExpandInformation', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model GetAlgorithmResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlgorithmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlgorithmResponseBody(name='body'),
}

async function getAlgorithm(request: GetAlgorithmRequest): GetAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithm', 'POST', '/', 'json', false, 'json', request);
}

model GetAlgorithmConfigRequest {
  algorithmTypeCode?: string(name='AlgorithmTypeCode', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetAlgorithmConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlgorithmConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlgorithmConfigResponseBody(name='body'),
}

async function getAlgorithmConfig(request: GetAlgorithmConfigRequest): GetAlgorithmConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithmConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetAlgorithmDataRequest {
  endTime?: long(name='EndTime', position='Query'),
  id?: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model GetAlgorithmDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlgorithmDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlgorithmDataResponseBody(name='body'),
}

async function getAlgorithmData(request: GetAlgorithmDataRequest): GetAlgorithmDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithmData', 'GET', '/', 'json', false, 'json', request);
}

model GetAlgorithmDetailsRequest {
  id?: int32(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model GetAlgorithmDetailsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlgorithmDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlgorithmDetailsResponseBody(name='body'),
}

async function getAlgorithmDetails(request: GetAlgorithmDetailsRequest): GetAlgorithmDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithmDetails', 'POST', '/', 'json', false, 'json', request);
}

model GetAlgorithmForecastDataRequest {
  aliUid?: string(name='AliUid', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  id?: int32(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model GetAlgorithmForecastDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlgorithmForecastDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlgorithmForecastDataResponseBody(name='body'),
}

async function getAlgorithmForecastData(request: GetAlgorithmForecastDataRequest): GetAlgorithmForecastDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithmForecastData', 'POST', '/', 'json', false, 'json', request);
}

model GetAlgorithmForecastDetailsRequest {
  aliUid?: string(name='AliUid', position='Query'),
  id?: int32(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetAlgorithmForecastDetailsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlgorithmForecastDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlgorithmForecastDetailsResponseBody(name='body'),
}

async function getAlgorithmForecastDetails(request: GetAlgorithmForecastDetailsRequest): GetAlgorithmForecastDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithmForecastDetails', 'POST', '/', 'json', false, 'json', request);
}

model GetAlgorithmListRequest {
  algorithmType?: int32(name='AlgorithmType', position='Query'),
  expandInformation?: string(name='ExpandInformation', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model GetAlgorithmListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAlgorithmListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlgorithmListResponseBody(name='body'),
}

async function getAlgorithmList(request: GetAlgorithmListRequest): GetAlgorithmListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlgorithmList', 'GET', '/', 'json', false, 'json', request);
}

model GetAllAlgorithmConfigRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetAllAlgorithmConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAllAlgorithmConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAllAlgorithmConfigResponseBody(name='body'),
}

async function getAllAlgorithmConfig(request: GetAllAlgorithmConfigRequest): GetAllAlgorithmConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllAlgorithmConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetAllTagResourceNumListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  tagName?: string(name='TagName', position='Query'),
}

model GetAllTagResourceNumListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAllTagResourceNumListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAllTagResourceNumListResponseBody(name='body'),
}

async function getAllTagResourceNumList(request: GetAllTagResourceNumListRequest): GetAllTagResourceNumListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllTagResourceNumList', 'GET', '/', 'json', false, 'json', request);
}

model GetAnalysisProcessRequest {
  eventId?: string(name='EventId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetAnalysisProcessResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAnalysisProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAnalysisProcessResponseBody(name='body'),
}

async function getAnalysisProcess(request: GetAnalysisProcessRequest): GetAnalysisProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAnalysisProcess', 'GET', '/', 'json', false, 'json', request);
}

model GetAuthorizationRequest {
  userId?: string(name='UserId', position='Query'),
}

model GetAuthorizationResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuthorizationResponseBody(name='body'),
}

async function getAuthorization(request: GetAuthorizationRequest): GetAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model GetAvgRepairTimeRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model GetAvgRepairTimeResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model GetAvgRepairTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAvgRepairTimeResponseBody(name='body'),
}

async function getAvgRepairTime(request: GetAvgRepairTimeRequest): GetAvgRepairTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAvgRepairTime', 'POST', '/', 'json', false, 'json', request);
}

model GetBackScriptListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  sceneId?: int32(name='SceneId', position='Query'),
}

model GetBackScriptListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBackScriptListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBackScriptListResponseBody(name='body'),
}

async function getBackScriptList(request: GetBackScriptListRequest): GetBackScriptListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBackScriptList', 'GET', '/', 'json', false, 'json', request);
}

model GetBusinessGroupRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessGroupResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessGroupResponseBody(name='body'),
}

async function getBusinessGroup(request: GetBusinessGroupRequest): GetBusinessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessGroup', 'GET', '/', 'json', false, 'json', request);
}

model GetBusinessGroupAllRequest {
  businessGroupName?: string(name='BusinessGroupName', position='Query'),
  currentPage?: long(name='CurrentPage', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  status?: long(name='Status', position='Query'),
}

model GetBusinessGroupAllResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessGroupAllResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessGroupAllResponseBody(name='body'),
}

async function getBusinessGroupAll(request: GetBusinessGroupAllRequest): GetBusinessGroupAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessGroupAll', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessGroupIndexRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productId?: int32(name='ProductId', position='Query'),
}

model GetBusinessGroupIndexResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessGroupIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessGroupIndexResponseBody(name='body'),
}

async function getBusinessGroupIndex(request: GetBusinessGroupIndexRequest): GetBusinessGroupIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessGroupIndex', 'GET', '/', 'json', false, 'json', request);
}

model GetBusinessGroupInfoRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessGroupInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model GetBusinessGroupInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessGroupInfoResponseBody(name='body'),
}

async function getBusinessGroupInfo(request: GetBusinessGroupInfoRequest): GetBusinessGroupInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessGroupInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessGroupOverviewListRequest {
  aliUid?: string(name='AliUid', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model GetBusinessGroupOverviewListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model GetBusinessGroupOverviewListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessGroupOverviewListResponseBody(name='body'),
}

async function getBusinessGroupOverviewList(request: GetBusinessGroupOverviewListRequest): GetBusinessGroupOverviewListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessGroupOverviewList', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessLogAlertDetailRequest {
  id?: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessLogAlertDetailResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessLogAlertDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessLogAlertDetailResponseBody(name='body'),
}

async function getBusinessLogAlertDetail(request: GetBusinessLogAlertDetailRequest): GetBusinessLogAlertDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessLogAlertDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessLogAlertListRequest {
  eventId?: long(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessLogAlertListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessLogAlertListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessLogAlertListResponseBody(name='body'),
}

async function getBusinessLogAlertList(request: GetBusinessLogAlertListRequest): GetBusinessLogAlertListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessLogAlertList', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessLogAlertTopNRequest {
  alertType?: string(name='AlertType', position='Query'),
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  topNum?: long(name='TopNum', position='Query'),
}

model GetBusinessLogAlertTopNResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessLogAlertTopNResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessLogAlertTopNResponseBody(name='body'),
}

async function getBusinessLogAlertTopN(request: GetBusinessLogAlertTopNRequest): GetBusinessLogAlertTopNResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessLogAlertTopN', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessMetricAlertDetailListRequest {
  eventId?: string(name='EventId', position='Query'),
  id?: long(name='Id', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessMetricAlertDetailListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessMetricAlertDetailListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessMetricAlertDetailListResponseBody(name='body'),
}

async function getBusinessMetricAlertDetailList(request: GetBusinessMetricAlertDetailListRequest): GetBusinessMetricAlertDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessMetricAlertDetailList', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessMetricAlertListRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessMetricAlertListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessMetricAlertListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessMetricAlertListResponseBody(name='body'),
}

async function getBusinessMetricAlertList(request: GetBusinessMetricAlertListRequest): GetBusinessMetricAlertListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessMetricAlertList', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessMetricAlertTopNRequest {
  alertType?: string(name='AlertType', position='Query'),
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  topNum?: long(name='TopNum', position='Query'),
}

model GetBusinessMetricAlertTopNResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessMetricAlertTopNResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessMetricAlertTopNResponseBody(name='body'),
}

async function getBusinessMetricAlertTopN(request: GetBusinessMetricAlertTopNRequest): GetBusinessMetricAlertTopNResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessMetricAlertTopN', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessMetricAllListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessMetricAllListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessMetricAllListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessMetricAllListResponseBody(name='body'),
}

async function getBusinessMetricAllList(request: GetBusinessMetricAllListRequest): GetBusinessMetricAllListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessMetricAllList', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessMetricForecastListRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessMetricForecastListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessMetricForecastListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessMetricForecastListResponseBody(name='body'),
}

async function getBusinessMetricForecastList(request: GetBusinessMetricForecastListRequest): GetBusinessMetricForecastListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessMetricForecastList', 'GET', '/', 'json', false, 'json', request);
}

model GetBusinessMetricResourceByMetricIdRequest {
  id?: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessMetricResourceByMetricIdResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessMetricResourceByMetricIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessMetricResourceByMetricIdResponseBody(name='body'),
}

async function getBusinessMetricResourceByMetricId(request: GetBusinessMetricResourceByMetricIdRequest): GetBusinessMetricResourceByMetricIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessMetricResourceByMetricId', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessMetricSceneListRequest {
  id?: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetBusinessMetricSceneListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetBusinessMetricSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessMetricSceneListResponseBody(name='body'),
}

async function getBusinessMetricSceneList(request: GetBusinessMetricSceneListRequest): GetBusinessMetricSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessMetricSceneList', 'POST', '/', 'json', false, 'json', request);
}

model GetCidInfoRequest {
  uid?: long(name='Uid', position='Query'),
}

model GetCidInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetCidInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCidInfoResponseBody(name='body'),
}

async function getCidInfo(request: GetCidInfoRequest): GetCidInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCidInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudAllResourceListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  uid?: string(name='Uid', position='Query'),
}

model GetCloudAllResourceListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model GetCloudAllResourceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCloudAllResourceListResponseBody(name='body'),
}

async function getCloudAllResourceList(request: GetCloudAllResourceListRequest): GetCloudAllResourceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudAllResourceList', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudResourceRequest {
  cloudTypeName?: string(name='CloudTypeName', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model GetCloudResourceResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetCloudResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCloudResourceResponseBody(name='body'),
}

async function getCloudResource(request: GetCloudResourceRequest): GetCloudResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudResource', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudResourceListRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  cloudRegionId?: string(name='CloudRegionId', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  id?: string(name='Id', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  isOptional?: int32(name='IsOptional', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  privateIp?: string(name='PrivateIp', position='Query'),
  releaseStatus?: int32(name='ReleaseStatus', position='Query'),
  tagName?: string(name='TagName', position='Query'),
  uid?: string(name='Uid', position='Query'),
}

model GetCloudResourceListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetCloudResourceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCloudResourceListResponseBody(name='body'),
}

async function getCloudResourceList(request: GetCloudResourceListRequest): GetCloudResourceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudResourceList', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectInstancesRequest {
  uid?: long(name='Uid', position='Query'),
}

model GetConnectInstancesResponseBody = {
  code?: long(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetConnectInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectInstancesResponseBody(name='body'),
}

async function getConnectInstances(request: GetConnectInstancesRequest): GetConnectInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectInstances', 'POST', '/', 'json', false, 'json', request);
}

model GetDataSourceDetailRequest {
  id: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetDataSourceDetailResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetDataSourceDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceDetailResponseBody(name='body'),
}

async function getDataSourceDetail(request: GetDataSourceDetailRequest): GetDataSourceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataSourceDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataSourceListRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  dataSourceName?: string(name='DataSourceName', position='Query'),
  dataSourceType?: int32(name='DataSourceType', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model GetDataSourceListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetDataSourceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceListResponseBody(name='body'),
}

async function getDataSourceList(request: GetDataSourceListRequest): GetDataSourceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataSourceList', 'POST', '/', 'json', false, 'json', request);
}

model GetDataSourceTargetParamListRequest {
  dataSourceType: int32(name='DataSourceType', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetDataSourceTargetParamListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetDataSourceTargetParamListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceTargetParamListResponseBody(name='body'),
}

async function getDataSourceTargetParamList(request: GetDataSourceTargetParamListRequest): GetDataSourceTargetParamListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataSourceTargetParamList', 'POST', '/', 'json', false, 'json', request);
}

model GetDataVolumeRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetDataVolumeResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetDataVolumeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataVolumeResponseBody(name='body'),
}

async function getDataVolume(request: GetDataVolumeRequest): GetDataVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataVolume', 'POST', '/', 'json', false, 'json', request);
}

model GetDiagInfoRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  diagnosticId?: string(name='DiagnosticId', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  uid: long(name='Uid', position='Query'),
}

model GetDiagInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetDiagInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDiagInfoResponseBody(name='body'),
}

async function getDiagInfo(request: GetDiagInfoRequest): GetDiagInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDiagInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetDomainConfigRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productId?: int32(name='ProductId', position='Query'),
}

model GetDomainConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetDomainConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDomainConfigResponseBody(name='body'),
}

async function getDomainConfig(request: GetDomainConfigRequest): GetDomainConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomainConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetEventAbNormalDetailRequest {
  id?: string(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetEventAbNormalDetailResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventAbNormalDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventAbNormalDetailResponseBody(name='body'),
}

async function getEventAbNormalDetail(request: GetEventAbNormalDetailRequest): GetEventAbNormalDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventAbNormalDetail', 'GET', '/', 'json', false, 'json', request);
}

model GetEventAbNormalDetailTrendDataRequest {
  beginTime?: long(name='BeginTime', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  id?: string(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetEventAbNormalDetailTrendDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventAbNormalDetailTrendDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventAbNormalDetailTrendDataResponseBody(name='body'),
}

async function getEventAbNormalDetailTrendData(request: GetEventAbNormalDetailTrendDataRequest): GetEventAbNormalDetailTrendDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventAbNormalDetailTrendData', 'GET', '/', 'json', false, 'json', request);
}

model GetEventAbNormalListRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetEventAbNormalListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventAbNormalListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventAbNormalListResponseBody(name='body'),
}

async function getEventAbNormalList(request: GetEventAbNormalListRequest): GetEventAbNormalListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventAbNormalList', 'GET', '/', 'json', false, 'json', request);
}

model GetEventBusinessMetricListRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetEventBusinessMetricListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventBusinessMetricListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventBusinessMetricListResponseBody(name='body'),
}

async function getEventBusinessMetricList(request: GetEventBusinessMetricListRequest): GetEventBusinessMetricListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventBusinessMetricList', 'POST', '/', 'json', false, 'json', request);
}

model GetEventDetailRequest {
  eventId?: string(name='EventId', position='Query'),
  id?: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetEventDetailResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventDetailResponseBody(name='body'),
}

async function getEventDetail(request: GetEventDetailRequest): GetEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetEventRootCauseRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetEventRootCauseResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventRootCauseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventRootCauseResponseBody(name='body'),
}

async function getEventRootCause(request: GetEventRootCauseRequest): GetEventRootCauseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventRootCause', 'POST', '/', 'json', false, 'json', request);
}

model GetEventSequentialTrentRequest {
  aliUid?: string(name='AliUid', position='Query'),
  eventId: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetEventSequentialTrentResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventSequentialTrentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventSequentialTrentResponseBody(name='body'),
}

async function getEventSequentialTrent(request: GetEventSequentialTrentRequest): GetEventSequentialTrentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventSequentialTrent', 'POST', '/', 'json', false, 'json', request);
}

model GetEventStatisticsRequest {
  endTime?: string(name='EndTime', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model GetEventStatisticsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventStatisticsResponseBody(name='body'),
}

async function getEventStatistics(request: GetEventStatisticsRequest): GetEventStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetEventTrentRequest {
  endTime?: string(name='EndTime', position='Query'),
  granularityType?: string(name='GranularityType', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  timeType?: string(name='TimeType', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model GetEventTrentResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventTrentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventTrentResponseBody(name='body'),
}

async function getEventTrent(request: GetEventTrentRequest): GetEventTrentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventTrent', 'POST', '/', 'json', false, 'json', request);
}

model GetEventTypeRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  id?: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productId?: int32(name='ProductId', position='Query'),
}

model GetEventTypeResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetEventTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventTypeResponseBody(name='body'),
}

async function getEventType(request: GetEventTypeRequest): GetEventTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEventType', 'GET', '/', 'json', false, 'json', request);
}

model GetExceptionsRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetExceptionsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetExceptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExceptionsResponseBody(name='body'),
}

async function getExceptions(request: GetExceptionsRequest): GetExceptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExceptions', 'POST', '/', 'json', false, 'json', request);
}

model GetExtendRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  metricId?: string(name='MetricId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetExtendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

async function getExtend(request: GetExtendRequest): GetExtendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExtend', 'GET', '/', 'none', false, 'json', request);
}

model GetForecastBusinessMetricRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetForecastBusinessMetricResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetForecastBusinessMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetForecastBusinessMetricResponseBody(name='body'),
}

async function getForecastBusinessMetric(request: GetForecastBusinessMetricRequest): GetForecastBusinessMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetForecastBusinessMetric', 'GET', '/', 'json', false, 'json', request);
}

model GetFunctionValidInfoRequest {
  functionName?: string(name='FunctionName', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  regionCode?: string(name='RegionCode', position='Body'),
  serviceName?: string(name='ServiceName', position='Body'),
}

model GetFunctionValidInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetFunctionValidInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFunctionValidInfoResponseBody(name='body'),
}

async function getFunctionValidInfo(request: GetFunctionValidInfoRequest): GetFunctionValidInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFunctionValidInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetGroupByDimensionDataRequest {
  end?: long(name='End', position='Query'),
  flag?: string(name='Flag', position='Query'),
  groupBy?: string(name='GroupBy', position='Query'),
  metricId?: string(name='MetricId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  start?: long(name='Start', position='Query'),
}

model GetGroupByDimensionDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetGroupByDimensionDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupByDimensionDataResponseBody(name='body'),
}

async function getGroupByDimensionData(request: GetGroupByDimensionDataRequest): GetGroupByDimensionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroupByDimensionData', 'POST', '/', 'json', false, 'json', request);
}

model GetGroupResourceNumRequest {
  businessGroupId: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetGroupResourceNumResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetGroupResourceNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupResourceNumResponseBody(name='body'),
}

async function getGroupResourceNum(request: GetGroupResourceNumRequest): GetGroupResourceNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroupResourceNum', 'POST', '/', 'json', false, 'json', request);
}

model GetGroupTopologyTagRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetGroupTopologyTagResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetGroupTopologyTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupTopologyTagResponseBody(name='body'),
}

async function getGroupTopologyTag(request: GetGroupTopologyTagRequest): GetGroupTopologyTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroupTopologyTag', 'GET', '/', 'json', false, 'json', request);
}

model GetIncidentAllRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetIncidentAllResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetIncidentAllResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncidentAllResponseBody(name='body'),
}

async function getIncidentAll(request: GetIncidentAllRequest): GetIncidentAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIncidentAll', 'POST', '/', 'json', false, 'json', request);
}

model GetIndexDialysisArrayRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  cloudResourceId?: string(name='CloudResourceId', position='Query'),
  cloudTypeName?: string(name='CloudTypeName', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  indexCode?: string(name='IndexCode', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model GetIndexDialysisArrayResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetIndexDialysisArrayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexDialysisArrayResponseBody(name='body'),
}

async function getIndexDialysisArray(request: GetIndexDialysisArrayRequest): GetIndexDialysisArrayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIndexDialysisArray', 'POST', '/', 'json', false, 'json', request);
}

model GetIndexDialysisListRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  cloudResourceId?: string(name='CloudResourceId', position='Query'),
  cloudTypeName?: string(name='CloudTypeName', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  indexCode?: string(name='IndexCode', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model GetIndexDialysisListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetIndexDialysisListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexDialysisListResponseBody(name='body'),
}

async function getIndexDialysisList(request: GetIndexDialysisListRequest): GetIndexDialysisListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIndexDialysisList', 'POST', '/', 'json', false, 'json', request);
}

model GetIndexDialysisListLineRequest {
  beginTime?: long(name='BeginTime', position='Query'),
  cloudResourceId?: string(name='CloudResourceId', position='Query'),
  cloudTypeName?: string(name='CloudTypeName', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  indexCode?: string(name='IndexCode', position='Query'),
  metricExtend?: string(name='MetricExtend', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetIndexDialysisListLineResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetIndexDialysisListLineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexDialysisListLineResponseBody(name='body'),
}

async function getIndexDialysisListLine(request: GetIndexDialysisListLineRequest): GetIndexDialysisListLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIndexDialysisListLine', 'POST', '/', 'json', false, 'json', request);
}

model GetInspectionReportDownloadUrlRequest {
  downloadReportListJson?: string(name='DownloadReportListJson', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model GetInspectionReportDownloadUrlResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetInspectionReportDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInspectionReportDownloadUrlResponseBody(name='body'),
}

async function getInspectionReportDownloadUrl(request: GetInspectionReportDownloadUrlRequest): GetInspectionReportDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInspectionReportDownloadUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetInstancesNumRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetInstancesNumResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetInstancesNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstancesNumResponseBody(name='body'),
}

async function getInstancesNum(request: GetInstancesNumRequest): GetInstancesNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstancesNum', 'POST', '/', 'json', false, 'json', request);
}

model GetLogSampleRequest {
  appField?: string(name='AppField', position='Query'),
  appValue?: string(name='AppValue', position='Query'),
  dataSourceId?: long(name='DataSourceId', position='Query'),
  logField?: string(name='LogField', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetLogSampleResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetLogSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLogSampleResponseBody(name='body'),
}

async function getLogSample(request: GetLogSampleRequest): GetLogSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogSample', 'POST', '/', 'json', false, 'json', request);
}

model GetLogSampleColumnRequest {
  dataSourceId?: long(name='DataSourceId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetLogSampleColumnResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetLogSampleColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLogSampleColumnResponseBody(name='body'),
}

async function getLogSampleColumn(request: GetLogSampleColumnRequest): GetLogSampleColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogSampleColumn', 'POST', '/', 'json', false, 'json', request);
}

model GetMetricEventSequentialTrentRequest {
  aliUid?: string(name='AliUid', position='Query'),
  eventId: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetMetricEventSequentialTrentResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetMetricEventSequentialTrentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetricEventSequentialTrentResponseBody(name='body'),
}

async function getMetricEventSequentialTrent(request: GetMetricEventSequentialTrentRequest): GetMetricEventSequentialTrentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMetricEventSequentialTrent', 'POST', '/', 'json', false, 'json', request);
}

model GetNewOptimizationItemDataRequest {
  lang?: string(name='Lang', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetNewOptimizationItemDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetNewOptimizationItemDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNewOptimizationItemDataResponseBody(name='body'),
}

async function getNewOptimizationItemData(request: GetNewOptimizationItemDataRequest): GetNewOptimizationItemDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNewOptimizationItemData', 'GET', '/', 'json', false, 'json', request);
}

model GetPatrolInspectionDetailListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  patrolId: long(name='PatrolId', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model GetPatrolInspectionDetailListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetPatrolInspectionDetailListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPatrolInspectionDetailListResponseBody(name='body'),
}

async function getPatrolInspectionDetailList(request: GetPatrolInspectionDetailListRequest): GetPatrolInspectionDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPatrolInspectionDetailList', 'GET', '/', 'json', false, 'json', request);
}

model GetPatrolInspectionDetailThrendDataRequest {
  endTime?: long(name='EndTime', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  requestContent?: string(name='RequestContent', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model GetPatrolInspectionDetailThrendDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetPatrolInspectionDetailThrendDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPatrolInspectionDetailThrendDataResponseBody(name='body'),
}

async function getPatrolInspectionDetailThrendData(request: GetPatrolInspectionDetailThrendDataRequest): GetPatrolInspectionDetailThrendDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPatrolInspectionDetailThrendData', 'POST', '/', 'json', false, 'json', request);
}

model GetPatrolInspectionItemsListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetPatrolInspectionItemsListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetPatrolInspectionItemsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPatrolInspectionItemsListResponseBody(name='body'),
}

async function getPatrolInspectionItemsList(request: GetPatrolInspectionItemsListRequest): GetPatrolInspectionItemsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPatrolInspectionItemsList', 'GET', '/', 'json', false, 'json', request);
}

model GetPatrolInspectionListRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  patrolId?: long(name='PatrolId', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  riskLevel?: int32(name='RiskLevel', position='Query'),
  riskName?: string(name='RiskName', position='Query'),
  riskPatrolItem?: string(name='RiskPatrolItem', position='Query'),
  riskType?: int32(name='RiskType', position='Query'),
  severityLevel?: int32(name='SeverityLevel', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model GetPatrolInspectionListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetPatrolInspectionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPatrolInspectionListResponseBody(name='body'),
}

async function getPatrolInspectionList(request: GetPatrolInspectionListRequest): GetPatrolInspectionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPatrolInspectionList', 'GET', '/', 'json', false, 'json', request);
}

model GetPatrolInspectionStatusRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetPatrolInspectionStatusResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetPatrolInspectionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPatrolInspectionStatusResponseBody(name='body'),
}

async function getPatrolInspectionStatus(request: GetPatrolInspectionStatusRequest): GetPatrolInspectionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPatrolInspectionStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetProductInstanceRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
}

model GetProductInstanceResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetProductInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProductInstanceResponseBody(name='body'),
}

async function getProductInstance(request: GetProductInstanceRequest): GetProductInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProductInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetProductMetricListRequest {
}

model GetProductMetricListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetProductMetricListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProductMetricListResponseBody(name='body'),
}

async function getProductMetricList(request: GetProductMetricListRequest): GetProductMetricListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProductMetricList', 'POST', '/', 'json', false, 'json', request);
}

model GetRealDataRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  flowName?: string(name='FlowName', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  startTimestamp?: string(name='StartTimestamp', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model GetRealDataResponseBody = {
  code?: long(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRealDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealDataResponseBody(name='body'),
}

async function getRealData(request: GetRealDataRequest): GetRealDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealData', 'POST', '/', 'json', false, 'json', request);
}

model GetRegionListRequest {
}

model GetRegionListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model GetRegionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegionListResponseBody(name='body'),
}

async function getRegionList(request: GetRegionListRequest): GetRegionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegionList', 'GET', '/', 'json', false, 'json', request);
}

model GetRepairScriptRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetRepairScriptResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRepairScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRepairScriptResponseBody(name='body'),
}

async function getRepairScript(request: GetRepairScriptRequest): GetRepairScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRepairScript', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetResourceListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetResourceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceListResponseBody(name='body'),
}

async function getResourceList(request: GetResourceListRequest): GetResourceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceList', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceTagDropListRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetResourceTagDropListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetResourceTagDropListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceTagDropListResponseBody(name='body'),
}

async function getResourceTagDropList(request: GetResourceTagDropListRequest): GetResourceTagDropListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceTagDropList', 'GET', '/', 'json', false, 'json', request);
}

model GetResourceTypeListRequest {
}

model GetResourceTypeListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model GetResourceTypeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceTypeListResponseBody(name='body'),
}

async function getResourceTypeList(request: GetResourceTypeListRequest): GetResourceTypeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceTypeList', 'GET', '/', 'json', false, 'json', request);
}

model GetRiskInAllRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  screen?: int32(name='Screen', position='Query'),
}

model GetRiskInAllResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRiskInAllResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRiskInAllResponseBody(name='body'),
}

async function getRiskInAll(request: GetRiskInAllRequest): GetRiskInAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRiskInAll', 'POST', '/', 'json', false, 'json', request);
}

model GetRiskInspectStatisticsRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetRiskInspectStatisticsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRiskInspectStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRiskInspectStatisticsResponseBody(name='body'),
}

async function getRiskInspectStatistics(request: GetRiskInspectStatisticsRequest): GetRiskInspectStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRiskInspectStatistics', 'GET', '/', 'json', false, 'json', request);
}

model GetRiskInspectionTypeListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetRiskInspectionTypeListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRiskInspectionTypeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRiskInspectionTypeListResponseBody(name='body'),
}

async function getRiskInspectionTypeList(request: GetRiskInspectionTypeListRequest): GetRiskInspectionTypeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRiskInspectionTypeList', 'GET', '/', 'json', false, 'json', request);
}

model GetRiskPatrolDetailListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  patrolId?: long(name='PatrolId', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model GetRiskPatrolDetailListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRiskPatrolDetailListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRiskPatrolDetailListResponseBody(name='body'),
}

async function getRiskPatrolDetailList(request: GetRiskPatrolDetailListRequest): GetRiskPatrolDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRiskPatrolDetailList', 'GET', '/', 'json', false, 'json', request);
}

model GetRiskPatrolListRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  businessGroupName?: string(name='BusinessGroupName', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  patrolId?: long(name='PatrolId', position='Query'),
  riskPatrolItem?: string(name='RiskPatrolItem', position='Query'),
  severityLevel?: int32(name='SeverityLevel', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model GetRiskPatrolListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRiskPatrolListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRiskPatrolListResponseBody(name='body'),
}

async function getRiskPatrolList(request: GetRiskPatrolListRequest): GetRiskPatrolListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRiskPatrolList', 'POST', '/', 'json', false, 'json', request);
}

model GetRiskPatrolStatisticalTrendsRequest {
  eventId?: string(name='EventId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetRiskPatrolStatisticalTrendsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRiskPatrolStatisticalTrendsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRiskPatrolStatisticalTrendsResponseBody(name='body'),
}

async function getRiskPatrolStatisticalTrends(request: GetRiskPatrolStatisticalTrendsRequest): GetRiskPatrolStatisticalTrendsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRiskPatrolStatisticalTrends', 'GET', '/', 'json', false, 'json', request);
}

model GetRiskPatrolStatisticsRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetRiskPatrolStatisticsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRiskPatrolStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRiskPatrolStatisticsResponseBody(name='body'),
}

async function getRiskPatrolStatistics(request: GetRiskPatrolStatisticsRequest): GetRiskPatrolStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRiskPatrolStatistics', 'GET', '/', 'json', false, 'json', request);
}

model GetRiskPatrolStatusRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetRiskPatrolStatusResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRiskPatrolStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRiskPatrolStatusResponseBody(name='body'),
}

async function getRiskPatrolStatus(request: GetRiskPatrolStatusRequest): GetRiskPatrolStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRiskPatrolStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetRoleRequest {
}

model GetRoleResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  staus?: string(name='Staus'),
}

model GetRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoleResponseBody(name='body'),
}

async function getRole(request: GetRoleRequest): GetRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRole', 'POST', '/', 'json', false, 'json', request);
}

model GetRootCauseRequest {
  eventId?: string(name='EventId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  rootCauseId?: string(name='RootCauseId', position='Query'),
}

model GetRootCauseResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetRootCauseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRootCauseResponseBody(name='body'),
}

async function getRootCause(request: GetRootCauseRequest): GetRootCauseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRootCause', 'POST', '/', 'json', false, 'json', request);
}

model GetScenarioDetailRequest {
  id?: string(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetScenarioDetailResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetScenarioDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScenarioDetailResponseBody(name='body'),
}

async function getScenarioDetail(request: GetScenarioDetailRequest): GetScenarioDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenarioDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetScenarioListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  scenarioName?: string(name='ScenarioName', position='Query'),
  sceneSelectLabel?: string(name='SceneSelectLabel', position='Query'),
}

model GetScenarioListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetScenarioListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScenarioListResponseBody(name='body'),
}

async function getScenarioList(request: GetScenarioListRequest): GetScenarioListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenarioList', 'POST', '/', 'json', false, 'json', request);
}

model GetScenarioStatisticsListRequest {
  endTime?: long(name='EndTime', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  scenarioIds?: string(name='ScenarioIds', position='Query'),
}

model GetScenarioStatisticsListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetScenarioStatisticsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScenarioStatisticsListResponseBody(name='body'),
}

async function getScenarioStatisticsList(request: GetScenarioStatisticsListRequest): GetScenarioStatisticsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScenarioStatisticsList', 'POST', '/', 'json', false, 'json', request);
}

model GetSceneByIdRequest {
  id?: int32(name='Id', position='Query'),
  metricId?: int32(name='MetricId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetSceneByIdResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]int32(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetSceneByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSceneByIdResponseBody(name='body'),
}

async function getSceneById(request: GetSceneByIdRequest): GetSceneByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSceneById', 'GET', '/', 'json', false, 'json', request);
}

model GetSceneDetailsListRequest {
  id?: int32(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetSceneDetailsListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]int32(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetSceneDetailsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSceneDetailsListResponseBody(name='body'),
}

async function getSceneDetailsList(request: GetSceneDetailsListRequest): GetSceneDetailsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSceneDetailsList', 'GET', '/', 'json', false, 'json', request);
}

model GetSceneListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  pageTotal?: int32(name='PageTotal', position='Query'),
  sceneType?: string(name='SceneType', position='Query'),
  searchName?: string(name='SearchName', position='Query'),
  searchValue?: string(name='SearchValue', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model GetSceneListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]int32(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetSceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSceneListResponseBody(name='body'),
}

async function getSceneList(request: GetSceneListRequest): GetSceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSceneList', 'POST', '/', 'json', false, 'json', request);
}

model GetSceneMetricTableRequest {
  end?: long(name='End', position='Query'),
  metricId?: string(name='MetricId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  start?: long(name='Start', position='Query'),
}

model GetSceneMetricTableResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetSceneMetricTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSceneMetricTableResponseBody(name='body'),
}

async function getSceneMetricTable(request: GetSceneMetricTableRequest): GetSceneMetricTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSceneMetricTable', 'POST', '/', 'json', false, 'json', request);
}

model GetScriptEventRootCauseRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetScriptEventRootCauseResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetScriptEventRootCauseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScriptEventRootCauseResponseBody(name='body'),
}

async function getScriptEventRootCause(request: GetScriptEventRootCauseRequest): GetScriptEventRootCauseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScriptEventRootCause', 'GET', '/', 'json', false, 'json', request);
}

model GetSlsLogDataRequest {
  code?: string(name='Code', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  url?: string(name='Url', position='Query'),
}

model GetSlsLogDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetSlsLogDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSlsLogDataResponseBody(name='body'),
}

async function getSlsLogData(request: GetSlsLogDataRequest): GetSlsLogDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSlsLogData', 'POST', '/', 'json', false, 'json', request);
}

model GetSynCloudResourceListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetSynCloudResourceListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: int32(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetSynCloudResourceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSynCloudResourceListResponseBody(name='body'),
}

async function getSynCloudResourceList(request: GetSynCloudResourceListRequest): GetSynCloudResourceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSynCloudResourceList', 'POST', '/', 'json', false, 'json', request);
}

model GetTagBusinessGroupListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  tagId: long(name='TagId', position='Query'),
}

model GetTagBusinessGroupListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetTagBusinessGroupListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTagBusinessGroupListResponseBody(name='body'),
}

async function getTagBusinessGroupList(request: GetTagBusinessGroupListRequest): GetTagBusinessGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTagBusinessGroupList', 'GET', '/', 'json', false, 'json', request);
}

model GetTagDropListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  productId?: long(name='ProductId', position='Query'),
}

model GetTagDropListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetTagDropListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTagDropListResponseBody(name='body'),
}

async function getTagDropList(request: GetTagDropListRequest): GetTagDropListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTagDropList', 'GET', '/', 'json', false, 'json', request);
}

model GetTargetDimensionDataRequest {
  end?: long(name='End', position='Query'),
  flag?: string(name='Flag', position='Query'),
  label?: string(name='Label', position='Query'),
  labelValue?: string(name='LabelValue', position='Query'),
  metricId?: string(name='MetricId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  start?: long(name='Start', position='Query'),
}

model GetTargetDimensionDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetTargetDimensionDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTargetDimensionDataResponseBody(name='body'),
}

async function getTargetDimensionData(request: GetTargetDimensionDataRequest): GetTargetDimensionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTargetDimensionData', 'POST', '/', 'json', false, 'json', request);
}

model GetThresholdListRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetThresholdListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetThresholdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetThresholdListResponseBody(name='body'),
}

async function getThresholdList(request: GetThresholdListRequest): GetThresholdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThresholdList', 'POST', '/', 'json', false, 'json', request);
}

model GetThroughPutRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetThroughPutResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetThroughPutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetThroughPutResponseBody(name='body'),
}

async function getThroughPut(request: GetThroughPutRequest): GetThroughPutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThroughPut', 'POST', '/', 'json', false, 'json', request);
}

model GetTrendSlsReportsRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  severity?: string(name='Severity', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model GetTrendSlsReportsResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetTrendSlsReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTrendSlsReportsResponseBody(name='body'),
}

async function getTrendSlsReports(request: GetTrendSlsReportsRequest): GetTrendSlsReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendSlsReports', 'POST', '/', 'json', false, 'json', request);
}

model GetUserInfoRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetUserInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserInfoResponseBody(name='body'),
}

async function getUserInfo(request: GetUserInfoRequest): GetUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetUserLoginInfoRequest {
  accountName?: string(name='AccountName', position='Query'),
  accountPrincipalName?: string(name='AccountPrincipalName', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  currentPk?: string(name='CurrentPk', position='Query'),
  mainAccountPk?: string(name='MainAccountPk', position='Query'),
}

model GetUserLoginInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetUserLoginInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserLoginInfoResponseBody(name='body'),
}

async function getUserLoginInfo(request: GetUserLoginInfoRequest): GetUserLoginInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserLoginInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetUserOrderConfigRequest {
  operaUid?: string(name='OperaUid', position='Query'),
}

model GetUserOrderConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetUserOrderConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserOrderConfigResponseBody(name='body'),
}

async function getUserOrderConfig(request: GetUserOrderConfigRequest): GetUserOrderConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserOrderConfig', 'POST', '/', 'json', false, 'json', request);
}

model IgnoreAlarmsRequest {
  alarmId?: string(name='AlarmId', position='Query'),
}

model IgnoreAlarmsResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model IgnoreAlarmsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IgnoreAlarmsResponseBody(name='body'),
}

async function ignoreAlarms(request: IgnoreAlarmsRequest): IgnoreAlarmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IgnoreAlarms', 'POST', '/', 'json', false, 'json', request);
}

model ListApplyAuthorizationRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  permissionType?: int32(name='PermissionType', position='Query'),
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
  type?: string(name='Type', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model ListApplyAuthorizationResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListApplyAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplyAuthorizationResponseBody(name='body'),
}

async function listApplyAuthorization(request: ListApplyAuthorizationRequest): ListApplyAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplyAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthRequest {
  userId?: string(name='UserId', position='Query'),
}

model ListAuthResponseBody = {
  list?: [ string ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthResponseBody(name='body'),
}

async function listAuth(request: ListAuthRequest): ListAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuth', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthorizedUidRequest {
}

model ListAuthorizedUidResponseBody = {
  code?: int32(name='Code'),
  list?: [ long ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListAuthorizedUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizedUidResponseBody(name='body'),
}

async function listAuthorizedUid(request: ListAuthorizedUidRequest): ListAuthorizedUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizedUid', 'POST', '/', 'json', false, 'json', request);
}

model ListCausePlanRequest {
  eventId?: string(name='EventId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  rootCauseId?: string(name='RootCauseId', position='Query'),
}

model ListCausePlanResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListCausePlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCausePlanResponseBody(name='body'),
}

async function listCausePlan(request: ListCausePlanRequest): ListCausePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCausePlan', 'POST', '/', 'json', false, 'json', request);
}

model ListConfirmAuthorizationRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  permissionType?: int32(name='PermissionType', position='Query'),
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
  type?: string(name='Type', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model ListConfirmAuthorizationResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListConfirmAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConfirmAuthorizationResponseBody(name='body'),
}

async function listConfirmAuthorization(request: ListConfirmAuthorizationRequest): ListConfirmAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConfirmAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model ListEventRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model ListEventResponseBody = {
  code?: long(name='Code'),
  list?: [  map[string]any ](name='List'),
  message?: string(name='Message'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventResponseBody(name='body'),
}

async function listEvent(request: ListEventRequest): ListEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEvent', 'POST', '/', 'json', false, 'json', request);
}

model ListNotAuthorizedUidRequest {
}

model ListNotAuthorizedUidResponseBody = {
  code?: int32(name='Code'),
  list?: [ long ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListNotAuthorizedUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNotAuthorizedUidResponseBody(name='body'),
}

async function listNotAuthorizedUid(request: ListNotAuthorizedUidRequest): ListNotAuthorizedUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNotAuthorizedUid', 'POST', '/', 'json', false, 'json', request);
}

model ListReportsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model ListReportsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      bid?: string(name='bid'),
      cid?: long(name='cid'),
      costCount?: long(name='costCount'),
      costCountTrendJson?: string(name='costCountTrendJson'),
      criticalCount?: long(name='criticalCount'),
      criticalCountTrendJson?: string(name='criticalCountTrendJson'),
      customerName?: string(name='customerName'),
      gcLevel?: string(name='gcLevel'),
      gmtCreate?: long(name='gmtCreate'),
      gmtModified?: long(name='gmtModified'),
      id?: long(name='id'),
      normalCount?: long(name='normalCount'),
      normalCountTrendJson?: string(name='normalCountTrendJson'),
      score?: long(name='score'),
      scoreTrendJson?: string(name='scoreTrendJson'),
      trendJson?: string(name='trendJson'),
      uid?: long(name='uid'),
      warningCount?: long(name='warningCount'),
      warningCountTrendJson?: string(name='warningCountTrendJson'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReportsResponseBody(name='body'),
}

async function listReports(request: ListReportsRequest): ListReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListReports', 'POST', '/', 'json', false, 'json', request);
}

model ListRootCauseRequest {
  eventId?: string(name='EventId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  rootCauseId?: string(name='RootCauseId', position='Query'),
}

model ListRootCauseResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListRootCauseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRootCauseResponseBody(name='body'),
}

async function listRootCause(request: ListRootCauseRequest): ListRootCauseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRootCause', 'POST', '/', 'json', false, 'json', request);
}

model ListSlsReportsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  logStore?: string(name='LogStore', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  severity?: string(name='Severity', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model ListSlsReportsResponseBody = {
  code?: int32(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ListSlsReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSlsReportsResponseBody(name='body'),
}

async function listSlsReports(request: ListSlsReportsRequest): ListSlsReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSlsReports', 'POST', '/', 'json', false, 'json', request);
}

model PutAlertContactRequest {
  email?: string(name='Email', position='Body'),
  id?: long(name='Id', position='Body'),
  name?: string(name='Name', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
  phone?: string(name='Phone', position='Body'),
  webhook?: string(name='Webhook', position='Body'),
}

model PutAlertContactResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutAlertContactResponseBody(name='body'),
}

async function putAlertContact(request: PutAlertContactRequest): PutAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutAlertContact', 'POST', '/', 'json', true, 'form', request);
}

model PutAlertContactGroupRequest {
  alertContactGroupJson?: string(name='AlertContactGroupJson', position='Body'),
  contactIdsJson?: string(name='ContactIdsJson', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model PutAlertContactGroupResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutAlertContactGroupResponseBody(name='body'),
}

async function putAlertContactGroup(request: PutAlertContactGroupRequest): PutAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutAlertContactGroup', 'POST', '/', 'json', true, 'form', request);
}

model PutAlertContactToGroupRequest {
  contactIdListJson?: string(name='ContactIdListJson', position='Body'),
  groupId?: long(name='GroupId', position='Body'),
  groupIdListJson?: string(name='GroupIdListJson', position='Body'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model PutAlertContactToGroupResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutAlertContactToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutAlertContactToGroupResponseBody(name='body'),
}

async function putAlertContactToGroup(request: PutAlertContactToGroupRequest): PutAlertContactToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutAlertContactToGroup', 'POST', '/', 'json', true, 'form', request);
}

model PutAlertIgnoreRequest {
  alertId: long(name='AlertId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model PutAlertIgnoreResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutAlertIgnoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutAlertIgnoreResponseBody(name='body'),
}

async function putAlertIgnore(request: PutAlertIgnoreRequest): PutAlertIgnoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutAlertIgnore', 'POST', '/', 'json', false, 'json', request);
}

model PutAlertSettingRequest {
  alarmLevel?: string(name='AlarmLevel', position='Body'),
  alertName?: string(name='AlertName', position='Body'),
  alertSettingId?: long(name='AlertSettingId', position='Body'),
  alertSilenceConfig?: string(name='AlertSilenceConfig', position='Query'),
  businessGroupIdsJson?: string(name='BusinessGroupIdsJson', position='Body'),
  contactGroupIdsJson?: string(name='ContactGroupIdsJson', position='Body'),
  contactIdsJson?: string(name='ContactIdsJson', position='Body'),
  customerUid?: long(name='CustomerUid', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  sendDingtalkNotice?: boolean(name='SendDingtalkNotice', position='Body'),
  sendEmailNotice?: boolean(name='SendEmailNotice', position='Body'),
  sendSmsNotice?: boolean(name='SendSmsNotice', position='Body'),
  stopDuration?: long(name='StopDuration', position='Body'),
}

model PutAlertSettingResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutAlertSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutAlertSettingResponseBody(name='body'),
}

async function putAlertSetting(request: PutAlertSettingRequest): PutAlertSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutAlertSetting', 'POST', '/', 'json', true, 'form', request);
}

model PutAlertSettingListRequest {
  alertSettingEditRequestListJson?: string(name='AlertSettingEditRequestListJson', position='Body'),
  contactGroupIdsJson?: string(name='ContactGroupIdsJson', position='Body'),
  contactIdsJson?: string(name='ContactIdsJson', position='Body'),
}

model PutAlertSettingListResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutAlertSettingListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutAlertSettingListResponseBody(name='body'),
}

async function putAlertSettingList(request: PutAlertSettingListRequest): PutAlertSettingListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutAlertSettingList', 'POST', '/', 'json', true, 'form', request);
}

model PutAlertSettingStatusRequest {
  alertSettingId: long(name='AlertSettingId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  settingStatus: long(name='SettingStatus', position='Body'),
}

model PutAlertSettingStatusResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutAlertSettingStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutAlertSettingStatusResponseBody(name='body'),
}

async function putAlertSettingStatus(request: PutAlertSettingStatusRequest): PutAlertSettingStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutAlertSettingStatus', 'POST', '/', 'json', true, 'form', request);
}

model PutDataSourceConfigRequest {
  dataSourceDescribe: string(name='DataSourceDescribe', position='Query'),
  dataSourceName: string(name='DataSourceName', position='Query'),
  dataSourceParams: string(name='DataSourceParams', position='Query'),
  dataSourceParamsMapping: string(name='DataSourceParamsMapping', position='Query'),
  dataSourceType: int32(name='DataSourceType', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model PutDataSourceConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutDataSourceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutDataSourceConfigResponseBody(name='body'),
}

async function putDataSourceConfig(request: PutDataSourceConfigRequest): PutDataSourceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutDataSourceConfig', 'POST', '/', 'json', false, 'json', request);
}

model PutGroupResourceTagRequest {
  businessGroupId: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productId?: string(name='ProductId', position='Query'),
  resources: string(name='Resources', position='Query'),
  tagId: string(name='TagId', position='Query'),
}

model PutGroupResourceTagResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutGroupResourceTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutGroupResourceTagResponseBody(name='body'),
}

async function putGroupResourceTag(request: PutGroupResourceTagRequest): PutGroupResourceTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutGroupResourceTag', 'GET', '/', 'json', false, 'json', request);
}

model PutGroupTopologyTagLogRequest {
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  topologyTag?: string(name='TopologyTag', position='Query'),
  topologyTagShow?: string(name='TopologyTagShow', position='Query'),
}

model PutGroupTopologyTagLogResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutGroupTopologyTagLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutGroupTopologyTagLogResponseBody(name='body'),
}

async function putGroupTopologyTagLog(request: PutGroupTopologyTagLogRequest): PutGroupTopologyTagLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutGroupTopologyTagLog', 'GET', '/', 'json', false, 'json', request);
}

model PutReportEmailConfigRequest {
  email?: string(name='Email', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model PutReportEmailConfigResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutReportEmailConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutReportEmailConfigResponseBody(name='body'),
}

async function putReportEmailConfig(request: PutReportEmailConfigRequest): PutReportEmailConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutReportEmailConfig', 'POST', '/', 'json', true, 'form', request);
}

model PutResourceWhitelistRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  resourceId?: string(name='ResourceId', position='Body'),
}

model PutResourceWhitelistResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model PutResourceWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutResourceWhitelistResponseBody(name='body'),
}

async function putResourceWhitelist(request: PutResourceWhitelistRequest): PutResourceWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutResourceWhitelist', 'POST', '/', 'json', true, 'form', request);
}

model ReplaceScriptListRequest {
  id?: int32(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  sceneId?: string(name='SceneId', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model ReplaceScriptListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ReplaceScriptListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReplaceScriptListResponseBody(name='body'),
}

async function replaceScriptList(request: ReplaceScriptListRequest): ReplaceScriptListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceScriptList', 'GET', '/', 'json', false, 'json', request);
}

model RevokeSubmitApplyPermissionRequest {
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
  type?: string(name='Type', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model RevokeSubmitApplyPermissionResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model RevokeSubmitApplyPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeSubmitApplyPermissionResponseBody(name='body'),
}

async function revokeSubmitApplyPermission(request: RevokeSubmitApplyPermissionRequest): RevokeSubmitApplyPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeSubmitApplyPermission', 'POST', '/', 'json', false, 'json', request);
}

model RunAnalysisProcessRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model RunAnalysisProcessResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model RunAnalysisProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunAnalysisProcessResponseBody(name='body'),
}

async function runAnalysisProcess(request: RunAnalysisProcessRequest): RunAnalysisProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunAnalysisProcess', 'GET', '/', 'json', false, 'json', request);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent', position='Query'),
  instanceIds?: string(name='InstanceIds', position='Query'),
  name?: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  type?: string(name='Type', position='Query'),
}

model RunCommandResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model RunCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCommandResponseBody(name='body'),
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommand', 'POST', '/', 'json', false, 'json', request);
}

model RunForecastAnalyzeRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model RunForecastAnalyzeResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model RunForecastAnalyzeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunForecastAnalyzeResponseBody(name='body'),
}

async function runForecastAnalyze(request: RunForecastAnalyzeRequest): RunForecastAnalyzeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunForecastAnalyze', 'POST', '/', 'json', false, 'json', request);
}

model RunPatrolInspectionRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  productCodes?: string(name='ProductCodes', position='Query'),
  riskCodeList: string(name='RiskCodeList', position='Query'),
}

model RunPatrolInspectionResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model RunPatrolInspectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunPatrolInspectionResponseBody(name='body'),
}

async function runPatrolInspection(request: RunPatrolInspectionRequest): RunPatrolInspectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunPatrolInspection', 'GET', '/', 'json', false, 'json', request);
}

model RunRepairScriptRequest {
  eventId?: string(name='EventId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model RunRepairScriptResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model RunRepairScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunRepairScriptResponseBody(name='body'),
}

async function runRepairScript(request: RunRepairScriptRequest): RunRepairScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunRepairScript', 'POST', '/', 'json', false, 'json', request);
}

model RunRiskPatrolRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  riskPatrolTypes?: string(name='RiskPatrolTypes', position='Query'),
}

model RunRiskPatrolResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model RunRiskPatrolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunRiskPatrolResponseBody(name='body'),
}

async function runRiskPatrol(request: RunRiskPatrolRequest): RunRiskPatrolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunRiskPatrol', 'GET', '/', 'json', false, 'json', request);
}

model SwitchUserTopRequest {
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
  type?: string(name='Type', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model SwitchUserTopResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model SwitchUserTopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchUserTopResponseBody(name='body'),
}

async function switchUserTop(request: SwitchUserTopRequest): SwitchUserTopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchUserTop', 'POST', '/', 'json', false, 'json', request);
}

model UpdBusinessGroupRequest {
  aliUid?: string(name='AliUid', position='Query'),
  businessGroupDesc?: string(name='BusinessGroupDesc', position='Query'),
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  businessGroupName?: string(name='BusinessGroupName', position='Query'),
  instanceList?: [ string ](name='InstanceList', shrink='json', position='Query'),
  resourceType?: int32(name='ResourceType', position='Query'),
  updateUser?: string(name='UpdateUser', position='Query'),
}

model UpdBusinessGroupResponseBody = {
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdBusinessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdBusinessGroupResponseBody(name='body'),
}

async function updBusinessGroup(request: UpdBusinessGroupRequest): UpdBusinessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdBusinessGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthorizationRequest {
  type?: string(name='Type', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model UpdateAuthorizationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuthorizationResponseBody(name='body'),
}

async function updateAuthorization(request: UpdateAuthorizationRequest): UpdateAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBindMetricRequest {
  id?: string(name='Id', position='Query'),
  metricId?: long(name='MetricId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model UpdateBindMetricResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateBindMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBindMetricResponseBody(name='body'),
}

async function updateBindMetric(request: UpdateBindMetricRequest): UpdateBindMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBindMetric', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBusinessGroupRequest {
  aliUid?: string(name='AliUid', position='Query'),
  businessGroupDesc?: string(name='BusinessGroupDesc', position='Query'),
  businessGroupId?: string(name='BusinessGroupId', position='Query'),
  businessGroupName?: string(name='BusinessGroupName', position='Query'),
  cloudResourceTypeId?: string(name='CloudResourceTypeId', position='Query'),
  dealType?: int32(name='DealType', position='Query'),
  instanceList?: [ string ](name='InstanceList', shrink='json', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  resourceType?: int32(name='ResourceType', position='Query'),
  updateUser?: string(name='UpdateUser', position='Query'),
}

model UpdateBusinessGroupResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateBusinessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBusinessGroupResponseBody(name='body'),
}

async function updateBusinessGroup(request: UpdateBusinessGroupRequest): UpdateBusinessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBusinessGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBusinessMetricAlertConfigRequest {
  alertConfigId?: long(name='AlertConfigId', position='Query'),
  configs?: string(name='Configs', position='Query'),
  metricId?: long(name='MetricId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model UpdateBusinessMetricAlertConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateBusinessMetricAlertConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBusinessMetricAlertConfigResponseBody(name='body'),
}

async function updateBusinessMetricAlertConfig(request: UpdateBusinessMetricAlertConfigRequest): UpdateBusinessMetricAlertConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBusinessMetricAlertConfig', 'GET', '/', 'json', false, 'json', request);
}

model UpdateBusinessMetricResourceRequest {
  businessMetricId?: long(name='BusinessMetricId', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  resourceList?: string(name='ResourceList', position='Query'),
}

model UpdateBusinessMetricResourceResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateBusinessMetricResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBusinessMetricResourceResponseBody(name='body'),
}

async function updateBusinessMetricResource(request: UpdateBusinessMetricResourceRequest): UpdateBusinessMetricResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBusinessMetricResource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDataSourceConfigRequest {
  dataSourceDescribe?: string(name='DataSourceDescribe', position='Query'),
  dataSourceName?: string(name='DataSourceName', position='Query'),
  dataSourceParams?: string(name='DataSourceParams', position='Query'),
  dataSourceParamsMapping?: string(name='DataSourceParamsMapping', position='Query'),
  dataSourceType?: int32(name='DataSourceType', position='Query'),
  id: long(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model UpdateDataSourceConfigResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateDataSourceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceConfigResponseBody(name='body'),
}

async function updateDataSourceConfig(request: UpdateDataSourceConfigRequest): UpdateDataSourceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSourceConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHandleRiskRequest {
  patrolDetailIds?: string(name='PatrolDetailIds', position='Query'),
  patrolId?: long(name='PatrolId', position='Query'),
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
}

model UpdateHandleRiskResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateHandleRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHandleRiskResponseBody(name='body'),
}

async function updateHandleRisk(request: UpdateHandleRiskRequest): UpdateHandleRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHandleRisk', 'GET', '/', 'json', false, 'json', request);
}

model UpdateHandleRiskBaseRequest {
  handleDescribe?: string(name='HandleDescribe', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  patrolDetailIds?: string(name='PatrolDetailIds', position='Query'),
  patrolId?: long(name='PatrolId', position='Query'),
}

model UpdateHandleRiskBaseResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateHandleRiskBaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHandleRiskBaseResponseBody(name='body'),
}

async function updateHandleRiskBase(request: UpdateHandleRiskBaseRequest): UpdateHandleRiskBaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHandleRiskBase', 'GET', '/', 'json', false, 'json', request);
}

model UpdateIgnoreRiskRequest {
  patrolDetailIds?: string(name='PatrolDetailIds', position='Query'),
  patrolId?: long(name='PatrolId', position='Query'),
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
}

model UpdateIgnoreRiskResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateIgnoreRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIgnoreRiskResponseBody(name='body'),
}

async function updateIgnoreRisk(request: UpdateIgnoreRiskRequest): UpdateIgnoreRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIgnoreRisk', 'GET', '/', 'json', false, 'json', request);
}

model UpdateIgnoreRiskBaseRequest {
  handleDescribe?: string(name='HandleDescribe', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  patrolDetailIds?: string(name='PatrolDetailIds', position='Query'),
  patrolId?: long(name='PatrolId', position='Query'),
}

model UpdateIgnoreRiskBaseResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateIgnoreRiskBaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIgnoreRiskBaseResponseBody(name='body'),
}

async function updateIgnoreRiskBase(request: UpdateIgnoreRiskBaseRequest): UpdateIgnoreRiskBaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIgnoreRiskBase', 'GET', '/', 'json', false, 'json', request);
}

model UpdateInspectionSettingStatusRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  riskCode?: string(name='RiskCode', position='Body'),
  riskEnableStatus?: int32(name='RiskEnableStatus', position='Body'),
}

model UpdateInspectionSettingStatusResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateInspectionSettingStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInspectionSettingStatusResponseBody(name='body'),
}

async function updateInspectionSettingStatus(request: UpdateInspectionSettingStatusRequest): UpdateInspectionSettingStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInspectionSettingStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateInspectionThresholdRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  riskCode?: string(name='RiskCode', position='Body'),
  thresholdItemListJson?: string(name='ThresholdItemListJson', position='Body'),
}

model UpdateInspectionThresholdResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateInspectionThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInspectionThresholdResponseBody(name='body'),
}

async function updateInspectionThreshold(request: UpdateInspectionThresholdRequest): UpdateInspectionThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInspectionThreshold', 'POST', '/', 'json', true, 'form', request);
}

model UpdateOperationPermissionRequest {
  permissionType?: int32(name='PermissionType', position='Query'),
  switchFrontOperaUid?: string(name='SwitchFrontOperaUid', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model UpdateOperationPermissionResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateOperationPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOperationPermissionResponseBody(name='body'),
}

async function updateOperationPermission(request: UpdateOperationPermissionRequest): UpdateOperationPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOperationPermission', 'POST', '/', 'json', false, 'json', request);
}

model UpdateReportEmailConfigStatusRequest {
  configStatus?: int32(name='ConfigStatus', position='Body'),
  mailConfigId?: long(name='MailConfigId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model UpdateReportEmailConfigStatusResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateReportEmailConfigStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateReportEmailConfigStatusResponseBody(name='body'),
}

async function updateReportEmailConfigStatus(request: UpdateReportEmailConfigStatusRequest): UpdateReportEmailConfigStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateReportEmailConfigStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateReportSubscriptionRequest {
  dayOfWeek?: int32(name='DayOfWeek', position='Body'),
  hourOfDay?: int32(name='HourOfDay', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  reportName?: string(name='ReportName', position='Body'),
  subscribe?: int32(name='Subscribe', position='Body'),
}

model UpdateReportSubscriptionResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateReportSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateReportSubscriptionResponseBody(name='body'),
}

async function updateReportSubscription(request: UpdateReportSubscriptionRequest): UpdateReportSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateReportSubscription', 'POST', '/', 'json', true, 'form', request);
}

model UpdateScenarioRequest {
  alertSettingId?: long(name='AlertSettingId', position='Query'),
  id?: string(name='Id', position='Query'),
  level?: long(name='Level', position='Query'),
  name?: string(name='Name', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model UpdateScenarioResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  pageTotal?: long(name='PageTotal'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScenarioResponseBody(name='body'),
}

async function updateScenario(request: UpdateScenarioRequest): UpdateScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScenario', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSceneRequest {
  flowName?: string(name='FlowName', position='Body'),
  metricListJson?: string(name='MetricListJson', position='Body'),
  nodeListJson?: string(name='NodeListJson', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  sceneDesc?: string(name='SceneDesc', position='Body'),
  sceneId?: long(name='SceneId', position='Body'),
  sceneName?: string(name='SceneName', position='Body'),
  sceneOwner?: string(name='SceneOwner', position='Body'),
  sceneWebhook?: string(name='SceneWebhook', position='Body'),
}

model UpdateSceneResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSceneResponseBody(name='body'),
}

async function updateScene(request: UpdateSceneRequest): UpdateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScene', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSceneModelRequest {
  fcFunctionName?: string(name='FcFunctionName', position='Body'),
  fcHandler?: string(name='FcHandler', position='Body'),
  fcInitializer?: string(name='FcInitializer', position='Body'),
  fcRegionNo?: string(name='FcRegionNo', position='Body'),
  fcServiceName?: string(name='FcServiceName', position='Body'),
  modelDesc?: string(name='ModelDesc', position='Body'),
  modelId?: long(name='ModelId', position='Body'),
  modelLanguage?: int32(name='ModelLanguage', position='Body'),
  modelMemo?: string(name='ModelMemo', position='Body'),
  modelName?: string(name='ModelName', position='Body'),
  modelType?: int32(name='ModelType', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
  rootCauseDesc?: string(name='RootCauseDesc', position='Body'),
  rootCauseSolution?: string(name='RootCauseSolution', position='Body'),
}

model UpdateSceneModelResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateSceneModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSceneModelResponseBody(name='body'),
}

async function updateSceneModel(request: UpdateSceneModelRequest): UpdateSceneModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSceneModel', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSceneModelApplyRequest {
  applyContent?: string(name='ApplyContent', position='Body'),
  applyId?: long(name='ApplyId', position='Body'),
  applyStatus?: int32(name='ApplyStatus', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model UpdateSceneModelApplyResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateSceneModelApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSceneModelApplyResponseBody(name='body'),
}

async function updateSceneModelApply(request: UpdateSceneModelApplyRequest): UpdateSceneModelApplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSceneModelApply', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSceneModelCurVersionRequest {
  extId?: long(name='ExtId', position='Body'),
  modelId?: long(name='ModelId', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model UpdateSceneModelCurVersionResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateSceneModelCurVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSceneModelCurVersionResponseBody(name='body'),
}

async function updateSceneModelCurVersion(request: UpdateSceneModelCurVersionRequest): UpdateSceneModelCurVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSceneModelCurVersion', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSceneSystemModelStatusRequest {
  modelId?: long(name='ModelId', position='Body'),
  modelStatus?: int32(name='ModelStatus', position='Body'),
  operaUid?: string(name='OperaUid', position='Body'),
}

model UpdateSceneSystemModelStatusResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateSceneSystemModelStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSceneSystemModelStatusResponseBody(name='body'),
}

async function updateSceneSystemModelStatus(request: UpdateSceneSystemModelStatusRequest): UpdateSceneSystemModelStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSceneSystemModelStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateScenestatusRequest {
  id?: int32(name='Id', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
}

model UpdateScenestatusResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateScenestatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScenestatusResponseBody(name='body'),
}

async function updateScenestatus(request: UpdateScenestatusRequest): UpdateScenestatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScenestatus', 'GET', '/', 'json', false, 'json', request);
}

model UpdateScriptRequest {
  handleSuggestDesc?: string(name='HandleSuggestDesc', position='Query'),
  id?: int32(name='Id', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  operaUid?: string(name='OperaUid', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  rootCauseDesc?: string(name='RootCauseDesc', position='Query'),
  rootCausesLog?: string(name='RootCausesLog', position='Query'),
  sceneId?: string(name='SceneId', position='Query'),
  script?: string(name='Script', position='Query'),
  scriptLanguage?: string(name='ScriptLanguage', position='Query'),
  scriptName?: string(name='ScriptName', position='Query'),
  status?: int32(name='Status', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model UpdateScriptResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScriptResponseBody(name='body'),
}

async function updateScript(request: UpdateScriptRequest): UpdateScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScript', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStatusOfSceneRequest {
  operaUid?: string(name='OperaUid', position='Body'),
  sceneId?: long(name='SceneId', position='Body'),
  sceneStatus?: int32(name='SceneStatus', position='Body'),
}

model UpdateStatusOfSceneResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateStatusOfSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStatusOfSceneResponseBody(name='body'),
}

async function updateStatusOfScene(request: UpdateStatusOfSceneRequest): UpdateStatusOfSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStatusOfScene', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTagInfoRequest {
  operaUid?: string(name='OperaUid', position='Query'),
  tagId?: long(name='TagId', position='Query'),
  tagName?: string(name='TagName', position='Query'),
}

model UpdateTagInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateTagInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTagInfoResponseBody(name='body'),
}

async function updateTagInfo(request: UpdateTagInfoRequest): UpdateTagInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTagInfo', 'GET', '/', 'json', false, 'json', request);
}

