/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'brain-industrial';
  @version = '2020-09-20';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ActivateLicenseRequest {
  fingerprint?: string(name='Fingerprint', example='XXX', position='Body'),
  id?: string(name='Id', description='ID', position='Body'),
  instanceId?: string(name='InstanceId', example='12bea6b4489fsde7b903fe05934a0adx', position='Body'),
  orderId?: string(name='OrderId', position='Body'),
}

model ActivateLicenseResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{}'),
  code?: string(name='Code', example='200'),
  data?: {
    activateRecord?: [ 
      {
        activateTime?: string(name='ActivateTime', example='2024-04-29 15:03:12'),
        buyTime?: string(name='BuyTime', example='2024-04-29 15:01:15'),
        duration?: string(name='Duration'),
        expireTime?: string(name='ExpireTime', example='2025-05-01 00:00:00'),
        licenseCode?: string(name='LicenseCode', example='XXX'),
        orderId?: string(name='OrderId', example='XXX'),
        status?: string(name='Status', example='activated'),
      }
    ](name='ActivateRecord'),
    activateTime?: string(name='ActivateTime', example='2024-04-29 15:03:12'),
    allDuration?: string(name='AllDuration'),
    applicableSpecs?: string(name='ApplicableSpecs'),
    buyTime?: string(name='BuyTime', example='2024-04-29 15:00:15'),
    cpuLimit?: int32(name='CpuLimit', example='72'),
    description?: string(name='Description', example='""'),
    duration?: string(name='Duration'),
    effectTime?: string(name='EffectTime', example='2024-05-01 00:00:00'),
    expireTime?: string(name='ExpireTime', example='2025-05-01 00:00:00'),
    fingerprint?: string(name='Fingerprint', example='XXXX'),
    id?: string(name='Id', description='Id', example='1'),
    instanceId?: string(name='InstanceId', example='c39128fcb74e482546a72de90cdsaba3'),
    licenseCode?: string(name='LicenseCode', example='XXX'),
    licenseSpecName?: string(name='LicenseSpecName'),
    memoryLimit?: int32(name='MemoryLimit', example='256'),
    status?: string(name='Status', example='activated'),
    unActivateAllDuration?: string(name='UnActivateAllDuration'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='65308A66-8764-53EE-8D4A-201E86CA88C5'),
  success?: string(name='Success', example='true'),
}

model ActivateLicenseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateLicenseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ActivateLicense  ActivateLicenseRequest
  * @return ActivateLicenseResponse
 */
async function activateLicense(request: ActivateLicenseRequest): ActivateLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateLicense', 'POST', '/', 'json', true, 'form', request);
}

model AicsOpenApiInvokeRequest {
  nodeId?: string(name='NodeId', example='119397', position='Query'),
  param?: map[string]any(name='Param', example='{"a":1}', shrink='json', position='Body'),
  serviceId: string(name='ServiceId', description='This parameter is required.', example='ae5f9884c9914ed7af72b07e6c1616f9', position='Query'),
  type?: string(name='Type', example='EXPERIMENT', position='Query'),
}

model AicsOpenApiInvokeResponseBody = {
  code?: string(name='Code', example='200'),
  data?: any(name='Data', example='{"c":2}'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
}

model AicsOpenApiInvokeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AicsOpenApiInvokeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AicsOpenApiInvoke  AicsOpenApiInvokeRequest
  * @return AicsOpenApiInvokeResponse
 */
async function aicsOpenApiInvoke(request: AicsOpenApiInvokeRequest): AicsOpenApiInvokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AicsOpenApiInvoke', 'POST', '/', 'json', true, 'form', request);
}

model CreateEssOptJobRequest {
  businessKey?: string(name='BusinessKey', position='Body'),
  duration?: int32(name='Duration', example='1', position='Body'),
  elecPrice?: [ 
    {
      dataTime?: string(name='DataTime', example='00:00:15'),
      price?: string(name='Price', example='0.5'),
    }
  ](name='ElecPrice', shrink='json', position='Body'),
  freq?: string(name='Freq', example='FIFTEEN_MIN', position='Body'),
  genPrice?: [ 
    {
      dataTime?: string(name='DataTime', example='00:00:15'),
      price?: string(name='Price', example='0.3'),
    }
  ](name='GenPrice', shrink='json', position='Body'),
  location?: {
    altitude?: double(name='Altitude', example='10.123'),
    latitude?: double(name='Latitude', example='40.027'),
    longitude?: double(name='Longitude', example='120.042'),
  }(name='Location', shrink='json', position='Body'),
  modelVersion?: string(name='ModelVersion', example='latest', position='Body'),
  runDate?: string(name='RunDate', example='2025-02-12', position='Body'),
  systemData?: [ 
    {
      historyData?: [  map[string]any ](name='HistoryData'),
      systemId?: string(name='SystemId', example='1'),
      systemParams?: map[string]any(name='SystemParams'),
      systemType?: string(name='SystemType', example='ess'),
    }
  ](name='SystemData', shrink='json', position='Body'),
  timeZone?: string(name='TimeZone', example='Asia/Shanghai', position='Body'),
  topoType?: string(name='TopoType', example='LOAD_ESS_SOLAR', position='Body'),
}

model CreateEssOptJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completed?: boolean(name='Completed', example='True'),
    createTime?: string(name='CreateTime', example='2024-12-22 00:00:21'),
    error?: string(name='Error', example='""'),
    jobId?: string(name='JobId', example='8c0ca18a-246a-4acd-80ca-e16d8ff5ef33'),
    progress?: int32(name='Progress', example='25'),
    response?: {
      debugInfo?: any(name='DebugInfo', example='{}'),
      jobType?: string(name='JobType', example='LoadForecast'),
      result?: any(name='Result', example='{}'),
    }(name='Response'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
}

model CreateEssOptJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEssOptJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEssOptJob  CreateEssOptJobRequest
  * @return CreateEssOptJobResponse
 */
async function createEssOptJob(request: CreateEssOptJobRequest): CreateEssOptJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEssOptJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateLoadForecastByFileUrlJobRequest {
  businessKey?: string(name='BusinessKey', example='stationA', position='Body'),
  deviceType?: string(name='DeviceType', example='electricityMeter', position='Body'),
  duration?: int32(name='Duration', example='1', position='Body'),
  freq?: string(name='Freq', example='FIFTEEN_MIN', position='Body'),
  historyUrl?: string(name='HistoryUrl', example='https://bucket.oss-cn-hangzhou.aliyuncs.com/dir/target_file.csv', position='Body'),
  modelVersion?: string(name='ModelVersion', example='latest', position='Body'),
  runDate?: string(name='RunDate', example='2025-01-01', position='Body'),
  systemType?: string(name='SystemType', example='load', position='Body'),
  timeColumn?: string(name='TimeColumn', example='runTime', position='Body'),
  timeZone?: string(name='TimeZone', example='Asia/Shanghai', position='Body'),
  valueColumn?: string(name='ValueColumn', example='value', position='Body'),
}

model CreateLoadForecastByFileUrlJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completed?: boolean(name='Completed', example='True'),
    createTime?: string(name='CreateTime', example='2024-12-22 00:00:21'),
    error?: string(name='Error', example='""'),
    jobId?: string(name='JobId', example='8c0ca18a-246a-4acd-80ca-e16d8ff5ef33'),
    progress?: int32(name='Progress', example='100'),
    response?: {
      debugInfo?: any(name='DebugInfo', example='null'),
      jobType?: string(name='JobType', example='PowerForecast'),
      result?: any(name='Result', example='{"runTime": \\"2025-01-01 00:00:00\\", "value": 0.0}'),
    }(name='Response'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
}

model CreateLoadForecastByFileUrlJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadForecastByFileUrlJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLoadForecastByFileUrlJob  CreateLoadForecastByFileUrlJobRequest
  * @return CreateLoadForecastByFileUrlJobResponse
 */
async function createLoadForecastByFileUrlJob(request: CreateLoadForecastByFileUrlJobRequest): CreateLoadForecastByFileUrlJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadForecastByFileUrlJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateLoadForecastJobRequest {
  businessKey?: string(name='BusinessKey', position='Body'),
  deviceType?: string(name='DeviceType', example='electricityMeter', position='Body'),
  duration?: int32(name='Duration', example='1', position='Body'),
  freq?: string(name='Freq', example='FIFTEEN_MIN', position='Body'),
  historyData?: [ 
    {
      runTime?: string(name='RunTime', example='2025-12-12 00:00:00'),
      value?: double(name='Value', example='1.0'),
    }
  ](name='HistoryData', shrink='json', position='Body'),
  modelVersion?: string(name='ModelVersion', example='latest', position='Body'),
  runDate?: string(name='RunDate', example='2025-12-12', position='Body'),
  systemType?: string(name='SystemType', example='load', position='Body'),
  timeZone?: string(name='TimeZone', example='Asia/Shanghai', position='Body'),
}

model CreateLoadForecastJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completed?: boolean(name='Completed', example='True'),
    createTime?: string(name='CreateTime', example='2024-12-22 00:00:21'),
    error?: string(name='Error', example='""'),
    jobId?: string(name='JobId', example='8c0ca18a-246a-4acd-80ca-e16d8ff5ef33'),
    progress?: int32(name='Progress', example='25'),
    response?: {
      debugInfo?: any(name='DebugInfo', example='{}'),
      jobType?: string(name='JobType', example='PowerForecast'),
      result?: any(name='Result', example='{}'),
    }(name='Response'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
}

model CreateLoadForecastJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadForecastJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLoadForecastJob  CreateLoadForecastJobRequest
  * @return CreateLoadForecastJobResponse
 */
async function createLoadForecastJob(request: CreateLoadForecastJobRequest): CreateLoadForecastJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadForecastJob', 'POST', '/', 'json', true, 'form', request);
}

model CreatePowerForecastByFileUrlJobRequest {
  businessKey?: string(name='BusinessKey', example='stationA', position='Body'),
  deviceType?: string(name='DeviceType', example='solarInverter', position='Body'),
  duration?: int32(name='Duration', example='1', position='Body'),
  freq?: string(name='Freq', example='FIFTEEN_MIN', position='Body'),
  historyUrl?: string(name='HistoryUrl', example='https://bucket.oss-cn-hangzhou.aliyuncs.com/dir/target_file.csv', position='Body'),
  location?: {
    altitude?: double(name='Altitude', example='10.123'),
    latitude?: double(name='Latitude', example='40.027'),
    longitude?: double(name='Longitude', example='120.042'),
  }(name='Location', shrink='json', position='Body'),
  modelVersion?: string(name='ModelVersion', example='latest', position='Body'),
  runDate?: string(name='RunDate', example='2025-01-01', position='Body'),
  systemType?: string(name='SystemType', example='solar', position='Body'),
  timeColumn?: string(name='TimeColumn', example='runTime', position='Body'),
  timeZone?: string(name='TimeZone', example='Asia/Shanghai', position='Body'),
  valueColumn?: string(name='ValueColumn', example='value', position='Body'),
}

model CreatePowerForecastByFileUrlJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completed?: boolean(name='Completed', example='True'),
    createTime?: string(name='CreateTime', example='2024-12-22 00:00:21'),
    error?: string(name='Error', example='""'),
    jobId?: string(name='JobId', example='8c0ca18a-246a-4acd-80ca-e16d8ff5ef33'),
    progress?: int32(name='Progress', example='100'),
    response?: {
      debugInfo?: any(name='DebugInfo', example='{}'),
      jobType?: string(name='JobType', example='PowerForecast'),
      result?: any(name='Result', example='{"runTime": \\"2025-01-01 00:00:00\\", "value": 0.0}'),
    }(name='Response'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
}

model CreatePowerForecastByFileUrlJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePowerForecastByFileUrlJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePowerForecastByFileUrlJob  CreatePowerForecastByFileUrlJobRequest
  * @return CreatePowerForecastByFileUrlJobResponse
 */
async function createPowerForecastByFileUrlJob(request: CreatePowerForecastByFileUrlJobRequest): CreatePowerForecastByFileUrlJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePowerForecastByFileUrlJob', 'POST', '/', 'json', true, 'form', request);
}

model CreatePowerForecastJobRequest {
  businessKey?: string(name='BusinessKey', position='Body'),
  deviceType?: string(name='DeviceType', example='electricityMeter', position='Body'),
  duration?: int32(name='Duration', example='1', position='Body'),
  freq?: string(name='Freq', example='FIFTEEN_MIN', position='Body'),
  historyData?: [ 
    {
      runTime?: string(name='RunTime', example='2025-02-12 00:00:00'),
      value?: double(name='Value', example='1.0'),
    }
  ](name='HistoryData', shrink='json', position='Body'),
  location?: {
    altitude?: double(name='Altitude', example='10.123'),
    latitude?: double(name='Latitude', example='40.027'),
    longitude?: double(name='Longitude', example='120.042'),
  }(name='Location', shrink='json', position='Body'),
  modelVersion?: string(name='ModelVersion', example='latest', position='Body'),
  runDate?: string(name='RunDate', example='2025-02-12', position='Body'),
  systemType?: string(name='SystemType', example='load', position='Body'),
  timeZone?: string(name='TimeZone', example='Asia/Shanghai', position='Body'),
}

model CreatePowerForecastJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completed?: boolean(name='Completed', example='True'),
    createTime?: string(name='CreateTime', example='2024-12-22 00:00:21'),
    error?: string(name='Error', example='""'),
    jobId?: string(name='JobId', example='8c0ca18a-246a-4acd-80ca-e16d8ff5ef33'),
    progress?: int32(name='Progress', example='25'),
    response?: {
      debugInfo?: any(name='DebugInfo', example='{}'),
      jobType?: string(name='JobType', example='LoadForecast'),
      result?: any(name='Result', example='{}'),
    }(name='Response'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
}

model CreatePowerForecastJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePowerForecastJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePowerForecastJob  CreatePowerForecastJobRequest
  * @return CreatePowerForecastJobResponse
 */
async function createPowerForecastJob(request: CreatePowerForecastJobRequest): CreatePowerForecastJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePowerForecastJob', 'POST', '/', 'json', true, 'form', request);
}

model GetAivppAlgoJobRequest {
  jobId?: string(name='JobId', example='5854bfa6-f002-43c2-8e1d-e9b2c28f9384', position='Body'),
}

model GetAivppAlgoJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completed?: boolean(name='Completed', example='False'),
    createTime?: string(name='CreateTime', example='2024-12-10 17:50:48'),
    error?: string(name='Error', example='""'),
    jobId?: string(name='JobId', example='5854bfa6-f002-43c2-8e1d-e9b2c28f9384'),
    progress?: int32(name='Progress', example='100'),
    response?: {
      debugInfo?: any(name='DebugInfo', example='{}'),
      jobType?: string(name='JobType', example='PowerForecast'),
      result?: any(name='Result', example='{}'),
    }(name='Response'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
}

model GetAivppAlgoJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAivppAlgoJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAivppAlgoJob  GetAivppAlgoJobRequest
  * @return GetAivppAlgoJobResponse
 */
async function getAivppAlgoJob(request: GetAivppAlgoJobRequest): GetAivppAlgoJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAivppAlgoJob', 'POST', '/', 'json', true, 'form', request);
}

model GetLicenseRequest {
  id?: long(name='Id', description='ID', example='1', position='Body'),
  instanceId?: string(name='InstanceId', example='c31238fcb74e482588a72de90cd7dba3', position='Body'),
}

model GetLicenseResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='None'),
  code?: string(name='Code', example='200'),
  data?: {
    activateRecord?: [ 
      {
        activateTime?: string(name='ActivateTime', example='2024-04-29 15:03:12'),
        buyTime?: string(name='BuyTime', example='2024-04-29 15:01:15'),
        duration?: string(name='Duration'),
        expireTime?: string(name='ExpireTime', example='2025-05-01 00:00:00'),
        licenseCode?: string(name='LicenseCode', example='XXXX'),
        orderId?: string(name='OrderId', example='1040b91765d14ad1a40ff22589070342'),
        status?: string(name='Status', example='activated'),
      }
    ](name='ActivateRecord'),
    activateTime?: string(name='ActivateTime', description='代表资源一级ID的资源属性字段', example='2024-04-29 15:03:12'),
    adaptiveMachine?: string(name='AdaptiveMachine'),
    allDuration?: string(name='AllDuration'),
    applicableSpecs?: string(name='ApplicableSpecs'),
    buyTime?: string(name='BuyTime', description='代表资源名称的资源属性字段', example='2024-04-29 15:01:15'),
    cpuLimit?: int32(name='CpuLimit', example='72'),
    description?: string(name='Description', example='""'),
    duration?: string(name='Duration'),
    effectTime?: string(name='EffectTime', example='2024-05-01 00:00:00'),
    expireTime?: string(name='ExpireTime', example='2025-05-01 00:00:00'),
    fingerprint?: string(name='Fingerprint', description='代表创建时间的资源属性字段', example='XXX'),
    id?: long(name='Id', description='ID', example='1'),
    instanceId?: string(name='InstanceId', example='c31238fcb74e482588a72de90cd7dba3'),
    licenseCode?: string(name='LicenseCode', example='XXX'),
    licenseSpecCode?: string(name='LicenseSpecCode'),
    licenseSpecName?: string(name='LicenseSpecName', description='代表资源组的资源属性字段'),
    licenseSpecType?: string(name='LicenseSpecType'),
    memoryLimit?: int32(name='MemoryLimit', example='256'),
    proposal?: string(name='Proposal'),
    status?: string(name='Status', example='activated'),
    unActivateAllDuration?: string(name='UnActivateAllDuration'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='true'),
}

model GetLicenseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLicenseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLicense  GetLicenseRequest
  * @return GetLicenseResponse
 */
async function getLicense(request: GetLicenseRequest): GetLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLicense', 'POST', '/', 'json', true, 'form', request);
}

model ListAivppResourcesRequest {
  currentPage?: int32(name='CurrentPage', example='1', minimum=1, maximum=100, position='Body'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=100, position='Body'),
}

model ListAivppResourcesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      detail?: string(name='Detail'),
      expireTime?: string(name='ExpireTime', example='2034-03-09T17:47:11Z'),
      instanceId?: string(name='InstanceId', example='i-bp154xh3gt3adb4xu1ue'),
      instanceType?: string(name='InstanceType', example='api'),
      leftQuantity?: string(name='LeftQuantity', example='1'),
      orderId?: string(name='OrderId', example='231287932080007'),
      quantity?: string(name='Quantity', example='1'),
      specification?: string(name='Specification', example='LoadForecasting'),
      startTime?: string(name='StartTime', example='2024-09-08T01:16Z'),
      status?: string(name='Status', example='Normal'),
      userId?: string(name='UserId', example='123456789'),
    }
  ](name='Data'),
  maxResults?: int32(name='MaxResults', example='20'),
  message?: string(name='Message', example='successful'),
  nextToken?: string(name='NextToken', example='37cc36b4344b182d36b45d95ae4ef03952ee5c24733ba461'),
  requestId?: string(name='RequestId', description='Id of the request', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model ListAivppResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAivppResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAivppResources  ListAivppResourcesRequest
  * @return ListAivppResourcesResponse
 */
async function listAivppResources(request: ListAivppResourcesRequest): ListAivppResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAivppResources', 'POST', '/', 'json', true, 'form', request);
}

model ListLicensesRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='12', position='Body'),
  queryStr?: string(name='QueryStr', position='Body'),
}

model ListLicensesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{}'),
  code?: string(name='Code', example='200'),
  currentPage?: int32(name='CurrentPage', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  licenseList?: [ 
    {
      activateTime?: string(name='ActivateTime', example='2024-10-14 14:15:45'),
      adaptiveMachine?: int32(name='AdaptiveMachine'),
      allDuration?: string(name='AllDuration'),
      buyTime?: string(name='BuyTime', example='2024-10-14 13:17:20'),
      cpuLimit?: int32(name='CpuLimit', example='72'),
      description?: string(name='Description', example='""'),
      duration?: string(name='Duration'),
      effectTime?: string(name='EffectTime', example='2024-10-14 14:15:45'),
      expireTime?: string(name='ExpireTime', example='2025-10-14 14:15:45'),
      id?: string(name='Id', example='1'),
      instanceId?: string(name='InstanceId', example='451f14ee73604aesdfe4da606764ce09'),
      licenseSpecCode?: string(name='LicenseSpecCode', example='aics_1000'),
      licenseSpecName?: string(name='LicenseSpecName'),
      licenseSpecType?: string(name='LicenseSpecType', example='brainindustrial_aicsruntime_public_cn'),
      memoryLimit?: int32(name='MemoryLimit', example='256'),
      status?: string(name='Status', example='activated'),
      unActivateAllDuration?: string(name='UnActivateAllDuration'),
    }
  ](name='LicenseList'),
  message?: string(name='Message', example='successful'),
  pageSize?: int32(name='PageSize', example='12'),
  requestId?: string(name='RequestId', example='FAC892CE-5A94-5616-91DC-629B09CC6792'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='42'),
  totalPage?: string(name='TotalPage', example='4'),
  totalPageCount?: string(name='TotalPageCount', example='4'),
}

model ListLicensesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLicensesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLicenses  ListLicensesRequest
  * @return ListLicensesResponse
 */
async function listLicenses(request: ListLicensesRequest): ListLicensesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLicenses', 'POST', '/', 'json', true, 'form', request);
}

model ListUserResourcesRequest {
  commodityCode?: string(name='CommodityCode', example='BrainIndustrial', position='Body'),
}

model ListUserResourcesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      chargeType?: string(name='chargeType'),
      commodityCode?: string(name='commodityCode', example='brainindustrial_simupostpaid_public_cn'),
      endDate?: string(name='endDate', example='2024-12-21'),
      instanceId?: string(name='instanceId', example='12345ea3cff446e8837078c2baffbe83'),
      region?: string(name='region', example='cn-hangzhou'),
      startDate?: string(name='startDate', example='20240902'),
      status?: string(name='status', example='""'),
      statusMsg?: string(name='statusMsg'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='65308A66-8764-53EE-8D4A-201E86CA88C5'),
  success?: string(name='Success', example='true'),
}

model ListUserResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserResources  ListUserResourcesRequest
  * @return ListUserResourcesResponse
 */
async function listUserResources(request: ListUserResourcesRequest): ListUserResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserResources', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLicenseDescriptionRequest {
  description?: string(name='Description', position='Body'),
  instanceId?: string(name='InstanceId', example='brainindustrial_aicsruntime_public_cn-mdu3ps3kw04', position='Body'),
}

model UpdateLicenseDescriptionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='68738E75-43C1-5AE5-9F3A-AFEF576D7B5F'),
  success?: string(name='Success', example='True'),
}

model UpdateLicenseDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLicenseDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLicenseDescription  UpdateLicenseDescriptionRequest
  * @return UpdateLicenseDescriptionResponse
 */
async function updateLicenseDescription(request: UpdateLicenseDescriptionRequest): UpdateLicenseDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLicenseDescription', 'POST', '/', 'json', true, 'form', request);
}

