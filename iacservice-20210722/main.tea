/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('iacservice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateResourceRequest {
  body?: string(name='body'),
  resourceTypeVersion?: string(name='resourceTypeVersion'),
}

model CreateResourceResponseBody = {
  requestId?: string(name='requestId', description='请求id'),
  resourceId?: string(name='resourceId', description='资源id'),
  taskId?: string(name='taskId', description='任务id'),
}

model CreateResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceResponseBody(name='body'),
}

async function createResource(provider: string, productCode: string, resourceTypeCode: string, request: CreateResourceRequest): CreateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createResourceWithOptions(provider, productCode, resourceTypeCode, request, headers, runtime);
}

async function createResourceWithOptions(provider: string, productCode: string, resourceTypeCode: string, request: CreateResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceResponse {
  Util.validateModel(request);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var query : map[string]any= {};
  if (!Util.isUnset(request.resourceTypeVersion)) {
    query['resourceTypeVersion'] = request.resourceTypeVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'CreateResource',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes/${resourceTypeCode}/resources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteResourceRequest {
  regionId?: string(name='regionId'),
  resourceTypeVersion?: string(name='resourceTypeVersion'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  taskId?: string(name='taskId'),
}

model DeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceResponseBody(name='body'),
}

async function deleteResource(provider: string, productCode: string, resourceTypeCode: string, resourceId: string, request: DeleteResourceRequest): DeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteResourceWithOptions(provider, productCode, resourceTypeCode, resourceId, request, headers, runtime);
}

async function deleteResourceWithOptions(provider: string, productCode: string, resourceTypeCode: string, resourceId: string, request: DeleteResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceResponse {
  Util.validateModel(request);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceTypeVersion)) {
    query['resourceTypeVersion'] = request.resourceTypeVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResource',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes/${resourceTypeCode}/resources/${resourceId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetResourceRequest {
  dataType?: string(name='dataType'),
  regionId?: string(name='regionId'),
}

model GetResourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  resource?: {
    productCode?: string(name='productCode'),
    regionId?: string(name='regionId'),
    resourceAttributes?: string(name='resourceAttributes'),
    resourceId?: string(name='resourceId'),
    resourceTypeCode?: string(name='resourceTypeCode'),
  }(name='resource'),
}

model GetResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceResponseBody(name='body'),
}

async function getResource(provider: string, productCode: string, resourceTypeCode: string, resourceId: string, request: GetResourceRequest): GetResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getResourceWithOptions(provider, productCode, resourceTypeCode, resourceId, request, headers, runtime);
}

async function getResourceWithOptions(provider: string, productCode: string, resourceTypeCode: string, resourceId: string, request: GetResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetResourceResponse {
  Util.validateModel(request);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dataType)) {
    query['dataType'] = request.dataType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResource',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes/${resourceTypeCode}/resources/${resourceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetResourceTypeRequest {
  resourceTypeVersion?: string(name='resourceTypeVersion'),
}

model GetResourceTypeResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  resourceType?: {
    createOnlyProperties?: [ string ](name='createOnlyProperties'),
    deleteOnlyProperties?: [ string ](name='deleteOnlyProperties'),
    filterProperties?: [ string ](name='filterProperties'),
    getOnlyProperties?: [ string ](name='getOnlyProperties'),
    handlers?: {
      create?: {
        permissions?: [ string ](name='permissions'),
      }(name='create'),
      delete?: {
        permissions?: [ string ](name='permissions'),
      }(name='delete'),
      get?: {
        permissions?: [ string ](name='permissions'),
      }(name='get'),
      list?: {
        permissions?: [ string ](name='permissions'),
      }(name='list'),
      update?: {
        permissions?: [ string ](name='permissions'),
      }(name='update'),
    }(name='handlers'),
    info?: {
      chargeType?: string(name='chargeType'),
      deliveryScope?: string(name='deliveryScope'),
      description?: string(name='description'),
      title?: string(name='title'),
    }(name='info'),
    listOnlyProperties?: [ string ](name='listOnlyProperties'),
    primaryIdentifier?: string(name='primaryIdentifier'),
    product?: string(name='product'),
    properties?: map[string]any(name='properties'),
    publicProperties?: [ string ](name='publicProperties'),
    readOnlyProperties?: [ string ](name='readOnlyProperties'),
    required?: [ string ](name='required'),
    resourceType?: string(name='resourceType'),
    resourceTypeVersion?: string(name='resourceTypeVersion'),
    sensitiveInfoProperties?: [ string ](name='sensitiveInfoProperties'),
    updateOnlyProperties?: [ string ](name='updateOnlyProperties'),
    updateTypeProperties?: [ string ](name='updateTypeProperties'),
  }(name='resourceType'),
}

model GetResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceTypeResponseBody(name='body'),
}

async function getResourceType(provider: string, productCode: string, resourceTypeCode: string, request: GetResourceTypeRequest): GetResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getResourceTypeWithOptions(provider, productCode, resourceTypeCode, request, headers, runtime);
}

async function getResourceTypeWithOptions(provider: string, productCode: string, resourceTypeCode: string, request: GetResourceTypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetResourceTypeResponse {
  Util.validateModel(request);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var query : map[string]any= {};
  if (!Util.isUnset(request.resourceTypeVersion)) {
    query['resourceTypeVersion'] = request.resourceTypeVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceType',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes/${resourceTypeCode}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTaskResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  task?: {
    createTime?: string(name='createTime'),
    error?: {
      code?: string(name='code'),
      message?: string(name='message'),
    }(name='error'),
    productCode?: string(name='productCode'),
    resourceId?: string(name='resourceId'),
    resourceTypeCode?: string(name='resourceTypeCode'),
    retryAfter?: int32(name='retryAfter'),
    status?: string(name='status'),
    taskAction?: string(name='taskAction'),
    taskId?: string(name='taskId'),
  }(name='task'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

async function getTask(taskId: string): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskWithOptions(taskId, headers, runtime);
}

async function getTaskWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskResponse {
  taskId = OpenApiUtil.getEncodeParam(taskId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/tasks/${taskId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDataSourcesRequest {
  filter?: map[string]any(name='filter'),
}

model ListDataSourcesShrinkRequest {
  filterShrink?: string(name='filter'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [ 
    {
      dataSourceAttributes?: string(name='dataSourceAttributes'),
      id?: string(name='id'),
    }
  ](name='dataSources'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSources(provider: string, productCode: string, resourceTypeCode: string, attributeName: string, request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourcesWithOptions(provider, productCode, resourceTypeCode, attributeName, request, headers, runtime);
}

async function listDataSourcesWithOptions(provider: string, productCode: string, resourceTypeCode: string, attributeName: string, tmpReq: ListDataSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(tmpReq);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  attributeName = OpenApiUtil.getEncodeParam(attributeName);
  var request = new ListDataSourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'filter', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.filterShrink)) {
    query['filter'] = request.filterShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes/${resourceTypeCode}/dataSources/${attributeName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProductsRequest {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
}

model ListProductsResponseBody = {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  products?: [ 
    {
      productCode?: string(name='productCode'),
      productName?: {
        enUS?: string(name='en_US'),
        zhCN?: string(name='zh_CN'),
      }(name='productName'),
    }
  ](name='products'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsResponseBody(name='body'),
}

async function listProducts(provider: string, request: ListProductsRequest): ListProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductsWithOptions(provider, request, headers, runtime);
}

async function listProductsWithOptions(provider: string, request: ListProductsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductsResponse {
  Util.validateModel(request);
  provider = OpenApiUtil.getEncodeParam(provider);
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProducts',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListResourceTypesRequest {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
  resourceTypeCodes?: [ string ](name='resourceTypeCodes'),
}

model ListResourceTypesShrinkRequest {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
  resourceTypeCodesShrink?: string(name='resourceTypeCodes'),
}

model ListResourceTypesResponseBody = {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='requestId', description='Id of the request'),
  resourceTypes?: [ 
    {
      identityDefinition?: {
        arnPattern?: string(name='arnPattern', description='资源ARN'),
        secondUniqueKeyFields?: [ string ](name='secondUniqueKeyFields', description='备选Id字段列表，有顺序'),
        uniqueKeyFields?: [ string ](name='uniqueKeyFields', description='uniqueKey的字段列表，有顺序'),
      }(name='identityDefinition'),
      info?: {
        availableSites?: [ string ](name='availableSites', description='允许资源展示的站点  枚举:china(中国站)/intl(国际站)/japan(日本站)'),
        category?: string(name='category', description='资源分类 枚举:normal(普通资源)/singleton(单例资源)/virtual(虚拟资源)/readonly(只读资源)'),
        chargeType?: string(name='chargeType', description='付费形式  枚举:paid(付费)/free(免费)'),
        deliveryScope?: string(name='deliveryScope', description='交付级别 枚举:center(中心化部署级别)/region(地域部署级别)/zone(可用区部署级别)'),
        description?: string(name='description', description='描述'),
        title?: string(name='title', description='资源类型的中文名称，如实例'),
      }(name='info'),
      productCode?: string(name='productCode'),
      resourceProperties?: string(name='resourceProperties'),
      resourceRelations?: [ 
        {
          description?: string(name='description', description='资源关系描述 枚举：枚举:关联关系/依赖关系/子父关系'),
          product?: string(name='product', description='云产品B'),
          relation?: string(name='relation', description='资源关系  枚举:relevance(关联关系)/dependency(依赖关系)/childParent(子父关系)'),
          resourceType?: string(name='resourceType', description='资源类型B'),
        }
      ](name='resourceRelations'),
      resourceTypeCode?: string(name='resourceTypeCode'),
      statusDefinition?: [ 
        {
          code?: string(name='code', description='状态code'),
          description?: string(name='description', description='描述'),
          type?: string(name='type', description='资源状态分类，必须对代表资源创建后的初始状态进行initial标识。枚举:initial(初始状态)'),
        }
      ](name='statusDefinition'),
    }
  ](name='resourceTypes'),
  totalCount?: long(name='totalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypes(provider: string, productCode: string, request: ListResourceTypesRequest): ListResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourceTypesWithOptions(provider, productCode, request, headers, runtime);
}

async function listResourceTypesWithOptions(provider: string, productCode: string, tmpReq: ListResourceTypesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourceTypesResponse {
  Util.validateModel(tmpReq);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  var request = new ListResourceTypesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceTypeCodes)) {
    request.resourceTypeCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypeCodes, 'resourceTypeCodes', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceTypeCodesShrink)) {
    query['resourceTypeCodes'] = request.resourceTypeCodesShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceTypes',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListResourcesHeaders {
  commonHeaders?: map[string]string,
  xRoagCache?: boolean(name='x-roag-cache'),
}

model ListResourcesRequest {
  dataType?: string(name='dataType'),
  filter?: map[string]any(name='filter'),
  maxResults?: int32(name='maxResults'),
  nextToken?: string(name='nextToken'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  regionIds?: [ string ](name='regionIds'),
}

model ListResourcesShrinkRequest {
  dataType?: string(name='dataType'),
  filterShrink?: string(name='filter'),
  maxResults?: int32(name='maxResults'),
  nextToken?: string(name='nextToken'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  regionIdsShrink?: string(name='regionIds'),
}

model ListResourcesResponseBody = {
  maxResults?: int32(name='maxResults'),
  nextToken?: string(name='nextToken'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId', description='Id of the request'),
  resources?: [ 
    {
      productCode?: string(name='productCode'),
      regionId?: string(name='regionId'),
      resourceAttributes?: string(name='resourceAttributes'),
      resourceId?: string(name='resourceId'),
      resourceTypeCode?: string(name='resourceTypeCode'),
    }
  ](name='resources'),
  totalCount?: int32(name='totalCount'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(provider: string, productCode: string, resourceTypeCode: string, request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListResourcesHeaders{};
  return listResourcesWithOptions(provider, productCode, resourceTypeCode, request, headers, runtime);
}

async function listResourcesWithOptions(provider: string, productCode: string, resourceTypeCode: string, tmpReq: ListResourcesRequest, headers: ListResourcesHeaders, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(tmpReq);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var request = new ListResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'filter', 'json');
  }
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'regionIds', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.dataType)) {
    query['dataType'] = request.dataType;
  }
  if (!Util.isUnset(request.filterShrink)) {
    query['filter'] = request.filterShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['pageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdsShrink)) {
    query['regionIds'] = request.regionIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xRoagCache)) {
    realHeaders['x-roag-cache'] = Util.toJSONString(headers.xRoagCache);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes/${resourceTypeCode}/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListTasksRequest {
  maxResults?: int32(name='maxResults', description='本次读取的最大数据记录数量'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  taskIds?: [ string ](name='taskIds', description='任务Id列表'),
}

model ListTasksShrinkRequest {
  maxResults?: int32(name='maxResults', description='本次读取的最大数据记录数量'),
  nextToken?: string(name='nextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  taskIdsShrink?: string(name='taskIds', description='任务Id列表'),
}

model ListTasksResponseBody = {
  maxResults?: int32(name='maxResults', description='maxResults本次请求所返回的最大记录条数'),
  nextToken?: string(name='nextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='requestId', description='Id of the request'),
  tasks?: [ 
    {
      createTime?: string(name='createTime'),
      error?: {
        code?: string(name='code'),
        message?: string(name='message'),
      }(name='error'),
      productCode?: string(name='productCode'),
      resourceId?: string(name='resourceId'),
      resourceTypeCode?: string(name='resourceTypeCode'),
      retryAfter?: int32(name='retryAfter'),
      status?: string(name='status'),
      taskAction?: string(name='taskAction'),
      taskId?: string(name='taskId'),
    }
  ](name='tasks'),
  totalCount?: int32(name='totalCount', description='totalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTasksWithOptions(request, headers, runtime);
}

async function listTasksWithOptions(tmpReq: ListTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(tmpReq);
  var request = new ListTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskIds)) {
    request.taskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIds, 'taskIds', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.taskIdsShrink)) {
    query['taskIds'] = request.taskIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ReloadResourcesRequest {
  regionIds?: [ string ](name='regionIds'),
}

model ReloadResourcesShrinkRequest {
  regionIdsShrink?: string(name='regionIds'),
}

model ReloadResourcesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  taskId?: string(name='taskId'),
}

model ReloadResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReloadResourcesResponseBody(name='body'),
}

async function reloadResources(provider: string, productCode: string, resourceTypeCode: string, request: ReloadResourcesRequest): ReloadResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return reloadResourcesWithOptions(provider, productCode, resourceTypeCode, request, headers, runtime);
}

async function reloadResourcesWithOptions(provider: string, productCode: string, resourceTypeCode: string, tmpReq: ReloadResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReloadResourcesResponse {
  Util.validateModel(tmpReq);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var request = new ReloadResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'regionIds', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionIdsShrink)) {
    query['regionIds'] = request.regionIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReloadResources',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes/${resourceTypeCode}/resources/operation/reload`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateResourceRequest {
  body?: string(name='body'),
  resourceTypeVersion?: string(name='resourceTypeVersion'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='requestId', description='请求id'),
  taskId?: string(name='taskId'),
}

model UpdateResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceResponseBody(name='body'),
}

async function updateResource(provider: string, productCode: string, resourceTypeCode: string, resourceId: string, request: UpdateResourceRequest): UpdateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateResourceWithOptions(provider, productCode, resourceTypeCode, resourceId, request, headers, runtime);
}

async function updateResourceWithOptions(provider: string, productCode: string, resourceTypeCode: string, resourceId: string, request: UpdateResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateResourceResponse {
  Util.validateModel(request);
  provider = OpenApiUtil.getEncodeParam(provider);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.resourceTypeVersion)) {
    query['resourceTypeVersion'] = request.resourceTypeVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateResource',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/${productCode}/resourceTypes/${resourceTypeCode}/resources/${resourceId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

