/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('iacservice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateResourceRequest {
  body?: string(name='body'),
  isAsync?: boolean(name='isAsync'),
}

model CreateResourceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  resourceId?: string(name='resourceId', description='资源id'),
  taskId?: string(name='taskId', description='任务id'),
}

model CreateResourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceResponseBody(name='body'),
}

async function createResource(productCode: string, provider: string, resourceTypeCode: string, request: CreateResourceRequest): CreateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createResourceWithOptions(productCode, provider, resourceTypeCode, request, headers, runtime);
}

async function createResourceWithOptions(productCode: string, provider: string, resourceTypeCode: string, request: CreateResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceResponse {
  Util.validateModel(request);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  provider = OpenApiUtil.getEncodeParam(provider);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var query : map[string]any= {};
  if (!Util.isUnset(request.isAsync)) {
    query.isAsync = request.isAsync;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'CreateResource',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/{productCode}/resourceTypes/{resourceTypeCode}/resources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteResourceRequest {
  isAsync?: boolean(name='isAsync'),
  regionId?: string(name='regionId'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  taskId?: string(name='taskId'),
}

model DeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceResponseBody(name='body'),
}

async function deleteResource(productCode: string, provider: string, resourceId: string, resourceTypeCode: string, request: DeleteResourceRequest): DeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteResourceWithOptions(productCode, provider, resourceId, resourceTypeCode, request, headers, runtime);
}

async function deleteResourceWithOptions(productCode: string, provider: string, resourceId: string, resourceTypeCode: string, request: DeleteResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceResponse {
  Util.validateModel(request);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  provider = OpenApiUtil.getEncodeParam(provider);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var query : map[string]any= {};
  if (!Util.isUnset(request.isAsync)) {
    query.isAsync = request.isAsync;
  }
  if (!Util.isUnset(request.regionId)) {
    query.regionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResource',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/{productCode}/resourceTypes/{resourceTypeCode}/resources/{resourceId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetResourceRequest {
  regionId?: string(name='regionId'),
}

model GetResourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  resource?: {
    productCode?: string(name='productCode'),
    regionId?: string(name='regionId'),
    resourceAttributes?: string(name='resourceAttributes'),
    resourceId?: string(name='resourceId'),
    resourceTypeCode?: string(name='resourceTypeCode'),
  }(name='resource'),
}

model GetResourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceResponseBody(name='body'),
}

async function getResource(productCode: string, provider: string, resourceId: string, resourceTypeCode: string, request: GetResourceRequest): GetResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getResourceWithOptions(productCode, provider, resourceId, resourceTypeCode, request, headers, runtime);
}

async function getResourceWithOptions(productCode: string, provider: string, resourceId: string, resourceTypeCode: string, request: GetResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetResourceResponse {
  Util.validateModel(request);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  provider = OpenApiUtil.getEncodeParam(provider);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.regionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResource',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/{productCode}/resourceTypes/{resourceTypeCode}/resources/{resourceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTaskResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  task?: {
    failedReason?: string(name='failedReason'),
    resourceId?: string(name='resourceId'),
    status?: string(name='status'),
    taskId?: string(name='taskId'),
  }(name='task'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskResponseBody(name='body'),
}

async function getTask(taskId: string): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskWithOptions(taskId, headers, runtime);
}

async function getTaskWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskResponse {
  taskId = OpenApiUtil.getEncodeParam(taskId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/tasks/${taskId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDataSourcesRequest {
  filter?: map[string]any(name='filter'),
}

model ListDataSourcesShrinkRequest {
  filterShrink?: string(name='filter'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [ 
    {
      id?: string(name='id'),
      dataSourceAttributes?: string(name='dataSourceAttributes'),
    }
  ](name='dataSources'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSources(attributeName: string, productCode: string, provider: string, resourceTypeCode: string, request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourcesWithOptions(attributeName, productCode, provider, resourceTypeCode, request, headers, runtime);
}

async function listDataSourcesWithOptions(attributeName: string, productCode: string, provider: string, resourceTypeCode: string, tmpReq: ListDataSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(tmpReq);
  attributeName = OpenApiUtil.getEncodeParam(attributeName);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  provider = OpenApiUtil.getEncodeParam(provider);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var request = new ListDataSourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'filter', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.filterShrink)) {
    query.filter = request.filterShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/{productCode}/resourceTypes/{resourceTypeCode}/dataSources/{attributeName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProductsRequest {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
}

model ListProductsResponseBody = {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  products?: [ 
    {
      productCode?: string(name='productCode'),
      productName?: {
        zhCN?: string(name='zh_CN'),
        enUS?: string(name='en_US'),
      }(name='productName'),
    }
  ](name='products'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductsResponseBody(name='body'),
}

async function listProducts(provider: string, request: ListProductsRequest): ListProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductsWithOptions(provider, request, headers, runtime);
}

async function listProductsWithOptions(provider: string, request: ListProductsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductsResponse {
  Util.validateModel(request);
  provider = OpenApiUtil.getEncodeParam(provider);
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProducts',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListResourceTypesRequest {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
  resourceTypeCodes?: [ string ](name='resourceTypeCodes'),
}

model ListResourceTypesShrinkRequest {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
  resourceTypeCodesShrink?: string(name='resourceTypeCodes'),
}

model ListResourceTypesResponseBody = {
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='requestId', description='Id of the request'),
  resourceTypes?: [ 
    {
      productCode?: string(name='productCode'),
      resourceTypeCode?: string(name='resourceTypeCode'),
      info?: {
        title?: string(name='title', description='资源类型的中文名称，如实例'),
        description?: string(name='description', description='描述'),
        category?: string(name='category', description='资源分类 枚举:normal(普通资源)/singleton(单例资源)/virtual(虚拟资源)/readonly(只读资源)'),
        deliveryScope?: string(name='deliveryScope', description='交付级别 枚举:center(中心化部署级别)/region(地域部署级别)/zone(可用区部署级别)'),
        chargeType?: string(name='chargeType', description='付费形式  枚举:paid(付费)/free(免费)'),
        availableSites?: [ string ](name='availableSites', description='允许资源展示的站点  枚举:china(中国站)/intl(国际站)/japan(日本站)'),
      }(name='info'),
      identityDefinition?: {
        uniqueKeyFields?: [ string ](name='uniqueKeyFields', description='uniqueKey的字段列表，有顺序'),
        secondUniqueKeyFields?: [ string ](name='secondUniqueKeyFields', description='备选Id字段列表，有顺序'),
        arnPattern?: string(name='arnPattern', description='资源ARN'),
      }(name='identityDefinition'),
      statusDefinition?: [ 
        {
          code?: string(name='code', description='状态code'),
          description?: string(name='description', description='描述'),
          type?: string(name='type', description='资源状态分类，必须对代表资源创建后的初始状态进行initial标识。枚举:initial(初始状态)'),
        }
      ](name='statusDefinition'),
      resourceProperties?: string(name='resourceProperties'),
      resourceRelations?: [ 
        {
          product?: string(name='product', description='云产品B'),
          resourceType?: string(name='resourceType', description='资源类型B'),
          relation?: string(name='relation', description='资源关系  枚举:relevance(关联关系)/dependency(依赖关系)/childParent(子父关系)'),
          description?: string(name='description', description='资源关系描述 枚举：枚举:关联关系/依赖关系/子父关系'),
        }
      ](name='resourceRelations'),
    }
  ](name='resourceTypes'),
  totalCount?: long(name='totalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypes(productCode: string, provider: string, request: ListResourceTypesRequest): ListResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourceTypesWithOptions(productCode, provider, request, headers, runtime);
}

async function listResourceTypesWithOptions(productCode: string, provider: string, tmpReq: ListResourceTypesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourceTypesResponse {
  Util.validateModel(tmpReq);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  provider = OpenApiUtil.getEncodeParam(provider);
  var request = new ListResourceTypesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceTypeCodes)) {
    request.resourceTypeCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypeCodes, 'resourceTypeCodes', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.resourceTypeCodesShrink)) {
    query.resourceTypeCodes = request.resourceTypeCodesShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceTypes',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/{productCode}/resourceTypes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListResourcesRequest {
  filter?: map[string]any(name='filter'),
  isReload?: boolean(name='isReload'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  regionIds?: [ string ](name='regionIds'),
}

model ListResourcesShrinkRequest {
  filterShrink?: string(name='filter'),
  isReload?: boolean(name='isReload'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  regionIdsShrink?: string(name='regionIds'),
}

model ListResourcesResponseBody = {
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId', description='Id of the request'),
  resources?: [ 
    {
      productCode?: string(name='productCode'),
      resourceTypeCode?: string(name='resourceTypeCode'),
      regionId?: string(name='regionId'),
      resourceId?: string(name='resourceId'),
      resourceAttributes?: string(name='resourceAttributes'),
    }
  ](name='resources'),
  totalCount?: int32(name='totalCount'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(productCode: string, provider: string, resourceTypeCode: string, request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourcesWithOptions(productCode, provider, resourceTypeCode, request, headers, runtime);
}

async function listResourcesWithOptions(productCode: string, provider: string, resourceTypeCode: string, tmpReq: ListResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(tmpReq);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  provider = OpenApiUtil.getEncodeParam(provider);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var request = new ListResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'filter', 'json');
  }
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'regionIds', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.filterShrink)) {
    query.filter = request.filterShrink;
  }
  if (!Util.isUnset(request.isReload)) {
    query.isReload = request.isReload;
  }
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdsShrink)) {
    query.regionIds = request.regionIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/{productCode}/resourceTypes/{resourceTypeCode}/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ReloadResourcesRequest {
  regionIds?: [ string ](name='regionIds'),
}

model ReloadResourcesShrinkRequest {
  regionIdsShrink?: string(name='regionIds'),
}

model ReloadResourcesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  taskId?: string(name='taskId'),
}

model ReloadResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ReloadResourcesResponseBody(name='body'),
}

async function reloadResources(productCode: string, provider: string, resourceTypeCode: string, request: ReloadResourcesRequest): ReloadResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return reloadResourcesWithOptions(productCode, provider, resourceTypeCode, request, headers, runtime);
}

async function reloadResourcesWithOptions(productCode: string, provider: string, resourceTypeCode: string, tmpReq: ReloadResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReloadResourcesResponse {
  Util.validateModel(tmpReq);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  provider = OpenApiUtil.getEncodeParam(provider);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var request = new ReloadResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'regionIds', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionIdsShrink)) {
    query.regionIds = request.regionIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReloadResources',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/{productCode}/resourceTypes/{resourceTypeCode}/resources/operation/reload`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateResourceRequest {
  body?: string(name='body'),
  isAsync?: boolean(name='isAsync'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='requestId', description='请求id'),
  taskId?: string(name='taskId'),
}

model UpdateResourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceResponseBody(name='body'),
}

async function updateResource(productCode: string, provider: string, resourceId: string, resourceTypeCode: string, request: UpdateResourceRequest): UpdateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateResourceWithOptions(productCode, provider, resourceId, resourceTypeCode, request, headers, runtime);
}

async function updateResourceWithOptions(productCode: string, provider: string, resourceId: string, resourceTypeCode: string, request: UpdateResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateResourceResponse {
  Util.validateModel(request);
  productCode = OpenApiUtil.getEncodeParam(productCode);
  provider = OpenApiUtil.getEncodeParam(provider);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  resourceTypeCode = OpenApiUtil.getEncodeParam(resourceTypeCode);
  var query : map[string]any= {};
  if (!Util.isUnset(request.isAsync)) {
    query.isAsync = request.isAsync;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateResource',
    version = '2021-07-22',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${provider}/products/{productCode}/resourceTypes/{resourceTypeCode}/resources/{resourceId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

