/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'um-test';
  @version = '2021-10-27';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetOssUploadParamRequest {
  appVersion: string(name='appVersion', example='1.0.3', position='Query'),
  dataSourceId: string(name='dataSourceId', example='5fb6001a73749c24fd9cb356', position='Query'),
  fileName: string(name='fileName', example='symbol.zip', position='Query'),
  fileType: int32(name='fileType', example='1', minimum=1, maximum=3, position='Query'),
}

model GetOssUploadParamResponseBody = {
  requestId?: string(name='RequestId', example='4E442FB6-90AE-505E-84FD-8CEF655A0FDF'),
  code?: long(name='code', description='code', example='code'),
  data?: {
    accessKeyId?: string(name='accessKeyId', example='accessKeyId'),
    callback?: string(name='callback', example='callback'),
    key?: string(name='key', example='key'),
    policy?: string(name='policy', example='policy'),
    signature?: string(name='signature', example='signature'),
    uploadAddress?: string(name='uploadAddress', example='https://quickbird.oss-cn-shanghai.aliyuncs.com'),
  }(name='data', description='data'),
  msg?: string(name='msg', example='msg'),
  success?: boolean(name='success', example='success'),
  traceId?: string(name='traceId', description='traceId', example='traceId'),
}

model GetOssUploadParamResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOssUploadParamResponseBody(name='body'),
}

async function getOssUploadParam(request: GetOssUploadParamRequest): GetOssUploadParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssUploadParam', 'GET', '/', 'json', false, 'json', request);
}

model UploadNotaryRequest {
}

model UploadNotaryResponseBody = {
  code?: long(name='code', description='code', example='code'),
  data?: string(name='data', example='[{\\"selected\\": True, \\"able\\": True, \\"multiType\\": \\"multiUnit\\"}, {\\"selected\\": True, \\"able\\": True, \\"multiType\\": \\"multiCell\\"}, {\\"selected\\": False, \\"able\\": True, \\"multiType\\": \\"readMultiUnit\\"}]'),
  detailMsg?: string(name='detailMsg', example='msg'),
  msg?: string(name='msg', example='msg'),
}

model UploadNotaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadNotaryResponseBody(name='body'),
}

async function uploadNotary(request: UploadNotaryRequest): UploadNotaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadNotary', 'POST', '/', 'json', false, 'json', request);
}

