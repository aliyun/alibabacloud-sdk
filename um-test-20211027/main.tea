/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('um-test', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetOssUploadParamRequest {
  appVersion?: string(name='appVersion', description='App版本号'),
  dataSourceId?: string(name='dataSourceId', description='数据源id（appKey)'),
  fileName?: string(name='fileName', description='文件名称，后缀只允许为txt,so,sym,zip,gz'),
  fileType?: int32(name='fileType', description='文件类型(1 mapping文件；2 so文件；3 dSYM文件压缩包)'),
}

model GetOssUploadParamResponseBody = {
  code?: long(name='code', description='code'),
  data?: {
    accessKeyId?: string(name='accessKeyId', description='文件上传表单必要参数'),
    callback?: string(name='callback', description='文件上传表单必要参数'),
    key?: string(name='key', description='文件上传表单必要参数'),
    policy?: string(name='policy', description='文件上传表单必要参数'),
    signature?: string(name='signature', description='文件上传表单必要参数'),
    uploadAddress?: string(name='uploadAddress', description='文件上传地址'),
  }(name='data', description='data'),
  msg?: string(name='msg', description='异常描述'),
  success?: boolean(name='success', description='是否成功'),
  traceId?: string(name='traceId', description='traceId'),
}

model GetOssUploadParamResponse = {
  headers: map[string]string(name='headers'),
  body: GetOssUploadParamResponseBody(name='body'),
}

async function getOssUploadParamWithOptions(request: GetOssUploadParamRequest, runtime: Util.RuntimeOptions): GetOssUploadParamResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetOssUploadParam', '2021-10-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getOssUploadParam(request: GetOssUploadParamRequest): GetOssUploadParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOssUploadParamWithOptions(request, runtime);
}

model GetOssUploadParam2Request {
  appVersion?: string(name='appVersion', description='App版本号'),
  dataSourceId?: string(name='dataSourceId', description='数据源id（appKey)'),
  fileName?: string(name='fileName', description='文件名称，后缀只允许为txt,so,sym,zip,gz'),
  fileType?: int32(name='fileType', description='文件类型(1 mapping文件；2 so文件；3 dSYM文件压缩包)'),
}

model GetOssUploadParam2ResponseBody = {
  requestId?: string(name='RequestId', description='traceId'),
  data?: {
    accessKeyId?: string(name='accessKeyId', description='文件上传表单必要参数'),
    callback?: string(name='callback', description='文件上传表单必要参数'),
    key?: string(name='key', description='文件上传表单必要参数'),
    policy?: string(name='policy', description='文件上传表单必要参数'),
    signature?: string(name='signature', description='文件上传表单必要参数'),
    uploadAddress?: string(name='uploadAddress', description='文件上传地址'),
  }(name='data', description='data'),
}

model GetOssUploadParam2Response = {
  headers: map[string]string(name='headers'),
  body: GetOssUploadParam2ResponseBody(name='body'),
}

async function getOssUploadParam2WithOptions(request: GetOssUploadParam2Request, runtime: Util.RuntimeOptions): GetOssUploadParam2Response {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOssUploadParam2', '2021-10-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOssUploadParam2(request: GetOssUploadParam2Request): GetOssUploadParam2Response {
  var runtime = new Util.RuntimeOptions{};
  return getOssUploadParam2WithOptions(request, runtime);
}

