/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('eds-user', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateUsersRequest {
  users?: [ 
    {
      endUserId?: string(name='EndUserId'),
      email?: string(name='Email'),
      phone?: string(name='Phone'),
    }
  ](name='Users'),
  password?: string(name='Password'),
}

model CreateUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  createResult?: {
    createdUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        email?: string(name='Email'),
      }
    ](name='CreatedUsers'),
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        email?: string(name='Email'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
  }(name='CreateResult'),
}

model CreateUsersResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUsersResponseBody(name='body'),
}

async function createUsersWithOptions(request: CreateUsersRequest, runtime: Util.RuntimeOptions): CreateUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUsers', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUsers(request: CreateUsersRequest): CreateUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUsersWithOptions(request, runtime);
}

model DescribeMfaDevicesRequest {
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  endUserIds?: [ string ](name='EndUserIds'),
  serialNumbers?: [ string ](name='SerialNumbers'),
}

model DescribeMfaDevicesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken'),
  mfaDevices?: [ 
    {
      id?: long(name='Id'),
      endUserId?: string(name='EndUserId'),
      email?: string(name='Email'),
      gmtEnabled?: string(name='GmtEnabled'),
      gmtUnlock?: string(name='GmtUnlock'),
      consecutiveFails?: int32(name='ConsecutiveFails'),
      serialNumber?: string(name='SerialNumber'),
      status?: string(name='Status'),
      deviceType?: string(name='DeviceType'),
    }
  ](name='MfaDevices', description='mfa device list'),
}

model DescribeMfaDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMfaDevicesResponseBody(name='body'),
}

async function describeMfaDevicesWithOptions(request: DescribeMfaDevicesRequest, runtime: Util.RuntimeOptions): DescribeMfaDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMfaDevices', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMfaDevices(request: DescribeMfaDevicesRequest): DescribeMfaDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMfaDevicesWithOptions(request, runtime);
}

model DescribeUsersRequest {
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  filter?: string(name='Filter'),
}

model DescribeUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken'),
  users?: [ 
    {
      id?: long(name='Id'),
      endUserId?: string(name='EndUserId'),
      email?: string(name='Email'),
      phone?: string(name='Phone'),
      status?: long(name='Status'),
    }
  ](name='Users', description='users'),
}

model DescribeUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUsersResponseBody(name='body'),
}

async function describeUsersWithOptions(request: DescribeUsersRequest, runtime: Util.RuntimeOptions): DescribeUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUsers', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersWithOptions(request, runtime);
}

model GetUsersCountResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  userCount?: int32(name='UserCount'),
}

model GetUsersCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetUsersCountResponseBody(name='body'),
}

async function getUsersCountWithOptions(runtime: Util.RuntimeOptions): GetUsersCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetUsersCount', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUsersCount(): GetUsersCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUsersCountWithOptions(runtime);
}

model ImportUsersRequest {
  users?: string(name='Users'),
  emails?: string(name='Emails'),
  password?: string(name='Password'),
  taskId?: string(name='TaskId'),
}

model ImportUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  createResult?: {
    createdUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        email?: string(name='Email'),
      }
    ](name='CreatedUsers'),
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        email?: string(name='Email'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    taskId?: string(name='TaskId'),
    status?: string(name='Status'),
  }(name='CreateResult'),
}

model ImportUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ImportUsersResponseBody(name='body'),
}

async function importUsersWithOptions(request: ImportUsersRequest, runtime: Util.RuntimeOptions): ImportUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportUsers', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importUsers(request: ImportUsersRequest): ImportUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return importUsersWithOptions(request, runtime);
}

model ListUsersRequest {
  filter?: string(name='Filter'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken'),
  users?: [ string ](name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsers', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model LockMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber'),
}

model LockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model LockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: LockMfaDeviceResponseBody(name='body'),
}

async function lockMfaDeviceWithOptions(request: LockMfaDeviceRequest, runtime: Util.RuntimeOptions): LockMfaDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LockMfaDevice', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lockMfaDevice(request: LockMfaDeviceRequest): LockMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockMfaDeviceWithOptions(request, runtime);
}

model LockUsersRequest {
  users?: [ string ](name='Users'),
}

model LockUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  lockUsersResult?: {
    lockedUsers?: [ string ](name='LockedUsers'),
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
  }(name='LockUsersResult'),
}

model LockUsersResponse = {
  headers: map[string]string(name='headers'),
  body: LockUsersResponseBody(name='body'),
}

async function lockUsersWithOptions(request: LockUsersRequest, runtime: Util.RuntimeOptions): LockUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LockUsers', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lockUsers(request: LockUsersRequest): LockUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockUsersWithOptions(request, runtime);
}

model RemoveMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber'),
}

model RemoveMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveMfaDeviceResponseBody(name='body'),
}

async function removeMfaDeviceWithOptions(request: RemoveMfaDeviceRequest, runtime: Util.RuntimeOptions): RemoveMfaDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveMfaDevice', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeMfaDevice(request: RemoveMfaDeviceRequest): RemoveMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeMfaDeviceWithOptions(request, runtime);
}

model RemoveUsersRequest {
  users?: [ string ](name='Users'),
}

model RemoveUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  removeUsersResult?: {
    removedUsers?: [ string ](name='RemovedUsers'),
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
  }(name='RemoveUsersResult'),
}

model RemoveUsersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersResponseBody(name='body'),
}

async function removeUsersWithOptions(request: RemoveUsersRequest, runtime: Util.RuntimeOptions): RemoveUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUsers', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersWithOptions(request, runtime);
}

model ResetUserPasswordRequest {
  users?: [ string ](name='Users'),
}

model ResetUserPasswordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  resetUsersResult?: {
    resetUsers?: [ string ](name='ResetUsers'),
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
  }(name='ResetUsersResult'),
}

model ResetUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetUserPasswordResponseBody(name='body'),
}

async function resetUserPasswordWithOptions(request: ResetUserPasswordRequest, runtime: Util.RuntimeOptions): ResetUserPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetUserPassword', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetUserPasswordWithOptions(request, runtime);
}

model UnlockMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber'),
}

model UnlockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UnlockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockMfaDeviceResponseBody(name='body'),
}

async function unlockMfaDeviceWithOptions(request: UnlockMfaDeviceRequest, runtime: Util.RuntimeOptions): UnlockMfaDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnlockMfaDevice', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unlockMfaDevice(request: UnlockMfaDeviceRequest): UnlockMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockMfaDeviceWithOptions(request, runtime);
}

model UnlockUsersRequest {
  users?: [ string ](name='Users'),
}

model UnlockUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  unlockUsersResult?: {
    unlockedUsers?: [ string ](name='UnlockedUsers'),
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
  }(name='UnlockUsersResult'),
}

model UnlockUsersResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockUsersResponseBody(name='body'),
}

async function unlockUsersWithOptions(request: UnlockUsersRequest, runtime: Util.RuntimeOptions): UnlockUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnlockUsers', '2021-03-08', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unlockUsers(request: UnlockUsersRequest): UnlockUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockUsersWithOptions(request, runtime);
}

