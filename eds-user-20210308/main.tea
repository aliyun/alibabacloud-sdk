/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('eds-user', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model WaIdPermissions {
  code?: string(name='Code'),
  isBasicChild?: boolean(name='IsBasicChild'),
  name?: string(name='Name'),
  subPermissions?: [
    WaIdPermissions
  ](name='SubPermissions'),
  type?: string(name='Type'),
}

model CheckUsedPropertyRequest {
  propertyId?: long(name='PropertyId', example='390'),
}

model CheckUsedPropertyResponseBody = {
  requestId?: string(name='RequestId', example='22C97624-2405-54AC-BD44-A63FBE97CC2D'),
  useCount?: long(name='UseCount', example='7'),
}

model CheckUsedPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckUsedPropertyResponseBody(name='body'),
}

async function checkUsedPropertyWithOptions(request: CheckUsedPropertyRequest, runtime: Util.RuntimeOptions): CheckUsedPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.propertyId)) {
    query['PropertyId'] = request.propertyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUsedProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkUsedProperty(request: CheckUsedPropertyRequest): CheckUsedPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUsedPropertyWithOptions(request, runtime);
}

model CheckUsedPropertyValueRequest {
  propertyId?: long(name='PropertyId', description='The ID of the property.', example='380'),
  propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='978'),
}

model CheckUsedPropertyValueResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  useCount?: long(name='UseCount', description='The number of convenience users that are associated with the property value.', example='1'),
}

model CheckUsedPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckUsedPropertyValueResponseBody(name='body'),
}

/**
  * Before you call the operation, you can call the [ListProperty](~~410890~~) operation to query the existing user properties and their IDs (PropertyId) and values (PropertyValueId).
  *
  * @param request CheckUsedPropertyValueRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CheckUsedPropertyValueResponse
 */
async function checkUsedPropertyValueWithOptions(request: CheckUsedPropertyValueRequest, runtime: Util.RuntimeOptions): CheckUsedPropertyValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.propertyId)) {
    query['PropertyId'] = request.propertyId;
  }
  if (!Util.isUnset(request.propertyValueId)) {
    query['PropertyValueId'] = request.propertyValueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUsedPropertyValue',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call the operation, you can call the [ListProperty](~~410890~~) operation to query the existing user properties and their IDs (PropertyId) and values (PropertyValueId).
  *
  * @param request CheckUsedPropertyValueRequest
  * @return CheckUsedPropertyValueResponse
 */
async function checkUsedPropertyValue(request: CheckUsedPropertyValueRequest): CheckUsedPropertyValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUsedPropertyValueWithOptions(request, runtime);
}

model CreatePropertyRequest {
  propertyKey?: string(name='PropertyKey', example='department'),
  propertyValues?: [ string ](name='PropertyValues'),
}

model CreatePropertyResponseBody = {
  createResult?: {
    propertyId?: long(name='PropertyId', example='390'),
    propertyKey?: string(name='PropertyKey', example='department'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode', example='ExistedPropertyValue'),
          errorMessage?: string(name='ErrorMessage', example='The property value is used by another property.'),
          propertyId?: long(name='PropertyId', example='390'),
          propertyValue?: string(name='PropertyValue', example='HR'),
        }
      ](name='FailedPropertyValues'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', example='HR'),
          propertyValueId?: long(name='PropertyValueId', example='978'),
        }
      ](name='SavePropertyValues'),
    }(name='SavePropertyValueModel'),
  }(name='CreateResult'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreatePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePropertyResponseBody(name='body'),
}

async function createPropertyWithOptions(request: CreatePropertyRequest, runtime: Util.RuntimeOptions): CreatePropertyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyKey)) {
    body['PropertyKey'] = request.propertyKey;
  }
  if (!Util.isUnset(request.propertyValues)) {
    body['PropertyValues'] = request.propertyValues;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProperty(request: CreatePropertyRequest): CreatePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPropertyWithOptions(request, runtime);
}

model CreateUsersRequest {
  autoLockTime?: string(name='AutoLockTime'),
  password?: string(name='Password', description='The initial password. If this parameter is left empty, an email for password reset is sent to the specified email address.', example='Test123****'),
  users?: [ 
    {
      email?: string(name='Email', description='The email address of the end user. The email address is used to receive notifications about events such as desktop assignment. You must specify an email address or a mobile number to receive notifications.', example='username@example.com'),
      endUserId?: string(name='EndUserId', description='The name of the end user. The name must be 3 to 24 characters in length, and can contain lowercase letters, digits, and underscores (\\_).', example='test1'),
      orgId?: string(name='OrgId', description='The organization to which the end user belongs.', example='1111****'),
      ownerType?: string(name='OwnerType', description='The type of the account ownership.', example='Normal'),
      password?: string(name='Password', description='The password of the end user.', example='password1'),
      phone?: string(name='Phone', description='Mobile numbers are not supported on the international site (alibabacloud.com).', example='1381111****'),
      remark?: string(name='Remark', description='The remarks of the end user.', example='remark1'),
    }
  ](name='Users', description='Details of the convenience users.', example='CreateUsers'),
}

model CreateUsersResponseBody = {
  createResult?: {
    createdUsers?: [ 
      {
        email?: string(name='Email', description='The email address of the end user.', example='username@example.com'),
        endUserId?: string(name='EndUserId', description='The name of the end user.', example='test1'),
        phone?: string(name='Phone', description='The mobile number of the end user.', example='1381111****'),
        remark?: string(name='Remark', description='The remarks of the end user.', example='remark1'),
      }
    ](name='CreatedUsers', description='Details of the created convenience users.'),
    failedUsers?: [ 
      {
        email?: string(name='Email', description='The email address of the end user.', example='username2@example.com'),
        endUserId?: string(name='EndUserId', description='The name of the end user.', example='test2'),
        errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='ExistedEndUserId'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The username test is used by another user.'),
        phone?: string(name='Phone', description='The mobile number of the end user.', example='1390000****'),
      }
    ](name='FailedUsers', description='Details of the convenience users that failed to be created.'),
  }(name='CreateResult', description='The result of user creation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUsersResponseBody(name='body'),
}

/**
  * Convenience users are dedicated Elastic Desktop Service (EDS) user accounts and are suitable for scenarios in which you do not need to connect to enterprise Active Directory (AD) systems. The information about a convenience user includes the username, email address, and mobile number. You must specify the username or email address.
  *
  * @param request CreateUsersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateUsersResponse
 */
async function createUsersWithOptions(request: CreateUsersRequest, runtime: Util.RuntimeOptions): CreateUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoLockTime)) {
    query['AutoLockTime'] = request.autoLockTime;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Convenience users are dedicated Elastic Desktop Service (EDS) user accounts and are suitable for scenarios in which you do not need to connect to enterprise Active Directory (AD) systems. The information about a convenience user includes the username, email address, and mobile number. You must specify the username or email address.
  *
  * @param request CreateUsersRequest
  * @return CreateUsersResponse
 */
async function createUsers(request: CreateUsersRequest): CreateUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUsersWithOptions(request, runtime);
}

model DeleteUserPropertyValueRequest {
  propertyId?: long(name='PropertyId', description='DeleteUserPropertyValue', example='390'),
  propertyValueId?: long(name='PropertyValueId', example='978'),
  userId?: long(name='UserId', description='Dissociates a user property from a user.', example='123'),
}

model DeleteUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId', example='D6C62E40-F937-5803-B008-92E813399BA5'),
}

model DeleteUserPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserPropertyValueResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **DeleteUserPropertyValue**.
  *
  * @param request DeleteUserPropertyValueRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteUserPropertyValueResponse
 */
async function deleteUserPropertyValueWithOptions(request: DeleteUserPropertyValueRequest, runtime: Util.RuntimeOptions): DeleteUserPropertyValueResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyId)) {
    body['PropertyId'] = request.propertyId;
  }
  if (!Util.isUnset(request.propertyValueId)) {
    body['PropertyValueId'] = request.propertyValueId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserPropertyValue',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **DeleteUserPropertyValue**.
  *
  * @param request DeleteUserPropertyValueRequest
  * @return DeleteUserPropertyValueResponse
 */
async function deleteUserPropertyValue(request: DeleteUserPropertyValueRequest): DeleteUserPropertyValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserPropertyValueWithOptions(request, runtime);
}

model DescribeMfaDevicesRequest {
  adDomain?: string(name='AdDomain'),
  endUserIds?: [ string ](name='EndUserIds', description='The list of username of convenience users.', example='test'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries to return. Valid values: 1 to 500.

Default value: 100.', example='100'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value returned in the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  serialNumbers?: [ string ](name='SerialNumbers', description='The list of serial numbers of the virtual MFA devices.', example='c2d9ae94-a64b-4a0d-8024-9519ca50****'),
}

model DescribeMfaDevicesResponseBody = {
  mfaDevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails', description='The number of consecutive failures to bind the virtual MFA device, or the number of MFA failures based on the virtual MFA device.', example='0'),
      deviceType?: string(name='DeviceType', description='The types of the virtual MFA device. Set the value to TOTP_VIRTUAL, which indicates that the virtual MFA devices follow the Time-based One-time Password (TOTP) algorithm.', example='TOTP_VIRTUAL'),
      email?: string(name='Email', description='This parameter is unavailable.', example='username@example.com'),
      endUserId?: string(name='EndUserId', description='The username of the convenience user that uses the virtual MFA device.', example='test'),
      gmtEnabled?: string(name='GmtEnabled', description='The time when the virtual MFA device was enabled. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-06-22T06:20:49Z'),
      gmtUnlock?: string(name='GmtUnlock', description='The time when a locked virtual MFA device is automatically unlocked. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-06-23T06:20:49Z'),
      id?: long(name='Id', description='This parameter is unavailable.', example='36'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.', example='dc856334-446b-4035-bfbc-18af261e****'),
      status?: string(name='Status', description='The status of the virtual MFA device. Valid values:

*   UNBOUND
*   NORMAL
*   LOCKED', example='NORMAL'),
    }
  ](name='MfaDevices', description='Details about the virtual MFA devices.'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='AAAAAV3MpHK1AP0pfERHZN5pu6na6YlN9asMM31MsMcdQNpp'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='33DBB8EC-6E68-4726-91C4-E09C59D9A7D8'),
}

model DescribeMfaDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMfaDevicesResponseBody(name='body'),
}

async function describeMfaDevicesWithOptions(request: DescribeMfaDevicesRequest, runtime: Util.RuntimeOptions): DescribeMfaDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.serialNumbers)) {
    query['SerialNumbers'] = request.serialNumbers;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMfaDevices',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMfaDevices(request: DescribeMfaDevicesRequest): DescribeMfaDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMfaDevicesWithOptions(request, runtime);
}

model DescribeUsersRequest {
  bizType?: string(name='BizType'),
  endUserIds?: [ string ](name='EndUserIds', description='The list of usernames that must be exactly matched.'),
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds', description='The list of usernames to be exactly excluded.'),
  filter?: string(name='Filter', description='The string that is used for fuzzy search. You perform fuzzy search by username (EndUserId) and email address (Email). Wildcard characters (\\*) are supported. For example, if you set this parameter to `a*m`, usernames or email addresses that start with `a` and end with `m` are returned.', example='a*m'),
  groupId?: string(name='GroupId'),
  maxResults?: long(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 500
*   Default value: 500', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.\\
If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the return value of NextToken to perform the next query.', example='caeba0bbb2be03f84eb48b699f0a****'),
  orgId?: string(name='OrgId', description='The ID of the organization in which you want to query users.', example='org-4mdgc1cocc59z****'),
  solutionId?: string(name='SolutionId'),
}

model DescribeUsersResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ 
    {
      address?: string(name='Address'),
      avatar?: string(name='Avatar'),
      email?: string(name='Email', description='The email address.', example='username@example.com'),
      endUserId?: string(name='EndUserId', description='The name of the user.', example='alice'),
      groups?: [ 
        {
          groupId?: string(name='GroupId'),
          groupName?: string(name='GroupName'),
        }
      ](name='Groups'),
      id?: long(name='Id', description='The ID of the user.', example='4205**'),
      isTenantManager?: boolean(name='IsTenantManager', description='Indicates whether the user is an administrator. If the convenience user is of the administrator-activated type, you must specify a user administrator. Notifications such as password reset on a client are sent to the email address or mobile phone of the user administrator. For more information, see [Create a convenience user](~~214472~~).', example='true'),
      jobNumber?: string(name='JobNumber'),
      nickName?: string(name='NickName', description='The nickname of the user.', example='Lee'),
      orgId?: string(name='OrgId', description='The ID of the organization to which the user belongs.', example='org-4mdgc1cocc59z****'),
      orgs?: [ 
        {
          orgId?: string(name='OrgId'),
          orgName?: string(name='OrgName'),
        }
      ](name='Orgs'),
      ownerType?: string(name='OwnerType', description='The type of the convenience account.

*   The administrator-activated type. The administrator specifies the username and the password of the convenience account. User notifications such as password reset are sent to the email address or mobile number of the administrator.
*   The user-activated type. The administrator specifies the username and the email address or mobile number of a user. Activation notifications are sent to the email address or mobile number of the user.

Valid values:

*   CreateFromManager

    <!-- -->

    :

    <!-- -->

    administrator-activated

    <!-- -->

*   Normal: user-activated

    <!-- -->

    <!-- -->

    <!-- -->', example='Normal'),
      phone?: string(name='Phone', description='The mobile number of the user. If you leave this parameter empty, the value of this parameter is not returned.', example='1381111****'),
      remark?: string(name='Remark', description='The remarks on the user.'),
      status?: long(name='Status', description='The status of the user.', example='0'),
      wyId?: string(name='WyId', description='The user ID that is globally unique.', example='41fd1254d8f7****'),
    }
  ](name='Users', description='Details of the convenience users.'),
}

model DescribeUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsersResponseBody(name='body'),
}

async function describeUsersWithOptions(request: DescribeUsersRequest, runtime: Util.RuntimeOptions): DescribeUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizType)) {
    body['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.endUserIds)) {
    body['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.excludeEndUserIds)) {
    body['ExcludeEndUserIds'] = request.excludeEndUserIds;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.orgId)) {
    body['OrgId'] = request.orgId;
  }
  if (!Util.isUnset(request.solutionId)) {
    body['SolutionId'] = request.solutionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersWithOptions(request, runtime);
}

model FilterUsersRequest {
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds', description='The list of usernames to be precisely excluded.'),
  filter?: string(name='Filter', description='The string that is used for fuzzy search. You can use usernames and email addresses to perform fuzzy search. Wildcard characters (\\*) are supported for this parameter. For example, if you set this parameter to a\\*m, the usernames or an email addresses that start with a or end with m are returned.', example='test'),
  includeDesktopCount?: boolean(name='IncludeDesktopCount', description='Specifies whether to return information about cloud desktops that are assigned to the convenience user.', example='true'),
  includeDesktopGroupCount?: boolean(name='IncludeDesktopGroupCount', description='Specifies whether to return the number of desktop groups that are assigned to the user.', example='false'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. If you set this parameter to a value greater than 100, the system resets the value to 100.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the returned NextToken value to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  orderParam?: {
    orderField?: string(name='OrderField', description='The way to sort query results.

Valid values:

*   EndUserId

    <!-- -->

    <!-- -->

    <!-- -->

*   id

    <!-- -->

    <!-- -->

    <!-- -->

*   gmt_created

    <!-- -->

    <!-- -->

    <!-- -->', example='id'),
    orderType?: string(name='OrderType', description='Specifies whether to sort query results in ascending or descending order. Valid values:

Valid values:

*   ASC: ascending

    <!-- -->

    <!-- -->

    <!-- -->

*   DESC (default): descending

    <!-- -->

    <!-- -->

    <!-- -->', example='ASC'),
  }(name='OrderParam', description='The parameter that supports to sort query results.'),
  orgId?: string(name='OrgId', description='The ID of the organization.', example='org-aliyun-wy-org-id'),
  ownerType?: string(name='OwnerType', description='The type of the account ownership.', example='Normal'),
  propertyFilterParam?: [ 
    {
      propertyId?: long(name='PropertyId', description='The ID of the property.', example='123'),
      propertyValueIds?: string(name='PropertyValueIds', description='The IDs of the property values.', example='test'),
    }
  ](name='PropertyFilterParam', description='The list of properties for fuzzy search.'),
  propertyKeyValueFilterParam?: [ 
    {
      propertyKey?: string(name='PropertyKey', description='The property name.', example='job'),
      propertyValues?: string(name='PropertyValues', description='The property values.', example='dev'),
    }
  ](name='PropertyKeyValueFilterParam', description='The list of property names and property values.'),
}

model FilterUsersShrinkRequest {
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds', description='The list of usernames to be precisely excluded.'),
  filter?: string(name='Filter', description='The string that is used for fuzzy search. You can use usernames and email addresses to perform fuzzy search. Wildcard characters (\\*) are supported for this parameter. For example, if you set this parameter to a\\*m, the usernames or an email addresses that start with a or end with m are returned.', example='test'),
  includeDesktopCount?: boolean(name='IncludeDesktopCount', description='Specifies whether to return information about cloud desktops that are assigned to the convenience user.', example='true'),
  includeDesktopGroupCount?: boolean(name='IncludeDesktopGroupCount', description='Specifies whether to return the number of desktop groups that are assigned to the user.', example='false'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. If you set this parameter to a value greater than 100, the system resets the value to 100.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the returned NextToken value to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  orderParamShrink?: string(name='OrderParam', description='The parameter that supports to sort query results.'),
  orgId?: string(name='OrgId', description='The ID of the organization.', example='org-aliyun-wy-org-id'),
  ownerType?: string(name='OwnerType', description='The type of the account ownership.', example='Normal'),
  propertyFilterParam?: [ 
    {
      propertyId?: long(name='PropertyId', description='The ID of the property.', example='123'),
      propertyValueIds?: string(name='PropertyValueIds', description='The IDs of the property values.', example='test'),
    }
  ](name='PropertyFilterParam', description='The list of properties for fuzzy search.'),
  propertyKeyValueFilterParam?: [ 
    {
      propertyKey?: string(name='PropertyKey', description='The property name.', example='job'),
      propertyValues?: string(name='PropertyValues', description='The property values.', example='dev'),
    }
  ](name='PropertyKeyValueFilterParam', description='The list of property names and property values.'),
}

model FilterUsersResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the returned NextToken value to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='DBD276B5-00FF-5E04-8EF7-5CBA09BF112A'),
  users?: [ 
    {
      desktopCount?: long(name='DesktopCount', description='The number of cloud desktops that are assigned to the user.', example='1'),
      desktopGroupCount?: long(name='DesktopGroupCount', description='The number of authorized desktop groups that are owned by the user. This value is returned if you set `IncludeDesktopGroupCount` to `true`.', example='2'),
      email?: string(name='Email', description='The email address.', example='testName@example.com'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', description='Indicates whether the user is a local administrator.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
      endUserId?: string(name='EndUserId', description='The username.', example='testName'),
      externalInfo?: {
        externalName?: string(name='ExternalName', description='The account that is connected to the user.', example='test'),
        jobNumber?: string(name='JobNumber', description='The account, student ID, or employee ID that is connected to the user.', example='030801'),
      }(name='ExternalInfo', description='The additional information about the user.'),
      id?: long(name='Id', description='The user ID.', example='12345'),
      isTenantManager?: boolean(name='IsTenantManager', description='Indicates whether the user is a tenant administrator.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
      ownerType?: string(name='OwnerType', description='The type of the account ownership.

Valid values:

*   CreateFromManager

    <!-- -->

    :

    <!-- -->

    administrator-activated

    <!-- -->

*   Normal

    <!-- -->

    :

    <!-- -->

    user-activated

    <!-- -->', example='Normal'),
      phone?: string(name='Phone', description='The mobile number.', example='1381111****'),
      realNickName?: string(name='RealNickName'),
      remark?: string(name='Remark', description='The remarks.', example='1'),
      status?: long(name='Status', description='The user status.

Valid values:

*   0: The user status is normal.

    <!-- -->

    <!-- -->

    <!-- -->

*   9: The user is locked.

    <!-- -->

    <!-- -->

    <!-- -->', example='0'),
      userSetPropertiesModels?: [ 
        {
          propertyId?: long(name='PropertyId', description='The property ID.', example='12'),
          propertyKey?: string(name='PropertyKey', description='The property name.', example='department'),
          propertyType?: int32(name='PropertyType', description='The property ID.', example='2'),
          propertyValues?: [ 
            {
              propertyValue?: string(name='PropertyValue', description='The property value.', example='A'),
              propertyValueId?: long(name='PropertyValueId', description='The property value ID.', example='42'),
            }
          ](name='PropertyValues', description='The property value.'),
          userId?: long(name='UserId', description='The ID of the user that is bound to the property.', example='12345'),
          userName?: string(name='UserName', description='The name of the user that is bound to the property.', example='testName'),
        }
      ](name='UserSetPropertiesModels', description='Details of the properties.'),
    }
  ](name='Users', description='Details of the convenience users.'),
}

model FilterUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FilterUsersResponseBody(name='body'),
}

async function filterUsersWithOptions(tmpReq: FilterUsersRequest, runtime: Util.RuntimeOptions): FilterUsersResponse {
  Util.validateModel(tmpReq);
  var request = new FilterUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.orderParam)) {
    request.orderParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderParam, 'OrderParam', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.excludeEndUserIds)) {
    query['ExcludeEndUserIds'] = request.excludeEndUserIds;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.includeDesktopCount)) {
    query['IncludeDesktopCount'] = request.includeDesktopCount;
  }
  if (!Util.isUnset(request.includeDesktopGroupCount)) {
    query['IncludeDesktopGroupCount'] = request.includeDesktopGroupCount;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderParamShrink)) {
    query['OrderParam'] = request.orderParamShrink;
  }
  if (!Util.isUnset(request.orgId)) {
    query['OrgId'] = request.orgId;
  }
  if (!Util.isUnset(request.ownerType)) {
    query['OwnerType'] = request.ownerType;
  }
  if (!Util.isUnset(request.propertyFilterParam)) {
    query['PropertyFilterParam'] = request.propertyFilterParam;
  }
  if (!Util.isUnset(request.propertyKeyValueFilterParam)) {
    query['PropertyKeyValueFilterParam'] = request.propertyKeyValueFilterParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FilterUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function filterUsers(request: FilterUsersRequest): FilterUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return filterUsersWithOptions(request, runtime);
}

model GetManagerInfoByAuthCodeRequest {
  authCode?: string(name='AuthCode', example='e49cd070452f0044813a467d4743****'),
}

model GetManagerInfoByAuthCodeResponseBody = {
  orgId?: string(name='OrgId', example='12345678901234****'),
  phone?: string(name='Phone', example='1301234****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  teamName?: string(name='TeamName', example='devteam'),
  userName?: string(name='UserName', example='zhangsan'),
  waId?: long(name='WaId', example='12345678901234****'),
}

model GetManagerInfoByAuthCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetManagerInfoByAuthCodeResponseBody(name='body'),
}

async function getManagerInfoByAuthCodeWithOptions(request: GetManagerInfoByAuthCodeRequest, runtime: Util.RuntimeOptions): GetManagerInfoByAuthCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetManagerInfoByAuthCode',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getManagerInfoByAuthCode(request: GetManagerInfoByAuthCodeRequest): GetManagerInfoByAuthCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getManagerInfoByAuthCodeWithOptions(request, runtime);
}

model ListPropertyResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results have been returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  properties?: [ 
    {
      propertyId?: long(name='PropertyId', description='The ID of the property.', example='30'),
      propertyKey?: string(name='PropertyKey', description='The name of the property.', example='department'),
      propertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', description='The value of the property.', example='A'),
          propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='42'),
        }
      ](name='PropertyValues', description='Details about the property values.'),
    }
  ](name='Properties', description='The information about the properties.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPropertyResponseBody(name='body'),
}

async function listPropertyWithOptions(runtime: Util.RuntimeOptions): ListPropertyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProperty(): ListPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPropertyWithOptions(runtime);
}

model ListPropertyValueRequest {
  propertyId?: long(name='PropertyId', description='The ID of the property. You can call the [ListProperty](~~410890~~) operation to query the property ID.', example='390'),
}

model ListPropertyValueResponseBody = {
  propertyValueInfos?: [ 
    {
      propertyValue?: string(name='PropertyValue', description='The value of the property.', example='HR'),
      propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='978'),
    }
  ](name='PropertyValueInfos', description='Details about property values.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C52013A5-3422-5D1F-B22C-A57110972AD9'),
}

model ListPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPropertyValueResponseBody(name='body'),
}

async function listPropertyValueWithOptions(request: ListPropertyValueRequest, runtime: Util.RuntimeOptions): ListPropertyValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.propertyId)) {
    query['PropertyId'] = request.propertyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPropertyValue',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPropertyValue(request: ListPropertyValueRequest): ListPropertyValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPropertyValueWithOptions(request, runtime);
}

model LockMfaDeviceRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) workspace.', example='pg-jifenn.com'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.', example='dc856334-446b-4035-bfbc-18af261e****'),
}

model LockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='42FE70D8-4336-471B-8314-CCCFCE4159FD'),
}

model LockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockMfaDeviceResponseBody(name='body'),
}

/**
  * ## Description
  * After a virtual MFA device is locked, the status of the virtual MFA device changes to LOCKED. The convenience user to which the MFA device is bound cannot log on to the cloud desktop that resides in the workspace with the MFA feature enabled because the convenience user will fail authentication based on the virtual MFA device. You can call the UnlockMfaDevice operation to unlock the virtual MFA device.
  *
  * @param request LockMfaDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return LockMfaDeviceResponse
 */
async function lockMfaDeviceWithOptions(request: LockMfaDeviceRequest, runtime: Util.RuntimeOptions): LockMfaDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LockMfaDevice',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * After a virtual MFA device is locked, the status of the virtual MFA device changes to LOCKED. The convenience user to which the MFA device is bound cannot log on to the cloud desktop that resides in the workspace with the MFA feature enabled because the convenience user will fail authentication based on the virtual MFA device. You can call the UnlockMfaDevice operation to unlock the virtual MFA device.
  *
  * @param request LockMfaDeviceRequest
  * @return LockMfaDeviceResponse
 */
async function lockMfaDevice(request: LockMfaDeviceRequest): LockMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockMfaDeviceWithOptions(request, runtime);
}

model LockUsersRequest {
  users?: [ string ](name='Users', example='test1'),
}

model LockUsersResponseBody = {
  lockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', example='test123'),
        errorCode?: string(name='ErrorCode', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers'),
    lockedUsers?: [ string ](name='LockedUsers'),
  }(name='LockUsersResult'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LockUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockUsersResponseBody(name='body'),
}

async function lockUsersWithOptions(request: LockUsersRequest, runtime: Util.RuntimeOptions): LockUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LockUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function lockUsers(request: LockUsersRequest): LockUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockUsersWithOptions(request, runtime);
}

model ModifyUserRequest {
  email?: string(name='Email', example='username@example.com'),
  endUserId?: string(name='EndUserId', example='Alice'),
  phone?: string(name='Phone', example='1381111****'),
}

model ModifyUserResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUserResponseBody(name='body'),
}

async function modifyUserWithOptions(request: ModifyUserRequest, runtime: Util.RuntimeOptions): ModifyUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUser',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserWithOptions(request, runtime);
}

model QuerySyncStatusByAliUidResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    aliUid?: long(name='AliUid', example='131239236086****'),
    corpId?: string(name='CorpId', example='cdrs948144195608****'),
    gmtCreated?: string(name='GmtCreated', example='2020-06-30 07:50:42'),
    gmtModified?: string(name='GmtModified', example='2022-03-02 14:27:39'),
    id?: long(name='Id', example='18500'),
    latestBeginTime?: string(name='LatestBeginTime', example='2022-03-02 14:31:39'),
    latestEndTime?: string(name='LatestEndTime', example='2022-03-02 16:13:12'),
    latestSuccessTime?: string(name='LatestSuccessTime', example='2022-03-02 18:24:01'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='True'),
}

model QuerySyncStatusByAliUidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySyncStatusByAliUidResponseBody(name='body'),
}

async function querySyncStatusByAliUidWithOptions(runtime: Util.RuntimeOptions): QuerySyncStatusByAliUidResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QuerySyncStatusByAliUid',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySyncStatusByAliUid(): QuerySyncStatusByAliUidResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySyncStatusByAliUidWithOptions(runtime);
}

model RemoveMfaDeviceRequest {
  adDomain?: string(name='AdDomain'),
  serialNumber?: string(name='SerialNumber', example='dc856334-446b-4035-bfbc-18af261e****'),
}

model RemoveMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', example='FB550AAB-FB36-4A91-93F6-F4374AF65403'),
}

model RemoveMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveMfaDeviceResponseBody(name='body'),
}

async function removeMfaDeviceWithOptions(request: RemoveMfaDeviceRequest, runtime: Util.RuntimeOptions): RemoveMfaDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveMfaDevice',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeMfaDevice(request: RemoveMfaDeviceRequest): RemoveMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeMfaDeviceWithOptions(request, runtime);
}

model RemovePropertyRequest {
  propertyId?: long(name='PropertyId', example='390'),
}

model RemovePropertyResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemovePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemovePropertyResponseBody(name='body'),
}

async function removePropertyWithOptions(request: RemovePropertyRequest, runtime: Util.RuntimeOptions): RemovePropertyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyId)) {
    body['PropertyId'] = request.propertyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeProperty(request: RemovePropertyRequest): RemovePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePropertyWithOptions(request, runtime);
}

model RemoveUsersRequest {
  users?: [ string ](name='Users', example='test1'),
}

model RemoveUsersResponseBody = {
  removeUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', example='test2'),
        errorCode?: string(name='ErrorCode', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', example='test2 is an invalid username.'),
      }
    ](name='FailedUsers'),
    removedUsers?: [ string ](name='RemovedUsers'),
  }(name='RemoveUsersResult'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemoveUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUsersResponseBody(name='body'),
}

async function removeUsersWithOptions(request: RemoveUsersRequest, runtime: Util.RuntimeOptions): RemoveUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersWithOptions(request, runtime);
}

model ResetUserPasswordRequest {
  notifyType?: int32(name='NotifyType', description='The method to notify the user after the password is reset.', example='1'),
  users?: [ string ](name='Users', description='The names of the convenience users whose passwords you want to reset.', example='test1'),
}

model ResetUserPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='32D05B39-E6EE-4D7A-9FD0-762A26859D0D'),
  resetUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', description='The ID of the convenience user whose password failed to be reset.', example='test123'),
        errorCode?: string(name='ErrorCode', description='The error code.', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', description='The error message.', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers', description='The information about the convenience users whose passwords failed to be reset.'),
    resetUsers?: [ string ](name='ResetUsers', description='The convenience users to which the system sent a password reset email.'),
  }(name='ResetUsersResult', description='The result of resetting the password of the convenience user.'),
}

model ResetUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetUserPasswordResponseBody(name='body'),
}

async function resetUserPasswordWithOptions(request: ResetUserPasswordRequest, runtime: Util.RuntimeOptions): ResetUserPasswordResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.notifyType)) {
    body['NotifyType'] = request.notifyType;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetUserPassword',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetUserPasswordWithOptions(request, runtime);
}

model SetUserPropertyValueRequest {
  propertyId?: long(name='PropertyId', example='390'),
  propertyValueId?: long(name='PropertyValueId', example='978'),
  userId?: long(name='UserId', description='Associates a user property with a user.', example='11'),
  userName?: string(name='UserName', description='SetUserPropertyValue', example='test'),
}

model SetUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetUserPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetUserPropertyValueResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request SetUserPropertyValueRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetUserPropertyValueResponse
 */
async function setUserPropertyValueWithOptions(request: SetUserPropertyValueRequest, runtime: Util.RuntimeOptions): SetUserPropertyValueResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyId)) {
    body['PropertyId'] = request.propertyId;
  }
  if (!Util.isUnset(request.propertyValueId)) {
    body['PropertyValueId'] = request.propertyValueId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetUserPropertyValue',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request SetUserPropertyValueRequest
  * @return SetUserPropertyValueResponse
 */
async function setUserPropertyValue(request: SetUserPropertyValueRequest): SetUserPropertyValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return setUserPropertyValueWithOptions(request, runtime);
}

model SyncAllEduInfoResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='True'),
}

model SyncAllEduInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncAllEduInfoResponseBody(name='body'),
}

async function syncAllEduInfoWithOptions(runtime: Util.RuntimeOptions): SyncAllEduInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'SyncAllEduInfo',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncAllEduInfo(): SyncAllEduInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncAllEduInfoWithOptions(runtime);
}

model UnlockMfaDeviceRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) workspace.', example='welab.co.id'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.', example='dc856334-446b-4035-bfbc-18af261e****'),
}

model UnlockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9BD39C60-4E38-43BE-BA2F-69136C6C5190'),
}

model UnlockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockMfaDeviceResponseBody(name='body'),
}

async function unlockMfaDeviceWithOptions(request: UnlockMfaDeviceRequest, runtime: Util.RuntimeOptions): UnlockMfaDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnlockMfaDevice',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockMfaDevice(request: UnlockMfaDeviceRequest): UnlockMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockMfaDeviceWithOptions(request, runtime);
}

model UnlockUsersRequest {
  autoLockTime?: string(name='AutoLockTime'),
  users?: [ string ](name='Users', example='test1'),
}

model UnlockUsersResponseBody = {
  requestId?: string(name='RequestId', example='023F4EC4-3602-4A3E-A514-4970847D59DB'),
  unlockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', example='test123'),
        errorCode?: string(name='ErrorCode', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers'),
    unlockedUsers?: [ string ](name='UnlockedUsers'),
  }(name='UnlockUsersResult'),
}

model UnlockUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockUsersResponseBody(name='body'),
}

async function unlockUsersWithOptions(request: UnlockUsersRequest, runtime: Util.RuntimeOptions): UnlockUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoLockTime)) {
    query['AutoLockTime'] = request.autoLockTime;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnlockUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockUsers(request: UnlockUsersRequest): UnlockUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockUsersWithOptions(request, runtime);
}

model UpdatePropertyRequest {
  propertyId?: long(name='PropertyId', description='The ID of the property that you want to modify. You can call the [ListProperty](~~410890~~) operation to query the property ID.', example='390'),
  propertyKey?: string(name='PropertyKey', description='The new property name.', example='testkey'),
  propertyValues?: [ 
    {
      propertyValue?: string(name='PropertyValue', description='The new property value.', example='testvalue'),
      propertyValueId?: long(name='PropertyValueId', description='The ID of property value that you want to modify. You can call the [ListProperty](~~410890~~) operation to query the property value ID.', example='978'),
    }
  ](name='PropertyValues', description='The values of property.'),
}

model UpdatePropertyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  updateResult?: {
    propertyId?: long(name='PropertyId', description='The ID of the property.', example='390'),
    propertyKey?: string(name='PropertyKey', description='The name of the property.', example='testkey2'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code.', example='ExistedPropertyValue'),
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='The property value is used by another property.'),
          propertyId?: long(name='PropertyId', description='The ID of the property.', example='390'),
          propertyValue?: string(name='PropertyValue', description='The value of the property.', example='testvalue'),
        }
      ](name='FailedPropertyValues', description='The property values that failed to be modified.'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', description='The value of the property.', example='testvalue2'),
          propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='978'),
        }
      ](name='SavePropertyValues', description='The property values that were modified.'),
    }(name='SavePropertyValueModel', description='The result of the property value modification.'),
  }(name='UpdateResult', description='The result of the modification.'),
}

model UpdatePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePropertyResponseBody(name='body'),
}

async function updatePropertyWithOptions(request: UpdatePropertyRequest, runtime: Util.RuntimeOptions): UpdatePropertyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyId)) {
    body['PropertyId'] = request.propertyId;
  }
  if (!Util.isUnset(request.propertyKey)) {
    body['PropertyKey'] = request.propertyKey;
  }
  if (!Util.isUnset(request.propertyValues)) {
    body['PropertyValues'] = request.propertyValues;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProperty(request: UpdatePropertyRequest): UpdatePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePropertyWithOptions(request, runtime);
}

