/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('eds-user', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CheckUsedPropertyRequest {
  propertyId?: long(name='PropertyId'),
}

model CheckUsedPropertyResponseBody = {
  requestId?: string(name='RequestId'),
  useCount?: long(name='UseCount'),
}

model CheckUsedPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckUsedPropertyResponseBody(name='body'),
}

async function checkUsedPropertyWithOptions(request: CheckUsedPropertyRequest, runtime: Util.RuntimeOptions): CheckUsedPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.propertyId)) {
    query['PropertyId'] = request.propertyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUsedProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkUsedProperty(request: CheckUsedPropertyRequest): CheckUsedPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUsedPropertyWithOptions(request, runtime);
}

model CheckUsedPropertyValueRequest {
  propertyId?: long(name='PropertyId'),
  propertyValueId?: long(name='PropertyValueId'),
}

model CheckUsedPropertyValueResponseBody = {
  requestId?: string(name='RequestId'),
  useCount?: long(name='UseCount'),
}

model CheckUsedPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckUsedPropertyValueResponseBody(name='body'),
}

async function checkUsedPropertyValueWithOptions(request: CheckUsedPropertyValueRequest, runtime: Util.RuntimeOptions): CheckUsedPropertyValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.propertyId)) {
    query['PropertyId'] = request.propertyId;
  }
  if (!Util.isUnset(request.propertyValueId)) {
    query['PropertyValueId'] = request.propertyValueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUsedPropertyValue',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkUsedPropertyValue(request: CheckUsedPropertyValueRequest): CheckUsedPropertyValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUsedPropertyValueWithOptions(request, runtime);
}

model CreatePropertyRequest {
  propertyKey?: string(name='PropertyKey'),
  propertyValues?: [ string ](name='PropertyValues'),
}

model CreatePropertyResponseBody = {
  createResult?: {
    propertyId?: long(name='PropertyId'),
    propertyKey?: string(name='PropertyKey'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          propertyId?: long(name='PropertyId'),
          propertyValue?: string(name='PropertyValue'),
        }
      ](name='FailedPropertyValues'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue'),
          propertyValueId?: long(name='PropertyValueId'),
        }
      ](name='SavePropertyValues'),
    }(name='SavePropertyValueModel'),
  }(name='CreateResult'),
  requestId?: string(name='RequestId'),
}

model CreatePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePropertyResponseBody(name='body'),
}

async function createPropertyWithOptions(request: CreatePropertyRequest, runtime: Util.RuntimeOptions): CreatePropertyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyKey)) {
    body['PropertyKey'] = request.propertyKey;
  }
  if (!Util.isUnset(request.propertyValues)) {
    body['PropertyValues'] = request.propertyValues;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProperty(request: CreatePropertyRequest): CreatePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPropertyWithOptions(request, runtime);
}

model CreateUsersRequest {
  password?: string(name='Password'),
  users?: [ 
    {
      email?: string(name='Email'),
      endUserId?: string(name='EndUserId'),
      orgId?: string(name='OrgId'),
      ownerType?: string(name='OwnerType'),
      password?: string(name='Password'),
      phone?: string(name='Phone'),
      remark?: string(name='Remark'),
    }
  ](name='Users'),
}

model CreateUsersResponseBody = {
  createResult?: {
    createdUsers?: [ 
      {
        email?: string(name='Email'),
        endUserId?: string(name='EndUserId'),
        phone?: string(name='Phone'),
        remark?: string(name='Remark'),
      }
    ](name='CreatedUsers'),
    failedUsers?: [ 
      {
        email?: string(name='Email'),
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
        phone?: string(name='Phone'),
      }
    ](name='FailedUsers'),
  }(name='CreateResult'),
  requestId?: string(name='RequestId'),
}

model CreateUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUsersResponseBody(name='body'),
}

async function createUsersWithOptions(request: CreateUsersRequest, runtime: Util.RuntimeOptions): CreateUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUsers(request: CreateUsersRequest): CreateUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUsersWithOptions(request, runtime);
}

model DeleteUserPropertyValueRequest {
  propertyId?: long(name='PropertyId'),
  propertyValueId?: long(name='PropertyValueId'),
  userId?: long(name='UserId'),
}

model DeleteUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserPropertyValueResponseBody(name='body'),
}

async function deleteUserPropertyValueWithOptions(request: DeleteUserPropertyValueRequest, runtime: Util.RuntimeOptions): DeleteUserPropertyValueResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyId)) {
    body['PropertyId'] = request.propertyId;
  }
  if (!Util.isUnset(request.propertyValueId)) {
    body['PropertyValueId'] = request.propertyValueId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserPropertyValue',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserPropertyValue(request: DeleteUserPropertyValueRequest): DeleteUserPropertyValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserPropertyValueWithOptions(request, runtime);
}

model DescribeMfaDevicesRequest {
  endUserIds?: [ string ](name='EndUserIds'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  serialNumbers?: [ string ](name='SerialNumbers'),
}

model DescribeMfaDevicesResponseBody = {
  mfaDevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails'),
      deviceType?: string(name='DeviceType'),
      email?: string(name='Email'),
      endUserId?: string(name='EndUserId'),
      gmtEnabled?: string(name='GmtEnabled'),
      gmtUnlock?: string(name='GmtUnlock'),
      id?: long(name='Id'),
      serialNumber?: string(name='SerialNumber'),
      status?: string(name='Status'),
    }
  ](name='MfaDevices'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeMfaDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMfaDevicesResponseBody(name='body'),
}

async function describeMfaDevicesWithOptions(request: DescribeMfaDevicesRequest, runtime: Util.RuntimeOptions): DescribeMfaDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.serialNumbers)) {
    query['SerialNumbers'] = request.serialNumbers;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMfaDevices',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMfaDevices(request: DescribeMfaDevicesRequest): DescribeMfaDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMfaDevicesWithOptions(request, runtime);
}

model DescribeUsersRequest {
  endUserIds?: [ string ](name='EndUserIds'),
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds'),
  filter?: string(name='Filter'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orgId?: string(name='OrgId'),
}

model DescribeUsersResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  users?: [ 
    {
      email?: string(name='Email'),
      endUserId?: string(name='EndUserId'),
      id?: long(name='Id'),
      isTenantManager?: boolean(name='IsTenantManager'),
      orgId?: string(name='OrgId'),
      ownerType?: string(name='OwnerType'),
      phone?: string(name='Phone'),
      remark?: string(name='Remark'),
      status?: long(name='Status'),
      wyId?: string(name='WyId'),
    }
  ](name='Users'),
}

model DescribeUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsersResponseBody(name='body'),
}

async function describeUsersWithOptions(request: DescribeUsersRequest, runtime: Util.RuntimeOptions): DescribeUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endUserIds)) {
    body['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.excludeEndUserIds)) {
    body['ExcludeEndUserIds'] = request.excludeEndUserIds;
  }
  if (!Util.isUnset(request.orgId)) {
    body['OrgId'] = request.orgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersWithOptions(request, runtime);
}

model FilterUsersRequest {
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds'),
  filter?: string(name='Filter'),
  includeDesktopCount?: boolean(name='IncludeDesktopCount'),
  includeDesktopGroupCount?: boolean(name='IncludeDesktopGroupCount'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orderParam?: {
    orderField?: string(name='OrderField'),
    orderType?: string(name='OrderType'),
  }(name='OrderParam'),
  orgId?: string(name='OrgId'),
  ownerType?: string(name='OwnerType'),
  propertyFilterParam?: [ 
    {
      propertyId?: long(name='PropertyId'),
      propertyValueIds?: string(name='PropertyValueIds'),
    }
  ](name='PropertyFilterParam'),
  propertyKeyValueFilterParam?: [ 
    {
      propertyKey?: string(name='PropertyKey'),
      propertyValues?: string(name='PropertyValues'),
    }
  ](name='PropertyKeyValueFilterParam'),
}

model FilterUsersShrinkRequest {
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds'),
  filter?: string(name='Filter'),
  includeDesktopCount?: boolean(name='IncludeDesktopCount'),
  includeDesktopGroupCount?: boolean(name='IncludeDesktopGroupCount'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  orderParamShrink?: string(name='OrderParam'),
  orgId?: string(name='OrgId'),
  ownerType?: string(name='OwnerType'),
  propertyFilterParam?: [ 
    {
      propertyId?: long(name='PropertyId'),
      propertyValueIds?: string(name='PropertyValueIds'),
    }
  ](name='PropertyFilterParam'),
  propertyKeyValueFilterParam?: [ 
    {
      propertyKey?: string(name='PropertyKey'),
      propertyValues?: string(name='PropertyValues'),
    }
  ](name='PropertyKeyValueFilterParam'),
}

model FilterUsersResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  users?: [ 
    {
      desktopCount?: long(name='DesktopCount'),
      desktopGroupCount?: long(name='DesktopGroupCount'),
      email?: string(name='Email'),
      endUserId?: string(name='EndUserId'),
      externalInfo?: {
        externalName?: string(name='ExternalName'),
        jobNumber?: string(name='JobNumber'),
      }(name='ExternalInfo'),
      id?: long(name='Id'),
      isTenantManager?: boolean(name='IsTenantManager'),
      ownerType?: string(name='OwnerType'),
      phone?: string(name='Phone'),
      remark?: string(name='Remark'),
      status?: long(name='Status'),
      userSetPropertiesModels?: [ 
        {
          propertyId?: long(name='PropertyId'),
          propertyKey?: string(name='PropertyKey'),
          propertyType?: int32(name='PropertyType'),
          propertyValues?: [ 
            {
              propertyValue?: string(name='PropertyValue'),
              propertyValueId?: long(name='PropertyValueId'),
            }
          ](name='PropertyValues'),
          userId?: long(name='UserId'),
          userName?: string(name='UserName'),
        }
      ](name='UserSetPropertiesModels'),
    }
  ](name='Users'),
}

model FilterUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FilterUsersResponseBody(name='body'),
}

async function filterUsersWithOptions(tmpReq: FilterUsersRequest, runtime: Util.RuntimeOptions): FilterUsersResponse {
  Util.validateModel(tmpReq);
  var request = new FilterUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.orderParam)) {
    request.orderParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderParam, 'OrderParam', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.excludeEndUserIds)) {
    query['ExcludeEndUserIds'] = request.excludeEndUserIds;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.includeDesktopCount)) {
    query['IncludeDesktopCount'] = request.includeDesktopCount;
  }
  if (!Util.isUnset(request.includeDesktopGroupCount)) {
    query['IncludeDesktopGroupCount'] = request.includeDesktopGroupCount;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderParamShrink)) {
    query['OrderParam'] = request.orderParamShrink;
  }
  if (!Util.isUnset(request.orgId)) {
    query['OrgId'] = request.orgId;
  }
  if (!Util.isUnset(request.ownerType)) {
    query['OwnerType'] = request.ownerType;
  }
  if (!Util.isUnset(request.propertyFilterParam)) {
    query['PropertyFilterParam'] = request.propertyFilterParam;
  }
  if (!Util.isUnset(request.propertyKeyValueFilterParam)) {
    query['PropertyKeyValueFilterParam'] = request.propertyKeyValueFilterParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FilterUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function filterUsers(request: FilterUsersRequest): FilterUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return filterUsersWithOptions(request, runtime);
}

model ListPropertyResponseBody = {
  nextToken?: string(name='NextToken'),
  properties?: [ 
    {
      propertyId?: long(name='PropertyId'),
      propertyKey?: string(name='PropertyKey'),
      propertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue'),
          propertyValueId?: long(name='PropertyValueId'),
        }
      ](name='PropertyValues'),
    }
  ](name='Properties'),
  requestId?: string(name='RequestId'),
}

model ListPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPropertyResponseBody(name='body'),
}

async function listPropertyWithOptions(runtime: Util.RuntimeOptions): ListPropertyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProperty(): ListPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPropertyWithOptions(runtime);
}

model ListPropertyValueRequest {
  propertyId?: long(name='PropertyId'),
}

model ListPropertyValueResponseBody = {
  propertyValueInfos?: [ 
    {
      propertyValue?: string(name='PropertyValue'),
      propertyValueId?: long(name='PropertyValueId'),
    }
  ](name='PropertyValueInfos'),
  requestId?: string(name='RequestId'),
}

model ListPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPropertyValueResponseBody(name='body'),
}

async function listPropertyValueWithOptions(request: ListPropertyValueRequest, runtime: Util.RuntimeOptions): ListPropertyValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.propertyId)) {
    query['PropertyId'] = request.propertyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPropertyValue',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPropertyValue(request: ListPropertyValueRequest): ListPropertyValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPropertyValueWithOptions(request, runtime);
}

model LockMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber'),
}

model LockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model LockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockMfaDeviceResponseBody(name='body'),
}

async function lockMfaDeviceWithOptions(request: LockMfaDeviceRequest, runtime: Util.RuntimeOptions): LockMfaDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LockMfaDevice',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function lockMfaDevice(request: LockMfaDeviceRequest): LockMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockMfaDeviceWithOptions(request, runtime);
}

model LockUsersRequest {
  users?: [ string ](name='Users'),
}

model LockUsersResponseBody = {
  lockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    lockedUsers?: [ string ](name='LockedUsers'),
  }(name='LockUsersResult'),
  requestId?: string(name='RequestId'),
}

model LockUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockUsersResponseBody(name='body'),
}

async function lockUsersWithOptions(request: LockUsersRequest, runtime: Util.RuntimeOptions): LockUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LockUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function lockUsers(request: LockUsersRequest): LockUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockUsersWithOptions(request, runtime);
}

model ModifyUserRequest {
  email?: string(name='Email'),
  endUserId?: string(name='EndUserId'),
  phone?: string(name='Phone'),
}

model ModifyUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUserResponseBody(name='body'),
}

async function modifyUserWithOptions(request: ModifyUserRequest, runtime: Util.RuntimeOptions): ModifyUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUser',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserWithOptions(request, runtime);
}

model QuerySyncStatusByAliUidResponseBody = {
  code?: string(name='Code'),
  data?: {
    aliUid?: long(name='AliUid'),
    corpId?: string(name='CorpId'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    id?: long(name='Id'),
    latestBeginTime?: string(name='LatestBeginTime'),
    latestEndTime?: string(name='LatestEndTime'),
    latestSuccessTime?: string(name='LatestSuccessTime'),
    status?: string(name='Status'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySyncStatusByAliUidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySyncStatusByAliUidResponseBody(name='body'),
}

async function querySyncStatusByAliUidWithOptions(runtime: Util.RuntimeOptions): QuerySyncStatusByAliUidResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QuerySyncStatusByAliUid',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySyncStatusByAliUid(): QuerySyncStatusByAliUidResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySyncStatusByAliUidWithOptions(runtime);
}

model RemoveMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber'),
}

model RemoveMfaDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveMfaDeviceResponseBody(name='body'),
}

async function removeMfaDeviceWithOptions(request: RemoveMfaDeviceRequest, runtime: Util.RuntimeOptions): RemoveMfaDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveMfaDevice',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeMfaDevice(request: RemoveMfaDeviceRequest): RemoveMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeMfaDeviceWithOptions(request, runtime);
}

model RemovePropertyRequest {
  propertyId?: long(name='PropertyId'),
}

model RemovePropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemovePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemovePropertyResponseBody(name='body'),
}

async function removePropertyWithOptions(request: RemovePropertyRequest, runtime: Util.RuntimeOptions): RemovePropertyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyId)) {
    body['PropertyId'] = request.propertyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeProperty(request: RemovePropertyRequest): RemovePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePropertyWithOptions(request, runtime);
}

model RemoveUsersRequest {
  users?: [ string ](name='Users'),
}

model RemoveUsersResponseBody = {
  removeUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    removedUsers?: [ string ](name='RemovedUsers'),
  }(name='RemoveUsersResult'),
  requestId?: string(name='RequestId'),
}

model RemoveUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUsersResponseBody(name='body'),
}

async function removeUsersWithOptions(request: RemoveUsersRequest, runtime: Util.RuntimeOptions): RemoveUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersWithOptions(request, runtime);
}

model ResetUserPasswordRequest {
  notifyType?: int32(name='NotifyType'),
  users?: [ string ](name='Users'),
}

model ResetUserPasswordResponseBody = {
  requestId?: string(name='RequestId'),
  resetUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    resetUsers?: [ string ](name='ResetUsers'),
  }(name='ResetUsersResult'),
}

model ResetUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetUserPasswordResponseBody(name='body'),
}

async function resetUserPasswordWithOptions(request: ResetUserPasswordRequest, runtime: Util.RuntimeOptions): ResetUserPasswordResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.notifyType)) {
    body['NotifyType'] = request.notifyType;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetUserPassword',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetUserPasswordWithOptions(request, runtime);
}

model SetUserPropertyValueRequest {
  propertyId?: long(name='PropertyId'),
  propertyValueId?: long(name='PropertyValueId'),
  userId?: long(name='UserId'),
  userName?: string(name='UserName'),
}

model SetUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetUserPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetUserPropertyValueResponseBody(name='body'),
}

async function setUserPropertyValueWithOptions(request: SetUserPropertyValueRequest, runtime: Util.RuntimeOptions): SetUserPropertyValueResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyId)) {
    body['PropertyId'] = request.propertyId;
  }
  if (!Util.isUnset(request.propertyValueId)) {
    body['PropertyValueId'] = request.propertyValueId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetUserPropertyValue',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setUserPropertyValue(request: SetUserPropertyValueRequest): SetUserPropertyValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return setUserPropertyValueWithOptions(request, runtime);
}

model SyncAllEduInfoResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncAllEduInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncAllEduInfoResponseBody(name='body'),
}

async function syncAllEduInfoWithOptions(runtime: Util.RuntimeOptions): SyncAllEduInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'SyncAllEduInfo',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncAllEduInfo(): SyncAllEduInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncAllEduInfoWithOptions(runtime);
}

model UnlockMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber'),
}

model UnlockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnlockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockMfaDeviceResponseBody(name='body'),
}

async function unlockMfaDeviceWithOptions(request: UnlockMfaDeviceRequest, runtime: Util.RuntimeOptions): UnlockMfaDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnlockMfaDevice',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockMfaDevice(request: UnlockMfaDeviceRequest): UnlockMfaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockMfaDeviceWithOptions(request, runtime);
}

model UnlockUsersRequest {
  users?: [ string ](name='Users'),
}

model UnlockUsersResponseBody = {
  requestId?: string(name='RequestId'),
  unlockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    unlockedUsers?: [ string ](name='UnlockedUsers'),
  }(name='UnlockUsersResult'),
}

model UnlockUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockUsersResponseBody(name='body'),
}

async function unlockUsersWithOptions(request: UnlockUsersRequest, runtime: Util.RuntimeOptions): UnlockUsersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnlockUsers',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockUsers(request: UnlockUsersRequest): UnlockUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockUsersWithOptions(request, runtime);
}

model UpdatePropertyRequest {
  propertyId?: long(name='PropertyId'),
  propertyKey?: string(name='PropertyKey'),
  propertyValues?: [ 
    {
      propertyValue?: string(name='PropertyValue'),
      propertyValueId?: long(name='PropertyValueId'),
    }
  ](name='PropertyValues'),
}

model UpdatePropertyResponseBody = {
  requestId?: string(name='RequestId'),
  updateResult?: {
    propertyId?: long(name='PropertyId'),
    propertyKey?: string(name='PropertyKey'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          propertyId?: long(name='PropertyId'),
          propertyValue?: string(name='PropertyValue'),
        }
      ](name='FailedPropertyValues'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue'),
          propertyValueId?: long(name='PropertyValueId'),
        }
      ](name='SavePropertyValues'),
    }(name='SavePropertyValueModel'),
  }(name='UpdateResult'),
}

model UpdatePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePropertyResponseBody(name='body'),
}

async function updatePropertyWithOptions(request: UpdatePropertyRequest, runtime: Util.RuntimeOptions): UpdatePropertyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.propertyId)) {
    body['PropertyId'] = request.propertyId;
  }
  if (!Util.isUnset(request.propertyKey)) {
    body['PropertyKey'] = request.propertyKey;
  }
  if (!Util.isUnset(request.propertyValues)) {
    body['PropertyValues'] = request.propertyValues;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProperty',
    version = '2021-03-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProperty(request: UpdatePropertyRequest): UpdatePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePropertyWithOptions(request, runtime);
}

