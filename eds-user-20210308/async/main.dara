/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eds-user';
  @version = '2021-03-08';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GroupResources {
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model WaIdPermissions {
  code?: string(name='Code'),
  isBasicChild?: boolean(name='IsBasicChild'),
  name?: string(name='Name'),
  subPermissions?: [
    WaIdPermissions
  ](name='SubPermissions'),
  type?: string(name='Type'),
}

model BatchSetDesktopManagerRequest {
  isDesktopManager?: string(name='IsDesktopManager', example='1', position='Body'),
  users: [ string ](name='Users', position='Body'),
}

model BatchSetDesktopManagerResponseBody = {
  requestId?: string(name='RequestId', example='868B8926-2E7A-5BE7-9897-E811E994****'),
}

model BatchSetDesktopManagerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchSetDesktopManagerResponseBody(name='body'),
}

async function batchSetDesktopManager(request: BatchSetDesktopManagerRequest): BatchSetDesktopManagerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetDesktopManager', 'POST', '/', 'json', true, 'form', request);
}

model CheckUsedPropertyRequest {
  propertyId: long(name='PropertyId', description='The ID of the property. You can call the [ListProperty](~~410890~~) operation to query the property ID.', example='390', position='Query'),
}

model CheckUsedPropertyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='22C97624-2405-54AC-BD44-A63FBE97CC2D'),
  useCount?: long(name='UseCount', description='The number of convenience users that are associated with the property.', example='7'),
}

model CheckUsedPropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUsedPropertyResponseBody(name='body'),
}

async function checkUsedProperty(request: CheckUsedPropertyRequest): CheckUsedPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUsedProperty', 'POST', '/', 'json', false, 'json', request);
}

model CheckUsedPropertyValueRequest {
  propertyId: long(name='PropertyId', description='The property ID. You can call the [ListProperty](~~ListProperty~~) operation to query property ID.', example='380', position='Query'),
  propertyValueId: long(name='PropertyValueId', description='The ID of the property value. You can call the [ListProperty](~~ListProperty~~) operation to query the ID of the property value.', example='978', position='Query'),
}

model CheckUsedPropertyValueResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  useCount?: long(name='UseCount', description='The number of convenience users that are associated with the property value.', example='1'),
}

model CheckUsedPropertyValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUsedPropertyValueResponseBody(name='body'),
}

/**
  * Before you call the operation, you can call the [ListProperty](~~410890~~) operation to query the existing user properties and their IDs (PropertyId) and values (PropertyValueId).
  *
 */
async function checkUsedPropertyValue(request: CheckUsedPropertyValueRequest): CheckUsedPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUsedPropertyValue', 'POST', '/', 'json', false, 'json', request);
}

model CreatePropertyRequest {
  propertyKey: string(name='PropertyKey', description='The property name.', example='department', position='Body'),
  propertyValues?: [ string ](name='PropertyValues', description='The values of the property. You can specify up to 50 values for a property.', position='Body'),
}

model CreatePropertyResponseBody = {
  createResult?: {
    propertyId?: long(name='PropertyId', description='The ID of the property.', example='390'),
    propertyKey?: string(name='PropertyKey', description='The name of the property.', example='department'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code.', example='ExistedPropertyValue'),
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='The property value is used by another property.'),
          propertyId?: long(name='PropertyId', description='The ID of the property value.', example='390'),
          propertyValue?: string(name='PropertyValue', description='The value of the property.', example='HR'),
        }
      ](name='FailedPropertyValues', description='The property values that failed to be created.'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', description='The value of the property.', example='HR'),
          propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='978'),
        }
      ](name='SavePropertyValues', description='Details of the property values that were created.'),
    }(name='SavePropertyValueModel', description='The result of creating the property value.'),
  }(name='CreateResult', description='The result of creating the property.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreatePropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePropertyResponseBody(name='body'),
}

async function createProperty(request: CreatePropertyRequest): CreatePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProperty', 'POST', '/', 'json', true, 'form', request);
}

model CreateUsersRequest {
  autoLockTime?: string(name='AutoLockTime', description='The date on which the convenience users are automatically locked.', example='2023-03-03', position='Query'),
  isLocalAdmin?: boolean(name='IsLocalAdmin', position='Query'),
  password?: string(name='Password', description='The initial password. If this parameter is left empty, an email for password reset is sent to the specified email address.', example='Test123****', maxLength=256, position='Body'),
  passwordExpireDays?: string(name='PasswordExpireDays', position='Query'),
  users: [ 
    {
      email?: string(name='Email', description='The email address of the convenience user. The email address is used to receive notifications about events such as desktop assignment. You must specify an email address or a mobile number to receive notifications.', example='username@example.com'),
      endUserId: string(name='EndUserId', description='The username of the convenience user. The name can contain lowercase letters, digits, and underscores (\\_), and must be 3 to 24 characters in length.', example='test1'),
      orgId?: string(name='OrgId', description='The organization to which the convenience user belongs.', example='1111****'),
      ownerType?: string(name='OwnerType', description='The type of the account ownership.

Valid values:

*   CreateFromManager: administrator-activated
*   Normal: user-activated', example='Normal'),
      password?: string(name='Password', description='The user password.

>  The password must be at least 10 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters (excluding spaces).', example='password1'),
      phone?: string(name='Phone', description='Mobile numbers are not supported on the international site (alibabacloud.com).', example='1381111****'),
      realNickName?: string(name='RealNickName', description='The display name of the end user.', example='Bean'),
      remark?: string(name='Remark', description='The remarks on the convenience user.', example='remark1'),
    }
  ](name='Users', description='The information about the convenience user.', example='CreateUsers', position='Body'),
}

model CreateUsersResponseBody = {
  createResult?: {
    createdUsers?: [ 
      {
        email?: string(name='Email', description='The email address of the end user.', example='username@example.com'),
        endUserId?: string(name='EndUserId', description='The name of the end user.', example='test1'),
        phone?: string(name='Phone', description='The mobile number of the end user.', example='1381111****'),
        realNickName?: string(name='RealNickName', description='The display name of the end user.', example='Bean'),
        remark?: string(name='Remark', description='The remarks of the end user.', example='remark1'),
      }
    ](name='CreatedUsers', description='Details of the created convenience users.'),
    failedUsers?: [ 
      {
        email?: string(name='Email', description='The email address of the end user.', example='username2@example.com'),
        endUserId?: string(name='EndUserId', description='The name of the end user.', example='test2'),
        errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='ExistedEndUserId'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The username test is used by another user.'),
        phone?: string(name='Phone', description='The mobile number of the end user.', example='1390000****'),
      }
    ](name='FailedUsers', description='Details of the convenience users that failed to be created.'),
  }(name='CreateResult', description='The result of user creation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUsersResponseBody(name='body'),
}

/**
  * Convenience users are dedicated Elastic Desktop Service (EDS) user accounts and are suitable for scenarios in which you do not need to connect to enterprise Active Directory (AD) systems. The information about a convenience user includes the username, email address, and mobile number. You must specify the username or email address.
  *
 */
async function createUsers(request: CreateUsersRequest): CreateUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUsers', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserPropertyValueRequest {
  propertyId: long(name='PropertyId', description='The property ID.', example='390', position='Body'),
  propertyValueId: long(name='PropertyValueId', description='The ID of the property value.', example='978', position='Body'),
  userId: long(name='UserId', description='The ID of the convenience user.', example='123', position='Body'),
}

model DeleteUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D6C62E40-F937-5803-B008-92E813399BA5'),
}

model DeleteUserPropertyValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserPropertyValueResponseBody(name='body'),
}

/**
  * Before you call this operation, you can call the FilterUsers operation to query the users that are associated with user properties.
  *
 */
async function deleteUserPropertyValue(request: DeleteUserPropertyValueRequest): DeleteUserPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserPropertyValue', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMfaDevicesRequest {
  adDomain?: string(name='AdDomain', description='The domain of the Active Directory (AD) workspace.', example='cn.misumi.pri', position='Query'),
  endUserIds?: [ string ](name='EndUserIds', description='The usernames of the convenience users.', example='test', position='Query'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries to return. Valid values: 1 to 500.\\
Default value: 100.', example='100', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Set the value to the token that is obtained from the previous query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  serialNumbers?: [ string ](name='SerialNumbers', description='The serial numbers of the virtual MFA devices.', example='c2d9ae94-a64b-4a0d-8024-9519ca50****', position='Query'),
}

model DescribeMfaDevicesResponseBody = {
  mfaDevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails', description='The number of consecutive failures to bind the virtual MFA device, or the number of authentication failures based on the virtual MFA device.', example='0'),
      deviceType?: string(name='DeviceType', description='The type of the virtual MFA device. The value can only be TOTP_VIRTUAL. This value indicates that the virtual MFA device follows the Time-based One-time Password (TOTP) algorithm.', example='TOTP_VIRTUAL'),
      email?: string(name='Email', description='>  This parameter is not publicly available.', example='username@example.com'),
      endUserId?: string(name='EndUserId', description='The username of the convenience user that uses the virtual MFA device.', example='test'),
      gmtEnabled?: string(name='GmtEnabled', description='The time when the virtual MFA device was enabled. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-06-22T06:20:49Z'),
      gmtUnlock?: string(name='GmtUnlock', description='The time when the locked virtual MFA device was automatically unlocked. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-06-23T06:20:49Z'),
      id?: long(name='Id', description='>  This parameter is not publicly available.', example='36'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device. The serial number is unique for each device.', example='dc856334-446b-4035-bfbc-18af261e****'),
      status?: string(name='Status', description='The status of the virtual MFA device.

Valid values:

*   LOCKED

    <!-- -->

    <!-- -->

    <!-- -->

*   UNBOUND

    <!-- -->

    <!-- -->

    <!-- -->

*   NORMAL

    <!-- -->

    <!-- -->

    <!-- -->', example='NORMAL'),
    }
  ](name='MfaDevices', description='The information about the virtual MFA devices.'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAV3MpHK1AP0pfERHZN5pu6na6YlN9asMM31MsMcdQNpp'),
  requestId?: string(name='RequestId', description='The request ID.', example='33DBB8EC-6E68-4726-91C4-E09C59D9A7D8'),
}

model DescribeMfaDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMfaDevicesResponseBody(name='body'),
}

async function describeMfaDevices(request: DescribeMfaDevicesRequest): DescribeMfaDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMfaDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOrgsRequest {
  maxResults?: long(name='MaxResults', description='The maximum number of entries to return. Valid values: 1 to 100.\\
Default value: 100.', example='20', minimum=1, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. The return value is the value of the NextToken response parameter that was returned last time the DescribeOrgs operation was called.', example='AAAAAV3MpHK****', position='Query'),
  orgName?: string(name='OrgName', description='The name of the organization.', example='org****', position='Query'),
  parentOrgId?: string(name='ParentOrgId', description='The parent organization ID.', example='org-****', position='Query'),
}

model DescribeOrgsResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. The return value is the value of the NextToken response parameter that was returned last time the DescribeOrgs operation was called.', example='AAAAAV3MpHK****'),
  orgs?: [ 
    {
      orgId?: string(name='OrgId', description='The organization ID.', example='org-****'),
      orgName?: string(name='OrgName', description='The name of the organizational unit.', example='org****'),
      parentOrgId?: string(name='ParentOrgId', description='The parent organization ID.', example='org-****'),
    }
  ](name='Orgs', description='The organizations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0B4BB****'),
}

model DescribeOrgsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrgsResponseBody(name='body'),
}

/**
  * An organization is in a tree structure. The root organization ID is in the following format: org-aliyun-wy-org-id.
  *
 */
async function describeOrgs(request: DescribeOrgsRequest): DescribeOrgsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrgs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsersRequest {
  bizType?: string(name='BizType', position='Body'),
  endUserIds?: [ string ](name='EndUserIds', description='The list of usernames that must be exactly matched.', position='Body'),
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds', description='The list of usernames to be exactly excluded.', position='Body'),
  filter?: string(name='Filter', description='The string that is used for fuzzy search. You perform fuzzy search by username (EndUserId) and email address (Email). Wildcard characters (\\*) are supported. For example, if you set this parameter to `a*m`, usernames or email addresses that start with `a` and end with `m` are returned.', example='a*m', position='Query'),
  filterWithAssignedResources?: map[string]boolean(name='FilterWithAssignedResources', shrink='json', position='Body'),
  groupId?: string(name='GroupId', description='The ID of the organization in which you want to query convenience users.', example='ug-12341234****', position='Body'),
  maxResults?: long(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 500
*   Default value: 500', example='10', minimum=1, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.\\
If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the return value of NextToken to perform the next query.', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  orgId?: string(name='OrgId', description='The ID of the organization in which you want to query users.', example='org-4mdgc1cocc59z****', position='Body'),
  showExtras?: map[string]any(name='ShowExtras', shrink='json', position='Body'),
  solutionId?: string(name='SolutionId', position='Body'),
}

model DescribeUsersResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ 
    {
      address?: string(name='Address', description='The work address of the convenience user.', example='Hangzhou \\*\\*\\*'),
      avatar?: string(name='Avatar', description='The profile picture of the convenience user.', example='https://cdn.*****'),
      email?: string(name='Email', description='The email address of the convenience user.', example='username@example.com'),
      endUserId?: string(name='EndUserId', description='The username of the convenience user.', example='alice'),
      extras?: {
        assignedResourceCount?: map[string]any(name='AssignedResourceCount'),
      }(name='Extras'),
      groups?: [ 
        {
          groupId?: string(name='GroupId', description='The ID of the user group.', example='ug-12341234****'),
          groupName?: string(name='GroupName', description='The name of the user group.', example='User Group 1'),
        }
      ](name='Groups', description='The user groups to which the convenience user belongs.'),
      id?: long(name='Id', description='The ID of the convenience user.', example='4205**'),
      isTenantManager?: boolean(name='IsTenantManager', description='Indicates whether the convenience user is an administrator. If the convenience user is of the administrator-activated type, you must specify a user administrator. Notifications such as password reset on a client are sent to the email address or mobile number of the user administrator. For more information, see [Create a convenience user](~~214472~~).', example='true'),
      jobNumber?: string(name='JobNumber', description='The employee number of the convenience user.', example='A10000**'),
      nickName?: string(name='NickName', description='The nickname of the convenience user.', example='Lee'),
      orgId?: string(name='OrgId', description='The ID of the organization to which the convenience user belongs.

>  This parameter will be deprecated in the future.', example='org-4mdgc1cocc59z****'),
      orgs?: [ 
        {
          orgId?: string(name='OrgId', description='The organization ID.', example='org-4mdgc1cocc59z****'),
          orgName?: string(name='OrgName', description='The organization name.', example='Organization 1'),
        }
      ](name='Orgs', description='The organizations to which the convenience user belongs.'),
      ownerType?: string(name='OwnerType', description='The type of the convenience account.

*   Administrator-activated type: The administrator specifies the username and password of the convenience account. User notifications such as password reset notifications are sent to the email address or mobile number of the administrator.
*   User-activated type: The administrator specifies the username and the email address or mobile number of a convenience user. Notifications such as activation notifications that contain the default password are sent to the email address or mobile number of the convenience user.

Valid values:

*   CreateFromManager

    <!-- -->

    :

    <!-- -->

    administrator-activated

    <!-- -->

*   Normal

    <!-- -->

    :

    <!-- -->

    user-activated

    <!-- -->', example='Normal'),
      phone?: string(name='Phone', description='The mobile number of the convenience user. If you leave this parameter empty, the value of this parameter is not returned.', example='1381111****'),
      realNickName?: string(name='RealNickName'),
      remark?: string(name='Remark', description='The remarks on the convenience user.', example='TestUser'),
      status?: long(name='Status', description='The status of the convenience user.

Valid values:

*   0: The convenience user is normal.

    <!-- -->

    <!-- -->

    <!-- -->

*   9: The convenience user is locked.

    <!-- -->

    <!-- -->

    <!-- -->', example='0'),
      wyId?: string(name='WyId', description='The globally unique ID of the convenience user.', example='41fd1254d8f7****'),
    }
  ](name='Users', description='The information about the convenience users.'),
}

model DescribeUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsersResponseBody(name='body'),
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsers', 'POST', '/', 'json', true, 'form', request);
}

model FilterUsersRequest {
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds', description='The list of usernames to be precisely excluded.', position='Query'),
  filter?: string(name='Filter', description='The string that is used for fuzzy search. You can use usernames and email addresses to perform fuzzy search. Wildcard characters (\\*) are supported for this parameter. For example, if you set this parameter to a\\*m, the usernames or an email addresses that start with a or end with m are returned.', example='test', position='Query'),
  includeDesktopCount?: boolean(name='IncludeDesktopCount', description='Specifies whether to return the number of cloud desktops that are assigned to the convenience user.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  includeDesktopGroupCount?: boolean(name='IncludeDesktopGroupCount', description='Specifies whether to return the number of cloud desktop pools that are assigned to the convenience user.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. If you set this parameter to a value greater than 100, the system resets the value to 100.', example='10', minimum=1, maximum=200, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the returned NextToken value to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  orderParam?: {
    orderField?: string(name='OrderField', description='The parameter based on which to sort query results.

Valid values:

*   EndUserId: the username.
*   id: the ID of the user primary key.
*   gmt_created: the time when the convenience user was created.', example='id'),
    orderType?: string(name='OrderType', description='Specifies whether to sort query results in ascending or descending order.

Valid values:

*   ASC: ascending

    <!-- -->

    <!-- -->

    <!-- -->

*   DESC (default): descending

    <!-- -->

    <!-- -->

    <!-- -->', example='ASC'),
  }(name='OrderParam', description='The parameters that are used to sort query results.', shrink='json', position='Query'),
  orgId?: string(name='OrgId', description='The ID of the organization.', example='org-aliyun-wy-org-id', position='Query'),
  ownerType?: string(name='OwnerType', description='The type of the account ownership.', example='Normal', position='Query'),
  propertyFilterParam?: [ 
    {
      propertyId?: long(name='PropertyId', description='The ID of the property.', example='123'),
      propertyValueIds?: string(name='PropertyValueIds', description='The IDs of the property values.', example='test'),
    }
  ](name='PropertyFilterParam', description='The list of properties for fuzzy search.', position='Query'),
  propertyKeyValueFilterParam?: [ 
    {
      propertyKey?: string(name='PropertyKey', description='The property name.', example='job'),
      propertyValues?: string(name='PropertyValues', description='The property values.', example='dev'),
    }
  ](name='PropertyKeyValueFilterParam', description='The list of property names and property values.', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model FilterUsersResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the returned NextToken value to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='DBD276B5-00FF-5E04-8EF7-5CBA09BF112A'),
  users?: [ 
    {
      autoLockTime?: string(name='AutoLockTime'),
      desktopCount?: long(name='DesktopCount', description='The number of cloud desktops that are assigned to the convenience user.', example='1'),
      desktopGroupCount?: long(name='DesktopGroupCount', description='The number of cloud desktop pools that are assigned to the convenience user. This value is returned if you set `IncludeDesktopGroupCount` to `true`.', example='2'),
      email?: string(name='Email', description='The email address of the convenience user.', example='testName@example.com'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', description='Indicates whether the convenience user is a local administrator.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
      endUserId?: string(name='EndUserId', description='The username of the convenience user.', example='testName'),
      externalInfo?: {
        externalName?: string(name='ExternalName', description='The account that is associated with the convenience user.', example='test'),
        jobNumber?: string(name='JobNumber', description='The account, student ID, or employee ID that is associated with the convenience user.', example='030801'),
      }(name='ExternalInfo', description='The additional information about the convenience user.'),
      id?: long(name='Id', description='The ID of the convenience user.', example='12345'),
      isTenantManager?: boolean(name='IsTenantManager', description='Indicates whether the convenience user is a tenant administrator.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
      ownerType?: string(name='OwnerType', description='The type of the account ownership.

Valid values:

*   CreateFromManager: administrator-activated
*   Normal: user-activated', example='Normal'),
      passwordExpireDays?: int32(name='PasswordExpireDays'),
      passwordExpireRestDays?: int32(name='PasswordExpireRestDays'),
      phone?: string(name='Phone', description='The mobile number of the convenience user.', example='1381111****'),
      realNickName?: string(name='RealNickName', description='The nickname of the convenience user.', example='Oliver'),
      remark?: string(name='Remark', description='The remarks on the convenience user.', example='1'),
      status?: long(name='Status', description='The status of the convenience user.

Valid values:

*   0: The convenience user is normal.

    <!-- -->

    <!-- -->

    <!-- -->

*   9: The convenience user is locked.

    <!-- -->

    <!-- -->

    <!-- -->', example='0'),
      userSetPropertiesModels?: [ 
        {
          propertyId?: long(name='PropertyId', description='The property ID.', example='12'),
          propertyKey?: string(name='PropertyKey', description='The property name.', example='department'),
          propertyType?: int32(name='PropertyType', description='The property type.', example='2'),
          propertyValues?: [ 
            {
              propertyValue?: string(name='PropertyValue', description='The property value.', example='A'),
              propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='42'),
            }
          ](name='PropertyValues', description='The property values.'),
          userId?: long(name='UserId', description='The ID of the convenience user that is bound to the property.', example='12345'),
          userName?: string(name='UserName', description='The username of the convenience user that is bound to the property.', example='testName'),
        }
      ](name='UserSetPropertiesModels', description='The information about the properties.'),
    }
  ](name='Users', description='The information about the convenience user.'),
}

model FilterUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FilterUsersResponseBody(name='body'),
}

async function filterUsers(request: FilterUsersRequest): FilterUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FilterUsers', 'POST', '/', 'json', false, 'json', request);
}

model GetManagerInfoByAuthCodeRequest {
  authCode: string(name='AuthCode', description='The authorization code.', example='e49cd070452f0044813a467d4743****', position='Query'),
}

model GetManagerInfoByAuthCodeResponseBody = {
  orgId?: string(name='OrgId', description='The organization ID.', example='12345678901234****'),
  phone?: string(name='Phone', description='The mobile number.', example='1301234****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  teamName?: string(name='TeamName', description='The team name.', example='devteam'),
  userName?: string(name='UserName', description='The tenant name.', example='zhangsan'),
  waId?: long(name='WaId', description='The ID of the Elastic Desktop Service account.', example='12345678901234****'),
}

model GetManagerInfoByAuthCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetManagerInfoByAuthCodeResponseBody(name='body'),
}

async function getManagerInfoByAuthCode(request: GetManagerInfoByAuthCodeRequest): GetManagerInfoByAuthCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetManagerInfoByAuthCode', 'POST', '/', 'json', false, 'json', request);
}

model ListPropertyRequest {
}

model ListPropertyResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results have been returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  properties?: [ 
    {
      propertyId?: long(name='PropertyId', description='The ID of the property.', example='30'),
      propertyKey?: string(name='PropertyKey', description='The name of the property.', example='department'),
      propertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', description='The value of the property.', example='A'),
          propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='42'),
        }
      ](name='PropertyValues', description='Details about the property values.'),
    }
  ](name='Properties', description='The information about the properties.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListPropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPropertyResponseBody(name='body'),
}

async function listProperty(request: ListPropertyRequest): ListPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProperty', 'POST', '/', 'json', false, 'json', request);
}

model ListPropertyValueRequest {
  propertyId: long(name='PropertyId', description='The ID of the property. You can call the [ListProperty](~~410890~~) operation to query the property ID.', example='390', position='Query'),
}

model ListPropertyValueResponseBody = {
  propertyValueInfos?: [ 
    {
      propertyValue?: string(name='PropertyValue', description='The value of the property.', example='HR'),
      propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='978'),
    }
  ](name='PropertyValueInfos', description='Details about property values.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C52013A5-3422-5D1F-B22C-A57110972AD9'),
}

model ListPropertyValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPropertyValueResponseBody(name='body'),
}

async function listPropertyValue(request: ListPropertyValueRequest): ListPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPropertyValue', 'POST', '/', 'json', false, 'json', request);
}

model LockMfaDeviceRequest {
  adDomain?: string(name='AdDomain', description='The domain of the Active Directory (AD) workspace.', example='pg-jifenn.com', position='Query'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device. The serial number is unique for each device.', example='dc856334-446b-4035-bfbc-18af261e****', position='Query'),
}

model LockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='42FE70D8-4336-471B-8314-CCCFCE4159FD'),
}

model LockMfaDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LockMfaDeviceResponseBody(name='body'),
}

/**
  * After a virtual MFA device is locked, the status of the virtual MFA device changes to LOCKED. The convenience user to which the MFA device is bound cannot log on to the cloud desktop that resides in the workspace with the MFA feature enabled because the identity of the convenience user cannot be verified based on the virtual MFA device. You can call the [UnlockMfaDevice](~~286534~~) operation to unlock the virtual MFA device.
  *
 */
async function lockMfaDevice(request: LockMfaDeviceRequest): LockMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model LockUsersRequest {
  users: [ string ](name='Users', description='The usernames of the convenience users that you want to lock.', example='test1', position='Body'),
}

model LockUsersResponseBody = {
  lockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', description='The ID of the convenience user that failed to be locked.', example='test123'),
        errorCode?: string(name='ErrorCode', description='The error code.', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', description='The error message.', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers', description='The convenience users that failed to be locked.'),
    lockedUsers?: [ string ](name='LockedUsers', description='The convenience users that were locked.'),
  }(name='LockUsersResult', description='The result of the locking the convenience user.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LockUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LockUsersResponseBody(name='body'),
}

async function lockUsers(request: LockUsersRequest): LockUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockUsers', 'POST', '/', 'json', true, 'form', request);
}

model ModifyUserRequest {
  email?: string(name='Email', description='The email address of the convenience user. For a user-activated convenience user, the email address or mobile number must be verified. You can choose to verify the email address or the mobile number. For an administrator-activated convenience user, the email address and mobile number can be left empty.', example='username@example.com', position='Query'),
  endUserId: string(name='EndUserId', description='The name of the user.', example='Alice', position='Query'),
  phone?: string(name='Phone', description='The mobile number of the convenience user. For a user-activated convenience user, the email address or mobile number must be verified. You can choose to verify the email address or the mobile number. For an administrator-activated convenience user, the email address and mobile number can be left empty.

>  Accounts created on the International site (alibabacloud.com) do not support mobile number-based authentication.', example='1381111****', position='Query'),
}

model ModifyUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserResponseBody(name='body'),
}

async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUser', 'POST', '/', 'json', false, 'json', request);
}

model QuerySyncStatusByAliUidRequest {
}

model QuerySyncStatusByAliUidResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    aliUid?: long(name='AliUid', example='131239236086****'),
    corpId?: string(name='CorpId', example='cdrs948144195608****'),
    gmtCreated?: string(name='GmtCreated', example='2020-06-30 07:50:42'),
    gmtModified?: string(name='GmtModified', example='2022-03-02 14:27:39'),
    id?: long(name='Id', example='18500'),
    latestBeginTime?: string(name='LatestBeginTime', example='2022-03-02 14:31:39'),
    latestEndTime?: string(name='LatestEndTime', example='2022-03-02 16:13:12'),
    latestSuccessTime?: string(name='LatestSuccessTime', example='2022-03-02 18:24:01'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='True'),
}

model QuerySyncStatusByAliUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySyncStatusByAliUidResponseBody(name='body'),
}

async function querySyncStatusByAliUid(request: QuerySyncStatusByAliUidRequest): QuerySyncStatusByAliUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySyncStatusByAliUid', 'POST', '/', 'json', false, 'json', request);
}

model RemoveMfaDeviceRequest {
  adDomain?: string(name='AdDomain', description='The domain of the Active Directory (AD) workspace.', example='alpha.lftltd.net', position='Query'),
  serialNumber: string(name='SerialNumber', description='The serial number of the virtual MFA device. The serial number is unique for each device.', example='dc856334-446b-4035-bfbc-18af261e****', position='Query'),
}

model RemoveMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='FB550AAB-FB36-4A91-93F6-F4374AF65403'),
}

model RemoveMfaDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveMfaDeviceResponseBody(name='body'),
}

/**
  * If you remove a virtual MFA device that is bound to a convenience user, the convenience user can no longer use the virtual MFA device to log on to cloud desktops. Before the convenience user can log on to cloud desktops again, a new virtual MFA device must be bound to the convenience user.
  *
 */
async function removeMfaDevice(request: RemoveMfaDeviceRequest): RemoveMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model RemovePropertyRequest {
  propertyId: long(name='PropertyId', description='The ID of the property. You can call the [ListProperty](~~410890~~) operation to query the property ID.', example='390', position='Body'),
}

model RemovePropertyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemovePropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemovePropertyResponseBody(name='body'),
}

async function removeProperty(request: RemovePropertyRequest): RemovePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveProperty', 'POST', '/', 'json', true, 'form', request);
}

model RemoveUsersRequest {
  users: [ string ](name='Users', description='The usernames of the convenience users that you want to remove.', example='test1', position='Body'),
}

model RemoveUsersResponseBody = {
  removeUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', description='The ID of the convenience user that failed to be removed.', example='test2'),
        errorCode?: string(name='ErrorCode', description='The error code.', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', description='The error message.', example='test2 is an invalid username.'),
      }
    ](name='FailedUsers', description='The convenience users that failed to be removed.'),
    removedUsers?: [ string ](name='RemovedUsers', description='The convenience users that were removed.'),
  }(name='RemoveUsersResult', description='The result of removing the convenience user.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemoveUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUsersResponseBody(name='body'),
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsers', 'POST', '/', 'json', true, 'form', request);
}

model ResetUserPasswordRequest {
  notifyType?: int32(name='NotifyType', description='The method to notify the user after the password is reset.

> Alibaba Cloud accounts of the international site do not support sending notification through text messages.', example='1', position='Body'),
  users: [ string ](name='Users', description='The names of the convenience users whose passwords you want to reset.', example='test1', position='Body'),
}

model ResetUserPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='32D05B39-E6EE-4D7A-9FD0-762A26859D0D'),
  resetUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', description='The ID of the convenience user whose password failed to be reset.', example='test123'),
        errorCode?: string(name='ErrorCode', description='The error code.', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', description='The error message.', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers', description='The information about the convenience users whose passwords failed to be reset.'),
    resetUsers?: [ string ](name='ResetUsers', description='The convenience users to which the system sent a password reset email.'),
  }(name='ResetUsersResult', description='The result of resetting the password of the convenience user.'),
}

model ResetUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetUserPasswordResponseBody(name='body'),
}

async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model SetUserPropertyValueRequest {
  propertyId: long(name='PropertyId', description='The property ID. You can call the [ListProperty](~~ListProperty~~) operation to query the property ID.', example='390', position='Body'),
  propertyValueId: long(name='PropertyValueId', description='The ID of the property value. You can call the [ListProperty](~~ListProperty~~) operation to query the ID of the property value.', example='978', position='Body'),
  userId: long(name='UserId', description='The ID of the convenience user. You can call the [DescribeUsers](~~DescribeUsers~~) operation to query the user ID.', example='11', position='Body'),
  userName: string(name='UserName', description='The username of the convenience user.', example='test', position='Body'),
}

model SetUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetUserPropertyValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetUserPropertyValueResponseBody(name='body'),
}

async function setUserPropertyValue(request: SetUserPropertyValueRequest): SetUserPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserPropertyValue', 'POST', '/', 'json', true, 'form', request);
}

model SyncAllEduInfoRequest {
}

model SyncAllEduInfoResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='True'),
}

model SyncAllEduInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncAllEduInfoResponseBody(name='body'),
}

async function syncAllEduInfo(request: SyncAllEduInfoRequest): SyncAllEduInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncAllEduInfo', 'POST', '/', 'json', false, 'json', request);
}

model UnlockMfaDeviceRequest {
  adDomain?: string(name='AdDomain', description='The domain of the Active Directory (AD) workspace.', example='welab.co.id', position='Query'),
  serialNumber: string(name='SerialNumber', description='The serial number of the virtual MFA device. The serial number is unique for each device.', example='dc856334-446b-4035-bfbc-18af261e****', position='Query'),
}

model UnlockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9BD39C60-4E38-43BE-BA2F-69136C6C5190'),
}

model UnlockMfaDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnlockMfaDeviceResponseBody(name='body'),
}

async function unlockMfaDevice(request: UnlockMfaDeviceRequest): UnlockMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnlockUsersRequest {
  autoLockTime?: string(name='AutoLockTime', description='The date on which the convenience users are automatically locked.', example='2023-03-03', position='Query'),
  users: [ string ](name='Users', description='The usernames of the convenience users that you want to unlock.', example='test1', position='Body'),
}

model UnlockUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='023F4EC4-3602-4A3E-A514-4970847D59DB'),
  unlockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', description='The ID of the convenience user that failed to be unlocked.', example='test123'),
        errorCode?: string(name='ErrorCode', description='The error code.', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', description='The error message.', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers', description='The convenience users that failed to be unlocked.'),
    unlockedUsers?: [ string ](name='UnlockedUsers', description='The convenience users that were unlocked.'),
  }(name='UnlockUsersResult', description='The result of unlocking the convenience user.'),
}

model UnlockUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnlockUsersResponseBody(name='body'),
}

async function unlockUsers(request: UnlockUsersRequest): UnlockUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockUsers', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePropertyRequest {
  propertyId: long(name='PropertyId', description='The ID of the property that you want to modify. You can call the [ListProperty](~~410890~~) operation to query the property ID.', example='390', position='Body'),
  propertyKey: string(name='PropertyKey', description='The new property name.', example='testkey', position='Body'),
  propertyValues?: [ 
    {
      propertyValue?: string(name='PropertyValue', description='The new property value.', example='testvalue'),
      propertyValueId?: long(name='PropertyValueId', description='The ID of property value that you want to modify. You can call the [ListProperty](~~410890~~) operation to query the property value ID.', example='978'),
    }
  ](name='PropertyValues', description='The values of property.', position='Body'),
}

model UpdatePropertyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  updateResult?: {
    propertyId?: long(name='PropertyId', description='The ID of the property.', example='390'),
    propertyKey?: string(name='PropertyKey', description='The name of the property.', example='testkey2'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code.', example='ExistedPropertyValue'),
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='The property value is used by another property.'),
          propertyId?: long(name='PropertyId', description='The ID of the property.', example='390'),
          propertyValue?: string(name='PropertyValue', description='The value of the property.', example='testvalue'),
        }
      ](name='FailedPropertyValues', description='The property values that failed to be modified.'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', description='The value of the property.', example='testvalue2'),
          propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='978'),
        }
      ](name='SavePropertyValues', description='The property values that were modified.'),
    }(name='SavePropertyValueModel', description='The result of the property value modification.'),
  }(name='UpdateResult', description='The result of the modification.'),
}

model UpdatePropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePropertyResponseBody(name='body'),
}

async function updateProperty(request: UpdatePropertyRequest): UpdatePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProperty', 'POST', '/', 'json', true, 'form', request);
}

