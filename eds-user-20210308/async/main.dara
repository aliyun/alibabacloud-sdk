/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eds-user';
  @version = '2021-03-08';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model WaIdPermissions {
  code?: string(name='Code'),
  isBasicChild?: boolean(name='IsBasicChild'),
  name?: string(name='Name'),
  subPermissions?: [
    WaIdPermissions
  ](name='SubPermissions'),
  type?: string(name='Type'),
}

model CheckUsedPropertyRequest {
  propertyId: long(name='PropertyId', example='390', position='Query'),
}

model CheckUsedPropertyResponseBody = {
  requestId?: string(name='RequestId', example='22C97624-2405-54AC-BD44-A63FBE97CC2D'),
  useCount?: long(name='UseCount', example='7'),
}

model CheckUsedPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUsedPropertyResponseBody(name='body'),
}

async function checkUsedProperty(request: CheckUsedPropertyRequest): CheckUsedPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUsedProperty', 'POST', '/', 'json', false, 'json', request);
}

model CheckUsedPropertyValueRequest {
  propertyId: long(name='PropertyId', description='CheckUsedPropertyValue', example='380', position='Query'),
  propertyValueId: long(name='PropertyValueId', example='978', position='Query'),
}

model CheckUsedPropertyValueResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  useCount?: long(name='UseCount', example='1'),
}

model CheckUsedPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUsedPropertyValueResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **CheckUsedPropertyValue**.
  *
 */
async function checkUsedPropertyValue(request: CheckUsedPropertyValueRequest): CheckUsedPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUsedPropertyValue', 'POST', '/', 'json', false, 'json', request);
}

model CreatePropertyRequest {
  propertyKey: string(name='PropertyKey', example='department', position='Body'),
  propertyValues?: [ string ](name='PropertyValues', position='Body'),
}

model CreatePropertyResponseBody = {
  createResult?: {
    propertyId?: long(name='PropertyId', example='390'),
    propertyKey?: string(name='PropertyKey', example='department'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode', example='ExistedPropertyValue'),
          errorMessage?: string(name='ErrorMessage', example='The property value is used by another property.'),
          propertyId?: long(name='PropertyId', example='390'),
          propertyValue?: string(name='PropertyValue', example='HR'),
        }
      ](name='FailedPropertyValues'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', example='HR'),
          propertyValueId?: long(name='PropertyValueId', example='978'),
        }
      ](name='SavePropertyValues'),
    }(name='SavePropertyValueModel'),
  }(name='CreateResult'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreatePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePropertyResponseBody(name='body'),
}

async function createProperty(request: CreatePropertyRequest): CreatePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProperty', 'POST', '/', 'json', true, 'form', request);
}

model CreateUsersRequest {
  password?: string(name='Password', description='The initial password. If this parameter is left empty, an email for password reset is sent to the specified email address.', example='Test123****', maxLength=256, position='Body'),
  users: [ 
    {
      email?: string(name='Email', description='The email address of the end user. The email address is used to receive notifications about events such as desktop assignment. You must specify an email address or a mobile number to receive notifications.', example='username@example.com'),
      endUserId: string(name='EndUserId', description='The name of the end user. The name must be 3 to 24 characters in length, and can contain lowercase letters, digits, and underscores (\\_).', example='test1'),
      orgId?: string(name='OrgId', description='The organization to which the end user belongs.', example='1111****'),
      ownerType?: string(name='OwnerType', description='The type of the account ownership.', example='Normal'),
      password?: string(name='Password', description='The password of the end user.', example='password1'),
      phone?: string(name='Phone', description='Mobile numbers are not supported on the international site (alibabacloud.com).', example='1381111****'),
      remark?: string(name='Remark', description='The remarks of the end user.', example='remark1'),
    }
  ](name='Users', description='Details of the convenience users.', example='CreateUsers', position='Body'),
}

model CreateUsersResponseBody = {
  createResult?: {
    createdUsers?: [ 
      {
        email?: string(name='Email', description='The email address of the end user.', example='username@example.com'),
        endUserId?: string(name='EndUserId', description='The name of the end user.', example='test1'),
        phone?: string(name='Phone', description='The mobile number of the end user.', example='1381111****'),
        remark?: string(name='Remark', description='The remarks of the end user.', example='remark1'),
      }
    ](name='CreatedUsers', description='Details of the created convenience users.'),
    failedUsers?: [ 
      {
        email?: string(name='Email', description='The email address of the end user.', example='username2@example.com'),
        endUserId?: string(name='EndUserId', description='The name of the end user.', example='test2'),
        errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='ExistedEndUserId'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The username test is used by another user.'),
        phone?: string(name='Phone', description='The mobile number of the end user.', example='1390000****'),
      }
    ](name='FailedUsers', description='Details of the convenience users that failed to be created.'),
  }(name='CreateResult', description='The result of user creation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateUsersResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUsersResponseBody(name='body'),
}

/**
  * Convenience users are dedicated Elastic Desktop Service (EDS) user accounts and are suitable for scenarios in which you do not need to connect to enterprise Active Directory (AD) systems. The information about a convenience user includes the username, email address, and mobile number. You must specify the username or email address.
  *
 */
async function createUsers(request: CreateUsersRequest): CreateUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUsers', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserPropertyValueRequest {
  propertyId: long(name='PropertyId', description='DeleteUserPropertyValue', example='390', position='Body'),
  propertyValueId: long(name='PropertyValueId', example='978', position='Body'),
  userId: long(name='UserId', description='Dissociates a user property from a user.', example='123', position='Body'),
}

model DeleteUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId', example='D6C62E40-F937-5803-B008-92E813399BA5'),
}

model DeleteUserPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserPropertyValueResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **DeleteUserPropertyValue**.
  *
 */
async function deleteUserPropertyValue(request: DeleteUserPropertyValueRequest): DeleteUserPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserPropertyValue', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMfaDevicesRequest {
  endUserIds?: [ string ](name='EndUserIds', description='The list of username of convenience users.', example='test', position='Query'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries to return. Valid values: 1 to 500.

Default value: 100.', example='100', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value returned in the last call.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  serialNumbers?: [ string ](name='SerialNumbers', description='The list of serial numbers of the virtual MFA devices.', example='c2d9ae94-a64b-4a0d-8024-9519ca50****', position='Query'),
}

model DescribeMfaDevicesResponseBody = {
  mfaDevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails', description='The number of consecutive failures to bind the virtual MFA device, or the number of MFA failures based on the virtual MFA device.', example='0'),
      deviceType?: string(name='DeviceType', description='The types of the virtual MFA device. Set the value to TOTP_VIRTUAL, which indicates that the virtual MFA devices follow the Time-based One-time Password (TOTP) algorithm.', example='TOTP_VIRTUAL'),
      email?: string(name='Email', description='This parameter is unavailable.', example='username@example.com'),
      endUserId?: string(name='EndUserId', description='The username of the convenience user that uses the virtual MFA device.', example='test'),
      gmtEnabled?: string(name='GmtEnabled', description='The time when the virtual MFA device was enabled. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-06-22T06:20:49Z'),
      gmtUnlock?: string(name='GmtUnlock', description='The time when a locked virtual MFA device is automatically unlocked. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-06-23T06:20:49Z'),
      id?: long(name='Id', description='This parameter is unavailable.', example='36'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.', example='dc856334-446b-4035-bfbc-18af261e****'),
      status?: string(name='Status', description='The status of the virtual MFA device. Valid values:

*   UNBOUND
*   NORMAL
*   LOCKED', example='NORMAL'),
    }
  ](name='MfaDevices', description='Details about the virtual MFA devices.'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='AAAAAV3MpHK1AP0pfERHZN5pu6na6YlN9asMM31MsMcdQNpp'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='33DBB8EC-6E68-4726-91C4-E09C59D9A7D8'),
}

model DescribeMfaDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMfaDevicesResponseBody(name='body'),
}

async function describeMfaDevices(request: DescribeMfaDevicesRequest): DescribeMfaDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMfaDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsersRequest {
  endUserIds?: [ string ](name='EndUserIds', position='Body'),
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds', position='Body'),
  filter?: string(name='Filter', position='Query'),
  maxResults?: long(name='MaxResults', example='10', minimum=1, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orgId?: string(name='OrgId', position='Body'),
}

model DescribeUsersResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ 
    {
      email?: string(name='Email', example='username@example.com'),
      endUserId?: string(name='EndUserId'),
      id?: long(name='Id'),
      isTenantManager?: boolean(name='IsTenantManager', example='true'),
      nickName?: string(name='NickName'),
      orgId?: string(name='OrgId', example='org-4mdgc1cocc59z****'),
      ownerType?: string(name='OwnerType', example='Normal'),
      phone?: string(name='Phone', example='1381111****'),
      remark?: string(name='Remark'),
      status?: long(name='Status', example='0'),
      wyId?: string(name='WyId', example='41fd1254d8f7****'),
    }
  ](name='Users'),
}

model DescribeUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUsersResponseBody(name='body'),
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsers', 'POST', '/', 'json', true, 'form', request);
}

model FilterUsersRequest {
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds', description='The IDs of excluded users.', position='Query'),
  filter?: string(name='Filter', description='The string that you enter for a fuzzy search. You can enter a string to match the username or email address.', example='test', position='Query'),
  includeDesktopCount?: boolean(name='IncludeDesktopCount', description='Specifies whether to return information about cloud desktops that are assigned to the convenience user.', example='true', position='Query'),
  includeDesktopGroupCount?: boolean(name='IncludeDesktopGroupCount', description='Specifies whether to return the number of desktop groups that are assigned to the user.', example='false', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries to return on each page. If you set this parameter to a value greater than 100, the system resets the value to 100.', example='10', minimum=1, maximum=200, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. You do not need to configure this parameter if you call this operation for the first time. If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the returned NextToken value to perform the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  orderParam?: {
    orderField?: string(name='OrderField', description='The method that you want to use to sort query results.', example='id'),
    orderType?: string(name='OrderType', description='Specifies whether to sort query results in ascending or descending order.', example='ASC'),
  }(name='OrderParam', description='The parameter that is supported to sort query results.', shrink='json', position='Query'),
  orgId?: string(name='OrgId', description='The ID of the organization.', example='org-aliyun-wy-org-id', position='Query'),
  ownerType?: string(name='OwnerType', description='The type of the account ownership.', example='Normal', position='Query'),
  propertyFilterParam?: [ 
    {
      propertyId?: long(name='PropertyId', description='The ID of the property.', example='123'),
      propertyValueIds?: string(name='PropertyValueIds', description='The IDs of the property values.', example='test'),
    }
  ](name='PropertyFilterParam', description='Details of the user property that you want to perform fuzzy search.', position='Query'),
  propertyKeyValueFilterParam?: [ 
    {
      propertyKey?: string(name='PropertyKey', description='The name of the property.', example='job'),
      propertyValues?: string(name='PropertyValues', description='The values of the property.', example='dev'),
    }
  ](name='PropertyKeyValueFilterParam', description='Details of the properties and property values.', position='Query'),
}

model FilterUsersResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to query the next page. If not all results are returned in a query, a value is returned for the NextToken parameter. In this case, you can use the returned NextToken value to perform the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DBD276B5-00FF-5E04-8EF7-5CBA09BF112A'),
  users?: [ 
    {
      desktopCount?: long(name='DesktopCount', description='The number of cloud desktops that are assigned to the user.', example='1'),
      desktopGroupCount?: long(name='DesktopGroupCount', description='The number of authorized desktop groups that are owned by the user. This value is returned if you set `IncludeDesktopGroupCount` to `true`.', example='2'),
      email?: string(name='Email', description='The email address of the user.', example='testName@example.com'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', example='true'),
      endUserId?: string(name='EndUserId', description='The name of the user.', example='testName'),
      externalInfo?: {
        externalName?: string(name='ExternalName', description='The name of the external system account to which the user is connected.', example='test'),
        jobNumber?: string(name='JobNumber', description='The student ID or employee ID of the external system account that is connected to the user.', example='030801'),
      }(name='ExternalInfo', description='The additional information about the user.'),
      id?: long(name='Id', description='The ID of the user.', example='12345'),
      isTenantManager?: boolean(name='IsTenantManager', description='Specifies whether the user is a tenant administrator.', example='true'),
      ownerType?: string(name='OwnerType', description='The type of the account ownership.', example='Normal'),
      phone?: string(name='Phone', description='The mobile number of the user.', example='1381111****'),
      remark?: string(name='Remark', description='The remarks of the user.', example='1'),
      status?: long(name='Status', description='The status of the user.', example='0'),
      userSetPropertiesModels?: [ 
        {
          propertyId?: long(name='PropertyId', description='The ID of the property.', example='12'),
          propertyKey?: string(name='PropertyKey', description='The name of the property.', example='department'),
          propertyType?: int32(name='PropertyType', description='The ID of property.', example='2'),
          propertyValues?: [ 
            {
              propertyValue?: string(name='PropertyValue', description='The property value.', example='A'),
              propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='42'),
            }
          ](name='PropertyValues', description='Details of the property value.'),
          userId?: long(name='UserId', description='The ID of the user that is bound to the property.', example='12345'),
          userName?: string(name='UserName', description='The name of the user that is bound to the property.', example='testName'),
        }
      ](name='UserSetPropertiesModels', description='Details of the user properties.'),
    }
  ](name='Users', description='Details of the convenience users.'),
}

model FilterUsersResponse = {
  headers: map[string]string(name='headers'),
  body: FilterUsersResponseBody(name='body'),
}

async function filterUsers(request: FilterUsersRequest): FilterUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FilterUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListPropertyRequest {
}

model ListPropertyResponseBody = {
  nextToken?: string(name='NextToken', description='The information about the properties.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  properties?: [ 
    {
      propertyId?: long(name='PropertyId', description='The operation that you want to perform. Set the value to **ListProperty**.', example='30'),
      propertyKey?: string(name='PropertyKey', description='Queries all user properties within an Alibaba Cloud account.', example='department'),
      propertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', example='A'),
          propertyValueId?: long(name='PropertyValueId', example='42'),
        }
      ](name='PropertyValues', description='ListProperty'),
    }
  ](name='Properties', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='The ID of the property.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ListPropertyResponseBody(name='body'),
}

async function listProperty(request: ListPropertyRequest): ListPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProperty', 'POST', '/', 'json', false, 'json', request);
}

model ListPropertyValueRequest {
  propertyId: long(name='PropertyId', description='Queries property values of a user property.', example='390', position='Query'),
}

model ListPropertyValueResponseBody = {
  propertyValueInfos?: [ 
    {
      propertyValue?: string(name='PropertyValue', example='HR'),
      propertyValueId?: long(name='PropertyValueId', example='978'),
    }
  ](name='PropertyValueInfos'),
  requestId?: string(name='RequestId', description='ListPropertyValue', example='C52013A5-3422-5D1F-B22C-A57110972AD9'),
}

model ListPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  body: ListPropertyValueResponseBody(name='body'),
}

async function listPropertyValue(request: ListPropertyValueRequest): ListPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPropertyValue', 'POST', '/', 'json', false, 'json', request);
}

model LockMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber', example='dc856334-446b-4035-bfbc-18af261e****', position='Query'),
}

model LockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', example='42FE70D8-4336-471B-8314-CCCFCE4159FD'),
}

model LockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: LockMfaDeviceResponseBody(name='body'),
}

/**
  * Locks a virtual MFA device that is bound to a convenience user.
  *
 */
async function lockMfaDevice(request: LockMfaDeviceRequest): LockMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model LockUsersRequest {
  users: [ string ](name='Users', example='test1', position='Body'),
}

model LockUsersResponseBody = {
  lockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', example='test123'),
        errorCode?: string(name='ErrorCode', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers'),
    lockedUsers?: [ string ](name='LockedUsers'),
  }(name='LockUsersResult'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LockUsersResponse = {
  headers: map[string]string(name='headers'),
  body: LockUsersResponseBody(name='body'),
}

async function lockUsers(request: LockUsersRequest): LockUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockUsers', 'POST', '/', 'json', true, 'form', request);
}

model ModifyUserRequest {
  email?: string(name='Email', example='username@example.com', position='Query'),
  endUserId: string(name='EndUserId', example='Alice', position='Query'),
  phone?: string(name='Phone', example='1381111****', position='Query'),
}

model ModifyUserResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserResponseBody(name='body'),
}

async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUser', 'POST', '/', 'json', false, 'json', request);
}

model QuerySyncStatusByAliUidRequest {
}

model QuerySyncStatusByAliUidResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    aliUid?: long(name='AliUid', example='131239236086****'),
    corpId?: string(name='CorpId', example='cdrs948144195608****'),
    gmtCreated?: string(name='GmtCreated', example='2020-06-30 07:50:42'),
    gmtModified?: string(name='GmtModified', example='2022-03-02 14:27:39'),
    id?: long(name='Id', example='18500'),
    latestBeginTime?: string(name='LatestBeginTime', example='2022-03-02 14:31:39'),
    latestEndTime?: string(name='LatestEndTime', example='2022-03-02 16:13:12'),
    latestSuccessTime?: string(name='LatestSuccessTime', example='2022-03-02 18:24:01'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='True'),
}

model QuerySyncStatusByAliUidResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySyncStatusByAliUidResponseBody(name='body'),
}

async function querySyncStatusByAliUid(request: QuerySyncStatusByAliUidRequest): QuerySyncStatusByAliUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySyncStatusByAliUid', 'POST', '/', 'json', false, 'json', request);
}

model RemoveMfaDeviceRequest {
  serialNumber: string(name='SerialNumber', example='dc856334-446b-4035-bfbc-18af261e****', position='Query'),
}

model RemoveMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', example='FB550AAB-FB36-4A91-93F6-F4374AF65403'),
}

model RemoveMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveMfaDeviceResponseBody(name='body'),
}

async function removeMfaDevice(request: RemoveMfaDeviceRequest): RemoveMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model RemovePropertyRequest {
  propertyId: long(name='PropertyId', example='390', position='Body'),
}

model RemovePropertyResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemovePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePropertyResponseBody(name='body'),
}

async function removeProperty(request: RemovePropertyRequest): RemovePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveProperty', 'POST', '/', 'json', true, 'form', request);
}

model RemoveUsersRequest {
  users: [ string ](name='Users', example='test1', position='Body'),
}

model RemoveUsersResponseBody = {
  removeUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', example='test2'),
        errorCode?: string(name='ErrorCode', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', example='test2 is an invalid username.'),
      }
    ](name='FailedUsers'),
    removedUsers?: [ string ](name='RemovedUsers'),
  }(name='RemoveUsersResult'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemoveUsersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersResponseBody(name='body'),
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsers', 'POST', '/', 'json', true, 'form', request);
}

model ResetUserPasswordRequest {
  notifyType?: int32(name='NotifyType', example='1', position='Body'),
  users: [ string ](name='Users', example='test1', position='Body'),
}

model ResetUserPasswordResponseBody = {
  requestId?: string(name='RequestId', example='32D05B39-E6EE-4D7A-9FD0-762A26859D0D'),
  resetUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', example='test123'),
        errorCode?: string(name='ErrorCode', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers'),
    resetUsers?: [ string ](name='ResetUsers'),
  }(name='ResetUsersResult'),
}

model ResetUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetUserPasswordResponseBody(name='body'),
}

async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model SetUserPropertyValueRequest {
  propertyId: long(name='PropertyId', example='390', position='Body'),
  propertyValueId: long(name='PropertyValueId', example='978', position='Body'),
  userId: long(name='UserId', description='Associates a user property with a user.', example='11', position='Body'),
  userName: string(name='UserName', description='SetUserPropertyValue', example='test', position='Body'),
}

model SetUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetUserPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  body: SetUserPropertyValueResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function setUserPropertyValue(request: SetUserPropertyValueRequest): SetUserPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserPropertyValue', 'POST', '/', 'json', true, 'form', request);
}

model SyncAllEduInfoRequest {
}

model SyncAllEduInfoResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='True'),
}

model SyncAllEduInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SyncAllEduInfoResponseBody(name='body'),
}

async function syncAllEduInfo(request: SyncAllEduInfoRequest): SyncAllEduInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncAllEduInfo', 'POST', '/', 'json', false, 'json', request);
}

model UnlockMfaDeviceRequest {
  serialNumber: string(name='SerialNumber', example='dc856334-446b-4035-bfbc-18af261e****', position='Query'),
}

model UnlockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', example='9BD39C60-4E38-43BE-BA2F-69136C6C5190'),
}

model UnlockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockMfaDeviceResponseBody(name='body'),
}

async function unlockMfaDevice(request: UnlockMfaDeviceRequest): UnlockMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnlockUsersRequest {
  users: [ string ](name='Users', example='test1', position='Body'),
}

model UnlockUsersResponseBody = {
  requestId?: string(name='RequestId', example='023F4EC4-3602-4A3E-A514-4970847D59DB'),
  unlockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId', example='test123'),
        errorCode?: string(name='ErrorCode', example='InvalidUsername'),
        errorMessage?: string(name='ErrorMessage', example='test123 is an invalid username.'),
      }
    ](name='FailedUsers'),
    unlockedUsers?: [ string ](name='UnlockedUsers'),
  }(name='UnlockUsersResult'),
}

model UnlockUsersResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockUsersResponseBody(name='body'),
}

async function unlockUsers(request: UnlockUsersRequest): UnlockUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockUsers', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePropertyRequest {
  propertyId: long(name='PropertyId', description='The operation that you want to perform. Set the value to **UpdateProperty**.', example='390', position='Body'),
  propertyKey: string(name='PropertyKey', description='The property values that failed to be modified.', example='testkey', position='Body'),
  propertyValues?: [ 
    {
      propertyValue?: string(name='PropertyValue', description='The error code.', example='testvalue'),
      propertyValueId?: long(name='PropertyValueId', description='The ID of the property that you want to modify. You can call the [ListProperty](~~410890~~) operation to query the property ID.', example='978'),
    }
  ](name='PropertyValues', description='The new property value N.', position='Body'),
}

model UpdatePropertyResponseBody = {
  requestId?: string(name='RequestId', description='The name of the property.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  updateResult?: {
    propertyId?: long(name='PropertyId', description='The ID of the property.', example='390'),
    propertyKey?: string(name='PropertyKey', description='The ID of property value N that you want to modify. You can call the [ListProperty](~~410890~~) operation to query the property value ID.', example='testkey2'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode', example='ExistedPropertyValue'),
          errorMessage?: string(name='ErrorMessage', example='The property value is used by another property.'),
          propertyId?: long(name='PropertyId', example='390'),
          propertyValue?: string(name='PropertyValue', example='testvalue'),
        }
      ](name='FailedPropertyValues', description='UpdateProperty'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue', description='Modifies a user property.', example='testvalue2'),
          propertyValueId?: long(name='PropertyValueId', description='The value of the property.', example='978'),
        }
      ](name='SavePropertyValues', description='The ID of the request.'),
    }(name='SavePropertyValueModel', description='The property values that were modified.'),
  }(name='UpdateResult', description='The ID of the property.'),
}

model UpdatePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePropertyResponseBody(name='body'),
}

async function updateProperty(request: UpdatePropertyRequest): UpdatePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProperty', 'POST', '/', 'json', true, 'form', request);
}

