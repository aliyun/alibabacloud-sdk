/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eds-user';
  @version = '2021-03-08';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CheckUsedPropertyRequest {
  propertyId?: long(name='PropertyId', position='Query'),
}

model CheckUsedPropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  useCount?: long(name='UseCount'),
}

model CheckUsedPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUsedPropertyResponseBody(name='body'),
}

async function checkUsedProperty(request: CheckUsedPropertyRequest): CheckUsedPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUsedProperty', 'POST', '/', 'json', false, 'json', request);
}

model CheckUsedPropertyValueRequest {
  propertyId: long(name='PropertyId', position='Query'),
  propertyValueId: long(name='PropertyValueId', position='Query'),
}

model CheckUsedPropertyValueResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  useCount?: long(name='UseCount'),
}

model CheckUsedPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUsedPropertyValueResponseBody(name='body'),
}

async function checkUsedPropertyValue(request: CheckUsedPropertyValueRequest): CheckUsedPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUsedPropertyValue', 'POST', '/', 'json', false, 'json', request);
}

model CreatePropertyRequest {
  propertyKey?: string(name='PropertyKey', position='Body'),
  propertyValues?: [ string ](name='PropertyValues', position='Body'),
}

model CreatePropertyResponseBody = {
  createResult?: {
    propertyId?: long(name='PropertyId'),
    propertyKey?: string(name='PropertyKey'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          propertyId?: long(name='PropertyId'),
          propertyValue?: string(name='PropertyValue'),
        }
      ](name='FailedPropertyValues'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue'),
          propertyValueId?: long(name='PropertyValueId'),
        }
      ](name='SavePropertyValues'),
    }(name='SavePropertyValueModel'),
  }(name='CreateResult'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePropertyResponseBody(name='body'),
}

async function createProperty(request: CreatePropertyRequest): CreatePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProperty', 'POST', '/', 'json', true, 'form', request);
}

model CreateUsersRequest {
  password?: string(name='Password', position='Body'),
  users: [ 
    {
      email: string(name='Email'),
      endUserId: string(name='EndUserId'),
      phone?: string(name='Phone'),
    }
  ](name='Users', position='Body'),
}

model CreateUsersResponseBody = {
  createResult?: {
    createdUsers?: [ 
      {
        email?: string(name='Email'),
        endUserId?: string(name='EndUserId'),
        phone?: string(name='Phone'),
      }
    ](name='CreatedUsers'),
    failedUsers?: [ 
      {
        email?: string(name='Email'),
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
        phone?: string(name='Phone'),
      }
    ](name='FailedUsers'),
  }(name='CreateResult'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateUsersResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUsersResponseBody(name='body'),
}

async function createUsers(request: CreateUsersRequest): CreateUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUsers', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserPropertyValueRequest {
  propertyId?: long(name='PropertyId', position='Body'),
  propertyValueId?: long(name='PropertyValueId', position='Body'),
  userId?: long(name='UserId', position='Body'),
}

model DeleteUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteUserPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserPropertyValueResponseBody(name='body'),
}

async function deleteUserPropertyValue(request: DeleteUserPropertyValueRequest): DeleteUserPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserPropertyValue', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMfaDevicesRequest {
  endUserIds?: [ string ](name='EndUserIds', position='Query'),
  maxResults?: long(name='MaxResults', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  serialNumbers?: [ string ](name='SerialNumbers', position='Query'),
}

model DescribeMfaDevicesResponseBody = {
  mfaDevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails'),
      deviceType?: string(name='DeviceType'),
      email?: string(name='Email'),
      endUserId?: string(name='EndUserId'),
      gmtEnabled?: string(name='GmtEnabled'),
      gmtUnlock?: string(name='GmtUnlock'),
      id?: long(name='Id'),
      serialNumber?: string(name='SerialNumber'),
      status?: string(name='Status'),
    }
  ](name='MfaDevices', description='mfa device list'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeMfaDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMfaDevicesResponseBody(name='body'),
}

async function describeMfaDevices(request: DescribeMfaDevicesRequest): DescribeMfaDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMfaDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsersRequest {
  endUserIds?: [ string ](name='EndUserIds', position='Body'),
  excludeEndUserIds?: [ string ](name='ExcludeEndUserIds', position='Body'),
  filter?: string(name='Filter', position='Query'),
  maxResults?: long(name='MaxResults', minimum=1, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model DescribeUsersResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  users?: [ 
    {
      email?: string(name='Email'),
      endUserId?: string(name='EndUserId'),
      id?: long(name='Id'),
      phone?: string(name='Phone'),
      status?: long(name='Status'),
    }
  ](name='Users', description='users'),
}

model DescribeUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUsersResponseBody(name='body'),
}

async function describeUsers(request: DescribeUsersRequest): DescribeUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsers', 'POST', '/', 'json', true, 'form', request);
}

model FilterUsersRequest {
  filter?: string(name='Filter', position='Query'),
  includeDesktopCount?: boolean(name='IncludeDesktopCount', position='Query'),
  maxResults?: long(name='MaxResults', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  propertyFilterParam?: [ 
    {
      propertyId?: long(name='PropertyId'),
      propertyValueIds?: string(name='PropertyValueIds'),
    }
  ](name='PropertyFilterParam', position='Query'),
}

model FilterUsersResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  users?: [ 
    {
      desktopCount?: long(name='DesktopCount'),
      email?: string(name='Email'),
      endUserId?: string(name='EndUserId'),
      externalInfo?: {
        externalName?: string(name='ExternalName'),
      }(name='ExternalInfo'),
      id?: long(name='Id'),
      phone?: string(name='Phone'),
      status?: long(name='Status'),
      userSetPropertiesModels?: [ 
        {
          propertyId?: long(name='PropertyId'),
          propertyKey?: string(name='PropertyKey'),
          propertyType?: int32(name='PropertyType'),
          propertyValues?: [ 
            {
              propertyValue?: string(name='PropertyValue'),
              propertyValueId?: long(name='PropertyValueId'),
            }
          ](name='PropertyValues'),
          userId?: long(name='UserId'),
          userName?: string(name='UserName'),
        }
      ](name='UserSetPropertiesModels'),
    }
  ](name='Users', description='users'),
}

model FilterUsersResponse = {
  headers: map[string]string(name='headers'),
  body: FilterUsersResponseBody(name='body'),
}

async function filterUsers(request: FilterUsersRequest): FilterUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FilterUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListPropertyRequest {
}

model ListPropertyResponseBody = {
  nextToken?: string(name='NextToken'),
  properties?: [ 
    {
      propertyId?: long(name='PropertyId'),
      propertyKey?: string(name='PropertyKey'),
      propertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue'),
          propertyValueId?: long(name='PropertyValueId'),
        }
      ](name='PropertyValues'),
    }
  ](name='Properties', description='users'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ListPropertyResponseBody(name='body'),
}

async function listProperty(request: ListPropertyRequest): ListPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProperty', 'POST', '/', 'json', false, 'json', request);
}

model ListPropertyValueRequest {
  propertyId: long(name='PropertyId', position='Query'),
}

model ListPropertyValueResponseBody = {
  propertyValueInfos?: [ 
    {
      propertyValue?: string(name='PropertyValue'),
      propertyValueId?: long(name='PropertyValueId'),
    }
  ](name='PropertyValueInfos', description='users'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  body: ListPropertyValueResponseBody(name='body'),
}

async function listPropertyValue(request: ListPropertyValueRequest): ListPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPropertyValue', 'POST', '/', 'json', false, 'json', request);
}

model LockMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber', position='Query'),
}

model LockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model LockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: LockMfaDeviceResponseBody(name='body'),
}

async function lockMfaDevice(request: LockMfaDeviceRequest): LockMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model LockUsersRequest {
  users: [ string ](name='Users', position='Body'),
}

model LockUsersResponseBody = {
  lockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    lockedUsers?: [ string ](name='LockedUsers'),
  }(name='LockUsersResult'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model LockUsersResponse = {
  headers: map[string]string(name='headers'),
  body: LockUsersResponseBody(name='body'),
}

async function lockUsers(request: LockUsersRequest): LockUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockUsers', 'POST', '/', 'json', true, 'form', request);
}

model RemoveMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber', position='Query'),
}

model RemoveMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveMfaDeviceResponseBody(name='body'),
}

async function removeMfaDevice(request: RemoveMfaDeviceRequest): RemoveMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model RemovePropertyRequest {
  propertyId?: long(name='PropertyId', position='Body'),
}

model RemovePropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemovePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePropertyResponseBody(name='body'),
}

async function removeProperty(request: RemovePropertyRequest): RemovePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveProperty', 'POST', '/', 'json', true, 'form', request);
}

model RemoveUsersRequest {
  users?: [ string ](name='Users', position='Body'),
}

model RemoveUsersResponseBody = {
  removeUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    removedUsers?: [ string ](name='RemovedUsers'),
  }(name='RemoveUsersResult'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveUsersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersResponseBody(name='body'),
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsers', 'POST', '/', 'json', true, 'form', request);
}

model ResetUserPasswordRequest {
  users: [ string ](name='Users', position='Body'),
}

model ResetUserPasswordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  resetUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    resetUsers?: [ string ](name='ResetUsers'),
  }(name='ResetUsersResult'),
}

model ResetUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetUserPasswordResponseBody(name='body'),
}

async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model SetUserPropertyValueRequest {
  propertyId?: long(name='PropertyId', position='Body'),
  propertyValueId?: long(name='PropertyValueId', position='Body'),
  userId?: long(name='UserId', position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model SetUserPropertyValueResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SetUserPropertyValueResponse = {
  headers: map[string]string(name='headers'),
  body: SetUserPropertyValueResponseBody(name='body'),
}

async function setUserPropertyValue(request: SetUserPropertyValueRequest): SetUserPropertyValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserPropertyValue', 'POST', '/', 'json', true, 'form', request);
}

model UnlockMfaDeviceRequest {
  serialNumber?: string(name='SerialNumber', position='Query'),
}

model UnlockMfaDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UnlockMfaDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockMfaDeviceResponseBody(name='body'),
}

async function unlockMfaDevice(request: UnlockMfaDeviceRequest): UnlockMfaDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockMfaDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnlockUsersRequest {
  users: [ string ](name='Users', position='Body'),
}

model UnlockUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  unlockUsersResult?: {
    failedUsers?: [ 
      {
        endUserId?: string(name='EndUserId'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
      }
    ](name='FailedUsers'),
    unlockedUsers?: [ string ](name='UnlockedUsers'),
  }(name='UnlockUsersResult'),
}

model UnlockUsersResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockUsersResponseBody(name='body'),
}

async function unlockUsers(request: UnlockUsersRequest): UnlockUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockUsers', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePropertyRequest {
  propertyId: long(name='PropertyId', position='Body'),
  propertyKey: string(name='PropertyKey', position='Body'),
  propertyValues?: [ 
    {
      propertyValue?: string(name='PropertyValue'),
      propertyValueId?: long(name='PropertyValueId'),
    }
  ](name='PropertyValues', position='Body'),
}

model UpdatePropertyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  updateResult?: {
    propertyId?: long(name='PropertyId'),
    propertyKey?: string(name='PropertyKey'),
    savePropertyValueModel?: {
      failedPropertyValues?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          propertyId?: long(name='PropertyId'),
          propertyValue?: string(name='PropertyValue'),
        }
      ](name='FailedPropertyValues'),
      savePropertyValues?: [ 
        {
          propertyValue?: string(name='PropertyValue'),
          propertyValueId?: long(name='PropertyValueId'),
        }
      ](name='SavePropertyValues'),
    }(name='SavePropertyValueModel'),
  }(name='UpdateResult'),
}

model UpdatePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePropertyResponseBody(name='body'),
}

async function updateProperty(request: UpdatePropertyRequest): UpdatePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProperty', 'POST', '/', 'json', true, 'form', request);
}

