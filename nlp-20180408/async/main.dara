/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Nlp';
  @version = '2018-04-08';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EntityRequest {
  domain: string(name='Domain', position='Path'),
}

model EntityResponse = {
  headers: map[string]string(name='headers'),
}

async function entity(request: EntityRequest): EntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Entity', 'POST', '/nlp/api/entity/{Domain}', 'none', false, 'json', request);
}

model IERequest {
  domain: string(name='Domain', position='Path'),
}

model IEResponse = {
  headers: map[string]string(name='headers'),
}

async function iE(request: IERequest): IEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'IE', 'POST', '/nlp/api/ie/{Domain}', 'none', false, 'json', request);
}

model KWERequest {
  domain: string(name='Domain', position='Path'),
}

model KWEResponse = {
  headers: map[string]string(name='headers'),
}

async function kWE(request: KWERequest): KWEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'KWE', 'POST', '/nlp/api/kwe/{Domain}', 'none', false, 'json', request);
}

model ReviewAnalysisRequest {
  domain: string(name='Domain', position='Path'),
}

model ReviewAnalysisResponse = {
  headers: map[string]string(name='headers'),
}

async function reviewAnalysis(request: ReviewAnalysisRequest): ReviewAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReviewAnalysis', 'POST', '/nlp/api/reviewanalysis/{Domain}', 'none', false, 'json', request);
}

model SentimentRequest {
  domain: string(name='Domain', position='Path'),
}

model SentimentResponse = {
  headers: map[string]string(name='headers'),
}

async function sentiment(request: SentimentRequest): SentimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Sentiment', 'POST', '/nlp/api/sentiment/{Domain}', 'none', false, 'json', request);
}

model TextStructureRequest {
  domain: string(name='Domain', position='Path'),
}

model TextStructureResponse = {
  headers: map[string]string(name='headers'),
}

async function textStructure(request: TextStructureRequest): TextStructureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TextStructure', 'POST', '/nlp/api/textstructure/{Domain}', 'none', false, 'json', request);
}

model TranslateRequest {
  domain: string(name='Domain', position='Path'),
}

model TranslateResponse = {
  headers: map[string]string(name='headers'),
}

async function translate(request: TranslateRequest): TranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Translate', 'POST', '/nlp/api/translate/{Domain}', 'none', false, 'json', request);
}

model WordPosRequest {
  domain: string(name='Domain', position='Path'),
}

model WordPosResponse = {
  headers: map[string]string(name='headers'),
}

async function wordPos(request: WordPosRequest): WordPosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WordPos', 'POST', '/nlp/api/wordpos/{Domain}', 'none', false, 'json', request);
}

model WordSegmentRequest {
  domain: string(name='Domain', position='Path'),
}

model WordSegmentResponse = {
  headers: map[string]string(name='headers'),
}

async function wordSegment(request: WordSegmentRequest): WordSegmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WordSegment', 'POST', '/nlp/api/wordsegment/{Domain}', 'none', false, 'json', request);
}

